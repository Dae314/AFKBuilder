
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
var app = (function () {
    'use strict';

    function noop$1() { }
    const identity = x => x;
    function assign$3(tar, src) {
        // @ts-ignore
        for (const k in src)
            tar[k] = src[k];
        return tar;
    }
    function add_location(element, file, line, column, char) {
        element.__svelte_meta = {
            loc: { file, line, column, char }
        };
    }
    function run$2(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run$2);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    let src_url_equal_anchor;
    function src_url_equal(element_src, url) {
        if (!src_url_equal_anchor) {
            src_url_equal_anchor = document.createElement('a');
        }
        src_url_equal_anchor.href = url;
        return element_src === src_url_equal_anchor.href;
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function validate_store(store, name) {
        if (store != null && typeof store.subscribe !== 'function') {
            throw new Error(`'${name}' is not a store with a 'subscribe' method`);
        }
    }
    function subscribe(store, ...callbacks) {
        if (store == null) {
            return noop$1;
        }
        const unsub = store.subscribe(...callbacks);
        return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
    }
    function get_store_value(store) {
        let value;
        subscribe(store, _ => value = _)();
        return value;
    }
    function component_subscribe(component, store, callback) {
        component.$$.on_destroy.push(subscribe(store, callback));
    }
    function create_slot(definition, ctx, $$scope, fn) {
        if (definition) {
            const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
            return definition[0](slot_ctx);
        }
    }
    function get_slot_context(definition, ctx, $$scope, fn) {
        return definition[1] && fn
            ? assign$3($$scope.ctx.slice(), definition[1](fn(ctx)))
            : $$scope.ctx;
    }
    function get_slot_changes(definition, $$scope, dirty, fn) {
        if (definition[2] && fn) {
            const lets = definition[2](fn(dirty));
            if ($$scope.dirty === undefined) {
                return lets;
            }
            if (typeof lets === 'object') {
                const merged = [];
                const len = Math.max($$scope.dirty.length, lets.length);
                for (let i = 0; i < len; i += 1) {
                    merged[i] = $$scope.dirty[i] | lets[i];
                }
                return merged;
            }
            return $$scope.dirty | lets;
        }
        return $$scope.dirty;
    }
    function update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {
        if (slot_changes) {
            const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
            slot.p(slot_context, slot_changes);
        }
    }
    function get_all_dirty_from_scope($$scope) {
        if ($$scope.ctx.length > 32) {
            const dirty = [];
            const length = $$scope.ctx.length / 32;
            for (let i = 0; i < length; i++) {
                dirty[i] = -1;
            }
            return dirty;
        }
        return -1;
    }
    function null_to_empty(value) {
        return value == null ? '' : value;
    }
    function set_store_value(store, ret, value) {
        store.set(value);
        return ret;
    }

    const is_client = typeof window !== 'undefined';
    let now = is_client
        ? () => window.performance.now()
        : () => Date.now();
    let raf = is_client ? cb => requestAnimationFrame(cb) : noop$1;

    const tasks = new Set();
    function run_tasks(now) {
        tasks.forEach(task => {
            if (!task.c(now)) {
                tasks.delete(task);
                task.f();
            }
        });
        if (tasks.size !== 0)
            raf(run_tasks);
    }
    /**
     * Creates a new task that runs on each raf frame
     * until it returns a falsy value or is aborted
     */
    function loop$1(callback) {
        let task;
        if (tasks.size === 0)
            raf(run_tasks);
        return {
            promise: new Promise(fulfill => {
                tasks.add(task = { c: callback, f: fulfill });
            }),
            abort() {
                tasks.delete(task);
            }
        };
    }
    function append(target, node) {
        target.appendChild(node);
    }
    function get_root_for_style(node) {
        if (!node)
            return document;
        const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
        if (root.host) {
            return root;
        }
        return document;
    }
    function append_empty_stylesheet(node) {
        const style_element = element('style');
        append_stylesheet(get_root_for_style(node), style_element);
        return style_element;
    }
    function append_stylesheet(node, style) {
        append(node.head || node, style);
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function destroy_each(iterations, detaching) {
        for (let i = 0; i < iterations.length; i += 1) {
            if (iterations[i])
                iterations[i].d(detaching);
        }
    }
    function element(name) {
        return document.createElement(name);
    }
    function text$2(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text$2(' ');
    }
    function empty$3() {
        return text$2('');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function set_input_value(input, value) {
        input.value = value == null ? '' : value;
    }
    function set_style(node, key, value, important) {
        node.style.setProperty(key, value, important ? 'important' : '');
    }
    function toggle_class(element, name, toggle) {
        element.classList[toggle ? 'add' : 'remove'](name);
    }
    function custom_event(type, detail, bubbles = false) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, bubbles, false, detail);
        return e;
    }

    const active_docs = new Set();
    let active = 0;
    // https://github.com/darkskyapp/string-hash/blob/master/index.js
    function hash$1(str) {
        let hash = 5381;
        let i = str.length;
        while (i--)
            hash = ((hash << 5) - hash) ^ str.charCodeAt(i);
        return hash >>> 0;
    }
    function create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {
        const step = 16.666 / duration;
        let keyframes = '{\n';
        for (let p = 0; p <= 1; p += step) {
            const t = a + (b - a) * ease(p);
            keyframes += p * 100 + `%{${fn(t, 1 - t)}}\n`;
        }
        const rule = keyframes + `100% {${fn(b, 1 - b)}}\n}`;
        const name = `__svelte_${hash$1(rule)}_${uid}`;
        const doc = get_root_for_style(node);
        active_docs.add(doc);
        const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = append_empty_stylesheet(node).sheet);
        const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});
        if (!current_rules[name]) {
            current_rules[name] = true;
            stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
        }
        const animation = node.style.animation || '';
        node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;
        active += 1;
        return name;
    }
    function delete_rule(node, name) {
        const previous = (node.style.animation || '').split(', ');
        const next = previous.filter(name
            ? anim => anim.indexOf(name) < 0 // remove specific animation
            : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations
        );
        const deleted = previous.length - next.length;
        if (deleted) {
            node.style.animation = next.join(', ');
            active -= deleted;
            if (!active)
                clear_rules();
        }
    }
    function clear_rules() {
        raf(() => {
            if (active)
                return;
            active_docs.forEach(doc => {
                const stylesheet = doc.__svelte_stylesheet;
                let i = stylesheet.cssRules.length;
                while (i--)
                    stylesheet.deleteRule(i);
                doc.__svelte_rules = {};
            });
            active_docs.clear();
        });
    }

    function create_animation(node, from, fn, params) {
        if (!from)
            return noop$1;
        const to = node.getBoundingClientRect();
        if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)
            return noop$1;
        const { delay = 0, duration = 300, easing = identity, 
        // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?
        start: start_time = now() + delay, 
        // @ts-ignore todo:
        end = start_time + duration, tick = noop$1, css } = fn(node, { from, to }, params);
        let running = true;
        let started = false;
        let name;
        function start() {
            if (css) {
                name = create_rule(node, 0, 1, duration, delay, easing, css);
            }
            if (!delay) {
                started = true;
            }
        }
        function stop() {
            if (css)
                delete_rule(node, name);
            running = false;
        }
        loop$1(now => {
            if (!started && now >= start_time) {
                started = true;
            }
            if (started && now >= end) {
                tick(1, 0);
                stop();
            }
            if (!running) {
                return false;
            }
            if (started) {
                const p = now - start_time;
                const t = 0 + 1 * easing(p / duration);
                tick(t, 1 - t);
            }
            return true;
        });
        start();
        tick(0, 1);
        return stop;
    }
    function fix_position(node) {
        const style = getComputedStyle(node);
        if (style.position !== 'absolute' && style.position !== 'fixed') {
            const { width, height } = style;
            const a = node.getBoundingClientRect();
            node.style.position = 'absolute';
            node.style.width = width;
            node.style.height = height;
            add_transform(node, a);
        }
    }
    function add_transform(node, a) {
        const b = node.getBoundingClientRect();
        if (a.left !== b.left || a.top !== b.top) {
            const style = getComputedStyle(node);
            const transform = style.transform === 'none' ? '' : style.transform;
            node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;
        }
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error('Function called outside component initialization');
        return current_component;
    }
    function beforeUpdate(fn) {
        get_current_component().$$.before_update.push(fn);
    }
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }
    function afterUpdate(fn) {
        get_current_component().$$.after_update.push(fn);
    }
    function onDestroy(fn) {
        get_current_component().$$.on_destroy.push(fn);
    }
    function createEventDispatcher() {
        const component = get_current_component();
        return (type, detail) => {
            const callbacks = component.$$.callbacks[type];
            if (callbacks) {
                // TODO are there situations where events could be dispatched
                // in a server (non-DOM) environment?
                const event = custom_event(type, detail);
                callbacks.slice().forEach(fn => {
                    fn.call(component, event);
                });
            }
        };
    }
    function setContext(key, context) {
        get_current_component().$$.context.set(key, context);
    }
    function getContext(key) {
        return get_current_component().$$.context.get(key);
    }
    function getAllContexts() {
        return get_current_component().$$.context;
    }
    function hasContext(key) {
        return get_current_component().$$.context.has(key);
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function tick() {
        schedule_update();
        return resolved_promise;
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    let flushing = false;
    const seen_callbacks = new Set();
    function flush() {
        if (flushing)
            return;
        flushing = true;
        do {
            // first, call beforeUpdate functions
            // and update components
            for (let i = 0; i < dirty_components.length; i += 1) {
                const component = dirty_components[i];
                set_current_component(component);
                update(component.$$);
            }
            set_current_component(null);
            dirty_components.length = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        flushing = false;
        seen_callbacks.clear();
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }

    let promise;
    function wait() {
        if (!promise) {
            promise = Promise.resolve();
            promise.then(() => {
                promise = null;
            });
        }
        return promise;
    }
    function dispatch(node, direction, kind) {
        node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
    }
    const null_transition = { duration: 0 };
    function create_in_transition(node, fn, params) {
        let config = fn(node, params);
        let running = false;
        let animation_name;
        let task;
        let uid = 0;
        function cleanup() {
            if (animation_name)
                delete_rule(node, animation_name);
        }
        function go() {
            const { delay = 0, duration = 300, easing = identity, tick = noop$1, css } = config || null_transition;
            if (css)
                animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);
            tick(0, 1);
            const start_time = now() + delay;
            const end_time = start_time + duration;
            if (task)
                task.abort();
            running = true;
            add_render_callback(() => dispatch(node, true, 'start'));
            task = loop$1(now => {
                if (running) {
                    if (now >= end_time) {
                        tick(1, 0);
                        dispatch(node, true, 'end');
                        cleanup();
                        return running = false;
                    }
                    if (now >= start_time) {
                        const t = easing((now - start_time) / duration);
                        tick(t, 1 - t);
                    }
                }
                return running;
            });
        }
        let started = false;
        return {
            start() {
                if (started)
                    return;
                started = true;
                delete_rule(node);
                if (is_function(config)) {
                    config = config();
                    wait().then(go);
                }
                else {
                    go();
                }
            },
            invalidate() {
                started = false;
            },
            end() {
                if (running) {
                    cleanup();
                    running = false;
                }
            }
        };
    }
    function create_bidirectional_transition(node, fn, params, intro) {
        let config = fn(node, params);
        let t = intro ? 0 : 1;
        let running_program = null;
        let pending_program = null;
        let animation_name = null;
        function clear_animation() {
            if (animation_name)
                delete_rule(node, animation_name);
        }
        function init(program, duration) {
            const d = (program.b - t);
            duration *= Math.abs(d);
            return {
                a: t,
                b: program.b,
                d,
                duration,
                start: program.start,
                end: program.start + duration,
                group: program.group
            };
        }
        function go(b) {
            const { delay = 0, duration = 300, easing = identity, tick = noop$1, css } = config || null_transition;
            const program = {
                start: now() + delay,
                b
            };
            if (!b) {
                // @ts-ignore todo: improve typings
                program.group = outros;
                outros.r += 1;
            }
            if (running_program || pending_program) {
                pending_program = program;
            }
            else {
                // if this is an intro, and there's a delay, we need to do
                // an initial tick and/or apply CSS animation immediately
                if (css) {
                    clear_animation();
                    animation_name = create_rule(node, t, b, duration, delay, easing, css);
                }
                if (b)
                    tick(0, 1);
                running_program = init(program, duration);
                add_render_callback(() => dispatch(node, b, 'start'));
                loop$1(now => {
                    if (pending_program && now > pending_program.start) {
                        running_program = init(pending_program, duration);
                        pending_program = null;
                        dispatch(node, running_program.b, 'start');
                        if (css) {
                            clear_animation();
                            animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);
                        }
                    }
                    if (running_program) {
                        if (now >= running_program.end) {
                            tick(t = running_program.b, 1 - t);
                            dispatch(node, running_program.b, 'end');
                            if (!pending_program) {
                                // we're done
                                if (running_program.b) {
                                    // intro — we can tidy up immediately
                                    clear_animation();
                                }
                                else {
                                    // outro — needs to be coordinated
                                    if (!--running_program.group.r)
                                        run_all(running_program.group.c);
                                }
                            }
                            running_program = null;
                        }
                        else if (now >= running_program.start) {
                            const p = now - running_program.start;
                            t = running_program.a + running_program.d * easing(p / running_program.duration);
                            tick(t, 1 - t);
                        }
                    }
                    return !!(running_program || pending_program);
                });
            }
        }
        return {
            run(b) {
                if (is_function(config)) {
                    wait().then(() => {
                        // @ts-ignore
                        config = config();
                        go(b);
                    });
                }
                else {
                    go(b);
                }
            },
            end() {
                clear_animation();
                running_program = pending_program = null;
            }
        };
    }

    const globals = (typeof window !== 'undefined'
        ? window
        : typeof globalThis !== 'undefined'
            ? globalThis
            : global);

    function destroy_block(block, lookup) {
        block.d(1);
        lookup.delete(block.key);
    }
    function outro_and_destroy_block(block, lookup) {
        transition_out(block, 1, 1, () => {
            lookup.delete(block.key);
        });
    }
    function fix_and_destroy_block(block, lookup) {
        block.f();
        destroy_block(block, lookup);
    }
    function fix_and_outro_and_destroy_block(block, lookup) {
        block.f();
        outro_and_destroy_block(block, lookup);
    }
    function update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {
        let o = old_blocks.length;
        let n = list.length;
        let i = o;
        const old_indexes = {};
        while (i--)
            old_indexes[old_blocks[i].key] = i;
        const new_blocks = [];
        const new_lookup = new Map();
        const deltas = new Map();
        i = n;
        while (i--) {
            const child_ctx = get_context(ctx, list, i);
            const key = get_key(child_ctx);
            let block = lookup.get(key);
            if (!block) {
                block = create_each_block(key, child_ctx);
                block.c();
            }
            else if (dynamic) {
                block.p(child_ctx, dirty);
            }
            new_lookup.set(key, new_blocks[i] = block);
            if (key in old_indexes)
                deltas.set(key, Math.abs(i - old_indexes[key]));
        }
        const will_move = new Set();
        const did_move = new Set();
        function insert(block) {
            transition_in(block, 1);
            block.m(node, next);
            lookup.set(block.key, block);
            next = block.first;
            n--;
        }
        while (o && n) {
            const new_block = new_blocks[n - 1];
            const old_block = old_blocks[o - 1];
            const new_key = new_block.key;
            const old_key = old_block.key;
            if (new_block === old_block) {
                // do nothing
                next = new_block.first;
                o--;
                n--;
            }
            else if (!new_lookup.has(old_key)) {
                // remove old block
                destroy(old_block, lookup);
                o--;
            }
            else if (!lookup.has(new_key) || will_move.has(new_key)) {
                insert(new_block);
            }
            else if (did_move.has(old_key)) {
                o--;
            }
            else if (deltas.get(new_key) > deltas.get(old_key)) {
                did_move.add(new_key);
                insert(new_block);
            }
            else {
                will_move.add(old_key);
                o--;
            }
        }
        while (o--) {
            const old_block = old_blocks[o];
            if (!new_lookup.has(old_block.key))
                destroy(old_block, lookup);
        }
        while (n)
            insert(new_blocks[n - 1]);
        return new_blocks;
    }
    function validate_each_keys(ctx, list, get_context, get_key) {
        const keys = new Set();
        for (let i = 0; i < list.length; i++) {
            const key = get_key(get_context(ctx, list, i));
            if (keys.has(key)) {
                throw new Error('Cannot have duplicate keys in a keyed each');
            }
            keys.add(key);
        }
    }
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor, customElement) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        if (!customElement) {
            // onMount happens before the initial afterUpdate
            add_render_callback(() => {
                const new_on_destroy = on_mount.map(run$2).filter(is_function);
                if (on_destroy) {
                    on_destroy.push(...new_on_destroy);
                }
                else {
                    // Edge case - component was destroyed immediately,
                    // most likely as a result of a binding initialising
                    run_all(new_on_destroy);
                }
                component.$$.on_mount = [];
            });
        }
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop$1,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            on_disconnect: [],
            before_update: [],
            after_update: [],
            context: new Map(parent_component ? parent_component.$$.context : options.context || []),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false,
            root: options.target || parent_component.$$.root
        };
        append_styles && append_styles($$.root);
        let ready = false;
        $$.ctx = instance
            ? instance(component, options.props || {}, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor, options.customElement);
            flush();
        }
        set_current_component(parent_component);
    }
    /**
     * Base class for Svelte components. Used when dev=false.
     */
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop$1;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    function dispatch_dev(type, detail) {
        document.dispatchEvent(custom_event(type, Object.assign({ version: '3.41.0' }, detail), true));
    }
    function append_dev(target, node) {
        dispatch_dev('SvelteDOMInsert', { target, node });
        append(target, node);
    }
    function insert_dev(target, node, anchor) {
        dispatch_dev('SvelteDOMInsert', { target, node, anchor });
        insert(target, node, anchor);
    }
    function detach_dev(node) {
        dispatch_dev('SvelteDOMRemove', { node });
        detach(node);
    }
    function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
        const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];
        if (has_prevent_default)
            modifiers.push('preventDefault');
        if (has_stop_propagation)
            modifiers.push('stopPropagation');
        dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });
        const dispose = listen(node, event, handler, options);
        return () => {
            dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });
            dispose();
        };
    }
    function attr_dev(node, attribute, value) {
        attr(node, attribute, value);
        if (value == null)
            dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
        else
            dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
    }
    function prop_dev(node, property, value) {
        node[property] = value;
        dispatch_dev('SvelteDOMSetProperty', { node, property, value });
    }
    function set_data_dev(text, data) {
        data = '' + data;
        if (text.wholeText === data)
            return;
        dispatch_dev('SvelteDOMSetData', { node: text, data });
        text.data = data;
    }
    function validate_each_argument(arg) {
        if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
            let msg = '{#each} only iterates over array-like objects.';
            if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
                msg += ' You can use a spread to convert this iterable into an array.';
            }
            throw new Error(msg);
        }
    }
    function validate_slots(name, slot, keys) {
        for (const slot_key of Object.keys(slot)) {
            if (!~keys.indexOf(slot_key)) {
                console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
            }
        }
    }
    /**
     * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.
     */
    class SvelteComponentDev extends SvelteComponent {
        constructor(options) {
            if (!options || (!options.target && !options.$$inline)) {
                throw new Error("'target' is a required option");
            }
            super();
        }
        $destroy() {
            super.$destroy();
            this.$destroy = () => {
                console.warn('Component was already destroyed'); // eslint-disable-line no-console
            };
        }
        $capture_state() { }
        $inject_state() { }
    }
    /**
     * Base class to create strongly typed Svelte components.
     * This only exists for typing purposes and should be used in `.d.ts` files.
     *
     * ### Example:
     *
     * You have component library on npm called `component-library`, from which
     * you export a component called `MyComponent`. For Svelte+TypeScript users,
     * you want to provide typings. Therefore you create a `index.d.ts`:
     * ```ts
     * import { SvelteComponentTyped } from "svelte";
     * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}
     * ```
     * Typing this makes it possible for IDEs like VS Code with the Svelte extension
     * to provide intellisense and to use the component like this in a Svelte file
     * with TypeScript:
     * ```svelte
     * <script lang="ts">
     * 	import { MyComponent } from "component-library";
     * </script>
     * <MyComponent foo={'bar'} />
     * ```
     *
     * #### Why not make this part of `SvelteComponent(Dev)`?
     * Because
     * ```ts
     * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}
     * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;
     * ```
     * will throw a type error, so we need to separate the more strictly typed class.
     */
    class SvelteComponentTyped extends SvelteComponentDev {
        constructor(options) {
            super(options);
        }
    }

    var svelte = /*#__PURE__*/Object.freeze({
        __proto__: null,
        SvelteComponent: SvelteComponentDev,
        SvelteComponentTyped: SvelteComponentTyped,
        afterUpdate: afterUpdate,
        beforeUpdate: beforeUpdate,
        createEventDispatcher: createEventDispatcher,
        getAllContexts: getAllContexts,
        getContext: getContext,
        hasContext: hasContext,
        onDestroy: onDestroy,
        onMount: onMount,
        setContext: setContext,
        tick: tick
    });

    var commonjsGlobal$1 = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function getDefaultExportFromCjs (x) {
    	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    }

    function getAugmentedNamespace(n) {
    	if (n.__esModule) return n;
    	var a = Object.defineProperty({}, '__esModule', {value: true});
    	Object.keys(n).forEach(function (k) {
    		var d = Object.getOwnPropertyDescriptor(n, k);
    		Object.defineProperty(a, k, d.get ? d : {
    			enumerable: true,
    			get: function () {
    				return n[k];
    			}
    		});
    	});
    	return a;
    }

    function createCommonjsModule(fn) {
      var module = { exports: {} };
    	return fn(module, module.exports), module.exports;
    }

    /**
     * @license
     * Lodash <https://lodash.com/>
     * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
     * Released under MIT license <https://lodash.com/license>
     * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
     * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
     */

    var lodash = createCommonjsModule(function (module, exports) {
    (function() {

      /** Used as a safe reference for `undefined` in pre-ES5 environments. */
      var undefined$1;

      /** Used as the semantic version number. */
      var VERSION = '4.17.21';

      /** Used as the size to enable large array optimizations. */
      var LARGE_ARRAY_SIZE = 200;

      /** Error message constants. */
      var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
          FUNC_ERROR_TEXT = 'Expected a function',
          INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';

      /** Used to stand-in for `undefined` hash values. */
      var HASH_UNDEFINED = '__lodash_hash_undefined__';

      /** Used as the maximum memoize cache size. */
      var MAX_MEMOIZE_SIZE = 500;

      /** Used as the internal argument placeholder. */
      var PLACEHOLDER = '__lodash_placeholder__';

      /** Used to compose bitmasks for cloning. */
      var CLONE_DEEP_FLAG = 1,
          CLONE_FLAT_FLAG = 2,
          CLONE_SYMBOLS_FLAG = 4;

      /** Used to compose bitmasks for value comparisons. */
      var COMPARE_PARTIAL_FLAG = 1,
          COMPARE_UNORDERED_FLAG = 2;

      /** Used to compose bitmasks for function metadata. */
      var WRAP_BIND_FLAG = 1,
          WRAP_BIND_KEY_FLAG = 2,
          WRAP_CURRY_BOUND_FLAG = 4,
          WRAP_CURRY_FLAG = 8,
          WRAP_CURRY_RIGHT_FLAG = 16,
          WRAP_PARTIAL_FLAG = 32,
          WRAP_PARTIAL_RIGHT_FLAG = 64,
          WRAP_ARY_FLAG = 128,
          WRAP_REARG_FLAG = 256,
          WRAP_FLIP_FLAG = 512;

      /** Used as default options for `_.truncate`. */
      var DEFAULT_TRUNC_LENGTH = 30,
          DEFAULT_TRUNC_OMISSION = '...';

      /** Used to detect hot functions by number of calls within a span of milliseconds. */
      var HOT_COUNT = 800,
          HOT_SPAN = 16;

      /** Used to indicate the type of lazy iteratees. */
      var LAZY_FILTER_FLAG = 1,
          LAZY_MAP_FLAG = 2,
          LAZY_WHILE_FLAG = 3;

      /** Used as references for various `Number` constants. */
      var INFINITY = 1 / 0,
          MAX_SAFE_INTEGER = 9007199254740991,
          MAX_INTEGER = 1.7976931348623157e+308,
          NAN = 0 / 0;

      /** Used as references for the maximum length and index of an array. */
      var MAX_ARRAY_LENGTH = 4294967295,
          MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
          HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

      /** Used to associate wrap methods with their bit flags. */
      var wrapFlags = [
        ['ary', WRAP_ARY_FLAG],
        ['bind', WRAP_BIND_FLAG],
        ['bindKey', WRAP_BIND_KEY_FLAG],
        ['curry', WRAP_CURRY_FLAG],
        ['curryRight', WRAP_CURRY_RIGHT_FLAG],
        ['flip', WRAP_FLIP_FLAG],
        ['partial', WRAP_PARTIAL_FLAG],
        ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
        ['rearg', WRAP_REARG_FLAG]
      ];

      /** `Object#toString` result references. */
      var argsTag = '[object Arguments]',
          arrayTag = '[object Array]',
          asyncTag = '[object AsyncFunction]',
          boolTag = '[object Boolean]',
          dateTag = '[object Date]',
          domExcTag = '[object DOMException]',
          errorTag = '[object Error]',
          funcTag = '[object Function]',
          genTag = '[object GeneratorFunction]',
          mapTag = '[object Map]',
          numberTag = '[object Number]',
          nullTag = '[object Null]',
          objectTag = '[object Object]',
          promiseTag = '[object Promise]',
          proxyTag = '[object Proxy]',
          regexpTag = '[object RegExp]',
          setTag = '[object Set]',
          stringTag = '[object String]',
          symbolTag = '[object Symbol]',
          undefinedTag = '[object Undefined]',
          weakMapTag = '[object WeakMap]',
          weakSetTag = '[object WeakSet]';

      var arrayBufferTag = '[object ArrayBuffer]',
          dataViewTag = '[object DataView]',
          float32Tag = '[object Float32Array]',
          float64Tag = '[object Float64Array]',
          int8Tag = '[object Int8Array]',
          int16Tag = '[object Int16Array]',
          int32Tag = '[object Int32Array]',
          uint8Tag = '[object Uint8Array]',
          uint8ClampedTag = '[object Uint8ClampedArray]',
          uint16Tag = '[object Uint16Array]',
          uint32Tag = '[object Uint32Array]';

      /** Used to match empty string literals in compiled template source. */
      var reEmptyStringLeading = /\b__p \+= '';/g,
          reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
          reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

      /** Used to match HTML entities and HTML characters. */
      var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
          reUnescapedHtml = /[&<>"']/g,
          reHasEscapedHtml = RegExp(reEscapedHtml.source),
          reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

      /** Used to match template delimiters. */
      var reEscape = /<%-([\s\S]+?)%>/g,
          reEvaluate = /<%([\s\S]+?)%>/g,
          reInterpolate = /<%=([\s\S]+?)%>/g;

      /** Used to match property names within property paths. */
      var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
          reIsPlainProp = /^\w*$/,
          rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

      /**
       * Used to match `RegExp`
       * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
       */
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
          reHasRegExpChar = RegExp(reRegExpChar.source);

      /** Used to match leading whitespace. */
      var reTrimStart = /^\s+/;

      /** Used to match a single whitespace character. */
      var reWhitespace = /\s/;

      /** Used to match wrap detail comments. */
      var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
          reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
          reSplitDetails = /,? & /;

      /** Used to match words composed of alphanumeric characters. */
      var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

      /**
       * Used to validate the `validate` option in `_.template` variable.
       *
       * Forbids characters which could potentially change the meaning of the function argument definition:
       * - "()," (modification of function parameters)
       * - "=" (default value)
       * - "[]{}" (destructuring of function parameters)
       * - "/" (beginning of a comment)
       * - whitespace
       */
      var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;

      /** Used to match backslashes in property paths. */
      var reEscapeChar = /\\(\\)?/g;

      /**
       * Used to match
       * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
       */
      var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

      /** Used to match `RegExp` flags from their coerced string values. */
      var reFlags = /\w*$/;

      /** Used to detect bad signed hexadecimal string values. */
      var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

      /** Used to detect binary string values. */
      var reIsBinary = /^0b[01]+$/i;

      /** Used to detect host constructors (Safari). */
      var reIsHostCtor = /^\[object .+?Constructor\]$/;

      /** Used to detect octal string values. */
      var reIsOctal = /^0o[0-7]+$/i;

      /** Used to detect unsigned integer values. */
      var reIsUint = /^(?:0|[1-9]\d*)$/;

      /** Used to match Latin Unicode letters (excluding mathematical operators). */
      var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

      /** Used to ensure capturing order of template delimiters. */
      var reNoMatch = /($^)/;

      /** Used to match unescaped characters in compiled string literals. */
      var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

      /** Used to compose unicode character classes. */
      var rsAstralRange = '\\ud800-\\udfff',
          rsComboMarksRange = '\\u0300-\\u036f',
          reComboHalfMarksRange = '\\ufe20-\\ufe2f',
          rsComboSymbolsRange = '\\u20d0-\\u20ff',
          rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
          rsDingbatRange = '\\u2700-\\u27bf',
          rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
          rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
          rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
          rsPunctuationRange = '\\u2000-\\u206f',
          rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
          rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
          rsVarRange = '\\ufe0e\\ufe0f',
          rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

      /** Used to compose unicode capture groups. */
      var rsApos = "['\u2019]",
          rsAstral = '[' + rsAstralRange + ']',
          rsBreak = '[' + rsBreakRange + ']',
          rsCombo = '[' + rsComboRange + ']',
          rsDigits = '\\d+',
          rsDingbat = '[' + rsDingbatRange + ']',
          rsLower = '[' + rsLowerRange + ']',
          rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
          rsFitz = '\\ud83c[\\udffb-\\udfff]',
          rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
          rsNonAstral = '[^' + rsAstralRange + ']',
          rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
          rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
          rsUpper = '[' + rsUpperRange + ']',
          rsZWJ = '\\u200d';

      /** Used to compose unicode regexes. */
      var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
          rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
          rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
          rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
          reOptMod = rsModifier + '?',
          rsOptVar = '[' + rsVarRange + ']?',
          rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
          rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
          rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
          rsSeq = rsOptVar + reOptMod + rsOptJoin,
          rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
          rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

      /** Used to match apostrophes. */
      var reApos = RegExp(rsApos, 'g');

      /**
       * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
       * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
       */
      var reComboMark = RegExp(rsCombo, 'g');

      /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
      var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

      /** Used to match complex or compound words. */
      var reUnicodeWord = RegExp([
        rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
        rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
        rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
        rsUpper + '+' + rsOptContrUpper,
        rsOrdUpper,
        rsOrdLower,
        rsDigits,
        rsEmoji
      ].join('|'), 'g');

      /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
      var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

      /** Used to detect strings that need a more robust regexp to match words. */
      var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

      /** Used to assign default `context` object properties. */
      var contextProps = [
        'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
        'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
        'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
        'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
        '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
      ];

      /** Used to make template sourceURLs easier to identify. */
      var templateCounter = -1;

      /** Used to identify `toStringTag` values of typed arrays. */
      var typedArrayTags = {};
      typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
      typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
      typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
      typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
      typedArrayTags[uint32Tag] = true;
      typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
      typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
      typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
      typedArrayTags[errorTag] = typedArrayTags[funcTag] =
      typedArrayTags[mapTag] = typedArrayTags[numberTag] =
      typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
      typedArrayTags[setTag] = typedArrayTags[stringTag] =
      typedArrayTags[weakMapTag] = false;

      /** Used to identify `toStringTag` values supported by `_.clone`. */
      var cloneableTags = {};
      cloneableTags[argsTag] = cloneableTags[arrayTag] =
      cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
      cloneableTags[boolTag] = cloneableTags[dateTag] =
      cloneableTags[float32Tag] = cloneableTags[float64Tag] =
      cloneableTags[int8Tag] = cloneableTags[int16Tag] =
      cloneableTags[int32Tag] = cloneableTags[mapTag] =
      cloneableTags[numberTag] = cloneableTags[objectTag] =
      cloneableTags[regexpTag] = cloneableTags[setTag] =
      cloneableTags[stringTag] = cloneableTags[symbolTag] =
      cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
      cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
      cloneableTags[errorTag] = cloneableTags[funcTag] =
      cloneableTags[weakMapTag] = false;

      /** Used to map Latin Unicode letters to basic Latin letters. */
      var deburredLetters = {
        // Latin-1 Supplement block.
        '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
        '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
        '\xc7': 'C',  '\xe7': 'c',
        '\xd0': 'D',  '\xf0': 'd',
        '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
        '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
        '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
        '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
        '\xd1': 'N',  '\xf1': 'n',
        '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
        '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
        '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
        '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
        '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
        '\xc6': 'Ae', '\xe6': 'ae',
        '\xde': 'Th', '\xfe': 'th',
        '\xdf': 'ss',
        // Latin Extended-A block.
        '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
        '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
        '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
        '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
        '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
        '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
        '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
        '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
        '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
        '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
        '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
        '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
        '\u0134': 'J',  '\u0135': 'j',
        '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
        '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
        '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
        '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
        '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
        '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
        '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
        '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
        '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
        '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
        '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
        '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
        '\u0163': 't',  '\u0165': 't', '\u0167': 't',
        '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
        '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
        '\u0174': 'W',  '\u0175': 'w',
        '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
        '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
        '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
        '\u0132': 'IJ', '\u0133': 'ij',
        '\u0152': 'Oe', '\u0153': 'oe',
        '\u0149': "'n", '\u017f': 's'
      };

      /** Used to map characters to HTML entities. */
      var htmlEscapes = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#39;'
      };

      /** Used to map HTML entities to characters. */
      var htmlUnescapes = {
        '&amp;': '&',
        '&lt;': '<',
        '&gt;': '>',
        '&quot;': '"',
        '&#39;': "'"
      };

      /** Used to escape characters for inclusion in compiled string literals. */
      var stringEscapes = {
        '\\': '\\',
        "'": "'",
        '\n': 'n',
        '\r': 'r',
        '\u2028': 'u2028',
        '\u2029': 'u2029'
      };

      /** Built-in method references without a dependency on `root`. */
      var freeParseFloat = parseFloat,
          freeParseInt = parseInt;

      /** Detect free variable `global` from Node.js. */
      var freeGlobal = typeof commonjsGlobal$1 == 'object' && commonjsGlobal$1 && commonjsGlobal$1.Object === Object && commonjsGlobal$1;

      /** Detect free variable `self`. */
      var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

      /** Used as a reference to the global object. */
      var root = freeGlobal || freeSelf || Function('return this')();

      /** Detect free variable `exports`. */
      var freeExports = exports && !exports.nodeType && exports;

      /** Detect free variable `module`. */
      var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

      /** Detect the popular CommonJS extension `module.exports`. */
      var moduleExports = freeModule && freeModule.exports === freeExports;

      /** Detect free variable `process` from Node.js. */
      var freeProcess = moduleExports && freeGlobal.process;

      /** Used to access faster Node.js helpers. */
      var nodeUtil = (function() {
        try {
          // Use `util.types` for Node.js 10+.
          var types = freeModule && freeModule.require && freeModule.require('util').types;

          if (types) {
            return types;
          }

          // Legacy `process.binding('util')` for Node.js < 10.
          return freeProcess && freeProcess.binding && freeProcess.binding('util');
        } catch (e) {}
      }());

      /* Node.js helper references. */
      var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
          nodeIsDate = nodeUtil && nodeUtil.isDate,
          nodeIsMap = nodeUtil && nodeUtil.isMap,
          nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
          nodeIsSet = nodeUtil && nodeUtil.isSet,
          nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

      /*--------------------------------------------------------------------------*/

      /**
       * A faster alternative to `Function#apply`, this function invokes `func`
       * with the `this` binding of `thisArg` and the arguments of `args`.
       *
       * @private
       * @param {Function} func The function to invoke.
       * @param {*} thisArg The `this` binding of `func`.
       * @param {Array} args The arguments to invoke `func` with.
       * @returns {*} Returns the result of `func`.
       */
      function apply(func, thisArg, args) {
        switch (args.length) {
          case 0: return func.call(thisArg);
          case 1: return func.call(thisArg, args[0]);
          case 2: return func.call(thisArg, args[0], args[1]);
          case 3: return func.call(thisArg, args[0], args[1], args[2]);
        }
        return func.apply(thisArg, args);
      }

      /**
       * A specialized version of `baseAggregator` for arrays.
       *
       * @private
       * @param {Array} [array] The array to iterate over.
       * @param {Function} setter The function to set `accumulator` values.
       * @param {Function} iteratee The iteratee to transform keys.
       * @param {Object} accumulator The initial aggregated object.
       * @returns {Function} Returns `accumulator`.
       */
      function arrayAggregator(array, setter, iteratee, accumulator) {
        var index = -1,
            length = array == null ? 0 : array.length;

        while (++index < length) {
          var value = array[index];
          setter(accumulator, value, iteratee(value), array);
        }
        return accumulator;
      }

      /**
       * A specialized version of `_.forEach` for arrays without support for
       * iteratee shorthands.
       *
       * @private
       * @param {Array} [array] The array to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array} Returns `array`.
       */
      function arrayEach(array, iteratee) {
        var index = -1,
            length = array == null ? 0 : array.length;

        while (++index < length) {
          if (iteratee(array[index], index, array) === false) {
            break;
          }
        }
        return array;
      }

      /**
       * A specialized version of `_.forEachRight` for arrays without support for
       * iteratee shorthands.
       *
       * @private
       * @param {Array} [array] The array to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array} Returns `array`.
       */
      function arrayEachRight(array, iteratee) {
        var length = array == null ? 0 : array.length;

        while (length--) {
          if (iteratee(array[length], length, array) === false) {
            break;
          }
        }
        return array;
      }

      /**
       * A specialized version of `_.every` for arrays without support for
       * iteratee shorthands.
       *
       * @private
       * @param {Array} [array] The array to iterate over.
       * @param {Function} predicate The function invoked per iteration.
       * @returns {boolean} Returns `true` if all elements pass the predicate check,
       *  else `false`.
       */
      function arrayEvery(array, predicate) {
        var index = -1,
            length = array == null ? 0 : array.length;

        while (++index < length) {
          if (!predicate(array[index], index, array)) {
            return false;
          }
        }
        return true;
      }

      /**
       * A specialized version of `_.filter` for arrays without support for
       * iteratee shorthands.
       *
       * @private
       * @param {Array} [array] The array to iterate over.
       * @param {Function} predicate The function invoked per iteration.
       * @returns {Array} Returns the new filtered array.
       */
      function arrayFilter(array, predicate) {
        var index = -1,
            length = array == null ? 0 : array.length,
            resIndex = 0,
            result = [];

        while (++index < length) {
          var value = array[index];
          if (predicate(value, index, array)) {
            result[resIndex++] = value;
          }
        }
        return result;
      }

      /**
       * A specialized version of `_.includes` for arrays without support for
       * specifying an index to search from.
       *
       * @private
       * @param {Array} [array] The array to inspect.
       * @param {*} target The value to search for.
       * @returns {boolean} Returns `true` if `target` is found, else `false`.
       */
      function arrayIncludes(array, value) {
        var length = array == null ? 0 : array.length;
        return !!length && baseIndexOf(array, value, 0) > -1;
      }

      /**
       * This function is like `arrayIncludes` except that it accepts a comparator.
       *
       * @private
       * @param {Array} [array] The array to inspect.
       * @param {*} target The value to search for.
       * @param {Function} comparator The comparator invoked per element.
       * @returns {boolean} Returns `true` if `target` is found, else `false`.
       */
      function arrayIncludesWith(array, value, comparator) {
        var index = -1,
            length = array == null ? 0 : array.length;

        while (++index < length) {
          if (comparator(value, array[index])) {
            return true;
          }
        }
        return false;
      }

      /**
       * A specialized version of `_.map` for arrays without support for iteratee
       * shorthands.
       *
       * @private
       * @param {Array} [array] The array to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array} Returns the new mapped array.
       */
      function arrayMap(array, iteratee) {
        var index = -1,
            length = array == null ? 0 : array.length,
            result = Array(length);

        while (++index < length) {
          result[index] = iteratee(array[index], index, array);
        }
        return result;
      }

      /**
       * Appends the elements of `values` to `array`.
       *
       * @private
       * @param {Array} array The array to modify.
       * @param {Array} values The values to append.
       * @returns {Array} Returns `array`.
       */
      function arrayPush(array, values) {
        var index = -1,
            length = values.length,
            offset = array.length;

        while (++index < length) {
          array[offset + index] = values[index];
        }
        return array;
      }

      /**
       * A specialized version of `_.reduce` for arrays without support for
       * iteratee shorthands.
       *
       * @private
       * @param {Array} [array] The array to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @param {*} [accumulator] The initial value.
       * @param {boolean} [initAccum] Specify using the first element of `array` as
       *  the initial value.
       * @returns {*} Returns the accumulated value.
       */
      function arrayReduce(array, iteratee, accumulator, initAccum) {
        var index = -1,
            length = array == null ? 0 : array.length;

        if (initAccum && length) {
          accumulator = array[++index];
        }
        while (++index < length) {
          accumulator = iteratee(accumulator, array[index], index, array);
        }
        return accumulator;
      }

      /**
       * A specialized version of `_.reduceRight` for arrays without support for
       * iteratee shorthands.
       *
       * @private
       * @param {Array} [array] The array to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @param {*} [accumulator] The initial value.
       * @param {boolean} [initAccum] Specify using the last element of `array` as
       *  the initial value.
       * @returns {*} Returns the accumulated value.
       */
      function arrayReduceRight(array, iteratee, accumulator, initAccum) {
        var length = array == null ? 0 : array.length;
        if (initAccum && length) {
          accumulator = array[--length];
        }
        while (length--) {
          accumulator = iteratee(accumulator, array[length], length, array);
        }
        return accumulator;
      }

      /**
       * A specialized version of `_.some` for arrays without support for iteratee
       * shorthands.
       *
       * @private
       * @param {Array} [array] The array to iterate over.
       * @param {Function} predicate The function invoked per iteration.
       * @returns {boolean} Returns `true` if any element passes the predicate check,
       *  else `false`.
       */
      function arraySome(array, predicate) {
        var index = -1,
            length = array == null ? 0 : array.length;

        while (++index < length) {
          if (predicate(array[index], index, array)) {
            return true;
          }
        }
        return false;
      }

      /**
       * Gets the size of an ASCII `string`.
       *
       * @private
       * @param {string} string The string inspect.
       * @returns {number} Returns the string size.
       */
      var asciiSize = baseProperty('length');

      /**
       * Converts an ASCII `string` to an array.
       *
       * @private
       * @param {string} string The string to convert.
       * @returns {Array} Returns the converted array.
       */
      function asciiToArray(string) {
        return string.split('');
      }

      /**
       * Splits an ASCII `string` into an array of its words.
       *
       * @private
       * @param {string} The string to inspect.
       * @returns {Array} Returns the words of `string`.
       */
      function asciiWords(string) {
        return string.match(reAsciiWord) || [];
      }

      /**
       * The base implementation of methods like `_.findKey` and `_.findLastKey`,
       * without support for iteratee shorthands, which iterates over `collection`
       * using `eachFunc`.
       *
       * @private
       * @param {Array|Object} collection The collection to inspect.
       * @param {Function} predicate The function invoked per iteration.
       * @param {Function} eachFunc The function to iterate over `collection`.
       * @returns {*} Returns the found element or its key, else `undefined`.
       */
      function baseFindKey(collection, predicate, eachFunc) {
        var result;
        eachFunc(collection, function(value, key, collection) {
          if (predicate(value, key, collection)) {
            result = key;
            return false;
          }
        });
        return result;
      }

      /**
       * The base implementation of `_.findIndex` and `_.findLastIndex` without
       * support for iteratee shorthands.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {Function} predicate The function invoked per iteration.
       * @param {number} fromIndex The index to search from.
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {number} Returns the index of the matched value, else `-1`.
       */
      function baseFindIndex(array, predicate, fromIndex, fromRight) {
        var length = array.length,
            index = fromIndex + (fromRight ? 1 : -1);

        while ((fromRight ? index-- : ++index < length)) {
          if (predicate(array[index], index, array)) {
            return index;
          }
        }
        return -1;
      }

      /**
       * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @param {number} fromIndex The index to search from.
       * @returns {number} Returns the index of the matched value, else `-1`.
       */
      function baseIndexOf(array, value, fromIndex) {
        return value === value
          ? strictIndexOf(array, value, fromIndex)
          : baseFindIndex(array, baseIsNaN, fromIndex);
      }

      /**
       * This function is like `baseIndexOf` except that it accepts a comparator.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @param {number} fromIndex The index to search from.
       * @param {Function} comparator The comparator invoked per element.
       * @returns {number} Returns the index of the matched value, else `-1`.
       */
      function baseIndexOfWith(array, value, fromIndex, comparator) {
        var index = fromIndex - 1,
            length = array.length;

        while (++index < length) {
          if (comparator(array[index], value)) {
            return index;
          }
        }
        return -1;
      }

      /**
       * The base implementation of `_.isNaN` without support for number objects.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
       */
      function baseIsNaN(value) {
        return value !== value;
      }

      /**
       * The base implementation of `_.mean` and `_.meanBy` without support for
       * iteratee shorthands.
       *
       * @private
       * @param {Array} array The array to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {number} Returns the mean.
       */
      function baseMean(array, iteratee) {
        var length = array == null ? 0 : array.length;
        return length ? (baseSum(array, iteratee) / length) : NAN;
      }

      /**
       * The base implementation of `_.property` without support for deep paths.
       *
       * @private
       * @param {string} key The key of the property to get.
       * @returns {Function} Returns the new accessor function.
       */
      function baseProperty(key) {
        return function(object) {
          return object == null ? undefined$1 : object[key];
        };
      }

      /**
       * The base implementation of `_.propertyOf` without support for deep paths.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Function} Returns the new accessor function.
       */
      function basePropertyOf(object) {
        return function(key) {
          return object == null ? undefined$1 : object[key];
        };
      }

      /**
       * The base implementation of `_.reduce` and `_.reduceRight`, without support
       * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @param {*} accumulator The initial value.
       * @param {boolean} initAccum Specify using the first or last element of
       *  `collection` as the initial value.
       * @param {Function} eachFunc The function to iterate over `collection`.
       * @returns {*} Returns the accumulated value.
       */
      function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
        eachFunc(collection, function(value, index, collection) {
          accumulator = initAccum
            ? (initAccum = false, value)
            : iteratee(accumulator, value, index, collection);
        });
        return accumulator;
      }

      /**
       * The base implementation of `_.sortBy` which uses `comparer` to define the
       * sort order of `array` and replaces criteria objects with their corresponding
       * values.
       *
       * @private
       * @param {Array} array The array to sort.
       * @param {Function} comparer The function to define sort order.
       * @returns {Array} Returns `array`.
       */
      function baseSortBy(array, comparer) {
        var length = array.length;

        array.sort(comparer);
        while (length--) {
          array[length] = array[length].value;
        }
        return array;
      }

      /**
       * The base implementation of `_.sum` and `_.sumBy` without support for
       * iteratee shorthands.
       *
       * @private
       * @param {Array} array The array to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {number} Returns the sum.
       */
      function baseSum(array, iteratee) {
        var result,
            index = -1,
            length = array.length;

        while (++index < length) {
          var current = iteratee(array[index]);
          if (current !== undefined$1) {
            result = result === undefined$1 ? current : (result + current);
          }
        }
        return result;
      }

      /**
       * The base implementation of `_.times` without support for iteratee shorthands
       * or max array length checks.
       *
       * @private
       * @param {number} n The number of times to invoke `iteratee`.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array} Returns the array of results.
       */
      function baseTimes(n, iteratee) {
        var index = -1,
            result = Array(n);

        while (++index < n) {
          result[index] = iteratee(index);
        }
        return result;
      }

      /**
       * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
       * of key-value pairs for `object` corresponding to the property names of `props`.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Array} props The property names to get values for.
       * @returns {Object} Returns the key-value pairs.
       */
      function baseToPairs(object, props) {
        return arrayMap(props, function(key) {
          return [key, object[key]];
        });
      }

      /**
       * The base implementation of `_.trim`.
       *
       * @private
       * @param {string} string The string to trim.
       * @returns {string} Returns the trimmed string.
       */
      function baseTrim(string) {
        return string
          ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
          : string;
      }

      /**
       * The base implementation of `_.unary` without support for storing metadata.
       *
       * @private
       * @param {Function} func The function to cap arguments for.
       * @returns {Function} Returns the new capped function.
       */
      function baseUnary(func) {
        return function(value) {
          return func(value);
        };
      }

      /**
       * The base implementation of `_.values` and `_.valuesIn` which creates an
       * array of `object` property values corresponding to the property names
       * of `props`.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Array} props The property names to get values for.
       * @returns {Object} Returns the array of property values.
       */
      function baseValues(object, props) {
        return arrayMap(props, function(key) {
          return object[key];
        });
      }

      /**
       * Checks if a `cache` value for `key` exists.
       *
       * @private
       * @param {Object} cache The cache to query.
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */
      function cacheHas(cache, key) {
        return cache.has(key);
      }

      /**
       * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
       * that is not found in the character symbols.
       *
       * @private
       * @param {Array} strSymbols The string symbols to inspect.
       * @param {Array} chrSymbols The character symbols to find.
       * @returns {number} Returns the index of the first unmatched string symbol.
       */
      function charsStartIndex(strSymbols, chrSymbols) {
        var index = -1,
            length = strSymbols.length;

        while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
        return index;
      }

      /**
       * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
       * that is not found in the character symbols.
       *
       * @private
       * @param {Array} strSymbols The string symbols to inspect.
       * @param {Array} chrSymbols The character symbols to find.
       * @returns {number} Returns the index of the last unmatched string symbol.
       */
      function charsEndIndex(strSymbols, chrSymbols) {
        var index = strSymbols.length;

        while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
        return index;
      }

      /**
       * Gets the number of `placeholder` occurrences in `array`.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {*} placeholder The placeholder to search for.
       * @returns {number} Returns the placeholder count.
       */
      function countHolders(array, placeholder) {
        var length = array.length,
            result = 0;

        while (length--) {
          if (array[length] === placeholder) {
            ++result;
          }
        }
        return result;
      }

      /**
       * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
       * letters to basic Latin letters.
       *
       * @private
       * @param {string} letter The matched letter to deburr.
       * @returns {string} Returns the deburred letter.
       */
      var deburrLetter = basePropertyOf(deburredLetters);

      /**
       * Used by `_.escape` to convert characters to HTML entities.
       *
       * @private
       * @param {string} chr The matched character to escape.
       * @returns {string} Returns the escaped character.
       */
      var escapeHtmlChar = basePropertyOf(htmlEscapes);

      /**
       * Used by `_.template` to escape characters for inclusion in compiled string literals.
       *
       * @private
       * @param {string} chr The matched character to escape.
       * @returns {string} Returns the escaped character.
       */
      function escapeStringChar(chr) {
        return '\\' + stringEscapes[chr];
      }

      /**
       * Gets the value at `key` of `object`.
       *
       * @private
       * @param {Object} [object] The object to query.
       * @param {string} key The key of the property to get.
       * @returns {*} Returns the property value.
       */
      function getValue(object, key) {
        return object == null ? undefined$1 : object[key];
      }

      /**
       * Checks if `string` contains Unicode symbols.
       *
       * @private
       * @param {string} string The string to inspect.
       * @returns {boolean} Returns `true` if a symbol is found, else `false`.
       */
      function hasUnicode(string) {
        return reHasUnicode.test(string);
      }

      /**
       * Checks if `string` contains a word composed of Unicode symbols.
       *
       * @private
       * @param {string} string The string to inspect.
       * @returns {boolean} Returns `true` if a word is found, else `false`.
       */
      function hasUnicodeWord(string) {
        return reHasUnicodeWord.test(string);
      }

      /**
       * Converts `iterator` to an array.
       *
       * @private
       * @param {Object} iterator The iterator to convert.
       * @returns {Array} Returns the converted array.
       */
      function iteratorToArray(iterator) {
        var data,
            result = [];

        while (!(data = iterator.next()).done) {
          result.push(data.value);
        }
        return result;
      }

      /**
       * Converts `map` to its key-value pairs.
       *
       * @private
       * @param {Object} map The map to convert.
       * @returns {Array} Returns the key-value pairs.
       */
      function mapToArray(map) {
        var index = -1,
            result = Array(map.size);

        map.forEach(function(value, key) {
          result[++index] = [key, value];
        });
        return result;
      }

      /**
       * Creates a unary function that invokes `func` with its argument transformed.
       *
       * @private
       * @param {Function} func The function to wrap.
       * @param {Function} transform The argument transform.
       * @returns {Function} Returns the new function.
       */
      function overArg(func, transform) {
        return function(arg) {
          return func(transform(arg));
        };
      }

      /**
       * Replaces all `placeholder` elements in `array` with an internal placeholder
       * and returns an array of their indexes.
       *
       * @private
       * @param {Array} array The array to modify.
       * @param {*} placeholder The placeholder to replace.
       * @returns {Array} Returns the new array of placeholder indexes.
       */
      function replaceHolders(array, placeholder) {
        var index = -1,
            length = array.length,
            resIndex = 0,
            result = [];

        while (++index < length) {
          var value = array[index];
          if (value === placeholder || value === PLACEHOLDER) {
            array[index] = PLACEHOLDER;
            result[resIndex++] = index;
          }
        }
        return result;
      }

      /**
       * Converts `set` to an array of its values.
       *
       * @private
       * @param {Object} set The set to convert.
       * @returns {Array} Returns the values.
       */
      function setToArray(set) {
        var index = -1,
            result = Array(set.size);

        set.forEach(function(value) {
          result[++index] = value;
        });
        return result;
      }

      /**
       * Converts `set` to its value-value pairs.
       *
       * @private
       * @param {Object} set The set to convert.
       * @returns {Array} Returns the value-value pairs.
       */
      function setToPairs(set) {
        var index = -1,
            result = Array(set.size);

        set.forEach(function(value) {
          result[++index] = [value, value];
        });
        return result;
      }

      /**
       * A specialized version of `_.indexOf` which performs strict equality
       * comparisons of values, i.e. `===`.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @param {number} fromIndex The index to search from.
       * @returns {number} Returns the index of the matched value, else `-1`.
       */
      function strictIndexOf(array, value, fromIndex) {
        var index = fromIndex - 1,
            length = array.length;

        while (++index < length) {
          if (array[index] === value) {
            return index;
          }
        }
        return -1;
      }

      /**
       * A specialized version of `_.lastIndexOf` which performs strict equality
       * comparisons of values, i.e. `===`.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @param {number} fromIndex The index to search from.
       * @returns {number} Returns the index of the matched value, else `-1`.
       */
      function strictLastIndexOf(array, value, fromIndex) {
        var index = fromIndex + 1;
        while (index--) {
          if (array[index] === value) {
            return index;
          }
        }
        return index;
      }

      /**
       * Gets the number of symbols in `string`.
       *
       * @private
       * @param {string} string The string to inspect.
       * @returns {number} Returns the string size.
       */
      function stringSize(string) {
        return hasUnicode(string)
          ? unicodeSize(string)
          : asciiSize(string);
      }

      /**
       * Converts `string` to an array.
       *
       * @private
       * @param {string} string The string to convert.
       * @returns {Array} Returns the converted array.
       */
      function stringToArray(string) {
        return hasUnicode(string)
          ? unicodeToArray(string)
          : asciiToArray(string);
      }

      /**
       * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
       * character of `string`.
       *
       * @private
       * @param {string} string The string to inspect.
       * @returns {number} Returns the index of the last non-whitespace character.
       */
      function trimmedEndIndex(string) {
        var index = string.length;

        while (index-- && reWhitespace.test(string.charAt(index))) {}
        return index;
      }

      /**
       * Used by `_.unescape` to convert HTML entities to characters.
       *
       * @private
       * @param {string} chr The matched character to unescape.
       * @returns {string} Returns the unescaped character.
       */
      var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

      /**
       * Gets the size of a Unicode `string`.
       *
       * @private
       * @param {string} string The string inspect.
       * @returns {number} Returns the string size.
       */
      function unicodeSize(string) {
        var result = reUnicode.lastIndex = 0;
        while (reUnicode.test(string)) {
          ++result;
        }
        return result;
      }

      /**
       * Converts a Unicode `string` to an array.
       *
       * @private
       * @param {string} string The string to convert.
       * @returns {Array} Returns the converted array.
       */
      function unicodeToArray(string) {
        return string.match(reUnicode) || [];
      }

      /**
       * Splits a Unicode `string` into an array of its words.
       *
       * @private
       * @param {string} The string to inspect.
       * @returns {Array} Returns the words of `string`.
       */
      function unicodeWords(string) {
        return string.match(reUnicodeWord) || [];
      }

      /*--------------------------------------------------------------------------*/

      /**
       * Create a new pristine `lodash` function using the `context` object.
       *
       * @static
       * @memberOf _
       * @since 1.1.0
       * @category Util
       * @param {Object} [context=root] The context object.
       * @returns {Function} Returns a new `lodash` function.
       * @example
       *
       * _.mixin({ 'foo': _.constant('foo') });
       *
       * var lodash = _.runInContext();
       * lodash.mixin({ 'bar': lodash.constant('bar') });
       *
       * _.isFunction(_.foo);
       * // => true
       * _.isFunction(_.bar);
       * // => false
       *
       * lodash.isFunction(lodash.foo);
       * // => false
       * lodash.isFunction(lodash.bar);
       * // => true
       *
       * // Create a suped-up `defer` in Node.js.
       * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
       */
      var runInContext = (function runInContext(context) {
        context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

        /** Built-in constructor references. */
        var Array = context.Array,
            Date = context.Date,
            Error = context.Error,
            Function = context.Function,
            Math = context.Math,
            Object = context.Object,
            RegExp = context.RegExp,
            String = context.String,
            TypeError = context.TypeError;

        /** Used for built-in method references. */
        var arrayProto = Array.prototype,
            funcProto = Function.prototype,
            objectProto = Object.prototype;

        /** Used to detect overreaching core-js shims. */
        var coreJsData = context['__core-js_shared__'];

        /** Used to resolve the decompiled source of functions. */
        var funcToString = funcProto.toString;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /** Used to generate unique IDs. */
        var idCounter = 0;

        /** Used to detect methods masquerading as native. */
        var maskSrcKey = (function() {
          var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
          return uid ? ('Symbol(src)_1.' + uid) : '';
        }());

        /**
         * Used to resolve the
         * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
         * of values.
         */
        var nativeObjectToString = objectProto.toString;

        /** Used to infer the `Object` constructor. */
        var objectCtorString = funcToString.call(Object);

        /** Used to restore the original `_` reference in `_.noConflict`. */
        var oldDash = root._;

        /** Used to detect if a method is native. */
        var reIsNative = RegExp('^' +
          funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
          .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
        );

        /** Built-in value references. */
        var Buffer = moduleExports ? context.Buffer : undefined$1,
            Symbol = context.Symbol,
            Uint8Array = context.Uint8Array,
            allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined$1,
            getPrototype = overArg(Object.getPrototypeOf, Object),
            objectCreate = Object.create,
            propertyIsEnumerable = objectProto.propertyIsEnumerable,
            splice = arrayProto.splice,
            spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined$1,
            symIterator = Symbol ? Symbol.iterator : undefined$1,
            symToStringTag = Symbol ? Symbol.toStringTag : undefined$1;

        var defineProperty = (function() {
          try {
            var func = getNative(Object, 'defineProperty');
            func({}, '', {});
            return func;
          } catch (e) {}
        }());

        /** Mocked built-ins. */
        var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
            ctxNow = Date && Date.now !== root.Date.now && Date.now,
            ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeCeil = Math.ceil,
            nativeFloor = Math.floor,
            nativeGetSymbols = Object.getOwnPropertySymbols,
            nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined$1,
            nativeIsFinite = context.isFinite,
            nativeJoin = arrayProto.join,
            nativeKeys = overArg(Object.keys, Object),
            nativeMax = Math.max,
            nativeMin = Math.min,
            nativeNow = Date.now,
            nativeParseInt = context.parseInt,
            nativeRandom = Math.random,
            nativeReverse = arrayProto.reverse;

        /* Built-in method references that are verified to be native. */
        var DataView = getNative(context, 'DataView'),
            Map = getNative(context, 'Map'),
            Promise = getNative(context, 'Promise'),
            Set = getNative(context, 'Set'),
            WeakMap = getNative(context, 'WeakMap'),
            nativeCreate = getNative(Object, 'create');

        /** Used to store function metadata. */
        var metaMap = WeakMap && new WeakMap;

        /** Used to lookup unminified function names. */
        var realNames = {};

        /** Used to detect maps, sets, and weakmaps. */
        var dataViewCtorString = toSource(DataView),
            mapCtorString = toSource(Map),
            promiseCtorString = toSource(Promise),
            setCtorString = toSource(Set),
            weakMapCtorString = toSource(WeakMap);

        /** Used to convert symbols to primitives and strings. */
        var symbolProto = Symbol ? Symbol.prototype : undefined$1,
            symbolValueOf = symbolProto ? symbolProto.valueOf : undefined$1,
            symbolToString = symbolProto ? symbolProto.toString : undefined$1;

        /*------------------------------------------------------------------------*/

        /**
         * Creates a `lodash` object which wraps `value` to enable implicit method
         * chain sequences. Methods that operate on and return arrays, collections,
         * and functions can be chained together. Methods that retrieve a single value
         * or may return a primitive value will automatically end the chain sequence
         * and return the unwrapped value. Otherwise, the value must be unwrapped
         * with `_#value`.
         *
         * Explicit chain sequences, which must be unwrapped with `_#value`, may be
         * enabled using `_.chain`.
         *
         * The execution of chained methods is lazy, that is, it's deferred until
         * `_#value` is implicitly or explicitly called.
         *
         * Lazy evaluation allows several methods to support shortcut fusion.
         * Shortcut fusion is an optimization to merge iteratee calls; this avoids
         * the creation of intermediate arrays and can greatly reduce the number of
         * iteratee executions. Sections of a chain sequence qualify for shortcut
         * fusion if the section is applied to an array and iteratees accept only
         * one argument. The heuristic for whether a section qualifies for shortcut
         * fusion is subject to change.
         *
         * Chaining is supported in custom builds as long as the `_#value` method is
         * directly or indirectly included in the build.
         *
         * In addition to lodash methods, wrappers have `Array` and `String` methods.
         *
         * The wrapper `Array` methods are:
         * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
         *
         * The wrapper `String` methods are:
         * `replace` and `split`
         *
         * The wrapper methods that support shortcut fusion are:
         * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
         * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
         * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
         *
         * The chainable wrapper methods are:
         * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
         * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
         * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
         * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
         * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
         * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
         * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
         * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
         * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
         * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
         * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
         * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
         * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
         * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
         * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
         * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
         * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
         * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
         * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
         * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
         * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
         * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
         * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
         * `zipObject`, `zipObjectDeep`, and `zipWith`
         *
         * The wrapper methods that are **not** chainable by default are:
         * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
         * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
         * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
         * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
         * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
         * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
         * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
         * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
         * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
         * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
         * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
         * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
         * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
         * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
         * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
         * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
         * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
         * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
         * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
         * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
         * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
         * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
         * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
         * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
         * `upperFirst`, `value`, and `words`
         *
         * @name _
         * @constructor
         * @category Seq
         * @param {*} value The value to wrap in a `lodash` instance.
         * @returns {Object} Returns the new `lodash` wrapper instance.
         * @example
         *
         * function square(n) {
         *   return n * n;
         * }
         *
         * var wrapped = _([1, 2, 3]);
         *
         * // Returns an unwrapped value.
         * wrapped.reduce(_.add);
         * // => 6
         *
         * // Returns a wrapped value.
         * var squares = wrapped.map(square);
         *
         * _.isArray(squares);
         * // => false
         *
         * _.isArray(squares.value());
         * // => true
         */
        function lodash(value) {
          if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
            if (value instanceof LodashWrapper) {
              return value;
            }
            if (hasOwnProperty.call(value, '__wrapped__')) {
              return wrapperClone(value);
            }
          }
          return new LodashWrapper(value);
        }

        /**
         * The base implementation of `_.create` without support for assigning
         * properties to the created object.
         *
         * @private
         * @param {Object} proto The object to inherit from.
         * @returns {Object} Returns the new object.
         */
        var baseCreate = (function() {
          function object() {}
          return function(proto) {
            if (!isObject(proto)) {
              return {};
            }
            if (objectCreate) {
              return objectCreate(proto);
            }
            object.prototype = proto;
            var result = new object;
            object.prototype = undefined$1;
            return result;
          };
        }());

        /**
         * The function whose prototype chain sequence wrappers inherit from.
         *
         * @private
         */
        function baseLodash() {
          // No operation performed.
        }

        /**
         * The base constructor for creating `lodash` wrapper objects.
         *
         * @private
         * @param {*} value The value to wrap.
         * @param {boolean} [chainAll] Enable explicit method chain sequences.
         */
        function LodashWrapper(value, chainAll) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__chain__ = !!chainAll;
          this.__index__ = 0;
          this.__values__ = undefined$1;
        }

        /**
         * By default, the template delimiters used by lodash are like those in
         * embedded Ruby (ERB) as well as ES2015 template strings. Change the
         * following template settings to use alternative delimiters.
         *
         * @static
         * @memberOf _
         * @type {Object}
         */
        lodash.templateSettings = {

          /**
           * Used to detect `data` property values to be HTML-escaped.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          'escape': reEscape,

          /**
           * Used to detect code to be evaluated.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          'evaluate': reEvaluate,

          /**
           * Used to detect `data` property values to inject.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          'interpolate': reInterpolate,

          /**
           * Used to reference the data object in the template text.
           *
           * @memberOf _.templateSettings
           * @type {string}
           */
          'variable': '',

          /**
           * Used to import variables into the compiled template.
           *
           * @memberOf _.templateSettings
           * @type {Object}
           */
          'imports': {

            /**
             * A reference to the `lodash` function.
             *
             * @memberOf _.templateSettings.imports
             * @type {Function}
             */
            '_': lodash
          }
        };

        // Ensure wrappers are instances of `baseLodash`.
        lodash.prototype = baseLodash.prototype;
        lodash.prototype.constructor = lodash;

        LodashWrapper.prototype = baseCreate(baseLodash.prototype);
        LodashWrapper.prototype.constructor = LodashWrapper;

        /*------------------------------------------------------------------------*/

        /**
         * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
         *
         * @private
         * @constructor
         * @param {*} value The value to wrap.
         */
        function LazyWrapper(value) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__dir__ = 1;
          this.__filtered__ = false;
          this.__iteratees__ = [];
          this.__takeCount__ = MAX_ARRAY_LENGTH;
          this.__views__ = [];
        }

        /**
         * Creates a clone of the lazy wrapper object.
         *
         * @private
         * @name clone
         * @memberOf LazyWrapper
         * @returns {Object} Returns the cloned `LazyWrapper` object.
         */
        function lazyClone() {
          var result = new LazyWrapper(this.__wrapped__);
          result.__actions__ = copyArray(this.__actions__);
          result.__dir__ = this.__dir__;
          result.__filtered__ = this.__filtered__;
          result.__iteratees__ = copyArray(this.__iteratees__);
          result.__takeCount__ = this.__takeCount__;
          result.__views__ = copyArray(this.__views__);
          return result;
        }

        /**
         * Reverses the direction of lazy iteration.
         *
         * @private
         * @name reverse
         * @memberOf LazyWrapper
         * @returns {Object} Returns the new reversed `LazyWrapper` object.
         */
        function lazyReverse() {
          if (this.__filtered__) {
            var result = new LazyWrapper(this);
            result.__dir__ = -1;
            result.__filtered__ = true;
          } else {
            result = this.clone();
            result.__dir__ *= -1;
          }
          return result;
        }

        /**
         * Extracts the unwrapped value from its lazy wrapper.
         *
         * @private
         * @name value
         * @memberOf LazyWrapper
         * @returns {*} Returns the unwrapped value.
         */
        function lazyValue() {
          var array = this.__wrapped__.value(),
              dir = this.__dir__,
              isArr = isArray(array),
              isRight = dir < 0,
              arrLength = isArr ? array.length : 0,
              view = getView(0, arrLength, this.__views__),
              start = view.start,
              end = view.end,
              length = end - start,
              index = isRight ? end : (start - 1),
              iteratees = this.__iteratees__,
              iterLength = iteratees.length,
              resIndex = 0,
              takeCount = nativeMin(length, this.__takeCount__);

          if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
            return baseWrapperValue(array, this.__actions__);
          }
          var result = [];

          outer:
          while (length-- && resIndex < takeCount) {
            index += dir;

            var iterIndex = -1,
                value = array[index];

            while (++iterIndex < iterLength) {
              var data = iteratees[iterIndex],
                  iteratee = data.iteratee,
                  type = data.type,
                  computed = iteratee(value);

              if (type == LAZY_MAP_FLAG) {
                value = computed;
              } else if (!computed) {
                if (type == LAZY_FILTER_FLAG) {
                  continue outer;
                } else {
                  break outer;
                }
              }
            }
            result[resIndex++] = value;
          }
          return result;
        }

        // Ensure `LazyWrapper` is an instance of `baseLodash`.
        LazyWrapper.prototype = baseCreate(baseLodash.prototype);
        LazyWrapper.prototype.constructor = LazyWrapper;

        /*------------------------------------------------------------------------*/

        /**
         * Creates a hash object.
         *
         * @private
         * @constructor
         * @param {Array} [entries] The key-value pairs to cache.
         */
        function Hash(entries) {
          var index = -1,
              length = entries == null ? 0 : entries.length;

          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }

        /**
         * Removes all key-value entries from the hash.
         *
         * @private
         * @name clear
         * @memberOf Hash
         */
        function hashClear() {
          this.__data__ = nativeCreate ? nativeCreate(null) : {};
          this.size = 0;
        }

        /**
         * Removes `key` and its value from the hash.
         *
         * @private
         * @name delete
         * @memberOf Hash
         * @param {Object} hash The hash to modify.
         * @param {string} key The key of the value to remove.
         * @returns {boolean} Returns `true` if the entry was removed, else `false`.
         */
        function hashDelete(key) {
          var result = this.has(key) && delete this.__data__[key];
          this.size -= result ? 1 : 0;
          return result;
        }

        /**
         * Gets the hash value for `key`.
         *
         * @private
         * @name get
         * @memberOf Hash
         * @param {string} key The key of the value to get.
         * @returns {*} Returns the entry value.
         */
        function hashGet(key) {
          var data = this.__data__;
          if (nativeCreate) {
            var result = data[key];
            return result === HASH_UNDEFINED ? undefined$1 : result;
          }
          return hasOwnProperty.call(data, key) ? data[key] : undefined$1;
        }

        /**
         * Checks if a hash value for `key` exists.
         *
         * @private
         * @name has
         * @memberOf Hash
         * @param {string} key The key of the entry to check.
         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
         */
        function hashHas(key) {
          var data = this.__data__;
          return nativeCreate ? (data[key] !== undefined$1) : hasOwnProperty.call(data, key);
        }

        /**
         * Sets the hash `key` to `value`.
         *
         * @private
         * @name set
         * @memberOf Hash
         * @param {string} key The key of the value to set.
         * @param {*} value The value to set.
         * @returns {Object} Returns the hash instance.
         */
        function hashSet(key, value) {
          var data = this.__data__;
          this.size += this.has(key) ? 0 : 1;
          data[key] = (nativeCreate && value === undefined$1) ? HASH_UNDEFINED : value;
          return this;
        }

        // Add methods to `Hash`.
        Hash.prototype.clear = hashClear;
        Hash.prototype['delete'] = hashDelete;
        Hash.prototype.get = hashGet;
        Hash.prototype.has = hashHas;
        Hash.prototype.set = hashSet;

        /*------------------------------------------------------------------------*/

        /**
         * Creates an list cache object.
         *
         * @private
         * @constructor
         * @param {Array} [entries] The key-value pairs to cache.
         */
        function ListCache(entries) {
          var index = -1,
              length = entries == null ? 0 : entries.length;

          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }

        /**
         * Removes all key-value entries from the list cache.
         *
         * @private
         * @name clear
         * @memberOf ListCache
         */
        function listCacheClear() {
          this.__data__ = [];
          this.size = 0;
        }

        /**
         * Removes `key` and its value from the list cache.
         *
         * @private
         * @name delete
         * @memberOf ListCache
         * @param {string} key The key of the value to remove.
         * @returns {boolean} Returns `true` if the entry was removed, else `false`.
         */
        function listCacheDelete(key) {
          var data = this.__data__,
              index = assocIndexOf(data, key);

          if (index < 0) {
            return false;
          }
          var lastIndex = data.length - 1;
          if (index == lastIndex) {
            data.pop();
          } else {
            splice.call(data, index, 1);
          }
          --this.size;
          return true;
        }

        /**
         * Gets the list cache value for `key`.
         *
         * @private
         * @name get
         * @memberOf ListCache
         * @param {string} key The key of the value to get.
         * @returns {*} Returns the entry value.
         */
        function listCacheGet(key) {
          var data = this.__data__,
              index = assocIndexOf(data, key);

          return index < 0 ? undefined$1 : data[index][1];
        }

        /**
         * Checks if a list cache value for `key` exists.
         *
         * @private
         * @name has
         * @memberOf ListCache
         * @param {string} key The key of the entry to check.
         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
         */
        function listCacheHas(key) {
          return assocIndexOf(this.__data__, key) > -1;
        }

        /**
         * Sets the list cache `key` to `value`.
         *
         * @private
         * @name set
         * @memberOf ListCache
         * @param {string} key The key of the value to set.
         * @param {*} value The value to set.
         * @returns {Object} Returns the list cache instance.
         */
        function listCacheSet(key, value) {
          var data = this.__data__,
              index = assocIndexOf(data, key);

          if (index < 0) {
            ++this.size;
            data.push([key, value]);
          } else {
            data[index][1] = value;
          }
          return this;
        }

        // Add methods to `ListCache`.
        ListCache.prototype.clear = listCacheClear;
        ListCache.prototype['delete'] = listCacheDelete;
        ListCache.prototype.get = listCacheGet;
        ListCache.prototype.has = listCacheHas;
        ListCache.prototype.set = listCacheSet;

        /*------------------------------------------------------------------------*/

        /**
         * Creates a map cache object to store key-value pairs.
         *
         * @private
         * @constructor
         * @param {Array} [entries] The key-value pairs to cache.
         */
        function MapCache(entries) {
          var index = -1,
              length = entries == null ? 0 : entries.length;

          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }

        /**
         * Removes all key-value entries from the map.
         *
         * @private
         * @name clear
         * @memberOf MapCache
         */
        function mapCacheClear() {
          this.size = 0;
          this.__data__ = {
            'hash': new Hash,
            'map': new (Map || ListCache),
            'string': new Hash
          };
        }

        /**
         * Removes `key` and its value from the map.
         *
         * @private
         * @name delete
         * @memberOf MapCache
         * @param {string} key The key of the value to remove.
         * @returns {boolean} Returns `true` if the entry was removed, else `false`.
         */
        function mapCacheDelete(key) {
          var result = getMapData(this, key)['delete'](key);
          this.size -= result ? 1 : 0;
          return result;
        }

        /**
         * Gets the map value for `key`.
         *
         * @private
         * @name get
         * @memberOf MapCache
         * @param {string} key The key of the value to get.
         * @returns {*} Returns the entry value.
         */
        function mapCacheGet(key) {
          return getMapData(this, key).get(key);
        }

        /**
         * Checks if a map value for `key` exists.
         *
         * @private
         * @name has
         * @memberOf MapCache
         * @param {string} key The key of the entry to check.
         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
         */
        function mapCacheHas(key) {
          return getMapData(this, key).has(key);
        }

        /**
         * Sets the map `key` to `value`.
         *
         * @private
         * @name set
         * @memberOf MapCache
         * @param {string} key The key of the value to set.
         * @param {*} value The value to set.
         * @returns {Object} Returns the map cache instance.
         */
        function mapCacheSet(key, value) {
          var data = getMapData(this, key),
              size = data.size;

          data.set(key, value);
          this.size += data.size == size ? 0 : 1;
          return this;
        }

        // Add methods to `MapCache`.
        MapCache.prototype.clear = mapCacheClear;
        MapCache.prototype['delete'] = mapCacheDelete;
        MapCache.prototype.get = mapCacheGet;
        MapCache.prototype.has = mapCacheHas;
        MapCache.prototype.set = mapCacheSet;

        /*------------------------------------------------------------------------*/

        /**
         *
         * Creates an array cache object to store unique values.
         *
         * @private
         * @constructor
         * @param {Array} [values] The values to cache.
         */
        function SetCache(values) {
          var index = -1,
              length = values == null ? 0 : values.length;

          this.__data__ = new MapCache;
          while (++index < length) {
            this.add(values[index]);
          }
        }

        /**
         * Adds `value` to the array cache.
         *
         * @private
         * @name add
         * @memberOf SetCache
         * @alias push
         * @param {*} value The value to cache.
         * @returns {Object} Returns the cache instance.
         */
        function setCacheAdd(value) {
          this.__data__.set(value, HASH_UNDEFINED);
          return this;
        }

        /**
         * Checks if `value` is in the array cache.
         *
         * @private
         * @name has
         * @memberOf SetCache
         * @param {*} value The value to search for.
         * @returns {number} Returns `true` if `value` is found, else `false`.
         */
        function setCacheHas(value) {
          return this.__data__.has(value);
        }

        // Add methods to `SetCache`.
        SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
        SetCache.prototype.has = setCacheHas;

        /*------------------------------------------------------------------------*/

        /**
         * Creates a stack cache object to store key-value pairs.
         *
         * @private
         * @constructor
         * @param {Array} [entries] The key-value pairs to cache.
         */
        function Stack(entries) {
          var data = this.__data__ = new ListCache(entries);
          this.size = data.size;
        }

        /**
         * Removes all key-value entries from the stack.
         *
         * @private
         * @name clear
         * @memberOf Stack
         */
        function stackClear() {
          this.__data__ = new ListCache;
          this.size = 0;
        }

        /**
         * Removes `key` and its value from the stack.
         *
         * @private
         * @name delete
         * @memberOf Stack
         * @param {string} key The key of the value to remove.
         * @returns {boolean} Returns `true` if the entry was removed, else `false`.
         */
        function stackDelete(key) {
          var data = this.__data__,
              result = data['delete'](key);

          this.size = data.size;
          return result;
        }

        /**
         * Gets the stack value for `key`.
         *
         * @private
         * @name get
         * @memberOf Stack
         * @param {string} key The key of the value to get.
         * @returns {*} Returns the entry value.
         */
        function stackGet(key) {
          return this.__data__.get(key);
        }

        /**
         * Checks if a stack value for `key` exists.
         *
         * @private
         * @name has
         * @memberOf Stack
         * @param {string} key The key of the entry to check.
         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
         */
        function stackHas(key) {
          return this.__data__.has(key);
        }

        /**
         * Sets the stack `key` to `value`.
         *
         * @private
         * @name set
         * @memberOf Stack
         * @param {string} key The key of the value to set.
         * @param {*} value The value to set.
         * @returns {Object} Returns the stack cache instance.
         */
        function stackSet(key, value) {
          var data = this.__data__;
          if (data instanceof ListCache) {
            var pairs = data.__data__;
            if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
              pairs.push([key, value]);
              this.size = ++data.size;
              return this;
            }
            data = this.__data__ = new MapCache(pairs);
          }
          data.set(key, value);
          this.size = data.size;
          return this;
        }

        // Add methods to `Stack`.
        Stack.prototype.clear = stackClear;
        Stack.prototype['delete'] = stackDelete;
        Stack.prototype.get = stackGet;
        Stack.prototype.has = stackHas;
        Stack.prototype.set = stackSet;

        /*------------------------------------------------------------------------*/

        /**
         * Creates an array of the enumerable property names of the array-like `value`.
         *
         * @private
         * @param {*} value The value to query.
         * @param {boolean} inherited Specify returning inherited property names.
         * @returns {Array} Returns the array of property names.
         */
        function arrayLikeKeys(value, inherited) {
          var isArr = isArray(value),
              isArg = !isArr && isArguments(value),
              isBuff = !isArr && !isArg && isBuffer(value),
              isType = !isArr && !isArg && !isBuff && isTypedArray(value),
              skipIndexes = isArr || isArg || isBuff || isType,
              result = skipIndexes ? baseTimes(value.length, String) : [],
              length = result.length;

          for (var key in value) {
            if ((inherited || hasOwnProperty.call(value, key)) &&
                !(skipIndexes && (
                   // Safari 9 has enumerable `arguments.length` in strict mode.
                   key == 'length' ||
                   // Node.js 0.10 has enumerable non-index properties on buffers.
                   (isBuff && (key == 'offset' || key == 'parent')) ||
                   // PhantomJS 2 has enumerable non-index properties on typed arrays.
                   (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
                   // Skip index properties.
                   isIndex(key, length)
                ))) {
              result.push(key);
            }
          }
          return result;
        }

        /**
         * A specialized version of `_.sample` for arrays.
         *
         * @private
         * @param {Array} array The array to sample.
         * @returns {*} Returns the random element.
         */
        function arraySample(array) {
          var length = array.length;
          return length ? array[baseRandom(0, length - 1)] : undefined$1;
        }

        /**
         * A specialized version of `_.sampleSize` for arrays.
         *
         * @private
         * @param {Array} array The array to sample.
         * @param {number} n The number of elements to sample.
         * @returns {Array} Returns the random elements.
         */
        function arraySampleSize(array, n) {
          return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
        }

        /**
         * A specialized version of `_.shuffle` for arrays.
         *
         * @private
         * @param {Array} array The array to shuffle.
         * @returns {Array} Returns the new shuffled array.
         */
        function arrayShuffle(array) {
          return shuffleSelf(copyArray(array));
        }

        /**
         * This function is like `assignValue` except that it doesn't assign
         * `undefined` values.
         *
         * @private
         * @param {Object} object The object to modify.
         * @param {string} key The key of the property to assign.
         * @param {*} value The value to assign.
         */
        function assignMergeValue(object, key, value) {
          if ((value !== undefined$1 && !eq(object[key], value)) ||
              (value === undefined$1 && !(key in object))) {
            baseAssignValue(object, key, value);
          }
        }

        /**
         * Assigns `value` to `key` of `object` if the existing value is not equivalent
         * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * for equality comparisons.
         *
         * @private
         * @param {Object} object The object to modify.
         * @param {string} key The key of the property to assign.
         * @param {*} value The value to assign.
         */
        function assignValue(object, key, value) {
          var objValue = object[key];
          if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
              (value === undefined$1 && !(key in object))) {
            baseAssignValue(object, key, value);
          }
        }

        /**
         * Gets the index at which the `key` is found in `array` of key-value pairs.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {*} key The key to search for.
         * @returns {number} Returns the index of the matched value, else `-1`.
         */
        function assocIndexOf(array, key) {
          var length = array.length;
          while (length--) {
            if (eq(array[length][0], key)) {
              return length;
            }
          }
          return -1;
        }

        /**
         * Aggregates elements of `collection` on `accumulator` with keys transformed
         * by `iteratee` and values set by `setter`.
         *
         * @private
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} setter The function to set `accumulator` values.
         * @param {Function} iteratee The iteratee to transform keys.
         * @param {Object} accumulator The initial aggregated object.
         * @returns {Function} Returns `accumulator`.
         */
        function baseAggregator(collection, setter, iteratee, accumulator) {
          baseEach(collection, function(value, key, collection) {
            setter(accumulator, value, iteratee(value), collection);
          });
          return accumulator;
        }

        /**
         * The base implementation of `_.assign` without support for multiple sources
         * or `customizer` functions.
         *
         * @private
         * @param {Object} object The destination object.
         * @param {Object} source The source object.
         * @returns {Object} Returns `object`.
         */
        function baseAssign(object, source) {
          return object && copyObject(source, keys(source), object);
        }

        /**
         * The base implementation of `_.assignIn` without support for multiple sources
         * or `customizer` functions.
         *
         * @private
         * @param {Object} object The destination object.
         * @param {Object} source The source object.
         * @returns {Object} Returns `object`.
         */
        function baseAssignIn(object, source) {
          return object && copyObject(source, keysIn(source), object);
        }

        /**
         * The base implementation of `assignValue` and `assignMergeValue` without
         * value checks.
         *
         * @private
         * @param {Object} object The object to modify.
         * @param {string} key The key of the property to assign.
         * @param {*} value The value to assign.
         */
        function baseAssignValue(object, key, value) {
          if (key == '__proto__' && defineProperty) {
            defineProperty(object, key, {
              'configurable': true,
              'enumerable': true,
              'value': value,
              'writable': true
            });
          } else {
            object[key] = value;
          }
        }

        /**
         * The base implementation of `_.at` without support for individual paths.
         *
         * @private
         * @param {Object} object The object to iterate over.
         * @param {string[]} paths The property paths to pick.
         * @returns {Array} Returns the picked elements.
         */
        function baseAt(object, paths) {
          var index = -1,
              length = paths.length,
              result = Array(length),
              skip = object == null;

          while (++index < length) {
            result[index] = skip ? undefined$1 : get(object, paths[index]);
          }
          return result;
        }

        /**
         * The base implementation of `_.clamp` which doesn't coerce arguments.
         *
         * @private
         * @param {number} number The number to clamp.
         * @param {number} [lower] The lower bound.
         * @param {number} upper The upper bound.
         * @returns {number} Returns the clamped number.
         */
        function baseClamp(number, lower, upper) {
          if (number === number) {
            if (upper !== undefined$1) {
              number = number <= upper ? number : upper;
            }
            if (lower !== undefined$1) {
              number = number >= lower ? number : lower;
            }
          }
          return number;
        }

        /**
         * The base implementation of `_.clone` and `_.cloneDeep` which tracks
         * traversed objects.
         *
         * @private
         * @param {*} value The value to clone.
         * @param {boolean} bitmask The bitmask flags.
         *  1 - Deep clone
         *  2 - Flatten inherited properties
         *  4 - Clone symbols
         * @param {Function} [customizer] The function to customize cloning.
         * @param {string} [key] The key of `value`.
         * @param {Object} [object] The parent object of `value`.
         * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
         * @returns {*} Returns the cloned value.
         */
        function baseClone(value, bitmask, customizer, key, object, stack) {
          var result,
              isDeep = bitmask & CLONE_DEEP_FLAG,
              isFlat = bitmask & CLONE_FLAT_FLAG,
              isFull = bitmask & CLONE_SYMBOLS_FLAG;

          if (customizer) {
            result = object ? customizer(value, key, object, stack) : customizer(value);
          }
          if (result !== undefined$1) {
            return result;
          }
          if (!isObject(value)) {
            return value;
          }
          var isArr = isArray(value);
          if (isArr) {
            result = initCloneArray(value);
            if (!isDeep) {
              return copyArray(value, result);
            }
          } else {
            var tag = getTag(value),
                isFunc = tag == funcTag || tag == genTag;

            if (isBuffer(value)) {
              return cloneBuffer(value, isDeep);
            }
            if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
              result = (isFlat || isFunc) ? {} : initCloneObject(value);
              if (!isDeep) {
                return isFlat
                  ? copySymbolsIn(value, baseAssignIn(result, value))
                  : copySymbols(value, baseAssign(result, value));
              }
            } else {
              if (!cloneableTags[tag]) {
                return object ? value : {};
              }
              result = initCloneByTag(value, tag, isDeep);
            }
          }
          // Check for circular references and return its corresponding clone.
          stack || (stack = new Stack);
          var stacked = stack.get(value);
          if (stacked) {
            return stacked;
          }
          stack.set(value, result);

          if (isSet(value)) {
            value.forEach(function(subValue) {
              result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
            });
          } else if (isMap(value)) {
            value.forEach(function(subValue, key) {
              result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
            });
          }

          var keysFunc = isFull
            ? (isFlat ? getAllKeysIn : getAllKeys)
            : (isFlat ? keysIn : keys);

          var props = isArr ? undefined$1 : keysFunc(value);
          arrayEach(props || value, function(subValue, key) {
            if (props) {
              key = subValue;
              subValue = value[key];
            }
            // Recursively populate clone (susceptible to call stack limits).
            assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
          });
          return result;
        }

        /**
         * The base implementation of `_.conforms` which doesn't clone `source`.
         *
         * @private
         * @param {Object} source The object of property predicates to conform to.
         * @returns {Function} Returns the new spec function.
         */
        function baseConforms(source) {
          var props = keys(source);
          return function(object) {
            return baseConformsTo(object, source, props);
          };
        }

        /**
         * The base implementation of `_.conformsTo` which accepts `props` to check.
         *
         * @private
         * @param {Object} object The object to inspect.
         * @param {Object} source The object of property predicates to conform to.
         * @returns {boolean} Returns `true` if `object` conforms, else `false`.
         */
        function baseConformsTo(object, source, props) {
          var length = props.length;
          if (object == null) {
            return !length;
          }
          object = Object(object);
          while (length--) {
            var key = props[length],
                predicate = source[key],
                value = object[key];

            if ((value === undefined$1 && !(key in object)) || !predicate(value)) {
              return false;
            }
          }
          return true;
        }

        /**
         * The base implementation of `_.delay` and `_.defer` which accepts `args`
         * to provide to `func`.
         *
         * @private
         * @param {Function} func The function to delay.
         * @param {number} wait The number of milliseconds to delay invocation.
         * @param {Array} args The arguments to provide to `func`.
         * @returns {number|Object} Returns the timer id or timeout object.
         */
        function baseDelay(func, wait, args) {
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          return setTimeout(function() { func.apply(undefined$1, args); }, wait);
        }

        /**
         * The base implementation of methods like `_.difference` without support
         * for excluding multiple arrays or iteratee shorthands.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {Array} values The values to exclude.
         * @param {Function} [iteratee] The iteratee invoked per element.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns the new array of filtered values.
         */
        function baseDifference(array, values, iteratee, comparator) {
          var index = -1,
              includes = arrayIncludes,
              isCommon = true,
              length = array.length,
              result = [],
              valuesLength = values.length;

          if (!length) {
            return result;
          }
          if (iteratee) {
            values = arrayMap(values, baseUnary(iteratee));
          }
          if (comparator) {
            includes = arrayIncludesWith;
            isCommon = false;
          }
          else if (values.length >= LARGE_ARRAY_SIZE) {
            includes = cacheHas;
            isCommon = false;
            values = new SetCache(values);
          }
          outer:
          while (++index < length) {
            var value = array[index],
                computed = iteratee == null ? value : iteratee(value);

            value = (comparator || value !== 0) ? value : 0;
            if (isCommon && computed === computed) {
              var valuesIndex = valuesLength;
              while (valuesIndex--) {
                if (values[valuesIndex] === computed) {
                  continue outer;
                }
              }
              result.push(value);
            }
            else if (!includes(values, computed, comparator)) {
              result.push(value);
            }
          }
          return result;
        }

        /**
         * The base implementation of `_.forEach` without support for iteratee shorthands.
         *
         * @private
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array|Object} Returns `collection`.
         */
        var baseEach = createBaseEach(baseForOwn);

        /**
         * The base implementation of `_.forEachRight` without support for iteratee shorthands.
         *
         * @private
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array|Object} Returns `collection`.
         */
        var baseEachRight = createBaseEach(baseForOwnRight, true);

        /**
         * The base implementation of `_.every` without support for iteratee shorthands.
         *
         * @private
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} predicate The function invoked per iteration.
         * @returns {boolean} Returns `true` if all elements pass the predicate check,
         *  else `false`
         */
        function baseEvery(collection, predicate) {
          var result = true;
          baseEach(collection, function(value, index, collection) {
            result = !!predicate(value, index, collection);
            return result;
          });
          return result;
        }

        /**
         * The base implementation of methods like `_.max` and `_.min` which accepts a
         * `comparator` to determine the extremum value.
         *
         * @private
         * @param {Array} array The array to iterate over.
         * @param {Function} iteratee The iteratee invoked per iteration.
         * @param {Function} comparator The comparator used to compare values.
         * @returns {*} Returns the extremum value.
         */
        function baseExtremum(array, iteratee, comparator) {
          var index = -1,
              length = array.length;

          while (++index < length) {
            var value = array[index],
                current = iteratee(value);

            if (current != null && (computed === undefined$1
                  ? (current === current && !isSymbol(current))
                  : comparator(current, computed)
                )) {
              var computed = current,
                  result = value;
            }
          }
          return result;
        }

        /**
         * The base implementation of `_.fill` without an iteratee call guard.
         *
         * @private
         * @param {Array} array The array to fill.
         * @param {*} value The value to fill `array` with.
         * @param {number} [start=0] The start position.
         * @param {number} [end=array.length] The end position.
         * @returns {Array} Returns `array`.
         */
        function baseFill(array, value, start, end) {
          var length = array.length;

          start = toInteger(start);
          if (start < 0) {
            start = -start > length ? 0 : (length + start);
          }
          end = (end === undefined$1 || end > length) ? length : toInteger(end);
          if (end < 0) {
            end += length;
          }
          end = start > end ? 0 : toLength(end);
          while (start < end) {
            array[start++] = value;
          }
          return array;
        }

        /**
         * The base implementation of `_.filter` without support for iteratee shorthands.
         *
         * @private
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} predicate The function invoked per iteration.
         * @returns {Array} Returns the new filtered array.
         */
        function baseFilter(collection, predicate) {
          var result = [];
          baseEach(collection, function(value, index, collection) {
            if (predicate(value, index, collection)) {
              result.push(value);
            }
          });
          return result;
        }

        /**
         * The base implementation of `_.flatten` with support for restricting flattening.
         *
         * @private
         * @param {Array} array The array to flatten.
         * @param {number} depth The maximum recursion depth.
         * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
         * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
         * @param {Array} [result=[]] The initial result value.
         * @returns {Array} Returns the new flattened array.
         */
        function baseFlatten(array, depth, predicate, isStrict, result) {
          var index = -1,
              length = array.length;

          predicate || (predicate = isFlattenable);
          result || (result = []);

          while (++index < length) {
            var value = array[index];
            if (depth > 0 && predicate(value)) {
              if (depth > 1) {
                // Recursively flatten arrays (susceptible to call stack limits).
                baseFlatten(value, depth - 1, predicate, isStrict, result);
              } else {
                arrayPush(result, value);
              }
            } else if (!isStrict) {
              result[result.length] = value;
            }
          }
          return result;
        }

        /**
         * The base implementation of `baseForOwn` which iterates over `object`
         * properties returned by `keysFunc` and invokes `iteratee` for each property.
         * Iteratee functions may exit iteration early by explicitly returning `false`.
         *
         * @private
         * @param {Object} object The object to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @param {Function} keysFunc The function to get the keys of `object`.
         * @returns {Object} Returns `object`.
         */
        var baseFor = createBaseFor();

        /**
         * This function is like `baseFor` except that it iterates over properties
         * in the opposite order.
         *
         * @private
         * @param {Object} object The object to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @param {Function} keysFunc The function to get the keys of `object`.
         * @returns {Object} Returns `object`.
         */
        var baseForRight = createBaseFor(true);

        /**
         * The base implementation of `_.forOwn` without support for iteratee shorthands.
         *
         * @private
         * @param {Object} object The object to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Object} Returns `object`.
         */
        function baseForOwn(object, iteratee) {
          return object && baseFor(object, iteratee, keys);
        }

        /**
         * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
         *
         * @private
         * @param {Object} object The object to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Object} Returns `object`.
         */
        function baseForOwnRight(object, iteratee) {
          return object && baseForRight(object, iteratee, keys);
        }

        /**
         * The base implementation of `_.functions` which creates an array of
         * `object` function property names filtered from `props`.
         *
         * @private
         * @param {Object} object The object to inspect.
         * @param {Array} props The property names to filter.
         * @returns {Array} Returns the function names.
         */
        function baseFunctions(object, props) {
          return arrayFilter(props, function(key) {
            return isFunction(object[key]);
          });
        }

        /**
         * The base implementation of `_.get` without support for default values.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {Array|string} path The path of the property to get.
         * @returns {*} Returns the resolved value.
         */
        function baseGet(object, path) {
          path = castPath(path, object);

          var index = 0,
              length = path.length;

          while (object != null && index < length) {
            object = object[toKey(path[index++])];
          }
          return (index && index == length) ? object : undefined$1;
        }

        /**
         * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
         * `keysFunc` and `symbolsFunc` to get the enumerable property names and
         * symbols of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {Function} keysFunc The function to get the keys of `object`.
         * @param {Function} symbolsFunc The function to get the symbols of `object`.
         * @returns {Array} Returns the array of property names and symbols.
         */
        function baseGetAllKeys(object, keysFunc, symbolsFunc) {
          var result = keysFunc(object);
          return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
        }

        /**
         * The base implementation of `getTag` without fallbacks for buggy environments.
         *
         * @private
         * @param {*} value The value to query.
         * @returns {string} Returns the `toStringTag`.
         */
        function baseGetTag(value) {
          if (value == null) {
            return value === undefined$1 ? undefinedTag : nullTag;
          }
          return (symToStringTag && symToStringTag in Object(value))
            ? getRawTag(value)
            : objectToString(value);
        }

        /**
         * The base implementation of `_.gt` which doesn't coerce arguments.
         *
         * @private
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @returns {boolean} Returns `true` if `value` is greater than `other`,
         *  else `false`.
         */
        function baseGt(value, other) {
          return value > other;
        }

        /**
         * The base implementation of `_.has` without support for deep paths.
         *
         * @private
         * @param {Object} [object] The object to query.
         * @param {Array|string} key The key to check.
         * @returns {boolean} Returns `true` if `key` exists, else `false`.
         */
        function baseHas(object, key) {
          return object != null && hasOwnProperty.call(object, key);
        }

        /**
         * The base implementation of `_.hasIn` without support for deep paths.
         *
         * @private
         * @param {Object} [object] The object to query.
         * @param {Array|string} key The key to check.
         * @returns {boolean} Returns `true` if `key` exists, else `false`.
         */
        function baseHasIn(object, key) {
          return object != null && key in Object(object);
        }

        /**
         * The base implementation of `_.inRange` which doesn't coerce arguments.
         *
         * @private
         * @param {number} number The number to check.
         * @param {number} start The start of the range.
         * @param {number} end The end of the range.
         * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
         */
        function baseInRange(number, start, end) {
          return number >= nativeMin(start, end) && number < nativeMax(start, end);
        }

        /**
         * The base implementation of methods like `_.intersection`, without support
         * for iteratee shorthands, that accepts an array of arrays to inspect.
         *
         * @private
         * @param {Array} arrays The arrays to inspect.
         * @param {Function} [iteratee] The iteratee invoked per element.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns the new array of shared values.
         */
        function baseIntersection(arrays, iteratee, comparator) {
          var includes = comparator ? arrayIncludesWith : arrayIncludes,
              length = arrays[0].length,
              othLength = arrays.length,
              othIndex = othLength,
              caches = Array(othLength),
              maxLength = Infinity,
              result = [];

          while (othIndex--) {
            var array = arrays[othIndex];
            if (othIndex && iteratee) {
              array = arrayMap(array, baseUnary(iteratee));
            }
            maxLength = nativeMin(array.length, maxLength);
            caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
              ? new SetCache(othIndex && array)
              : undefined$1;
          }
          array = arrays[0];

          var index = -1,
              seen = caches[0];

          outer:
          while (++index < length && result.length < maxLength) {
            var value = array[index],
                computed = iteratee ? iteratee(value) : value;

            value = (comparator || value !== 0) ? value : 0;
            if (!(seen
                  ? cacheHas(seen, computed)
                  : includes(result, computed, comparator)
                )) {
              othIndex = othLength;
              while (--othIndex) {
                var cache = caches[othIndex];
                if (!(cache
                      ? cacheHas(cache, computed)
                      : includes(arrays[othIndex], computed, comparator))
                    ) {
                  continue outer;
                }
              }
              if (seen) {
                seen.push(computed);
              }
              result.push(value);
            }
          }
          return result;
        }

        /**
         * The base implementation of `_.invert` and `_.invertBy` which inverts
         * `object` with values transformed by `iteratee` and set by `setter`.
         *
         * @private
         * @param {Object} object The object to iterate over.
         * @param {Function} setter The function to set `accumulator` values.
         * @param {Function} iteratee The iteratee to transform values.
         * @param {Object} accumulator The initial inverted object.
         * @returns {Function} Returns `accumulator`.
         */
        function baseInverter(object, setter, iteratee, accumulator) {
          baseForOwn(object, function(value, key, object) {
            setter(accumulator, iteratee(value), key, object);
          });
          return accumulator;
        }

        /**
         * The base implementation of `_.invoke` without support for individual
         * method arguments.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {Array|string} path The path of the method to invoke.
         * @param {Array} args The arguments to invoke the method with.
         * @returns {*} Returns the result of the invoked method.
         */
        function baseInvoke(object, path, args) {
          path = castPath(path, object);
          object = parent(object, path);
          var func = object == null ? object : object[toKey(last(path))];
          return func == null ? undefined$1 : apply(func, object, args);
        }

        /**
         * The base implementation of `_.isArguments`.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an `arguments` object,
         */
        function baseIsArguments(value) {
          return isObjectLike(value) && baseGetTag(value) == argsTag;
        }

        /**
         * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
         */
        function baseIsArrayBuffer(value) {
          return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
        }

        /**
         * The base implementation of `_.isDate` without Node.js optimizations.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
         */
        function baseIsDate(value) {
          return isObjectLike(value) && baseGetTag(value) == dateTag;
        }

        /**
         * The base implementation of `_.isEqual` which supports partial comparisons
         * and tracks traversed objects.
         *
         * @private
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @param {boolean} bitmask The bitmask flags.
         *  1 - Unordered comparison
         *  2 - Partial comparison
         * @param {Function} [customizer] The function to customize comparisons.
         * @param {Object} [stack] Tracks traversed `value` and `other` objects.
         * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
         */
        function baseIsEqual(value, other, bitmask, customizer, stack) {
          if (value === other) {
            return true;
          }
          if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
            return value !== value && other !== other;
          }
          return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
        }

        /**
         * A specialized version of `baseIsEqual` for arrays and objects which performs
         * deep comparisons and tracks traversed objects enabling objects with circular
         * references to be compared.
         *
         * @private
         * @param {Object} object The object to compare.
         * @param {Object} other The other object to compare.
         * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
         * @param {Function} customizer The function to customize comparisons.
         * @param {Function} equalFunc The function to determine equivalents of values.
         * @param {Object} [stack] Tracks traversed `object` and `other` objects.
         * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
         */
        function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
          var objIsArr = isArray(object),
              othIsArr = isArray(other),
              objTag = objIsArr ? arrayTag : getTag(object),
              othTag = othIsArr ? arrayTag : getTag(other);

          objTag = objTag == argsTag ? objectTag : objTag;
          othTag = othTag == argsTag ? objectTag : othTag;

          var objIsObj = objTag == objectTag,
              othIsObj = othTag == objectTag,
              isSameTag = objTag == othTag;

          if (isSameTag && isBuffer(object)) {
            if (!isBuffer(other)) {
              return false;
            }
            objIsArr = true;
            objIsObj = false;
          }
          if (isSameTag && !objIsObj) {
            stack || (stack = new Stack);
            return (objIsArr || isTypedArray(object))
              ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
              : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
          }
          if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
            var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
                othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

            if (objIsWrapped || othIsWrapped) {
              var objUnwrapped = objIsWrapped ? object.value() : object,
                  othUnwrapped = othIsWrapped ? other.value() : other;

              stack || (stack = new Stack);
              return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
            }
          }
          if (!isSameTag) {
            return false;
          }
          stack || (stack = new Stack);
          return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
        }

        /**
         * The base implementation of `_.isMap` without Node.js optimizations.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a map, else `false`.
         */
        function baseIsMap(value) {
          return isObjectLike(value) && getTag(value) == mapTag;
        }

        /**
         * The base implementation of `_.isMatch` without support for iteratee shorthands.
         *
         * @private
         * @param {Object} object The object to inspect.
         * @param {Object} source The object of property values to match.
         * @param {Array} matchData The property names, values, and compare flags to match.
         * @param {Function} [customizer] The function to customize comparisons.
         * @returns {boolean} Returns `true` if `object` is a match, else `false`.
         */
        function baseIsMatch(object, source, matchData, customizer) {
          var index = matchData.length,
              length = index,
              noCustomizer = !customizer;

          if (object == null) {
            return !length;
          }
          object = Object(object);
          while (index--) {
            var data = matchData[index];
            if ((noCustomizer && data[2])
                  ? data[1] !== object[data[0]]
                  : !(data[0] in object)
                ) {
              return false;
            }
          }
          while (++index < length) {
            data = matchData[index];
            var key = data[0],
                objValue = object[key],
                srcValue = data[1];

            if (noCustomizer && data[2]) {
              if (objValue === undefined$1 && !(key in object)) {
                return false;
              }
            } else {
              var stack = new Stack;
              if (customizer) {
                var result = customizer(objValue, srcValue, key, object, source, stack);
              }
              if (!(result === undefined$1
                    ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                    : result
                  )) {
                return false;
              }
            }
          }
          return true;
        }

        /**
         * The base implementation of `_.isNative` without bad shim checks.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a native function,
         *  else `false`.
         */
        function baseIsNative(value) {
          if (!isObject(value) || isMasked(value)) {
            return false;
          }
          var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
          return pattern.test(toSource(value));
        }

        /**
         * The base implementation of `_.isRegExp` without Node.js optimizations.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
         */
        function baseIsRegExp(value) {
          return isObjectLike(value) && baseGetTag(value) == regexpTag;
        }

        /**
         * The base implementation of `_.isSet` without Node.js optimizations.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a set, else `false`.
         */
        function baseIsSet(value) {
          return isObjectLike(value) && getTag(value) == setTag;
        }

        /**
         * The base implementation of `_.isTypedArray` without Node.js optimizations.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
         */
        function baseIsTypedArray(value) {
          return isObjectLike(value) &&
            isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
        }

        /**
         * The base implementation of `_.iteratee`.
         *
         * @private
         * @param {*} [value=_.identity] The value to convert to an iteratee.
         * @returns {Function} Returns the iteratee.
         */
        function baseIteratee(value) {
          // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
          // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
          if (typeof value == 'function') {
            return value;
          }
          if (value == null) {
            return identity;
          }
          if (typeof value == 'object') {
            return isArray(value)
              ? baseMatchesProperty(value[0], value[1])
              : baseMatches(value);
          }
          return property(value);
        }

        /**
         * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names.
         */
        function baseKeys(object) {
          if (!isPrototype(object)) {
            return nativeKeys(object);
          }
          var result = [];
          for (var key in Object(object)) {
            if (hasOwnProperty.call(object, key) && key != 'constructor') {
              result.push(key);
            }
          }
          return result;
        }

        /**
         * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names.
         */
        function baseKeysIn(object) {
          if (!isObject(object)) {
            return nativeKeysIn(object);
          }
          var isProto = isPrototype(object),
              result = [];

          for (var key in object) {
            if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
              result.push(key);
            }
          }
          return result;
        }

        /**
         * The base implementation of `_.lt` which doesn't coerce arguments.
         *
         * @private
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @returns {boolean} Returns `true` if `value` is less than `other`,
         *  else `false`.
         */
        function baseLt(value, other) {
          return value < other;
        }

        /**
         * The base implementation of `_.map` without support for iteratee shorthands.
         *
         * @private
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array} Returns the new mapped array.
         */
        function baseMap(collection, iteratee) {
          var index = -1,
              result = isArrayLike(collection) ? Array(collection.length) : [];

          baseEach(collection, function(value, key, collection) {
            result[++index] = iteratee(value, key, collection);
          });
          return result;
        }

        /**
         * The base implementation of `_.matches` which doesn't clone `source`.
         *
         * @private
         * @param {Object} source The object of property values to match.
         * @returns {Function} Returns the new spec function.
         */
        function baseMatches(source) {
          var matchData = getMatchData(source);
          if (matchData.length == 1 && matchData[0][2]) {
            return matchesStrictComparable(matchData[0][0], matchData[0][1]);
          }
          return function(object) {
            return object === source || baseIsMatch(object, source, matchData);
          };
        }

        /**
         * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
         *
         * @private
         * @param {string} path The path of the property to get.
         * @param {*} srcValue The value to match.
         * @returns {Function} Returns the new spec function.
         */
        function baseMatchesProperty(path, srcValue) {
          if (isKey(path) && isStrictComparable(srcValue)) {
            return matchesStrictComparable(toKey(path), srcValue);
          }
          return function(object) {
            var objValue = get(object, path);
            return (objValue === undefined$1 && objValue === srcValue)
              ? hasIn(object, path)
              : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
          };
        }

        /**
         * The base implementation of `_.merge` without support for multiple sources.
         *
         * @private
         * @param {Object} object The destination object.
         * @param {Object} source The source object.
         * @param {number} srcIndex The index of `source`.
         * @param {Function} [customizer] The function to customize merged values.
         * @param {Object} [stack] Tracks traversed source values and their merged
         *  counterparts.
         */
        function baseMerge(object, source, srcIndex, customizer, stack) {
          if (object === source) {
            return;
          }
          baseFor(source, function(srcValue, key) {
            stack || (stack = new Stack);
            if (isObject(srcValue)) {
              baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
            }
            else {
              var newValue = customizer
                ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
                : undefined$1;

              if (newValue === undefined$1) {
                newValue = srcValue;
              }
              assignMergeValue(object, key, newValue);
            }
          }, keysIn);
        }

        /**
         * A specialized version of `baseMerge` for arrays and objects which performs
         * deep merges and tracks traversed objects enabling objects with circular
         * references to be merged.
         *
         * @private
         * @param {Object} object The destination object.
         * @param {Object} source The source object.
         * @param {string} key The key of the value to merge.
         * @param {number} srcIndex The index of `source`.
         * @param {Function} mergeFunc The function to merge values.
         * @param {Function} [customizer] The function to customize assigned values.
         * @param {Object} [stack] Tracks traversed source values and their merged
         *  counterparts.
         */
        function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
          var objValue = safeGet(object, key),
              srcValue = safeGet(source, key),
              stacked = stack.get(srcValue);

          if (stacked) {
            assignMergeValue(object, key, stacked);
            return;
          }
          var newValue = customizer
            ? customizer(objValue, srcValue, (key + ''), object, source, stack)
            : undefined$1;

          var isCommon = newValue === undefined$1;

          if (isCommon) {
            var isArr = isArray(srcValue),
                isBuff = !isArr && isBuffer(srcValue),
                isTyped = !isArr && !isBuff && isTypedArray(srcValue);

            newValue = srcValue;
            if (isArr || isBuff || isTyped) {
              if (isArray(objValue)) {
                newValue = objValue;
              }
              else if (isArrayLikeObject(objValue)) {
                newValue = copyArray(objValue);
              }
              else if (isBuff) {
                isCommon = false;
                newValue = cloneBuffer(srcValue, true);
              }
              else if (isTyped) {
                isCommon = false;
                newValue = cloneTypedArray(srcValue, true);
              }
              else {
                newValue = [];
              }
            }
            else if (isPlainObject(srcValue) || isArguments(srcValue)) {
              newValue = objValue;
              if (isArguments(objValue)) {
                newValue = toPlainObject(objValue);
              }
              else if (!isObject(objValue) || isFunction(objValue)) {
                newValue = initCloneObject(srcValue);
              }
            }
            else {
              isCommon = false;
            }
          }
          if (isCommon) {
            // Recursively merge objects and arrays (susceptible to call stack limits).
            stack.set(srcValue, newValue);
            mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
            stack['delete'](srcValue);
          }
          assignMergeValue(object, key, newValue);
        }

        /**
         * The base implementation of `_.nth` which doesn't coerce arguments.
         *
         * @private
         * @param {Array} array The array to query.
         * @param {number} n The index of the element to return.
         * @returns {*} Returns the nth element of `array`.
         */
        function baseNth(array, n) {
          var length = array.length;
          if (!length) {
            return;
          }
          n += n < 0 ? length : 0;
          return isIndex(n, length) ? array[n] : undefined$1;
        }

        /**
         * The base implementation of `_.orderBy` without param guards.
         *
         * @private
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
         * @param {string[]} orders The sort orders of `iteratees`.
         * @returns {Array} Returns the new sorted array.
         */
        function baseOrderBy(collection, iteratees, orders) {
          if (iteratees.length) {
            iteratees = arrayMap(iteratees, function(iteratee) {
              if (isArray(iteratee)) {
                return function(value) {
                  return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
                }
              }
              return iteratee;
            });
          } else {
            iteratees = [identity];
          }

          var index = -1;
          iteratees = arrayMap(iteratees, baseUnary(getIteratee()));

          var result = baseMap(collection, function(value, key, collection) {
            var criteria = arrayMap(iteratees, function(iteratee) {
              return iteratee(value);
            });
            return { 'criteria': criteria, 'index': ++index, 'value': value };
          });

          return baseSortBy(result, function(object, other) {
            return compareMultiple(object, other, orders);
          });
        }

        /**
         * The base implementation of `_.pick` without support for individual
         * property identifiers.
         *
         * @private
         * @param {Object} object The source object.
         * @param {string[]} paths The property paths to pick.
         * @returns {Object} Returns the new object.
         */
        function basePick(object, paths) {
          return basePickBy(object, paths, function(value, path) {
            return hasIn(object, path);
          });
        }

        /**
         * The base implementation of  `_.pickBy` without support for iteratee shorthands.
         *
         * @private
         * @param {Object} object The source object.
         * @param {string[]} paths The property paths to pick.
         * @param {Function} predicate The function invoked per property.
         * @returns {Object} Returns the new object.
         */
        function basePickBy(object, paths, predicate) {
          var index = -1,
              length = paths.length,
              result = {};

          while (++index < length) {
            var path = paths[index],
                value = baseGet(object, path);

            if (predicate(value, path)) {
              baseSet(result, castPath(path, object), value);
            }
          }
          return result;
        }

        /**
         * A specialized version of `baseProperty` which supports deep paths.
         *
         * @private
         * @param {Array|string} path The path of the property to get.
         * @returns {Function} Returns the new accessor function.
         */
        function basePropertyDeep(path) {
          return function(object) {
            return baseGet(object, path);
          };
        }

        /**
         * The base implementation of `_.pullAllBy` without support for iteratee
         * shorthands.
         *
         * @private
         * @param {Array} array The array to modify.
         * @param {Array} values The values to remove.
         * @param {Function} [iteratee] The iteratee invoked per element.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns `array`.
         */
        function basePullAll(array, values, iteratee, comparator) {
          var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
              index = -1,
              length = values.length,
              seen = array;

          if (array === values) {
            values = copyArray(values);
          }
          if (iteratee) {
            seen = arrayMap(array, baseUnary(iteratee));
          }
          while (++index < length) {
            var fromIndex = 0,
                value = values[index],
                computed = iteratee ? iteratee(value) : value;

            while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
              if (seen !== array) {
                splice.call(seen, fromIndex, 1);
              }
              splice.call(array, fromIndex, 1);
            }
          }
          return array;
        }

        /**
         * The base implementation of `_.pullAt` without support for individual
         * indexes or capturing the removed elements.
         *
         * @private
         * @param {Array} array The array to modify.
         * @param {number[]} indexes The indexes of elements to remove.
         * @returns {Array} Returns `array`.
         */
        function basePullAt(array, indexes) {
          var length = array ? indexes.length : 0,
              lastIndex = length - 1;

          while (length--) {
            var index = indexes[length];
            if (length == lastIndex || index !== previous) {
              var previous = index;
              if (isIndex(index)) {
                splice.call(array, index, 1);
              } else {
                baseUnset(array, index);
              }
            }
          }
          return array;
        }

        /**
         * The base implementation of `_.random` without support for returning
         * floating-point numbers.
         *
         * @private
         * @param {number} lower The lower bound.
         * @param {number} upper The upper bound.
         * @returns {number} Returns the random number.
         */
        function baseRandom(lower, upper) {
          return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
        }

        /**
         * The base implementation of `_.range` and `_.rangeRight` which doesn't
         * coerce arguments.
         *
         * @private
         * @param {number} start The start of the range.
         * @param {number} end The end of the range.
         * @param {number} step The value to increment or decrement by.
         * @param {boolean} [fromRight] Specify iterating from right to left.
         * @returns {Array} Returns the range of numbers.
         */
        function baseRange(start, end, step, fromRight) {
          var index = -1,
              length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
              result = Array(length);

          while (length--) {
            result[fromRight ? length : ++index] = start;
            start += step;
          }
          return result;
        }

        /**
         * The base implementation of `_.repeat` which doesn't coerce arguments.
         *
         * @private
         * @param {string} string The string to repeat.
         * @param {number} n The number of times to repeat the string.
         * @returns {string} Returns the repeated string.
         */
        function baseRepeat(string, n) {
          var result = '';
          if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
            return result;
          }
          // Leverage the exponentiation by squaring algorithm for a faster repeat.
          // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
          do {
            if (n % 2) {
              result += string;
            }
            n = nativeFloor(n / 2);
            if (n) {
              string += string;
            }
          } while (n);

          return result;
        }

        /**
         * The base implementation of `_.rest` which doesn't validate or coerce arguments.
         *
         * @private
         * @param {Function} func The function to apply a rest parameter to.
         * @param {number} [start=func.length-1] The start position of the rest parameter.
         * @returns {Function} Returns the new function.
         */
        function baseRest(func, start) {
          return setToString(overRest(func, start, identity), func + '');
        }

        /**
         * The base implementation of `_.sample`.
         *
         * @private
         * @param {Array|Object} collection The collection to sample.
         * @returns {*} Returns the random element.
         */
        function baseSample(collection) {
          return arraySample(values(collection));
        }

        /**
         * The base implementation of `_.sampleSize` without param guards.
         *
         * @private
         * @param {Array|Object} collection The collection to sample.
         * @param {number} n The number of elements to sample.
         * @returns {Array} Returns the random elements.
         */
        function baseSampleSize(collection, n) {
          var array = values(collection);
          return shuffleSelf(array, baseClamp(n, 0, array.length));
        }

        /**
         * The base implementation of `_.set`.
         *
         * @private
         * @param {Object} object The object to modify.
         * @param {Array|string} path The path of the property to set.
         * @param {*} value The value to set.
         * @param {Function} [customizer] The function to customize path creation.
         * @returns {Object} Returns `object`.
         */
        function baseSet(object, path, value, customizer) {
          if (!isObject(object)) {
            return object;
          }
          path = castPath(path, object);

          var index = -1,
              length = path.length,
              lastIndex = length - 1,
              nested = object;

          while (nested != null && ++index < length) {
            var key = toKey(path[index]),
                newValue = value;

            if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
              return object;
            }

            if (index != lastIndex) {
              var objValue = nested[key];
              newValue = customizer ? customizer(objValue, key, nested) : undefined$1;
              if (newValue === undefined$1) {
                newValue = isObject(objValue)
                  ? objValue
                  : (isIndex(path[index + 1]) ? [] : {});
              }
            }
            assignValue(nested, key, newValue);
            nested = nested[key];
          }
          return object;
        }

        /**
         * The base implementation of `setData` without support for hot loop shorting.
         *
         * @private
         * @param {Function} func The function to associate metadata with.
         * @param {*} data The metadata.
         * @returns {Function} Returns `func`.
         */
        var baseSetData = !metaMap ? identity : function(func, data) {
          metaMap.set(func, data);
          return func;
        };

        /**
         * The base implementation of `setToString` without support for hot loop shorting.
         *
         * @private
         * @param {Function} func The function to modify.
         * @param {Function} string The `toString` result.
         * @returns {Function} Returns `func`.
         */
        var baseSetToString = !defineProperty ? identity : function(func, string) {
          return defineProperty(func, 'toString', {
            'configurable': true,
            'enumerable': false,
            'value': constant(string),
            'writable': true
          });
        };

        /**
         * The base implementation of `_.shuffle`.
         *
         * @private
         * @param {Array|Object} collection The collection to shuffle.
         * @returns {Array} Returns the new shuffled array.
         */
        function baseShuffle(collection) {
          return shuffleSelf(values(collection));
        }

        /**
         * The base implementation of `_.slice` without an iteratee call guard.
         *
         * @private
         * @param {Array} array The array to slice.
         * @param {number} [start=0] The start position.
         * @param {number} [end=array.length] The end position.
         * @returns {Array} Returns the slice of `array`.
         */
        function baseSlice(array, start, end) {
          var index = -1,
              length = array.length;

          if (start < 0) {
            start = -start > length ? 0 : (length + start);
          }
          end = end > length ? length : end;
          if (end < 0) {
            end += length;
          }
          length = start > end ? 0 : ((end - start) >>> 0);
          start >>>= 0;

          var result = Array(length);
          while (++index < length) {
            result[index] = array[index + start];
          }
          return result;
        }

        /**
         * The base implementation of `_.some` without support for iteratee shorthands.
         *
         * @private
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} predicate The function invoked per iteration.
         * @returns {boolean} Returns `true` if any element passes the predicate check,
         *  else `false`.
         */
        function baseSome(collection, predicate) {
          var result;

          baseEach(collection, function(value, index, collection) {
            result = predicate(value, index, collection);
            return !result;
          });
          return !!result;
        }

        /**
         * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
         * performs a binary search of `array` to determine the index at which `value`
         * should be inserted into `array` in order to maintain its sort order.
         *
         * @private
         * @param {Array} array The sorted array to inspect.
         * @param {*} value The value to evaluate.
         * @param {boolean} [retHighest] Specify returning the highest qualified index.
         * @returns {number} Returns the index at which `value` should be inserted
         *  into `array`.
         */
        function baseSortedIndex(array, value, retHighest) {
          var low = 0,
              high = array == null ? low : array.length;

          if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
            while (low < high) {
              var mid = (low + high) >>> 1,
                  computed = array[mid];

              if (computed !== null && !isSymbol(computed) &&
                  (retHighest ? (computed <= value) : (computed < value))) {
                low = mid + 1;
              } else {
                high = mid;
              }
            }
            return high;
          }
          return baseSortedIndexBy(array, value, identity, retHighest);
        }

        /**
         * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
         * which invokes `iteratee` for `value` and each element of `array` to compute
         * their sort ranking. The iteratee is invoked with one argument; (value).
         *
         * @private
         * @param {Array} array The sorted array to inspect.
         * @param {*} value The value to evaluate.
         * @param {Function} iteratee The iteratee invoked per element.
         * @param {boolean} [retHighest] Specify returning the highest qualified index.
         * @returns {number} Returns the index at which `value` should be inserted
         *  into `array`.
         */
        function baseSortedIndexBy(array, value, iteratee, retHighest) {
          var low = 0,
              high = array == null ? 0 : array.length;
          if (high === 0) {
            return 0;
          }

          value = iteratee(value);
          var valIsNaN = value !== value,
              valIsNull = value === null,
              valIsSymbol = isSymbol(value),
              valIsUndefined = value === undefined$1;

          while (low < high) {
            var mid = nativeFloor((low + high) / 2),
                computed = iteratee(array[mid]),
                othIsDefined = computed !== undefined$1,
                othIsNull = computed === null,
                othIsReflexive = computed === computed,
                othIsSymbol = isSymbol(computed);

            if (valIsNaN) {
              var setLow = retHighest || othIsReflexive;
            } else if (valIsUndefined) {
              setLow = othIsReflexive && (retHighest || othIsDefined);
            } else if (valIsNull) {
              setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
            } else if (valIsSymbol) {
              setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
            } else if (othIsNull || othIsSymbol) {
              setLow = false;
            } else {
              setLow = retHighest ? (computed <= value) : (computed < value);
            }
            if (setLow) {
              low = mid + 1;
            } else {
              high = mid;
            }
          }
          return nativeMin(high, MAX_ARRAY_INDEX);
        }

        /**
         * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
         * support for iteratee shorthands.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {Function} [iteratee] The iteratee invoked per element.
         * @returns {Array} Returns the new duplicate free array.
         */
        function baseSortedUniq(array, iteratee) {
          var index = -1,
              length = array.length,
              resIndex = 0,
              result = [];

          while (++index < length) {
            var value = array[index],
                computed = iteratee ? iteratee(value) : value;

            if (!index || !eq(computed, seen)) {
              var seen = computed;
              result[resIndex++] = value === 0 ? 0 : value;
            }
          }
          return result;
        }

        /**
         * The base implementation of `_.toNumber` which doesn't ensure correct
         * conversions of binary, hexadecimal, or octal string values.
         *
         * @private
         * @param {*} value The value to process.
         * @returns {number} Returns the number.
         */
        function baseToNumber(value) {
          if (typeof value == 'number') {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          return +value;
        }

        /**
         * The base implementation of `_.toString` which doesn't convert nullish
         * values to empty strings.
         *
         * @private
         * @param {*} value The value to process.
         * @returns {string} Returns the string.
         */
        function baseToString(value) {
          // Exit early for strings to avoid a performance hit in some environments.
          if (typeof value == 'string') {
            return value;
          }
          if (isArray(value)) {
            // Recursively convert values (susceptible to call stack limits).
            return arrayMap(value, baseToString) + '';
          }
          if (isSymbol(value)) {
            return symbolToString ? symbolToString.call(value) : '';
          }
          var result = (value + '');
          return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
        }

        /**
         * The base implementation of `_.uniqBy` without support for iteratee shorthands.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {Function} [iteratee] The iteratee invoked per element.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns the new duplicate free array.
         */
        function baseUniq(array, iteratee, comparator) {
          var index = -1,
              includes = arrayIncludes,
              length = array.length,
              isCommon = true,
              result = [],
              seen = result;

          if (comparator) {
            isCommon = false;
            includes = arrayIncludesWith;
          }
          else if (length >= LARGE_ARRAY_SIZE) {
            var set = iteratee ? null : createSet(array);
            if (set) {
              return setToArray(set);
            }
            isCommon = false;
            includes = cacheHas;
            seen = new SetCache;
          }
          else {
            seen = iteratee ? [] : result;
          }
          outer:
          while (++index < length) {
            var value = array[index],
                computed = iteratee ? iteratee(value) : value;

            value = (comparator || value !== 0) ? value : 0;
            if (isCommon && computed === computed) {
              var seenIndex = seen.length;
              while (seenIndex--) {
                if (seen[seenIndex] === computed) {
                  continue outer;
                }
              }
              if (iteratee) {
                seen.push(computed);
              }
              result.push(value);
            }
            else if (!includes(seen, computed, comparator)) {
              if (seen !== result) {
                seen.push(computed);
              }
              result.push(value);
            }
          }
          return result;
        }

        /**
         * The base implementation of `_.unset`.
         *
         * @private
         * @param {Object} object The object to modify.
         * @param {Array|string} path The property path to unset.
         * @returns {boolean} Returns `true` if the property is deleted, else `false`.
         */
        function baseUnset(object, path) {
          path = castPath(path, object);
          object = parent(object, path);
          return object == null || delete object[toKey(last(path))];
        }

        /**
         * The base implementation of `_.update`.
         *
         * @private
         * @param {Object} object The object to modify.
         * @param {Array|string} path The path of the property to update.
         * @param {Function} updater The function to produce the updated value.
         * @param {Function} [customizer] The function to customize path creation.
         * @returns {Object} Returns `object`.
         */
        function baseUpdate(object, path, updater, customizer) {
          return baseSet(object, path, updater(baseGet(object, path)), customizer);
        }

        /**
         * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
         * without support for iteratee shorthands.
         *
         * @private
         * @param {Array} array The array to query.
         * @param {Function} predicate The function invoked per iteration.
         * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
         * @param {boolean} [fromRight] Specify iterating from right to left.
         * @returns {Array} Returns the slice of `array`.
         */
        function baseWhile(array, predicate, isDrop, fromRight) {
          var length = array.length,
              index = fromRight ? length : -1;

          while ((fromRight ? index-- : ++index < length) &&
            predicate(array[index], index, array)) {}

          return isDrop
            ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
            : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
        }

        /**
         * The base implementation of `wrapperValue` which returns the result of
         * performing a sequence of actions on the unwrapped `value`, where each
         * successive action is supplied the return value of the previous.
         *
         * @private
         * @param {*} value The unwrapped value.
         * @param {Array} actions Actions to perform to resolve the unwrapped value.
         * @returns {*} Returns the resolved value.
         */
        function baseWrapperValue(value, actions) {
          var result = value;
          if (result instanceof LazyWrapper) {
            result = result.value();
          }
          return arrayReduce(actions, function(result, action) {
            return action.func.apply(action.thisArg, arrayPush([result], action.args));
          }, result);
        }

        /**
         * The base implementation of methods like `_.xor`, without support for
         * iteratee shorthands, that accepts an array of arrays to inspect.
         *
         * @private
         * @param {Array} arrays The arrays to inspect.
         * @param {Function} [iteratee] The iteratee invoked per element.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns the new array of values.
         */
        function baseXor(arrays, iteratee, comparator) {
          var length = arrays.length;
          if (length < 2) {
            return length ? baseUniq(arrays[0]) : [];
          }
          var index = -1,
              result = Array(length);

          while (++index < length) {
            var array = arrays[index],
                othIndex = -1;

            while (++othIndex < length) {
              if (othIndex != index) {
                result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
              }
            }
          }
          return baseUniq(baseFlatten(result, 1), iteratee, comparator);
        }

        /**
         * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
         *
         * @private
         * @param {Array} props The property identifiers.
         * @param {Array} values The property values.
         * @param {Function} assignFunc The function to assign values.
         * @returns {Object} Returns the new object.
         */
        function baseZipObject(props, values, assignFunc) {
          var index = -1,
              length = props.length,
              valsLength = values.length,
              result = {};

          while (++index < length) {
            var value = index < valsLength ? values[index] : undefined$1;
            assignFunc(result, props[index], value);
          }
          return result;
        }

        /**
         * Casts `value` to an empty array if it's not an array like object.
         *
         * @private
         * @param {*} value The value to inspect.
         * @returns {Array|Object} Returns the cast array-like object.
         */
        function castArrayLikeObject(value) {
          return isArrayLikeObject(value) ? value : [];
        }

        /**
         * Casts `value` to `identity` if it's not a function.
         *
         * @private
         * @param {*} value The value to inspect.
         * @returns {Function} Returns cast function.
         */
        function castFunction(value) {
          return typeof value == 'function' ? value : identity;
        }

        /**
         * Casts `value` to a path array if it's not one.
         *
         * @private
         * @param {*} value The value to inspect.
         * @param {Object} [object] The object to query keys on.
         * @returns {Array} Returns the cast property path array.
         */
        function castPath(value, object) {
          if (isArray(value)) {
            return value;
          }
          return isKey(value, object) ? [value] : stringToPath(toString(value));
        }

        /**
         * A `baseRest` alias which can be replaced with `identity` by module
         * replacement plugins.
         *
         * @private
         * @type {Function}
         * @param {Function} func The function to apply a rest parameter to.
         * @returns {Function} Returns the new function.
         */
        var castRest = baseRest;

        /**
         * Casts `array` to a slice if it's needed.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {number} start The start position.
         * @param {number} [end=array.length] The end position.
         * @returns {Array} Returns the cast slice.
         */
        function castSlice(array, start, end) {
          var length = array.length;
          end = end === undefined$1 ? length : end;
          return (!start && end >= length) ? array : baseSlice(array, start, end);
        }

        /**
         * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
         *
         * @private
         * @param {number|Object} id The timer id or timeout object of the timer to clear.
         */
        var clearTimeout = ctxClearTimeout || function(id) {
          return root.clearTimeout(id);
        };

        /**
         * Creates a clone of  `buffer`.
         *
         * @private
         * @param {Buffer} buffer The buffer to clone.
         * @param {boolean} [isDeep] Specify a deep clone.
         * @returns {Buffer} Returns the cloned buffer.
         */
        function cloneBuffer(buffer, isDeep) {
          if (isDeep) {
            return buffer.slice();
          }
          var length = buffer.length,
              result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

          buffer.copy(result);
          return result;
        }

        /**
         * Creates a clone of `arrayBuffer`.
         *
         * @private
         * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
         * @returns {ArrayBuffer} Returns the cloned array buffer.
         */
        function cloneArrayBuffer(arrayBuffer) {
          var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
          new Uint8Array(result).set(new Uint8Array(arrayBuffer));
          return result;
        }

        /**
         * Creates a clone of `dataView`.
         *
         * @private
         * @param {Object} dataView The data view to clone.
         * @param {boolean} [isDeep] Specify a deep clone.
         * @returns {Object} Returns the cloned data view.
         */
        function cloneDataView(dataView, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
          return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
        }

        /**
         * Creates a clone of `regexp`.
         *
         * @private
         * @param {Object} regexp The regexp to clone.
         * @returns {Object} Returns the cloned regexp.
         */
        function cloneRegExp(regexp) {
          var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
          result.lastIndex = regexp.lastIndex;
          return result;
        }

        /**
         * Creates a clone of the `symbol` object.
         *
         * @private
         * @param {Object} symbol The symbol object to clone.
         * @returns {Object} Returns the cloned symbol object.
         */
        function cloneSymbol(symbol) {
          return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
        }

        /**
         * Creates a clone of `typedArray`.
         *
         * @private
         * @param {Object} typedArray The typed array to clone.
         * @param {boolean} [isDeep] Specify a deep clone.
         * @returns {Object} Returns the cloned typed array.
         */
        function cloneTypedArray(typedArray, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
          return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
        }

        /**
         * Compares values to sort them in ascending order.
         *
         * @private
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @returns {number} Returns the sort order indicator for `value`.
         */
        function compareAscending(value, other) {
          if (value !== other) {
            var valIsDefined = value !== undefined$1,
                valIsNull = value === null,
                valIsReflexive = value === value,
                valIsSymbol = isSymbol(value);

            var othIsDefined = other !== undefined$1,
                othIsNull = other === null,
                othIsReflexive = other === other,
                othIsSymbol = isSymbol(other);

            if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
                (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
                (valIsNull && othIsDefined && othIsReflexive) ||
                (!valIsDefined && othIsReflexive) ||
                !valIsReflexive) {
              return 1;
            }
            if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
                (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
                (othIsNull && valIsDefined && valIsReflexive) ||
                (!othIsDefined && valIsReflexive) ||
                !othIsReflexive) {
              return -1;
            }
          }
          return 0;
        }

        /**
         * Used by `_.orderBy` to compare multiple properties of a value to another
         * and stable sort them.
         *
         * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
         * specify an order of "desc" for descending or "asc" for ascending sort order
         * of corresponding values.
         *
         * @private
         * @param {Object} object The object to compare.
         * @param {Object} other The other object to compare.
         * @param {boolean[]|string[]} orders The order to sort by for each property.
         * @returns {number} Returns the sort order indicator for `object`.
         */
        function compareMultiple(object, other, orders) {
          var index = -1,
              objCriteria = object.criteria,
              othCriteria = other.criteria,
              length = objCriteria.length,
              ordersLength = orders.length;

          while (++index < length) {
            var result = compareAscending(objCriteria[index], othCriteria[index]);
            if (result) {
              if (index >= ordersLength) {
                return result;
              }
              var order = orders[index];
              return result * (order == 'desc' ? -1 : 1);
            }
          }
          // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
          // that causes it, under certain circumstances, to provide the same value for
          // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
          // for more details.
          //
          // This also ensures a stable sort in V8 and other engines.
          // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
          return object.index - other.index;
        }

        /**
         * Creates an array that is the composition of partially applied arguments,
         * placeholders, and provided arguments into a single array of arguments.
         *
         * @private
         * @param {Array} args The provided arguments.
         * @param {Array} partials The arguments to prepend to those provided.
         * @param {Array} holders The `partials` placeholder indexes.
         * @params {boolean} [isCurried] Specify composing for a curried function.
         * @returns {Array} Returns the new array of composed arguments.
         */
        function composeArgs(args, partials, holders, isCurried) {
          var argsIndex = -1,
              argsLength = args.length,
              holdersLength = holders.length,
              leftIndex = -1,
              leftLength = partials.length,
              rangeLength = nativeMax(argsLength - holdersLength, 0),
              result = Array(leftLength + rangeLength),
              isUncurried = !isCurried;

          while (++leftIndex < leftLength) {
            result[leftIndex] = partials[leftIndex];
          }
          while (++argsIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result[holders[argsIndex]] = args[argsIndex];
            }
          }
          while (rangeLength--) {
            result[leftIndex++] = args[argsIndex++];
          }
          return result;
        }

        /**
         * This function is like `composeArgs` except that the arguments composition
         * is tailored for `_.partialRight`.
         *
         * @private
         * @param {Array} args The provided arguments.
         * @param {Array} partials The arguments to append to those provided.
         * @param {Array} holders The `partials` placeholder indexes.
         * @params {boolean} [isCurried] Specify composing for a curried function.
         * @returns {Array} Returns the new array of composed arguments.
         */
        function composeArgsRight(args, partials, holders, isCurried) {
          var argsIndex = -1,
              argsLength = args.length,
              holdersIndex = -1,
              holdersLength = holders.length,
              rightIndex = -1,
              rightLength = partials.length,
              rangeLength = nativeMax(argsLength - holdersLength, 0),
              result = Array(rangeLength + rightLength),
              isUncurried = !isCurried;

          while (++argsIndex < rangeLength) {
            result[argsIndex] = args[argsIndex];
          }
          var offset = argsIndex;
          while (++rightIndex < rightLength) {
            result[offset + rightIndex] = partials[rightIndex];
          }
          while (++holdersIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result[offset + holders[holdersIndex]] = args[argsIndex++];
            }
          }
          return result;
        }

        /**
         * Copies the values of `source` to `array`.
         *
         * @private
         * @param {Array} source The array to copy values from.
         * @param {Array} [array=[]] The array to copy values to.
         * @returns {Array} Returns `array`.
         */
        function copyArray(source, array) {
          var index = -1,
              length = source.length;

          array || (array = Array(length));
          while (++index < length) {
            array[index] = source[index];
          }
          return array;
        }

        /**
         * Copies properties of `source` to `object`.
         *
         * @private
         * @param {Object} source The object to copy properties from.
         * @param {Array} props The property identifiers to copy.
         * @param {Object} [object={}] The object to copy properties to.
         * @param {Function} [customizer] The function to customize copied values.
         * @returns {Object} Returns `object`.
         */
        function copyObject(source, props, object, customizer) {
          var isNew = !object;
          object || (object = {});

          var index = -1,
              length = props.length;

          while (++index < length) {
            var key = props[index];

            var newValue = customizer
              ? customizer(object[key], source[key], key, object, source)
              : undefined$1;

            if (newValue === undefined$1) {
              newValue = source[key];
            }
            if (isNew) {
              baseAssignValue(object, key, newValue);
            } else {
              assignValue(object, key, newValue);
            }
          }
          return object;
        }

        /**
         * Copies own symbols of `source` to `object`.
         *
         * @private
         * @param {Object} source The object to copy symbols from.
         * @param {Object} [object={}] The object to copy symbols to.
         * @returns {Object} Returns `object`.
         */
        function copySymbols(source, object) {
          return copyObject(source, getSymbols(source), object);
        }

        /**
         * Copies own and inherited symbols of `source` to `object`.
         *
         * @private
         * @param {Object} source The object to copy symbols from.
         * @param {Object} [object={}] The object to copy symbols to.
         * @returns {Object} Returns `object`.
         */
        function copySymbolsIn(source, object) {
          return copyObject(source, getSymbolsIn(source), object);
        }

        /**
         * Creates a function like `_.groupBy`.
         *
         * @private
         * @param {Function} setter The function to set accumulator values.
         * @param {Function} [initializer] The accumulator object initializer.
         * @returns {Function} Returns the new aggregator function.
         */
        function createAggregator(setter, initializer) {
          return function(collection, iteratee) {
            var func = isArray(collection) ? arrayAggregator : baseAggregator,
                accumulator = initializer ? initializer() : {};

            return func(collection, setter, getIteratee(iteratee, 2), accumulator);
          };
        }

        /**
         * Creates a function like `_.assign`.
         *
         * @private
         * @param {Function} assigner The function to assign values.
         * @returns {Function} Returns the new assigner function.
         */
        function createAssigner(assigner) {
          return baseRest(function(object, sources) {
            var index = -1,
                length = sources.length,
                customizer = length > 1 ? sources[length - 1] : undefined$1,
                guard = length > 2 ? sources[2] : undefined$1;

            customizer = (assigner.length > 3 && typeof customizer == 'function')
              ? (length--, customizer)
              : undefined$1;

            if (guard && isIterateeCall(sources[0], sources[1], guard)) {
              customizer = length < 3 ? undefined$1 : customizer;
              length = 1;
            }
            object = Object(object);
            while (++index < length) {
              var source = sources[index];
              if (source) {
                assigner(object, source, index, customizer);
              }
            }
            return object;
          });
        }

        /**
         * Creates a `baseEach` or `baseEachRight` function.
         *
         * @private
         * @param {Function} eachFunc The function to iterate over a collection.
         * @param {boolean} [fromRight] Specify iterating from right to left.
         * @returns {Function} Returns the new base function.
         */
        function createBaseEach(eachFunc, fromRight) {
          return function(collection, iteratee) {
            if (collection == null) {
              return collection;
            }
            if (!isArrayLike(collection)) {
              return eachFunc(collection, iteratee);
            }
            var length = collection.length,
                index = fromRight ? length : -1,
                iterable = Object(collection);

            while ((fromRight ? index-- : ++index < length)) {
              if (iteratee(iterable[index], index, iterable) === false) {
                break;
              }
            }
            return collection;
          };
        }

        /**
         * Creates a base function for methods like `_.forIn` and `_.forOwn`.
         *
         * @private
         * @param {boolean} [fromRight] Specify iterating from right to left.
         * @returns {Function} Returns the new base function.
         */
        function createBaseFor(fromRight) {
          return function(object, iteratee, keysFunc) {
            var index = -1,
                iterable = Object(object),
                props = keysFunc(object),
                length = props.length;

            while (length--) {
              var key = props[fromRight ? length : ++index];
              if (iteratee(iterable[key], key, iterable) === false) {
                break;
              }
            }
            return object;
          };
        }

        /**
         * Creates a function that wraps `func` to invoke it with the optional `this`
         * binding of `thisArg`.
         *
         * @private
         * @param {Function} func The function to wrap.
         * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
         * @param {*} [thisArg] The `this` binding of `func`.
         * @returns {Function} Returns the new wrapped function.
         */
        function createBind(func, bitmask, thisArg) {
          var isBind = bitmask & WRAP_BIND_FLAG,
              Ctor = createCtor(func);

          function wrapper() {
            var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
            return fn.apply(isBind ? thisArg : this, arguments);
          }
          return wrapper;
        }

        /**
         * Creates a function like `_.lowerFirst`.
         *
         * @private
         * @param {string} methodName The name of the `String` case method to use.
         * @returns {Function} Returns the new case function.
         */
        function createCaseFirst(methodName) {
          return function(string) {
            string = toString(string);

            var strSymbols = hasUnicode(string)
              ? stringToArray(string)
              : undefined$1;

            var chr = strSymbols
              ? strSymbols[0]
              : string.charAt(0);

            var trailing = strSymbols
              ? castSlice(strSymbols, 1).join('')
              : string.slice(1);

            return chr[methodName]() + trailing;
          };
        }

        /**
         * Creates a function like `_.camelCase`.
         *
         * @private
         * @param {Function} callback The function to combine each word.
         * @returns {Function} Returns the new compounder function.
         */
        function createCompounder(callback) {
          return function(string) {
            return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
          };
        }

        /**
         * Creates a function that produces an instance of `Ctor` regardless of
         * whether it was invoked as part of a `new` expression or by `call` or `apply`.
         *
         * @private
         * @param {Function} Ctor The constructor to wrap.
         * @returns {Function} Returns the new wrapped function.
         */
        function createCtor(Ctor) {
          return function() {
            // Use a `switch` statement to work with class constructors. See
            // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
            // for more details.
            var args = arguments;
            switch (args.length) {
              case 0: return new Ctor;
              case 1: return new Ctor(args[0]);
              case 2: return new Ctor(args[0], args[1]);
              case 3: return new Ctor(args[0], args[1], args[2]);
              case 4: return new Ctor(args[0], args[1], args[2], args[3]);
              case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
              case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
              case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
            }
            var thisBinding = baseCreate(Ctor.prototype),
                result = Ctor.apply(thisBinding, args);

            // Mimic the constructor's `return` behavior.
            // See https://es5.github.io/#x13.2.2 for more details.
            return isObject(result) ? result : thisBinding;
          };
        }

        /**
         * Creates a function that wraps `func` to enable currying.
         *
         * @private
         * @param {Function} func The function to wrap.
         * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
         * @param {number} arity The arity of `func`.
         * @returns {Function} Returns the new wrapped function.
         */
        function createCurry(func, bitmask, arity) {
          var Ctor = createCtor(func);

          function wrapper() {
            var length = arguments.length,
                args = Array(length),
                index = length,
                placeholder = getHolder(wrapper);

            while (index--) {
              args[index] = arguments[index];
            }
            var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
              ? []
              : replaceHolders(args, placeholder);

            length -= holders.length;
            if (length < arity) {
              return createRecurry(
                func, bitmask, createHybrid, wrapper.placeholder, undefined$1,
                args, holders, undefined$1, undefined$1, arity - length);
            }
            var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
            return apply(fn, this, args);
          }
          return wrapper;
        }

        /**
         * Creates a `_.find` or `_.findLast` function.
         *
         * @private
         * @param {Function} findIndexFunc The function to find the collection index.
         * @returns {Function} Returns the new find function.
         */
        function createFind(findIndexFunc) {
          return function(collection, predicate, fromIndex) {
            var iterable = Object(collection);
            if (!isArrayLike(collection)) {
              var iteratee = getIteratee(predicate, 3);
              collection = keys(collection);
              predicate = function(key) { return iteratee(iterable[key], key, iterable); };
            }
            var index = findIndexFunc(collection, predicate, fromIndex);
            return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined$1;
          };
        }

        /**
         * Creates a `_.flow` or `_.flowRight` function.
         *
         * @private
         * @param {boolean} [fromRight] Specify iterating from right to left.
         * @returns {Function} Returns the new flow function.
         */
        function createFlow(fromRight) {
          return flatRest(function(funcs) {
            var length = funcs.length,
                index = length,
                prereq = LodashWrapper.prototype.thru;

            if (fromRight) {
              funcs.reverse();
            }
            while (index--) {
              var func = funcs[index];
              if (typeof func != 'function') {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
                var wrapper = new LodashWrapper([], true);
              }
            }
            index = wrapper ? index : length;
            while (++index < length) {
              func = funcs[index];

              var funcName = getFuncName(func),
                  data = funcName == 'wrapper' ? getData(func) : undefined$1;

              if (data && isLaziable(data[0]) &&
                    data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                    !data[4].length && data[9] == 1
                  ) {
                wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
              } else {
                wrapper = (func.length == 1 && isLaziable(func))
                  ? wrapper[funcName]()
                  : wrapper.thru(func);
              }
            }
            return function() {
              var args = arguments,
                  value = args[0];

              if (wrapper && args.length == 1 && isArray(value)) {
                return wrapper.plant(value).value();
              }
              var index = 0,
                  result = length ? funcs[index].apply(this, args) : value;

              while (++index < length) {
                result = funcs[index].call(this, result);
              }
              return result;
            };
          });
        }

        /**
         * Creates a function that wraps `func` to invoke it with optional `this`
         * binding of `thisArg`, partial application, and currying.
         *
         * @private
         * @param {Function|string} func The function or method name to wrap.
         * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
         * @param {*} [thisArg] The `this` binding of `func`.
         * @param {Array} [partials] The arguments to prepend to those provided to
         *  the new function.
         * @param {Array} [holders] The `partials` placeholder indexes.
         * @param {Array} [partialsRight] The arguments to append to those provided
         *  to the new function.
         * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
         * @param {Array} [argPos] The argument positions of the new function.
         * @param {number} [ary] The arity cap of `func`.
         * @param {number} [arity] The arity of `func`.
         * @returns {Function} Returns the new wrapped function.
         */
        function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
          var isAry = bitmask & WRAP_ARY_FLAG,
              isBind = bitmask & WRAP_BIND_FLAG,
              isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
              isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
              isFlip = bitmask & WRAP_FLIP_FLAG,
              Ctor = isBindKey ? undefined$1 : createCtor(func);

          function wrapper() {
            var length = arguments.length,
                args = Array(length),
                index = length;

            while (index--) {
              args[index] = arguments[index];
            }
            if (isCurried) {
              var placeholder = getHolder(wrapper),
                  holdersCount = countHolders(args, placeholder);
            }
            if (partials) {
              args = composeArgs(args, partials, holders, isCurried);
            }
            if (partialsRight) {
              args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
            }
            length -= holdersCount;
            if (isCurried && length < arity) {
              var newHolders = replaceHolders(args, placeholder);
              return createRecurry(
                func, bitmask, createHybrid, wrapper.placeholder, thisArg,
                args, newHolders, argPos, ary, arity - length
              );
            }
            var thisBinding = isBind ? thisArg : this,
                fn = isBindKey ? thisBinding[func] : func;

            length = args.length;
            if (argPos) {
              args = reorder(args, argPos);
            } else if (isFlip && length > 1) {
              args.reverse();
            }
            if (isAry && ary < length) {
              args.length = ary;
            }
            if (this && this !== root && this instanceof wrapper) {
              fn = Ctor || createCtor(fn);
            }
            return fn.apply(thisBinding, args);
          }
          return wrapper;
        }

        /**
         * Creates a function like `_.invertBy`.
         *
         * @private
         * @param {Function} setter The function to set accumulator values.
         * @param {Function} toIteratee The function to resolve iteratees.
         * @returns {Function} Returns the new inverter function.
         */
        function createInverter(setter, toIteratee) {
          return function(object, iteratee) {
            return baseInverter(object, setter, toIteratee(iteratee), {});
          };
        }

        /**
         * Creates a function that performs a mathematical operation on two values.
         *
         * @private
         * @param {Function} operator The function to perform the operation.
         * @param {number} [defaultValue] The value used for `undefined` arguments.
         * @returns {Function} Returns the new mathematical operation function.
         */
        function createMathOperation(operator, defaultValue) {
          return function(value, other) {
            var result;
            if (value === undefined$1 && other === undefined$1) {
              return defaultValue;
            }
            if (value !== undefined$1) {
              result = value;
            }
            if (other !== undefined$1) {
              if (result === undefined$1) {
                return other;
              }
              if (typeof value == 'string' || typeof other == 'string') {
                value = baseToString(value);
                other = baseToString(other);
              } else {
                value = baseToNumber(value);
                other = baseToNumber(other);
              }
              result = operator(value, other);
            }
            return result;
          };
        }

        /**
         * Creates a function like `_.over`.
         *
         * @private
         * @param {Function} arrayFunc The function to iterate over iteratees.
         * @returns {Function} Returns the new over function.
         */
        function createOver(arrayFunc) {
          return flatRest(function(iteratees) {
            iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
            return baseRest(function(args) {
              var thisArg = this;
              return arrayFunc(iteratees, function(iteratee) {
                return apply(iteratee, thisArg, args);
              });
            });
          });
        }

        /**
         * Creates the padding for `string` based on `length`. The `chars` string
         * is truncated if the number of characters exceeds `length`.
         *
         * @private
         * @param {number} length The padding length.
         * @param {string} [chars=' '] The string used as padding.
         * @returns {string} Returns the padding for `string`.
         */
        function createPadding(length, chars) {
          chars = chars === undefined$1 ? ' ' : baseToString(chars);

          var charsLength = chars.length;
          if (charsLength < 2) {
            return charsLength ? baseRepeat(chars, length) : chars;
          }
          var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
          return hasUnicode(chars)
            ? castSlice(stringToArray(result), 0, length).join('')
            : result.slice(0, length);
        }

        /**
         * Creates a function that wraps `func` to invoke it with the `this` binding
         * of `thisArg` and `partials` prepended to the arguments it receives.
         *
         * @private
         * @param {Function} func The function to wrap.
         * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
         * @param {*} thisArg The `this` binding of `func`.
         * @param {Array} partials The arguments to prepend to those provided to
         *  the new function.
         * @returns {Function} Returns the new wrapped function.
         */
        function createPartial(func, bitmask, thisArg, partials) {
          var isBind = bitmask & WRAP_BIND_FLAG,
              Ctor = createCtor(func);

          function wrapper() {
            var argsIndex = -1,
                argsLength = arguments.length,
                leftIndex = -1,
                leftLength = partials.length,
                args = Array(leftLength + argsLength),
                fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

            while (++leftIndex < leftLength) {
              args[leftIndex] = partials[leftIndex];
            }
            while (argsLength--) {
              args[leftIndex++] = arguments[++argsIndex];
            }
            return apply(fn, isBind ? thisArg : this, args);
          }
          return wrapper;
        }

        /**
         * Creates a `_.range` or `_.rangeRight` function.
         *
         * @private
         * @param {boolean} [fromRight] Specify iterating from right to left.
         * @returns {Function} Returns the new range function.
         */
        function createRange(fromRight) {
          return function(start, end, step) {
            if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
              end = step = undefined$1;
            }
            // Ensure the sign of `-0` is preserved.
            start = toFinite(start);
            if (end === undefined$1) {
              end = start;
              start = 0;
            } else {
              end = toFinite(end);
            }
            step = step === undefined$1 ? (start < end ? 1 : -1) : toFinite(step);
            return baseRange(start, end, step, fromRight);
          };
        }

        /**
         * Creates a function that performs a relational operation on two values.
         *
         * @private
         * @param {Function} operator The function to perform the operation.
         * @returns {Function} Returns the new relational operation function.
         */
        function createRelationalOperation(operator) {
          return function(value, other) {
            if (!(typeof value == 'string' && typeof other == 'string')) {
              value = toNumber(value);
              other = toNumber(other);
            }
            return operator(value, other);
          };
        }

        /**
         * Creates a function that wraps `func` to continue currying.
         *
         * @private
         * @param {Function} func The function to wrap.
         * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
         * @param {Function} wrapFunc The function to create the `func` wrapper.
         * @param {*} placeholder The placeholder value.
         * @param {*} [thisArg] The `this` binding of `func`.
         * @param {Array} [partials] The arguments to prepend to those provided to
         *  the new function.
         * @param {Array} [holders] The `partials` placeholder indexes.
         * @param {Array} [argPos] The argument positions of the new function.
         * @param {number} [ary] The arity cap of `func`.
         * @param {number} [arity] The arity of `func`.
         * @returns {Function} Returns the new wrapped function.
         */
        function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
          var isCurry = bitmask & WRAP_CURRY_FLAG,
              newHolders = isCurry ? holders : undefined$1,
              newHoldersRight = isCurry ? undefined$1 : holders,
              newPartials = isCurry ? partials : undefined$1,
              newPartialsRight = isCurry ? undefined$1 : partials;

          bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
          bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

          if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
            bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
          }
          var newData = [
            func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
            newHoldersRight, argPos, ary, arity
          ];

          var result = wrapFunc.apply(undefined$1, newData);
          if (isLaziable(func)) {
            setData(result, newData);
          }
          result.placeholder = placeholder;
          return setWrapToString(result, func, bitmask);
        }

        /**
         * Creates a function like `_.round`.
         *
         * @private
         * @param {string} methodName The name of the `Math` method to use when rounding.
         * @returns {Function} Returns the new round function.
         */
        function createRound(methodName) {
          var func = Math[methodName];
          return function(number, precision) {
            number = toNumber(number);
            precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
            if (precision && nativeIsFinite(number)) {
              // Shift with exponential notation to avoid floating-point issues.
              // See [MDN](https://mdn.io/round#Examples) for more details.
              var pair = (toString(number) + 'e').split('e'),
                  value = func(pair[0] + 'e' + (+pair[1] + precision));

              pair = (toString(value) + 'e').split('e');
              return +(pair[0] + 'e' + (+pair[1] - precision));
            }
            return func(number);
          };
        }

        /**
         * Creates a set object of `values`.
         *
         * @private
         * @param {Array} values The values to add to the set.
         * @returns {Object} Returns the new set.
         */
        var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
          return new Set(values);
        };

        /**
         * Creates a `_.toPairs` or `_.toPairsIn` function.
         *
         * @private
         * @param {Function} keysFunc The function to get the keys of a given object.
         * @returns {Function} Returns the new pairs function.
         */
        function createToPairs(keysFunc) {
          return function(object) {
            var tag = getTag(object);
            if (tag == mapTag) {
              return mapToArray(object);
            }
            if (tag == setTag) {
              return setToPairs(object);
            }
            return baseToPairs(object, keysFunc(object));
          };
        }

        /**
         * Creates a function that either curries or invokes `func` with optional
         * `this` binding and partially applied arguments.
         *
         * @private
         * @param {Function|string} func The function or method name to wrap.
         * @param {number} bitmask The bitmask flags.
         *    1 - `_.bind`
         *    2 - `_.bindKey`
         *    4 - `_.curry` or `_.curryRight` of a bound function
         *    8 - `_.curry`
         *   16 - `_.curryRight`
         *   32 - `_.partial`
         *   64 - `_.partialRight`
         *  128 - `_.rearg`
         *  256 - `_.ary`
         *  512 - `_.flip`
         * @param {*} [thisArg] The `this` binding of `func`.
         * @param {Array} [partials] The arguments to be partially applied.
         * @param {Array} [holders] The `partials` placeholder indexes.
         * @param {Array} [argPos] The argument positions of the new function.
         * @param {number} [ary] The arity cap of `func`.
         * @param {number} [arity] The arity of `func`.
         * @returns {Function} Returns the new wrapped function.
         */
        function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
          var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
          if (!isBindKey && typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          var length = partials ? partials.length : 0;
          if (!length) {
            bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
            partials = holders = undefined$1;
          }
          ary = ary === undefined$1 ? ary : nativeMax(toInteger(ary), 0);
          arity = arity === undefined$1 ? arity : toInteger(arity);
          length -= holders ? holders.length : 0;

          if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
            var partialsRight = partials,
                holdersRight = holders;

            partials = holders = undefined$1;
          }
          var data = isBindKey ? undefined$1 : getData(func);

          var newData = [
            func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
            argPos, ary, arity
          ];

          if (data) {
            mergeData(newData, data);
          }
          func = newData[0];
          bitmask = newData[1];
          thisArg = newData[2];
          partials = newData[3];
          holders = newData[4];
          arity = newData[9] = newData[9] === undefined$1
            ? (isBindKey ? 0 : func.length)
            : nativeMax(newData[9] - length, 0);

          if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
            bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
          }
          if (!bitmask || bitmask == WRAP_BIND_FLAG) {
            var result = createBind(func, bitmask, thisArg);
          } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
            result = createCurry(func, bitmask, arity);
          } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
            result = createPartial(func, bitmask, thisArg, partials);
          } else {
            result = createHybrid.apply(undefined$1, newData);
          }
          var setter = data ? baseSetData : setData;
          return setWrapToString(setter(result, newData), func, bitmask);
        }

        /**
         * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
         * of source objects to the destination object for all destination properties
         * that resolve to `undefined`.
         *
         * @private
         * @param {*} objValue The destination value.
         * @param {*} srcValue The source value.
         * @param {string} key The key of the property to assign.
         * @param {Object} object The parent object of `objValue`.
         * @returns {*} Returns the value to assign.
         */
        function customDefaultsAssignIn(objValue, srcValue, key, object) {
          if (objValue === undefined$1 ||
              (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
            return srcValue;
          }
          return objValue;
        }

        /**
         * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
         * objects into destination objects that are passed thru.
         *
         * @private
         * @param {*} objValue The destination value.
         * @param {*} srcValue The source value.
         * @param {string} key The key of the property to merge.
         * @param {Object} object The parent object of `objValue`.
         * @param {Object} source The parent object of `srcValue`.
         * @param {Object} [stack] Tracks traversed source values and their merged
         *  counterparts.
         * @returns {*} Returns the value to assign.
         */
        function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
          if (isObject(objValue) && isObject(srcValue)) {
            // Recursively merge objects and arrays (susceptible to call stack limits).
            stack.set(srcValue, objValue);
            baseMerge(objValue, srcValue, undefined$1, customDefaultsMerge, stack);
            stack['delete'](srcValue);
          }
          return objValue;
        }

        /**
         * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
         * objects.
         *
         * @private
         * @param {*} value The value to inspect.
         * @param {string} key The key of the property to inspect.
         * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
         */
        function customOmitClone(value) {
          return isPlainObject(value) ? undefined$1 : value;
        }

        /**
         * A specialized version of `baseIsEqualDeep` for arrays with support for
         * partial deep comparisons.
         *
         * @private
         * @param {Array} array The array to compare.
         * @param {Array} other The other array to compare.
         * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
         * @param {Function} customizer The function to customize comparisons.
         * @param {Function} equalFunc The function to determine equivalents of values.
         * @param {Object} stack Tracks traversed `array` and `other` objects.
         * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
         */
        function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
              arrLength = array.length,
              othLength = other.length;

          if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
            return false;
          }
          // Check that cyclic values are equal.
          var arrStacked = stack.get(array);
          var othStacked = stack.get(other);
          if (arrStacked && othStacked) {
            return arrStacked == other && othStacked == array;
          }
          var index = -1,
              result = true,
              seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined$1;

          stack.set(array, other);
          stack.set(other, array);

          // Ignore non-index properties.
          while (++index < arrLength) {
            var arrValue = array[index],
                othValue = other[index];

            if (customizer) {
              var compared = isPartial
                ? customizer(othValue, arrValue, index, other, array, stack)
                : customizer(arrValue, othValue, index, array, other, stack);
            }
            if (compared !== undefined$1) {
              if (compared) {
                continue;
              }
              result = false;
              break;
            }
            // Recursively compare arrays (susceptible to call stack limits).
            if (seen) {
              if (!arraySome(other, function(othValue, othIndex) {
                    if (!cacheHas(seen, othIndex) &&
                        (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                      return seen.push(othIndex);
                    }
                  })) {
                result = false;
                break;
              }
            } else if (!(
                  arrValue === othValue ||
                    equalFunc(arrValue, othValue, bitmask, customizer, stack)
                )) {
              result = false;
              break;
            }
          }
          stack['delete'](array);
          stack['delete'](other);
          return result;
        }

        /**
         * A specialized version of `baseIsEqualDeep` for comparing objects of
         * the same `toStringTag`.
         *
         * **Note:** This function only supports comparing values with tags of
         * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
         *
         * @private
         * @param {Object} object The object to compare.
         * @param {Object} other The other object to compare.
         * @param {string} tag The `toStringTag` of the objects to compare.
         * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
         * @param {Function} customizer The function to customize comparisons.
         * @param {Function} equalFunc The function to determine equivalents of values.
         * @param {Object} stack Tracks traversed `object` and `other` objects.
         * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
         */
        function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
          switch (tag) {
            case dataViewTag:
              if ((object.byteLength != other.byteLength) ||
                  (object.byteOffset != other.byteOffset)) {
                return false;
              }
              object = object.buffer;
              other = other.buffer;

            case arrayBufferTag:
              if ((object.byteLength != other.byteLength) ||
                  !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
                return false;
              }
              return true;

            case boolTag:
            case dateTag:
            case numberTag:
              // Coerce booleans to `1` or `0` and dates to milliseconds.
              // Invalid dates are coerced to `NaN`.
              return eq(+object, +other);

            case errorTag:
              return object.name == other.name && object.message == other.message;

            case regexpTag:
            case stringTag:
              // Coerce regexes to strings and treat strings, primitives and objects,
              // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
              // for more details.
              return object == (other + '');

            case mapTag:
              var convert = mapToArray;

            case setTag:
              var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
              convert || (convert = setToArray);

              if (object.size != other.size && !isPartial) {
                return false;
              }
              // Assume cyclic values are equal.
              var stacked = stack.get(object);
              if (stacked) {
                return stacked == other;
              }
              bitmask |= COMPARE_UNORDERED_FLAG;

              // Recursively compare objects (susceptible to call stack limits).
              stack.set(object, other);
              var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
              stack['delete'](object);
              return result;

            case symbolTag:
              if (symbolValueOf) {
                return symbolValueOf.call(object) == symbolValueOf.call(other);
              }
          }
          return false;
        }

        /**
         * A specialized version of `baseIsEqualDeep` for objects with support for
         * partial deep comparisons.
         *
         * @private
         * @param {Object} object The object to compare.
         * @param {Object} other The other object to compare.
         * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
         * @param {Function} customizer The function to customize comparisons.
         * @param {Function} equalFunc The function to determine equivalents of values.
         * @param {Object} stack Tracks traversed `object` and `other` objects.
         * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
         */
        function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
              objProps = getAllKeys(object),
              objLength = objProps.length,
              othProps = getAllKeys(other),
              othLength = othProps.length;

          if (objLength != othLength && !isPartial) {
            return false;
          }
          var index = objLength;
          while (index--) {
            var key = objProps[index];
            if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
              return false;
            }
          }
          // Check that cyclic values are equal.
          var objStacked = stack.get(object);
          var othStacked = stack.get(other);
          if (objStacked && othStacked) {
            return objStacked == other && othStacked == object;
          }
          var result = true;
          stack.set(object, other);
          stack.set(other, object);

          var skipCtor = isPartial;
          while (++index < objLength) {
            key = objProps[index];
            var objValue = object[key],
                othValue = other[key];

            if (customizer) {
              var compared = isPartial
                ? customizer(othValue, objValue, key, other, object, stack)
                : customizer(objValue, othValue, key, object, other, stack);
            }
            // Recursively compare objects (susceptible to call stack limits).
            if (!(compared === undefined$1
                  ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
                  : compared
                )) {
              result = false;
              break;
            }
            skipCtor || (skipCtor = key == 'constructor');
          }
          if (result && !skipCtor) {
            var objCtor = object.constructor,
                othCtor = other.constructor;

            // Non `Object` object instances with different constructors are not equal.
            if (objCtor != othCtor &&
                ('constructor' in object && 'constructor' in other) &&
                !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
                  typeof othCtor == 'function' && othCtor instanceof othCtor)) {
              result = false;
            }
          }
          stack['delete'](object);
          stack['delete'](other);
          return result;
        }

        /**
         * A specialized version of `baseRest` which flattens the rest array.
         *
         * @private
         * @param {Function} func The function to apply a rest parameter to.
         * @returns {Function} Returns the new function.
         */
        function flatRest(func) {
          return setToString(overRest(func, undefined$1, flatten), func + '');
        }

        /**
         * Creates an array of own enumerable property names and symbols of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names and symbols.
         */
        function getAllKeys(object) {
          return baseGetAllKeys(object, keys, getSymbols);
        }

        /**
         * Creates an array of own and inherited enumerable property names and
         * symbols of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names and symbols.
         */
        function getAllKeysIn(object) {
          return baseGetAllKeys(object, keysIn, getSymbolsIn);
        }

        /**
         * Gets metadata for `func`.
         *
         * @private
         * @param {Function} func The function to query.
         * @returns {*} Returns the metadata for `func`.
         */
        var getData = !metaMap ? noop : function(func) {
          return metaMap.get(func);
        };

        /**
         * Gets the name of `func`.
         *
         * @private
         * @param {Function} func The function to query.
         * @returns {string} Returns the function name.
         */
        function getFuncName(func) {
          var result = (func.name + ''),
              array = realNames[result],
              length = hasOwnProperty.call(realNames, result) ? array.length : 0;

          while (length--) {
            var data = array[length],
                otherFunc = data.func;
            if (otherFunc == null || otherFunc == func) {
              return data.name;
            }
          }
          return result;
        }

        /**
         * Gets the argument placeholder value for `func`.
         *
         * @private
         * @param {Function} func The function to inspect.
         * @returns {*} Returns the placeholder value.
         */
        function getHolder(func) {
          var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
          return object.placeholder;
        }

        /**
         * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
         * this function returns the custom method, otherwise it returns `baseIteratee`.
         * If arguments are provided, the chosen function is invoked with them and
         * its result is returned.
         *
         * @private
         * @param {*} [value] The value to convert to an iteratee.
         * @param {number} [arity] The arity of the created iteratee.
         * @returns {Function} Returns the chosen function or its result.
         */
        function getIteratee() {
          var result = lodash.iteratee || iteratee;
          result = result === iteratee ? baseIteratee : result;
          return arguments.length ? result(arguments[0], arguments[1]) : result;
        }

        /**
         * Gets the data for `map`.
         *
         * @private
         * @param {Object} map The map to query.
         * @param {string} key The reference key.
         * @returns {*} Returns the map data.
         */
        function getMapData(map, key) {
          var data = map.__data__;
          return isKeyable(key)
            ? data[typeof key == 'string' ? 'string' : 'hash']
            : data.map;
        }

        /**
         * Gets the property names, values, and compare flags of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the match data of `object`.
         */
        function getMatchData(object) {
          var result = keys(object),
              length = result.length;

          while (length--) {
            var key = result[length],
                value = object[key];

            result[length] = [key, value, isStrictComparable(value)];
          }
          return result;
        }

        /**
         * Gets the native function at `key` of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {string} key The key of the method to get.
         * @returns {*} Returns the function if it's native, else `undefined`.
         */
        function getNative(object, key) {
          var value = getValue(object, key);
          return baseIsNative(value) ? value : undefined$1;
        }

        /**
         * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
         *
         * @private
         * @param {*} value The value to query.
         * @returns {string} Returns the raw `toStringTag`.
         */
        function getRawTag(value) {
          var isOwn = hasOwnProperty.call(value, symToStringTag),
              tag = value[symToStringTag];

          try {
            value[symToStringTag] = undefined$1;
            var unmasked = true;
          } catch (e) {}

          var result = nativeObjectToString.call(value);
          if (unmasked) {
            if (isOwn) {
              value[symToStringTag] = tag;
            } else {
              delete value[symToStringTag];
            }
          }
          return result;
        }

        /**
         * Creates an array of the own enumerable symbols of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of symbols.
         */
        var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
          if (object == null) {
            return [];
          }
          object = Object(object);
          return arrayFilter(nativeGetSymbols(object), function(symbol) {
            return propertyIsEnumerable.call(object, symbol);
          });
        };

        /**
         * Creates an array of the own and inherited enumerable symbols of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of symbols.
         */
        var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
          var result = [];
          while (object) {
            arrayPush(result, getSymbols(object));
            object = getPrototype(object);
          }
          return result;
        };

        /**
         * Gets the `toStringTag` of `value`.
         *
         * @private
         * @param {*} value The value to query.
         * @returns {string} Returns the `toStringTag`.
         */
        var getTag = baseGetTag;

        // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
        if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
            (Map && getTag(new Map) != mapTag) ||
            (Promise && getTag(Promise.resolve()) != promiseTag) ||
            (Set && getTag(new Set) != setTag) ||
            (WeakMap && getTag(new WeakMap) != weakMapTag)) {
          getTag = function(value) {
            var result = baseGetTag(value),
                Ctor = result == objectTag ? value.constructor : undefined$1,
                ctorString = Ctor ? toSource(Ctor) : '';

            if (ctorString) {
              switch (ctorString) {
                case dataViewCtorString: return dataViewTag;
                case mapCtorString: return mapTag;
                case promiseCtorString: return promiseTag;
                case setCtorString: return setTag;
                case weakMapCtorString: return weakMapTag;
              }
            }
            return result;
          };
        }

        /**
         * Gets the view, applying any `transforms` to the `start` and `end` positions.
         *
         * @private
         * @param {number} start The start of the view.
         * @param {number} end The end of the view.
         * @param {Array} transforms The transformations to apply to the view.
         * @returns {Object} Returns an object containing the `start` and `end`
         *  positions of the view.
         */
        function getView(start, end, transforms) {
          var index = -1,
              length = transforms.length;

          while (++index < length) {
            var data = transforms[index],
                size = data.size;

            switch (data.type) {
              case 'drop':      start += size; break;
              case 'dropRight': end -= size; break;
              case 'take':      end = nativeMin(end, start + size); break;
              case 'takeRight': start = nativeMax(start, end - size); break;
            }
          }
          return { 'start': start, 'end': end };
        }

        /**
         * Extracts wrapper details from the `source` body comment.
         *
         * @private
         * @param {string} source The source to inspect.
         * @returns {Array} Returns the wrapper details.
         */
        function getWrapDetails(source) {
          var match = source.match(reWrapDetails);
          return match ? match[1].split(reSplitDetails) : [];
        }

        /**
         * Checks if `path` exists on `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {Array|string} path The path to check.
         * @param {Function} hasFunc The function to check properties.
         * @returns {boolean} Returns `true` if `path` exists, else `false`.
         */
        function hasPath(object, path, hasFunc) {
          path = castPath(path, object);

          var index = -1,
              length = path.length,
              result = false;

          while (++index < length) {
            var key = toKey(path[index]);
            if (!(result = object != null && hasFunc(object, key))) {
              break;
            }
            object = object[key];
          }
          if (result || ++index != length) {
            return result;
          }
          length = object == null ? 0 : object.length;
          return !!length && isLength(length) && isIndex(key, length) &&
            (isArray(object) || isArguments(object));
        }

        /**
         * Initializes an array clone.
         *
         * @private
         * @param {Array} array The array to clone.
         * @returns {Array} Returns the initialized clone.
         */
        function initCloneArray(array) {
          var length = array.length,
              result = new array.constructor(length);

          // Add properties assigned by `RegExp#exec`.
          if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
            result.index = array.index;
            result.input = array.input;
          }
          return result;
        }

        /**
         * Initializes an object clone.
         *
         * @private
         * @param {Object} object The object to clone.
         * @returns {Object} Returns the initialized clone.
         */
        function initCloneObject(object) {
          return (typeof object.constructor == 'function' && !isPrototype(object))
            ? baseCreate(getPrototype(object))
            : {};
        }

        /**
         * Initializes an object clone based on its `toStringTag`.
         *
         * **Note:** This function only supports cloning values with tags of
         * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
         *
         * @private
         * @param {Object} object The object to clone.
         * @param {string} tag The `toStringTag` of the object to clone.
         * @param {boolean} [isDeep] Specify a deep clone.
         * @returns {Object} Returns the initialized clone.
         */
        function initCloneByTag(object, tag, isDeep) {
          var Ctor = object.constructor;
          switch (tag) {
            case arrayBufferTag:
              return cloneArrayBuffer(object);

            case boolTag:
            case dateTag:
              return new Ctor(+object);

            case dataViewTag:
              return cloneDataView(object, isDeep);

            case float32Tag: case float64Tag:
            case int8Tag: case int16Tag: case int32Tag:
            case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
              return cloneTypedArray(object, isDeep);

            case mapTag:
              return new Ctor;

            case numberTag:
            case stringTag:
              return new Ctor(object);

            case regexpTag:
              return cloneRegExp(object);

            case setTag:
              return new Ctor;

            case symbolTag:
              return cloneSymbol(object);
          }
        }

        /**
         * Inserts wrapper `details` in a comment at the top of the `source` body.
         *
         * @private
         * @param {string} source The source to modify.
         * @returns {Array} details The details to insert.
         * @returns {string} Returns the modified source.
         */
        function insertWrapDetails(source, details) {
          var length = details.length;
          if (!length) {
            return source;
          }
          var lastIndex = length - 1;
          details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
          details = details.join(length > 2 ? ', ' : ' ');
          return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
        }

        /**
         * Checks if `value` is a flattenable `arguments` object or array.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
         */
        function isFlattenable(value) {
          return isArray(value) || isArguments(value) ||
            !!(spreadableSymbol && value && value[spreadableSymbol]);
        }

        /**
         * Checks if `value` is a valid array-like index.
         *
         * @private
         * @param {*} value The value to check.
         * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
         * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
         */
        function isIndex(value, length) {
          var type = typeof value;
          length = length == null ? MAX_SAFE_INTEGER : length;

          return !!length &&
            (type == 'number' ||
              (type != 'symbol' && reIsUint.test(value))) &&
                (value > -1 && value % 1 == 0 && value < length);
        }

        /**
         * Checks if the given arguments are from an iteratee call.
         *
         * @private
         * @param {*} value The potential iteratee value argument.
         * @param {*} index The potential iteratee index or key argument.
         * @param {*} object The potential iteratee object argument.
         * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
         *  else `false`.
         */
        function isIterateeCall(value, index, object) {
          if (!isObject(object)) {
            return false;
          }
          var type = typeof index;
          if (type == 'number'
                ? (isArrayLike(object) && isIndex(index, object.length))
                : (type == 'string' && index in object)
              ) {
            return eq(object[index], value);
          }
          return false;
        }

        /**
         * Checks if `value` is a property name and not a property path.
         *
         * @private
         * @param {*} value The value to check.
         * @param {Object} [object] The object to query keys on.
         * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
         */
        function isKey(value, object) {
          if (isArray(value)) {
            return false;
          }
          var type = typeof value;
          if (type == 'number' || type == 'symbol' || type == 'boolean' ||
              value == null || isSymbol(value)) {
            return true;
          }
          return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
            (object != null && value in Object(object));
        }

        /**
         * Checks if `value` is suitable for use as unique object key.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
         */
        function isKeyable(value) {
          var type = typeof value;
          return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
            ? (value !== '__proto__')
            : (value === null);
        }

        /**
         * Checks if `func` has a lazy counterpart.
         *
         * @private
         * @param {Function} func The function to check.
         * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
         *  else `false`.
         */
        function isLaziable(func) {
          var funcName = getFuncName(func),
              other = lodash[funcName];

          if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
            return false;
          }
          if (func === other) {
            return true;
          }
          var data = getData(other);
          return !!data && func === data[0];
        }

        /**
         * Checks if `func` has its source masked.
         *
         * @private
         * @param {Function} func The function to check.
         * @returns {boolean} Returns `true` if `func` is masked, else `false`.
         */
        function isMasked(func) {
          return !!maskSrcKey && (maskSrcKey in func);
        }

        /**
         * Checks if `func` is capable of being masked.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
         */
        var isMaskable = coreJsData ? isFunction : stubFalse;

        /**
         * Checks if `value` is likely a prototype object.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
         */
        function isPrototype(value) {
          var Ctor = value && value.constructor,
              proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

          return value === proto;
        }

        /**
         * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` if suitable for strict
         *  equality comparisons, else `false`.
         */
        function isStrictComparable(value) {
          return value === value && !isObject(value);
        }

        /**
         * A specialized version of `matchesProperty` for source values suitable
         * for strict equality comparisons, i.e. `===`.
         *
         * @private
         * @param {string} key The key of the property to get.
         * @param {*} srcValue The value to match.
         * @returns {Function} Returns the new spec function.
         */
        function matchesStrictComparable(key, srcValue) {
          return function(object) {
            if (object == null) {
              return false;
            }
            return object[key] === srcValue &&
              (srcValue !== undefined$1 || (key in Object(object)));
          };
        }

        /**
         * A specialized version of `_.memoize` which clears the memoized function's
         * cache when it exceeds `MAX_MEMOIZE_SIZE`.
         *
         * @private
         * @param {Function} func The function to have its output memoized.
         * @returns {Function} Returns the new memoized function.
         */
        function memoizeCapped(func) {
          var result = memoize(func, function(key) {
            if (cache.size === MAX_MEMOIZE_SIZE) {
              cache.clear();
            }
            return key;
          });

          var cache = result.cache;
          return result;
        }

        /**
         * Merges the function metadata of `source` into `data`.
         *
         * Merging metadata reduces the number of wrappers used to invoke a function.
         * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
         * may be applied regardless of execution order. Methods like `_.ary` and
         * `_.rearg` modify function arguments, making the order in which they are
         * executed important, preventing the merging of metadata. However, we make
         * an exception for a safe combined case where curried functions have `_.ary`
         * and or `_.rearg` applied.
         *
         * @private
         * @param {Array} data The destination metadata.
         * @param {Array} source The source metadata.
         * @returns {Array} Returns `data`.
         */
        function mergeData(data, source) {
          var bitmask = data[1],
              srcBitmask = source[1],
              newBitmask = bitmask | srcBitmask,
              isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

          var isCombo =
            ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
            ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
            ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

          // Exit early if metadata can't be merged.
          if (!(isCommon || isCombo)) {
            return data;
          }
          // Use source `thisArg` if available.
          if (srcBitmask & WRAP_BIND_FLAG) {
            data[2] = source[2];
            // Set when currying a bound function.
            newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
          }
          // Compose partial arguments.
          var value = source[3];
          if (value) {
            var partials = data[3];
            data[3] = partials ? composeArgs(partials, value, source[4]) : value;
            data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
          }
          // Compose partial right arguments.
          value = source[5];
          if (value) {
            partials = data[5];
            data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
            data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
          }
          // Use source `argPos` if available.
          value = source[7];
          if (value) {
            data[7] = value;
          }
          // Use source `ary` if it's smaller.
          if (srcBitmask & WRAP_ARY_FLAG) {
            data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
          }
          // Use source `arity` if one is not provided.
          if (data[9] == null) {
            data[9] = source[9];
          }
          // Use source `func` and merge bitmasks.
          data[0] = source[0];
          data[1] = newBitmask;

          return data;
        }

        /**
         * This function is like
         * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
         * except that it includes inherited enumerable properties.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names.
         */
        function nativeKeysIn(object) {
          var result = [];
          if (object != null) {
            for (var key in Object(object)) {
              result.push(key);
            }
          }
          return result;
        }

        /**
         * Converts `value` to a string using `Object.prototype.toString`.
         *
         * @private
         * @param {*} value The value to convert.
         * @returns {string} Returns the converted string.
         */
        function objectToString(value) {
          return nativeObjectToString.call(value);
        }

        /**
         * A specialized version of `baseRest` which transforms the rest array.
         *
         * @private
         * @param {Function} func The function to apply a rest parameter to.
         * @param {number} [start=func.length-1] The start position of the rest parameter.
         * @param {Function} transform The rest array transform.
         * @returns {Function} Returns the new function.
         */
        function overRest(func, start, transform) {
          start = nativeMax(start === undefined$1 ? (func.length - 1) : start, 0);
          return function() {
            var args = arguments,
                index = -1,
                length = nativeMax(args.length - start, 0),
                array = Array(length);

            while (++index < length) {
              array[index] = args[start + index];
            }
            index = -1;
            var otherArgs = Array(start + 1);
            while (++index < start) {
              otherArgs[index] = args[index];
            }
            otherArgs[start] = transform(array);
            return apply(func, this, otherArgs);
          };
        }

        /**
         * Gets the parent value at `path` of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {Array} path The path to get the parent value of.
         * @returns {*} Returns the parent value.
         */
        function parent(object, path) {
          return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
        }

        /**
         * Reorder `array` according to the specified indexes where the element at
         * the first index is assigned as the first element, the element at
         * the second index is assigned as the second element, and so on.
         *
         * @private
         * @param {Array} array The array to reorder.
         * @param {Array} indexes The arranged array indexes.
         * @returns {Array} Returns `array`.
         */
        function reorder(array, indexes) {
          var arrLength = array.length,
              length = nativeMin(indexes.length, arrLength),
              oldArray = copyArray(array);

          while (length--) {
            var index = indexes[length];
            array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined$1;
          }
          return array;
        }

        /**
         * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
         *
         * @private
         * @param {Object} object The object to query.
         * @param {string} key The key of the property to get.
         * @returns {*} Returns the property value.
         */
        function safeGet(object, key) {
          if (key === 'constructor' && typeof object[key] === 'function') {
            return;
          }

          if (key == '__proto__') {
            return;
          }

          return object[key];
        }

        /**
         * Sets metadata for `func`.
         *
         * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
         * period of time, it will trip its breaker and transition to an identity
         * function to avoid garbage collection pauses in V8. See
         * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
         * for more details.
         *
         * @private
         * @param {Function} func The function to associate metadata with.
         * @param {*} data The metadata.
         * @returns {Function} Returns `func`.
         */
        var setData = shortOut(baseSetData);

        /**
         * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
         *
         * @private
         * @param {Function} func The function to delay.
         * @param {number} wait The number of milliseconds to delay invocation.
         * @returns {number|Object} Returns the timer id or timeout object.
         */
        var setTimeout = ctxSetTimeout || function(func, wait) {
          return root.setTimeout(func, wait);
        };

        /**
         * Sets the `toString` method of `func` to return `string`.
         *
         * @private
         * @param {Function} func The function to modify.
         * @param {Function} string The `toString` result.
         * @returns {Function} Returns `func`.
         */
        var setToString = shortOut(baseSetToString);

        /**
         * Sets the `toString` method of `wrapper` to mimic the source of `reference`
         * with wrapper details in a comment at the top of the source body.
         *
         * @private
         * @param {Function} wrapper The function to modify.
         * @param {Function} reference The reference function.
         * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
         * @returns {Function} Returns `wrapper`.
         */
        function setWrapToString(wrapper, reference, bitmask) {
          var source = (reference + '');
          return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
        }

        /**
         * Creates a function that'll short out and invoke `identity` instead
         * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
         * milliseconds.
         *
         * @private
         * @param {Function} func The function to restrict.
         * @returns {Function} Returns the new shortable function.
         */
        function shortOut(func) {
          var count = 0,
              lastCalled = 0;

          return function() {
            var stamp = nativeNow(),
                remaining = HOT_SPAN - (stamp - lastCalled);

            lastCalled = stamp;
            if (remaining > 0) {
              if (++count >= HOT_COUNT) {
                return arguments[0];
              }
            } else {
              count = 0;
            }
            return func.apply(undefined$1, arguments);
          };
        }

        /**
         * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
         *
         * @private
         * @param {Array} array The array to shuffle.
         * @param {number} [size=array.length] The size of `array`.
         * @returns {Array} Returns `array`.
         */
        function shuffleSelf(array, size) {
          var index = -1,
              length = array.length,
              lastIndex = length - 1;

          size = size === undefined$1 ? length : size;
          while (++index < size) {
            var rand = baseRandom(index, lastIndex),
                value = array[rand];

            array[rand] = array[index];
            array[index] = value;
          }
          array.length = size;
          return array;
        }

        /**
         * Converts `string` to a property path array.
         *
         * @private
         * @param {string} string The string to convert.
         * @returns {Array} Returns the property path array.
         */
        var stringToPath = memoizeCapped(function(string) {
          var result = [];
          if (string.charCodeAt(0) === 46 /* . */) {
            result.push('');
          }
          string.replace(rePropName, function(match, number, quote, subString) {
            result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
          });
          return result;
        });

        /**
         * Converts `value` to a string key if it's not a string or symbol.
         *
         * @private
         * @param {*} value The value to inspect.
         * @returns {string|symbol} Returns the key.
         */
        function toKey(value) {
          if (typeof value == 'string' || isSymbol(value)) {
            return value;
          }
          var result = (value + '');
          return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
        }

        /**
         * Converts `func` to its source code.
         *
         * @private
         * @param {Function} func The function to convert.
         * @returns {string} Returns the source code.
         */
        function toSource(func) {
          if (func != null) {
            try {
              return funcToString.call(func);
            } catch (e) {}
            try {
              return (func + '');
            } catch (e) {}
          }
          return '';
        }

        /**
         * Updates wrapper `details` based on `bitmask` flags.
         *
         * @private
         * @returns {Array} details The details to modify.
         * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
         * @returns {Array} Returns `details`.
         */
        function updateWrapDetails(details, bitmask) {
          arrayEach(wrapFlags, function(pair) {
            var value = '_.' + pair[0];
            if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
              details.push(value);
            }
          });
          return details.sort();
        }

        /**
         * Creates a clone of `wrapper`.
         *
         * @private
         * @param {Object} wrapper The wrapper to clone.
         * @returns {Object} Returns the cloned wrapper.
         */
        function wrapperClone(wrapper) {
          if (wrapper instanceof LazyWrapper) {
            return wrapper.clone();
          }
          var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
          result.__actions__ = copyArray(wrapper.__actions__);
          result.__index__  = wrapper.__index__;
          result.__values__ = wrapper.__values__;
          return result;
        }

        /*------------------------------------------------------------------------*/

        /**
         * Creates an array of elements split into groups the length of `size`.
         * If `array` can't be split evenly, the final chunk will be the remaining
         * elements.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The array to process.
         * @param {number} [size=1] The length of each chunk
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {Array} Returns the new array of chunks.
         * @example
         *
         * _.chunk(['a', 'b', 'c', 'd'], 2);
         * // => [['a', 'b'], ['c', 'd']]
         *
         * _.chunk(['a', 'b', 'c', 'd'], 3);
         * // => [['a', 'b', 'c'], ['d']]
         */
        function chunk(array, size, guard) {
          if ((guard ? isIterateeCall(array, size, guard) : size === undefined$1)) {
            size = 1;
          } else {
            size = nativeMax(toInteger(size), 0);
          }
          var length = array == null ? 0 : array.length;
          if (!length || size < 1) {
            return [];
          }
          var index = 0,
              resIndex = 0,
              result = Array(nativeCeil(length / size));

          while (index < length) {
            result[resIndex++] = baseSlice(array, index, (index += size));
          }
          return result;
        }

        /**
         * Creates an array with all falsey values removed. The values `false`, `null`,
         * `0`, `""`, `undefined`, and `NaN` are falsey.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to compact.
         * @returns {Array} Returns the new array of filtered values.
         * @example
         *
         * _.compact([0, 1, false, 2, '', 3]);
         * // => [1, 2, 3]
         */
        function compact(array) {
          var index = -1,
              length = array == null ? 0 : array.length,
              resIndex = 0,
              result = [];

          while (++index < length) {
            var value = array[index];
            if (value) {
              result[resIndex++] = value;
            }
          }
          return result;
        }

        /**
         * Creates a new array concatenating `array` with any additional arrays
         * and/or values.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to concatenate.
         * @param {...*} [values] The values to concatenate.
         * @returns {Array} Returns the new concatenated array.
         * @example
         *
         * var array = [1];
         * var other = _.concat(array, 2, [3], [[4]]);
         *
         * console.log(other);
         * // => [1, 2, 3, [4]]
         *
         * console.log(array);
         * // => [1]
         */
        function concat() {
          var length = arguments.length;
          if (!length) {
            return [];
          }
          var args = Array(length - 1),
              array = arguments[0],
              index = length;

          while (index--) {
            args[index - 1] = arguments[index];
          }
          return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
        }

        /**
         * Creates an array of `array` values not included in the other given arrays
         * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * for equality comparisons. The order and references of result values are
         * determined by the first array.
         *
         * **Note:** Unlike `_.pullAll`, this method returns a new array.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {...Array} [values] The values to exclude.
         * @returns {Array} Returns the new array of filtered values.
         * @see _.without, _.xor
         * @example
         *
         * _.difference([2, 1], [2, 3]);
         * // => [1]
         */
        var difference = baseRest(function(array, values) {
          return isArrayLikeObject(array)
            ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
            : [];
        });

        /**
         * This method is like `_.difference` except that it accepts `iteratee` which
         * is invoked for each element of `array` and `values` to generate the criterion
         * by which they're compared. The order and references of result values are
         * determined by the first array. The iteratee is invoked with one argument:
         * (value).
         *
         * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {...Array} [values] The values to exclude.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {Array} Returns the new array of filtered values.
         * @example
         *
         * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
         * // => [1.2]
         *
         * // The `_.property` iteratee shorthand.
         * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
         * // => [{ 'x': 2 }]
         */
        var differenceBy = baseRest(function(array, values) {
          var iteratee = last(values);
          if (isArrayLikeObject(iteratee)) {
            iteratee = undefined$1;
          }
          return isArrayLikeObject(array)
            ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
            : [];
        });

        /**
         * This method is like `_.difference` except that it accepts `comparator`
         * which is invoked to compare elements of `array` to `values`. The order and
         * references of result values are determined by the first array. The comparator
         * is invoked with two arguments: (arrVal, othVal).
         *
         * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {...Array} [values] The values to exclude.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns the new array of filtered values.
         * @example
         *
         * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
         *
         * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
         * // => [{ 'x': 2, 'y': 1 }]
         */
        var differenceWith = baseRest(function(array, values) {
          var comparator = last(values);
          if (isArrayLikeObject(comparator)) {
            comparator = undefined$1;
          }
          return isArrayLikeObject(array)
            ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined$1, comparator)
            : [];
        });

        /**
         * Creates a slice of `array` with `n` elements dropped from the beginning.
         *
         * @static
         * @memberOf _
         * @since 0.5.0
         * @category Array
         * @param {Array} array The array to query.
         * @param {number} [n=1] The number of elements to drop.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * _.drop([1, 2, 3]);
         * // => [2, 3]
         *
         * _.drop([1, 2, 3], 2);
         * // => [3]
         *
         * _.drop([1, 2, 3], 5);
         * // => []
         *
         * _.drop([1, 2, 3], 0);
         * // => [1, 2, 3]
         */
        function drop(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = (guard || n === undefined$1) ? 1 : toInteger(n);
          return baseSlice(array, n < 0 ? 0 : n, length);
        }

        /**
         * Creates a slice of `array` with `n` elements dropped from the end.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The array to query.
         * @param {number} [n=1] The number of elements to drop.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * _.dropRight([1, 2, 3]);
         * // => [1, 2]
         *
         * _.dropRight([1, 2, 3], 2);
         * // => [1]
         *
         * _.dropRight([1, 2, 3], 5);
         * // => []
         *
         * _.dropRight([1, 2, 3], 0);
         * // => [1, 2, 3]
         */
        function dropRight(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = (guard || n === undefined$1) ? 1 : toInteger(n);
          n = length - n;
          return baseSlice(array, 0, n < 0 ? 0 : n);
        }

        /**
         * Creates a slice of `array` excluding elements dropped from the end.
         * Elements are dropped until `predicate` returns falsey. The predicate is
         * invoked with three arguments: (value, index, array).
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The array to query.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * var users = [
         *   { 'user': 'barney',  'active': true },
         *   { 'user': 'fred',    'active': false },
         *   { 'user': 'pebbles', 'active': false }
         * ];
         *
         * _.dropRightWhile(users, function(o) { return !o.active; });
         * // => objects for ['barney']
         *
         * // The `_.matches` iteratee shorthand.
         * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
         * // => objects for ['barney', 'fred']
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.dropRightWhile(users, ['active', false]);
         * // => objects for ['barney']
         *
         * // The `_.property` iteratee shorthand.
         * _.dropRightWhile(users, 'active');
         * // => objects for ['barney', 'fred', 'pebbles']
         */
        function dropRightWhile(array, predicate) {
          return (array && array.length)
            ? baseWhile(array, getIteratee(predicate, 3), true, true)
            : [];
        }

        /**
         * Creates a slice of `array` excluding elements dropped from the beginning.
         * Elements are dropped until `predicate` returns falsey. The predicate is
         * invoked with three arguments: (value, index, array).
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The array to query.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * var users = [
         *   { 'user': 'barney',  'active': false },
         *   { 'user': 'fred',    'active': false },
         *   { 'user': 'pebbles', 'active': true }
         * ];
         *
         * _.dropWhile(users, function(o) { return !o.active; });
         * // => objects for ['pebbles']
         *
         * // The `_.matches` iteratee shorthand.
         * _.dropWhile(users, { 'user': 'barney', 'active': false });
         * // => objects for ['fred', 'pebbles']
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.dropWhile(users, ['active', false]);
         * // => objects for ['pebbles']
         *
         * // The `_.property` iteratee shorthand.
         * _.dropWhile(users, 'active');
         * // => objects for ['barney', 'fred', 'pebbles']
         */
        function dropWhile(array, predicate) {
          return (array && array.length)
            ? baseWhile(array, getIteratee(predicate, 3), true)
            : [];
        }

        /**
         * Fills elements of `array` with `value` from `start` up to, but not
         * including, `end`.
         *
         * **Note:** This method mutates `array`.
         *
         * @static
         * @memberOf _
         * @since 3.2.0
         * @category Array
         * @param {Array} array The array to fill.
         * @param {*} value The value to fill `array` with.
         * @param {number} [start=0] The start position.
         * @param {number} [end=array.length] The end position.
         * @returns {Array} Returns `array`.
         * @example
         *
         * var array = [1, 2, 3];
         *
         * _.fill(array, 'a');
         * console.log(array);
         * // => ['a', 'a', 'a']
         *
         * _.fill(Array(3), 2);
         * // => [2, 2, 2]
         *
         * _.fill([4, 6, 8, 10], '*', 1, 3);
         * // => [4, '*', '*', 10]
         */
        function fill(array, value, start, end) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
            start = 0;
            end = length;
          }
          return baseFill(array, value, start, end);
        }

        /**
         * This method is like `_.find` except that it returns the index of the first
         * element `predicate` returns truthy for instead of the element itself.
         *
         * @static
         * @memberOf _
         * @since 1.1.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @param {number} [fromIndex=0] The index to search from.
         * @returns {number} Returns the index of the found element, else `-1`.
         * @example
         *
         * var users = [
         *   { 'user': 'barney',  'active': false },
         *   { 'user': 'fred',    'active': false },
         *   { 'user': 'pebbles', 'active': true }
         * ];
         *
         * _.findIndex(users, function(o) { return o.user == 'barney'; });
         * // => 0
         *
         * // The `_.matches` iteratee shorthand.
         * _.findIndex(users, { 'user': 'fred', 'active': false });
         * // => 1
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.findIndex(users, ['active', false]);
         * // => 0
         *
         * // The `_.property` iteratee shorthand.
         * _.findIndex(users, 'active');
         * // => 2
         */
        function findIndex(array, predicate, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index < 0) {
            index = nativeMax(length + index, 0);
          }
          return baseFindIndex(array, getIteratee(predicate, 3), index);
        }

        /**
         * This method is like `_.findIndex` except that it iterates over elements
         * of `collection` from right to left.
         *
         * @static
         * @memberOf _
         * @since 2.0.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @param {number} [fromIndex=array.length-1] The index to search from.
         * @returns {number} Returns the index of the found element, else `-1`.
         * @example
         *
         * var users = [
         *   { 'user': 'barney',  'active': true },
         *   { 'user': 'fred',    'active': false },
         *   { 'user': 'pebbles', 'active': false }
         * ];
         *
         * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
         * // => 2
         *
         * // The `_.matches` iteratee shorthand.
         * _.findLastIndex(users, { 'user': 'barney', 'active': true });
         * // => 0
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.findLastIndex(users, ['active', false]);
         * // => 2
         *
         * // The `_.property` iteratee shorthand.
         * _.findLastIndex(users, 'active');
         * // => 0
         */
        function findLastIndex(array, predicate, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = length - 1;
          if (fromIndex !== undefined$1) {
            index = toInteger(fromIndex);
            index = fromIndex < 0
              ? nativeMax(length + index, 0)
              : nativeMin(index, length - 1);
          }
          return baseFindIndex(array, getIteratee(predicate, 3), index, true);
        }

        /**
         * Flattens `array` a single level deep.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to flatten.
         * @returns {Array} Returns the new flattened array.
         * @example
         *
         * _.flatten([1, [2, [3, [4]], 5]]);
         * // => [1, 2, [3, [4]], 5]
         */
        function flatten(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseFlatten(array, 1) : [];
        }

        /**
         * Recursively flattens `array`.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The array to flatten.
         * @returns {Array} Returns the new flattened array.
         * @example
         *
         * _.flattenDeep([1, [2, [3, [4]], 5]]);
         * // => [1, 2, 3, 4, 5]
         */
        function flattenDeep(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseFlatten(array, INFINITY) : [];
        }

        /**
         * Recursively flatten `array` up to `depth` times.
         *
         * @static
         * @memberOf _
         * @since 4.4.0
         * @category Array
         * @param {Array} array The array to flatten.
         * @param {number} [depth=1] The maximum recursion depth.
         * @returns {Array} Returns the new flattened array.
         * @example
         *
         * var array = [1, [2, [3, [4]], 5]];
         *
         * _.flattenDepth(array, 1);
         * // => [1, 2, [3, [4]], 5]
         *
         * _.flattenDepth(array, 2);
         * // => [1, 2, 3, [4], 5]
         */
        function flattenDepth(array, depth) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          depth = depth === undefined$1 ? 1 : toInteger(depth);
          return baseFlatten(array, depth);
        }

        /**
         * The inverse of `_.toPairs`; this method returns an object composed
         * from key-value `pairs`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} pairs The key-value pairs.
         * @returns {Object} Returns the new object.
         * @example
         *
         * _.fromPairs([['a', 1], ['b', 2]]);
         * // => { 'a': 1, 'b': 2 }
         */
        function fromPairs(pairs) {
          var index = -1,
              length = pairs == null ? 0 : pairs.length,
              result = {};

          while (++index < length) {
            var pair = pairs[index];
            result[pair[0]] = pair[1];
          }
          return result;
        }

        /**
         * Gets the first element of `array`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @alias first
         * @category Array
         * @param {Array} array The array to query.
         * @returns {*} Returns the first element of `array`.
         * @example
         *
         * _.head([1, 2, 3]);
         * // => 1
         *
         * _.head([]);
         * // => undefined
         */
        function head(array) {
          return (array && array.length) ? array[0] : undefined$1;
        }

        /**
         * Gets the index at which the first occurrence of `value` is found in `array`
         * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * for equality comparisons. If `fromIndex` is negative, it's used as the
         * offset from the end of `array`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {*} value The value to search for.
         * @param {number} [fromIndex=0] The index to search from.
         * @returns {number} Returns the index of the matched value, else `-1`.
         * @example
         *
         * _.indexOf([1, 2, 1, 2], 2);
         * // => 1
         *
         * // Search from the `fromIndex`.
         * _.indexOf([1, 2, 1, 2], 2, 2);
         * // => 3
         */
        function indexOf(array, value, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index < 0) {
            index = nativeMax(length + index, 0);
          }
          return baseIndexOf(array, value, index);
        }

        /**
         * Gets all but the last element of `array`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to query.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * _.initial([1, 2, 3]);
         * // => [1, 2]
         */
        function initial(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseSlice(array, 0, -1) : [];
        }

        /**
         * Creates an array of unique values that are included in all given arrays
         * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * for equality comparisons. The order and references of result values are
         * determined by the first array.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {...Array} [arrays] The arrays to inspect.
         * @returns {Array} Returns the new array of intersecting values.
         * @example
         *
         * _.intersection([2, 1], [2, 3]);
         * // => [2]
         */
        var intersection = baseRest(function(arrays) {
          var mapped = arrayMap(arrays, castArrayLikeObject);
          return (mapped.length && mapped[0] === arrays[0])
            ? baseIntersection(mapped)
            : [];
        });

        /**
         * This method is like `_.intersection` except that it accepts `iteratee`
         * which is invoked for each element of each `arrays` to generate the criterion
         * by which they're compared. The order and references of result values are
         * determined by the first array. The iteratee is invoked with one argument:
         * (value).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {...Array} [arrays] The arrays to inspect.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {Array} Returns the new array of intersecting values.
         * @example
         *
         * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
         * // => [2.1]
         *
         * // The `_.property` iteratee shorthand.
         * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
         * // => [{ 'x': 1 }]
         */
        var intersectionBy = baseRest(function(arrays) {
          var iteratee = last(arrays),
              mapped = arrayMap(arrays, castArrayLikeObject);

          if (iteratee === last(mapped)) {
            iteratee = undefined$1;
          } else {
            mapped.pop();
          }
          return (mapped.length && mapped[0] === arrays[0])
            ? baseIntersection(mapped, getIteratee(iteratee, 2))
            : [];
        });

        /**
         * This method is like `_.intersection` except that it accepts `comparator`
         * which is invoked to compare elements of `arrays`. The order and references
         * of result values are determined by the first array. The comparator is
         * invoked with two arguments: (arrVal, othVal).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {...Array} [arrays] The arrays to inspect.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns the new array of intersecting values.
         * @example
         *
         * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
         * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
         *
         * _.intersectionWith(objects, others, _.isEqual);
         * // => [{ 'x': 1, 'y': 2 }]
         */
        var intersectionWith = baseRest(function(arrays) {
          var comparator = last(arrays),
              mapped = arrayMap(arrays, castArrayLikeObject);

          comparator = typeof comparator == 'function' ? comparator : undefined$1;
          if (comparator) {
            mapped.pop();
          }
          return (mapped.length && mapped[0] === arrays[0])
            ? baseIntersection(mapped, undefined$1, comparator)
            : [];
        });

        /**
         * Converts all elements in `array` into a string separated by `separator`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to convert.
         * @param {string} [separator=','] The element separator.
         * @returns {string} Returns the joined string.
         * @example
         *
         * _.join(['a', 'b', 'c'], '~');
         * // => 'a~b~c'
         */
        function join(array, separator) {
          return array == null ? '' : nativeJoin.call(array, separator);
        }

        /**
         * Gets the last element of `array`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to query.
         * @returns {*} Returns the last element of `array`.
         * @example
         *
         * _.last([1, 2, 3]);
         * // => 3
         */
        function last(array) {
          var length = array == null ? 0 : array.length;
          return length ? array[length - 1] : undefined$1;
        }

        /**
         * This method is like `_.indexOf` except that it iterates over elements of
         * `array` from right to left.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {*} value The value to search for.
         * @param {number} [fromIndex=array.length-1] The index to search from.
         * @returns {number} Returns the index of the matched value, else `-1`.
         * @example
         *
         * _.lastIndexOf([1, 2, 1, 2], 2);
         * // => 3
         *
         * // Search from the `fromIndex`.
         * _.lastIndexOf([1, 2, 1, 2], 2, 2);
         * // => 1
         */
        function lastIndexOf(array, value, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = length;
          if (fromIndex !== undefined$1) {
            index = toInteger(fromIndex);
            index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
          }
          return value === value
            ? strictLastIndexOf(array, value, index)
            : baseFindIndex(array, baseIsNaN, index, true);
        }

        /**
         * Gets the element at index `n` of `array`. If `n` is negative, the nth
         * element from the end is returned.
         *
         * @static
         * @memberOf _
         * @since 4.11.0
         * @category Array
         * @param {Array} array The array to query.
         * @param {number} [n=0] The index of the element to return.
         * @returns {*} Returns the nth element of `array`.
         * @example
         *
         * var array = ['a', 'b', 'c', 'd'];
         *
         * _.nth(array, 1);
         * // => 'b'
         *
         * _.nth(array, -2);
         * // => 'c';
         */
        function nth(array, n) {
          return (array && array.length) ? baseNth(array, toInteger(n)) : undefined$1;
        }

        /**
         * Removes all given values from `array` using
         * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * for equality comparisons.
         *
         * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
         * to remove elements from an array by predicate.
         *
         * @static
         * @memberOf _
         * @since 2.0.0
         * @category Array
         * @param {Array} array The array to modify.
         * @param {...*} [values] The values to remove.
         * @returns {Array} Returns `array`.
         * @example
         *
         * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
         *
         * _.pull(array, 'a', 'c');
         * console.log(array);
         * // => ['b', 'b']
         */
        var pull = baseRest(pullAll);

        /**
         * This method is like `_.pull` except that it accepts an array of values to remove.
         *
         * **Note:** Unlike `_.difference`, this method mutates `array`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to modify.
         * @param {Array} values The values to remove.
         * @returns {Array} Returns `array`.
         * @example
         *
         * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
         *
         * _.pullAll(array, ['a', 'c']);
         * console.log(array);
         * // => ['b', 'b']
         */
        function pullAll(array, values) {
          return (array && array.length && values && values.length)
            ? basePullAll(array, values)
            : array;
        }

        /**
         * This method is like `_.pullAll` except that it accepts `iteratee` which is
         * invoked for each element of `array` and `values` to generate the criterion
         * by which they're compared. The iteratee is invoked with one argument: (value).
         *
         * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to modify.
         * @param {Array} values The values to remove.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {Array} Returns `array`.
         * @example
         *
         * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
         *
         * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
         * console.log(array);
         * // => [{ 'x': 2 }]
         */
        function pullAllBy(array, values, iteratee) {
          return (array && array.length && values && values.length)
            ? basePullAll(array, values, getIteratee(iteratee, 2))
            : array;
        }

        /**
         * This method is like `_.pullAll` except that it accepts `comparator` which
         * is invoked to compare elements of `array` to `values`. The comparator is
         * invoked with two arguments: (arrVal, othVal).
         *
         * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
         *
         * @static
         * @memberOf _
         * @since 4.6.0
         * @category Array
         * @param {Array} array The array to modify.
         * @param {Array} values The values to remove.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns `array`.
         * @example
         *
         * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
         *
         * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
         * console.log(array);
         * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
         */
        function pullAllWith(array, values, comparator) {
          return (array && array.length && values && values.length)
            ? basePullAll(array, values, undefined$1, comparator)
            : array;
        }

        /**
         * Removes elements from `array` corresponding to `indexes` and returns an
         * array of removed elements.
         *
         * **Note:** Unlike `_.at`, this method mutates `array`.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The array to modify.
         * @param {...(number|number[])} [indexes] The indexes of elements to remove.
         * @returns {Array} Returns the new array of removed elements.
         * @example
         *
         * var array = ['a', 'b', 'c', 'd'];
         * var pulled = _.pullAt(array, [1, 3]);
         *
         * console.log(array);
         * // => ['a', 'c']
         *
         * console.log(pulled);
         * // => ['b', 'd']
         */
        var pullAt = flatRest(function(array, indexes) {
          var length = array == null ? 0 : array.length,
              result = baseAt(array, indexes);

          basePullAt(array, arrayMap(indexes, function(index) {
            return isIndex(index, length) ? +index : index;
          }).sort(compareAscending));

          return result;
        });

        /**
         * Removes all elements from `array` that `predicate` returns truthy for
         * and returns an array of the removed elements. The predicate is invoked
         * with three arguments: (value, index, array).
         *
         * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
         * to pull elements from an array by value.
         *
         * @static
         * @memberOf _
         * @since 2.0.0
         * @category Array
         * @param {Array} array The array to modify.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the new array of removed elements.
         * @example
         *
         * var array = [1, 2, 3, 4];
         * var evens = _.remove(array, function(n) {
         *   return n % 2 == 0;
         * });
         *
         * console.log(array);
         * // => [1, 3]
         *
         * console.log(evens);
         * // => [2, 4]
         */
        function remove(array, predicate) {
          var result = [];
          if (!(array && array.length)) {
            return result;
          }
          var index = -1,
              indexes = [],
              length = array.length;

          predicate = getIteratee(predicate, 3);
          while (++index < length) {
            var value = array[index];
            if (predicate(value, index, array)) {
              result.push(value);
              indexes.push(index);
            }
          }
          basePullAt(array, indexes);
          return result;
        }

        /**
         * Reverses `array` so that the first element becomes the last, the second
         * element becomes the second to last, and so on.
         *
         * **Note:** This method mutates `array` and is based on
         * [`Array#reverse`](https://mdn.io/Array/reverse).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to modify.
         * @returns {Array} Returns `array`.
         * @example
         *
         * var array = [1, 2, 3];
         *
         * _.reverse(array);
         * // => [3, 2, 1]
         *
         * console.log(array);
         * // => [3, 2, 1]
         */
        function reverse(array) {
          return array == null ? array : nativeReverse.call(array);
        }

        /**
         * Creates a slice of `array` from `start` up to, but not including, `end`.
         *
         * **Note:** This method is used instead of
         * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
         * returned.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The array to slice.
         * @param {number} [start=0] The start position.
         * @param {number} [end=array.length] The end position.
         * @returns {Array} Returns the slice of `array`.
         */
        function slice(array, start, end) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
            start = 0;
            end = length;
          }
          else {
            start = start == null ? 0 : toInteger(start);
            end = end === undefined$1 ? length : toInteger(end);
          }
          return baseSlice(array, start, end);
        }

        /**
         * Uses a binary search to determine the lowest index at which `value`
         * should be inserted into `array` in order to maintain its sort order.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The sorted array to inspect.
         * @param {*} value The value to evaluate.
         * @returns {number} Returns the index at which `value` should be inserted
         *  into `array`.
         * @example
         *
         * _.sortedIndex([30, 50], 40);
         * // => 1
         */
        function sortedIndex(array, value) {
          return baseSortedIndex(array, value);
        }

        /**
         * This method is like `_.sortedIndex` except that it accepts `iteratee`
         * which is invoked for `value` and each element of `array` to compute their
         * sort ranking. The iteratee is invoked with one argument: (value).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The sorted array to inspect.
         * @param {*} value The value to evaluate.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {number} Returns the index at which `value` should be inserted
         *  into `array`.
         * @example
         *
         * var objects = [{ 'x': 4 }, { 'x': 5 }];
         *
         * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
         * // => 0
         *
         * // The `_.property` iteratee shorthand.
         * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
         * // => 0
         */
        function sortedIndexBy(array, value, iteratee) {
          return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
        }

        /**
         * This method is like `_.indexOf` except that it performs a binary
         * search on a sorted `array`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {*} value The value to search for.
         * @returns {number} Returns the index of the matched value, else `-1`.
         * @example
         *
         * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
         * // => 1
         */
        function sortedIndexOf(array, value) {
          var length = array == null ? 0 : array.length;
          if (length) {
            var index = baseSortedIndex(array, value);
            if (index < length && eq(array[index], value)) {
              return index;
            }
          }
          return -1;
        }

        /**
         * This method is like `_.sortedIndex` except that it returns the highest
         * index at which `value` should be inserted into `array` in order to
         * maintain its sort order.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The sorted array to inspect.
         * @param {*} value The value to evaluate.
         * @returns {number} Returns the index at which `value` should be inserted
         *  into `array`.
         * @example
         *
         * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
         * // => 4
         */
        function sortedLastIndex(array, value) {
          return baseSortedIndex(array, value, true);
        }

        /**
         * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
         * which is invoked for `value` and each element of `array` to compute their
         * sort ranking. The iteratee is invoked with one argument: (value).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The sorted array to inspect.
         * @param {*} value The value to evaluate.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {number} Returns the index at which `value` should be inserted
         *  into `array`.
         * @example
         *
         * var objects = [{ 'x': 4 }, { 'x': 5 }];
         *
         * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
         * // => 1
         *
         * // The `_.property` iteratee shorthand.
         * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
         * // => 1
         */
        function sortedLastIndexBy(array, value, iteratee) {
          return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
        }

        /**
         * This method is like `_.lastIndexOf` except that it performs a binary
         * search on a sorted `array`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {*} value The value to search for.
         * @returns {number} Returns the index of the matched value, else `-1`.
         * @example
         *
         * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
         * // => 3
         */
        function sortedLastIndexOf(array, value) {
          var length = array == null ? 0 : array.length;
          if (length) {
            var index = baseSortedIndex(array, value, true) - 1;
            if (eq(array[index], value)) {
              return index;
            }
          }
          return -1;
        }

        /**
         * This method is like `_.uniq` except that it's designed and optimized
         * for sorted arrays.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @returns {Array} Returns the new duplicate free array.
         * @example
         *
         * _.sortedUniq([1, 1, 2]);
         * // => [1, 2]
         */
        function sortedUniq(array) {
          return (array && array.length)
            ? baseSortedUniq(array)
            : [];
        }

        /**
         * This method is like `_.uniqBy` except that it's designed and optimized
         * for sorted arrays.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {Function} [iteratee] The iteratee invoked per element.
         * @returns {Array} Returns the new duplicate free array.
         * @example
         *
         * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
         * // => [1.1, 2.3]
         */
        function sortedUniqBy(array, iteratee) {
          return (array && array.length)
            ? baseSortedUniq(array, getIteratee(iteratee, 2))
            : [];
        }

        /**
         * Gets all but the first element of `array`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to query.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * _.tail([1, 2, 3]);
         * // => [2, 3]
         */
        function tail(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseSlice(array, 1, length) : [];
        }

        /**
         * Creates a slice of `array` with `n` elements taken from the beginning.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to query.
         * @param {number} [n=1] The number of elements to take.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * _.take([1, 2, 3]);
         * // => [1]
         *
         * _.take([1, 2, 3], 2);
         * // => [1, 2]
         *
         * _.take([1, 2, 3], 5);
         * // => [1, 2, 3]
         *
         * _.take([1, 2, 3], 0);
         * // => []
         */
        function take(array, n, guard) {
          if (!(array && array.length)) {
            return [];
          }
          n = (guard || n === undefined$1) ? 1 : toInteger(n);
          return baseSlice(array, 0, n < 0 ? 0 : n);
        }

        /**
         * Creates a slice of `array` with `n` elements taken from the end.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The array to query.
         * @param {number} [n=1] The number of elements to take.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * _.takeRight([1, 2, 3]);
         * // => [3]
         *
         * _.takeRight([1, 2, 3], 2);
         * // => [2, 3]
         *
         * _.takeRight([1, 2, 3], 5);
         * // => [1, 2, 3]
         *
         * _.takeRight([1, 2, 3], 0);
         * // => []
         */
        function takeRight(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = (guard || n === undefined$1) ? 1 : toInteger(n);
          n = length - n;
          return baseSlice(array, n < 0 ? 0 : n, length);
        }

        /**
         * Creates a slice of `array` with elements taken from the end. Elements are
         * taken until `predicate` returns falsey. The predicate is invoked with
         * three arguments: (value, index, array).
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The array to query.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * var users = [
         *   { 'user': 'barney',  'active': true },
         *   { 'user': 'fred',    'active': false },
         *   { 'user': 'pebbles', 'active': false }
         * ];
         *
         * _.takeRightWhile(users, function(o) { return !o.active; });
         * // => objects for ['fred', 'pebbles']
         *
         * // The `_.matches` iteratee shorthand.
         * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
         * // => objects for ['pebbles']
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.takeRightWhile(users, ['active', false]);
         * // => objects for ['fred', 'pebbles']
         *
         * // The `_.property` iteratee shorthand.
         * _.takeRightWhile(users, 'active');
         * // => []
         */
        function takeRightWhile(array, predicate) {
          return (array && array.length)
            ? baseWhile(array, getIteratee(predicate, 3), false, true)
            : [];
        }

        /**
         * Creates a slice of `array` with elements taken from the beginning. Elements
         * are taken until `predicate` returns falsey. The predicate is invoked with
         * three arguments: (value, index, array).
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The array to query.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * var users = [
         *   { 'user': 'barney',  'active': false },
         *   { 'user': 'fred',    'active': false },
         *   { 'user': 'pebbles', 'active': true }
         * ];
         *
         * _.takeWhile(users, function(o) { return !o.active; });
         * // => objects for ['barney', 'fred']
         *
         * // The `_.matches` iteratee shorthand.
         * _.takeWhile(users, { 'user': 'barney', 'active': false });
         * // => objects for ['barney']
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.takeWhile(users, ['active', false]);
         * // => objects for ['barney', 'fred']
         *
         * // The `_.property` iteratee shorthand.
         * _.takeWhile(users, 'active');
         * // => []
         */
        function takeWhile(array, predicate) {
          return (array && array.length)
            ? baseWhile(array, getIteratee(predicate, 3))
            : [];
        }

        /**
         * Creates an array of unique values, in order, from all given arrays using
         * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * for equality comparisons.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {...Array} [arrays] The arrays to inspect.
         * @returns {Array} Returns the new array of combined values.
         * @example
         *
         * _.union([2], [1, 2]);
         * // => [2, 1]
         */
        var union = baseRest(function(arrays) {
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
        });

        /**
         * This method is like `_.union` except that it accepts `iteratee` which is
         * invoked for each element of each `arrays` to generate the criterion by
         * which uniqueness is computed. Result values are chosen from the first
         * array in which the value occurs. The iteratee is invoked with one argument:
         * (value).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {...Array} [arrays] The arrays to inspect.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {Array} Returns the new array of combined values.
         * @example
         *
         * _.unionBy([2.1], [1.2, 2.3], Math.floor);
         * // => [2.1, 1.2]
         *
         * // The `_.property` iteratee shorthand.
         * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
         * // => [{ 'x': 1 }, { 'x': 2 }]
         */
        var unionBy = baseRest(function(arrays) {
          var iteratee = last(arrays);
          if (isArrayLikeObject(iteratee)) {
            iteratee = undefined$1;
          }
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
        });

        /**
         * This method is like `_.union` except that it accepts `comparator` which
         * is invoked to compare elements of `arrays`. Result values are chosen from
         * the first array in which the value occurs. The comparator is invoked
         * with two arguments: (arrVal, othVal).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {...Array} [arrays] The arrays to inspect.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns the new array of combined values.
         * @example
         *
         * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
         * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
         *
         * _.unionWith(objects, others, _.isEqual);
         * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
         */
        var unionWith = baseRest(function(arrays) {
          var comparator = last(arrays);
          comparator = typeof comparator == 'function' ? comparator : undefined$1;
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined$1, comparator);
        });

        /**
         * Creates a duplicate-free version of an array, using
         * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * for equality comparisons, in which only the first occurrence of each element
         * is kept. The order of result values is determined by the order they occur
         * in the array.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @returns {Array} Returns the new duplicate free array.
         * @example
         *
         * _.uniq([2, 1, 2]);
         * // => [2, 1]
         */
        function uniq(array) {
          return (array && array.length) ? baseUniq(array) : [];
        }

        /**
         * This method is like `_.uniq` except that it accepts `iteratee` which is
         * invoked for each element in `array` to generate the criterion by which
         * uniqueness is computed. The order of result values is determined by the
         * order they occur in the array. The iteratee is invoked with one argument:
         * (value).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {Array} Returns the new duplicate free array.
         * @example
         *
         * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
         * // => [2.1, 1.2]
         *
         * // The `_.property` iteratee shorthand.
         * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
         * // => [{ 'x': 1 }, { 'x': 2 }]
         */
        function uniqBy(array, iteratee) {
          return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
        }

        /**
         * This method is like `_.uniq` except that it accepts `comparator` which
         * is invoked to compare elements of `array`. The order of result values is
         * determined by the order they occur in the array.The comparator is invoked
         * with two arguments: (arrVal, othVal).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns the new duplicate free array.
         * @example
         *
         * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
         *
         * _.uniqWith(objects, _.isEqual);
         * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
         */
        function uniqWith(array, comparator) {
          comparator = typeof comparator == 'function' ? comparator : undefined$1;
          return (array && array.length) ? baseUniq(array, undefined$1, comparator) : [];
        }

        /**
         * This method is like `_.zip` except that it accepts an array of grouped
         * elements and creates an array regrouping the elements to their pre-zip
         * configuration.
         *
         * @static
         * @memberOf _
         * @since 1.2.0
         * @category Array
         * @param {Array} array The array of grouped elements to process.
         * @returns {Array} Returns the new array of regrouped elements.
         * @example
         *
         * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
         * // => [['a', 1, true], ['b', 2, false]]
         *
         * _.unzip(zipped);
         * // => [['a', 'b'], [1, 2], [true, false]]
         */
        function unzip(array) {
          if (!(array && array.length)) {
            return [];
          }
          var length = 0;
          array = arrayFilter(array, function(group) {
            if (isArrayLikeObject(group)) {
              length = nativeMax(group.length, length);
              return true;
            }
          });
          return baseTimes(length, function(index) {
            return arrayMap(array, baseProperty(index));
          });
        }

        /**
         * This method is like `_.unzip` except that it accepts `iteratee` to specify
         * how regrouped values should be combined. The iteratee is invoked with the
         * elements of each group: (...group).
         *
         * @static
         * @memberOf _
         * @since 3.8.0
         * @category Array
         * @param {Array} array The array of grouped elements to process.
         * @param {Function} [iteratee=_.identity] The function to combine
         *  regrouped values.
         * @returns {Array} Returns the new array of regrouped elements.
         * @example
         *
         * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
         * // => [[1, 10, 100], [2, 20, 200]]
         *
         * _.unzipWith(zipped, _.add);
         * // => [3, 30, 300]
         */
        function unzipWith(array, iteratee) {
          if (!(array && array.length)) {
            return [];
          }
          var result = unzip(array);
          if (iteratee == null) {
            return result;
          }
          return arrayMap(result, function(group) {
            return apply(iteratee, undefined$1, group);
          });
        }

        /**
         * Creates an array excluding all given values using
         * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * for equality comparisons.
         *
         * **Note:** Unlike `_.pull`, this method returns a new array.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {...*} [values] The values to exclude.
         * @returns {Array} Returns the new array of filtered values.
         * @see _.difference, _.xor
         * @example
         *
         * _.without([2, 1, 2, 3], 1, 2);
         * // => [3]
         */
        var without = baseRest(function(array, values) {
          return isArrayLikeObject(array)
            ? baseDifference(array, values)
            : [];
        });

        /**
         * Creates an array of unique values that is the
         * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
         * of the given arrays. The order of result values is determined by the order
         * they occur in the arrays.
         *
         * @static
         * @memberOf _
         * @since 2.4.0
         * @category Array
         * @param {...Array} [arrays] The arrays to inspect.
         * @returns {Array} Returns the new array of filtered values.
         * @see _.difference, _.without
         * @example
         *
         * _.xor([2, 1], [2, 3]);
         * // => [1, 3]
         */
        var xor = baseRest(function(arrays) {
          return baseXor(arrayFilter(arrays, isArrayLikeObject));
        });

        /**
         * This method is like `_.xor` except that it accepts `iteratee` which is
         * invoked for each element of each `arrays` to generate the criterion by
         * which by which they're compared. The order of result values is determined
         * by the order they occur in the arrays. The iteratee is invoked with one
         * argument: (value).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {...Array} [arrays] The arrays to inspect.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {Array} Returns the new array of filtered values.
         * @example
         *
         * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
         * // => [1.2, 3.4]
         *
         * // The `_.property` iteratee shorthand.
         * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
         * // => [{ 'x': 2 }]
         */
        var xorBy = baseRest(function(arrays) {
          var iteratee = last(arrays);
          if (isArrayLikeObject(iteratee)) {
            iteratee = undefined$1;
          }
          return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
        });

        /**
         * This method is like `_.xor` except that it accepts `comparator` which is
         * invoked to compare elements of `arrays`. The order of result values is
         * determined by the order they occur in the arrays. The comparator is invoked
         * with two arguments: (arrVal, othVal).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {...Array} [arrays] The arrays to inspect.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns the new array of filtered values.
         * @example
         *
         * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
         * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
         *
         * _.xorWith(objects, others, _.isEqual);
         * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
         */
        var xorWith = baseRest(function(arrays) {
          var comparator = last(arrays);
          comparator = typeof comparator == 'function' ? comparator : undefined$1;
          return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined$1, comparator);
        });

        /**
         * Creates an array of grouped elements, the first of which contains the
         * first elements of the given arrays, the second of which contains the
         * second elements of the given arrays, and so on.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {...Array} [arrays] The arrays to process.
         * @returns {Array} Returns the new array of grouped elements.
         * @example
         *
         * _.zip(['a', 'b'], [1, 2], [true, false]);
         * // => [['a', 1, true], ['b', 2, false]]
         */
        var zip = baseRest(unzip);

        /**
         * This method is like `_.fromPairs` except that it accepts two arrays,
         * one of property identifiers and one of corresponding values.
         *
         * @static
         * @memberOf _
         * @since 0.4.0
         * @category Array
         * @param {Array} [props=[]] The property identifiers.
         * @param {Array} [values=[]] The property values.
         * @returns {Object} Returns the new object.
         * @example
         *
         * _.zipObject(['a', 'b'], [1, 2]);
         * // => { 'a': 1, 'b': 2 }
         */
        function zipObject(props, values) {
          return baseZipObject(props || [], values || [], assignValue);
        }

        /**
         * This method is like `_.zipObject` except that it supports property paths.
         *
         * @static
         * @memberOf _
         * @since 4.1.0
         * @category Array
         * @param {Array} [props=[]] The property identifiers.
         * @param {Array} [values=[]] The property values.
         * @returns {Object} Returns the new object.
         * @example
         *
         * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
         * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
         */
        function zipObjectDeep(props, values) {
          return baseZipObject(props || [], values || [], baseSet);
        }

        /**
         * This method is like `_.zip` except that it accepts `iteratee` to specify
         * how grouped values should be combined. The iteratee is invoked with the
         * elements of each group: (...group).
         *
         * @static
         * @memberOf _
         * @since 3.8.0
         * @category Array
         * @param {...Array} [arrays] The arrays to process.
         * @param {Function} [iteratee=_.identity] The function to combine
         *  grouped values.
         * @returns {Array} Returns the new array of grouped elements.
         * @example
         *
         * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
         *   return a + b + c;
         * });
         * // => [111, 222]
         */
        var zipWith = baseRest(function(arrays) {
          var length = arrays.length,
              iteratee = length > 1 ? arrays[length - 1] : undefined$1;

          iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined$1;
          return unzipWith(arrays, iteratee);
        });

        /*------------------------------------------------------------------------*/

        /**
         * Creates a `lodash` wrapper instance that wraps `value` with explicit method
         * chain sequences enabled. The result of such sequences must be unwrapped
         * with `_#value`.
         *
         * @static
         * @memberOf _
         * @since 1.3.0
         * @category Seq
         * @param {*} value The value to wrap.
         * @returns {Object} Returns the new `lodash` wrapper instance.
         * @example
         *
         * var users = [
         *   { 'user': 'barney',  'age': 36 },
         *   { 'user': 'fred',    'age': 40 },
         *   { 'user': 'pebbles', 'age': 1 }
         * ];
         *
         * var youngest = _
         *   .chain(users)
         *   .sortBy('age')
         *   .map(function(o) {
         *     return o.user + ' is ' + o.age;
         *   })
         *   .head()
         *   .value();
         * // => 'pebbles is 1'
         */
        function chain(value) {
          var result = lodash(value);
          result.__chain__ = true;
          return result;
        }

        /**
         * This method invokes `interceptor` and returns `value`. The interceptor
         * is invoked with one argument; (value). The purpose of this method is to
         * "tap into" a method chain sequence in order to modify intermediate results.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Seq
         * @param {*} value The value to provide to `interceptor`.
         * @param {Function} interceptor The function to invoke.
         * @returns {*} Returns `value`.
         * @example
         *
         * _([1, 2, 3])
         *  .tap(function(array) {
         *    // Mutate input array.
         *    array.pop();
         *  })
         *  .reverse()
         *  .value();
         * // => [2, 1]
         */
        function tap(value, interceptor) {
          interceptor(value);
          return value;
        }

        /**
         * This method is like `_.tap` except that it returns the result of `interceptor`.
         * The purpose of this method is to "pass thru" values replacing intermediate
         * results in a method chain sequence.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Seq
         * @param {*} value The value to provide to `interceptor`.
         * @param {Function} interceptor The function to invoke.
         * @returns {*} Returns the result of `interceptor`.
         * @example
         *
         * _('  abc  ')
         *  .chain()
         *  .trim()
         *  .thru(function(value) {
         *    return [value];
         *  })
         *  .value();
         * // => ['abc']
         */
        function thru(value, interceptor) {
          return interceptor(value);
        }

        /**
         * This method is the wrapper version of `_.at`.
         *
         * @name at
         * @memberOf _
         * @since 1.0.0
         * @category Seq
         * @param {...(string|string[])} [paths] The property paths to pick.
         * @returns {Object} Returns the new `lodash` wrapper instance.
         * @example
         *
         * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
         *
         * _(object).at(['a[0].b.c', 'a[1]']).value();
         * // => [3, 4]
         */
        var wrapperAt = flatRest(function(paths) {
          var length = paths.length,
              start = length ? paths[0] : 0,
              value = this.__wrapped__,
              interceptor = function(object) { return baseAt(object, paths); };

          if (length > 1 || this.__actions__.length ||
              !(value instanceof LazyWrapper) || !isIndex(start)) {
            return this.thru(interceptor);
          }
          value = value.slice(start, +start + (length ? 1 : 0));
          value.__actions__.push({
            'func': thru,
            'args': [interceptor],
            'thisArg': undefined$1
          });
          return new LodashWrapper(value, this.__chain__).thru(function(array) {
            if (length && !array.length) {
              array.push(undefined$1);
            }
            return array;
          });
        });

        /**
         * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
         *
         * @name chain
         * @memberOf _
         * @since 0.1.0
         * @category Seq
         * @returns {Object} Returns the new `lodash` wrapper instance.
         * @example
         *
         * var users = [
         *   { 'user': 'barney', 'age': 36 },
         *   { 'user': 'fred',   'age': 40 }
         * ];
         *
         * // A sequence without explicit chaining.
         * _(users).head();
         * // => { 'user': 'barney', 'age': 36 }
         *
         * // A sequence with explicit chaining.
         * _(users)
         *   .chain()
         *   .head()
         *   .pick('user')
         *   .value();
         * // => { 'user': 'barney' }
         */
        function wrapperChain() {
          return chain(this);
        }

        /**
         * Executes the chain sequence and returns the wrapped result.
         *
         * @name commit
         * @memberOf _
         * @since 3.2.0
         * @category Seq
         * @returns {Object} Returns the new `lodash` wrapper instance.
         * @example
         *
         * var array = [1, 2];
         * var wrapped = _(array).push(3);
         *
         * console.log(array);
         * // => [1, 2]
         *
         * wrapped = wrapped.commit();
         * console.log(array);
         * // => [1, 2, 3]
         *
         * wrapped.last();
         * // => 3
         *
         * console.log(array);
         * // => [1, 2, 3]
         */
        function wrapperCommit() {
          return new LodashWrapper(this.value(), this.__chain__);
        }

        /**
         * Gets the next value on a wrapped object following the
         * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
         *
         * @name next
         * @memberOf _
         * @since 4.0.0
         * @category Seq
         * @returns {Object} Returns the next iterator value.
         * @example
         *
         * var wrapped = _([1, 2]);
         *
         * wrapped.next();
         * // => { 'done': false, 'value': 1 }
         *
         * wrapped.next();
         * // => { 'done': false, 'value': 2 }
         *
         * wrapped.next();
         * // => { 'done': true, 'value': undefined }
         */
        function wrapperNext() {
          if (this.__values__ === undefined$1) {
            this.__values__ = toArray(this.value());
          }
          var done = this.__index__ >= this.__values__.length,
              value = done ? undefined$1 : this.__values__[this.__index__++];

          return { 'done': done, 'value': value };
        }

        /**
         * Enables the wrapper to be iterable.
         *
         * @name Symbol.iterator
         * @memberOf _
         * @since 4.0.0
         * @category Seq
         * @returns {Object} Returns the wrapper object.
         * @example
         *
         * var wrapped = _([1, 2]);
         *
         * wrapped[Symbol.iterator]() === wrapped;
         * // => true
         *
         * Array.from(wrapped);
         * // => [1, 2]
         */
        function wrapperToIterator() {
          return this;
        }

        /**
         * Creates a clone of the chain sequence planting `value` as the wrapped value.
         *
         * @name plant
         * @memberOf _
         * @since 3.2.0
         * @category Seq
         * @param {*} value The value to plant.
         * @returns {Object} Returns the new `lodash` wrapper instance.
         * @example
         *
         * function square(n) {
         *   return n * n;
         * }
         *
         * var wrapped = _([1, 2]).map(square);
         * var other = wrapped.plant([3, 4]);
         *
         * other.value();
         * // => [9, 16]
         *
         * wrapped.value();
         * // => [1, 4]
         */
        function wrapperPlant(value) {
          var result,
              parent = this;

          while (parent instanceof baseLodash) {
            var clone = wrapperClone(parent);
            clone.__index__ = 0;
            clone.__values__ = undefined$1;
            if (result) {
              previous.__wrapped__ = clone;
            } else {
              result = clone;
            }
            var previous = clone;
            parent = parent.__wrapped__;
          }
          previous.__wrapped__ = value;
          return result;
        }

        /**
         * This method is the wrapper version of `_.reverse`.
         *
         * **Note:** This method mutates the wrapped array.
         *
         * @name reverse
         * @memberOf _
         * @since 0.1.0
         * @category Seq
         * @returns {Object} Returns the new `lodash` wrapper instance.
         * @example
         *
         * var array = [1, 2, 3];
         *
         * _(array).reverse().value()
         * // => [3, 2, 1]
         *
         * console.log(array);
         * // => [3, 2, 1]
         */
        function wrapperReverse() {
          var value = this.__wrapped__;
          if (value instanceof LazyWrapper) {
            var wrapped = value;
            if (this.__actions__.length) {
              wrapped = new LazyWrapper(this);
            }
            wrapped = wrapped.reverse();
            wrapped.__actions__.push({
              'func': thru,
              'args': [reverse],
              'thisArg': undefined$1
            });
            return new LodashWrapper(wrapped, this.__chain__);
          }
          return this.thru(reverse);
        }

        /**
         * Executes the chain sequence to resolve the unwrapped value.
         *
         * @name value
         * @memberOf _
         * @since 0.1.0
         * @alias toJSON, valueOf
         * @category Seq
         * @returns {*} Returns the resolved unwrapped value.
         * @example
         *
         * _([1, 2, 3]).value();
         * // => [1, 2, 3]
         */
        function wrapperValue() {
          return baseWrapperValue(this.__wrapped__, this.__actions__);
        }

        /*------------------------------------------------------------------------*/

        /**
         * Creates an object composed of keys generated from the results of running
         * each element of `collection` thru `iteratee`. The corresponding value of
         * each key is the number of times the key was returned by `iteratee`. The
         * iteratee is invoked with one argument: (value).
         *
         * @static
         * @memberOf _
         * @since 0.5.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
         * @returns {Object} Returns the composed aggregate object.
         * @example
         *
         * _.countBy([6.1, 4.2, 6.3], Math.floor);
         * // => { '4': 1, '6': 2 }
         *
         * // The `_.property` iteratee shorthand.
         * _.countBy(['one', 'two', 'three'], 'length');
         * // => { '3': 2, '5': 1 }
         */
        var countBy = createAggregator(function(result, value, key) {
          if (hasOwnProperty.call(result, key)) {
            ++result[key];
          } else {
            baseAssignValue(result, key, 1);
          }
        });

        /**
         * Checks if `predicate` returns truthy for **all** elements of `collection`.
         * Iteration is stopped once `predicate` returns falsey. The predicate is
         * invoked with three arguments: (value, index|key, collection).
         *
         * **Note:** This method returns `true` for
         * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
         * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
         * elements of empty collections.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {boolean} Returns `true` if all elements pass the predicate check,
         *  else `false`.
         * @example
         *
         * _.every([true, 1, null, 'yes'], Boolean);
         * // => false
         *
         * var users = [
         *   { 'user': 'barney', 'age': 36, 'active': false },
         *   { 'user': 'fred',   'age': 40, 'active': false }
         * ];
         *
         * // The `_.matches` iteratee shorthand.
         * _.every(users, { 'user': 'barney', 'active': false });
         * // => false
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.every(users, ['active', false]);
         * // => true
         *
         * // The `_.property` iteratee shorthand.
         * _.every(users, 'active');
         * // => false
         */
        function every(collection, predicate, guard) {
          var func = isArray(collection) ? arrayEvery : baseEvery;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined$1;
          }
          return func(collection, getIteratee(predicate, 3));
        }

        /**
         * Iterates over elements of `collection`, returning an array of all elements
         * `predicate` returns truthy for. The predicate is invoked with three
         * arguments: (value, index|key, collection).
         *
         * **Note:** Unlike `_.remove`, this method returns a new array.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the new filtered array.
         * @see _.reject
         * @example
         *
         * var users = [
         *   { 'user': 'barney', 'age': 36, 'active': true },
         *   { 'user': 'fred',   'age': 40, 'active': false }
         * ];
         *
         * _.filter(users, function(o) { return !o.active; });
         * // => objects for ['fred']
         *
         * // The `_.matches` iteratee shorthand.
         * _.filter(users, { 'age': 36, 'active': true });
         * // => objects for ['barney']
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.filter(users, ['active', false]);
         * // => objects for ['fred']
         *
         * // The `_.property` iteratee shorthand.
         * _.filter(users, 'active');
         * // => objects for ['barney']
         *
         * // Combining several predicates using `_.overEvery` or `_.overSome`.
         * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
         * // => objects for ['fred', 'barney']
         */
        function filter(collection, predicate) {
          var func = isArray(collection) ? arrayFilter : baseFilter;
          return func(collection, getIteratee(predicate, 3));
        }

        /**
         * Iterates over elements of `collection`, returning the first element
         * `predicate` returns truthy for. The predicate is invoked with three
         * arguments: (value, index|key, collection).
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object} collection The collection to inspect.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @param {number} [fromIndex=0] The index to search from.
         * @returns {*} Returns the matched element, else `undefined`.
         * @example
         *
         * var users = [
         *   { 'user': 'barney',  'age': 36, 'active': true },
         *   { 'user': 'fred',    'age': 40, 'active': false },
         *   { 'user': 'pebbles', 'age': 1,  'active': true }
         * ];
         *
         * _.find(users, function(o) { return o.age < 40; });
         * // => object for 'barney'
         *
         * // The `_.matches` iteratee shorthand.
         * _.find(users, { 'age': 1, 'active': true });
         * // => object for 'pebbles'
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.find(users, ['active', false]);
         * // => object for 'fred'
         *
         * // The `_.property` iteratee shorthand.
         * _.find(users, 'active');
         * // => object for 'barney'
         */
        var find = createFind(findIndex);

        /**
         * This method is like `_.find` except that it iterates over elements of
         * `collection` from right to left.
         *
         * @static
         * @memberOf _
         * @since 2.0.0
         * @category Collection
         * @param {Array|Object} collection The collection to inspect.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @param {number} [fromIndex=collection.length-1] The index to search from.
         * @returns {*} Returns the matched element, else `undefined`.
         * @example
         *
         * _.findLast([1, 2, 3, 4], function(n) {
         *   return n % 2 == 1;
         * });
         * // => 3
         */
        var findLast = createFind(findLastIndex);

        /**
         * Creates a flattened array of values by running each element in `collection`
         * thru `iteratee` and flattening the mapped results. The iteratee is invoked
         * with three arguments: (value, index|key, collection).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the new flattened array.
         * @example
         *
         * function duplicate(n) {
         *   return [n, n];
         * }
         *
         * _.flatMap([1, 2], duplicate);
         * // => [1, 1, 2, 2]
         */
        function flatMap(collection, iteratee) {
          return baseFlatten(map(collection, iteratee), 1);
        }

        /**
         * This method is like `_.flatMap` except that it recursively flattens the
         * mapped results.
         *
         * @static
         * @memberOf _
         * @since 4.7.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the new flattened array.
         * @example
         *
         * function duplicate(n) {
         *   return [[[n, n]]];
         * }
         *
         * _.flatMapDeep([1, 2], duplicate);
         * // => [1, 1, 2, 2]
         */
        function flatMapDeep(collection, iteratee) {
          return baseFlatten(map(collection, iteratee), INFINITY);
        }

        /**
         * This method is like `_.flatMap` except that it recursively flattens the
         * mapped results up to `depth` times.
         *
         * @static
         * @memberOf _
         * @since 4.7.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @param {number} [depth=1] The maximum recursion depth.
         * @returns {Array} Returns the new flattened array.
         * @example
         *
         * function duplicate(n) {
         *   return [[[n, n]]];
         * }
         *
         * _.flatMapDepth([1, 2], duplicate, 2);
         * // => [[1, 1], [2, 2]]
         */
        function flatMapDepth(collection, iteratee, depth) {
          depth = depth === undefined$1 ? 1 : toInteger(depth);
          return baseFlatten(map(collection, iteratee), depth);
        }

        /**
         * Iterates over elements of `collection` and invokes `iteratee` for each element.
         * The iteratee is invoked with three arguments: (value, index|key, collection).
         * Iteratee functions may exit iteration early by explicitly returning `false`.
         *
         * **Note:** As with other "Collections" methods, objects with a "length"
         * property are iterated like arrays. To avoid this behavior use `_.forIn`
         * or `_.forOwn` for object iteration.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @alias each
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Array|Object} Returns `collection`.
         * @see _.forEachRight
         * @example
         *
         * _.forEach([1, 2], function(value) {
         *   console.log(value);
         * });
         * // => Logs `1` then `2`.
         *
         * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
         *   console.log(key);
         * });
         * // => Logs 'a' then 'b' (iteration order is not guaranteed).
         */
        function forEach(collection, iteratee) {
          var func = isArray(collection) ? arrayEach : baseEach;
          return func(collection, getIteratee(iteratee, 3));
        }

        /**
         * This method is like `_.forEach` except that it iterates over elements of
         * `collection` from right to left.
         *
         * @static
         * @memberOf _
         * @since 2.0.0
         * @alias eachRight
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Array|Object} Returns `collection`.
         * @see _.forEach
         * @example
         *
         * _.forEachRight([1, 2], function(value) {
         *   console.log(value);
         * });
         * // => Logs `2` then `1`.
         */
        function forEachRight(collection, iteratee) {
          var func = isArray(collection) ? arrayEachRight : baseEachRight;
          return func(collection, getIteratee(iteratee, 3));
        }

        /**
         * Creates an object composed of keys generated from the results of running
         * each element of `collection` thru `iteratee`. The order of grouped values
         * is determined by the order they occur in `collection`. The corresponding
         * value of each key is an array of elements responsible for generating the
         * key. The iteratee is invoked with one argument: (value).
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
         * @returns {Object} Returns the composed aggregate object.
         * @example
         *
         * _.groupBy([6.1, 4.2, 6.3], Math.floor);
         * // => { '4': [4.2], '6': [6.1, 6.3] }
         *
         * // The `_.property` iteratee shorthand.
         * _.groupBy(['one', 'two', 'three'], 'length');
         * // => { '3': ['one', 'two'], '5': ['three'] }
         */
        var groupBy = createAggregator(function(result, value, key) {
          if (hasOwnProperty.call(result, key)) {
            result[key].push(value);
          } else {
            baseAssignValue(result, key, [value]);
          }
        });

        /**
         * Checks if `value` is in `collection`. If `collection` is a string, it's
         * checked for a substring of `value`, otherwise
         * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * is used for equality comparisons. If `fromIndex` is negative, it's used as
         * the offset from the end of `collection`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object|string} collection The collection to inspect.
         * @param {*} value The value to search for.
         * @param {number} [fromIndex=0] The index to search from.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
         * @returns {boolean} Returns `true` if `value` is found, else `false`.
         * @example
         *
         * _.includes([1, 2, 3], 1);
         * // => true
         *
         * _.includes([1, 2, 3], 1, 2);
         * // => false
         *
         * _.includes({ 'a': 1, 'b': 2 }, 1);
         * // => true
         *
         * _.includes('abcd', 'bc');
         * // => true
         */
        function includes(collection, value, fromIndex, guard) {
          collection = isArrayLike(collection) ? collection : values(collection);
          fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

          var length = collection.length;
          if (fromIndex < 0) {
            fromIndex = nativeMax(length + fromIndex, 0);
          }
          return isString(collection)
            ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
            : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
        }

        /**
         * Invokes the method at `path` of each element in `collection`, returning
         * an array of the results of each invoked method. Any additional arguments
         * are provided to each invoked method. If `path` is a function, it's invoked
         * for, and `this` bound to, each element in `collection`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Array|Function|string} path The path of the method to invoke or
         *  the function invoked per iteration.
         * @param {...*} [args] The arguments to invoke each method with.
         * @returns {Array} Returns the array of results.
         * @example
         *
         * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
         * // => [[1, 5, 7], [1, 2, 3]]
         *
         * _.invokeMap([123, 456], String.prototype.split, '');
         * // => [['1', '2', '3'], ['4', '5', '6']]
         */
        var invokeMap = baseRest(function(collection, path, args) {
          var index = -1,
              isFunc = typeof path == 'function',
              result = isArrayLike(collection) ? Array(collection.length) : [];

          baseEach(collection, function(value) {
            result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
          });
          return result;
        });

        /**
         * Creates an object composed of keys generated from the results of running
         * each element of `collection` thru `iteratee`. The corresponding value of
         * each key is the last element responsible for generating the key. The
         * iteratee is invoked with one argument: (value).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
         * @returns {Object} Returns the composed aggregate object.
         * @example
         *
         * var array = [
         *   { 'dir': 'left', 'code': 97 },
         *   { 'dir': 'right', 'code': 100 }
         * ];
         *
         * _.keyBy(array, function(o) {
         *   return String.fromCharCode(o.code);
         * });
         * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
         *
         * _.keyBy(array, 'dir');
         * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
         */
        var keyBy = createAggregator(function(result, value, key) {
          baseAssignValue(result, key, value);
        });

        /**
         * Creates an array of values by running each element in `collection` thru
         * `iteratee`. The iteratee is invoked with three arguments:
         * (value, index|key, collection).
         *
         * Many lodash methods are guarded to work as iteratees for methods like
         * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
         *
         * The guarded methods are:
         * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
         * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
         * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
         * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the new mapped array.
         * @example
         *
         * function square(n) {
         *   return n * n;
         * }
         *
         * _.map([4, 8], square);
         * // => [16, 64]
         *
         * _.map({ 'a': 4, 'b': 8 }, square);
         * // => [16, 64] (iteration order is not guaranteed)
         *
         * var users = [
         *   { 'user': 'barney' },
         *   { 'user': 'fred' }
         * ];
         *
         * // The `_.property` iteratee shorthand.
         * _.map(users, 'user');
         * // => ['barney', 'fred']
         */
        function map(collection, iteratee) {
          var func = isArray(collection) ? arrayMap : baseMap;
          return func(collection, getIteratee(iteratee, 3));
        }

        /**
         * This method is like `_.sortBy` except that it allows specifying the sort
         * orders of the iteratees to sort by. If `orders` is unspecified, all values
         * are sorted in ascending order. Otherwise, specify an order of "desc" for
         * descending or "asc" for ascending sort order of corresponding values.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
         *  The iteratees to sort by.
         * @param {string[]} [orders] The sort orders of `iteratees`.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
         * @returns {Array} Returns the new sorted array.
         * @example
         *
         * var users = [
         *   { 'user': 'fred',   'age': 48 },
         *   { 'user': 'barney', 'age': 34 },
         *   { 'user': 'fred',   'age': 40 },
         *   { 'user': 'barney', 'age': 36 }
         * ];
         *
         * // Sort by `user` in ascending order and by `age` in descending order.
         * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
         * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
         */
        function orderBy(collection, iteratees, orders, guard) {
          if (collection == null) {
            return [];
          }
          if (!isArray(iteratees)) {
            iteratees = iteratees == null ? [] : [iteratees];
          }
          orders = guard ? undefined$1 : orders;
          if (!isArray(orders)) {
            orders = orders == null ? [] : [orders];
          }
          return baseOrderBy(collection, iteratees, orders);
        }

        /**
         * Creates an array of elements split into two groups, the first of which
         * contains elements `predicate` returns truthy for, the second of which
         * contains elements `predicate` returns falsey for. The predicate is
         * invoked with one argument: (value).
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the array of grouped elements.
         * @example
         *
         * var users = [
         *   { 'user': 'barney',  'age': 36, 'active': false },
         *   { 'user': 'fred',    'age': 40, 'active': true },
         *   { 'user': 'pebbles', 'age': 1,  'active': false }
         * ];
         *
         * _.partition(users, function(o) { return o.active; });
         * // => objects for [['fred'], ['barney', 'pebbles']]
         *
         * // The `_.matches` iteratee shorthand.
         * _.partition(users, { 'age': 1, 'active': false });
         * // => objects for [['pebbles'], ['barney', 'fred']]
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.partition(users, ['active', false]);
         * // => objects for [['barney', 'pebbles'], ['fred']]
         *
         * // The `_.property` iteratee shorthand.
         * _.partition(users, 'active');
         * // => objects for [['fred'], ['barney', 'pebbles']]
         */
        var partition = createAggregator(function(result, value, key) {
          result[key ? 0 : 1].push(value);
        }, function() { return [[], []]; });

        /**
         * Reduces `collection` to a value which is the accumulated result of running
         * each element in `collection` thru `iteratee`, where each successive
         * invocation is supplied the return value of the previous. If `accumulator`
         * is not given, the first element of `collection` is used as the initial
         * value. The iteratee is invoked with four arguments:
         * (accumulator, value, index|key, collection).
         *
         * Many lodash methods are guarded to work as iteratees for methods like
         * `_.reduce`, `_.reduceRight`, and `_.transform`.
         *
         * The guarded methods are:
         * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
         * and `sortBy`
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @param {*} [accumulator] The initial value.
         * @returns {*} Returns the accumulated value.
         * @see _.reduceRight
         * @example
         *
         * _.reduce([1, 2], function(sum, n) {
         *   return sum + n;
         * }, 0);
         * // => 3
         *
         * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
         *   (result[value] || (result[value] = [])).push(key);
         *   return result;
         * }, {});
         * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
         */
        function reduce(collection, iteratee, accumulator) {
          var func = isArray(collection) ? arrayReduce : baseReduce,
              initAccum = arguments.length < 3;

          return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
        }

        /**
         * This method is like `_.reduce` except that it iterates over elements of
         * `collection` from right to left.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @param {*} [accumulator] The initial value.
         * @returns {*} Returns the accumulated value.
         * @see _.reduce
         * @example
         *
         * var array = [[0, 1], [2, 3], [4, 5]];
         *
         * _.reduceRight(array, function(flattened, other) {
         *   return flattened.concat(other);
         * }, []);
         * // => [4, 5, 2, 3, 0, 1]
         */
        function reduceRight(collection, iteratee, accumulator) {
          var func = isArray(collection) ? arrayReduceRight : baseReduce,
              initAccum = arguments.length < 3;

          return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
        }

        /**
         * The opposite of `_.filter`; this method returns the elements of `collection`
         * that `predicate` does **not** return truthy for.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the new filtered array.
         * @see _.filter
         * @example
         *
         * var users = [
         *   { 'user': 'barney', 'age': 36, 'active': false },
         *   { 'user': 'fred',   'age': 40, 'active': true }
         * ];
         *
         * _.reject(users, function(o) { return !o.active; });
         * // => objects for ['fred']
         *
         * // The `_.matches` iteratee shorthand.
         * _.reject(users, { 'age': 40, 'active': true });
         * // => objects for ['barney']
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.reject(users, ['active', false]);
         * // => objects for ['fred']
         *
         * // The `_.property` iteratee shorthand.
         * _.reject(users, 'active');
         * // => objects for ['barney']
         */
        function reject(collection, predicate) {
          var func = isArray(collection) ? arrayFilter : baseFilter;
          return func(collection, negate(getIteratee(predicate, 3)));
        }

        /**
         * Gets a random element from `collection`.
         *
         * @static
         * @memberOf _
         * @since 2.0.0
         * @category Collection
         * @param {Array|Object} collection The collection to sample.
         * @returns {*} Returns the random element.
         * @example
         *
         * _.sample([1, 2, 3, 4]);
         * // => 2
         */
        function sample(collection) {
          var func = isArray(collection) ? arraySample : baseSample;
          return func(collection);
        }

        /**
         * Gets `n` random elements at unique keys from `collection` up to the
         * size of `collection`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Collection
         * @param {Array|Object} collection The collection to sample.
         * @param {number} [n=1] The number of elements to sample.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {Array} Returns the random elements.
         * @example
         *
         * _.sampleSize([1, 2, 3], 2);
         * // => [3, 1]
         *
         * _.sampleSize([1, 2, 3], 4);
         * // => [2, 3, 1]
         */
        function sampleSize(collection, n, guard) {
          if ((guard ? isIterateeCall(collection, n, guard) : n === undefined$1)) {
            n = 1;
          } else {
            n = toInteger(n);
          }
          var func = isArray(collection) ? arraySampleSize : baseSampleSize;
          return func(collection, n);
        }

        /**
         * Creates an array of shuffled values, using a version of the
         * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object} collection The collection to shuffle.
         * @returns {Array} Returns the new shuffled array.
         * @example
         *
         * _.shuffle([1, 2, 3, 4]);
         * // => [4, 1, 3, 2]
         */
        function shuffle(collection) {
          var func = isArray(collection) ? arrayShuffle : baseShuffle;
          return func(collection);
        }

        /**
         * Gets the size of `collection` by returning its length for array-like
         * values or the number of own enumerable string keyed properties for objects.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object|string} collection The collection to inspect.
         * @returns {number} Returns the collection size.
         * @example
         *
         * _.size([1, 2, 3]);
         * // => 3
         *
         * _.size({ 'a': 1, 'b': 2 });
         * // => 2
         *
         * _.size('pebbles');
         * // => 7
         */
        function size(collection) {
          if (collection == null) {
            return 0;
          }
          if (isArrayLike(collection)) {
            return isString(collection) ? stringSize(collection) : collection.length;
          }
          var tag = getTag(collection);
          if (tag == mapTag || tag == setTag) {
            return collection.size;
          }
          return baseKeys(collection).length;
        }

        /**
         * Checks if `predicate` returns truthy for **any** element of `collection`.
         * Iteration is stopped once `predicate` returns truthy. The predicate is
         * invoked with three arguments: (value, index|key, collection).
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {boolean} Returns `true` if any element passes the predicate check,
         *  else `false`.
         * @example
         *
         * _.some([null, 0, 'yes', false], Boolean);
         * // => true
         *
         * var users = [
         *   { 'user': 'barney', 'active': true },
         *   { 'user': 'fred',   'active': false }
         * ];
         *
         * // The `_.matches` iteratee shorthand.
         * _.some(users, { 'user': 'barney', 'active': false });
         * // => false
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.some(users, ['active', false]);
         * // => true
         *
         * // The `_.property` iteratee shorthand.
         * _.some(users, 'active');
         * // => true
         */
        function some(collection, predicate, guard) {
          var func = isArray(collection) ? arraySome : baseSome;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined$1;
          }
          return func(collection, getIteratee(predicate, 3));
        }

        /**
         * Creates an array of elements, sorted in ascending order by the results of
         * running each element in a collection thru each iteratee. This method
         * performs a stable sort, that is, it preserves the original sort order of
         * equal elements. The iteratees are invoked with one argument: (value).
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {...(Function|Function[])} [iteratees=[_.identity]]
         *  The iteratees to sort by.
         * @returns {Array} Returns the new sorted array.
         * @example
         *
         * var users = [
         *   { 'user': 'fred',   'age': 48 },
         *   { 'user': 'barney', 'age': 36 },
         *   { 'user': 'fred',   'age': 30 },
         *   { 'user': 'barney', 'age': 34 }
         * ];
         *
         * _.sortBy(users, [function(o) { return o.user; }]);
         * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
         *
         * _.sortBy(users, ['user', 'age']);
         * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
         */
        var sortBy = baseRest(function(collection, iteratees) {
          if (collection == null) {
            return [];
          }
          var length = iteratees.length;
          if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
            iteratees = [];
          } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
            iteratees = [iteratees[0]];
          }
          return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
        });

        /*------------------------------------------------------------------------*/

        /**
         * Gets the timestamp of the number of milliseconds that have elapsed since
         * the Unix epoch (1 January 1970 00:00:00 UTC).
         *
         * @static
         * @memberOf _
         * @since 2.4.0
         * @category Date
         * @returns {number} Returns the timestamp.
         * @example
         *
         * _.defer(function(stamp) {
         *   console.log(_.now() - stamp);
         * }, _.now());
         * // => Logs the number of milliseconds it took for the deferred invocation.
         */
        var now = ctxNow || function() {
          return root.Date.now();
        };

        /*------------------------------------------------------------------------*/

        /**
         * The opposite of `_.before`; this method creates a function that invokes
         * `func` once it's called `n` or more times.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Function
         * @param {number} n The number of calls before `func` is invoked.
         * @param {Function} func The function to restrict.
         * @returns {Function} Returns the new restricted function.
         * @example
         *
         * var saves = ['profile', 'settings'];
         *
         * var done = _.after(saves.length, function() {
         *   console.log('done saving!');
         * });
         *
         * _.forEach(saves, function(type) {
         *   asyncSave({ 'type': type, 'complete': done });
         * });
         * // => Logs 'done saving!' after the two async saves have completed.
         */
        function after(n, func) {
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          n = toInteger(n);
          return function() {
            if (--n < 1) {
              return func.apply(this, arguments);
            }
          };
        }

        /**
         * Creates a function that invokes `func`, with up to `n` arguments,
         * ignoring any additional arguments.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Function
         * @param {Function} func The function to cap arguments for.
         * @param {number} [n=func.length] The arity cap.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {Function} Returns the new capped function.
         * @example
         *
         * _.map(['6', '8', '10'], _.ary(parseInt, 1));
         * // => [6, 8, 10]
         */
        function ary(func, n, guard) {
          n = guard ? undefined$1 : n;
          n = (func && n == null) ? func.length : n;
          return createWrap(func, WRAP_ARY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, n);
        }

        /**
         * Creates a function that invokes `func`, with the `this` binding and arguments
         * of the created function, while it's called less than `n` times. Subsequent
         * calls to the created function return the result of the last `func` invocation.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Function
         * @param {number} n The number of calls at which `func` is no longer invoked.
         * @param {Function} func The function to restrict.
         * @returns {Function} Returns the new restricted function.
         * @example
         *
         * jQuery(element).on('click', _.before(5, addContactToList));
         * // => Allows adding up to 4 contacts to the list.
         */
        function before(n, func) {
          var result;
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          n = toInteger(n);
          return function() {
            if (--n > 0) {
              result = func.apply(this, arguments);
            }
            if (n <= 1) {
              func = undefined$1;
            }
            return result;
          };
        }

        /**
         * Creates a function that invokes `func` with the `this` binding of `thisArg`
         * and `partials` prepended to the arguments it receives.
         *
         * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
         * may be used as a placeholder for partially applied arguments.
         *
         * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
         * property of bound functions.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Function
         * @param {Function} func The function to bind.
         * @param {*} thisArg The `this` binding of `func`.
         * @param {...*} [partials] The arguments to be partially applied.
         * @returns {Function} Returns the new bound function.
         * @example
         *
         * function greet(greeting, punctuation) {
         *   return greeting + ' ' + this.user + punctuation;
         * }
         *
         * var object = { 'user': 'fred' };
         *
         * var bound = _.bind(greet, object, 'hi');
         * bound('!');
         * // => 'hi fred!'
         *
         * // Bound with placeholders.
         * var bound = _.bind(greet, object, _, '!');
         * bound('hi');
         * // => 'hi fred!'
         */
        var bind = baseRest(function(func, thisArg, partials) {
          var bitmask = WRAP_BIND_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bind));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(func, bitmask, thisArg, partials, holders);
        });

        /**
         * Creates a function that invokes the method at `object[key]` with `partials`
         * prepended to the arguments it receives.
         *
         * This method differs from `_.bind` by allowing bound functions to reference
         * methods that may be redefined or don't yet exist. See
         * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
         * for more details.
         *
         * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
         * builds, may be used as a placeholder for partially applied arguments.
         *
         * @static
         * @memberOf _
         * @since 0.10.0
         * @category Function
         * @param {Object} object The object to invoke the method on.
         * @param {string} key The key of the method.
         * @param {...*} [partials] The arguments to be partially applied.
         * @returns {Function} Returns the new bound function.
         * @example
         *
         * var object = {
         *   'user': 'fred',
         *   'greet': function(greeting, punctuation) {
         *     return greeting + ' ' + this.user + punctuation;
         *   }
         * };
         *
         * var bound = _.bindKey(object, 'greet', 'hi');
         * bound('!');
         * // => 'hi fred!'
         *
         * object.greet = function(greeting, punctuation) {
         *   return greeting + 'ya ' + this.user + punctuation;
         * };
         *
         * bound('!');
         * // => 'hiya fred!'
         *
         * // Bound with placeholders.
         * var bound = _.bindKey(object, 'greet', _, '!');
         * bound('hi');
         * // => 'hiya fred!'
         */
        var bindKey = baseRest(function(object, key, partials) {
          var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bindKey));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(key, bitmask, object, partials, holders);
        });

        /**
         * Creates a function that accepts arguments of `func` and either invokes
         * `func` returning its result, if at least `arity` number of arguments have
         * been provided, or returns a function that accepts the remaining `func`
         * arguments, and so on. The arity of `func` may be specified if `func.length`
         * is not sufficient.
         *
         * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
         * may be used as a placeholder for provided arguments.
         *
         * **Note:** This method doesn't set the "length" property of curried functions.
         *
         * @static
         * @memberOf _
         * @since 2.0.0
         * @category Function
         * @param {Function} func The function to curry.
         * @param {number} [arity=func.length] The arity of `func`.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {Function} Returns the new curried function.
         * @example
         *
         * var abc = function(a, b, c) {
         *   return [a, b, c];
         * };
         *
         * var curried = _.curry(abc);
         *
         * curried(1)(2)(3);
         * // => [1, 2, 3]
         *
         * curried(1, 2)(3);
         * // => [1, 2, 3]
         *
         * curried(1, 2, 3);
         * // => [1, 2, 3]
         *
         * // Curried with placeholders.
         * curried(1)(_, 3)(2);
         * // => [1, 2, 3]
         */
        function curry(func, arity, guard) {
          arity = guard ? undefined$1 : arity;
          var result = createWrap(func, WRAP_CURRY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
          result.placeholder = curry.placeholder;
          return result;
        }

        /**
         * This method is like `_.curry` except that arguments are applied to `func`
         * in the manner of `_.partialRight` instead of `_.partial`.
         *
         * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
         * builds, may be used as a placeholder for provided arguments.
         *
         * **Note:** This method doesn't set the "length" property of curried functions.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Function
         * @param {Function} func The function to curry.
         * @param {number} [arity=func.length] The arity of `func`.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {Function} Returns the new curried function.
         * @example
         *
         * var abc = function(a, b, c) {
         *   return [a, b, c];
         * };
         *
         * var curried = _.curryRight(abc);
         *
         * curried(3)(2)(1);
         * // => [1, 2, 3]
         *
         * curried(2, 3)(1);
         * // => [1, 2, 3]
         *
         * curried(1, 2, 3);
         * // => [1, 2, 3]
         *
         * // Curried with placeholders.
         * curried(3)(1, _)(2);
         * // => [1, 2, 3]
         */
        function curryRight(func, arity, guard) {
          arity = guard ? undefined$1 : arity;
          var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
          result.placeholder = curryRight.placeholder;
          return result;
        }

        /**
         * Creates a debounced function that delays invoking `func` until after `wait`
         * milliseconds have elapsed since the last time the debounced function was
         * invoked. The debounced function comes with a `cancel` method to cancel
         * delayed `func` invocations and a `flush` method to immediately invoke them.
         * Provide `options` to indicate whether `func` should be invoked on the
         * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
         * with the last arguments provided to the debounced function. Subsequent
         * calls to the debounced function return the result of the last `func`
         * invocation.
         *
         * **Note:** If `leading` and `trailing` options are `true`, `func` is
         * invoked on the trailing edge of the timeout only if the debounced function
         * is invoked more than once during the `wait` timeout.
         *
         * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
         * until to the next tick, similar to `setTimeout` with a timeout of `0`.
         *
         * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
         * for details over the differences between `_.debounce` and `_.throttle`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Function
         * @param {Function} func The function to debounce.
         * @param {number} [wait=0] The number of milliseconds to delay.
         * @param {Object} [options={}] The options object.
         * @param {boolean} [options.leading=false]
         *  Specify invoking on the leading edge of the timeout.
         * @param {number} [options.maxWait]
         *  The maximum time `func` is allowed to be delayed before it's invoked.
         * @param {boolean} [options.trailing=true]
         *  Specify invoking on the trailing edge of the timeout.
         * @returns {Function} Returns the new debounced function.
         * @example
         *
         * // Avoid costly calculations while the window size is in flux.
         * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
         *
         * // Invoke `sendMail` when clicked, debouncing subsequent calls.
         * jQuery(element).on('click', _.debounce(sendMail, 300, {
         *   'leading': true,
         *   'trailing': false
         * }));
         *
         * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
         * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
         * var source = new EventSource('/stream');
         * jQuery(source).on('message', debounced);
         *
         * // Cancel the trailing debounced invocation.
         * jQuery(window).on('popstate', debounced.cancel);
         */
        function debounce(func, wait, options) {
          var lastArgs,
              lastThis,
              maxWait,
              result,
              timerId,
              lastCallTime,
              lastInvokeTime = 0,
              leading = false,
              maxing = false,
              trailing = true;

          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          wait = toNumber(wait) || 0;
          if (isObject(options)) {
            leading = !!options.leading;
            maxing = 'maxWait' in options;
            maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
            trailing = 'trailing' in options ? !!options.trailing : trailing;
          }

          function invokeFunc(time) {
            var args = lastArgs,
                thisArg = lastThis;

            lastArgs = lastThis = undefined$1;
            lastInvokeTime = time;
            result = func.apply(thisArg, args);
            return result;
          }

          function leadingEdge(time) {
            // Reset any `maxWait` timer.
            lastInvokeTime = time;
            // Start the timer for the trailing edge.
            timerId = setTimeout(timerExpired, wait);
            // Invoke the leading edge.
            return leading ? invokeFunc(time) : result;
          }

          function remainingWait(time) {
            var timeSinceLastCall = time - lastCallTime,
                timeSinceLastInvoke = time - lastInvokeTime,
                timeWaiting = wait - timeSinceLastCall;

            return maxing
              ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
              : timeWaiting;
          }

          function shouldInvoke(time) {
            var timeSinceLastCall = time - lastCallTime,
                timeSinceLastInvoke = time - lastInvokeTime;

            // Either this is the first call, activity has stopped and we're at the
            // trailing edge, the system time has gone backwards and we're treating
            // it as the trailing edge, or we've hit the `maxWait` limit.
            return (lastCallTime === undefined$1 || (timeSinceLastCall >= wait) ||
              (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
          }

          function timerExpired() {
            var time = now();
            if (shouldInvoke(time)) {
              return trailingEdge(time);
            }
            // Restart the timer.
            timerId = setTimeout(timerExpired, remainingWait(time));
          }

          function trailingEdge(time) {
            timerId = undefined$1;

            // Only invoke if we have `lastArgs` which means `func` has been
            // debounced at least once.
            if (trailing && lastArgs) {
              return invokeFunc(time);
            }
            lastArgs = lastThis = undefined$1;
            return result;
          }

          function cancel() {
            if (timerId !== undefined$1) {
              clearTimeout(timerId);
            }
            lastInvokeTime = 0;
            lastArgs = lastCallTime = lastThis = timerId = undefined$1;
          }

          function flush() {
            return timerId === undefined$1 ? result : trailingEdge(now());
          }

          function debounced() {
            var time = now(),
                isInvoking = shouldInvoke(time);

            lastArgs = arguments;
            lastThis = this;
            lastCallTime = time;

            if (isInvoking) {
              if (timerId === undefined$1) {
                return leadingEdge(lastCallTime);
              }
              if (maxing) {
                // Handle invocations in a tight loop.
                clearTimeout(timerId);
                timerId = setTimeout(timerExpired, wait);
                return invokeFunc(lastCallTime);
              }
            }
            if (timerId === undefined$1) {
              timerId = setTimeout(timerExpired, wait);
            }
            return result;
          }
          debounced.cancel = cancel;
          debounced.flush = flush;
          return debounced;
        }

        /**
         * Defers invoking the `func` until the current call stack has cleared. Any
         * additional arguments are provided to `func` when it's invoked.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Function
         * @param {Function} func The function to defer.
         * @param {...*} [args] The arguments to invoke `func` with.
         * @returns {number} Returns the timer id.
         * @example
         *
         * _.defer(function(text) {
         *   console.log(text);
         * }, 'deferred');
         * // => Logs 'deferred' after one millisecond.
         */
        var defer = baseRest(function(func, args) {
          return baseDelay(func, 1, args);
        });

        /**
         * Invokes `func` after `wait` milliseconds. Any additional arguments are
         * provided to `func` when it's invoked.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Function
         * @param {Function} func The function to delay.
         * @param {number} wait The number of milliseconds to delay invocation.
         * @param {...*} [args] The arguments to invoke `func` with.
         * @returns {number} Returns the timer id.
         * @example
         *
         * _.delay(function(text) {
         *   console.log(text);
         * }, 1000, 'later');
         * // => Logs 'later' after one second.
         */
        var delay = baseRest(function(func, wait, args) {
          return baseDelay(func, toNumber(wait) || 0, args);
        });

        /**
         * Creates a function that invokes `func` with arguments reversed.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Function
         * @param {Function} func The function to flip arguments for.
         * @returns {Function} Returns the new flipped function.
         * @example
         *
         * var flipped = _.flip(function() {
         *   return _.toArray(arguments);
         * });
         *
         * flipped('a', 'b', 'c', 'd');
         * // => ['d', 'c', 'b', 'a']
         */
        function flip(func) {
          return createWrap(func, WRAP_FLIP_FLAG);
        }

        /**
         * Creates a function that memoizes the result of `func`. If `resolver` is
         * provided, it determines the cache key for storing the result based on the
         * arguments provided to the memoized function. By default, the first argument
         * provided to the memoized function is used as the map cache key. The `func`
         * is invoked with the `this` binding of the memoized function.
         *
         * **Note:** The cache is exposed as the `cache` property on the memoized
         * function. Its creation may be customized by replacing the `_.memoize.Cache`
         * constructor with one whose instances implement the
         * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
         * method interface of `clear`, `delete`, `get`, `has`, and `set`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Function
         * @param {Function} func The function to have its output memoized.
         * @param {Function} [resolver] The function to resolve the cache key.
         * @returns {Function} Returns the new memoized function.
         * @example
         *
         * var object = { 'a': 1, 'b': 2 };
         * var other = { 'c': 3, 'd': 4 };
         *
         * var values = _.memoize(_.values);
         * values(object);
         * // => [1, 2]
         *
         * values(other);
         * // => [3, 4]
         *
         * object.a = 2;
         * values(object);
         * // => [1, 2]
         *
         * // Modify the result cache.
         * values.cache.set(object, ['a', 'b']);
         * values(object);
         * // => ['a', 'b']
         *
         * // Replace `_.memoize.Cache`.
         * _.memoize.Cache = WeakMap;
         */
        function memoize(func, resolver) {
          if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          var memoized = function() {
            var args = arguments,
                key = resolver ? resolver.apply(this, args) : args[0],
                cache = memoized.cache;

            if (cache.has(key)) {
              return cache.get(key);
            }
            var result = func.apply(this, args);
            memoized.cache = cache.set(key, result) || cache;
            return result;
          };
          memoized.cache = new (memoize.Cache || MapCache);
          return memoized;
        }

        // Expose `MapCache`.
        memoize.Cache = MapCache;

        /**
         * Creates a function that negates the result of the predicate `func`. The
         * `func` predicate is invoked with the `this` binding and arguments of the
         * created function.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Function
         * @param {Function} predicate The predicate to negate.
         * @returns {Function} Returns the new negated function.
         * @example
         *
         * function isEven(n) {
         *   return n % 2 == 0;
         * }
         *
         * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
         * // => [1, 3, 5]
         */
        function negate(predicate) {
          if (typeof predicate != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          return function() {
            var args = arguments;
            switch (args.length) {
              case 0: return !predicate.call(this);
              case 1: return !predicate.call(this, args[0]);
              case 2: return !predicate.call(this, args[0], args[1]);
              case 3: return !predicate.call(this, args[0], args[1], args[2]);
            }
            return !predicate.apply(this, args);
          };
        }

        /**
         * Creates a function that is restricted to invoking `func` once. Repeat calls
         * to the function return the value of the first invocation. The `func` is
         * invoked with the `this` binding and arguments of the created function.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Function
         * @param {Function} func The function to restrict.
         * @returns {Function} Returns the new restricted function.
         * @example
         *
         * var initialize = _.once(createApplication);
         * initialize();
         * initialize();
         * // => `createApplication` is invoked once
         */
        function once(func) {
          return before(2, func);
        }

        /**
         * Creates a function that invokes `func` with its arguments transformed.
         *
         * @static
         * @since 4.0.0
         * @memberOf _
         * @category Function
         * @param {Function} func The function to wrap.
         * @param {...(Function|Function[])} [transforms=[_.identity]]
         *  The argument transforms.
         * @returns {Function} Returns the new function.
         * @example
         *
         * function doubled(n) {
         *   return n * 2;
         * }
         *
         * function square(n) {
         *   return n * n;
         * }
         *
         * var func = _.overArgs(function(x, y) {
         *   return [x, y];
         * }, [square, doubled]);
         *
         * func(9, 3);
         * // => [81, 6]
         *
         * func(10, 5);
         * // => [100, 10]
         */
        var overArgs = castRest(function(func, transforms) {
          transforms = (transforms.length == 1 && isArray(transforms[0]))
            ? arrayMap(transforms[0], baseUnary(getIteratee()))
            : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

          var funcsLength = transforms.length;
          return baseRest(function(args) {
            var index = -1,
                length = nativeMin(args.length, funcsLength);

            while (++index < length) {
              args[index] = transforms[index].call(this, args[index]);
            }
            return apply(func, this, args);
          });
        });

        /**
         * Creates a function that invokes `func` with `partials` prepended to the
         * arguments it receives. This method is like `_.bind` except it does **not**
         * alter the `this` binding.
         *
         * The `_.partial.placeholder` value, which defaults to `_` in monolithic
         * builds, may be used as a placeholder for partially applied arguments.
         *
         * **Note:** This method doesn't set the "length" property of partially
         * applied functions.
         *
         * @static
         * @memberOf _
         * @since 0.2.0
         * @category Function
         * @param {Function} func The function to partially apply arguments to.
         * @param {...*} [partials] The arguments to be partially applied.
         * @returns {Function} Returns the new partially applied function.
         * @example
         *
         * function greet(greeting, name) {
         *   return greeting + ' ' + name;
         * }
         *
         * var sayHelloTo = _.partial(greet, 'hello');
         * sayHelloTo('fred');
         * // => 'hello fred'
         *
         * // Partially applied with placeholders.
         * var greetFred = _.partial(greet, _, 'fred');
         * greetFred('hi');
         * // => 'hi fred'
         */
        var partial = baseRest(function(func, partials) {
          var holders = replaceHolders(partials, getHolder(partial));
          return createWrap(func, WRAP_PARTIAL_FLAG, undefined$1, partials, holders);
        });

        /**
         * This method is like `_.partial` except that partially applied arguments
         * are appended to the arguments it receives.
         *
         * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
         * builds, may be used as a placeholder for partially applied arguments.
         *
         * **Note:** This method doesn't set the "length" property of partially
         * applied functions.
         *
         * @static
         * @memberOf _
         * @since 1.0.0
         * @category Function
         * @param {Function} func The function to partially apply arguments to.
         * @param {...*} [partials] The arguments to be partially applied.
         * @returns {Function} Returns the new partially applied function.
         * @example
         *
         * function greet(greeting, name) {
         *   return greeting + ' ' + name;
         * }
         *
         * var greetFred = _.partialRight(greet, 'fred');
         * greetFred('hi');
         * // => 'hi fred'
         *
         * // Partially applied with placeholders.
         * var sayHelloTo = _.partialRight(greet, 'hello', _);
         * sayHelloTo('fred');
         * // => 'hello fred'
         */
        var partialRight = baseRest(function(func, partials) {
          var holders = replaceHolders(partials, getHolder(partialRight));
          return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined$1, partials, holders);
        });

        /**
         * Creates a function that invokes `func` with arguments arranged according
         * to the specified `indexes` where the argument value at the first index is
         * provided as the first argument, the argument value at the second index is
         * provided as the second argument, and so on.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Function
         * @param {Function} func The function to rearrange arguments for.
         * @param {...(number|number[])} indexes The arranged argument indexes.
         * @returns {Function} Returns the new function.
         * @example
         *
         * var rearged = _.rearg(function(a, b, c) {
         *   return [a, b, c];
         * }, [2, 0, 1]);
         *
         * rearged('b', 'c', 'a')
         * // => ['a', 'b', 'c']
         */
        var rearg = flatRest(function(func, indexes) {
          return createWrap(func, WRAP_REARG_FLAG, undefined$1, undefined$1, undefined$1, indexes);
        });

        /**
         * Creates a function that invokes `func` with the `this` binding of the
         * created function and arguments from `start` and beyond provided as
         * an array.
         *
         * **Note:** This method is based on the
         * [rest parameter](https://mdn.io/rest_parameters).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Function
         * @param {Function} func The function to apply a rest parameter to.
         * @param {number} [start=func.length-1] The start position of the rest parameter.
         * @returns {Function} Returns the new function.
         * @example
         *
         * var say = _.rest(function(what, names) {
         *   return what + ' ' + _.initial(names).join(', ') +
         *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
         * });
         *
         * say('hello', 'fred', 'barney', 'pebbles');
         * // => 'hello fred, barney, & pebbles'
         */
        function rest(func, start) {
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          start = start === undefined$1 ? start : toInteger(start);
          return baseRest(func, start);
        }

        /**
         * Creates a function that invokes `func` with the `this` binding of the
         * create function and an array of arguments much like
         * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
         *
         * **Note:** This method is based on the
         * [spread operator](https://mdn.io/spread_operator).
         *
         * @static
         * @memberOf _
         * @since 3.2.0
         * @category Function
         * @param {Function} func The function to spread arguments over.
         * @param {number} [start=0] The start position of the spread.
         * @returns {Function} Returns the new function.
         * @example
         *
         * var say = _.spread(function(who, what) {
         *   return who + ' says ' + what;
         * });
         *
         * say(['fred', 'hello']);
         * // => 'fred says hello'
         *
         * var numbers = Promise.all([
         *   Promise.resolve(40),
         *   Promise.resolve(36)
         * ]);
         *
         * numbers.then(_.spread(function(x, y) {
         *   return x + y;
         * }));
         * // => a Promise of 76
         */
        function spread(func, start) {
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          start = start == null ? 0 : nativeMax(toInteger(start), 0);
          return baseRest(function(args) {
            var array = args[start],
                otherArgs = castSlice(args, 0, start);

            if (array) {
              arrayPush(otherArgs, array);
            }
            return apply(func, this, otherArgs);
          });
        }

        /**
         * Creates a throttled function that only invokes `func` at most once per
         * every `wait` milliseconds. The throttled function comes with a `cancel`
         * method to cancel delayed `func` invocations and a `flush` method to
         * immediately invoke them. Provide `options` to indicate whether `func`
         * should be invoked on the leading and/or trailing edge of the `wait`
         * timeout. The `func` is invoked with the last arguments provided to the
         * throttled function. Subsequent calls to the throttled function return the
         * result of the last `func` invocation.
         *
         * **Note:** If `leading` and `trailing` options are `true`, `func` is
         * invoked on the trailing edge of the timeout only if the throttled function
         * is invoked more than once during the `wait` timeout.
         *
         * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
         * until to the next tick, similar to `setTimeout` with a timeout of `0`.
         *
         * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
         * for details over the differences between `_.throttle` and `_.debounce`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Function
         * @param {Function} func The function to throttle.
         * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
         * @param {Object} [options={}] The options object.
         * @param {boolean} [options.leading=true]
         *  Specify invoking on the leading edge of the timeout.
         * @param {boolean} [options.trailing=true]
         *  Specify invoking on the trailing edge of the timeout.
         * @returns {Function} Returns the new throttled function.
         * @example
         *
         * // Avoid excessively updating the position while scrolling.
         * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
         *
         * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
         * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
         * jQuery(element).on('click', throttled);
         *
         * // Cancel the trailing throttled invocation.
         * jQuery(window).on('popstate', throttled.cancel);
         */
        function throttle(func, wait, options) {
          var leading = true,
              trailing = true;

          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (isObject(options)) {
            leading = 'leading' in options ? !!options.leading : leading;
            trailing = 'trailing' in options ? !!options.trailing : trailing;
          }
          return debounce(func, wait, {
            'leading': leading,
            'maxWait': wait,
            'trailing': trailing
          });
        }

        /**
         * Creates a function that accepts up to one argument, ignoring any
         * additional arguments.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Function
         * @param {Function} func The function to cap arguments for.
         * @returns {Function} Returns the new capped function.
         * @example
         *
         * _.map(['6', '8', '10'], _.unary(parseInt));
         * // => [6, 8, 10]
         */
        function unary(func) {
          return ary(func, 1);
        }

        /**
         * Creates a function that provides `value` to `wrapper` as its first
         * argument. Any additional arguments provided to the function are appended
         * to those provided to the `wrapper`. The wrapper is invoked with the `this`
         * binding of the created function.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Function
         * @param {*} value The value to wrap.
         * @param {Function} [wrapper=identity] The wrapper function.
         * @returns {Function} Returns the new function.
         * @example
         *
         * var p = _.wrap(_.escape, function(func, text) {
         *   return '<p>' + func(text) + '</p>';
         * });
         *
         * p('fred, barney, & pebbles');
         * // => '<p>fred, barney, &amp; pebbles</p>'
         */
        function wrap(value, wrapper) {
          return partial(castFunction(wrapper), value);
        }

        /*------------------------------------------------------------------------*/

        /**
         * Casts `value` as an array if it's not one.
         *
         * @static
         * @memberOf _
         * @since 4.4.0
         * @category Lang
         * @param {*} value The value to inspect.
         * @returns {Array} Returns the cast array.
         * @example
         *
         * _.castArray(1);
         * // => [1]
         *
         * _.castArray({ 'a': 1 });
         * // => [{ 'a': 1 }]
         *
         * _.castArray('abc');
         * // => ['abc']
         *
         * _.castArray(null);
         * // => [null]
         *
         * _.castArray(undefined);
         * // => [undefined]
         *
         * _.castArray();
         * // => []
         *
         * var array = [1, 2, 3];
         * console.log(_.castArray(array) === array);
         * // => true
         */
        function castArray() {
          if (!arguments.length) {
            return [];
          }
          var value = arguments[0];
          return isArray(value) ? value : [value];
        }

        /**
         * Creates a shallow clone of `value`.
         *
         * **Note:** This method is loosely based on the
         * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
         * and supports cloning arrays, array buffers, booleans, date objects, maps,
         * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
         * arrays. The own enumerable properties of `arguments` objects are cloned
         * as plain objects. An empty object is returned for uncloneable values such
         * as error objects, functions, DOM nodes, and WeakMaps.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to clone.
         * @returns {*} Returns the cloned value.
         * @see _.cloneDeep
         * @example
         *
         * var objects = [{ 'a': 1 }, { 'b': 2 }];
         *
         * var shallow = _.clone(objects);
         * console.log(shallow[0] === objects[0]);
         * // => true
         */
        function clone(value) {
          return baseClone(value, CLONE_SYMBOLS_FLAG);
        }

        /**
         * This method is like `_.clone` except that it accepts `customizer` which
         * is invoked to produce the cloned value. If `customizer` returns `undefined`,
         * cloning is handled by the method instead. The `customizer` is invoked with
         * up to four arguments; (value [, index|key, object, stack]).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to clone.
         * @param {Function} [customizer] The function to customize cloning.
         * @returns {*} Returns the cloned value.
         * @see _.cloneDeepWith
         * @example
         *
         * function customizer(value) {
         *   if (_.isElement(value)) {
         *     return value.cloneNode(false);
         *   }
         * }
         *
         * var el = _.cloneWith(document.body, customizer);
         *
         * console.log(el === document.body);
         * // => false
         * console.log(el.nodeName);
         * // => 'BODY'
         * console.log(el.childNodes.length);
         * // => 0
         */
        function cloneWith(value, customizer) {
          customizer = typeof customizer == 'function' ? customizer : undefined$1;
          return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
        }

        /**
         * This method is like `_.clone` except that it recursively clones `value`.
         *
         * @static
         * @memberOf _
         * @since 1.0.0
         * @category Lang
         * @param {*} value The value to recursively clone.
         * @returns {*} Returns the deep cloned value.
         * @see _.clone
         * @example
         *
         * var objects = [{ 'a': 1 }, { 'b': 2 }];
         *
         * var deep = _.cloneDeep(objects);
         * console.log(deep[0] === objects[0]);
         * // => false
         */
        function cloneDeep(value) {
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
        }

        /**
         * This method is like `_.cloneWith` except that it recursively clones `value`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to recursively clone.
         * @param {Function} [customizer] The function to customize cloning.
         * @returns {*} Returns the deep cloned value.
         * @see _.cloneWith
         * @example
         *
         * function customizer(value) {
         *   if (_.isElement(value)) {
         *     return value.cloneNode(true);
         *   }
         * }
         *
         * var el = _.cloneDeepWith(document.body, customizer);
         *
         * console.log(el === document.body);
         * // => false
         * console.log(el.nodeName);
         * // => 'BODY'
         * console.log(el.childNodes.length);
         * // => 20
         */
        function cloneDeepWith(value, customizer) {
          customizer = typeof customizer == 'function' ? customizer : undefined$1;
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
        }

        /**
         * Checks if `object` conforms to `source` by invoking the predicate
         * properties of `source` with the corresponding property values of `object`.
         *
         * **Note:** This method is equivalent to `_.conforms` when `source` is
         * partially applied.
         *
         * @static
         * @memberOf _
         * @since 4.14.0
         * @category Lang
         * @param {Object} object The object to inspect.
         * @param {Object} source The object of property predicates to conform to.
         * @returns {boolean} Returns `true` if `object` conforms, else `false`.
         * @example
         *
         * var object = { 'a': 1, 'b': 2 };
         *
         * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
         * // => true
         *
         * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
         * // => false
         */
        function conformsTo(object, source) {
          return source == null || baseConformsTo(object, source, keys(source));
        }

        /**
         * Performs a
         * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * comparison between two values to determine if they are equivalent.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
         * @example
         *
         * var object = { 'a': 1 };
         * var other = { 'a': 1 };
         *
         * _.eq(object, object);
         * // => true
         *
         * _.eq(object, other);
         * // => false
         *
         * _.eq('a', 'a');
         * // => true
         *
         * _.eq('a', Object('a'));
         * // => false
         *
         * _.eq(NaN, NaN);
         * // => true
         */
        function eq(value, other) {
          return value === other || (value !== value && other !== other);
        }

        /**
         * Checks if `value` is greater than `other`.
         *
         * @static
         * @memberOf _
         * @since 3.9.0
         * @category Lang
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @returns {boolean} Returns `true` if `value` is greater than `other`,
         *  else `false`.
         * @see _.lt
         * @example
         *
         * _.gt(3, 1);
         * // => true
         *
         * _.gt(3, 3);
         * // => false
         *
         * _.gt(1, 3);
         * // => false
         */
        var gt = createRelationalOperation(baseGt);

        /**
         * Checks if `value` is greater than or equal to `other`.
         *
         * @static
         * @memberOf _
         * @since 3.9.0
         * @category Lang
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @returns {boolean} Returns `true` if `value` is greater than or equal to
         *  `other`, else `false`.
         * @see _.lte
         * @example
         *
         * _.gte(3, 1);
         * // => true
         *
         * _.gte(3, 3);
         * // => true
         *
         * _.gte(1, 3);
         * // => false
         */
        var gte = createRelationalOperation(function(value, other) {
          return value >= other;
        });

        /**
         * Checks if `value` is likely an `arguments` object.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an `arguments` object,
         *  else `false`.
         * @example
         *
         * _.isArguments(function() { return arguments; }());
         * // => true
         *
         * _.isArguments([1, 2, 3]);
         * // => false
         */
        var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
          return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
            !propertyIsEnumerable.call(value, 'callee');
        };

        /**
         * Checks if `value` is classified as an `Array` object.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an array, else `false`.
         * @example
         *
         * _.isArray([1, 2, 3]);
         * // => true
         *
         * _.isArray(document.body.children);
         * // => false
         *
         * _.isArray('abc');
         * // => false
         *
         * _.isArray(_.noop);
         * // => false
         */
        var isArray = Array.isArray;

        /**
         * Checks if `value` is classified as an `ArrayBuffer` object.
         *
         * @static
         * @memberOf _
         * @since 4.3.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
         * @example
         *
         * _.isArrayBuffer(new ArrayBuffer(2));
         * // => true
         *
         * _.isArrayBuffer(new Array(2));
         * // => false
         */
        var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

        /**
         * Checks if `value` is array-like. A value is considered array-like if it's
         * not a function and has a `value.length` that's an integer greater than or
         * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
         * @example
         *
         * _.isArrayLike([1, 2, 3]);
         * // => true
         *
         * _.isArrayLike(document.body.children);
         * // => true
         *
         * _.isArrayLike('abc');
         * // => true
         *
         * _.isArrayLike(_.noop);
         * // => false
         */
        function isArrayLike(value) {
          return value != null && isLength(value.length) && !isFunction(value);
        }

        /**
         * This method is like `_.isArrayLike` except that it also checks if `value`
         * is an object.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an array-like object,
         *  else `false`.
         * @example
         *
         * _.isArrayLikeObject([1, 2, 3]);
         * // => true
         *
         * _.isArrayLikeObject(document.body.children);
         * // => true
         *
         * _.isArrayLikeObject('abc');
         * // => false
         *
         * _.isArrayLikeObject(_.noop);
         * // => false
         */
        function isArrayLikeObject(value) {
          return isObjectLike(value) && isArrayLike(value);
        }

        /**
         * Checks if `value` is classified as a boolean primitive or object.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
         * @example
         *
         * _.isBoolean(false);
         * // => true
         *
         * _.isBoolean(null);
         * // => false
         */
        function isBoolean(value) {
          return value === true || value === false ||
            (isObjectLike(value) && baseGetTag(value) == boolTag);
        }

        /**
         * Checks if `value` is a buffer.
         *
         * @static
         * @memberOf _
         * @since 4.3.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
         * @example
         *
         * _.isBuffer(new Buffer(2));
         * // => true
         *
         * _.isBuffer(new Uint8Array(2));
         * // => false
         */
        var isBuffer = nativeIsBuffer || stubFalse;

        /**
         * Checks if `value` is classified as a `Date` object.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
         * @example
         *
         * _.isDate(new Date);
         * // => true
         *
         * _.isDate('Mon April 23 2012');
         * // => false
         */
        var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

        /**
         * Checks if `value` is likely a DOM element.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
         * @example
         *
         * _.isElement(document.body);
         * // => true
         *
         * _.isElement('<body>');
         * // => false
         */
        function isElement(value) {
          return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
        }

        /**
         * Checks if `value` is an empty object, collection, map, or set.
         *
         * Objects are considered empty if they have no own enumerable string keyed
         * properties.
         *
         * Array-like values such as `arguments` objects, arrays, buffers, strings, or
         * jQuery-like collections are considered empty if they have a `length` of `0`.
         * Similarly, maps and sets are considered empty if they have a `size` of `0`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is empty, else `false`.
         * @example
         *
         * _.isEmpty(null);
         * // => true
         *
         * _.isEmpty(true);
         * // => true
         *
         * _.isEmpty(1);
         * // => true
         *
         * _.isEmpty([1, 2, 3]);
         * // => false
         *
         * _.isEmpty({ 'a': 1 });
         * // => false
         */
        function isEmpty(value) {
          if (value == null) {
            return true;
          }
          if (isArrayLike(value) &&
              (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
                isBuffer(value) || isTypedArray(value) || isArguments(value))) {
            return !value.length;
          }
          var tag = getTag(value);
          if (tag == mapTag || tag == setTag) {
            return !value.size;
          }
          if (isPrototype(value)) {
            return !baseKeys(value).length;
          }
          for (var key in value) {
            if (hasOwnProperty.call(value, key)) {
              return false;
            }
          }
          return true;
        }

        /**
         * Performs a deep comparison between two values to determine if they are
         * equivalent.
         *
         * **Note:** This method supports comparing arrays, array buffers, booleans,
         * date objects, error objects, maps, numbers, `Object` objects, regexes,
         * sets, strings, symbols, and typed arrays. `Object` objects are compared
         * by their own, not inherited, enumerable properties. Functions and DOM
         * nodes are compared by strict equality, i.e. `===`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
         * @example
         *
         * var object = { 'a': 1 };
         * var other = { 'a': 1 };
         *
         * _.isEqual(object, other);
         * // => true
         *
         * object === other;
         * // => false
         */
        function isEqual(value, other) {
          return baseIsEqual(value, other);
        }

        /**
         * This method is like `_.isEqual` except that it accepts `customizer` which
         * is invoked to compare values. If `customizer` returns `undefined`, comparisons
         * are handled by the method instead. The `customizer` is invoked with up to
         * six arguments: (objValue, othValue [, index|key, object, other, stack]).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @param {Function} [customizer] The function to customize comparisons.
         * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
         * @example
         *
         * function isGreeting(value) {
         *   return /^h(?:i|ello)$/.test(value);
         * }
         *
         * function customizer(objValue, othValue) {
         *   if (isGreeting(objValue) && isGreeting(othValue)) {
         *     return true;
         *   }
         * }
         *
         * var array = ['hello', 'goodbye'];
         * var other = ['hi', 'goodbye'];
         *
         * _.isEqualWith(array, other, customizer);
         * // => true
         */
        function isEqualWith(value, other, customizer) {
          customizer = typeof customizer == 'function' ? customizer : undefined$1;
          var result = customizer ? customizer(value, other) : undefined$1;
          return result === undefined$1 ? baseIsEqual(value, other, undefined$1, customizer) : !!result;
        }

        /**
         * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
         * `SyntaxError`, `TypeError`, or `URIError` object.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
         * @example
         *
         * _.isError(new Error);
         * // => true
         *
         * _.isError(Error);
         * // => false
         */
        function isError(value) {
          if (!isObjectLike(value)) {
            return false;
          }
          var tag = baseGetTag(value);
          return tag == errorTag || tag == domExcTag ||
            (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
        }

        /**
         * Checks if `value` is a finite primitive number.
         *
         * **Note:** This method is based on
         * [`Number.isFinite`](https://mdn.io/Number/isFinite).
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
         * @example
         *
         * _.isFinite(3);
         * // => true
         *
         * _.isFinite(Number.MIN_VALUE);
         * // => true
         *
         * _.isFinite(Infinity);
         * // => false
         *
         * _.isFinite('3');
         * // => false
         */
        function isFinite(value) {
          return typeof value == 'number' && nativeIsFinite(value);
        }

        /**
         * Checks if `value` is classified as a `Function` object.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a function, else `false`.
         * @example
         *
         * _.isFunction(_);
         * // => true
         *
         * _.isFunction(/abc/);
         * // => false
         */
        function isFunction(value) {
          if (!isObject(value)) {
            return false;
          }
          // The use of `Object#toString` avoids issues with the `typeof` operator
          // in Safari 9 which returns 'object' for typed arrays and other constructors.
          var tag = baseGetTag(value);
          return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
        }

        /**
         * Checks if `value` is an integer.
         *
         * **Note:** This method is based on
         * [`Number.isInteger`](https://mdn.io/Number/isInteger).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
         * @example
         *
         * _.isInteger(3);
         * // => true
         *
         * _.isInteger(Number.MIN_VALUE);
         * // => false
         *
         * _.isInteger(Infinity);
         * // => false
         *
         * _.isInteger('3');
         * // => false
         */
        function isInteger(value) {
          return typeof value == 'number' && value == toInteger(value);
        }

        /**
         * Checks if `value` is a valid array-like length.
         *
         * **Note:** This method is loosely based on
         * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
         * @example
         *
         * _.isLength(3);
         * // => true
         *
         * _.isLength(Number.MIN_VALUE);
         * // => false
         *
         * _.isLength(Infinity);
         * // => false
         *
         * _.isLength('3');
         * // => false
         */
        function isLength(value) {
          return typeof value == 'number' &&
            value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
        }

        /**
         * Checks if `value` is the
         * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
         * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an object, else `false`.
         * @example
         *
         * _.isObject({});
         * // => true
         *
         * _.isObject([1, 2, 3]);
         * // => true
         *
         * _.isObject(_.noop);
         * // => true
         *
         * _.isObject(null);
         * // => false
         */
        function isObject(value) {
          var type = typeof value;
          return value != null && (type == 'object' || type == 'function');
        }

        /**
         * Checks if `value` is object-like. A value is object-like if it's not `null`
         * and has a `typeof` result of "object".
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
         * @example
         *
         * _.isObjectLike({});
         * // => true
         *
         * _.isObjectLike([1, 2, 3]);
         * // => true
         *
         * _.isObjectLike(_.noop);
         * // => false
         *
         * _.isObjectLike(null);
         * // => false
         */
        function isObjectLike(value) {
          return value != null && typeof value == 'object';
        }

        /**
         * Checks if `value` is classified as a `Map` object.
         *
         * @static
         * @memberOf _
         * @since 4.3.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a map, else `false`.
         * @example
         *
         * _.isMap(new Map);
         * // => true
         *
         * _.isMap(new WeakMap);
         * // => false
         */
        var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

        /**
         * Performs a partial deep comparison between `object` and `source` to
         * determine if `object` contains equivalent property values.
         *
         * **Note:** This method is equivalent to `_.matches` when `source` is
         * partially applied.
         *
         * Partial comparisons will match empty array and empty object `source`
         * values against any array or object value, respectively. See `_.isEqual`
         * for a list of supported value comparisons.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Lang
         * @param {Object} object The object to inspect.
         * @param {Object} source The object of property values to match.
         * @returns {boolean} Returns `true` if `object` is a match, else `false`.
         * @example
         *
         * var object = { 'a': 1, 'b': 2 };
         *
         * _.isMatch(object, { 'b': 2 });
         * // => true
         *
         * _.isMatch(object, { 'b': 1 });
         * // => false
         */
        function isMatch(object, source) {
          return object === source || baseIsMatch(object, source, getMatchData(source));
        }

        /**
         * This method is like `_.isMatch` except that it accepts `customizer` which
         * is invoked to compare values. If `customizer` returns `undefined`, comparisons
         * are handled by the method instead. The `customizer` is invoked with five
         * arguments: (objValue, srcValue, index|key, object, source).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {Object} object The object to inspect.
         * @param {Object} source The object of property values to match.
         * @param {Function} [customizer] The function to customize comparisons.
         * @returns {boolean} Returns `true` if `object` is a match, else `false`.
         * @example
         *
         * function isGreeting(value) {
         *   return /^h(?:i|ello)$/.test(value);
         * }
         *
         * function customizer(objValue, srcValue) {
         *   if (isGreeting(objValue) && isGreeting(srcValue)) {
         *     return true;
         *   }
         * }
         *
         * var object = { 'greeting': 'hello' };
         * var source = { 'greeting': 'hi' };
         *
         * _.isMatchWith(object, source, customizer);
         * // => true
         */
        function isMatchWith(object, source, customizer) {
          customizer = typeof customizer == 'function' ? customizer : undefined$1;
          return baseIsMatch(object, source, getMatchData(source), customizer);
        }

        /**
         * Checks if `value` is `NaN`.
         *
         * **Note:** This method is based on
         * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
         * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
         * `undefined` and other non-number values.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
         * @example
         *
         * _.isNaN(NaN);
         * // => true
         *
         * _.isNaN(new Number(NaN));
         * // => true
         *
         * isNaN(undefined);
         * // => true
         *
         * _.isNaN(undefined);
         * // => false
         */
        function isNaN(value) {
          // An `NaN` primitive is the only value that is not equal to itself.
          // Perform the `toStringTag` check first to avoid errors with some
          // ActiveX objects in IE.
          return isNumber(value) && value != +value;
        }

        /**
         * Checks if `value` is a pristine native function.
         *
         * **Note:** This method can't reliably detect native functions in the presence
         * of the core-js package because core-js circumvents this kind of detection.
         * Despite multiple requests, the core-js maintainer has made it clear: any
         * attempt to fix the detection will be obstructed. As a result, we're left
         * with little choice but to throw an error. Unfortunately, this also affects
         * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
         * which rely on core-js.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a native function,
         *  else `false`.
         * @example
         *
         * _.isNative(Array.prototype.push);
         * // => true
         *
         * _.isNative(_);
         * // => false
         */
        function isNative(value) {
          if (isMaskable(value)) {
            throw new Error(CORE_ERROR_TEXT);
          }
          return baseIsNative(value);
        }

        /**
         * Checks if `value` is `null`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
         * @example
         *
         * _.isNull(null);
         * // => true
         *
         * _.isNull(void 0);
         * // => false
         */
        function isNull(value) {
          return value === null;
        }

        /**
         * Checks if `value` is `null` or `undefined`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
         * @example
         *
         * _.isNil(null);
         * // => true
         *
         * _.isNil(void 0);
         * // => true
         *
         * _.isNil(NaN);
         * // => false
         */
        function isNil(value) {
          return value == null;
        }

        /**
         * Checks if `value` is classified as a `Number` primitive or object.
         *
         * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
         * classified as numbers, use the `_.isFinite` method.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a number, else `false`.
         * @example
         *
         * _.isNumber(3);
         * // => true
         *
         * _.isNumber(Number.MIN_VALUE);
         * // => true
         *
         * _.isNumber(Infinity);
         * // => true
         *
         * _.isNumber('3');
         * // => false
         */
        function isNumber(value) {
          return typeof value == 'number' ||
            (isObjectLike(value) && baseGetTag(value) == numberTag);
        }

        /**
         * Checks if `value` is a plain object, that is, an object created by the
         * `Object` constructor or one with a `[[Prototype]]` of `null`.
         *
         * @static
         * @memberOf _
         * @since 0.8.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         * }
         *
         * _.isPlainObject(new Foo);
         * // => false
         *
         * _.isPlainObject([1, 2, 3]);
         * // => false
         *
         * _.isPlainObject({ 'x': 0, 'y': 0 });
         * // => true
         *
         * _.isPlainObject(Object.create(null));
         * // => true
         */
        function isPlainObject(value) {
          if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
            return false;
          }
          var proto = getPrototype(value);
          if (proto === null) {
            return true;
          }
          var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
          return typeof Ctor == 'function' && Ctor instanceof Ctor &&
            funcToString.call(Ctor) == objectCtorString;
        }

        /**
         * Checks if `value` is classified as a `RegExp` object.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
         * @example
         *
         * _.isRegExp(/abc/);
         * // => true
         *
         * _.isRegExp('/abc/');
         * // => false
         */
        var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

        /**
         * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
         * double precision number which isn't the result of a rounded unsafe integer.
         *
         * **Note:** This method is based on
         * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
         * @example
         *
         * _.isSafeInteger(3);
         * // => true
         *
         * _.isSafeInteger(Number.MIN_VALUE);
         * // => false
         *
         * _.isSafeInteger(Infinity);
         * // => false
         *
         * _.isSafeInteger('3');
         * // => false
         */
        function isSafeInteger(value) {
          return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
        }

        /**
         * Checks if `value` is classified as a `Set` object.
         *
         * @static
         * @memberOf _
         * @since 4.3.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a set, else `false`.
         * @example
         *
         * _.isSet(new Set);
         * // => true
         *
         * _.isSet(new WeakSet);
         * // => false
         */
        var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

        /**
         * Checks if `value` is classified as a `String` primitive or object.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a string, else `false`.
         * @example
         *
         * _.isString('abc');
         * // => true
         *
         * _.isString(1);
         * // => false
         */
        function isString(value) {
          return typeof value == 'string' ||
            (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
        }

        /**
         * Checks if `value` is classified as a `Symbol` primitive or object.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
         * @example
         *
         * _.isSymbol(Symbol.iterator);
         * // => true
         *
         * _.isSymbol('abc');
         * // => false
         */
        function isSymbol(value) {
          return typeof value == 'symbol' ||
            (isObjectLike(value) && baseGetTag(value) == symbolTag);
        }

        /**
         * Checks if `value` is classified as a typed array.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
         * @example
         *
         * _.isTypedArray(new Uint8Array);
         * // => true
         *
         * _.isTypedArray([]);
         * // => false
         */
        var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

        /**
         * Checks if `value` is `undefined`.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
         * @example
         *
         * _.isUndefined(void 0);
         * // => true
         *
         * _.isUndefined(null);
         * // => false
         */
        function isUndefined(value) {
          return value === undefined$1;
        }

        /**
         * Checks if `value` is classified as a `WeakMap` object.
         *
         * @static
         * @memberOf _
         * @since 4.3.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
         * @example
         *
         * _.isWeakMap(new WeakMap);
         * // => true
         *
         * _.isWeakMap(new Map);
         * // => false
         */
        function isWeakMap(value) {
          return isObjectLike(value) && getTag(value) == weakMapTag;
        }

        /**
         * Checks if `value` is classified as a `WeakSet` object.
         *
         * @static
         * @memberOf _
         * @since 4.3.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
         * @example
         *
         * _.isWeakSet(new WeakSet);
         * // => true
         *
         * _.isWeakSet(new Set);
         * // => false
         */
        function isWeakSet(value) {
          return isObjectLike(value) && baseGetTag(value) == weakSetTag;
        }

        /**
         * Checks if `value` is less than `other`.
         *
         * @static
         * @memberOf _
         * @since 3.9.0
         * @category Lang
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @returns {boolean} Returns `true` if `value` is less than `other`,
         *  else `false`.
         * @see _.gt
         * @example
         *
         * _.lt(1, 3);
         * // => true
         *
         * _.lt(3, 3);
         * // => false
         *
         * _.lt(3, 1);
         * // => false
         */
        var lt = createRelationalOperation(baseLt);

        /**
         * Checks if `value` is less than or equal to `other`.
         *
         * @static
         * @memberOf _
         * @since 3.9.0
         * @category Lang
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @returns {boolean} Returns `true` if `value` is less than or equal to
         *  `other`, else `false`.
         * @see _.gte
         * @example
         *
         * _.lte(1, 3);
         * // => true
         *
         * _.lte(3, 3);
         * // => true
         *
         * _.lte(3, 1);
         * // => false
         */
        var lte = createRelationalOperation(function(value, other) {
          return value <= other;
        });

        /**
         * Converts `value` to an array.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Lang
         * @param {*} value The value to convert.
         * @returns {Array} Returns the converted array.
         * @example
         *
         * _.toArray({ 'a': 1, 'b': 2 });
         * // => [1, 2]
         *
         * _.toArray('abc');
         * // => ['a', 'b', 'c']
         *
         * _.toArray(1);
         * // => []
         *
         * _.toArray(null);
         * // => []
         */
        function toArray(value) {
          if (!value) {
            return [];
          }
          if (isArrayLike(value)) {
            return isString(value) ? stringToArray(value) : copyArray(value);
          }
          if (symIterator && value[symIterator]) {
            return iteratorToArray(value[symIterator]());
          }
          var tag = getTag(value),
              func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

          return func(value);
        }

        /**
         * Converts `value` to a finite number.
         *
         * @static
         * @memberOf _
         * @since 4.12.0
         * @category Lang
         * @param {*} value The value to convert.
         * @returns {number} Returns the converted number.
         * @example
         *
         * _.toFinite(3.2);
         * // => 3.2
         *
         * _.toFinite(Number.MIN_VALUE);
         * // => 5e-324
         *
         * _.toFinite(Infinity);
         * // => 1.7976931348623157e+308
         *
         * _.toFinite('3.2');
         * // => 3.2
         */
        function toFinite(value) {
          if (!value) {
            return value === 0 ? value : 0;
          }
          value = toNumber(value);
          if (value === INFINITY || value === -INFINITY) {
            var sign = (value < 0 ? -1 : 1);
            return sign * MAX_INTEGER;
          }
          return value === value ? value : 0;
        }

        /**
         * Converts `value` to an integer.
         *
         * **Note:** This method is loosely based on
         * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to convert.
         * @returns {number} Returns the converted integer.
         * @example
         *
         * _.toInteger(3.2);
         * // => 3
         *
         * _.toInteger(Number.MIN_VALUE);
         * // => 0
         *
         * _.toInteger(Infinity);
         * // => 1.7976931348623157e+308
         *
         * _.toInteger('3.2');
         * // => 3
         */
        function toInteger(value) {
          var result = toFinite(value),
              remainder = result % 1;

          return result === result ? (remainder ? result - remainder : result) : 0;
        }

        /**
         * Converts `value` to an integer suitable for use as the length of an
         * array-like object.
         *
         * **Note:** This method is based on
         * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to convert.
         * @returns {number} Returns the converted integer.
         * @example
         *
         * _.toLength(3.2);
         * // => 3
         *
         * _.toLength(Number.MIN_VALUE);
         * // => 0
         *
         * _.toLength(Infinity);
         * // => 4294967295
         *
         * _.toLength('3.2');
         * // => 3
         */
        function toLength(value) {
          return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
        }

        /**
         * Converts `value` to a number.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to process.
         * @returns {number} Returns the number.
         * @example
         *
         * _.toNumber(3.2);
         * // => 3.2
         *
         * _.toNumber(Number.MIN_VALUE);
         * // => 5e-324
         *
         * _.toNumber(Infinity);
         * // => Infinity
         *
         * _.toNumber('3.2');
         * // => 3.2
         */
        function toNumber(value) {
          if (typeof value == 'number') {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          if (isObject(value)) {
            var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
            value = isObject(other) ? (other + '') : other;
          }
          if (typeof value != 'string') {
            return value === 0 ? value : +value;
          }
          value = baseTrim(value);
          var isBinary = reIsBinary.test(value);
          return (isBinary || reIsOctal.test(value))
            ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
            : (reIsBadHex.test(value) ? NAN : +value);
        }

        /**
         * Converts `value` to a plain object flattening inherited enumerable string
         * keyed properties of `value` to own properties of the plain object.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Lang
         * @param {*} value The value to convert.
         * @returns {Object} Returns the converted plain object.
         * @example
         *
         * function Foo() {
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.assign({ 'a': 1 }, new Foo);
         * // => { 'a': 1, 'b': 2 }
         *
         * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
         * // => { 'a': 1, 'b': 2, 'c': 3 }
         */
        function toPlainObject(value) {
          return copyObject(value, keysIn(value));
        }

        /**
         * Converts `value` to a safe integer. A safe integer can be compared and
         * represented correctly.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to convert.
         * @returns {number} Returns the converted integer.
         * @example
         *
         * _.toSafeInteger(3.2);
         * // => 3
         *
         * _.toSafeInteger(Number.MIN_VALUE);
         * // => 0
         *
         * _.toSafeInteger(Infinity);
         * // => 9007199254740991
         *
         * _.toSafeInteger('3.2');
         * // => 3
         */
        function toSafeInteger(value) {
          return value
            ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
            : (value === 0 ? value : 0);
        }

        /**
         * Converts `value` to a string. An empty string is returned for `null`
         * and `undefined` values. The sign of `-0` is preserved.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to convert.
         * @returns {string} Returns the converted string.
         * @example
         *
         * _.toString(null);
         * // => ''
         *
         * _.toString(-0);
         * // => '-0'
         *
         * _.toString([1, 2, 3]);
         * // => '1,2,3'
         */
        function toString(value) {
          return value == null ? '' : baseToString(value);
        }

        /*------------------------------------------------------------------------*/

        /**
         * Assigns own enumerable string keyed properties of source objects to the
         * destination object. Source objects are applied from left to right.
         * Subsequent sources overwrite property assignments of previous sources.
         *
         * **Note:** This method mutates `object` and is loosely based on
         * [`Object.assign`](https://mdn.io/Object/assign).
         *
         * @static
         * @memberOf _
         * @since 0.10.0
         * @category Object
         * @param {Object} object The destination object.
         * @param {...Object} [sources] The source objects.
         * @returns {Object} Returns `object`.
         * @see _.assignIn
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         * }
         *
         * function Bar() {
         *   this.c = 3;
         * }
         *
         * Foo.prototype.b = 2;
         * Bar.prototype.d = 4;
         *
         * _.assign({ 'a': 0 }, new Foo, new Bar);
         * // => { 'a': 1, 'c': 3 }
         */
        var assign = createAssigner(function(object, source) {
          if (isPrototype(source) || isArrayLike(source)) {
            copyObject(source, keys(source), object);
            return;
          }
          for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
              assignValue(object, key, source[key]);
            }
          }
        });

        /**
         * This method is like `_.assign` except that it iterates over own and
         * inherited source properties.
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @alias extend
         * @category Object
         * @param {Object} object The destination object.
         * @param {...Object} [sources] The source objects.
         * @returns {Object} Returns `object`.
         * @see _.assign
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         * }
         *
         * function Bar() {
         *   this.c = 3;
         * }
         *
         * Foo.prototype.b = 2;
         * Bar.prototype.d = 4;
         *
         * _.assignIn({ 'a': 0 }, new Foo, new Bar);
         * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
         */
        var assignIn = createAssigner(function(object, source) {
          copyObject(source, keysIn(source), object);
        });

        /**
         * This method is like `_.assignIn` except that it accepts `customizer`
         * which is invoked to produce the assigned values. If `customizer` returns
         * `undefined`, assignment is handled by the method instead. The `customizer`
         * is invoked with five arguments: (objValue, srcValue, key, object, source).
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @alias extendWith
         * @category Object
         * @param {Object} object The destination object.
         * @param {...Object} sources The source objects.
         * @param {Function} [customizer] The function to customize assigned values.
         * @returns {Object} Returns `object`.
         * @see _.assignWith
         * @example
         *
         * function customizer(objValue, srcValue) {
         *   return _.isUndefined(objValue) ? srcValue : objValue;
         * }
         *
         * var defaults = _.partialRight(_.assignInWith, customizer);
         *
         * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
         * // => { 'a': 1, 'b': 2 }
         */
        var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
          copyObject(source, keysIn(source), object, customizer);
        });

        /**
         * This method is like `_.assign` except that it accepts `customizer`
         * which is invoked to produce the assigned values. If `customizer` returns
         * `undefined`, assignment is handled by the method instead. The `customizer`
         * is invoked with five arguments: (objValue, srcValue, key, object, source).
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Object
         * @param {Object} object The destination object.
         * @param {...Object} sources The source objects.
         * @param {Function} [customizer] The function to customize assigned values.
         * @returns {Object} Returns `object`.
         * @see _.assignInWith
         * @example
         *
         * function customizer(objValue, srcValue) {
         *   return _.isUndefined(objValue) ? srcValue : objValue;
         * }
         *
         * var defaults = _.partialRight(_.assignWith, customizer);
         *
         * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
         * // => { 'a': 1, 'b': 2 }
         */
        var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
          copyObject(source, keys(source), object, customizer);
        });

        /**
         * Creates an array of values corresponding to `paths` of `object`.
         *
         * @static
         * @memberOf _
         * @since 1.0.0
         * @category Object
         * @param {Object} object The object to iterate over.
         * @param {...(string|string[])} [paths] The property paths to pick.
         * @returns {Array} Returns the picked values.
         * @example
         *
         * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
         *
         * _.at(object, ['a[0].b.c', 'a[1]']);
         * // => [3, 4]
         */
        var at = flatRest(baseAt);

        /**
         * Creates an object that inherits from the `prototype` object. If a
         * `properties` object is given, its own enumerable string keyed properties
         * are assigned to the created object.
         *
         * @static
         * @memberOf _
         * @since 2.3.0
         * @category Object
         * @param {Object} prototype The object to inherit from.
         * @param {Object} [properties] The properties to assign to the object.
         * @returns {Object} Returns the new object.
         * @example
         *
         * function Shape() {
         *   this.x = 0;
         *   this.y = 0;
         * }
         *
         * function Circle() {
         *   Shape.call(this);
         * }
         *
         * Circle.prototype = _.create(Shape.prototype, {
         *   'constructor': Circle
         * });
         *
         * var circle = new Circle;
         * circle instanceof Circle;
         * // => true
         *
         * circle instanceof Shape;
         * // => true
         */
        function create(prototype, properties) {
          var result = baseCreate(prototype);
          return properties == null ? result : baseAssign(result, properties);
        }

        /**
         * Assigns own and inherited enumerable string keyed properties of source
         * objects to the destination object for all destination properties that
         * resolve to `undefined`. Source objects are applied from left to right.
         * Once a property is set, additional values of the same property are ignored.
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Object
         * @param {Object} object The destination object.
         * @param {...Object} [sources] The source objects.
         * @returns {Object} Returns `object`.
         * @see _.defaultsDeep
         * @example
         *
         * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
         * // => { 'a': 1, 'b': 2 }
         */
        var defaults = baseRest(function(object, sources) {
          object = Object(object);

          var index = -1;
          var length = sources.length;
          var guard = length > 2 ? sources[2] : undefined$1;

          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            length = 1;
          }

          while (++index < length) {
            var source = sources[index];
            var props = keysIn(source);
            var propsIndex = -1;
            var propsLength = props.length;

            while (++propsIndex < propsLength) {
              var key = props[propsIndex];
              var value = object[key];

              if (value === undefined$1 ||
                  (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
                object[key] = source[key];
              }
            }
          }

          return object;
        });

        /**
         * This method is like `_.defaults` except that it recursively assigns
         * default properties.
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 3.10.0
         * @category Object
         * @param {Object} object The destination object.
         * @param {...Object} [sources] The source objects.
         * @returns {Object} Returns `object`.
         * @see _.defaults
         * @example
         *
         * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
         * // => { 'a': { 'b': 2, 'c': 3 } }
         */
        var defaultsDeep = baseRest(function(args) {
          args.push(undefined$1, customDefaultsMerge);
          return apply(mergeWith, undefined$1, args);
        });

        /**
         * This method is like `_.find` except that it returns the key of the first
         * element `predicate` returns truthy for instead of the element itself.
         *
         * @static
         * @memberOf _
         * @since 1.1.0
         * @category Object
         * @param {Object} object The object to inspect.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @returns {string|undefined} Returns the key of the matched element,
         *  else `undefined`.
         * @example
         *
         * var users = {
         *   'barney':  { 'age': 36, 'active': true },
         *   'fred':    { 'age': 40, 'active': false },
         *   'pebbles': { 'age': 1,  'active': true }
         * };
         *
         * _.findKey(users, function(o) { return o.age < 40; });
         * // => 'barney' (iteration order is not guaranteed)
         *
         * // The `_.matches` iteratee shorthand.
         * _.findKey(users, { 'age': 1, 'active': true });
         * // => 'pebbles'
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.findKey(users, ['active', false]);
         * // => 'fred'
         *
         * // The `_.property` iteratee shorthand.
         * _.findKey(users, 'active');
         * // => 'barney'
         */
        function findKey(object, predicate) {
          return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
        }

        /**
         * This method is like `_.findKey` except that it iterates over elements of
         * a collection in the opposite order.
         *
         * @static
         * @memberOf _
         * @since 2.0.0
         * @category Object
         * @param {Object} object The object to inspect.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @returns {string|undefined} Returns the key of the matched element,
         *  else `undefined`.
         * @example
         *
         * var users = {
         *   'barney':  { 'age': 36, 'active': true },
         *   'fred':    { 'age': 40, 'active': false },
         *   'pebbles': { 'age': 1,  'active': true }
         * };
         *
         * _.findLastKey(users, function(o) { return o.age < 40; });
         * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
         *
         * // The `_.matches` iteratee shorthand.
         * _.findLastKey(users, { 'age': 36, 'active': true });
         * // => 'barney'
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.findLastKey(users, ['active', false]);
         * // => 'fred'
         *
         * // The `_.property` iteratee shorthand.
         * _.findLastKey(users, 'active');
         * // => 'pebbles'
         */
        function findLastKey(object, predicate) {
          return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
        }

        /**
         * Iterates over own and inherited enumerable string keyed properties of an
         * object and invokes `iteratee` for each property. The iteratee is invoked
         * with three arguments: (value, key, object). Iteratee functions may exit
         * iteration early by explicitly returning `false`.
         *
         * @static
         * @memberOf _
         * @since 0.3.0
         * @category Object
         * @param {Object} object The object to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Object} Returns `object`.
         * @see _.forInRight
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.forIn(new Foo, function(value, key) {
         *   console.log(key);
         * });
         * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
         */
        function forIn(object, iteratee) {
          return object == null
            ? object
            : baseFor(object, getIteratee(iteratee, 3), keysIn);
        }

        /**
         * This method is like `_.forIn` except that it iterates over properties of
         * `object` in the opposite order.
         *
         * @static
         * @memberOf _
         * @since 2.0.0
         * @category Object
         * @param {Object} object The object to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Object} Returns `object`.
         * @see _.forIn
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.forInRight(new Foo, function(value, key) {
         *   console.log(key);
         * });
         * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
         */
        function forInRight(object, iteratee) {
          return object == null
            ? object
            : baseForRight(object, getIteratee(iteratee, 3), keysIn);
        }

        /**
         * Iterates over own enumerable string keyed properties of an object and
         * invokes `iteratee` for each property. The iteratee is invoked with three
         * arguments: (value, key, object). Iteratee functions may exit iteration
         * early by explicitly returning `false`.
         *
         * @static
         * @memberOf _
         * @since 0.3.0
         * @category Object
         * @param {Object} object The object to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Object} Returns `object`.
         * @see _.forOwnRight
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.forOwn(new Foo, function(value, key) {
         *   console.log(key);
         * });
         * // => Logs 'a' then 'b' (iteration order is not guaranteed).
         */
        function forOwn(object, iteratee) {
          return object && baseForOwn(object, getIteratee(iteratee, 3));
        }

        /**
         * This method is like `_.forOwn` except that it iterates over properties of
         * `object` in the opposite order.
         *
         * @static
         * @memberOf _
         * @since 2.0.0
         * @category Object
         * @param {Object} object The object to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Object} Returns `object`.
         * @see _.forOwn
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.forOwnRight(new Foo, function(value, key) {
         *   console.log(key);
         * });
         * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
         */
        function forOwnRight(object, iteratee) {
          return object && baseForOwnRight(object, getIteratee(iteratee, 3));
        }

        /**
         * Creates an array of function property names from own enumerable properties
         * of `object`.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Object
         * @param {Object} object The object to inspect.
         * @returns {Array} Returns the function names.
         * @see _.functionsIn
         * @example
         *
         * function Foo() {
         *   this.a = _.constant('a');
         *   this.b = _.constant('b');
         * }
         *
         * Foo.prototype.c = _.constant('c');
         *
         * _.functions(new Foo);
         * // => ['a', 'b']
         */
        function functions(object) {
          return object == null ? [] : baseFunctions(object, keys(object));
        }

        /**
         * Creates an array of function property names from own and inherited
         * enumerable properties of `object`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Object
         * @param {Object} object The object to inspect.
         * @returns {Array} Returns the function names.
         * @see _.functions
         * @example
         *
         * function Foo() {
         *   this.a = _.constant('a');
         *   this.b = _.constant('b');
         * }
         *
         * Foo.prototype.c = _.constant('c');
         *
         * _.functionsIn(new Foo);
         * // => ['a', 'b', 'c']
         */
        function functionsIn(object) {
          return object == null ? [] : baseFunctions(object, keysIn(object));
        }

        /**
         * Gets the value at `path` of `object`. If the resolved value is
         * `undefined`, the `defaultValue` is returned in its place.
         *
         * @static
         * @memberOf _
         * @since 3.7.0
         * @category Object
         * @param {Object} object The object to query.
         * @param {Array|string} path The path of the property to get.
         * @param {*} [defaultValue] The value returned for `undefined` resolved values.
         * @returns {*} Returns the resolved value.
         * @example
         *
         * var object = { 'a': [{ 'b': { 'c': 3 } }] };
         *
         * _.get(object, 'a[0].b.c');
         * // => 3
         *
         * _.get(object, ['a', '0', 'b', 'c']);
         * // => 3
         *
         * _.get(object, 'a.b.c', 'default');
         * // => 'default'
         */
        function get(object, path, defaultValue) {
          var result = object == null ? undefined$1 : baseGet(object, path);
          return result === undefined$1 ? defaultValue : result;
        }

        /**
         * Checks if `path` is a direct property of `object`.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Object
         * @param {Object} object The object to query.
         * @param {Array|string} path The path to check.
         * @returns {boolean} Returns `true` if `path` exists, else `false`.
         * @example
         *
         * var object = { 'a': { 'b': 2 } };
         * var other = _.create({ 'a': _.create({ 'b': 2 }) });
         *
         * _.has(object, 'a');
         * // => true
         *
         * _.has(object, 'a.b');
         * // => true
         *
         * _.has(object, ['a', 'b']);
         * // => true
         *
         * _.has(other, 'a');
         * // => false
         */
        function has(object, path) {
          return object != null && hasPath(object, path, baseHas);
        }

        /**
         * Checks if `path` is a direct or inherited property of `object`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Object
         * @param {Object} object The object to query.
         * @param {Array|string} path The path to check.
         * @returns {boolean} Returns `true` if `path` exists, else `false`.
         * @example
         *
         * var object = _.create({ 'a': _.create({ 'b': 2 }) });
         *
         * _.hasIn(object, 'a');
         * // => true
         *
         * _.hasIn(object, 'a.b');
         * // => true
         *
         * _.hasIn(object, ['a', 'b']);
         * // => true
         *
         * _.hasIn(object, 'b');
         * // => false
         */
        function hasIn(object, path) {
          return object != null && hasPath(object, path, baseHasIn);
        }

        /**
         * Creates an object composed of the inverted keys and values of `object`.
         * If `object` contains duplicate values, subsequent values overwrite
         * property assignments of previous values.
         *
         * @static
         * @memberOf _
         * @since 0.7.0
         * @category Object
         * @param {Object} object The object to invert.
         * @returns {Object} Returns the new inverted object.
         * @example
         *
         * var object = { 'a': 1, 'b': 2, 'c': 1 };
         *
         * _.invert(object);
         * // => { '1': 'c', '2': 'b' }
         */
        var invert = createInverter(function(result, value, key) {
          if (value != null &&
              typeof value.toString != 'function') {
            value = nativeObjectToString.call(value);
          }

          result[value] = key;
        }, constant(identity));

        /**
         * This method is like `_.invert` except that the inverted object is generated
         * from the results of running each element of `object` thru `iteratee`. The
         * corresponding inverted value of each inverted key is an array of keys
         * responsible for generating the inverted value. The iteratee is invoked
         * with one argument: (value).
         *
         * @static
         * @memberOf _
         * @since 4.1.0
         * @category Object
         * @param {Object} object The object to invert.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {Object} Returns the new inverted object.
         * @example
         *
         * var object = { 'a': 1, 'b': 2, 'c': 1 };
         *
         * _.invertBy(object);
         * // => { '1': ['a', 'c'], '2': ['b'] }
         *
         * _.invertBy(object, function(value) {
         *   return 'group' + value;
         * });
         * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
         */
        var invertBy = createInverter(function(result, value, key) {
          if (value != null &&
              typeof value.toString != 'function') {
            value = nativeObjectToString.call(value);
          }

          if (hasOwnProperty.call(result, value)) {
            result[value].push(key);
          } else {
            result[value] = [key];
          }
        }, getIteratee);

        /**
         * Invokes the method at `path` of `object`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Object
         * @param {Object} object The object to query.
         * @param {Array|string} path The path of the method to invoke.
         * @param {...*} [args] The arguments to invoke the method with.
         * @returns {*} Returns the result of the invoked method.
         * @example
         *
         * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
         *
         * _.invoke(object, 'a[0].b.c.slice', 1, 3);
         * // => [2, 3]
         */
        var invoke = baseRest(baseInvoke);

        /**
         * Creates an array of the own enumerable property names of `object`.
         *
         * **Note:** Non-object values are coerced to objects. See the
         * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
         * for more details.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Object
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names.
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.keys(new Foo);
         * // => ['a', 'b'] (iteration order is not guaranteed)
         *
         * _.keys('hi');
         * // => ['0', '1']
         */
        function keys(object) {
          return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
        }

        /**
         * Creates an array of the own and inherited enumerable property names of `object`.
         *
         * **Note:** Non-object values are coerced to objects.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Object
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names.
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.keysIn(new Foo);
         * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
         */
        function keysIn(object) {
          return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
        }

        /**
         * The opposite of `_.mapValues`; this method creates an object with the
         * same values as `object` and keys generated by running each own enumerable
         * string keyed property of `object` thru `iteratee`. The iteratee is invoked
         * with three arguments: (value, key, object).
         *
         * @static
         * @memberOf _
         * @since 3.8.0
         * @category Object
         * @param {Object} object The object to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Object} Returns the new mapped object.
         * @see _.mapValues
         * @example
         *
         * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
         *   return key + value;
         * });
         * // => { 'a1': 1, 'b2': 2 }
         */
        function mapKeys(object, iteratee) {
          var result = {};
          iteratee = getIteratee(iteratee, 3);

          baseForOwn(object, function(value, key, object) {
            baseAssignValue(result, iteratee(value, key, object), value);
          });
          return result;
        }

        /**
         * Creates an object with the same keys as `object` and values generated
         * by running each own enumerable string keyed property of `object` thru
         * `iteratee`. The iteratee is invoked with three arguments:
         * (value, key, object).
         *
         * @static
         * @memberOf _
         * @since 2.4.0
         * @category Object
         * @param {Object} object The object to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Object} Returns the new mapped object.
         * @see _.mapKeys
         * @example
         *
         * var users = {
         *   'fred':    { 'user': 'fred',    'age': 40 },
         *   'pebbles': { 'user': 'pebbles', 'age': 1 }
         * };
         *
         * _.mapValues(users, function(o) { return o.age; });
         * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
         *
         * // The `_.property` iteratee shorthand.
         * _.mapValues(users, 'age');
         * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
         */
        function mapValues(object, iteratee) {
          var result = {};
          iteratee = getIteratee(iteratee, 3);

          baseForOwn(object, function(value, key, object) {
            baseAssignValue(result, key, iteratee(value, key, object));
          });
          return result;
        }

        /**
         * This method is like `_.assign` except that it recursively merges own and
         * inherited enumerable string keyed properties of source objects into the
         * destination object. Source properties that resolve to `undefined` are
         * skipped if a destination value exists. Array and plain object properties
         * are merged recursively. Other objects and value types are overridden by
         * assignment. Source objects are applied from left to right. Subsequent
         * sources overwrite property assignments of previous sources.
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 0.5.0
         * @category Object
         * @param {Object} object The destination object.
         * @param {...Object} [sources] The source objects.
         * @returns {Object} Returns `object`.
         * @example
         *
         * var object = {
         *   'a': [{ 'b': 2 }, { 'd': 4 }]
         * };
         *
         * var other = {
         *   'a': [{ 'c': 3 }, { 'e': 5 }]
         * };
         *
         * _.merge(object, other);
         * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
         */
        var merge = createAssigner(function(object, source, srcIndex) {
          baseMerge(object, source, srcIndex);
        });

        /**
         * This method is like `_.merge` except that it accepts `customizer` which
         * is invoked to produce the merged values of the destination and source
         * properties. If `customizer` returns `undefined`, merging is handled by the
         * method instead. The `customizer` is invoked with six arguments:
         * (objValue, srcValue, key, object, source, stack).
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Object
         * @param {Object} object The destination object.
         * @param {...Object} sources The source objects.
         * @param {Function} customizer The function to customize assigned values.
         * @returns {Object} Returns `object`.
         * @example
         *
         * function customizer(objValue, srcValue) {
         *   if (_.isArray(objValue)) {
         *     return objValue.concat(srcValue);
         *   }
         * }
         *
         * var object = { 'a': [1], 'b': [2] };
         * var other = { 'a': [3], 'b': [4] };
         *
         * _.mergeWith(object, other, customizer);
         * // => { 'a': [1, 3], 'b': [2, 4] }
         */
        var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
          baseMerge(object, source, srcIndex, customizer);
        });

        /**
         * The opposite of `_.pick`; this method creates an object composed of the
         * own and inherited enumerable property paths of `object` that are not omitted.
         *
         * **Note:** This method is considerably slower than `_.pick`.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Object
         * @param {Object} object The source object.
         * @param {...(string|string[])} [paths] The property paths to omit.
         * @returns {Object} Returns the new object.
         * @example
         *
         * var object = { 'a': 1, 'b': '2', 'c': 3 };
         *
         * _.omit(object, ['a', 'c']);
         * // => { 'b': '2' }
         */
        var omit = flatRest(function(object, paths) {
          var result = {};
          if (object == null) {
            return result;
          }
          var isDeep = false;
          paths = arrayMap(paths, function(path) {
            path = castPath(path, object);
            isDeep || (isDeep = path.length > 1);
            return path;
          });
          copyObject(object, getAllKeysIn(object), result);
          if (isDeep) {
            result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
          }
          var length = paths.length;
          while (length--) {
            baseUnset(result, paths[length]);
          }
          return result;
        });

        /**
         * The opposite of `_.pickBy`; this method creates an object composed of
         * the own and inherited enumerable string keyed properties of `object` that
         * `predicate` doesn't return truthy for. The predicate is invoked with two
         * arguments: (value, key).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Object
         * @param {Object} object The source object.
         * @param {Function} [predicate=_.identity] The function invoked per property.
         * @returns {Object} Returns the new object.
         * @example
         *
         * var object = { 'a': 1, 'b': '2', 'c': 3 };
         *
         * _.omitBy(object, _.isNumber);
         * // => { 'b': '2' }
         */
        function omitBy(object, predicate) {
          return pickBy(object, negate(getIteratee(predicate)));
        }

        /**
         * Creates an object composed of the picked `object` properties.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Object
         * @param {Object} object The source object.
         * @param {...(string|string[])} [paths] The property paths to pick.
         * @returns {Object} Returns the new object.
         * @example
         *
         * var object = { 'a': 1, 'b': '2', 'c': 3 };
         *
         * _.pick(object, ['a', 'c']);
         * // => { 'a': 1, 'c': 3 }
         */
        var pick = flatRest(function(object, paths) {
          return object == null ? {} : basePick(object, paths);
        });

        /**
         * Creates an object composed of the `object` properties `predicate` returns
         * truthy for. The predicate is invoked with two arguments: (value, key).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Object
         * @param {Object} object The source object.
         * @param {Function} [predicate=_.identity] The function invoked per property.
         * @returns {Object} Returns the new object.
         * @example
         *
         * var object = { 'a': 1, 'b': '2', 'c': 3 };
         *
         * _.pickBy(object, _.isNumber);
         * // => { 'a': 1, 'c': 3 }
         */
        function pickBy(object, predicate) {
          if (object == null) {
            return {};
          }
          var props = arrayMap(getAllKeysIn(object), function(prop) {
            return [prop];
          });
          predicate = getIteratee(predicate);
          return basePickBy(object, props, function(value, path) {
            return predicate(value, path[0]);
          });
        }

        /**
         * This method is like `_.get` except that if the resolved value is a
         * function it's invoked with the `this` binding of its parent object and
         * its result is returned.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Object
         * @param {Object} object The object to query.
         * @param {Array|string} path The path of the property to resolve.
         * @param {*} [defaultValue] The value returned for `undefined` resolved values.
         * @returns {*} Returns the resolved value.
         * @example
         *
         * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
         *
         * _.result(object, 'a[0].b.c1');
         * // => 3
         *
         * _.result(object, 'a[0].b.c2');
         * // => 4
         *
         * _.result(object, 'a[0].b.c3', 'default');
         * // => 'default'
         *
         * _.result(object, 'a[0].b.c3', _.constant('default'));
         * // => 'default'
         */
        function result(object, path, defaultValue) {
          path = castPath(path, object);

          var index = -1,
              length = path.length;

          // Ensure the loop is entered when path is empty.
          if (!length) {
            length = 1;
            object = undefined$1;
          }
          while (++index < length) {
            var value = object == null ? undefined$1 : object[toKey(path[index])];
            if (value === undefined$1) {
              index = length;
              value = defaultValue;
            }
            object = isFunction(value) ? value.call(object) : value;
          }
          return object;
        }

        /**
         * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
         * it's created. Arrays are created for missing index properties while objects
         * are created for all other missing properties. Use `_.setWith` to customize
         * `path` creation.
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 3.7.0
         * @category Object
         * @param {Object} object The object to modify.
         * @param {Array|string} path The path of the property to set.
         * @param {*} value The value to set.
         * @returns {Object} Returns `object`.
         * @example
         *
         * var object = { 'a': [{ 'b': { 'c': 3 } }] };
         *
         * _.set(object, 'a[0].b.c', 4);
         * console.log(object.a[0].b.c);
         * // => 4
         *
         * _.set(object, ['x', '0', 'y', 'z'], 5);
         * console.log(object.x[0].y.z);
         * // => 5
         */
        function set(object, path, value) {
          return object == null ? object : baseSet(object, path, value);
        }

        /**
         * This method is like `_.set` except that it accepts `customizer` which is
         * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
         * path creation is handled by the method instead. The `customizer` is invoked
         * with three arguments: (nsValue, key, nsObject).
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Object
         * @param {Object} object The object to modify.
         * @param {Array|string} path The path of the property to set.
         * @param {*} value The value to set.
         * @param {Function} [customizer] The function to customize assigned values.
         * @returns {Object} Returns `object`.
         * @example
         *
         * var object = {};
         *
         * _.setWith(object, '[0][1]', 'a', Object);
         * // => { '0': { '1': 'a' } }
         */
        function setWith(object, path, value, customizer) {
          customizer = typeof customizer == 'function' ? customizer : undefined$1;
          return object == null ? object : baseSet(object, path, value, customizer);
        }

        /**
         * Creates an array of own enumerable string keyed-value pairs for `object`
         * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
         * entries are returned.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @alias entries
         * @category Object
         * @param {Object} object The object to query.
         * @returns {Array} Returns the key-value pairs.
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.toPairs(new Foo);
         * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
         */
        var toPairs = createToPairs(keys);

        /**
         * Creates an array of own and inherited enumerable string keyed-value pairs
         * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
         * or set, its entries are returned.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @alias entriesIn
         * @category Object
         * @param {Object} object The object to query.
         * @returns {Array} Returns the key-value pairs.
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.toPairsIn(new Foo);
         * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
         */
        var toPairsIn = createToPairs(keysIn);

        /**
         * An alternative to `_.reduce`; this method transforms `object` to a new
         * `accumulator` object which is the result of running each of its own
         * enumerable string keyed properties thru `iteratee`, with each invocation
         * potentially mutating the `accumulator` object. If `accumulator` is not
         * provided, a new object with the same `[[Prototype]]` will be used. The
         * iteratee is invoked with four arguments: (accumulator, value, key, object).
         * Iteratee functions may exit iteration early by explicitly returning `false`.
         *
         * @static
         * @memberOf _
         * @since 1.3.0
         * @category Object
         * @param {Object} object The object to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @param {*} [accumulator] The custom accumulator value.
         * @returns {*} Returns the accumulated value.
         * @example
         *
         * _.transform([2, 3, 4], function(result, n) {
         *   result.push(n *= n);
         *   return n % 2 == 0;
         * }, []);
         * // => [4, 9]
         *
         * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
         *   (result[value] || (result[value] = [])).push(key);
         * }, {});
         * // => { '1': ['a', 'c'], '2': ['b'] }
         */
        function transform(object, iteratee, accumulator) {
          var isArr = isArray(object),
              isArrLike = isArr || isBuffer(object) || isTypedArray(object);

          iteratee = getIteratee(iteratee, 4);
          if (accumulator == null) {
            var Ctor = object && object.constructor;
            if (isArrLike) {
              accumulator = isArr ? new Ctor : [];
            }
            else if (isObject(object)) {
              accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
            }
            else {
              accumulator = {};
            }
          }
          (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
            return iteratee(accumulator, value, index, object);
          });
          return accumulator;
        }

        /**
         * Removes the property at `path` of `object`.
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Object
         * @param {Object} object The object to modify.
         * @param {Array|string} path The path of the property to unset.
         * @returns {boolean} Returns `true` if the property is deleted, else `false`.
         * @example
         *
         * var object = { 'a': [{ 'b': { 'c': 7 } }] };
         * _.unset(object, 'a[0].b.c');
         * // => true
         *
         * console.log(object);
         * // => { 'a': [{ 'b': {} }] };
         *
         * _.unset(object, ['a', '0', 'b', 'c']);
         * // => true
         *
         * console.log(object);
         * // => { 'a': [{ 'b': {} }] };
         */
        function unset(object, path) {
          return object == null ? true : baseUnset(object, path);
        }

        /**
         * This method is like `_.set` except that accepts `updater` to produce the
         * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
         * is invoked with one argument: (value).
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 4.6.0
         * @category Object
         * @param {Object} object The object to modify.
         * @param {Array|string} path The path of the property to set.
         * @param {Function} updater The function to produce the updated value.
         * @returns {Object} Returns `object`.
         * @example
         *
         * var object = { 'a': [{ 'b': { 'c': 3 } }] };
         *
         * _.update(object, 'a[0].b.c', function(n) { return n * n; });
         * console.log(object.a[0].b.c);
         * // => 9
         *
         * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
         * console.log(object.x[0].y.z);
         * // => 0
         */
        function update(object, path, updater) {
          return object == null ? object : baseUpdate(object, path, castFunction(updater));
        }

        /**
         * This method is like `_.update` except that it accepts `customizer` which is
         * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
         * path creation is handled by the method instead. The `customizer` is invoked
         * with three arguments: (nsValue, key, nsObject).
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 4.6.0
         * @category Object
         * @param {Object} object The object to modify.
         * @param {Array|string} path The path of the property to set.
         * @param {Function} updater The function to produce the updated value.
         * @param {Function} [customizer] The function to customize assigned values.
         * @returns {Object} Returns `object`.
         * @example
         *
         * var object = {};
         *
         * _.updateWith(object, '[0][1]', _.constant('a'), Object);
         * // => { '0': { '1': 'a' } }
         */
        function updateWith(object, path, updater, customizer) {
          customizer = typeof customizer == 'function' ? customizer : undefined$1;
          return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
        }

        /**
         * Creates an array of the own enumerable string keyed property values of `object`.
         *
         * **Note:** Non-object values are coerced to objects.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Object
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property values.
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.values(new Foo);
         * // => [1, 2] (iteration order is not guaranteed)
         *
         * _.values('hi');
         * // => ['h', 'i']
         */
        function values(object) {
          return object == null ? [] : baseValues(object, keys(object));
        }

        /**
         * Creates an array of the own and inherited enumerable string keyed property
         * values of `object`.
         *
         * **Note:** Non-object values are coerced to objects.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Object
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property values.
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.valuesIn(new Foo);
         * // => [1, 2, 3] (iteration order is not guaranteed)
         */
        function valuesIn(object) {
          return object == null ? [] : baseValues(object, keysIn(object));
        }

        /*------------------------------------------------------------------------*/

        /**
         * Clamps `number` within the inclusive `lower` and `upper` bounds.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Number
         * @param {number} number The number to clamp.
         * @param {number} [lower] The lower bound.
         * @param {number} upper The upper bound.
         * @returns {number} Returns the clamped number.
         * @example
         *
         * _.clamp(-10, -5, 5);
         * // => -5
         *
         * _.clamp(10, -5, 5);
         * // => 5
         */
        function clamp(number, lower, upper) {
          if (upper === undefined$1) {
            upper = lower;
            lower = undefined$1;
          }
          if (upper !== undefined$1) {
            upper = toNumber(upper);
            upper = upper === upper ? upper : 0;
          }
          if (lower !== undefined$1) {
            lower = toNumber(lower);
            lower = lower === lower ? lower : 0;
          }
          return baseClamp(toNumber(number), lower, upper);
        }

        /**
         * Checks if `n` is between `start` and up to, but not including, `end`. If
         * `end` is not specified, it's set to `start` with `start` then set to `0`.
         * If `start` is greater than `end` the params are swapped to support
         * negative ranges.
         *
         * @static
         * @memberOf _
         * @since 3.3.0
         * @category Number
         * @param {number} number The number to check.
         * @param {number} [start=0] The start of the range.
         * @param {number} end The end of the range.
         * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
         * @see _.range, _.rangeRight
         * @example
         *
         * _.inRange(3, 2, 4);
         * // => true
         *
         * _.inRange(4, 8);
         * // => true
         *
         * _.inRange(4, 2);
         * // => false
         *
         * _.inRange(2, 2);
         * // => false
         *
         * _.inRange(1.2, 2);
         * // => true
         *
         * _.inRange(5.2, 4);
         * // => false
         *
         * _.inRange(-3, -2, -6);
         * // => true
         */
        function inRange(number, start, end) {
          start = toFinite(start);
          if (end === undefined$1) {
            end = start;
            start = 0;
          } else {
            end = toFinite(end);
          }
          number = toNumber(number);
          return baseInRange(number, start, end);
        }

        /**
         * Produces a random number between the inclusive `lower` and `upper` bounds.
         * If only one argument is provided a number between `0` and the given number
         * is returned. If `floating` is `true`, or either `lower` or `upper` are
         * floats, a floating-point number is returned instead of an integer.
         *
         * **Note:** JavaScript follows the IEEE-754 standard for resolving
         * floating-point values which can produce unexpected results.
         *
         * @static
         * @memberOf _
         * @since 0.7.0
         * @category Number
         * @param {number} [lower=0] The lower bound.
         * @param {number} [upper=1] The upper bound.
         * @param {boolean} [floating] Specify returning a floating-point number.
         * @returns {number} Returns the random number.
         * @example
         *
         * _.random(0, 5);
         * // => an integer between 0 and 5
         *
         * _.random(5);
         * // => also an integer between 0 and 5
         *
         * _.random(5, true);
         * // => a floating-point number between 0 and 5
         *
         * _.random(1.2, 5.2);
         * // => a floating-point number between 1.2 and 5.2
         */
        function random(lower, upper, floating) {
          if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
            upper = floating = undefined$1;
          }
          if (floating === undefined$1) {
            if (typeof upper == 'boolean') {
              floating = upper;
              upper = undefined$1;
            }
            else if (typeof lower == 'boolean') {
              floating = lower;
              lower = undefined$1;
            }
          }
          if (lower === undefined$1 && upper === undefined$1) {
            lower = 0;
            upper = 1;
          }
          else {
            lower = toFinite(lower);
            if (upper === undefined$1) {
              upper = lower;
              lower = 0;
            } else {
              upper = toFinite(upper);
            }
          }
          if (lower > upper) {
            var temp = lower;
            lower = upper;
            upper = temp;
          }
          if (floating || lower % 1 || upper % 1) {
            var rand = nativeRandom();
            return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
          }
          return baseRandom(lower, upper);
        }

        /*------------------------------------------------------------------------*/

        /**
         * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category String
         * @param {string} [string=''] The string to convert.
         * @returns {string} Returns the camel cased string.
         * @example
         *
         * _.camelCase('Foo Bar');
         * // => 'fooBar'
         *
         * _.camelCase('--foo-bar--');
         * // => 'fooBar'
         *
         * _.camelCase('__FOO_BAR__');
         * // => 'fooBar'
         */
        var camelCase = createCompounder(function(result, word, index) {
          word = word.toLowerCase();
          return result + (index ? capitalize(word) : word);
        });

        /**
         * Converts the first character of `string` to upper case and the remaining
         * to lower case.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category String
         * @param {string} [string=''] The string to capitalize.
         * @returns {string} Returns the capitalized string.
         * @example
         *
         * _.capitalize('FRED');
         * // => 'Fred'
         */
        function capitalize(string) {
          return upperFirst(toString(string).toLowerCase());
        }

        /**
         * Deburrs `string` by converting
         * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
         * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
         * letters to basic Latin letters and removing
         * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category String
         * @param {string} [string=''] The string to deburr.
         * @returns {string} Returns the deburred string.
         * @example
         *
         * _.deburr('déjà vu');
         * // => 'deja vu'
         */
        function deburr(string) {
          string = toString(string);
          return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
        }

        /**
         * Checks if `string` ends with the given target string.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category String
         * @param {string} [string=''] The string to inspect.
         * @param {string} [target] The string to search for.
         * @param {number} [position=string.length] The position to search up to.
         * @returns {boolean} Returns `true` if `string` ends with `target`,
         *  else `false`.
         * @example
         *
         * _.endsWith('abc', 'c');
         * // => true
         *
         * _.endsWith('abc', 'b');
         * // => false
         *
         * _.endsWith('abc', 'b', 2);
         * // => true
         */
        function endsWith(string, target, position) {
          string = toString(string);
          target = baseToString(target);

          var length = string.length;
          position = position === undefined$1
            ? length
            : baseClamp(toInteger(position), 0, length);

          var end = position;
          position -= target.length;
          return position >= 0 && string.slice(position, end) == target;
        }

        /**
         * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
         * corresponding HTML entities.
         *
         * **Note:** No other characters are escaped. To escape additional
         * characters use a third-party library like [_he_](https://mths.be/he).
         *
         * Though the ">" character is escaped for symmetry, characters like
         * ">" and "/" don't need escaping in HTML and have no special meaning
         * unless they're part of a tag or unquoted attribute value. See
         * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
         * (under "semi-related fun fact") for more details.
         *
         * When working with HTML you should always
         * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
         * XSS vectors.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category String
         * @param {string} [string=''] The string to escape.
         * @returns {string} Returns the escaped string.
         * @example
         *
         * _.escape('fred, barney, & pebbles');
         * // => 'fred, barney, &amp; pebbles'
         */
        function escape(string) {
          string = toString(string);
          return (string && reHasUnescapedHtml.test(string))
            ? string.replace(reUnescapedHtml, escapeHtmlChar)
            : string;
        }

        /**
         * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
         * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category String
         * @param {string} [string=''] The string to escape.
         * @returns {string} Returns the escaped string.
         * @example
         *
         * _.escapeRegExp('[lodash](https://lodash.com/)');
         * // => '\[lodash\]\(https://lodash\.com/\)'
         */
        function escapeRegExp(string) {
          string = toString(string);
          return (string && reHasRegExpChar.test(string))
            ? string.replace(reRegExpChar, '\\$&')
            : string;
        }

        /**
         * Converts `string` to
         * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category String
         * @param {string} [string=''] The string to convert.
         * @returns {string} Returns the kebab cased string.
         * @example
         *
         * _.kebabCase('Foo Bar');
         * // => 'foo-bar'
         *
         * _.kebabCase('fooBar');
         * // => 'foo-bar'
         *
         * _.kebabCase('__FOO_BAR__');
         * // => 'foo-bar'
         */
        var kebabCase = createCompounder(function(result, word, index) {
          return result + (index ? '-' : '') + word.toLowerCase();
        });

        /**
         * Converts `string`, as space separated words, to lower case.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to convert.
         * @returns {string} Returns the lower cased string.
         * @example
         *
         * _.lowerCase('--Foo-Bar--');
         * // => 'foo bar'
         *
         * _.lowerCase('fooBar');
         * // => 'foo bar'
         *
         * _.lowerCase('__FOO_BAR__');
         * // => 'foo bar'
         */
        var lowerCase = createCompounder(function(result, word, index) {
          return result + (index ? ' ' : '') + word.toLowerCase();
        });

        /**
         * Converts the first character of `string` to lower case.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to convert.
         * @returns {string} Returns the converted string.
         * @example
         *
         * _.lowerFirst('Fred');
         * // => 'fred'
         *
         * _.lowerFirst('FRED');
         * // => 'fRED'
         */
        var lowerFirst = createCaseFirst('toLowerCase');

        /**
         * Pads `string` on the left and right sides if it's shorter than `length`.
         * Padding characters are truncated if they can't be evenly divided by `length`.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category String
         * @param {string} [string=''] The string to pad.
         * @param {number} [length=0] The padding length.
         * @param {string} [chars=' '] The string used as padding.
         * @returns {string} Returns the padded string.
         * @example
         *
         * _.pad('abc', 8);
         * // => '  abc   '
         *
         * _.pad('abc', 8, '_-');
         * // => '_-abc_-_'
         *
         * _.pad('abc', 3);
         * // => 'abc'
         */
        function pad(string, length, chars) {
          string = toString(string);
          length = toInteger(length);

          var strLength = length ? stringSize(string) : 0;
          if (!length || strLength >= length) {
            return string;
          }
          var mid = (length - strLength) / 2;
          return (
            createPadding(nativeFloor(mid), chars) +
            string +
            createPadding(nativeCeil(mid), chars)
          );
        }

        /**
         * Pads `string` on the right side if it's shorter than `length`. Padding
         * characters are truncated if they exceed `length`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to pad.
         * @param {number} [length=0] The padding length.
         * @param {string} [chars=' '] The string used as padding.
         * @returns {string} Returns the padded string.
         * @example
         *
         * _.padEnd('abc', 6);
         * // => 'abc   '
         *
         * _.padEnd('abc', 6, '_-');
         * // => 'abc_-_'
         *
         * _.padEnd('abc', 3);
         * // => 'abc'
         */
        function padEnd(string, length, chars) {
          string = toString(string);
          length = toInteger(length);

          var strLength = length ? stringSize(string) : 0;
          return (length && strLength < length)
            ? (string + createPadding(length - strLength, chars))
            : string;
        }

        /**
         * Pads `string` on the left side if it's shorter than `length`. Padding
         * characters are truncated if they exceed `length`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to pad.
         * @param {number} [length=0] The padding length.
         * @param {string} [chars=' '] The string used as padding.
         * @returns {string} Returns the padded string.
         * @example
         *
         * _.padStart('abc', 6);
         * // => '   abc'
         *
         * _.padStart('abc', 6, '_-');
         * // => '_-_abc'
         *
         * _.padStart('abc', 3);
         * // => 'abc'
         */
        function padStart(string, length, chars) {
          string = toString(string);
          length = toInteger(length);

          var strLength = length ? stringSize(string) : 0;
          return (length && strLength < length)
            ? (createPadding(length - strLength, chars) + string)
            : string;
        }

        /**
         * Converts `string` to an integer of the specified radix. If `radix` is
         * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
         * hexadecimal, in which case a `radix` of `16` is used.
         *
         * **Note:** This method aligns with the
         * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
         *
         * @static
         * @memberOf _
         * @since 1.1.0
         * @category String
         * @param {string} string The string to convert.
         * @param {number} [radix=10] The radix to interpret `value` by.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {number} Returns the converted integer.
         * @example
         *
         * _.parseInt('08');
         * // => 8
         *
         * _.map(['6', '08', '10'], _.parseInt);
         * // => [6, 8, 10]
         */
        function parseInt(string, radix, guard) {
          if (guard || radix == null) {
            radix = 0;
          } else if (radix) {
            radix = +radix;
          }
          return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
        }

        /**
         * Repeats the given string `n` times.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category String
         * @param {string} [string=''] The string to repeat.
         * @param {number} [n=1] The number of times to repeat the string.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {string} Returns the repeated string.
         * @example
         *
         * _.repeat('*', 3);
         * // => '***'
         *
         * _.repeat('abc', 2);
         * // => 'abcabc'
         *
         * _.repeat('abc', 0);
         * // => ''
         */
        function repeat(string, n, guard) {
          if ((guard ? isIterateeCall(string, n, guard) : n === undefined$1)) {
            n = 1;
          } else {
            n = toInteger(n);
          }
          return baseRepeat(toString(string), n);
        }

        /**
         * Replaces matches for `pattern` in `string` with `replacement`.
         *
         * **Note:** This method is based on
         * [`String#replace`](https://mdn.io/String/replace).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to modify.
         * @param {RegExp|string} pattern The pattern to replace.
         * @param {Function|string} replacement The match replacement.
         * @returns {string} Returns the modified string.
         * @example
         *
         * _.replace('Hi Fred', 'Fred', 'Barney');
         * // => 'Hi Barney'
         */
        function replace() {
          var args = arguments,
              string = toString(args[0]);

          return args.length < 3 ? string : string.replace(args[1], args[2]);
        }

        /**
         * Converts `string` to
         * [snake case](https://en.wikipedia.org/wiki/Snake_case).
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category String
         * @param {string} [string=''] The string to convert.
         * @returns {string} Returns the snake cased string.
         * @example
         *
         * _.snakeCase('Foo Bar');
         * // => 'foo_bar'
         *
         * _.snakeCase('fooBar');
         * // => 'foo_bar'
         *
         * _.snakeCase('--FOO-BAR--');
         * // => 'foo_bar'
         */
        var snakeCase = createCompounder(function(result, word, index) {
          return result + (index ? '_' : '') + word.toLowerCase();
        });

        /**
         * Splits `string` by `separator`.
         *
         * **Note:** This method is based on
         * [`String#split`](https://mdn.io/String/split).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to split.
         * @param {RegExp|string} separator The separator pattern to split by.
         * @param {number} [limit] The length to truncate results to.
         * @returns {Array} Returns the string segments.
         * @example
         *
         * _.split('a-b-c', '-', 2);
         * // => ['a', 'b']
         */
        function split(string, separator, limit) {
          if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
            separator = limit = undefined$1;
          }
          limit = limit === undefined$1 ? MAX_ARRAY_LENGTH : limit >>> 0;
          if (!limit) {
            return [];
          }
          string = toString(string);
          if (string && (
                typeof separator == 'string' ||
                (separator != null && !isRegExp(separator))
              )) {
            separator = baseToString(separator);
            if (!separator && hasUnicode(string)) {
              return castSlice(stringToArray(string), 0, limit);
            }
          }
          return string.split(separator, limit);
        }

        /**
         * Converts `string` to
         * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
         *
         * @static
         * @memberOf _
         * @since 3.1.0
         * @category String
         * @param {string} [string=''] The string to convert.
         * @returns {string} Returns the start cased string.
         * @example
         *
         * _.startCase('--foo-bar--');
         * // => 'Foo Bar'
         *
         * _.startCase('fooBar');
         * // => 'Foo Bar'
         *
         * _.startCase('__FOO_BAR__');
         * // => 'FOO BAR'
         */
        var startCase = createCompounder(function(result, word, index) {
          return result + (index ? ' ' : '') + upperFirst(word);
        });

        /**
         * Checks if `string` starts with the given target string.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category String
         * @param {string} [string=''] The string to inspect.
         * @param {string} [target] The string to search for.
         * @param {number} [position=0] The position to search from.
         * @returns {boolean} Returns `true` if `string` starts with `target`,
         *  else `false`.
         * @example
         *
         * _.startsWith('abc', 'a');
         * // => true
         *
         * _.startsWith('abc', 'b');
         * // => false
         *
         * _.startsWith('abc', 'b', 1);
         * // => true
         */
        function startsWith(string, target, position) {
          string = toString(string);
          position = position == null
            ? 0
            : baseClamp(toInteger(position), 0, string.length);

          target = baseToString(target);
          return string.slice(position, position + target.length) == target;
        }

        /**
         * Creates a compiled template function that can interpolate data properties
         * in "interpolate" delimiters, HTML-escape interpolated data properties in
         * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
         * properties may be accessed as free variables in the template. If a setting
         * object is given, it takes precedence over `_.templateSettings` values.
         *
         * **Note:** In the development build `_.template` utilizes
         * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
         * for easier debugging.
         *
         * For more information on precompiling templates see
         * [lodash's custom builds documentation](https://lodash.com/custom-builds).
         *
         * For more information on Chrome extension sandboxes see
         * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category String
         * @param {string} [string=''] The template string.
         * @param {Object} [options={}] The options object.
         * @param {RegExp} [options.escape=_.templateSettings.escape]
         *  The HTML "escape" delimiter.
         * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
         *  The "evaluate" delimiter.
         * @param {Object} [options.imports=_.templateSettings.imports]
         *  An object to import into the template as free variables.
         * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
         *  The "interpolate" delimiter.
         * @param {string} [options.sourceURL='lodash.templateSources[n]']
         *  The sourceURL of the compiled template.
         * @param {string} [options.variable='obj']
         *  The data object variable name.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {Function} Returns the compiled template function.
         * @example
         *
         * // Use the "interpolate" delimiter to create a compiled template.
         * var compiled = _.template('hello <%= user %>!');
         * compiled({ 'user': 'fred' });
         * // => 'hello fred!'
         *
         * // Use the HTML "escape" delimiter to escape data property values.
         * var compiled = _.template('<b><%- value %></b>');
         * compiled({ 'value': '<script>' });
         * // => '<b>&lt;script&gt;</b>'
         *
         * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
         * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
         * compiled({ 'users': ['fred', 'barney'] });
         * // => '<li>fred</li><li>barney</li>'
         *
         * // Use the internal `print` function in "evaluate" delimiters.
         * var compiled = _.template('<% print("hello " + user); %>!');
         * compiled({ 'user': 'barney' });
         * // => 'hello barney!'
         *
         * // Use the ES template literal delimiter as an "interpolate" delimiter.
         * // Disable support by replacing the "interpolate" delimiter.
         * var compiled = _.template('hello ${ user }!');
         * compiled({ 'user': 'pebbles' });
         * // => 'hello pebbles!'
         *
         * // Use backslashes to treat delimiters as plain text.
         * var compiled = _.template('<%= "\\<%- value %\\>" %>');
         * compiled({ 'value': 'ignored' });
         * // => '<%- value %>'
         *
         * // Use the `imports` option to import `jQuery` as `jq`.
         * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
         * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
         * compiled({ 'users': ['fred', 'barney'] });
         * // => '<li>fred</li><li>barney</li>'
         *
         * // Use the `sourceURL` option to specify a custom sourceURL for the template.
         * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
         * compiled(data);
         * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
         *
         * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
         * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
         * compiled.source;
         * // => function(data) {
         * //   var __t, __p = '';
         * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
         * //   return __p;
         * // }
         *
         * // Use custom template delimiters.
         * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
         * var compiled = _.template('hello {{ user }}!');
         * compiled({ 'user': 'mustache' });
         * // => 'hello mustache!'
         *
         * // Use the `source` property to inline compiled templates for meaningful
         * // line numbers in error messages and stack traces.
         * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
         *   var JST = {\
         *     "main": ' + _.template(mainText).source + '\
         *   };\
         * ');
         */
        function template(string, options, guard) {
          // Based on John Resig's `tmpl` implementation
          // (http://ejohn.org/blog/javascript-micro-templating/)
          // and Laura Doktorova's doT.js (https://github.com/olado/doT).
          var settings = lodash.templateSettings;

          if (guard && isIterateeCall(string, options, guard)) {
            options = undefined$1;
          }
          string = toString(string);
          options = assignInWith({}, options, settings, customDefaultsAssignIn);

          var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
              importsKeys = keys(imports),
              importsValues = baseValues(imports, importsKeys);

          var isEscaping,
              isEvaluating,
              index = 0,
              interpolate = options.interpolate || reNoMatch,
              source = "__p += '";

          // Compile the regexp to match each delimiter.
          var reDelimiters = RegExp(
            (options.escape || reNoMatch).source + '|' +
            interpolate.source + '|' +
            (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
            (options.evaluate || reNoMatch).source + '|$'
          , 'g');

          // Use a sourceURL for easier debugging.
          // The sourceURL gets injected into the source that's eval-ed, so be careful
          // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
          // and escape the comment, thus injecting code that gets evaled.
          var sourceURL = '//# sourceURL=' +
            (hasOwnProperty.call(options, 'sourceURL')
              ? (options.sourceURL + '').replace(/\s/g, ' ')
              : ('lodash.templateSources[' + (++templateCounter) + ']')
            ) + '\n';

          string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
            interpolateValue || (interpolateValue = esTemplateValue);

            // Escape characters that can't be included in string literals.
            source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

            // Replace delimiters with snippets.
            if (escapeValue) {
              isEscaping = true;
              source += "' +\n__e(" + escapeValue + ") +\n'";
            }
            if (evaluateValue) {
              isEvaluating = true;
              source += "';\n" + evaluateValue + ";\n__p += '";
            }
            if (interpolateValue) {
              source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
            }
            index = offset + match.length;

            // The JS engine embedded in Adobe products needs `match` returned in
            // order to produce the correct `offset` value.
            return match;
          });

          source += "';\n";

          // If `variable` is not specified wrap a with-statement around the generated
          // code to add the data object to the top of the scope chain.
          var variable = hasOwnProperty.call(options, 'variable') && options.variable;
          if (!variable) {
            source = 'with (obj) {\n' + source + '\n}\n';
          }
          // Throw an error if a forbidden character was found in `variable`, to prevent
          // potential command injection attacks.
          else if (reForbiddenIdentifierChars.test(variable)) {
            throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
          }

          // Cleanup code by stripping empty strings.
          source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
            .replace(reEmptyStringMiddle, '$1')
            .replace(reEmptyStringTrailing, '$1;');

          // Frame code as the function body.
          source = 'function(' + (variable || 'obj') + ') {\n' +
            (variable
              ? ''
              : 'obj || (obj = {});\n'
            ) +
            "var __t, __p = ''" +
            (isEscaping
               ? ', __e = _.escape'
               : ''
            ) +
            (isEvaluating
              ? ', __j = Array.prototype.join;\n' +
                "function print() { __p += __j.call(arguments, '') }\n"
              : ';\n'
            ) +
            source +
            'return __p\n}';

          var result = attempt(function() {
            return Function(importsKeys, sourceURL + 'return ' + source)
              .apply(undefined$1, importsValues);
          });

          // Provide the compiled function's source by its `toString` method or
          // the `source` property as a convenience for inlining compiled templates.
          result.source = source;
          if (isError(result)) {
            throw result;
          }
          return result;
        }

        /**
         * Converts `string`, as a whole, to lower case just like
         * [String#toLowerCase](https://mdn.io/toLowerCase).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to convert.
         * @returns {string} Returns the lower cased string.
         * @example
         *
         * _.toLower('--Foo-Bar--');
         * // => '--foo-bar--'
         *
         * _.toLower('fooBar');
         * // => 'foobar'
         *
         * _.toLower('__FOO_BAR__');
         * // => '__foo_bar__'
         */
        function toLower(value) {
          return toString(value).toLowerCase();
        }

        /**
         * Converts `string`, as a whole, to upper case just like
         * [String#toUpperCase](https://mdn.io/toUpperCase).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to convert.
         * @returns {string} Returns the upper cased string.
         * @example
         *
         * _.toUpper('--foo-bar--');
         * // => '--FOO-BAR--'
         *
         * _.toUpper('fooBar');
         * // => 'FOOBAR'
         *
         * _.toUpper('__foo_bar__');
         * // => '__FOO_BAR__'
         */
        function toUpper(value) {
          return toString(value).toUpperCase();
        }

        /**
         * Removes leading and trailing whitespace or specified characters from `string`.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category String
         * @param {string} [string=''] The string to trim.
         * @param {string} [chars=whitespace] The characters to trim.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {string} Returns the trimmed string.
         * @example
         *
         * _.trim('  abc  ');
         * // => 'abc'
         *
         * _.trim('-_-abc-_-', '_-');
         * // => 'abc'
         *
         * _.map(['  foo  ', '  bar  '], _.trim);
         * // => ['foo', 'bar']
         */
        function trim(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined$1)) {
            return baseTrim(string);
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string),
              chrSymbols = stringToArray(chars),
              start = charsStartIndex(strSymbols, chrSymbols),
              end = charsEndIndex(strSymbols, chrSymbols) + 1;

          return castSlice(strSymbols, start, end).join('');
        }

        /**
         * Removes trailing whitespace or specified characters from `string`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to trim.
         * @param {string} [chars=whitespace] The characters to trim.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {string} Returns the trimmed string.
         * @example
         *
         * _.trimEnd('  abc  ');
         * // => '  abc'
         *
         * _.trimEnd('-_-abc-_-', '_-');
         * // => '-_-abc'
         */
        function trimEnd(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined$1)) {
            return string.slice(0, trimmedEndIndex(string) + 1);
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string),
              end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

          return castSlice(strSymbols, 0, end).join('');
        }

        /**
         * Removes leading whitespace or specified characters from `string`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to trim.
         * @param {string} [chars=whitespace] The characters to trim.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {string} Returns the trimmed string.
         * @example
         *
         * _.trimStart('  abc  ');
         * // => 'abc  '
         *
         * _.trimStart('-_-abc-_-', '_-');
         * // => 'abc-_-'
         */
        function trimStart(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined$1)) {
            return string.replace(reTrimStart, '');
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string),
              start = charsStartIndex(strSymbols, stringToArray(chars));

          return castSlice(strSymbols, start).join('');
        }

        /**
         * Truncates `string` if it's longer than the given maximum string length.
         * The last characters of the truncated string are replaced with the omission
         * string which defaults to "...".
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to truncate.
         * @param {Object} [options={}] The options object.
         * @param {number} [options.length=30] The maximum string length.
         * @param {string} [options.omission='...'] The string to indicate text is omitted.
         * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
         * @returns {string} Returns the truncated string.
         * @example
         *
         * _.truncate('hi-diddly-ho there, neighborino');
         * // => 'hi-diddly-ho there, neighbo...'
         *
         * _.truncate('hi-diddly-ho there, neighborino', {
         *   'length': 24,
         *   'separator': ' '
         * });
         * // => 'hi-diddly-ho there,...'
         *
         * _.truncate('hi-diddly-ho there, neighborino', {
         *   'length': 24,
         *   'separator': /,? +/
         * });
         * // => 'hi-diddly-ho there...'
         *
         * _.truncate('hi-diddly-ho there, neighborino', {
         *   'omission': ' [...]'
         * });
         * // => 'hi-diddly-ho there, neig [...]'
         */
        function truncate(string, options) {
          var length = DEFAULT_TRUNC_LENGTH,
              omission = DEFAULT_TRUNC_OMISSION;

          if (isObject(options)) {
            var separator = 'separator' in options ? options.separator : separator;
            length = 'length' in options ? toInteger(options.length) : length;
            omission = 'omission' in options ? baseToString(options.omission) : omission;
          }
          string = toString(string);

          var strLength = string.length;
          if (hasUnicode(string)) {
            var strSymbols = stringToArray(string);
            strLength = strSymbols.length;
          }
          if (length >= strLength) {
            return string;
          }
          var end = length - stringSize(omission);
          if (end < 1) {
            return omission;
          }
          var result = strSymbols
            ? castSlice(strSymbols, 0, end).join('')
            : string.slice(0, end);

          if (separator === undefined$1) {
            return result + omission;
          }
          if (strSymbols) {
            end += (result.length - end);
          }
          if (isRegExp(separator)) {
            if (string.slice(end).search(separator)) {
              var match,
                  substring = result;

              if (!separator.global) {
                separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
              }
              separator.lastIndex = 0;
              while ((match = separator.exec(substring))) {
                var newEnd = match.index;
              }
              result = result.slice(0, newEnd === undefined$1 ? end : newEnd);
            }
          } else if (string.indexOf(baseToString(separator), end) != end) {
            var index = result.lastIndexOf(separator);
            if (index > -1) {
              result = result.slice(0, index);
            }
          }
          return result + omission;
        }

        /**
         * The inverse of `_.escape`; this method converts the HTML entities
         * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
         * their corresponding characters.
         *
         * **Note:** No other HTML entities are unescaped. To unescape additional
         * HTML entities use a third-party library like [_he_](https://mths.be/he).
         *
         * @static
         * @memberOf _
         * @since 0.6.0
         * @category String
         * @param {string} [string=''] The string to unescape.
         * @returns {string} Returns the unescaped string.
         * @example
         *
         * _.unescape('fred, barney, &amp; pebbles');
         * // => 'fred, barney, & pebbles'
         */
        function unescape(string) {
          string = toString(string);
          return (string && reHasEscapedHtml.test(string))
            ? string.replace(reEscapedHtml, unescapeHtmlChar)
            : string;
        }

        /**
         * Converts `string`, as space separated words, to upper case.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to convert.
         * @returns {string} Returns the upper cased string.
         * @example
         *
         * _.upperCase('--foo-bar');
         * // => 'FOO BAR'
         *
         * _.upperCase('fooBar');
         * // => 'FOO BAR'
         *
         * _.upperCase('__foo_bar__');
         * // => 'FOO BAR'
         */
        var upperCase = createCompounder(function(result, word, index) {
          return result + (index ? ' ' : '') + word.toUpperCase();
        });

        /**
         * Converts the first character of `string` to upper case.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to convert.
         * @returns {string} Returns the converted string.
         * @example
         *
         * _.upperFirst('fred');
         * // => 'Fred'
         *
         * _.upperFirst('FRED');
         * // => 'FRED'
         */
        var upperFirst = createCaseFirst('toUpperCase');

        /**
         * Splits `string` into an array of its words.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category String
         * @param {string} [string=''] The string to inspect.
         * @param {RegExp|string} [pattern] The pattern to match words.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {Array} Returns the words of `string`.
         * @example
         *
         * _.words('fred, barney, & pebbles');
         * // => ['fred', 'barney', 'pebbles']
         *
         * _.words('fred, barney, & pebbles', /[^, ]+/g);
         * // => ['fred', 'barney', '&', 'pebbles']
         */
        function words(string, pattern, guard) {
          string = toString(string);
          pattern = guard ? undefined$1 : pattern;

          if (pattern === undefined$1) {
            return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
          }
          return string.match(pattern) || [];
        }

        /*------------------------------------------------------------------------*/

        /**
         * Attempts to invoke `func`, returning either the result or the caught error
         * object. Any additional arguments are provided to `func` when it's invoked.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Util
         * @param {Function} func The function to attempt.
         * @param {...*} [args] The arguments to invoke `func` with.
         * @returns {*} Returns the `func` result or error object.
         * @example
         *
         * // Avoid throwing errors for invalid selectors.
         * var elements = _.attempt(function(selector) {
         *   return document.querySelectorAll(selector);
         * }, '>_>');
         *
         * if (_.isError(elements)) {
         *   elements = [];
         * }
         */
        var attempt = baseRest(function(func, args) {
          try {
            return apply(func, undefined$1, args);
          } catch (e) {
            return isError(e) ? e : new Error(e);
          }
        });

        /**
         * Binds methods of an object to the object itself, overwriting the existing
         * method.
         *
         * **Note:** This method doesn't set the "length" property of bound functions.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Util
         * @param {Object} object The object to bind and assign the bound methods to.
         * @param {...(string|string[])} methodNames The object method names to bind.
         * @returns {Object} Returns `object`.
         * @example
         *
         * var view = {
         *   'label': 'docs',
         *   'click': function() {
         *     console.log('clicked ' + this.label);
         *   }
         * };
         *
         * _.bindAll(view, ['click']);
         * jQuery(element).on('click', view.click);
         * // => Logs 'clicked docs' when clicked.
         */
        var bindAll = flatRest(function(object, methodNames) {
          arrayEach(methodNames, function(key) {
            key = toKey(key);
            baseAssignValue(object, key, bind(object[key], object));
          });
          return object;
        });

        /**
         * Creates a function that iterates over `pairs` and invokes the corresponding
         * function of the first predicate to return truthy. The predicate-function
         * pairs are invoked with the `this` binding and arguments of the created
         * function.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Util
         * @param {Array} pairs The predicate-function pairs.
         * @returns {Function} Returns the new composite function.
         * @example
         *
         * var func = _.cond([
         *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
         *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
         *   [_.stubTrue,                      _.constant('no match')]
         * ]);
         *
         * func({ 'a': 1, 'b': 2 });
         * // => 'matches A'
         *
         * func({ 'a': 0, 'b': 1 });
         * // => 'matches B'
         *
         * func({ 'a': '1', 'b': '2' });
         * // => 'no match'
         */
        function cond(pairs) {
          var length = pairs == null ? 0 : pairs.length,
              toIteratee = getIteratee();

          pairs = !length ? [] : arrayMap(pairs, function(pair) {
            if (typeof pair[1] != 'function') {
              throw new TypeError(FUNC_ERROR_TEXT);
            }
            return [toIteratee(pair[0]), pair[1]];
          });

          return baseRest(function(args) {
            var index = -1;
            while (++index < length) {
              var pair = pairs[index];
              if (apply(pair[0], this, args)) {
                return apply(pair[1], this, args);
              }
            }
          });
        }

        /**
         * Creates a function that invokes the predicate properties of `source` with
         * the corresponding property values of a given object, returning `true` if
         * all predicates return truthy, else `false`.
         *
         * **Note:** The created function is equivalent to `_.conformsTo` with
         * `source` partially applied.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Util
         * @param {Object} source The object of property predicates to conform to.
         * @returns {Function} Returns the new spec function.
         * @example
         *
         * var objects = [
         *   { 'a': 2, 'b': 1 },
         *   { 'a': 1, 'b': 2 }
         * ];
         *
         * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
         * // => [{ 'a': 1, 'b': 2 }]
         */
        function conforms(source) {
          return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
        }

        /**
         * Creates a function that returns `value`.
         *
         * @static
         * @memberOf _
         * @since 2.4.0
         * @category Util
         * @param {*} value The value to return from the new function.
         * @returns {Function} Returns the new constant function.
         * @example
         *
         * var objects = _.times(2, _.constant({ 'a': 1 }));
         *
         * console.log(objects);
         * // => [{ 'a': 1 }, { 'a': 1 }]
         *
         * console.log(objects[0] === objects[1]);
         * // => true
         */
        function constant(value) {
          return function() {
            return value;
          };
        }

        /**
         * Checks `value` to determine whether a default value should be returned in
         * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
         * or `undefined`.
         *
         * @static
         * @memberOf _
         * @since 4.14.0
         * @category Util
         * @param {*} value The value to check.
         * @param {*} defaultValue The default value.
         * @returns {*} Returns the resolved value.
         * @example
         *
         * _.defaultTo(1, 10);
         * // => 1
         *
         * _.defaultTo(undefined, 10);
         * // => 10
         */
        function defaultTo(value, defaultValue) {
          return (value == null || value !== value) ? defaultValue : value;
        }

        /**
         * Creates a function that returns the result of invoking the given functions
         * with the `this` binding of the created function, where each successive
         * invocation is supplied the return value of the previous.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Util
         * @param {...(Function|Function[])} [funcs] The functions to invoke.
         * @returns {Function} Returns the new composite function.
         * @see _.flowRight
         * @example
         *
         * function square(n) {
         *   return n * n;
         * }
         *
         * var addSquare = _.flow([_.add, square]);
         * addSquare(1, 2);
         * // => 9
         */
        var flow = createFlow();

        /**
         * This method is like `_.flow` except that it creates a function that
         * invokes the given functions from right to left.
         *
         * @static
         * @since 3.0.0
         * @memberOf _
         * @category Util
         * @param {...(Function|Function[])} [funcs] The functions to invoke.
         * @returns {Function} Returns the new composite function.
         * @see _.flow
         * @example
         *
         * function square(n) {
         *   return n * n;
         * }
         *
         * var addSquare = _.flowRight([square, _.add]);
         * addSquare(1, 2);
         * // => 9
         */
        var flowRight = createFlow(true);

        /**
         * This method returns the first argument it receives.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Util
         * @param {*} value Any value.
         * @returns {*} Returns `value`.
         * @example
         *
         * var object = { 'a': 1 };
         *
         * console.log(_.identity(object) === object);
         * // => true
         */
        function identity(value) {
          return value;
        }

        /**
         * Creates a function that invokes `func` with the arguments of the created
         * function. If `func` is a property name, the created function returns the
         * property value for a given element. If `func` is an array or object, the
         * created function returns `true` for elements that contain the equivalent
         * source properties, otherwise it returns `false`.
         *
         * @static
         * @since 4.0.0
         * @memberOf _
         * @category Util
         * @param {*} [func=_.identity] The value to convert to a callback.
         * @returns {Function} Returns the callback.
         * @example
         *
         * var users = [
         *   { 'user': 'barney', 'age': 36, 'active': true },
         *   { 'user': 'fred',   'age': 40, 'active': false }
         * ];
         *
         * // The `_.matches` iteratee shorthand.
         * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
         * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.filter(users, _.iteratee(['user', 'fred']));
         * // => [{ 'user': 'fred', 'age': 40 }]
         *
         * // The `_.property` iteratee shorthand.
         * _.map(users, _.iteratee('user'));
         * // => ['barney', 'fred']
         *
         * // Create custom iteratee shorthands.
         * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
         *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
         *     return func.test(string);
         *   };
         * });
         *
         * _.filter(['abc', 'def'], /ef/);
         * // => ['def']
         */
        function iteratee(func) {
          return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
        }

        /**
         * Creates a function that performs a partial deep comparison between a given
         * object and `source`, returning `true` if the given object has equivalent
         * property values, else `false`.
         *
         * **Note:** The created function is equivalent to `_.isMatch` with `source`
         * partially applied.
         *
         * Partial comparisons will match empty array and empty object `source`
         * values against any array or object value, respectively. See `_.isEqual`
         * for a list of supported value comparisons.
         *
         * **Note:** Multiple values can be checked by combining several matchers
         * using `_.overSome`
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Util
         * @param {Object} source The object of property values to match.
         * @returns {Function} Returns the new spec function.
         * @example
         *
         * var objects = [
         *   { 'a': 1, 'b': 2, 'c': 3 },
         *   { 'a': 4, 'b': 5, 'c': 6 }
         * ];
         *
         * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
         * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
         *
         * // Checking for several possible values
         * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
         * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
         */
        function matches(source) {
          return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
        }

        /**
         * Creates a function that performs a partial deep comparison between the
         * value at `path` of a given object to `srcValue`, returning `true` if the
         * object value is equivalent, else `false`.
         *
         * **Note:** Partial comparisons will match empty array and empty object
         * `srcValue` values against any array or object value, respectively. See
         * `_.isEqual` for a list of supported value comparisons.
         *
         * **Note:** Multiple values can be checked by combining several matchers
         * using `_.overSome`
         *
         * @static
         * @memberOf _
         * @since 3.2.0
         * @category Util
         * @param {Array|string} path The path of the property to get.
         * @param {*} srcValue The value to match.
         * @returns {Function} Returns the new spec function.
         * @example
         *
         * var objects = [
         *   { 'a': 1, 'b': 2, 'c': 3 },
         *   { 'a': 4, 'b': 5, 'c': 6 }
         * ];
         *
         * _.find(objects, _.matchesProperty('a', 4));
         * // => { 'a': 4, 'b': 5, 'c': 6 }
         *
         * // Checking for several possible values
         * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
         * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
         */
        function matchesProperty(path, srcValue) {
          return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
        }

        /**
         * Creates a function that invokes the method at `path` of a given object.
         * Any additional arguments are provided to the invoked method.
         *
         * @static
         * @memberOf _
         * @since 3.7.0
         * @category Util
         * @param {Array|string} path The path of the method to invoke.
         * @param {...*} [args] The arguments to invoke the method with.
         * @returns {Function} Returns the new invoker function.
         * @example
         *
         * var objects = [
         *   { 'a': { 'b': _.constant(2) } },
         *   { 'a': { 'b': _.constant(1) } }
         * ];
         *
         * _.map(objects, _.method('a.b'));
         * // => [2, 1]
         *
         * _.map(objects, _.method(['a', 'b']));
         * // => [2, 1]
         */
        var method = baseRest(function(path, args) {
          return function(object) {
            return baseInvoke(object, path, args);
          };
        });

        /**
         * The opposite of `_.method`; this method creates a function that invokes
         * the method at a given path of `object`. Any additional arguments are
         * provided to the invoked method.
         *
         * @static
         * @memberOf _
         * @since 3.7.0
         * @category Util
         * @param {Object} object The object to query.
         * @param {...*} [args] The arguments to invoke the method with.
         * @returns {Function} Returns the new invoker function.
         * @example
         *
         * var array = _.times(3, _.constant),
         *     object = { 'a': array, 'b': array, 'c': array };
         *
         * _.map(['a[2]', 'c[0]'], _.methodOf(object));
         * // => [2, 0]
         *
         * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
         * // => [2, 0]
         */
        var methodOf = baseRest(function(object, args) {
          return function(path) {
            return baseInvoke(object, path, args);
          };
        });

        /**
         * Adds all own enumerable string keyed function properties of a source
         * object to the destination object. If `object` is a function, then methods
         * are added to its prototype as well.
         *
         * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
         * avoid conflicts caused by modifying the original.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Util
         * @param {Function|Object} [object=lodash] The destination object.
         * @param {Object} source The object of functions to add.
         * @param {Object} [options={}] The options object.
         * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
         * @returns {Function|Object} Returns `object`.
         * @example
         *
         * function vowels(string) {
         *   return _.filter(string, function(v) {
         *     return /[aeiou]/i.test(v);
         *   });
         * }
         *
         * _.mixin({ 'vowels': vowels });
         * _.vowels('fred');
         * // => ['e']
         *
         * _('fred').vowels().value();
         * // => ['e']
         *
         * _.mixin({ 'vowels': vowels }, { 'chain': false });
         * _('fred').vowels();
         * // => ['e']
         */
        function mixin(object, source, options) {
          var props = keys(source),
              methodNames = baseFunctions(source, props);

          if (options == null &&
              !(isObject(source) && (methodNames.length || !props.length))) {
            options = source;
            source = object;
            object = this;
            methodNames = baseFunctions(source, keys(source));
          }
          var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
              isFunc = isFunction(object);

          arrayEach(methodNames, function(methodName) {
            var func = source[methodName];
            object[methodName] = func;
            if (isFunc) {
              object.prototype[methodName] = function() {
                var chainAll = this.__chain__;
                if (chain || chainAll) {
                  var result = object(this.__wrapped__),
                      actions = result.__actions__ = copyArray(this.__actions__);

                  actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
                  result.__chain__ = chainAll;
                  return result;
                }
                return func.apply(object, arrayPush([this.value()], arguments));
              };
            }
          });

          return object;
        }

        /**
         * Reverts the `_` variable to its previous value and returns a reference to
         * the `lodash` function.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Util
         * @returns {Function} Returns the `lodash` function.
         * @example
         *
         * var lodash = _.noConflict();
         */
        function noConflict() {
          if (root._ === this) {
            root._ = oldDash;
          }
          return this;
        }

        /**
         * This method returns `undefined`.
         *
         * @static
         * @memberOf _
         * @since 2.3.0
         * @category Util
         * @example
         *
         * _.times(2, _.noop);
         * // => [undefined, undefined]
         */
        function noop() {
          // No operation performed.
        }

        /**
         * Creates a function that gets the argument at index `n`. If `n` is negative,
         * the nth argument from the end is returned.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Util
         * @param {number} [n=0] The index of the argument to return.
         * @returns {Function} Returns the new pass-thru function.
         * @example
         *
         * var func = _.nthArg(1);
         * func('a', 'b', 'c', 'd');
         * // => 'b'
         *
         * var func = _.nthArg(-2);
         * func('a', 'b', 'c', 'd');
         * // => 'c'
         */
        function nthArg(n) {
          n = toInteger(n);
          return baseRest(function(args) {
            return baseNth(args, n);
          });
        }

        /**
         * Creates a function that invokes `iteratees` with the arguments it receives
         * and returns their results.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Util
         * @param {...(Function|Function[])} [iteratees=[_.identity]]
         *  The iteratees to invoke.
         * @returns {Function} Returns the new function.
         * @example
         *
         * var func = _.over([Math.max, Math.min]);
         *
         * func(1, 2, 3, 4);
         * // => [4, 1]
         */
        var over = createOver(arrayMap);

        /**
         * Creates a function that checks if **all** of the `predicates` return
         * truthy when invoked with the arguments it receives.
         *
         * Following shorthands are possible for providing predicates.
         * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
         * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Util
         * @param {...(Function|Function[])} [predicates=[_.identity]]
         *  The predicates to check.
         * @returns {Function} Returns the new function.
         * @example
         *
         * var func = _.overEvery([Boolean, isFinite]);
         *
         * func('1');
         * // => true
         *
         * func(null);
         * // => false
         *
         * func(NaN);
         * // => false
         */
        var overEvery = createOver(arrayEvery);

        /**
         * Creates a function that checks if **any** of the `predicates` return
         * truthy when invoked with the arguments it receives.
         *
         * Following shorthands are possible for providing predicates.
         * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
         * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Util
         * @param {...(Function|Function[])} [predicates=[_.identity]]
         *  The predicates to check.
         * @returns {Function} Returns the new function.
         * @example
         *
         * var func = _.overSome([Boolean, isFinite]);
         *
         * func('1');
         * // => true
         *
         * func(null);
         * // => true
         *
         * func(NaN);
         * // => false
         *
         * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
         * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
         */
        var overSome = createOver(arraySome);

        /**
         * Creates a function that returns the value at `path` of a given object.
         *
         * @static
         * @memberOf _
         * @since 2.4.0
         * @category Util
         * @param {Array|string} path The path of the property to get.
         * @returns {Function} Returns the new accessor function.
         * @example
         *
         * var objects = [
         *   { 'a': { 'b': 2 } },
         *   { 'a': { 'b': 1 } }
         * ];
         *
         * _.map(objects, _.property('a.b'));
         * // => [2, 1]
         *
         * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
         * // => [1, 2]
         */
        function property(path) {
          return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
        }

        /**
         * The opposite of `_.property`; this method creates a function that returns
         * the value at a given path of `object`.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Util
         * @param {Object} object The object to query.
         * @returns {Function} Returns the new accessor function.
         * @example
         *
         * var array = [0, 1, 2],
         *     object = { 'a': array, 'b': array, 'c': array };
         *
         * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
         * // => [2, 0]
         *
         * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
         * // => [2, 0]
         */
        function propertyOf(object) {
          return function(path) {
            return object == null ? undefined$1 : baseGet(object, path);
          };
        }

        /**
         * Creates an array of numbers (positive and/or negative) progressing from
         * `start` up to, but not including, `end`. A step of `-1` is used if a negative
         * `start` is specified without an `end` or `step`. If `end` is not specified,
         * it's set to `start` with `start` then set to `0`.
         *
         * **Note:** JavaScript follows the IEEE-754 standard for resolving
         * floating-point values which can produce unexpected results.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Util
         * @param {number} [start=0] The start of the range.
         * @param {number} end The end of the range.
         * @param {number} [step=1] The value to increment or decrement by.
         * @returns {Array} Returns the range of numbers.
         * @see _.inRange, _.rangeRight
         * @example
         *
         * _.range(4);
         * // => [0, 1, 2, 3]
         *
         * _.range(-4);
         * // => [0, -1, -2, -3]
         *
         * _.range(1, 5);
         * // => [1, 2, 3, 4]
         *
         * _.range(0, 20, 5);
         * // => [0, 5, 10, 15]
         *
         * _.range(0, -4, -1);
         * // => [0, -1, -2, -3]
         *
         * _.range(1, 4, 0);
         * // => [1, 1, 1]
         *
         * _.range(0);
         * // => []
         */
        var range = createRange();

        /**
         * This method is like `_.range` except that it populates values in
         * descending order.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Util
         * @param {number} [start=0] The start of the range.
         * @param {number} end The end of the range.
         * @param {number} [step=1] The value to increment or decrement by.
         * @returns {Array} Returns the range of numbers.
         * @see _.inRange, _.range
         * @example
         *
         * _.rangeRight(4);
         * // => [3, 2, 1, 0]
         *
         * _.rangeRight(-4);
         * // => [-3, -2, -1, 0]
         *
         * _.rangeRight(1, 5);
         * // => [4, 3, 2, 1]
         *
         * _.rangeRight(0, 20, 5);
         * // => [15, 10, 5, 0]
         *
         * _.rangeRight(0, -4, -1);
         * // => [-3, -2, -1, 0]
         *
         * _.rangeRight(1, 4, 0);
         * // => [1, 1, 1]
         *
         * _.rangeRight(0);
         * // => []
         */
        var rangeRight = createRange(true);

        /**
         * This method returns a new empty array.
         *
         * @static
         * @memberOf _
         * @since 4.13.0
         * @category Util
         * @returns {Array} Returns the new empty array.
         * @example
         *
         * var arrays = _.times(2, _.stubArray);
         *
         * console.log(arrays);
         * // => [[], []]
         *
         * console.log(arrays[0] === arrays[1]);
         * // => false
         */
        function stubArray() {
          return [];
        }

        /**
         * This method returns `false`.
         *
         * @static
         * @memberOf _
         * @since 4.13.0
         * @category Util
         * @returns {boolean} Returns `false`.
         * @example
         *
         * _.times(2, _.stubFalse);
         * // => [false, false]
         */
        function stubFalse() {
          return false;
        }

        /**
         * This method returns a new empty object.
         *
         * @static
         * @memberOf _
         * @since 4.13.0
         * @category Util
         * @returns {Object} Returns the new empty object.
         * @example
         *
         * var objects = _.times(2, _.stubObject);
         *
         * console.log(objects);
         * // => [{}, {}]
         *
         * console.log(objects[0] === objects[1]);
         * // => false
         */
        function stubObject() {
          return {};
        }

        /**
         * This method returns an empty string.
         *
         * @static
         * @memberOf _
         * @since 4.13.0
         * @category Util
         * @returns {string} Returns the empty string.
         * @example
         *
         * _.times(2, _.stubString);
         * // => ['', '']
         */
        function stubString() {
          return '';
        }

        /**
         * This method returns `true`.
         *
         * @static
         * @memberOf _
         * @since 4.13.0
         * @category Util
         * @returns {boolean} Returns `true`.
         * @example
         *
         * _.times(2, _.stubTrue);
         * // => [true, true]
         */
        function stubTrue() {
          return true;
        }

        /**
         * Invokes the iteratee `n` times, returning an array of the results of
         * each invocation. The iteratee is invoked with one argument; (index).
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Util
         * @param {number} n The number of times to invoke `iteratee`.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the array of results.
         * @example
         *
         * _.times(3, String);
         * // => ['0', '1', '2']
         *
         *  _.times(4, _.constant(0));
         * // => [0, 0, 0, 0]
         */
        function times(n, iteratee) {
          n = toInteger(n);
          if (n < 1 || n > MAX_SAFE_INTEGER) {
            return [];
          }
          var index = MAX_ARRAY_LENGTH,
              length = nativeMin(n, MAX_ARRAY_LENGTH);

          iteratee = getIteratee(iteratee);
          n -= MAX_ARRAY_LENGTH;

          var result = baseTimes(length, iteratee);
          while (++index < n) {
            iteratee(index);
          }
          return result;
        }

        /**
         * Converts `value` to a property path array.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Util
         * @param {*} value The value to convert.
         * @returns {Array} Returns the new property path array.
         * @example
         *
         * _.toPath('a.b.c');
         * // => ['a', 'b', 'c']
         *
         * _.toPath('a[0].b.c');
         * // => ['a', '0', 'b', 'c']
         */
        function toPath(value) {
          if (isArray(value)) {
            return arrayMap(value, toKey);
          }
          return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
        }

        /**
         * Generates a unique ID. If `prefix` is given, the ID is appended to it.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Util
         * @param {string} [prefix=''] The value to prefix the ID with.
         * @returns {string} Returns the unique ID.
         * @example
         *
         * _.uniqueId('contact_');
         * // => 'contact_104'
         *
         * _.uniqueId();
         * // => '105'
         */
        function uniqueId(prefix) {
          var id = ++idCounter;
          return toString(prefix) + id;
        }

        /*------------------------------------------------------------------------*/

        /**
         * Adds two numbers.
         *
         * @static
         * @memberOf _
         * @since 3.4.0
         * @category Math
         * @param {number} augend The first number in an addition.
         * @param {number} addend The second number in an addition.
         * @returns {number} Returns the total.
         * @example
         *
         * _.add(6, 4);
         * // => 10
         */
        var add = createMathOperation(function(augend, addend) {
          return augend + addend;
        }, 0);

        /**
         * Computes `number` rounded up to `precision`.
         *
         * @static
         * @memberOf _
         * @since 3.10.0
         * @category Math
         * @param {number} number The number to round up.
         * @param {number} [precision=0] The precision to round up to.
         * @returns {number} Returns the rounded up number.
         * @example
         *
         * _.ceil(4.006);
         * // => 5
         *
         * _.ceil(6.004, 2);
         * // => 6.01
         *
         * _.ceil(6040, -2);
         * // => 6100
         */
        var ceil = createRound('ceil');

        /**
         * Divide two numbers.
         *
         * @static
         * @memberOf _
         * @since 4.7.0
         * @category Math
         * @param {number} dividend The first number in a division.
         * @param {number} divisor The second number in a division.
         * @returns {number} Returns the quotient.
         * @example
         *
         * _.divide(6, 4);
         * // => 1.5
         */
        var divide = createMathOperation(function(dividend, divisor) {
          return dividend / divisor;
        }, 1);

        /**
         * Computes `number` rounded down to `precision`.
         *
         * @static
         * @memberOf _
         * @since 3.10.0
         * @category Math
         * @param {number} number The number to round down.
         * @param {number} [precision=0] The precision to round down to.
         * @returns {number} Returns the rounded down number.
         * @example
         *
         * _.floor(4.006);
         * // => 4
         *
         * _.floor(0.046, 2);
         * // => 0.04
         *
         * _.floor(4060, -2);
         * // => 4000
         */
        var floor = createRound('floor');

        /**
         * Computes the maximum value of `array`. If `array` is empty or falsey,
         * `undefined` is returned.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Math
         * @param {Array} array The array to iterate over.
         * @returns {*} Returns the maximum value.
         * @example
         *
         * _.max([4, 2, 8, 6]);
         * // => 8
         *
         * _.max([]);
         * // => undefined
         */
        function max(array) {
          return (array && array.length)
            ? baseExtremum(array, identity, baseGt)
            : undefined$1;
        }

        /**
         * This method is like `_.max` except that it accepts `iteratee` which is
         * invoked for each element in `array` to generate the criterion by which
         * the value is ranked. The iteratee is invoked with one argument: (value).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Math
         * @param {Array} array The array to iterate over.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {*} Returns the maximum value.
         * @example
         *
         * var objects = [{ 'n': 1 }, { 'n': 2 }];
         *
         * _.maxBy(objects, function(o) { return o.n; });
         * // => { 'n': 2 }
         *
         * // The `_.property` iteratee shorthand.
         * _.maxBy(objects, 'n');
         * // => { 'n': 2 }
         */
        function maxBy(array, iteratee) {
          return (array && array.length)
            ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
            : undefined$1;
        }

        /**
         * Computes the mean of the values in `array`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Math
         * @param {Array} array The array to iterate over.
         * @returns {number} Returns the mean.
         * @example
         *
         * _.mean([4, 2, 8, 6]);
         * // => 5
         */
        function mean(array) {
          return baseMean(array, identity);
        }

        /**
         * This method is like `_.mean` except that it accepts `iteratee` which is
         * invoked for each element in `array` to generate the value to be averaged.
         * The iteratee is invoked with one argument: (value).
         *
         * @static
         * @memberOf _
         * @since 4.7.0
         * @category Math
         * @param {Array} array The array to iterate over.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {number} Returns the mean.
         * @example
         *
         * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
         *
         * _.meanBy(objects, function(o) { return o.n; });
         * // => 5
         *
         * // The `_.property` iteratee shorthand.
         * _.meanBy(objects, 'n');
         * // => 5
         */
        function meanBy(array, iteratee) {
          return baseMean(array, getIteratee(iteratee, 2));
        }

        /**
         * Computes the minimum value of `array`. If `array` is empty or falsey,
         * `undefined` is returned.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Math
         * @param {Array} array The array to iterate over.
         * @returns {*} Returns the minimum value.
         * @example
         *
         * _.min([4, 2, 8, 6]);
         * // => 2
         *
         * _.min([]);
         * // => undefined
         */
        function min(array) {
          return (array && array.length)
            ? baseExtremum(array, identity, baseLt)
            : undefined$1;
        }

        /**
         * This method is like `_.min` except that it accepts `iteratee` which is
         * invoked for each element in `array` to generate the criterion by which
         * the value is ranked. The iteratee is invoked with one argument: (value).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Math
         * @param {Array} array The array to iterate over.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {*} Returns the minimum value.
         * @example
         *
         * var objects = [{ 'n': 1 }, { 'n': 2 }];
         *
         * _.minBy(objects, function(o) { return o.n; });
         * // => { 'n': 1 }
         *
         * // The `_.property` iteratee shorthand.
         * _.minBy(objects, 'n');
         * // => { 'n': 1 }
         */
        function minBy(array, iteratee) {
          return (array && array.length)
            ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
            : undefined$1;
        }

        /**
         * Multiply two numbers.
         *
         * @static
         * @memberOf _
         * @since 4.7.0
         * @category Math
         * @param {number} multiplier The first number in a multiplication.
         * @param {number} multiplicand The second number in a multiplication.
         * @returns {number} Returns the product.
         * @example
         *
         * _.multiply(6, 4);
         * // => 24
         */
        var multiply = createMathOperation(function(multiplier, multiplicand) {
          return multiplier * multiplicand;
        }, 1);

        /**
         * Computes `number` rounded to `precision`.
         *
         * @static
         * @memberOf _
         * @since 3.10.0
         * @category Math
         * @param {number} number The number to round.
         * @param {number} [precision=0] The precision to round to.
         * @returns {number} Returns the rounded number.
         * @example
         *
         * _.round(4.006);
         * // => 4
         *
         * _.round(4.006, 2);
         * // => 4.01
         *
         * _.round(4060, -2);
         * // => 4100
         */
        var round = createRound('round');

        /**
         * Subtract two numbers.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Math
         * @param {number} minuend The first number in a subtraction.
         * @param {number} subtrahend The second number in a subtraction.
         * @returns {number} Returns the difference.
         * @example
         *
         * _.subtract(6, 4);
         * // => 2
         */
        var subtract = createMathOperation(function(minuend, subtrahend) {
          return minuend - subtrahend;
        }, 0);

        /**
         * Computes the sum of the values in `array`.
         *
         * @static
         * @memberOf _
         * @since 3.4.0
         * @category Math
         * @param {Array} array The array to iterate over.
         * @returns {number} Returns the sum.
         * @example
         *
         * _.sum([4, 2, 8, 6]);
         * // => 20
         */
        function sum(array) {
          return (array && array.length)
            ? baseSum(array, identity)
            : 0;
        }

        /**
         * This method is like `_.sum` except that it accepts `iteratee` which is
         * invoked for each element in `array` to generate the value to be summed.
         * The iteratee is invoked with one argument: (value).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Math
         * @param {Array} array The array to iterate over.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {number} Returns the sum.
         * @example
         *
         * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
         *
         * _.sumBy(objects, function(o) { return o.n; });
         * // => 20
         *
         * // The `_.property` iteratee shorthand.
         * _.sumBy(objects, 'n');
         * // => 20
         */
        function sumBy(array, iteratee) {
          return (array && array.length)
            ? baseSum(array, getIteratee(iteratee, 2))
            : 0;
        }

        /*------------------------------------------------------------------------*/

        // Add methods that return wrapped values in chain sequences.
        lodash.after = after;
        lodash.ary = ary;
        lodash.assign = assign;
        lodash.assignIn = assignIn;
        lodash.assignInWith = assignInWith;
        lodash.assignWith = assignWith;
        lodash.at = at;
        lodash.before = before;
        lodash.bind = bind;
        lodash.bindAll = bindAll;
        lodash.bindKey = bindKey;
        lodash.castArray = castArray;
        lodash.chain = chain;
        lodash.chunk = chunk;
        lodash.compact = compact;
        lodash.concat = concat;
        lodash.cond = cond;
        lodash.conforms = conforms;
        lodash.constant = constant;
        lodash.countBy = countBy;
        lodash.create = create;
        lodash.curry = curry;
        lodash.curryRight = curryRight;
        lodash.debounce = debounce;
        lodash.defaults = defaults;
        lodash.defaultsDeep = defaultsDeep;
        lodash.defer = defer;
        lodash.delay = delay;
        lodash.difference = difference;
        lodash.differenceBy = differenceBy;
        lodash.differenceWith = differenceWith;
        lodash.drop = drop;
        lodash.dropRight = dropRight;
        lodash.dropRightWhile = dropRightWhile;
        lodash.dropWhile = dropWhile;
        lodash.fill = fill;
        lodash.filter = filter;
        lodash.flatMap = flatMap;
        lodash.flatMapDeep = flatMapDeep;
        lodash.flatMapDepth = flatMapDepth;
        lodash.flatten = flatten;
        lodash.flattenDeep = flattenDeep;
        lodash.flattenDepth = flattenDepth;
        lodash.flip = flip;
        lodash.flow = flow;
        lodash.flowRight = flowRight;
        lodash.fromPairs = fromPairs;
        lodash.functions = functions;
        lodash.functionsIn = functionsIn;
        lodash.groupBy = groupBy;
        lodash.initial = initial;
        lodash.intersection = intersection;
        lodash.intersectionBy = intersectionBy;
        lodash.intersectionWith = intersectionWith;
        lodash.invert = invert;
        lodash.invertBy = invertBy;
        lodash.invokeMap = invokeMap;
        lodash.iteratee = iteratee;
        lodash.keyBy = keyBy;
        lodash.keys = keys;
        lodash.keysIn = keysIn;
        lodash.map = map;
        lodash.mapKeys = mapKeys;
        lodash.mapValues = mapValues;
        lodash.matches = matches;
        lodash.matchesProperty = matchesProperty;
        lodash.memoize = memoize;
        lodash.merge = merge;
        lodash.mergeWith = mergeWith;
        lodash.method = method;
        lodash.methodOf = methodOf;
        lodash.mixin = mixin;
        lodash.negate = negate;
        lodash.nthArg = nthArg;
        lodash.omit = omit;
        lodash.omitBy = omitBy;
        lodash.once = once;
        lodash.orderBy = orderBy;
        lodash.over = over;
        lodash.overArgs = overArgs;
        lodash.overEvery = overEvery;
        lodash.overSome = overSome;
        lodash.partial = partial;
        lodash.partialRight = partialRight;
        lodash.partition = partition;
        lodash.pick = pick;
        lodash.pickBy = pickBy;
        lodash.property = property;
        lodash.propertyOf = propertyOf;
        lodash.pull = pull;
        lodash.pullAll = pullAll;
        lodash.pullAllBy = pullAllBy;
        lodash.pullAllWith = pullAllWith;
        lodash.pullAt = pullAt;
        lodash.range = range;
        lodash.rangeRight = rangeRight;
        lodash.rearg = rearg;
        lodash.reject = reject;
        lodash.remove = remove;
        lodash.rest = rest;
        lodash.reverse = reverse;
        lodash.sampleSize = sampleSize;
        lodash.set = set;
        lodash.setWith = setWith;
        lodash.shuffle = shuffle;
        lodash.slice = slice;
        lodash.sortBy = sortBy;
        lodash.sortedUniq = sortedUniq;
        lodash.sortedUniqBy = sortedUniqBy;
        lodash.split = split;
        lodash.spread = spread;
        lodash.tail = tail;
        lodash.take = take;
        lodash.takeRight = takeRight;
        lodash.takeRightWhile = takeRightWhile;
        lodash.takeWhile = takeWhile;
        lodash.tap = tap;
        lodash.throttle = throttle;
        lodash.thru = thru;
        lodash.toArray = toArray;
        lodash.toPairs = toPairs;
        lodash.toPairsIn = toPairsIn;
        lodash.toPath = toPath;
        lodash.toPlainObject = toPlainObject;
        lodash.transform = transform;
        lodash.unary = unary;
        lodash.union = union;
        lodash.unionBy = unionBy;
        lodash.unionWith = unionWith;
        lodash.uniq = uniq;
        lodash.uniqBy = uniqBy;
        lodash.uniqWith = uniqWith;
        lodash.unset = unset;
        lodash.unzip = unzip;
        lodash.unzipWith = unzipWith;
        lodash.update = update;
        lodash.updateWith = updateWith;
        lodash.values = values;
        lodash.valuesIn = valuesIn;
        lodash.without = without;
        lodash.words = words;
        lodash.wrap = wrap;
        lodash.xor = xor;
        lodash.xorBy = xorBy;
        lodash.xorWith = xorWith;
        lodash.zip = zip;
        lodash.zipObject = zipObject;
        lodash.zipObjectDeep = zipObjectDeep;
        lodash.zipWith = zipWith;

        // Add aliases.
        lodash.entries = toPairs;
        lodash.entriesIn = toPairsIn;
        lodash.extend = assignIn;
        lodash.extendWith = assignInWith;

        // Add methods to `lodash.prototype`.
        mixin(lodash, lodash);

        /*------------------------------------------------------------------------*/

        // Add methods that return unwrapped values in chain sequences.
        lodash.add = add;
        lodash.attempt = attempt;
        lodash.camelCase = camelCase;
        lodash.capitalize = capitalize;
        lodash.ceil = ceil;
        lodash.clamp = clamp;
        lodash.clone = clone;
        lodash.cloneDeep = cloneDeep;
        lodash.cloneDeepWith = cloneDeepWith;
        lodash.cloneWith = cloneWith;
        lodash.conformsTo = conformsTo;
        lodash.deburr = deburr;
        lodash.defaultTo = defaultTo;
        lodash.divide = divide;
        lodash.endsWith = endsWith;
        lodash.eq = eq;
        lodash.escape = escape;
        lodash.escapeRegExp = escapeRegExp;
        lodash.every = every;
        lodash.find = find;
        lodash.findIndex = findIndex;
        lodash.findKey = findKey;
        lodash.findLast = findLast;
        lodash.findLastIndex = findLastIndex;
        lodash.findLastKey = findLastKey;
        lodash.floor = floor;
        lodash.forEach = forEach;
        lodash.forEachRight = forEachRight;
        lodash.forIn = forIn;
        lodash.forInRight = forInRight;
        lodash.forOwn = forOwn;
        lodash.forOwnRight = forOwnRight;
        lodash.get = get;
        lodash.gt = gt;
        lodash.gte = gte;
        lodash.has = has;
        lodash.hasIn = hasIn;
        lodash.head = head;
        lodash.identity = identity;
        lodash.includes = includes;
        lodash.indexOf = indexOf;
        lodash.inRange = inRange;
        lodash.invoke = invoke;
        lodash.isArguments = isArguments;
        lodash.isArray = isArray;
        lodash.isArrayBuffer = isArrayBuffer;
        lodash.isArrayLike = isArrayLike;
        lodash.isArrayLikeObject = isArrayLikeObject;
        lodash.isBoolean = isBoolean;
        lodash.isBuffer = isBuffer;
        lodash.isDate = isDate;
        lodash.isElement = isElement;
        lodash.isEmpty = isEmpty;
        lodash.isEqual = isEqual;
        lodash.isEqualWith = isEqualWith;
        lodash.isError = isError;
        lodash.isFinite = isFinite;
        lodash.isFunction = isFunction;
        lodash.isInteger = isInteger;
        lodash.isLength = isLength;
        lodash.isMap = isMap;
        lodash.isMatch = isMatch;
        lodash.isMatchWith = isMatchWith;
        lodash.isNaN = isNaN;
        lodash.isNative = isNative;
        lodash.isNil = isNil;
        lodash.isNull = isNull;
        lodash.isNumber = isNumber;
        lodash.isObject = isObject;
        lodash.isObjectLike = isObjectLike;
        lodash.isPlainObject = isPlainObject;
        lodash.isRegExp = isRegExp;
        lodash.isSafeInteger = isSafeInteger;
        lodash.isSet = isSet;
        lodash.isString = isString;
        lodash.isSymbol = isSymbol;
        lodash.isTypedArray = isTypedArray;
        lodash.isUndefined = isUndefined;
        lodash.isWeakMap = isWeakMap;
        lodash.isWeakSet = isWeakSet;
        lodash.join = join;
        lodash.kebabCase = kebabCase;
        lodash.last = last;
        lodash.lastIndexOf = lastIndexOf;
        lodash.lowerCase = lowerCase;
        lodash.lowerFirst = lowerFirst;
        lodash.lt = lt;
        lodash.lte = lte;
        lodash.max = max;
        lodash.maxBy = maxBy;
        lodash.mean = mean;
        lodash.meanBy = meanBy;
        lodash.min = min;
        lodash.minBy = minBy;
        lodash.stubArray = stubArray;
        lodash.stubFalse = stubFalse;
        lodash.stubObject = stubObject;
        lodash.stubString = stubString;
        lodash.stubTrue = stubTrue;
        lodash.multiply = multiply;
        lodash.nth = nth;
        lodash.noConflict = noConflict;
        lodash.noop = noop;
        lodash.now = now;
        lodash.pad = pad;
        lodash.padEnd = padEnd;
        lodash.padStart = padStart;
        lodash.parseInt = parseInt;
        lodash.random = random;
        lodash.reduce = reduce;
        lodash.reduceRight = reduceRight;
        lodash.repeat = repeat;
        lodash.replace = replace;
        lodash.result = result;
        lodash.round = round;
        lodash.runInContext = runInContext;
        lodash.sample = sample;
        lodash.size = size;
        lodash.snakeCase = snakeCase;
        lodash.some = some;
        lodash.sortedIndex = sortedIndex;
        lodash.sortedIndexBy = sortedIndexBy;
        lodash.sortedIndexOf = sortedIndexOf;
        lodash.sortedLastIndex = sortedLastIndex;
        lodash.sortedLastIndexBy = sortedLastIndexBy;
        lodash.sortedLastIndexOf = sortedLastIndexOf;
        lodash.startCase = startCase;
        lodash.startsWith = startsWith;
        lodash.subtract = subtract;
        lodash.sum = sum;
        lodash.sumBy = sumBy;
        lodash.template = template;
        lodash.times = times;
        lodash.toFinite = toFinite;
        lodash.toInteger = toInteger;
        lodash.toLength = toLength;
        lodash.toLower = toLower;
        lodash.toNumber = toNumber;
        lodash.toSafeInteger = toSafeInteger;
        lodash.toString = toString;
        lodash.toUpper = toUpper;
        lodash.trim = trim;
        lodash.trimEnd = trimEnd;
        lodash.trimStart = trimStart;
        lodash.truncate = truncate;
        lodash.unescape = unescape;
        lodash.uniqueId = uniqueId;
        lodash.upperCase = upperCase;
        lodash.upperFirst = upperFirst;

        // Add aliases.
        lodash.each = forEach;
        lodash.eachRight = forEachRight;
        lodash.first = head;

        mixin(lodash, (function() {
          var source = {};
          baseForOwn(lodash, function(func, methodName) {
            if (!hasOwnProperty.call(lodash.prototype, methodName)) {
              source[methodName] = func;
            }
          });
          return source;
        }()), { 'chain': false });

        /*------------------------------------------------------------------------*/

        /**
         * The semantic version number.
         *
         * @static
         * @memberOf _
         * @type {string}
         */
        lodash.VERSION = VERSION;

        // Assign default placeholders.
        arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
          lodash[methodName].placeholder = lodash;
        });

        // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
        arrayEach(['drop', 'take'], function(methodName, index) {
          LazyWrapper.prototype[methodName] = function(n) {
            n = n === undefined$1 ? 1 : nativeMax(toInteger(n), 0);

            var result = (this.__filtered__ && !index)
              ? new LazyWrapper(this)
              : this.clone();

            if (result.__filtered__) {
              result.__takeCount__ = nativeMin(n, result.__takeCount__);
            } else {
              result.__views__.push({
                'size': nativeMin(n, MAX_ARRAY_LENGTH),
                'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
              });
            }
            return result;
          };

          LazyWrapper.prototype[methodName + 'Right'] = function(n) {
            return this.reverse()[methodName](n).reverse();
          };
        });

        // Add `LazyWrapper` methods that accept an `iteratee` value.
        arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
          var type = index + 1,
              isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

          LazyWrapper.prototype[methodName] = function(iteratee) {
            var result = this.clone();
            result.__iteratees__.push({
              'iteratee': getIteratee(iteratee, 3),
              'type': type
            });
            result.__filtered__ = result.__filtered__ || isFilter;
            return result;
          };
        });

        // Add `LazyWrapper` methods for `_.head` and `_.last`.
        arrayEach(['head', 'last'], function(methodName, index) {
          var takeName = 'take' + (index ? 'Right' : '');

          LazyWrapper.prototype[methodName] = function() {
            return this[takeName](1).value()[0];
          };
        });

        // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
        arrayEach(['initial', 'tail'], function(methodName, index) {
          var dropName = 'drop' + (index ? '' : 'Right');

          LazyWrapper.prototype[methodName] = function() {
            return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
          };
        });

        LazyWrapper.prototype.compact = function() {
          return this.filter(identity);
        };

        LazyWrapper.prototype.find = function(predicate) {
          return this.filter(predicate).head();
        };

        LazyWrapper.prototype.findLast = function(predicate) {
          return this.reverse().find(predicate);
        };

        LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
          if (typeof path == 'function') {
            return new LazyWrapper(this);
          }
          return this.map(function(value) {
            return baseInvoke(value, path, args);
          });
        });

        LazyWrapper.prototype.reject = function(predicate) {
          return this.filter(negate(getIteratee(predicate)));
        };

        LazyWrapper.prototype.slice = function(start, end) {
          start = toInteger(start);

          var result = this;
          if (result.__filtered__ && (start > 0 || end < 0)) {
            return new LazyWrapper(result);
          }
          if (start < 0) {
            result = result.takeRight(-start);
          } else if (start) {
            result = result.drop(start);
          }
          if (end !== undefined$1) {
            end = toInteger(end);
            result = end < 0 ? result.dropRight(-end) : result.take(end - start);
          }
          return result;
        };

        LazyWrapper.prototype.takeRightWhile = function(predicate) {
          return this.reverse().takeWhile(predicate).reverse();
        };

        LazyWrapper.prototype.toArray = function() {
          return this.take(MAX_ARRAY_LENGTH);
        };

        // Add `LazyWrapper` methods to `lodash.prototype`.
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
          var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
              isTaker = /^(?:head|last)$/.test(methodName),
              lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
              retUnwrapped = isTaker || /^find/.test(methodName);

          if (!lodashFunc) {
            return;
          }
          lodash.prototype[methodName] = function() {
            var value = this.__wrapped__,
                args = isTaker ? [1] : arguments,
                isLazy = value instanceof LazyWrapper,
                iteratee = args[0],
                useLazy = isLazy || isArray(value);

            var interceptor = function(value) {
              var result = lodashFunc.apply(lodash, arrayPush([value], args));
              return (isTaker && chainAll) ? result[0] : result;
            };

            if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
              // Avoid lazy use if the iteratee has a "length" value other than `1`.
              isLazy = useLazy = false;
            }
            var chainAll = this.__chain__,
                isHybrid = !!this.__actions__.length,
                isUnwrapped = retUnwrapped && !chainAll,
                onlyLazy = isLazy && !isHybrid;

            if (!retUnwrapped && useLazy) {
              value = onlyLazy ? value : new LazyWrapper(this);
              var result = func.apply(value, args);
              result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined$1 });
              return new LodashWrapper(result, chainAll);
            }
            if (isUnwrapped && onlyLazy) {
              return func.apply(this, args);
            }
            result = this.thru(interceptor);
            return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
          };
        });

        // Add `Array` methods to `lodash.prototype`.
        arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
          var func = arrayProto[methodName],
              chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
              retUnwrapped = /^(?:pop|shift)$/.test(methodName);

          lodash.prototype[methodName] = function() {
            var args = arguments;
            if (retUnwrapped && !this.__chain__) {
              var value = this.value();
              return func.apply(isArray(value) ? value : [], args);
            }
            return this[chainName](function(value) {
              return func.apply(isArray(value) ? value : [], args);
            });
          };
        });

        // Map minified method names to their real names.
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
          var lodashFunc = lodash[methodName];
          if (lodashFunc) {
            var key = lodashFunc.name + '';
            if (!hasOwnProperty.call(realNames, key)) {
              realNames[key] = [];
            }
            realNames[key].push({ 'name': methodName, 'func': lodashFunc });
          }
        });

        realNames[createHybrid(undefined$1, WRAP_BIND_KEY_FLAG).name] = [{
          'name': 'wrapper',
          'func': undefined$1
        }];

        // Add methods to `LazyWrapper`.
        LazyWrapper.prototype.clone = lazyClone;
        LazyWrapper.prototype.reverse = lazyReverse;
        LazyWrapper.prototype.value = lazyValue;

        // Add chain sequence methods to the `lodash` wrapper.
        lodash.prototype.at = wrapperAt;
        lodash.prototype.chain = wrapperChain;
        lodash.prototype.commit = wrapperCommit;
        lodash.prototype.next = wrapperNext;
        lodash.prototype.plant = wrapperPlant;
        lodash.prototype.reverse = wrapperReverse;
        lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

        // Add lazy aliases.
        lodash.prototype.first = lodash.prototype.head;

        if (symIterator) {
          lodash.prototype[symIterator] = wrapperToIterator;
        }
        return lodash;
      });

      /*--------------------------------------------------------------------------*/

      // Export lodash.
      var _ = runInContext();

      // Some AMD build optimizers, like r.js, check for condition patterns like:
      if (freeModule) {
        // Export for Node.js.
        (freeModule.exports = _)._ = _;
        // Export for CommonJS support.
        freeExports._ = _;
      }
      else {
        // Export to the global object.
        root._ = _;
      }
    }.call(commonjsGlobal$1));
    });

    const subscriber_queue = [];
    /**
     * Creates a `Readable` store that allows reading by subscription.
     * @param value initial value
     * @param {StartStopNotifier}start start and stop notifications for subscriptions
     */
    function readable(value, start) {
        return {
            subscribe: writable(value, start).subscribe
        };
    }
    /**
     * Create a `Writable` store that allows both updating and reading by subscription.
     * @param {*=}value initial value
     * @param {StartStopNotifier=}start start and stop notifications for subscriptions
     */
    function writable(value, start = noop$1) {
        let stop;
        const subscribers = new Set();
        function set(new_value) {
            if (safe_not_equal(value, new_value)) {
                value = new_value;
                if (stop) { // store is ready
                    const run_queue = !subscriber_queue.length;
                    for (const subscriber of subscribers) {
                        subscriber[1]();
                        subscriber_queue.push(subscriber, value);
                    }
                    if (run_queue) {
                        for (let i = 0; i < subscriber_queue.length; i += 2) {
                            subscriber_queue[i][0](subscriber_queue[i + 1]);
                        }
                        subscriber_queue.length = 0;
                    }
                }
            }
        }
        function update(fn) {
            set(fn(value));
        }
        function subscribe(run, invalidate = noop$1) {
            const subscriber = [run, invalidate];
            subscribers.add(subscriber);
            if (subscribers.size === 1) {
                stop = start(set) || noop$1;
            }
            run(value);
            return () => {
                subscribers.delete(subscriber);
                if (subscribers.size === 0) {
                    stop();
                    stop = null;
                }
            };
        }
        return { set, update, subscribe };
    }

    const HeroData = readable([
    	{ id: 'estrilda',
    		name: 'Estrilda',
    		portrait: './img/portraits/estrilda.jpg',
    		class: 'Warrior',
    		faction: 'Lightbearer',
    		type: 'Strength',
    		skills: [
    			{ name: 'Joust',
    				image: './img/skills/estrilda1.png',
    				desc: 'Estrilda deals <em>60%</em> AoE damage <em>5</em> times to the enemies standing in front of her, with the final attack dealing <em>150%</em> damage them, which causes them to be knocked to the ground.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Raises all allies\' Attack Ratings by <em>7%</em> and Defense Ratings by <em>14%</em> for every non-summoned enemy that falls in combat while Estrilda is alive, up until the end of the battle. This ability may be stacked up to <em>3</em> times.',
    						unlock: 81,
    					},
    					{ desc: 'All of Estrilda\'s allies will recover <em>60</em> Energy points for every non-summoned enemy that she defeats in battle while she is alive.',
    						unlock: 161,
    					},
    				],
    			},
    			{ name: 'Royal Charge',
    				image: './img/skills/estrilda2.png',
    				desc: 'Estrilda charges into her enemies\' ranks, knocking down all enemies in her path, dealing <em>200%</em> damage to them. Estrilda is immune to control abilities while charging.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>210%</em>.',
    						unlock: 21,
    					},
    					{ desc: 'For every enemy that Estrilda successfully hits, she will receive a shield that is able to mitigate <em>70%</em> damage.',
    						unlock: 101,
    					},
    					{ desc: 'Damage is increased to <em>220%</em>.',
    						unlock: 181,
    					},
    				],
    			},
    			{ name: 'Inspire',
    				image: './img/skills/estrilda3.png',
    				desc: 'Estrilda increases her allies\' morale by waving her flag in the air, increasing their Attack Rating by <em>30%</em> for <em>8</em> seconds.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Estrilda and her allies recover <em>100</em> Energy.',
    						unlock: 121,
    					},
    					{ desc: 'Energy restored increased by up to <em>150</em> points.',
    						unlock: 201,
    					},
    				],
    			},
    			{ name: 'Ridicule',
    				image: './img/skills/estrilda4.png',
    				desc: 'Estrilda deals <em>150%</em> damage to an enemy in front, knocking them backwards, and then deals <em>60%</em> AoE damage to enemies within range, causing their Attack Ratings to be reduced by <em>14%</em> for <em>6</em> seconds.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'AoE damage is raised to <em>70%</em>.',
    						unlock: 141,
    					},
    					{ desc: 'AoE damage is raised to <em>80%</em>.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 0,
    		sig_item: {
    			name: 'In Command',
    			image: './img/si/estrilda.png',
    			desc: 'When Estrilda is on the frontline and still alive, all damage received by her backline allies is reduced by <em>5%</em>.',
    			upgrades: [
    				{ desc: 'When Estrilda is on the frontline and still alive, all damage received by her backline allies is reduced by <em>10%</em>.',
    					unlock: 10,
    				},
    				{ desc: 'When Estrilda is on the frontline and still alive, all damage received by her backline allies is reduced by <em>15%</em>.',
    					unlock: 20,
    				},
    				{ desc: 'When any allied hero is on the frontline and still alive, all damage received by their backline allies is reduced by <em>15%</em>.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 3,
    		furniture: {
    			name: 'Fellowship',
    			image: './img/furniture/estrilda.png',
    			upgrades: [
    				{ desc: 'After the first <em>18</em> seconds of battles, if all allies are still alive, all non-summoned allies will have their Attack Ratings increased by <em>10%</em> and Defense Ratings by <em>20%</em> until the end of the battles.',
    					unlock: 3,
    				},
    				{ desc: 'Ability may be activated after <em>12</em> seconds of battle.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'belinda',
    		name: 'Belinda',
    		portrait: './img/portraits/belinda.jpg',
    		class: 'Mage',
    		faction: 'Lightbearer',
    		type: 'Intelligence',
    		skills: [
    			{
    				name: 'Divine Light',
    				image: './img/skills/belinda1.png',
    				desc: 'Belinda uses her divine power to attack a large area of enemies <em>4</em> times. Each successful hit deals <em>110%</em> Magic Damage to the enemy targets.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Damage increases for every successive hit that lands.',
    						unlock: 81,
    					},
    					{ desc: 'Hits enemies up to <em>5</em> times.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Divine Retribution',
    				image: './img/skills/belinda2.png',
    				desc: 'Belinda fires an orb of divine energy towards her enemies. The ball explodes on impact with the first enemy it reaches. Surrounding enemies consequently suffer <em>160%</em> damage.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>180%</em>.',
    						unlock: 21,
    					},
    					{ desc: 'Reduces the Accuracy of all enemy targets that take damage.',
    						unlock: 101,
    					},
    					{ desc: 'Damage is increased to <em>210%</em>.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Brilliance',
    				image: './img/skills/belinda3.png',
    				desc: 'Belinda\'s Crit Rating is increased by <em>12%</em>.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Every time Belinda inflicts a critical strike on an enemy, will cause subsequent damage they receive to be increased by <em>3%</em>. Ability can be stacked <em>8</em> times.',
    						unlock: 121,
    					},
    					{ desc: 'Crit Rating is raised to <em>18%</em>.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Blessing',
    				image: './img/skills/belinda4.png',
    				desc: 'Belinda blesses the ally with the highest Attack Rating, raising their Attack Rating by <em>15%</em> and Crit Rating by <em>15%</em>.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Belinda blesses <em>2</em> allies with the highest Attack Rating.',
    						unlock: 141,
    					},
    					{ desc: 'Attack Rating increased <em>20%</em> and Crit Rating increased <em>20%</em>.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 0,
    		sig_item: {
    			name: 'Gift of Heaven',
    			image: './img/si/belinda.png',
    			desc: 'All allies that are receiving the effects of the ability "Blessing" will have a <em>40%</em> chance to activate the "Divine Retribution" ability. This ability can be activated up to <em>3</em> times every <em>5</em> seconds. Damage dealt by this ability is equal to <em>40%</em> of the ability\'s original damage when used by allies.',
    			upgrades: [
    				{ desc: 'Raises potency of "Divine Retribution\'s" damage when used by allies up to <em>60%</em>.',
    					unlock: 10,
    				},
    				{ desc: 'Raises potency of "Divine Retribution\'s" damage when used by allies up to <em>80%</em>.',
    					unlock: 20,
    				},
    				{ desc: 'Restores <em>40</em> Energy each time ability is used.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 3,
    		furniture: {
    			name: 'Focused Light',
    			image: './img/furniture/belinda.png',
    			upgrades: [
    				{ desc: 'When the ability "Divine Light" only hits <em>1</em> enemy target, the damage dealt to the target is increased by <em>30%</em>.',
    					unlock: 3,
    				},
    				{ desc: 'When Belinda deals damage to an enemy, their Crit Resistance is reduced by <em>35</em> points for <em>3</em> seconds. This ability cannot be stacked.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'raine',
    		name: 'Raine',
    		portrait: './img/portraits/raine.jpg',
    		class: 'Support',
    		faction: 'Lightbearer',
    		type: 'Agility',
    		skills: [
    			{
    				name: 'Cripple',
    				image: './img/skills/raine1.png',
    				desc: 'Raine marks her enemies with a Bounty Mark that exists for <em>8</em> seconds. Damage received by the marked enemies is increased by <em>15%</em>. When a marked enemy is slain, their killer receives <em>80</em> Energy points every second over a duration of <em>10</em> seconds.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Bounty Mark exist for <em>12</em> seconds and the damage received by marked enemies is increased to <em>20%</em>. When a marked enemy is slain, their killer\'s Crit Rating is increased by <em>100%</em> for <em>10</em> seconds.',
    						unlock: 81,
    					},
    					{ desc: 'Bounty Mark\'s duration increased to <em>16</em> seconds.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Barrage',
    				image: './img/skills/raine2.png',
    				desc: 'Raine shoots both of her guns, targeting the enemy with the lowest health and the enemy with the highest Attack Rating who is on the same side of the battlefield (the same target may be targeted by both types of attack if the conditions are appropriate). The attack deals <em>65%</em> damage <em>5</em> times to the enemy with the lowest health and <em>10%</em> <em>5</em> times to the enemy with highest Attack Rating, which also reduces their Haste by <em>40</em> points for <em>1</em> second.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'The final attack against the enemy with the lowest health deals extra damage that is equal to <em>15%</em> of the health which they have already lost but shall not exceed <em>360%</em> of Raine\'s Attack Rating.',
    						unlock: 21,
    					},
    					{ desc: 'The final attack against the enemy with the highest Attack Rating knocks them down and stuns them for <em>1</em> second.',
    						unlock: 101,
    					},
    					{ desc: 'Damage dealt to lowest health enemy is increased to <em>70%</em>.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Lock On',
    				image: './img/skills/raine3.png',
    				desc: 'Raine marks the enemy with the lowest health for <em>10</em> seconds. While marked, allied heroes that deal damage to the target will have their Attack Speed increased by <em>20%</em> for <em>3</em> seconds. This ability cannot be stacked.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Allied heroes that deal damage to the marked enemy target shall receive a one-time heal from Raine, that is equal to <em>40%</em> of her Attack Rating. Ability may only heal each allied hero once every <em>5</em> seconds.',
    						unlock: 121,
    					},
    					{ desc: 'Attack speed is increased by <em>30</em> points, Crit Rating is increased by <em>30%</em>.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Exploit',
    				image: './img/skills/raine4.png',
    				desc: 'Raine\'s attacks and abilities deal more damage to enemies the lower their health is, up until a maximum of <em>30%</em> damage is reached.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Increases allies\' damage by up to <em>15%</em>.',
    						unlock: 141,
    					},
    					{ desc: 'Raine\'s allies damage can be raised up to <em>30%</em>.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 10,
    		sig_item: {
    			name: 'Helping Hand',
    			image: './img/si/raine.png',
    			desc: 'Raine teams up with the ally with the highest Combat Rating, allowing for them to recover health and Energy every <em>2</em> seconds. The recovery amount is equal of <em>30%</em> of what Raine recovers over these <em>2</em> seconds.',
    			upgrades: [
    				{ desc: 'Ally recovers <em>50%</em> health or Energy.',
    					unlock: 10,
    				},
    				{ desc: 'When both Raine and the ally she is teamed up with are alive and one of them uses their ultimate ability, both Raine and her ally will receive a shield that is able to mitigate damage equal to <em>100%</em> of Raine\'s Attack Rating.',
    					unlock: 20,
    				},
    				{ desc: 'Value of shield is increased to <em>180%</em> of Attack Rating value.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 3,
    		furniture: {
    			name: 'Deadly Force',
    			image: './img/furniture/raine.png',
    			upgrades: [
    				{ desc: 'After <em>3</em> seconds of battle, the enemy with the lowest health is marked up until their death. While marked, all damage that is dealt to the enemy is increased by <em>30%</em>.',
    					unlock: 3,
    				},
    				{ desc: 'When the marked enemy dies, Raine re-marks the enemy that currently has the lowest health.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'rosaline',
    		name: 'Rosaline',
    		portrait: './img/portraits/rosaline.jpg',
    		class: 'Support',
    		faction: 'Lightbearer',
    		type: 'Intelligence',
    		skills: [
    			{
    				name: 'Motivation',
    				image: './img/skills/rosaline1.png',
    				desc: 'Rosaline will continuously follow the ally with the highest Attack Rating from start to finish. While following her ally, the damage that Rosaline receives is reduced by <em>40%</em>. Using this ability fully restores the Energy of the ally Rosaline is currently following to its maximum. Rosaline expends a greater amount of her own Energy when the amount of Energy restored to her ally is higher, with at least <em>200</em> Energy points being expended each time this ability is used.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Raises the Attack Rating of the ally being followed by <em>40%</em> for <em>4</em> seconds.',
    						unlock: 81,
    					},
    					{ desc: 'Raises the Attack Rating of the ally being followed by <em>60%</em> for <em>4</em> seconds.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Crazy Crockery',
    				image: './img/skills/rosaline2.png',
    				desc: 'Rosaline takes out <em>2</em> teacups or teapots and hurls them at an enemy, inflicting <em>120%</em> damage per item upon the target, leaving them temporarily stunned. Rosaline will prioritize her attack against the enemies that are attacking the ally she is currently following.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Increases the quantity of crockery up to <em>3</em> pieces.',
    						unlock: 21,
    					},
    					{ desc: 'Rosaline now throws an additional fork that deals additional damage equal to <em>20%</em> of the target\'s current health.',
    						unlock: 101,
    					},
    					{ desc: 'Rosaline now throws an additional saucer that causes all damage that the target receives to be increased by <em>40%</em> for <em>4</em> seconds.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Afternoon Tea',
    				image: './img/skills/rosaline3.png',
    				desc: 'Rosaline heals the ally she is following for <em>150%</em> worth of her Attack Rating.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'The effects of this ability are increased by <em>25%</em> each time it is successfully used, up until it reaches <em>150%</em>.',
    						unlock: 121,
    					},
    					{ desc: 'Health Recovery increased by up to <em>170%</em> of Attack Rating.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Spring Cleaning',
    				image: './img/skills/rosaline4.png',
    				desc: 'Rosaline cannot be attacked while she uses her broom to sweep the floor for <em>4</em> seconds, dealing <em>80%</em> damage to the enemy that nears the ally she is currently following. If the ally that Rosaline is following is a backline hero, then her attacks will incorporate a knockback effect, which pushes the enemy away.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Damage increased by up to <em>100%</em>.',
    						unlock: 141,
    					},
    					{ desc: 'Damage increased by up to <em>120%</em>.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 20,
    		sig_item: {
    			name: 'Servitude',
    			image: './img/si/rosaline.png',
    			desc: 'Rosaline raises the Attack and Defense Ratings of the ally she is currently following for <em>8%</em> of her own ratings\' values.',
    			upgrades: [
    				{ desc: 'Attack and Defense Ratings are raised by <em>16%</em> of Rosaline\'s own rating values.',
    					unlock: 10,
    				},
    				{ desc: 'Attack and Defense Ratings are raised by <em>30%</em> of Rosaline\'s own rating values.',
    					unlock: 20,
    				},
    				{ desc: 'Raises ally\'s crit rating and dodge for <em>25%</em> of Rosaline\'s own rating values.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 0,
    		furniture: {
    			name: 'Flying Crockery',
    			image: './img/furniture/rosaline.png',
    			upgrades: [
    				{ desc: 'As Rosaline is following an ally around the battlefield, she manifests "Tea Cups" that she throws at the enemy. This ability is triggered once every <em>2.5</em> seconds. The effects of this ability are identical to the "Crazy Crockery" ability.',
    					unlock: 3,
    				},
    				{ desc: 'Ability is triggered once every <em>0.75</em> seconds.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'lucius',
    		name: 'Lucius',
    		portrait: './img/portraits/lucius.jpg',
    		class: 'Tank',
    		faction: 'Lightbearer',
    		type: 'Strength',
    		skills: [
    			{
    				name: 'Heaven\'s Protection',
    				image: './img/skills/lucius1.png',
    				desc: 'Lucius blesses all of his allies with a divine shield that reduces damage equal to <em>500%</em> of his own Attack Rating\'s value for <em>8</em> seconds.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Shield lasts for <em>10</em> seconds. Shield is able to restore allies\' health over time.',
    						unlock: 81,
    					},
    					{ desc: 'Value of shield is increased to <em>550%</em> of Attack Rating value.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Divine Strike',
    				image: './img/skills/lucius2.png',
    				desc: 'Lucius smashes the ground with his warhammer that causes a shockwave, knocking nearby enemies over, while also dealing <em>130%</em> AoE damage to them.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>150%</em>.',
    						unlock: 21,
    					},
    					{ desc: 'Damage is reduced by <em>20%</em> for every enemy that is knocked over. Ability lasts for <em>8</em> seconds.',
    						unlock: 101,
    					},
    					{ desc: 'Damage is increased to <em>160%</em>.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Divine Blessing',
    				image: './img/skills/lucius3.png',
    				desc: 'Lucius heals the ally with the lowest health for <em>200%</em> of his own Attack Rating and raises their Defense Rating for <em>5</em> seconds.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Health Recovery Rate is increased by up to <em>75%</em> the lower an ally\'s health falls.',
    						unlock: 121,
    					},
    					{ desc: 'Health recovery increased by up to <em>220%</em> of Attack Rating.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Blessed Shield',
    				image: './img/skills/lucius4.png',
    				desc: 'Lucius creates a blessed shield that is able to reduce <em>65%</em> of all the damage that he receives for <em>5</em> seconds. Lucius will halt his blessed shield if his ultimate ability is available for use. Lucius cannot be controlled by enemies while using this ability.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Lucius recovers <em>200%</em> more Energy when attacked while using Blessed Shield.',
    						unlock: 141,
    					},
    					{ desc: 'Damage received while using Blessed Shield is reduced by <em>75%</em>.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 5,
    		sig_item: {
    			name: 'Divine Purge',
    			image: './img/si/lucius.png',
    			desc: 'Enemy heroes have their Energy recovery effects reduced by <em>30%</em> for <em>4</em> seconds when they are struck by the ability "Divine Strike" or if a Normal Attack becomes a critical strike.',
    			upgrades: [
    				{ desc: 'Enemy heroes have their Energy recovery effects reduced by <em>60%</em> for <em>4</em> seconds.',
    					unlock: 10,
    				},
    				{ desc: 'Enemy heroes have their Energy recovery effects reduced by <em>90%</em> for <em>4</em> seconds.',
    					unlock: 20,
    				},
    				{ desc: 'Removes the majority of the enemy\'s buffs when used.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 0,
    		furniture: {
    			name: 'Blessed Protector',
    			image: './img/furniture/lucius.png',
    			upgrades: [
    				{ desc: 'The "Blessed Shield" ability will no longer be interrupted when cast. While the effects of "Blessed Shield" are active, all damage received by the ally positioned below Lucius\' location is reduced by <em>30%</em>',
    					unlock: 3,
    				},
    				{ desc: 'While the effects of "Blessed Shield" are active, the amount of Energy the ally positioned below Lucius recovers when attacked is increased by <em>75%</em>.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'thane',
    		name: 'Thane',
    		portrait: './img/portraits/thane.jpg',
    		class: 'Ranger',
    		faction: 'Lightbearer',
    		type: 'Agility',
    		skills: [
    			{
    				name: 'Eviscerate',
    				image: './img/skills/thane1.png',
    				desc: 'Thane attacks his enemies at random <em>7</em> times, dealing <em>80%</em> damage per attack. Thane cannot receive damage while using this ability.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Number of attacks are increased once for every critical strike landed until the amount of attack reach a total of <em>8</em> attacks.',
    						unlock: 81,
    					},
    					{ desc: 'Basic attack an be dealt up to <em>9</em> times.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Lunge',
    				image: './img/skills/thane2.png',
    				desc: 'Thane bounds towards an enemy with a surprise attack, dealing <em>120%</em> damage to them. Thane\'s Crit Rating is also raised by <em>20%</em> for a duration of <em>5</em> seconds.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Uses a defensive shield which can offset up to <em>70%</em> damage after the ability is used.',
    						unlock: 21,
    					},
    					{ desc: 'Damage increased by up to <em>130%</em>.',
    						unlock: 101,
    					},
    					{ desc: 'Damage increased by up to <em>140%</em>.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Execution',
    				image: './img/skills/thane3.png',
    				desc: 'Activated after Thane uses <em>4</em> critical strikes. Thane targets a single enemy with a multi-stage attack with the final attack dealing <em>80%</em> damage. The final attack also deals an additional damage which is equal to <em>15%</em> of the target\'s max HP.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Final attack damage increased to <em>90%</em> damage.',
    						unlock: 121,
    					},
    					{ desc: 'Additional damage dealt equals <em>18%</em> of the target\'s max HP.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Focus',
    				image: './img/skills/thane4.png',
    				desc: 'Thane raises his own Crit Rating by <em>14%</em>.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'For each successful critical strike, Thane recovers <em>6%</em> of the HP that has already been lost and also regains <em>25</em> Energy points.',
    						unlock: 141,
    					},
    					{ desc: 'Thane raises his own Crit Rating by <em>17%</em>.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 30,
    		sig_item: {
    			name: 'Finesse',
    			image: './img/si/thane.png',
    			desc: 'Thane\'s damage is increased by <em>20%</em> if he does not receive damage for <em>3</em> seconds.',
    			upgrades: [
    				{ desc: 'Damage increased to <em>30%</em> when requirements are met.',
    					unlock: 10,
    				},
    				{ desc: 'Damage increased to <em>40%</em> when requirements are met.',
    					unlock: 20,
    				},
    				{ desc: 'If Thane\'s target enemy does not inflict damage upon Thane for <em>3</em> seconds, then Thane\'s damage will be increased.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 9,
    		furniture: {
    			name: 'Swift Death',
    			image: './img/furniture/thane.png',
    			upgrades: [
    				{ desc: 'Thane\'s ability "Eviscerate" has a <em>100%</em> chance to hit an enemy the first time it is used against them, and deals additional damage to the target equal to <em>18%</em> of their max health. The additional damage dealt by this ability cannot exceed <em>360%</em> of Thane\'s own Attack Rating.',
    					unlock: 3,
    				},
    				{ desc: 'The default number of attacks for the ability "Eviscerate" is raised by <em>6</em> attacks.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'fawkes',
    		name: 'Fawkes',
    		portrait: './img/portraits/fawkes.jpg',
    		class: 'Ranger',
    		faction: 'Lightbearer',
    		type: 'Agility',
    		skills: [
    			{
    				name: 'Purification',
    				image: './img/skills/fawkes1.png',
    				desc: 'Fawkes deals <em>130%</em> damage to all enemies on the battlefield and removes the majority of buffs they may be using.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Removes majority of de-buffs from allied heroes.',
    						unlock: 81,
    					},
    					{ desc: 'Damage is increased to <em>140%</em>.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Abate',
    				image: './img/skills/fawkes2.png',
    				desc: 'Fawkes steals an enemy\'s attack speed by <em>35%</em> for <em>6</em> seconds.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Enemy\'s attack speed reduced by <em>45%</em>.',
    						unlock: 21,
    					},
    					{ desc: 'Enemy\'s Energy regeneration reduced by <em>60%</em>.',
    						unlock: 101,
    					},
    					{ desc: 'Effects are increased to <em>7.5</em> seconds.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Confine',
    				image: './img/skills/fawkes3.png',
    				desc: 'Fawkes deals <em>50%</em> damage to the enemy with the highest Attack Rating and then locks them in his coffin for <em>7</em> seconds. The affected enemy cannot attack or be attacked while inside the coffin.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Duration is extended up to <em>8</em> seconds.',
    						unlock: 121,
    					},
    					{ desc: 'Duration is extended up to <em>9</em> seconds.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Silver Bolt',
    				image: './img/skills/fawkes4.png',
    				desc: 'Silver Bolt raises Fawkes\' Normal Attack damage by <em>20%</em> and deals a further additional <em>40%</em> damage to de-buffed enemies.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Restores <em>40</em> Energy per hit.',
    						unlock: 141,
    					},
    					{ desc: 'Normal Attack damage increased to <em>30%</em>.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 0,
    		sig_item: {
    			name: 'Purged Perseverance',
    			image: './img/si/fawkes.png',
    			desc: 'When the ability Purification is used, allied heroes with more than <em>60%</em> of their total Energy will be immune to control abilities and have their Defense Rating increased by <em>5%</em>. Effect lasts <em>5</em> seconds.',
    			upgrades: [
    				{ desc: 'Defense Rating is increased to <em>20%</em>.',
    					unlock: 10,
    				},
    				{ desc: 'Defense Rating is increased to <em>40%</em>.',
    					unlock: 20,
    				},
    				{ desc: 'Effect duration is increased to <em>8</em> seconds.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 0,
    		furniture: {
    			name: 'Soul Cleanser',
    			image: './img/furniture/fawkes.png',
    			upgrades: [
    				{ desc: 'If Fawkes of any of his allies have a Factional Advantage over any of their enemies, their Factional Advantage damage bonus will be increased by <em>8%</em>.',
    					unlock: 3,
    				},
    				{ desc: 'The majority of the enemy\'s buff effects are removed when successfully struck by Fawkes\' Normal Attacks.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'hendrik',
    		name: 'Hendrik',
    		portrait: './img/portraits/hendrik.jpg',
    		class: 'Tank',
    		faction: 'Lightbearer',
    		type: 'Strength',
    		skills: [
    			{
    				name: 'Crippling Blow',
    				image: './img/skills/hendrik1.png',
    				desc: 'Hendrik smashes the ground with his shield, dealing <em>140%</em> damage to surrounding enemies, leaving them stunned for <em>1</em> seconds. Every <em>10%</em> of Hendrik\'s maximum health that is lost will extend the ability\'s stun effect by <em>0.2</em> seconds, which can be extended up to a total of <em>4</em> seconds.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>160%</em>.',
    						unlock: 81,
    					},
    					{ desc: 'Damage is increased to <em>180%</em>.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Shield Bash',
    				image: './img/skills/hendrik2.png',
    				desc: 'Hendrik uses his shield to knock back an enemy which deals <em>130%</em> damage to them and also stuns them for <em>1.5</em> seconds.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>150%</em>.',
    						unlock: 21,
    					},
    					{ desc: 'Enemy\'s damage is reduced by <em>40%</em> for <em>5</em> seconds after stun effect wears off.',
    						unlock: 101,
    					},
    					{ desc: 'Damage is increased to <em>180%</em>.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Sacrificial Shield',
    				image: './img/skills/hendrik3.png',
    				desc: 'If one of Hendrik\'s backline teammates receives fatal damage, Hendrik will jump in front of them and take all of the damage intended for his teammate for <em>10</em> seconds. Hendrik cannot be mind-controlled while protecting teammates and this ability may only be used once per battle.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Damage taken while protecting teammate is reduced by <em>40%</em>.',
    						unlock: 121,
    					},
    					{ desc: 'Damage taken while protecting teammate is reduced by <em>60%</em>.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Standfast',
    				image: './img/skills/hendrik4.png',
    				desc: 'When Hendrik\'s health falls below <em>40%</em> he places his shield to the ground and assumes a defensive stance while he heals himself for <em>6%</em> of his max health per second. When in this defensive stance, any damage dealt to Hendrik is reduced by <em>30%</em>. This ability lasts for <em>10</em> seconds or until <em>90%</em> of Hendrik\'s max health is restored. This ability may only be used once per battle.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Ability lasts for a total of <em>13</em> seconds.',
    						unlock: 141,
    					},
    					{ desc: 'Ability restores <em>7%</em> of max health per second.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 20,
    		sig_item: {
    			name: 'Steadfast',
    			image: './img/si/hendrik.png',
    			desc: 'At the beginning of battles Hendrik\'s max health is increased by <em>300%</em> of his Attack Rating. The max health increase will not affect the proportion of health that Hendrik already possesses.',
    			upgrades: [
    				{ desc: 'At the beginning of battles Hendrik\'s max health is increased by <em>600%</em> of his Attack Rating. The max health increase will not affect the proportion of health that Hendrik already possesses.',
    					unlock: 10,
    				},
    				{ desc: 'All of Hendrik\'s attacks now do additional damage that is equal to <em>2%</em> of his max health.',
    					unlock: 20,
    				},
    				{ desc: 'At the beginning of battles Hendrik\'s max health is increased by <em>1000%</em> of his Attack Rating. The max health increase will not affect the proportion of health that Hendrik already possesses.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 0,
    		furniture: {
    			name: 'Defensive Stance',
    			image: './img/furniture/hendrik.png',
    			upgrades: [
    				{ desc: 'Increases the Defense Rating an allied hero that is positioned above Hendrik in the formation by <em>25%</em> of Hendrik\'s own Defense Rating value.',
    					unlock: 3,
    				},
    				{ desc: 'Increases the Defense Rating an allied hero that is positioned above Hendrik in the formation by <em>60%</em> of Hendrik\'s own Defense Rating value.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'rowan',
    		name: 'Rowan',
    		portrait: './img/portraits/rowan.png',
    		class: 'Support',
    		faction: 'Lightbearer',
    		type: 'Intelligence',
    		skills: [
    			{
    				name: 'Dazzle',
    				image: './img/skills/rowan1.png',
    				desc: 'Rowan throws copious amounts of gold coins onto the battlefield which <em>3</em> random targets will receive every <em>0.5</em> seconds. If the coins are collected by any allies, they will recover <em>50</em> Energy points and their Attack Rating will be increased by <em>30%</em> for <em>8</em> seconds. If the coins are received by any enemies, they will be stunned for <em>4</em> seconds.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Allies recover <em>60</em> Energy points.',
    						unlock: 81,
    					},
    					{ desc: 'Allies recover <em>70</em> Energy points.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Avian Assault',
    				image: './img/skills/rowan2.png',
    				desc: 'Rowan\'s duck attacks the nearest enemy multiple times for <em>60%</em> damage each, causing the enemy\'s accuracy to drop by <em>120</em> points for <em>10</em> seconds while also allowing Rowan to steal <em>80</em> of the enemy\'s Energy points.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>70%</em>.',
    						unlock: 21,
    					},
    					{ desc: 'Steals <em>120</em> Energy points.',
    						unlock: 101,
    					},
    					{ desc: 'Damage is increased to <em>80%</em>.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Healthy Supplies',
    				image: './img/skills/rowan3.png',
    				desc: 'After entering the battlefield, Rowan sets up a supply stall and places <em>3</em> health potions upon it. When a nearby ally\'s health drops below <em>50%</em> a potion will be used to restore <em>30%</em> of their max health. Each hero may use a potion once every <em>5</em> seconds.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'After all health potions have been consumed, Rowan will call in for more supplies.',
    						unlock: 121,
    					},
    					{ desc: 'Restores <em>40%</em> of max health.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Damage Control',
    				image: './img/skills/rowan4.png',
    				desc: 'When Rowan receives damage that exceeds <em>10%</em> of his max health, he will use his Energy to mitigate the damage, causing him to lose Energy instead of health. This ability can be used once every <em>3</em> seconds. Energy lost when using this ability is determined by the damage which is mitigated. A maximum of <em>80</em> Energy points can be used to mitigate damage.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Rowan recovers <em>20</em> Energy per second.',
    						unlock: 141,
    					},
    					{ desc: 'Energy lost when using ability reduced to <em>50</em> Energy points.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 30,
    		sig_item: {
    			name: 'Thirsty Work',
    			image: './img/si/rowan.png',
    			desc: 'After entering the battle Rowan will set up a stall that now includes an Energy potion. When an ally\'s Energy is above <em>600</em> points they will drink a potion, replenishing <em>60</em> Energy points. The Energy potion will be replenished each time the stall is set up.',
    			upgrades: [
    				{ desc: 'Energy restored increased to <em>120</em> points.',
    					unlock: 10,
    				},
    				{ desc: 'Energy restored increased to <em>200</em> points.',
    					unlock: 20,
    				},
    				{ desc: 'Energy restored increased to <em>400</em> points.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 0,
    		furniture: {
    			name: 'New Commodities',
    			image: './img/furniture/rowan.png',
    			upgrades: [
    				{ desc: 'When using the health potions from the ability "Healthy Supplies", allied heroes will additionally regenerate <em>1%</em> of their own max health per second over <em>10</em> seconds. This ability cannot be stacked.',
    					unlock: 3,
    				},
    				{ desc: 'When using he health potions from the ability "Healthy Supplies", allied heroes will additional regenerate <em>1.2%</em> of their own max health per second over <em>15</em> seconds. This ability cannot be stacked.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'gwyneth',
    		name: 'Gwyneth',
    		portrait: './img/portraits/gwyneth.jpg',
    		class: 'Ranger',
    		faction: 'Lightbearer',
    		type: 'Strength',
    		skills: [
    			{
    				name: 'Divine Arrow',
    				image: './img/skills/gwyneth1.png',
    				desc: 'Gwyneth fires a divine arrow into the sky which splits into multiple arrows that then rain down upon the enemy half of the battlefield, dealing <em>210%</em> damage to any enemies that are struck while also reducing their Accuracy by <em>90</em> for <em>8</em> seconds. This ability cannot be activated if the enemy side of the battlefield is empty.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>240%</em>, Enemy\'s Accuracy is reduced by <em>120</em>.',
    						unlock: 81,
    					},
    					{ desc: 'Damage is increased to <em>270%</em>, Enemy\'s Accuracy is reduced by <em>150</em>.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Flaming Arrows',
    				image: './img/skills/gwyneth2.png',
    				desc: 'Gwyneth\'s Normal Attacks will prioritize the enemy directly opposite her current position. Her Normal Attacks deal high damage and have a low attack frequency. Gwyneth\'s Normal Attacks have a <em>60%</em> chance to become flaming arrows that burn the enemy for <em>40%</em> damage per second over <em>5</em> seconds.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Enemy\'s health recovery is reduced by <em>30%</em> while burning.',
    						unlock: 21,
    					},
    					{ desc: 'Normal Attacks have a <em>70%</em> chance to become flaming arrows, burning effect deals <em>60%</em> damage per second.',
    						unlock: 101,
    					},
    					{ desc: 'Enemy\'s health recovery is reduced by <em>50%</em> while burning.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Lightning Arrows',
    				image: './img/skills/gwyneth3.png',
    				desc: 'Normal Attacks have a <em>60%</em> chance to become lightning arrows that can damage multiple nearby enemies for <em>240%</em> damage with chain lightning. Lightning arrows can also be combined with flaming arrows, allowing for the burning effect of the "Flaming Arrow" ability to also affect multiple nearby enemies.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Normal Attacks have a <em>70%</em> to become lightning arrows.',
    						unlock: 121,
    					},
    					{ desc: 'Stuns target enemy and any enemies hit by lightning.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Strength In Numbers',
    				image: './img/skills/gwyneth4.png',
    				desc: 'Accuracy is raised by <em>80</em> and Critical Strike damage is raised by <em>25%</em> when there are no enemies in Gwyneth\'s immediate vicinity.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Accuracy is raised by <em>120</em> and Critical Strike damage is raised by <em>25%</em>.',
    						unlock: 141,
    					},
    					{ desc: 'Accuracy is raised by <em>160</em> and Critical Strike damage is raised to <em>30%</em>.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 25,
    		sig_item: {
    			name: 'Focus Fire',
    			image: './img/si/gwyneth.png',
    			desc: 'Attack Rating is raised to <em>10%</em> when in close proximity to allied heroes.',
    			upgrades: [
    				{ desc: 'Attack Rating is raised to <em>20%</em>.',
    					unlock: 10,
    				},
    				{ desc: 'Gwyneth fires <em>2</em> arrows in quick sucession when she or a nearby ally uses their ultimate ability.',
    					unlock: 20,
    				},
    				{ desc: 'Attack Rating is raised to <em>30%</em>.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 3,
    		furniture: {
    			name: 'Arrows of Swiftness',
    			image: './img/furniture/gwyneth.png',
    			upgrades: [
    				{ desc: 'Gwyneth\'s first Normal Attack triggers the abilities "Flaming Arrow" and "Lightning Arrow" simultaneously. The damage for this attack is also increased by <em>15%</em>.',
    					unlock: 3,
    				},
    				{ desc: '"Flaming Arrow" and "Lightning Arrow" are triggered following the death of any non-summoned enemies. The damage for this attack is also increased by <em>15%</em>.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'rigby',
    		name: 'Rigby',
    		portrait: './img/portraits/rigby.jpg',
    		class: 'Warrior',
    		faction: 'Lightbearer',
    		type: 'Strength',
    		skills: [
    			{
    				name: 'Barrel Bomb',
    				image: './img/skills/rigby1.png',
    				desc: 'Rigby hurls his barrel towards an enemy target which deals <em>150%</em> damage on impact. Rigby then throws his pipe into the leaked contents of the barrel, causing it to explode and deal <em>200%</em> AoE damage to nearby enemies. Enemies close to the explosion are set alight for <em>8</em> seconds and suffer <em>30%</em> damage per second.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Explosion damage is increased to <em>250%</em>.',
    						unlock: 81,
    					},
    					{ desc: 'Explosion damage is increased to <em>300%</em>.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Fire Breath',
    				image: './img/skills/rigby2.png',
    				desc: 'Rigby takes a large swig of his drink and spits it back out at nearby enemies, dealing <em>120%</em> damage to them, also causing their Accuracy to be reduced by <em>30</em> points for <em>5</em> seconds.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Damage increased by up to <em>150%</em>.',
    						unlock: 21,
    					},
    					{ desc: 'Enemies\' Accuracy is reduced for <em>7</em> seconds.',
    						unlock: 101,
    					},
    					{ desc: 'Damage increased by up to <em>180%</em>.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Drunken Frenzy',
    				image: './img/skills/rigby3.png',
    				desc: 'Rigby drinks himself into a drunken frenzy which reduces all the damage he receives by <em>20%</em> and also increases his Haste by <em>15</em> points. The effects of "Drunken Frenzy" can be stacked up to <em>3</em> times, with the third time causing Rigby to become even more enraged, further increasing his Haste by <em>65</em> points for <em>8</em> seconds, after which he returns to his normal state.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Damage is reduced by <em>30%</em> each time ability is stacked.',
    						unlock: 121,
    					},
    					{ desc: 'Crit Rating is increased by <em>30%</em> each time ability is stacked.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Well Rested',
    				image: './img/skills/rigby4.png',
    				desc: 'After the effects of "Drunken Frenzy" have worn off, Rigby will recover <em>12%</em> of his max health per second for <em>5</em> seconds.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Rigby\'s Health Recovery Rate is Increased by <em>50%</em>.',
    						unlock: 141,
    					},
    					{ desc: 'Rigby\'s Health Recovery Rate is increased by <em>80%</em>.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 10,
    		sig_item: {
    			name: 'Fiery Demise',
    			image: './img/si/rigby.png',
    			desc: 'Rigby\'s "Fire Breath" ability will trigger an additional explosion on enemies currently set alight by the ability "Barrel Bomb", resulting in <em>180%</em> damage being dealt to them.',
    			upgrades: [
    				{ desc: 'Damage increased by up to <em>210%</em>.',
    					unlock: 10,
    				},
    				{ desc: 'Damage increased by up to <em>250%</em>.',
    					unlock: 20,
    				},
    				{ desc: 'Explosions cause enemies to be knocked down and stunned for <em>3</em> seconds.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 3,
    		furniture: {
    			name: 'Drunken Rage',
    			image: './img/furniture/rigby.png',
    			upgrades: [
    				{ desc: 'Using the ability "Drunken Frenzy" causes the ally with the lowest Combat Rating to also enter a state of frenzy. The frenzied state can be stacked multiple times. Each stacked layer of frenzy reduces the damage the ally receives by <em>25%</em>. Once this ability has been stacked <em>3</em> times, its effects will cease after <em>8</em> seconds.',
    					unlock: 3,
    				},
    				{ desc: 'Once frenzy has been stacked <em>3</em> times, the ally immediately recovers a value of health equal to <em>35%</em> of Rigby\'s max health.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'cecilia',
    		name: 'Cecilia',
    		portrait: './img/portraits/cecilia.jpg',
    		class: 'Ranger',
    		faction: 'Lightbearer',
    		type: 'Agility',
    		skills: [
    			{
    				name: 'Judgement Day',
    				image: './img/skills/cecilia1.png',
    				desc: 'Cecilia summons a divine blade down upon the head of the enemy which currently has the most "Symbols of Sin" above their head, dealing <em>280%</em> damage to them and further increasing number of symbols above their head by <em>1</em>. When this ability is used against enemies marked with <em>3</em> or more symbols, the enemies will also be stunned for a period of time. If used against enemies marked with <em>5</em> symbols, the targeted enemy will be dealt <em>200%</em> damage.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Damage increased by up to <em>300%</em>.',
    						unlock: 81,
    					},
    					{ desc: 'Damage increased by up to <em>320%</em>.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Blade of Purification',
    				image: './img/skills/cecilia2.png',
    				desc: 'Cecilia initiates a three-stage attack against an enemy, with each attack dealing <em>70%</em> damage to the target. Each time this ability is used increases the enemy\'s "Symbols of Sins" by <em>1</em> symbol. The damage caused by this ability is increased by <em>10%</em> for every additional symbol that the enemy is marked with. Enemies may be marked by a maximum of <em>5</em> symbols.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Ability\'s cooldown time is ignored every time a Normal Attack produces a critical strike.',
    						unlock: 21,
    					},
    					{ desc: 'Damage of each attack is raised to <em>80%</em> damage per attack.',
    						unlock: 101,
    					},
    					{ desc: 'Damage of each attack is raised to <em>90%</em> damage per attack.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Atonement',
    				image: './img/skills/cecilia3.png',
    				desc: 'Cecilia does not appear immediately at the beginning of battles, but instead appears behind the enemy that mirrors her formation position, unleashing a three-stage attack on them, dealing <em>80%</em> damage per attack to them while also marking them with <em>2</em> "Symbols of Sin".',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Enemies that kill an allied hero are marked with <em>3</em> "Symbols of Sin".',
    						unlock: 121,
    					},
    					{ desc: 'Damage of each attack is raised to <em>100%</em> damage per attack.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Devil Trap',
    				image: './img/skills/cecilia4.png',
    				desc: 'Cecilia creates a divine circle that encompasses her enemies. All enemies within the divine circle have their Attack Ratings reduced by <em>60%</em>. The first time each enemy tries to exit the circle will cause them to suffer <em>220%</em> damage.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Damage increased by up to <em>240%</em>.',
    						unlock: 141,
    					},
    					{ desc: 'Damage increased by up to <em>260%</em>.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 0,
    		sig_item: {
    			name: 'Repentance',
    			image: './img/si/cecilia.png',
    			desc: 'All allied heroes including Cecilia recover <em>200</em> Energy points and a total equivalent of <em>200%</em> worth of Cecilia\'s Attack Rating as health over <em>5</em> seconds whenever the ability "Judgement Day" kills an enemy in less than <em>5</em> seconds.',
    			upgrades: [
    				{ desc: 'Allied heroes including Cecilia recover <em>200</em> Energy points and a total equivalent of <em>250%</em> worth of Cecilia\'s Attack Rating as health.',
    					unlock: 10,
    				},
    				{ desc: 'Allied heroes including Cecilia recover <em>200</em> Energy points and a total equivalent of <em>300%</em> worth of Cecilia\'s Attack Rating as health.',
    					unlock: 20,
    				},
    				{ desc: 'Cecilia\'s Health Recovery Rate is increased by an additional <em>50%</em>.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 9,
    		furniture: {
    			name: 'Persecution',
    			image: './img/furniture/cecilia.png',
    			upgrades: [
    				{ desc: 'After every <em>4</em> seconds, Cecilia marks the enemy that has dealt the most damage with <em>1</em> Symbol(s) of Sin.',
    					unlock: 3,
    				},
    				{ desc: 'Using the ultimate ability "Judgement Day" marks the enemy with the second highest dealt damage with a Symbol of Sin.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'oscar',
    		name: 'Oscar',
    		portrait: './img/portraits/oscar.jpg',
    		class: 'Ranger',
    		faction: 'Lightbearer',
    		type: 'Agility',
    		skills: [
    			{
    				name: 'Aura of Haste',
    				image: './img/skills/oscar1.png',
    				desc: 'Oscar throws <em>4</em> knives into the ground, forming a magical aura on the ground that deals <em>270%</em> AoE damage to nearby enemies. The aura exists for <em>11</em> seconds and increases Oscar\'s Haste by <em>100</em> points while he is standing inside it.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Duration is extended up to <em>13</em> seconds.',
    						unlock: 81,
    					},
    					{ desc: 'Duration is extended up to <em>15</em> seconds.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Fine Cuts',
    				image: './img/skills/oscar2.png',
    				desc: 'Oscar targets the <em>2</em> weakest enemies and throws knives at them, dealing <em>180%</em> to them. This attack causes Oscar\'s knives to remain stuck in the ground to be potentially used again.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Damage increased by up to <em>220%</em>.',
    						unlock: 21,
    					},
    					{ desc: 'Ability causes enemy to become stunned for <em>2</em> seconds.',
    						unlock: 101,
    					},
    					{ desc: 'Damage increased by up to <em>260%</em>.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Slice and Dice',
    				image: './img/skills/oscar3.png',
    				desc: 'Oscar instantaneously appears next to a knife stuck in the ground, picks it up, and proceeds to slice up any nearby enemies for <em>200%</em> damage.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Damage increased by up to <em>240%</em>.',
    						unlock: 121,
    					},
    					{ desc: 'Damage increased by up to <em>270%</em>.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Unfazed',
    				image: './img/skills/oscar4.png',
    				desc: 'Oscar scrubs his glasses clean, removing the majority of de-buff effects which are currently affecting him and simultaneously increases his Crit Rating by <em>25</em> points and his Dodge Rating by <em>95</em> points which will remain that way until Oscar falls victim to any enemy control abilities.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Crit Rating is increased by <em>35</em> points.',
    						unlock: 141,
    					},
    					{ desc: 'Dodge Rating is increased by <em>135</em> points.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 30,
    		sig_item: {
    			name: 'Uninvited Guest',
    			image: './img/si/oscar.png',
    			desc: 'If an enemy appears on the allied side of the battlefield, Oscar instantaneously appears beside them and proceeds to kick them back into their own half of the battlefield, resulting in <em>200%</em> damage being dealt to the enemy.',
    			upgrades: [
    				{ desc: 'Ability converts <em>100%</em> of damage taken by the enemy into health.',
    					unlock: 10,
    				},
    				{ desc: 'Damage increased by up to <em>300%</em>.',
    					unlock: 20,
    				},
    				{ desc: 'Ability possesses a stun effect which lasts for <em>5</em> seconds.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 9,
    		furniture: {
    			name: 'Swift Service',
    			image: './img/furniture/oscar.png',
    			upgrades: [
    				{ desc: 'Every time Oscar moves locations due to his abilities increases his Dodge by <em>60</em> points for <em>5</em> seconds. The length of time that this ability lasts for is calculated individually each time it is used. This ability can be stacked multiple times.',
    					unlock: 3,
    				},
    				{ desc: 'The ability "Slice and Dice" is used continuously up until there are no knives left next to any enemies.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'eluard',
    		name: 'Eluard',
    		portrait: './img/portraits/eluard.jpg',
    		class: 'Mage',
    		faction: 'Lightbearer',
    		type: 'Intelligence',
    		skills: [
    			{
    				name: 'Sanctimony',
    				image: './img/skills/eluard1.png',
    				desc: 'Eluard immediately creates a Divine Shield that has a value equal to <em>180%</em> of his max health. If Eluard already possesses a Divine Shield, he consumes it in order to deal damage equal to <em>20%</em> of the consumed shield\'s value to all enemies. Damage dealt cannot exceed <em>500%</em> of Eluard\'s own Attack Rating.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Divine Shield\'s value is equal to <em>220%</em> of Eluard\'s max health.',
    						unlock: 81,
    					},
    					{ desc: 'Divine Shield\'s value is equal to <em>260%</em> of Eluard\'s max health.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Divine Miracle',
    				image: './img/skills/eluard2.png',
    				desc: 'Eluard creates a Divine Shield at the beginning of battle that has a value equal to <em>150%</em> of his max health. When the Divine Shield is broken, Eluard becomes stunned for <em>8</em> seconds, after which he creates a new Divine Shield with a value equal to <em>150%</em> of his max health. Damage dealt to Eluard when not protected by his Divine Shield is equal to <em>350%</em> of the initial damage.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Damage received when Eluard is not protected by his Divine Shield is equal to <em>300%</em> of the initial damage.',
    						unlock: 21,
    					},
    					{ desc: 'Damage received when Eluard is not protected by his Divine Shield is equal to <em>250%</em> of the initial damage.',
    						unlock: 101,
    					},
    					{ desc: 'Duration Eluard is stunned for after his Divine Shield breaks is reduced to <em>5</em> seconds.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Prayer of Protection',
    				image: './img/skills/eluard3.png',
    				desc: 'Eluard recites divine scripture, which grants the ally farthest forward on the battlefield immunity from all damage. This ability can be interrupted.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Damage immunity effect lasts for <em>3</em> seconds even after the recitation ends or is interrupted.',
    						unlock: 121,
    					},
    					{ desc: 'Most debuffs affecting the target ally are removed when Eluard begins his recitation.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Judgement',
    				image: './img/skills/eluard4.png',
    				desc: 'Eluard recites a scripture of judgment, after which he deals <em>220%</em> damage to all enemies. Enemies that have slain an allied hero will be dealt <em>50%</em> more damage for each allied hero they slay. This ability can be interrupted.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Deals <em>260%</em> damage after recitation ends.',
    						unlock: 141,
    					},
    					{ desc: 'Enemies that slay allied heroes will be dealt <em>80%</em> more damage for each that they slay.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 15,
    		sig_item: {
    			name: 'Shield of Faith',
    			image: './img/si/eluard.png',
    			desc: 'After the first <em>2</em> seconds of battle, the farthest forward ally (excluding Eluard) on the battlefield receives a shield with a value equal to <em>50%</em> of their own max health, which exists for <em>5</em> seconds.',
    			upgrades: [
    				{ desc: 'Shield\'s value is equal to <em>70%</em> of the ally\'s max health.',
    					unlock: 10,
    				},
    				{ desc: 'Shield\'s value is equal to <em>80%</em> of the ally\'s max health, and exists for <em>8</em> seconds.',
    					unlock: 20,
    				},
    				{ desc: 'Shield\'s value is equal to <em>100%</em> of the ally\'s max health, and their Attack Rating is increased by <em>40%</em> while the shield exists.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 9,
    		furniture: {
    			name: 'Unbreakable Faith',
    			image: './img/furniture/eluard.png',
    			upgrades: [
    				{ desc: 'Damage immunity effects of the ability "Prayer of Protection" now include Eluard.',
    					unlock: 3,
    				},
    				{ desc: 'After the ability "Sanctimony" is used for the first time, the damage immunity effects of the next "Prayer of Protection" will include all allies.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'peggy',
    		name: 'Peggy',
    		portrait: './img/portraits/peggy.jpg',
    		class: 'Support',
    		faction: 'Lightbearer',
    		type: 'Intelligence',
    		skills: [
    			{
    				name: 'Duty Bound',
    				image: './img/skills/peggy1.png',
    				desc: 'Passive: Peggy is accompanied by <em>2</em> guards, that each possess <em>80%</em> of her own attributes. If an enemy is beside Peggy, her guards will return to protect her. Peggy\'s movements will always prioritize the rear-center allied side of the battlefield. If Peggy is killed, her guards will leave the battlefield.<br><br>Active: Using the Ultimate ability increases the guards\' Haste by <em>5</em> points and Defense Rating by <em>100%</em> for <em>12</em> seconds. If there are no guards present on the battlefield when this ability is used, Peggy will call forward a guard, which uses his shield to knock back any enemies in his path, sending them hurtling into the air, dealing damage equal to <em>350%</em> of the guard\'s Attack Rating, also stunning them for <em>3</em> seconds.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Guard possesses <em>100%</em> of Peggy\'s attributes.',
    						unlock: 81,
    					},
    					{ desc: 'Guard possesses <em>120%</em> of Peggy\'s attributes.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Royal Scroll',
    				image: './img/skills/peggy2.png',
    				desc: 'Peggy uses a magic scroll that heals her guards and <em>1</em> non-summoned ally for <em>220%</em> worth of Peggy\'s Attack Rating.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Amount of health recovered is equal to <em>250%</em> of Peggy\'s Attack Rating.',
    						unlock: 21,
    					},
    					{ desc: 'Amount of health recovered is equal to <em>280%</em> of Peggy\'s Attack Rating.',
    						unlock: 101,
    					},
    					{ desc: 'Peggy\'s scroll is able to heal <em>2</em> allied heroes.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Royal Guards',
    				image: './img/skills/peggy3.png',
    				desc: 'Peggy\'s guard creates a shield around himself and the nearest non-summoned ally, which has a value equal to <em>20%</em> of the guard\'s own health, that exists for <em>8</em> seconds.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Peggy\'s guard uses his weapon to attack an enemy in front of him for <em>180%</em> damage and then uses his shield to bash them into the air, stunning them for <em>2.5</em> seconds, dealing a further <em>230%</em> damage to the target.',
    						unlock: 121,
    					},
    					{ desc: 'Peggy\'s guard uses his weapon to attack an enemy in front of him for <em>230%</em> damage and then uses his shield to bash them into the air, stunning them for <em>3.1</em> seconds, dealing a further <em>280%</em> damage to the target.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Royal Marksmen',
    				image: './img/skills/peggy4.png',
    				desc: 'Peggy calls forth <em>5</em> marksmen that fire a salvo at the enemy which is closest to Peggy. Each marksman deals <em>70%</em> damage to the target, subsequently reducing the target\'s Accuracy by <em>10</em> points and their Haste by <em>10</em> points for <em>7</em> seconds. If the enemy target is on the enemy side of the battlefield, the marksmen have a chance to miss their shots. The farther an enemy is from the marksmen increases their chances of missing, with the maximum chance to miss a shot being <em>30%</em>.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Each Marksman\'s damage is increased by <em>80%</em>.',
    						unlock: 141,
    					},
    					{ desc: 'Each Marksman\'s damage is increased by <em>90%</em>.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 30,
    		sig_item: {
    			name: 'Battle Hardened',
    			image: './img/si/peggy.png',
    			desc: 'Guards\' Attack Ratings are increased by <em>12%</em> and Dodge is increased by <em>25</em> points every <em>8</em> seconds. Attributes cannot be increased more than <em>2</em> times.',
    			upgrades: [
    				{ desc: 'Guards\' Attack Ratings are increased by <em>15%</em> and Dodge is increased by <em>30</em> points every <em>6</em> seconds.',
    					unlock: 10,
    				},
    				{ desc: 'Number of times attributes can be increased cannot exceed <em>3</em>.',
    					unlock: 20,
    				},
    				{ desc: 'Guards are immune to control effects when beside Peggy.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 9,
    		furniture: {
    			name: 'Frontline Reinforcements',
    			image: './img/furniture/peggy.png',
    			upgrades: [
    				{ desc: 'Can only be triggered once per battle. Once all of Peggy\'s guards have been defeated, she immediately calls in <em>2</em> more guards to assist her.',
    					unlock: 3,
    				},
    				{ desc: 'When entering the battlefield, all guards receive a shield that is able to mitigate damage equal to <em>80%</em> of their max health, which exists for <em>8</em> seconds.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'walker',
    		name: 'Walker',
    		portrait: './img/portraits/walker.jpg',
    		class: 'Warrior',
    		faction: 'Lightbearer',
    		type: 'Strength',
    		skills: [
    			{
    				name: 'Saloon Blast',
    				image: './img/skills/walker1.png',
    				desc: 'Walker uses his shotgun to fire a shell at the enemy directly opposite himself, dealing <em>80%</em> damage to the enemy, simultaneously firing <em>4</em> additional pellets that deal <em>20%</em> damage to any nearby enemies that are struck. Pellets cannot inflict Critical Strikes. When using his Ultimate ability, Walker cancels reloading and will only use Normal Attacks which are strengthened for the following <em>8</em> seconds. When a shotgun shell strikes an enemy target, it will deal an additional <em>70%</em> AoE damage to nearby enemies, and the number of pellets are increased to <em>6</em> pellets.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'The chance for a shotgun shell to deal a Critical Strike is additionally increased by <em>30%</em> while the Ultimate ability is active.',
    						unlock: 81,
    					},
    					{ desc: 'Additional damage dealt by pellets is additionally increased by <em>25%</em> while the Ultimate ability is active.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Spittoon Smack',
    				image: './img/skills/walker2.png',
    				desc: 'Walker smacks the enemy standing before him with his shotgun, knocking down and stunning them for <em>4</em> seconds, dealing <em>140%</em> damage to them. If the enemy is knocked down, Walker then shoots them on the ground, dealing <em>240%</em> extra damage.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'The damage dealt by smacking an enemy with the shotgun is increased to <em>160%</em>.',
    						unlock: 21,
    					},
    					{ desc: 'The damage dealt by smacking an enemy with the shotgun is increased to <em>180%</em>.',
    						unlock: 101,
    					},
    					{ desc: 'When an enemy is knocked down and shot, they are fatally injured, reducing the damage they deal by <em>40%</em> for <em>6</em> seconds.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Gunslinger',
    				image: './img/skills/walker3.png',
    				desc: 'Walker pulls out his revolver and shoots the <em>2</em> enemy target(s) with the lowest health, dealing <em>360%</em> damage to the them. If a target\'s health is below <em>10%</em>, the Crit Rating of this ability is increased by an additional <em>6%</em>.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Number of enemies that can be targeted is increased up to <em>3</em>.',
    						unlock: 121,
    					},
    					{ desc: 'Every time an enemy is killed by this ability, Walker receives a shield that has a value equal to <em>40%</em> of his own health, which lasts for <em>8</em> seconds.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Old Faithful',
    				image: './img/skills/walker4.png',
    				desc: 'Every time Walker\'s attacks deal a Critical Strike, his Crit Amplification is additionally increased by <em>2</em> points, but cannot exceed <em>60</em> points.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Crit Amplification is increased to additional <em>2.5</em> points.',
    						unlock: 141,
    					},
    					{ desc: 'Crit Amplification is increased to additional <em>3</em> points.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 0,
    		sig_item: {
    			name: 'Hotshot',
    			image: './img/si/walker.png',
    			desc: 'When Walker\'s health falls below <em>60%</em>, his Crit Rating is increased by an additional <em>15%</em>.',
    			upgrades: [
    				{ desc: 'When Walker\'s health falls below <em>60%</em>, his Crit Rating is increased by an additional <em>20%</em>.',
    					unlock: 10,
    				},
    				{ desc: 'When Walker\'s health falls below <em>60%</em>, his Crit Rating is increased by an additional <em>25%</em>.',
    					unlock: 20,
    				},
    				{ desc: 'While Walker\'s Ultimate ability is active, every Critical Strike he deals will extend the duration of the ability by <em>1</em> seconds, and can reach a maximum time of <em>5</em> seconds.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 0,
    		furniture: {
    			name: 'Unfazed',
    			image: './img/furniture/walker.png',
    			upgrades: [
    				{ desc: 'Walker is immune to control effects while his Ultimate ability is active.',
    					unlock: 3,
    				},
    				{ desc: 'Walker receives an additional <em>25</em> Life Leech points while his Ultimate ability is active.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'brutus',
    		name: 'Brutus',
    		portrait: './img/portraits/brutus.jpg',
    		class: 'Tank',
    		faction: 'Mauler',
    		type: 'Strength',
    		skills: [
    			{
    				name: 'Whirlwind',
    				image: './img/skills/brutus1.png',
    				desc: 'Brutus hacks at his enemies twice before spinning into a frenzy, dealing damage to them. Brutus is impervious to any mind control abilities while spinning.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Brutus is immune to Magic Damage while spinning.',
    						unlock: 81,
    					},
    					{ desc: '<em>35%</em> of total damage dealt is converted into health.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Roar',
    				image: './img/skills/brutus2.png',
    				desc: 'Brutus lets out a terrifying roar that causes enemies to become more vulnerable. Any Physical Damage dealt to enemies is increased by <em>25%</em>.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Physical Damage received by enemies is increased by up to <em>30%</em>.',
    						unlock: 21,
    					},
    					{ desc: 'Physical Damage received by enemies is increased by up to <em>40%</em> and attacks cannot be dodged.',
    						unlock: 101,
    					},
    					{ desc: 'Physical Damage received by enemies is increased by up to <em>50%</em>.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Brutal Defiance',
    				image: './img/skills/brutus3.png',
    				desc: 'Brutus\' damage output is raised according to how low his health falls. Brutus\' Attack Rating can be increased by up to <em>90%</em>.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Brutus\' Haste can be increased by up to <em>25%</em> when his health is low.',
    						unlock: 121,
    					},
    					{ desc: 'Attack Rating increased by up to <em>100%</em> and Haste increased by up to <em>25%</em>.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Last Gasp',
    				image: './img/skills/brutus4.png',
    				desc: 'When Brutus is dealt a fatal blow he is able to retain <em>1</em> health point and is immune to all subsequent damage for <em>7</em> seconds. Ability can only be used once.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Brutus is immune to damage for <em>7</em> seconds.',
    						unlock: 141,
    					},
    					{ desc: 'Brutus is immune to damage for <em>8</em> seconds.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 20,
    		sig_item: {
    			name: 'Upsurge',
    			image: './img/si/brutus.png',
    			desc: 'Restores <em>15%</em> of Brutus\' max HP after the ability "Last Gasp" is used.',
    			upgrades: [
    				{ desc: '<em>30%</em> of max HP is restored after resurrection.',
    					unlock: 10,
    				},
    				{ desc: 'Last Gasp is extended for <em>1</em> second.',
    					unlock: 20,
    				},
    				{ desc: 'Once the effect of the ability "Last Gasp" have ceased Brutus receives an additional shield that is able to mitigate damage equal to <em>50%</em> of his max health, which lasts for <em>5</em> seconds.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 3,
    		furniture: {
    			name: 'Warrior\'s Resilience',
    			image: './img/furniture/brutus.png',
    			upgrades: [
    				{ desc: 'The duration of the ability "Last Gasp" is extended by <em>2</em> seconds.',
    					unlock: 3,
    				},
    				{ desc: 'The ability "Last Gasp" is extended by <em>2</em> seconds for each non-summoned ally that dies before or during the use of it.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'khasos',
    		name: 'Khasos',
    		portrait: './img/portraits/khasos.jpg',
    		class: 'Warrior',
    		faction: 'Mauler',
    		type: 'Strength',
    		skills: [
    			{
    				name: 'Spinning Obliteration',
    				image: './img/skills/khasos1.png',
    				desc: 'Khasos faces the side with the most enemies and throws a total of <em>5</em> war axes that all hit different enemies, dealing <em>220%</em> damage to them. War axes are able to penetrate enemies, thus, any enemies that are struck more than once shall only suffer <em>45%</em> damage after the initial strike.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>240%</em>.',
    						unlock: 81,
    					},
    					{ desc: 'Damage is increased to <em>260%</em>.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Concentration',
    				image: './img/skills/khasos2.png',
    				desc: 'Khasos\' Normal Attack is able to hit multiple enemies when they get too close to him and his Defense Rating is increased by <em>12%</em>. If enemies are far away from Khasos then his Attack Rating will be increased by <em>8%</em>.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Increases Defense Rating by <em>25%</em>. Increases Attack Rating by <em>12%</em>.',
    						unlock: 21,
    					},
    					{ desc: 'Increases Defense Rating by <em>35%</em>. Increases Attack Rating by <em>16%</em>.',
    						unlock: 101,
    					},
    					{ desc: 'Increases Defense Rating by <em>45%</em>. Increases Attack Rating by <em>20%</em>.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Throwing Axe',
    				image: './img/skills/khasos3.png',
    				desc: 'Khasos throws a war axe towards his enemies that causes <em>130%</em> damage twice to all enemies in its path. Khasos has a <em>70%</em> chance to catch the axe on its return, if he successfully catches it, his attack speed will be temporarily increased.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Damage is increased by up to <em>145%</em>. Recovers a small amount of Energy if the war axe is caught by Khasos.',
    						unlock: 121,
    					},
    					{ desc: 'Damage is increased to <em>160%</em>.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Rabid Thirst',
    				image: './img/skills/khasos4.png',
    				desc: 'All friendly targets have their life-leech attributes increased by <em>15</em> points.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Raises life-leech attributes of Mauler heroes by an additional <em>10</em> points.',
    						unlock: 141,
    					},
    					{ desc: 'Increases life-leech attributes of all allies by <em>18</em> points.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 0,
    		sig_item: {
    			name: 'Precision',
    			image: './img/si/khasos.png',
    			desc: 'Increases the chance of Khasos catching his battle axe when using his "Throwing Axe" ability by <em>75%</em>. After catching the axe Khasos will then immediately use his "Throwing Axe" ability again, however the chance to catch the axe again will then be reduced by <em>25%</em> up until Khasos is no longer able to catch it and the ability is reset.',
    			upgrades: [
    				{ desc: 'Chance to catch axe increased to <em>80%</em>.',
    					unlock: 10,
    				},
    				{ desc: '<em>30%</em> of axes damage is converted into health.',
    					unlock: 20,
    				},
    				{ desc: 'Chance to catch axe increased to <em>100%</em>.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 3,
    		furniture: {
    			name: 'Almighty Warrior',
    			image: './img/furniture/khasos.png',
    			upgrades: [
    				{ desc: 'When positioned on the backline, each living frontline ally increases Khasos\' Crit Amplification by <em>25</em> points. When positioned on the frontline, damage received by all backline allies is reduced by <em>22%</em>.',
    					unlock: 3,
    				},
    				{ desc: 'Within <em>5</em> seconds of Khasos using his Ultimate ability, the increased attribute effects of the abilities "Concentration" and "Almighty Warrior" shall become active, ignoring all prior requirements.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'vurk',
    		name: 'Vurk',
    		portrait: './img/portraits/vurk.jpg',
    		class: 'Ranger',
    		faction: 'Mauler',
    		type: 'Agility',
    		skills: [
    			{
    				name: 'Mania',
    				image: './img/skills/vurk1.png',
    				desc: 'Vurk runs up and down the battlefield for <em>15</em> seconds while he fires bolts at multiple enemies. Bolts may pierce enemies, and all enemies struck by the bolt are dealt <em>100%</em> damage.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>110%</em>.',
    						unlock: 81,
    					},
    					{ desc: 'Damage is increased to <em>120%</em>.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Piercing Bolt',
    				image: './img/skills/vurk2.png',
    				desc: 'When using Normal Attacks, Bolts fired from Vurk\'s crossbow are able to penetrate enemies, dealing <em>140%</em> damage to all enemies standing in a straight line.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>170%</em>.',
    						unlock: 21,
    					},
    					{ desc: 'When this ability deals damage against enemies that are poisoned as a result of Vurk\'s "Poison Vial" ability, Vurk\'s Attack Speed will be increased by <em>60</em> for <em>3</em> seconds. This ability cannot be stacked.',
    						unlock: 101,
    					},
    					{ desc: 'For every poisoned enemy that this ability deals damage against, Vurk shall recover an additional <em>40</em> Energy.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Poison Vial',
    				image: './img/skills/vurk3.png',
    				desc: 'Vurk lobs a poison vial at an enemy, which poisons them for <em>10</em> seconds, Poisoned enemies will have their Energy Recovery rate decreased by 50%, Attack Rating decreased by <em>50%</em>, and they will also lose health equal to <em>50%</em> of Vurk\'s Attack Rating every second. Poison effects cannot be stacked, and if an already poisoned enemy is targeted again by this ability, the duration of the poison\'s effects shall be extended.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Poisoned enemies lose health equal to <em>60%</em> of Vurk\'s Attack Rating per second.',
    						unlock: 121,
    					},
    					{ desc: 'Poisoned enemies lose health equal to <em>70%</em> of Vurk\'s Attack Rating per second.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Poison Traps',
    				image: './img/skills/vurk4.png',
    				desc: 'At the beginning of battles Vurk sets poison traps behind himself and his frontline allies. Traps are activated when enemies are in close proximity to them and cause any nearby enemies to become stunned for <em>3</em> seconds and poisoned for <em>10</em> seconds. The ability\'s poison effects are consistent with the ability "Poison Vial". Enemies which are immune to control abilities will not trigger the traps.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Enemies are stunned for <em>4</em> seconds.',
    						unlock: 141,
    					},
    					{ desc: 'Enemies are stunned for <em>5</em> seconds.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 30,
    		sig_item: {
    			name: 'Madness',
    			image: './img/si/vurk.png',
    			desc: 'Vurk\'s "Mania" ability now fires <em>3</em> crossbow bolts per aftack, however the additional bolts will deal <em>80%</em> damage.',
    			upgrades: [
    				{ desc: 'Additional crossbow bolt damage increased to <em>100%</em> damage.',
    					unlock: 10,
    				},
    				{ desc: 'Additional crossbow bolt damage increased to <em>120%</em> damage.',
    					unlock: 20,
    				},
    				{ desc: 'The "Mania" ability now fires <em>5</em> crossbow bolts per attack.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 9,
    		furniture: {
    			name: 'Poisonous Death',
    			image: './img/furniture/vurk.png',
    			upgrades: [
    				{ desc: 'Vurk\'s Normal Attacks and "Mania" ability deal <em>35%</em> more damage to enemies that have been poisoned by his own abilities.',
    					unlock: 3,
    				},
    				{ desc: 'Prolongs the duration of time an enemy is poisoned for by <em>1</em> seconds when Vurk uses a Normal Attack or his "Mania" ability.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'numisu',
    		name: 'Numisu',
    		portrait: './img/portraits/numisu.jpg',
    		class: 'Support',
    		faction: 'Mauler',
    		type: 'Intelligence',
    		skills: [
    			{
    				name: 'Voodoo Blessing',
    				image: './img/skills/numisu1.png',
    				desc: 'Numisu heals <em>2</em> allied heroes for <em>400%</em> of Numisu\'s Attack Rating, prioritizing frontline allied heroes. Enemies near the healing targets are simultaneously dealt <em>260%</em> AoE damage.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Recovery effects are increased to <em>440%</em> of Attack Rating.',
    						unlock: 81,
    					},
    					{ desc: 'Recovery effects are increased to <em>480%</em> of Attack Rating.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Rejuvenating Totem',
    				image: './img/skills/numisu2.png',
    				desc: 'Numisu sets down a rejuvenating totem next to the most injured allied hero, that initially heals nearby allies for a value to <em>100%</em> of Numisu\'s Attack Rating. The totem then remains active and heals nearby allies for <em>3%</em> of their max health per second. The rejuvenating totem possesses health equal to <em>240%</em> of Numisu\'s Attack Rating.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Heals <em>110%</em> of total Attack Rating value.',
    						unlock: 21,
    					},
    					{ desc: 'Heals <em>120%</em> of total Attack Rating value.',
    						unlock: 101,
    					},
    					{ desc: 'Heals <em>130%</em> of total Attack Rating value.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Offensive Totem',
    				image: './img/skills/numisu3.png',
    				desc: 'Place a Totem of Ridicule behind an enemy. When the totem is placed, deal <em>120%</em> of attack power in AoE damage, and mock nearby enemies for <em>2</em> seconds, forcing them to use Normal Attacks against it. Totems of Ridicule have the same Defense Rating as Numisu, and HP equal to <em>650%</em> of his Attack Power.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Offensive Totem heals itself for <em>10%</em> health per second.',
    						unlock: 121,
    					},
    					{ desc: 'Damage is increased to <em>150%</em>.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Fanaticism',
    				image: './img/skills/numisu4.png',
    				desc: 'Numisu buffs the ally with the highest attack power, granting them <em>40</em> haste and <em>20%</em> Normal Attack speed for <em>10</em> seconds.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Haste increased to <em>50</em>, Normal Attack speed increased to <em>30%</em>.',
    						unlock: 141,
    					},
    					{ desc: 'Effects are increased to <em>12</em> seconds.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 30,
    		sig_item: {
    			name: 'Totem Master',
    			image: './img/si/numisu.png',
    			desc: 'At the beginning of the battle Numisu sets down an offensive totem at center of the battlefield.',
    			upgrades: [
    				{ desc: 'At the beginning of the battle Numisu sets down a rejuvenating totem behind his own team\'s backline.',
    					unlock: 10,
    				},
    				{ desc: 'The health of Numisu\'s totems is increased by <em>40%</em>.',
    					unlock: 20,
    				},
    				{ desc: 'The health of Numisu\'s totems is increased by <em>100%</em>.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 9,
    		furniture: {
    			name: 'Power of Faith',
    			image: './img/furniture/numisu.png',
    			upgrades: [
    				{ desc: 'Ultimate "Voodoo Blessing" additionally heals up to <em>2</em> summoned totems, which all take on their normal effects.',
    					unlock: 3,
    				},
    				{ desc: 'Numisu\'s ultimate "Voodoo Blessing" additionally heals the weakest <em>1</em> unhealed allies, as well as up to <em>4</em> of his totems.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'warek',
    		name: 'Warek',
    		portrait: './img/portraits/warek.jpg',
    		class: 'Warrior',
    		faction: 'Mauler',
    		type: 'Strength',
    		skills: [
    			{
    				name: 'Bloodlust',
    				image: './img/skills/warek1.png',
    				desc: 'Warek unleashes a multi-strike attack that interrupts and knocks back his target with each hit, dealing <em>65%</em> damage to them. Warek cannot be controlled when using this ability.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>80%</em>.',
    						unlock: 81,
    					},
    					{ desc: 'Damage received is reduced by <em>80%</em> when using this ability.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Bonebreaker',
    				image: './img/skills/warek2.png',
    				desc: 'Warek targets the weakest enemy in his vicinity and throws them backwards over his head, dealing <em>150%</em> damage to them while also stunning them.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Damage is raised by up to <em>180%</em>.',
    						unlock: 21,
    					},
    					{ desc: 'Thrown enemy receives <em>30%</em> more damage for <em>10</em> seconds.',
    						unlock: 101,
    					},
    					{ desc: 'Thrown enemy receives <em>80%</em> more damage for <em>10</em> seconds.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Extricate',
    				image: './img/skills/warek3.png',
    				desc: 'Removes all abilities that are negatively affecting Warek. This ability has a cooldown period of <em>5</em> seconds.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'After removing all negative effects, Warek forms a shield around himself that mitigates <em>250%</em> of the damage inflicted upon him.',
    						unlock: 121,
    					},
    					{ desc: 'Shield\'s damage mitigation effect is strengthened by <em>350%</em>.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Wrath',
    				image: './img/skills/warek4.png',
    				desc: 'A passive ability that allows Warek to build up his rage with each successful attack that he lands on his enemies, allowing him to raise his damage by <em>2.5%</em>. This ability can be stacked up to <em>12</em> times.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Warek regenerates Energy over time once ability is fully stacked and his Life Leech attributes are greatly increased.',
    						unlock: 141,
    					},
    					{ desc: 'Damage is raised up to <em>4%</em>.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 0,
    		sig_item: {
    			name: 'Brawler\'s Resistance',
    			image: './img/si/warek.png',
    			desc: 'When Warek\'s "Carnal Rage" ability cannot be stacked any further, he will recover <em>3%</em> health per second over <em>15</em> seconds.',
    			upgrades: [
    				{ desc: 'Ability restores <em>4%</em> of max health per second.',
    					unlock: 10,
    				},
    				{ desc: 'Ability restores <em>5%</em> of max health per second.',
    					unlock: 20,
    				},
    				{ desc: 'Stacks Warek\'s "Carnal Rage" buff effects once every <em>2</em> seconds. Once the effects can no longer be stacked, his Attack Rating will be increased by an additional <em>0.7%</em> per second.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 0,
    		furniture: {
    			name: 'Battle Vigor',
    			image: './img/furniture/warek.png',
    			upgrades: [
    				{ desc: 'If one of Warek\'s Normal Attacks or abilities strikes <em>2</em> enemies or more, then his Crit Rating is increased by <em>40%</em> and his Crit Amplification is increased by <em>45</em> points for his attack.',
    					unlock: 3,
    				},
    				{ desc: 'Warek has a <em>100%</em> chance to hit his enemies when there are <em>2</em> or more heroes within range of Warek\'s Normal Attacks or skills.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'skreg',
    		name: 'Skreg',
    		portrait: './img/portraits/skreg.jpg',
    		class: 'Tank',
    		faction: 'Mauler',
    		type: 'Strength',
    		skills: [
    			{
    				name: 'Beast of Burden',
    				image: './img/skills/skreg1.png',
    				desc: 'Skreg\'s iron-jaw steed cannot be knocked backwards. When this ability is used, Skreg rides his iron-jaw, which uses <em>80</em> Energy per second up until all if his Energy is exhausted. While Skreg is riding his iron-jaw he is immune to control abilities and his attack is increased by <em>30%</em>, Skreg\'s Normal Attacks will also deal damage twice and knock down enemy targets.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Energy expediture reduced to <em>60</em> per second.',
    						unlock: 81,
    					},
    					{ desc: 'Damage increased to <em>50%</em>.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Brute Force',
    				image: './img/skills/skreg2.png',
    				desc: 'The iron-jaw assists Skreg in attacking his enemies by smashing them backwards into the air, dealing a small amount of damage to them. If the enemy is successfully knocked into the air, Skreg will initiate a three-stage attack against them which deals <em>140%</em> damage per attack to the enemy.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Skreg beats his drum and rides his iron-jaw into nearby enemies, dealing <em>110%</em> damage multiple times to hem, also causing them to be knocked back.',
    						unlock: 21,
    					},
    					{ desc: 'Damage increased by up to <em>150%</em>.',
    						unlock: 101,
    					},
    					{ desc: 'Damage increased by up to <em>160%</em>.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Ironskin',
    				image: './img/skills/skreg3.png',
    				desc: 'Enemies deal less damage to Skreg the closer they get to him. Damage reduction is at its maximum when enemies are within Skreg\'s striking range. Damage received can be reduced by up to <em>40%</em>.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Damage reduction is increased by up to <em>50%</em>.',
    						unlock: 121,
    					},
    					{ desc: 'Damage reduction is increased by up to <em>60%</em>.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Stampede',
    				image: './img/skills/skreg4.png',
    				desc: 'Every <em>8</em> seconds an iron-jaw appears and charges towards the enemy closest to Skreg\'s allies\' side of the battlefield, knocking them and any other enemies in its path, dealing <em>150%</em> damage to them.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Damage increased by up to <em>165%</em>.',
    						unlock: 141,
    					},
    					{ desc: 'Damage increased by up to <em>180%</em>.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 20,
    		sig_item: {
    			name: 'Beast Rider',
    			image: './img/si/skreg.png',
    			desc: 'The ability "Beast of Burden" will no longer drain Energy for the first <em>5</em> seconds after each time it is used.',
    			upgrades: [
    				{ desc: 'Only requires <em>500</em> Energy to activate ultimate ability for the first time.',
    					unlock: 10,
    				},
    				{ desc: 'Energy that is recovered when injured is increased by <em>50%</em>.',
    					unlock: 20,
    				},
    				{ desc: 'Only requires <em>200</em> Energy to activate ultimate ability for the first time.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 9,
    		furniture: {
    			name: 'Vanguards of Pain',
    			image: './img/furniture/skreg.png',
    			upgrades: [
    				{ desc: 'All allied heroes with the enemy half of the battlefield have their Attack Ratings increased by <em>20%</em> and also receive <em>25%</em> less damage from enemy attacks.',
    					unlock: 3,
    				},
    				{ desc: 'Allied heroes recover <em>100</em> Energy points after every <em>3</em> seconds in the enemy\'s half of the battlefield.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'safiya',
    		name: 'Safiya',
    		portrait: './img/portraits/safiya.jpg',
    		class: 'Mage',
    		faction: 'Mauler',
    		type: 'Intelligence',
    		skills: [
    			{
    				name: 'Falling Sun',
    				image: './img/skills/safiya1.png',
    				desc: 'Safiya focuses her energy into a large, powerful orb that deals AoE damage on impact. Depending on how long Safiya focuses her energy, the orb can deal from <em>100%</em> damage up to <em>540%</em> damage, with the area of effect also increasing in radius. Pressing Safiya\'s portrait initiates the focusing stage of the ability, pressing the portrait once more releases the orb.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Maximum orb damage raised to <em>600%</em>.',
    						unlock: 81,
    					},
    					{ desc: 'Maximum orb damage raised to <em>660%</em>.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Scattered Bolt',
    				image: './img/skills/safiya2.png',
    				desc: 'Safiya fires a magic projectile at an enemy target which deals <em>170%</em> damage and stuns them for a short time. After impacting the first enemy target, the projectile splits into <em>2</em> small and weaker projectiles that target other nearby enemies.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>190%</em>.',
    						unlock: 21,
    					},
    					{ desc: 'Splits into <em>3</em> orbs on impact.',
    						unlock: 101,
    					},
    					{ desc: 'Damage is increased to <em>210%</em>.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Static Field',
    				image: './img/skills/safiya3.png',
    				desc: 'Safiya provides the most forward positioned ally with an electric aura that lasts for <em>10</em> seconds. The electric aura causes <em>70%</em> damage per second to every enemy standing within its radius.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>80%</em> per second.',
    						unlock: 121,
    					},
    					{ desc: 'Damage is increased to <em>90%</em> per second.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Spectral Disruption',
    				image: './img/skills/safiya4.png',
    				desc: 'At the beginning of the battle Safiya casts a circular enchantment on the ground that lasts for <em>25</em> seconds. All allies standing within the circle have their Attack Ratings increased by <em>16%</em> and all enemies standing within the circle have their Attack Ratings reduced by <em>50%</em> as well as their haste reduced.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Damage increased to <em>20%</em>.',
    						unlock: 141,
    					},
    					{ desc: 'Damage increased to <em>24%</em>.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 20,
    		sig_item: {
    			name: 'Arcane Power',
    			image: './img/si/safiya.png',
    			desc: '<em>1%</em> of Safiya\'s total damage output is converted into her Attack Rating. The Attack Rating can be increased up to a total of <em>140%</em>.',
    			upgrades: [
    				{ desc: '<em>2%</em> of Safiya\'s total damage output is converted into her Attack Rating.',
    					unlock: 10,
    				},
    				{ desc: '<em>3%</em> of Safiya\'s total damage output is converted into her Attack Rating.',
    					unlock: 20,
    				},
    				{ desc: 'Safiya will use "Scattered Bolt" instead of Normal Attacks once the Attack Rating increase has reached its maximum percentage.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 0,
    		furniture: {
    			name: 'Harmonized Power',
    			image: './img/furniture/safiya.png',
    			upgrades: [
    				{ desc: 'Duration of the "Spectral Disruption" in increased by <em>15</em> seconds.',
    					unlock: 3,
    				},
    				{ desc: 'The focusing stage of the ultimate ability "Falling Sun" is sped up by <em>40%</em> while "Spectral Disruption" is still present on the battlefield.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'satrana',
    		name: 'Satrana',
    		portrait: './img/portraits/satrana.jpg',
    		class: 'Mage',
    		faction: 'Mauler',
    		type: 'Intelligence',
    		skills: [
    			{
    				name: 'Firedance',
    				image: './img/skills/satrana1.png',
    				desc: 'Satrana initiates a fire dance, during which time she becomes immune to all attacks and control abilities. Satrana\'s attack deals <em>80%</em> damage multiple times to the enemy, with the final attack dealing <em>200%</em> explosive damage to the target.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>220%</em>.',
    						unlock: 81,
    					},
    					{ desc: 'Damage is increased to <em>240%</em>.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Fluter Flame',
    				image: './img/skills/satrana2.png',
    				desc: 'Satrana\'s Normal Attacks change, allowing her to pounce forward a small distance and deal <em>120%</em> damage <em>2</em> times to the enemy target. Damage received by Satrana is reduced by <em>25%</em> while this attack\'s animation is in motion.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>130%</em>.',
    						unlock: 21,
    					},
    					{ desc: '<em>25%</em> of damage is converted into health.',
    						unlock: 101,
    					},
    					{ desc: 'Damage is increased to <em>140%</em>.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Fireseeds',
    				image: './img/skills/satrana3.png',
    				desc: 'Satrana throws fireseeds onto an enemy (prioritizes enemies according to the order of their formation numbers). While the fireseeds are on the enemy, the enemy loses <em>1%</em> of their max health per second. Once the enemy target\'s health falls below <em>25%</em>, the fireseeds explode, causing <em>300%</em> AoE damage.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Fireseeds cause the enemy to be stunned for <em>2.5</em> seconds after they explode.',
    						unlock: 121,
    					},
    					{ desc: 'Fireseed explosion damage is increased to <em>330%</em>.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Overflow',
    				image: './img/skills/satrana4.png',
    				desc: 'When an attack or ability inflicts damage on an enemy, the enemy burns for <em>3</em> seconds. Enemies that are burning have the healing they receive reduced by <em>50</em> and lose a value of health equal to <em>35%</em> of Satrana\'s Attack Rating every second. This ability cannot be stacked.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Burning enemies lose a value of health equal to <em>39%</em> of Satrana\'s Attack Rating.',
    						unlock: 141,
    					},
    					{ desc: 'Burning enemies lose a value of health equal to <em>43%</em> of Satrana\'s Attack Rating.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 30,
    		sig_item: {
    			name: 'Mark of the Fox',
    			image: './img/si/satrana.png',
    			desc: 'Enemies that possess a higher percentage of health compared to Satrana\'s own deal <em>20%</em> less damage to Satrana.',
    			upgrades: [
    				{ desc: 'Enemies that possess a higher percentage of health compared to Satrana\'s own deal <em>30%</em> less damage to Satrana.',
    					unlock: 10,
    				},
    				{ desc: 'Enemies that possess a higher percentage of health compared to Satrana\'s own deal <em>40%</em> less damage to Satrana.',
    					unlock: 20,
    				},
    				{ desc: 'When Satrana\'s health falls below <em>35%</em> for the first time, the next time she uses her "Firedance" ability will not require her to use any Energy points.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 9,
    		furniture: {
    			name: 'Firedance',
    			image: './img/furniture/satrana.png',
    			upgrades: [
    				{ desc: 'If the ability "Overflow" causes the total duration an enemy has been set alight for to exceed <em>15</em> seconds, the burning effects of "Overflow" are strengthened. Enemies may not recover any health while being burned as a result of "Overflow" and raised to <em>2</em> times its original value.',
    					unlock: 3,
    				},
    				{ desc: 'Burning effects of "Overflow" are strengthen when the enemy has been set alight for a total of <em>9</em> seconds.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'antandra',
    		name: 'Antandra',
    		portrait: './img/portraits/antandra.jpg',
    		class: 'Warrior',
    		faction: 'Mauler',
    		type: 'Agility',
    		skills: [
    			{
    				name: 'Fury Strike',
    				image: './img/skills/antandra1.png',
    				desc: 'Antandra unleashes a multi-stage attack that deals <em>50%</em> damage with each hit to the enemy which currently has the highest Attack Rating, with the final attack dealing <em>190%</em> damage to them, also stunning them for <em>3</em> seconds. While this ability is in use, Antandra is immune to damage and ignores the enemy\'s dodges. After successfully striking the enemy with her final attack, Antandra steals <em>40%</em> of the enemy\'s Attack Rating and keeps it for <em>6</em> seconds. This ability cannot be stacked against a single target more than once, and the amount of Attack Rating stolen cannot exceed <em>450%</em> of her own Attack Rating value.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Final attack deals <em>220%</em> damage.',
    						unlock: 81,
    					},
    					{ desc: 'Final attack deals <em>250%</em> damage.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Mark of the Wild',
    				image: './img/skills/antandra2.png',
    				desc: 'Antandra attacks an enemy for <em>220%</em> damage, imprinting her mark upon them for <em>4</em> seconds. While marked, the enemy\'s Accuracy is reduced by <em>80</em> and their Energy recovery is reduced by <em>60%</em>.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Enemy is marked for <em>5</em> seconds.',
    						unlock: 21,
    					},
    					{ desc: 'Enemy is marked for <em>6</em> seconds.',
    						unlock: 101,
    					},
    					{ desc: 'Enemy is marked for <em>7</em> seconds.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Piercing Assault',
    				image: './img/skills/antandra3.png',
    				desc: 'Antandra throws her spear at the enemy with the highest Attack Rating, dealing <em>180%</em> damage to all enemies it penetrates. Antandra then dashes over to the enemy target, after which she receives a shield which exists for <em>5</em> seconds, that has a value equal to <em>550%</em> of the target Attack Rating, but will not exceed <em>1000%</em> of her own Attack Rating. Enemies hit by Antandra\'s spear are marked by Antandra. Antandra cannot be controlled and ignores enemy dodges while this ability is active.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>210%</em>.',
    						unlock: 121,
    					},
    					{ desc: 'Damage is increased to <em>240%</em>.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Knockdown',
    				image: './img/skills/antandra4.png',
    				desc: 'Antandra uses her spear to swipe at nearby enemies, dealing <em>180%</em> damage to them, also knocking them down, meanwhile Antandra recovers <em>22%</em> of the health she has already lost. Antandra also recovers an additional <em>8%</em> of her max health for every enemy that she knocks down.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>210%</em>.',
    						unlock: 141,
    					},
    					{ desc: 'Damage is increased to <em>240%</em>.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 30,
    		sig_item: {
    			name: 'Unconquerable',
    			image: './img/si/antandra.png',
    			desc: 'Allies that strike marked enemies will have their Accuracy increased by <em>70</em> points and Crit Rating increased by <em>15</em> points for <em>4</em> seconds. This ability cannot be stacked.',
    			upgrades: [
    				{ desc: 'Accuracy is increased by <em>80</em> points, Crit Rating increased by up to <em>20</em> points.',
    					unlock: 10,
    				},
    				{ desc: 'Accuracy is increased by <em>90</em> points, Crit Rating increased by up to <em>25</em> points.',
    					unlock: 20,
    				},
    				{ desc: 'Allies receive an additional <em>60</em> Energy points after striking marked enemies. This ability is triggered once every <em>2</em> seconds.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 9,
    		furniture: {
    			name: 'Warrior\'s Spirit',
    			image: './img/furniture/antandra.png',
    			upgrades: [
    				{ desc: 'Antandra receives <em>40%</em> less damage from enemies that are out of range of her "Knockdown" ability.',
    					unlock: 3,
    				},
    				{ desc: 'If Antandra loses a total of <em>95%</em> of her max health, her Attack Rating is increased by <em>30%</em> and she recovers <em>70</em> Energy points per second and is also immune to enemy control abilities until the end of the battle.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'tidus',
    		name: 'Tidus',
    		portrait: './img/portraits/tidus.jpg',
    		class: 'Ranger',
    		faction: 'Mauler',
    		type: 'Agility',
    		skills: [
    			{
    				name: 'Twisted Fate',
    				image: './img/skills/tidus1.png',
    				desc: 'Tidus spirals into a whirlwind that engulfs the battlefield, dealing <em>160%</em> damage to all enemies that he passes, finally pouncing on the weakest enemy target for <em>180%</em> damage.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Final pounce deals <em>200%</em> damage.',
    						unlock: 81,
    					},
    					{ desc: 'Final pounce deals <em>220%</em> damage.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Frenzied Strikes',
    				image: './img/skills/tidus2.png',
    				desc: 'Tidus slices the enemy standing in front of him in a vicious five-stage attack, dealing <em>60%</em> damage per attack to the target. Due to profuse blood loss, the enemy target suffers <em>65%</em> damage per second over <em>8</em> seconds whenever they move.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Damage of each attack is raised to <em>70%</em> damage per attack.',
    						unlock: 21,
    					},
    					{ desc: 'Blood loss lasts for <em>12</em> seconds when moving.',
    						unlock: 101,
    					},
    					{ desc: 'Damage of each attack is raised to <em>80%</em> damage per attack.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Battle Howl',
    				image: './img/skills/tidus3.png',
    				desc: 'Tidus lets out a ferocious howl that terrifies his enemies, causing them to flee his from his vicinity for <em>5</em> seconds. After howling, Tidus\' movement speed is increased by <em>35%</em> and his Attack Rating is increased by <em>20%</em> for <em>10</em> seconds.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Attack Rating is increased up to <em>30%</em>.',
    						unlock: 121,
    					},
    					{ desc: 'Nearby allies also receive a movement speed and Attack Rating increase.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Savagery',
    				image: './img/skills/tidus4.png',
    				desc: 'Tidus viciously and persistently attacks an enemy whose health is lower than <em>50%</em> of its maximum until they are slain. While using this ability, the Attack Rating of Tidus\' Normal Attack is increased by <em>35%</em>.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Life Leech level is raised by <em>40</em> while pursuing a weakened enemy.',
    						unlock: 141,
    					},
    					{ desc: 'Attack Rating is increased up to <em>50%</em>.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 30,
    		sig_item: {
    			name: 'Battle Hardened',
    			image: './img/si/tidus.png',
    			desc: 'Reduces all damage that Tidus receives by <em>40%</em> for the first <em>6</em> seconds after "Savagery" is used.',
    			upgrades: [
    				{ desc: 'Reduces <em>60%</em> of all damage received.',
    					unlock: 10,
    				},
    				{ desc: 'Reduces <em>70%</em> of all damage received.',
    					unlock: 20,
    				},
    				{ desc: 'Tidus is impervious to all enemy control abilities for the first <em>6</em> seconds after "Savagery" is used.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 3,
    		furniture: {
    			name: 'Lust for Blood',
    			image: './img/furniture/tidus.png',
    			upgrades: [
    				{ desc: 'Tidus\' received healing is increased by <em>25</em>. Tenacity is increased by <em>17</em> and Attack Rating is increased by <em>8%</em> for every non-summoned enemy that has been defeated or which currently has less than <em>50%</em> of their max health.',
    					unlock: 3,
    				},
    				{ desc: 'If Tidus kills an enemy or is close to an enemy that is killed, he will recover <em>35%</em> of the health which has already been lost.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'skriath',
    		name: 'Skriath',
    		portrait: './img/portraits/skriath.jpg',
    		class: 'Mage',
    		faction: 'Mauler',
    		type: 'Intelligence',
    		skills: [
    			{
    				name: 'Desert Vortex',
    				image: './img/skills/skriath1.png',
    				desc: 'Skriath summons a sand vortex that appears in the center of the enemy formation which persists for <em>5</em> seconds. The vortex has an AoE radius which continuously pulls in enemies, dealing <em>70%</em> damage per second to all enemies that are trapped in its grasp.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Damage increased by up to <em>75%</em>.',
    						unlock: 81,
    					},
    					{ desc: 'Damage increased by up to <em>80%</em>.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Death from Above',
    				image: './img/skills/skriath2.png',
    				desc: 'Skriath causes large rocks to fall upon an enemy targets\'s head, dealing <em>160%</em> AoE damage to them and any nearby enemies',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Damage increased by up to <em>170%</em>.',
    						unlock: 21,
    					},
    					{ desc: 'Damage increased by up to <em>180%</em>.',
    						unlock: 101,
    					},
    					{ desc: 'Damage increased by up to <em>185%</em>.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Sandstorm',
    				image: './img/skills/skriath3.png',
    				desc: 'Skriath creates "Sandstorm" which lasts for <em>12</em> seconds. The sandstorm reduces the Accuracy of all enemies by <em>100</em> points and Haste by <em>25</em> while they are standing within the sandstorm.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Skriath deals <em>20%</em> more damage to enemies that are standing within the sandstorm.',
    						unlock: 121,
    					},
    					{ desc: 'Duration is extended up to <em>15</em> seconds.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Critical Insight',
    				image: './img/skills/skriath4.png',
    				desc: 'Raises allies\' Crit Raiting by <em>0.5</em> points per second until a maximum of <em>20</em> points are reached.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Max limit of Crit Rating is increased to <em>20</em> points.',
    						unlock: 141,
    					},
    					{ desc: 'Raises Crit Rating by <em>0.8</em> points per second.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 30,
    		sig_item: {
    			name: 'Boulder Blast',
    			image: './img/si/skriath.png',
    			desc: 'Each time Skriath deals a Critical Strike to an enemy target, large rocks fall down on them, dealing <em>50%</em> AoE damage to them and any nearby enemies. This ability is unable to deal critical damage itself and can only target the same enemy once every <em>3</em> seconds.',
    			upgrades: [
    				{ desc: 'Damage increased by up to <em>70%</em>.',
    					unlock: 10,
    				},
    				{ desc: 'Damage increased by up to <em>90%</em>.',
    					unlock: 20,
    				},
    				{ desc: 'During a "Sandstorm", all enemies are dealt <em>2%</em> of their current health value per second as damage, ignoring all enemy Defense Ratings.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 3,
    		furniture: {
    			name: 'Desert Trap',
    			image: './img/furniture/skriath.png',
    			upgrades: [
    				{ desc: 'At the beginning of battles, enemies positioned at the top and bottom positions of the enemy formation\'s backline are pulled closer towards the center backline enemy hero by a desert vortex.',
    					unlock: 3,
    				},
    				{ desc: 'When "Sandstorm" weather conditions are occurring, allies that have the wind behind them have their movement speed increased by <em>150%</em>. Enemies that are fighting against the direction of the wind have their movement speed decreased by <em>75%</em>.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'anoki',
    		name: 'Anoki',
    		portrait: './img/portraits/anoki.jpg',
    		class: 'Tank',
    		faction: 'Mauler',
    		type: 'Strength',
    		skills: [
    			{
    				name: 'Savage Stampede',
    				image: './img/skills/anoki1.png',
    				desc: 'Anoki blows his war horn, calling forth a stampede of Iron-jaw beasts that are able to strike <em>3</em> enemies. Enemies standing in the Iron-jaws\' way are dealt <em>50%</em> damage and are carried backwards towards the edge of the screen. Once the enemies reach the edge of the screen they are sent hurtling into the air and suffer <em>120%</em> damage which leaves them stunned for <em>2</em> seconds.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Enemies suffer <em>140%</em> damage when thrown into the air.',
    						unlock: 81,
    					},
    					{ desc: 'Enemies suffer <em>160%</em> damage when thrown into the air.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Raging Stomp',
    				image: './img/skills/anoki2.png',
    				desc: 'Anoki stomps the ground <em>3</em> times, with the first two stomps each dealing <em>65%</em> damage to the enemy, with the final stomp dealing <em>120%</em> damage to them, that also leaves them stunned for <em>1.5</em> seconds.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Final stomp deals <em>130%</em> damage to enemies.',
    						unlock: 21,
    					},
    					{ desc: 'Final stomp causes enemies to lose <em>25</em> Haste points for <em>5</em> seconds.',
    						unlock: 101,
    					},
    					{ desc: 'Final stomp deals <em>140%</em> damage to enemies.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Born to Lead',
    				image: './img/skills/anoki3.png',
    				desc: 'Anoki manifests an aura around himself that lasts for <em>8</em> seconds. While the aura is present, all allies including Anoki have their Attack Ratings increased by <em>8%</em>, the damage they receive is reduced by <em>1%</em> and the frequency of their Normal Attacks is increased by <em>15%</em>. Melee heroes receive an extra increase of <em>150%</em> for all of the preceding attributes.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Attack Rating is raised by <em>9%</em>.',
    						unlock: 121,
    					},
    					{ desc: 'Attack Rating is raised by <em>10%</em>.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Horn of War',
    				image: './img/skills/anoki4.png',
    				desc: 'Used once at the start of battles, this ability grants allies a protective shield that lasts for <em>5</em> seconds, which is able to mitigate damage that is equal to <em>20%</em> of Anoki\'s max health.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Shield\'s value is equal to <em>25%</em> of Anoki\'s max health.',
    						unlock: 141,
    					},
    					{ desc: 'Shield\'s value is equal to <em>30%</em> of Anoki\'s max health.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 20,
    		sig_item: {
    			name: 'War Fury',
    			image: './img/si/anoki.png',
    			desc: 'This ability raises Anoki\'s Attack Rating by <em>4%</em> for every non-summoned ally that is standing near him and raises his Defense Rating by <em>10%</em> for every enemy standing near him.',
    			upgrades: [
    				{ desc: 'This ability raises Anoki\'s Attack Rating by <em>8%</em> for every non-summoned ally that is standing near him and raises his Defense Rating by <em>15%</em> for every enemy standing near him.',
    					unlock: 10,
    				},
    				{ desc: 'Excluding summoned entities, when there are more than a total of <em>3</em> characters on the battlefield (includes enemies and allies), Anoki recovers <em>5%</em> of his max health per second and becomes immune to control abilities.',
    					unlock: 20,
    				},
    				{ desc: 'This ability raises Anoki\'s Attack Rating by <em>12%</em> for every non-summoned ally that is standing near him and raises his Defense Rating by <em>20%</em> for every enemy standing near him.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 0,
    		furniture: {
    			name: 'Blood Guard\'s Honor',
    			image: './img/furniture/anoki.png',
    			upgrades: [
    				{ desc: 'For every <em>15</em> seconds after the battle begins, Anoki additionally uses his "Horn of War" ability <em>1</em> time, until it is used a total of <em>2</em> times per battle. Each time the ability is used, the shield value will be reduced to <em>50%</em> of the previous shield\'s value.',
    					unlock: 3,
    				},
    				{ desc: 'For every <em>15</em> seconds after the battle begins, Anoki additionally uses his "Horn of War" ability <em>1</em> time, until it is used a total of <em>3</em> times per battle. Each time the ability is used, the shield value will be reduced to <em>70%</em> of the previous shield\'s value.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'drez',
    		name: 'Drez',
    		portrait: './img/portraits/drez.jpg',
    		class: 'Ranger',
    		faction: 'Mauler',
    		type: 'Agility',
    		skills: [
    			{
    				name: 'Deadly Ambush',
    				image: './img/skills/drez1.png',
    				desc: 'Drez instantly moves to the weakest enemy. For the following <em>15</em> seconds, Drez will prioritize the pursuit of that enemy, during which time Normal Melee Attacks become stronger and Drez\'s Crit Rating is increased by <em>100%</em>.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'If the target dies during this time, <em>400</em> Energy is restored.',
    						unlock: 81,
    					},
    					{ desc: 'If the target dies during this time, <em>700</em> Energy is restored.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Bloody Eviseration',
    				image: './img/skills/drez2.png',
    				desc: 'Drez spins in a full circle, dealing <em>210%</em> damage to nearby enemies, reducing their Defense Rating by <em>70%</em> for <em>8</em> seconds.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>230%</em>.',
    						unlock: 21,
    					},
    					{ desc: 'Damage is increased to <em>240%</em>.',
    						unlock: 101,
    					},
    					{ desc: 'Damage is increased to <em>250%</em>.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Tactical Retreat',
    				image: './img/skills/drez3.png',
    				desc: 'When Drez\'s health falls below <em>50%</em> for the first time, he leaves the battlefield for <em>5</em> seconds, during which time he recovers <em>100</em> Energy points per second. While away from the battlefield, using Drez\'s Ultimate ability will cause him to prematurely return to the battlefield. If Drez\'s Ultimate ability "Deadly Ambush" is already being used when he disappears from the battlefield, he will continue to use it once he returns.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'After returning to the battlefield, Drez\'s Attack Rating is increased by <em>25%</em> and his Life Leech is increased by <em>40</em> points for <em>15</em> seconds.',
    						unlock: 121,
    					},
    					{ desc: 'After returning to the battlefield, Drez\'s Attack Rating is increased by <em>40%</em> and his Life Leech is increased by <em>40</em> points for <em>15</em> seconds.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'The Rabid Slice',
    				image: './img/skills/drez4.png',
    				desc: 'Drez\'s Crit Amplification is increased by <em>40</em> points and his Attack Speed is increased by <em>15</em> points. During the use of his ultimate ability "Deadly Ambush", Drez receives an additional <em>25</em> Attack Speed points.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Drez\'s Crit Amplification is increased by <em>45</em> points and his Attack Speed is increased by <em>15</em> points. During the use of his ultimate ability "Deadly Ambush", Drez receives an additional <em>30</em> Attack Speed points.',
    						unlock: 141,
    					},
    					{ desc: 'Drez\'s Crit Amplification is increased by <em>50</em> points and his Attack Speed is increased by <em>20</em> points. During the use of his ultimate ability "Deadly Ambush", Drez receives an additional <em>30</em> Attack Speed points.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 20,
    		sig_item: {
    			name: 'Hunter\'s Shield',
    			image: './img/si/drez.png',
    			desc: 'After using his Ultimate ability, Drez receives a shield which is able to mitigate damage worth <em>400%</em> of his Attack Rating value for a duration of <em>5</em> seconds. This ability can be activated <em>2</em> times per battle.',
    			upgrades: [
    				{ desc: 'Value of shield is increased to <em>600%</em> of Attack Rating value.',
    					unlock: 10,
    				},
    				{ desc: 'Ability can be used up to <em>4</em> times per battle.',
    					unlock: 20,
    				},
    				{ desc: 'Value of shield is increased to <em>800%</em> of Attack Rating value.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 9,
    		furniture: {
    			name: 'Second Wind',
    			image: './img/furniture/drez.png',
    			upgrades: [
    				{ desc: 'Every time the abilities "Deadly Ambush" or "Bloody Evisceration" are used, Drez\'s Attack Speed will be increased by <em>80</em> points for a duration of <em>2</em> seconds.',
    					unlock: 3,
    				},
    				{ desc: 'Every time the abilities "Deadly Ambush" or "Bloody Evisceration" are used, Drezs Attack Speed will be increased by <em>150</em> points for a duration of <em>3</em> seconds.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'kren',
    		name: 'Kren',
    		portrait: './img/portraits/kren.jpg',
    		class: 'Ranger',
    		faction: 'Mauler',
    		type: 'Agility',
    		skills: [
    			{
    				name: 'Bomb Voyage',
    				image: './img/skills/kren1.png',
    				desc: 'Kren returns to the allied side of the battlefield to set "Hot Stuff" down on the ground and fires <em>1</em> shell every <em>0.5</em> seconds for <em>10</em> seconds instead of using his Normal Attack. Each shell deals <em>180%</em> AoE damage to enemies. During the shelling period, Kren cannot move, be knocked back or knocked into the air. Shelling shall cease if there are no enemies on the enemy side of the battlefield.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>200%</em>.',
    						unlock: 81,
    					},
    					{ desc: 'Damage is increased to <em>220%</em>.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Enshrouding Bomb',
    				image: './img/skills/kren2.png',
    				desc: 'Kren lobs a smoke bomb at the allied hero which is farthest forward, enshrouding them in smoke for <em>8</em> seconds. Allies enshrouded by the smoke cannot be dealt Critical Strikes and have their own Crit Ratings increased by <em>25</em> points.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Crit Rating is increased by <em>30</em> points.',
    						unlock: 21,
    					},
    					{ desc: 'Crit Rating is increased by <em>35</em> points.',
    						unlock: 101,
    					},
    					{ desc: 'Crit Rating is increased by <em>40</em> points.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Old Pal',
    				image: './img/skills/kren3.png',
    				desc: 'At the beginning of battle Kren fires a flare into the sky, calling in a friend of his who sets down <em>5</em> landmines behind the enemy formation, at the edge of the battlefield. If an enemy steps on a landmine it will explode, dealing <em>300%</em> AoE damage, also stunning enemies for <em>5</em> seconds.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>340%</em>.',
    						unlock: 121,
    					},
    					{ desc: 'Each landmine that explodes increases Kren\'s Attack Rating by <em>15%</em> up until the end of battle. This ability can be stacked <em>3</em> times.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Concussive Blast',
    				image: './img/skills/kren4.png',
    				desc: 'Kren charges towards the enemy that is nearest to the allied side of the battlefield and uses "Lady" to attack them. This attack deals <em>240%</em> damage to the target and sends them hurtling backwards, Kren is also knocked backwards as a result of "Lady\'s" force.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>270%</em>.',
    						unlock: 141,
    					},
    					{ desc: 'Damage is increased to <em>300%</em>.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 20,
    		sig_item: {
    			name: 'Potent Firepower',
    			image: './img/si/kren.png',
    			desc: 'After using <em>3</em> regular Normal Attacks, Normal Attacks are enhanced once. Enhanced Normal Attacks deal an additional <em>40%</em> damage to enemies, and also knock them backwards, stunning them for <em>1</em> second.',
    			upgrades: [
    				{ desc: 'Normal Attacks are enhanced once after using regular Normal Attacks <em>2</em> times.',
    					unlock: 10,
    				},
    				{ desc: 'Enemies are stunned for <em>2</em> seconds.',
    					unlock: 20,
    				},
    				{ desc: 'Normal Attacks are enhanced once after using regular Normal Attacks <em>1</em> time.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 9,
    		furniture: {
    			name: 'Action Plan',
    			image: './img/furniture/kren.png',
    			upgrades: [
    				{ desc: 'Increases the AoE range of the ability "Enshrouding Bomb", and reduces the Haste of enemies enshrouded within the smoke by <em>40</em> points.',
    					unlock: 3,
    				},
    				{ desc: 'When the ability "Enshrouding Bomb" is used, an additional smoke bomb is thrown into the most congested area of enemies.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'thali',
    		name: 'Thali',
    		portrait: './img/portraits/thali.jpg',
    		class: 'Mage',
    		faction: 'Mauler',
    		type: 'Intelligence',
    		skills: [
    			{
    				name: 'Pyromaniac',
    				image: './img/skills/thali1.png',
    				desc: 'Thali enters a state of frenzy which lasts for <em>12</em> seconds. While in a frenzy, Thali\'s Energy Recovery is reduced by <em>40%</em>, her Attack Rating is increased by <em>30%</em>, her Haste is increased by <em>45</em> points, and her other abilities are strengthened. Once Thali\'s frenzy ends, she becomes exhausted for a short period, during which time she is unable to move or attack. Thali cannot trigger her ultimate ability again while already in a frenzy.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Frenzy lasts for <em>14</em> seconds.',
    						unlock: 81,
    					},
    					{ desc: 'Attack Rating is increased by <em>40%</em>, Haste is increased by <em>60</em> points.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Fire Rapture',
    				image: './img/skills/thali2.png',
    				desc: 'Thali sacrifices <em>15%</em> of her current health to deal <em>220%</em> AoE damage plus <em>1.3</em> times the value of her sacrificed health as damage. While in a frenzy, damage dealt is increased to <em>280%</em> and the damage range is increased.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>240%</em>.',
    						unlock: 21,
    					},
    					{ desc: 'Attack Rating is increased to <em>300%</em> while in a frenzy.',
    						unlock: 101,
    					},
    					{ desc: 'Deals <em>1.5</em> times the value of sacrificed health as damage.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Flame Burst',
    				image: './img/skills/thali3.png',
    				desc: 'Thali shoots <em>3</em> fireballs in quick succession, dealing <em>170%</em> damage per fireball. While in a frenzy, fireballs will additionally knock back the enemy and stun them for <em>3</em> seconds.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>180%</em>.',
    						unlock: 121,
    					},
    					{ desc: 'Damage is increased to <em>190%</em>.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Pyromancy',
    				image: './img/skills/thali4.png',
    				desc: 'At the beginning of battles, Thali casts a spell to sacrifice <em>35%</em> of her current health to strengthen herself allowing her to gain between <em>20%-50%</em> Damage Reduction and <em>10-30</em> Life Leech points according to the porportion of current health. The spell\'s power increases the lower Thali\'s health falls, and will be most powerful when her health falls below <em>40%</em>.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'While Thali is in a frenzy, the ability will ignore the proportion of current health and will always be at its most powerful state.',
    						unlock: 141,
    					},
    					{ desc: 'Thali may receive a maximum increase of <em>60%</em> Damage Reduction and <em>40</em> Life Leech Points.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 20,
    		sig_item: {
    			name: 'Fiery Focus',
    			image: './img/si/thali.png',
    			desc: 'Damage dealt to enemies that currently have a higher proportion of health than Thali is increased by <em>20%</em>.',
    			upgrades: [
    				{ desc: 'Damage dealt to enemeis that currently have a higher proportion of health than Thali is increased by <em>30%</em>.',
    					unlock: 10,
    				},
    				{ desc: 'Thali is immune to control effects when her health falls below <em>50%</em>.',
    					unlock: 20,
    				},
    				{ desc: 'While in a frenzy, Thali\'s damage increases, ignoring her enemies\' health proportions.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 3,
    		furniture: {
    			name: 'Heart of Fire',
    			image: './img/furniture/thali.png',
    			upgrades: [
    				{ desc: 'Each time Thali enters a frenzy, all non-summoned allies have their Attack Ratings increased by <em>20%</em> and their Haste increased by <em>20</em> points for <em>7</em> seconds.',
    					unlock: 3,
    				},
    				{ desc: 'When Thali receives fatal damage when in a frenzy, she will maintain the minimum amount of health and postpone her own death. Once this effect has been triggered, Thali\'s health will no longer change, and as soon as her frenzy effect ends, she immediately dies.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'nemora',
    		name: 'Nemora',
    		portrait: './img/portraits/nemora.jpg',
    		class: 'Support',
    		faction: 'Wilder',
    		type: 'Intelligence',
    		skills: [
    			{
    				name: 'Wild Wonder',
    				image: './img/skills/nemora1.png',
    				desc: 'Nemora calls upon the forces of nature to heal all of her teammates health by <em>30%</em> of her own max health.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Allies with health lower than <em>20%</em> regenerate health <em>30%</em> faster.',
    						unlock: 81,
    					},
    					{ desc: 'Increases the Defense Rating of allies by <em>15%</em>.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Beguile',
    				image: './img/skills/nemora2.png',
    				desc: 'Nemora deals <em>90%</em> damage to a random enemy target that is standing within her attack range, causing them to become entranced for <em>6</em> seconds. While in an entranced state, the affected enemy will use Normal Attacks to attack their own team.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>110%</em>.',
    						unlock: 21,
    					},
    					{ desc: 'Entranced enemies now use all abilities excluding their ultimate abilities to attack.',
    						unlock: 101,
    					},
    					{ desc: 'Entranced enemy\'s Attack Rating increased by <em>30%</em> while entranced.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Mother Nature',
    				image: './img/skills/nemora3.png',
    				desc: 'Nemora is able to increase the healing efficiency of herself and all teammates by <em>15%</em>.',
    				unlock: 41,
    				upgrades: [
    					{ desc: '<em>50%</em> of the overflowing health that exceeds a hero\'s maximum health is converted into a protective shield.',
    						unlock: 121,
    					},
    					{ desc: 'Health regeneration increased by <em>20%</em>.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Life Force',
    				image: './img/skills/nemora4.png',
    				desc: 'Nemora gradually heals the weakest member of her team for <em>30%</em> of her own maximum health.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Gradually restores a total of <em>150</em> Energy points to her ally.',
    						unlock: 141,
    					},
    					{ desc: 'Total amount of health restored increased to <em>40%</em> of maximum health.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 15,
    		sig_item: {
    			name: 'Nature\'s Touch',
    			image: './img/si/nemora.png',
    			desc: 'Normal Attacks heal Nemora\'s weakest ally for <em>60%</em> of her own Attack Rating.',
    			upgrades: [
    				{ desc: 'Healing effect is raised by <em>75%</em> if a critical strike occurs when using a Normal Attack.',
    					unlock: 10,
    				},
    				{ desc: 'Health recovery increased by up to <em>90%</em> of Attack Rating.',
    					unlock: 20,
    				},
    				{ desc: 'Health recovery increased by up to <em>120%</em> of Attack Rating.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 9,
    		furniture: {
    			name: 'Winds of Harmony',
    			image: './img/furniture/nemora.png',
    			upgrades: [
    				{ desc: 'When Nemora\'s health falls below <em>60%</em> for the first time, she will use her "Life Force" ability on herself.',
    					unlock: 3,
    				},
    				{ desc: 'The first time an enemy gets close to Nemora, she activates the effects of her "Beguile" ability against all nearby enemies.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'kaz',
    		name: 'Kaz',
    		portrait: './img/portraits/kaz.jpg',
    		class: 'Ranger',
    		faction: 'Wilder',
    		type: 'Agility',
    		skills: [
    			{
    				name: 'Assassinate',
    				image: './img/skills/kaz1.png',
    				desc: 'Kaz swiftly leaps behind an enemy\'s back slashing them, dealing <em>250%</em> damage to them. Kaz cannot be attacked while performing this ability and returns to her original position afterwards.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Targets the enemy with the lowest health.',
    						unlock: 81,
    					},
    					{ desc: 'Attack Rating is permanently increased by <em>20%</em> for the remainder of the battle if this ability kills an enemy target.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Triple Strike',
    				image: './img/skills/kaz2.png',
    				desc: 'Kaz strikes at an enemy in front of her, successively striking them <em>3</em> times for <em>100%</em> damage per hit.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>110%</em>.',
    						unlock: 21,
    					},
    					{ desc: 'Damage is increased by up to <em>120%</em>. Dodge Rating is increased by <em>60</em> points while striking enemy.',
    						unlock: 101,
    					},
    					{ desc: 'Damage is increased to <em>130%</em>.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Evasive Strike',
    				image: './img/skills/kaz3.png',
    				desc: 'Kaz is able to dodge enemy attacks once every <em>10</em> seconds and cannot be targeted while this skill is in effect.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Dodges enemy attacks once every <em>8</em> seconds and throws a dart back at the enemy, causing <em>200%</em> damage to them.',
    						unlock: 121,
    					},
    					{ desc: 'Dart damage deals up to <em>220%</em> damage.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Feline Finesse',
    				image: './img/skills/kaz4.png',
    				desc: 'Kaz\'s natural feline agility allows her to raise her dodge rating by <em>70</em> points.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Recovers <em>25</em> Energy points for every successful dodge.',
    						unlock: 141,
    					},
    					{ desc: 'Dodge rating is increased by <em>100</em> points.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 30,
    		sig_item: {
    			name: 'Elude',
    			image: './img/si/kaz.png',
    			desc: 'At the beginning of the battle Kaz raises her Dodge by <em>100</em> points and Crit Rating by <em>40</em> points. The increased attributes will gradually decrease over <em>20</em> seconds until they return to normal.',
    			upgrades: [
    				{ desc: 'Increased attributes will decrease over <em>40</em> seconds until returning to normal.',
    					unlock: 10,
    				},
    				{ desc: 'Kaz\'s chance to dodge magic attacks are increased by <em>1%</em> for every <em>16</em> Dodge points that she gains. Chance to dodge magic attacks can be raised up to a maximum of <em>25%</em>.',
    					unlock: 20,
    				},
    				{ desc: 'Kaz\'s chance to dodge magic attacks are increased by <em>1%</em> for every <em>14</em> Dodge points that she gains. Chance to dodge magic attacks can be raised up to a maximum of <em>50%</em>.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 9,
    		furniture: {
    			name: 'Poison\'s Kiss',
    			image: './img/furniture/kaz.png',
    			upgrades: [
    				{ desc: 'Enemies that are dealt damage are poisoned. Poisoned enemies have their Accuracy reduced by <em>60</em> points and also lose <em>70%</em> worth of Kaz\'s Attack Rating value as health every second over a duration of <em>4</em> seconds. This ability cannot be stacked.',
    					unlock: 3,
    				},
    				{ desc: 'Enemies have their Energy Recovery rates reduced by <em>50%</em> while poisoned. (Also affects abilities that modify Energy Recovery rates).',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'lyca',
    		name: 'Lyca',
    		portrait: './img/portraits/lyca.jpg',
    		class: 'Ranger',
    		faction: 'Wilder',
    		type: 'Agility',
    		skills: [
    			{
    				name: 'Star Shot',
    				image: './img/skills/lyca1.png',
    				desc: 'Lyca shoots an arrow that deals <em>220%</em> damage to all enemy targets which it passes through, knocking them backwards in the process.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>240%</em>.',
    						unlock: 81,
    					},
    					{ desc: 'Damage is increased to <em>260%</em>.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Rapid Arrows',
    				image: './img/skills/lyca2.png',
    				desc: 'Lyca shoots off <em>3</em> arrows in quick succession, with each arrow dealing <em>120%</em> damage to the enemy target.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>130%</em>.',
    						unlock: 21,
    					},
    					{ desc: '<em>35%</em> of damage is converted into health.',
    						unlock: 101,
    					},
    					{ desc: '<em>45%</em> of damage is converted tinto health.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Awe',
    				image: './img/skills/lyca3.png',
    				desc: 'Lyca bounds onto the battlefield at the beginning of battles and inspires her allies, increasing their Haste by <em>35</em> points for <em>8</em> seconds.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Regenerates <em>70</em> Energy points for Lyca and her allies.',
    						unlock: 121,
    					},
    					{ desc: 'Energy restored increased by up to <em>100</em> points.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Foe\'s Fragility',
    				image: './img/skills/lyca4.png',
    				desc: 'When an enemy receives damage from any of Lyca\'s attacks or abilities, for the following <em>5</em> seconds, their Defense Rating will be decreased by <em>15%</em> and the chances of them being dealt a Critical Strike is increased by <em>12%</em>. This ability cannot be stacked.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Defense Rating is decreased by <em>20%</em>.',
    						unlock: 141,
    					},
    					{ desc: 'Defense Rating is decreased by <em>25%</em>.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 20,
    		sig_item: {
    			name: 'Vision of the Stars',
    			image: './img/si/lyca.png',
    			desc: 'Increases all allies\' accuracy by <em>40</em> while Lyca is alive.',
    			upgrades: [
    				{ desc: 'Increases all allies\' accuracy by <em>70</em> while Lyca is alive.',
    					unlock: 10,
    				},
    				{ desc: 'Raises the damage dealt to the enemy target by <em>0.2%</em> for every point of Accuracy an ally has which exceeds the Dodge Rating of their target. Damage can be increased to a maximum of <em>20%</em>. The effects of this ability exclude Intelligence based allies.',
    					unlock: 20,
    				},
    				{ desc: 'Increases all allies\' accuracy by <em>100</em> while Lyca is alive.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 9,
    		furniture: {
    			name: 'Multi Shot',
    			image: './img/furniture/lyca.png',
    			upgrades: [
    				{ desc: 'Targets the nearest <em>2</em> enemies with "Rapid Arrows" the first time the ability is used.',
    					unlock: 3,
    				},
    				{ desc: 'Every Normal Attack targets the nearest <em>2</em> enemies simultaneously.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'ulmus',
    		name: 'Ulmus',
    		portrait: './img/portraits/ulmus.jpg',
    		class: 'Tank',
    		faction: 'Wilder',
    		type: 'Strength',
    		skills: [
    			{
    				name: 'Deep Roots',
    				image: './img/skills/ulmus1.png',
    				desc: 'Ulmus immediately recovers <em>40%</em> of his max HP and roots himself to the ground until the end of the battle. While rooted to the groun, Ulmus is immune to all control abilities and his Normal Attack turns into a ranged attack that raises his Attack Rating by <em>40%</em>. If Ulmus possesses enough Energy while he is rooted, he will use <em>35%</em> of his maximum Energy to strengthen his Normal Attack damage and stun effect.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Energy required to strengthen Normal Attack is reduced to <em>30%</em> of max Energy.',
    						unlock: 81,
    					},
    					{ desc: 'Attack Rating is raised by <em>50%</em>.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Writhing Roots',
    				image: './img/skills/ulmus2.png',
    				desc: 'Ulmus uses his roots to entangle nearby enemies, causing <em>120%</em> damage to them. Enemies that are entangled cannot use any attacks.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>125%</em>.',
    						unlock: 21,
    					},
    					{ desc: 'Damage is increased to <em>130%</em>.',
    						unlock: 101,
    					},
    					{ desc: 'Damage is increased to <em>135%</em>.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Forest\'s Oath',
    				image: './img/skills/ulmus3.png',
    				desc: 'Ulmus casts a shield around his weakest teammate, mitigating up to <em>200%</em> of the damage they receive.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Shield restores <em>4%</em> of lost HP per second while active.',
    						unlock: 121,
    					},
    					{ desc: 'Value of shield is increased to <em>220%</em> of Attack Rating value.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Life Torrent',
    				image: './img/skills/ulmus4.png',
    				desc: 'A passive ability that restores <em>4%</em> of lost HP per second.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Weakest ally also receives this ability\'s effects.',
    						unlock: 141,
    					},
    					{ desc: 'Restores <em>5%</em> of lost HP per second.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 0,
    		sig_item: {
    			name: 'Healing Roots',
    			image: './img/si/ulmus.png',
    			desc: 'Ulmus\' own health recovery effects are increased by <em>10%</em>.',
    			upgrades: [
    				{ desc: 'Ulmus\' own health recovery effects are increased by <em>20%</em>.',
    					unlock: 10,
    				},
    				{ desc: 'After using the ability "Deep Roots" Ulmus\' health recovery effect is increased by an additional <em>20%</em>.',
    					unlock: 20,
    				},
    				{ desc: 'After using the ability "Deep Roots", the effects of the ability "Forest\'s Oath" will be received by <em>3</em> allies.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 0,
    		furniture: {
    			name: 'Protection of Nature',
    			image: './img/furniture/ulmus.png',
    			upgrades: [
    				{ desc: 'Allies close to enemies that are afflicted by Ulmus\' "Writhing Roots" ability are granted the positive effects of his "Forest\'s Oath" ability.',
    					unlock: 3,
    				},
    				{ desc: 'The value of the shield granted by "Forest\'s Oath" is increased by <em>100%</em>.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'gorvo',
    		name: 'Gorvo',
    		portrait: './img/portraits/gorvo.jpg',
    		class: 'Tank',
    		faction: 'Wilder',
    		type: 'Strength',
    		skills: [
    			{
    				name: 'Battle Cry',
    				image: './img/skills/gorvo1.png',
    				desc: 'Gorvo roars angrily, dealing <em>130%</em> to all enemies. Gorvo\'s roar is able to taunt enemies within a certain radius into targeting him with Normal Attacks for <em>5</em> seconds. Gorvo is also able to deflect <em>60%</em> of the damage he receives back at his enemies while this ability is active.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Taunt duration is increased to <em>6</em> seconds.',
    						unlock: 81,
    					},
    					{ desc: 'Proportion of damage deflected is increased to <em>90%</em>.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Dive Bomb',
    				image: './img/skills/gorvo2.png',
    				desc: 'Gorvo assails his enemies by leaping into the air and dive bombing into their midst, inflicting <em>160%</em> AoE damage on any enemies close enough to him, the ability also leaves enemies stunned for <em>2</em> seconds. Gorvo cannot be targeted while using this ability.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Stun duration increased is to <em>2.5</em> seconds.',
    						unlock: 21,
    					},
    					{ desc: 'Damage increased by up to <em>190%</em>.',
    						unlock: 101,
    					},
    					{ desc: 'Damage increased by up to <em>210%</em>.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Shell Shock',
    				image: './img/skills/gorvo3.png',
    				desc: 'Gorvo charges his war hammer up every <em>8</em> seconds, causing the following attack to become a critical strike that deals AoE damage to nearby enemies, leaving them stunned for <em>2</em> seconds.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Hammer is charged up every <em>6</em> seconds.',
    						unlock: 121,
    					},
    					{ desc: 'Stun duration increased is to <em>3</em> seconds.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Shell Shield',
    				image: './img/skills/gorvo4.png',
    				desc: 'After entering the battlefield Gorvo casts a shield around himself that is equal to <em>40%</em> of his maximum health which lasts for <em>6</em> seconds. The shield is also activated every time Gorvo uses his ultimate ability.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Shield duration increased to <em>8</em> seconds.',
    						unlock: 141,
    					},
    					{ desc: 'Shield equals <em>50%</em> of Gorvo\'s max health.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 20,
    		sig_item: {
    			name: 'Nature\'s Shield',
    			image: './img/si/gorvo.png',
    			desc: 'Increases the efficacy of all shields by <em>25%</em>.',
    			upgrades: [
    				{ desc: 'Increases the efficacy of all shields by <em>50%</em>.',
    					unlock: 10,
    				},
    				{ desc: 'If the shield created by the ability "Shell Shield" is not broken within a certain period of time, the remaining shield value will be converted into Energy. Ability restores up to <em>250</em> Energy points.',
    					unlock: 20,
    				},
    				{ desc: 'When in a shielded state, Gorvo will recover <em>5%</em> of his max health every second.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 3,
    		furniture: {
    			name: 'Defensive Measures',
    			image: './img/furniture/gorvo.png',
    			upgrades: [
    				{ desc: 'Using the ability "Shell Shock" grants Gorvo a shield that is able to mitigate damage equal to <em>24%</em> of his max health for <em>3.5</em> seconds.',
    					unlock: 3,
    				},
    				{ desc: 'Shield duration increased to <em>8</em> seconds.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'eironn',
    		name: 'Eironn',
    		portrait: './img/portraits/eironn.jpg',
    		class: 'Ranger',
    		faction: 'Wilder',
    		type: 'Agility',
    		skills: [
    			{
    				name: 'Elemental Surge',
    				image: './img/skills/eironn1.png',
    				desc: 'Eironn combines both of his blades to form one powerful blade and proceeds to hack at his enemies, dealing <em>270%</em> damage to them. Eironn then summons an ice tornado which deals AoE damage to enemies and remains on the battlefield for <em>5</em> seconds, engulfing multiple enemies, knocking them backwards and slowing their movement speed.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Ice tornado lasts for <em>7</em> seconds.',
    						unlock: 81,
    					},
    					{ desc: 'Damage is increased to <em>300%</em>.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Twin Force',
    				image: './img/skills/eironn2.png',
    				desc: 'When attacking with his ice blade, Eironn deals <em>150%</em> damage to all enemies standing in front of him and also freezes them, causing their movement and attack speeds to be slowed for <em>4</em> seconds. When attacking with his wind blade, Eironn attacks a single enemy target, knocking them backwards, inflicting <em>180%</em> damage upon them. The wind blade also inflicts additional damage equal to <em>15%</em> of the enemy target\'s current health.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Ice blade damage increased to <em>160%</em>.',
    						unlock: 21,
    					},
    					{ desc: 'Wind blade damage is increased to <em>220%</em>.',
    						unlock: 101,
    					},
    					{ desc: 'Ice blade damage increased to <em>170%</em>.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Vortex',
    				image: './img/skills/eironn3.png',
    				desc: 'Eironn uses his elemental powers to generate a powerful gust of wind that draws in all enemies standing within a certain range of himself which deals <em>140%</em> damage to them.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>150%</em>.',
    						unlock: 121,
    					},
    					{ desc: 'Damage is inceased to <em>160%</em>.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Sylvan Oath',
    				image: './img/skills/eironn4.png',
    				desc: 'Sylvan Oath is a passive ability that increases Eironn\'s Attack Rating by <em>15%</em> and gives his attacks a <em>30%</em> chance to ignore his enemies\' Defense Ratings. Any damage dealt to enemies that are using shield abilities is multiplied by <em>150%</em> times.',
    				unlock: 61,
    				upgrades: [
    					{ desc: '<em>50%</em> chance to ignore enemy Defense Ratings.',
    						unlock: 141,
    					},
    					{ desc: 'Increases Attack Rating by <em>20%</em>.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 30,
    		sig_item: {
    			name: 'Chill',
    			image: './img/si/eironn.png',
    			desc: 'The ability "Elemental Surge" has a chance to cause enemies to become frozen for <em>2</em> seconds. The chances of an enemy being frozen are raised if the enemy is already suffering from attack speed reductions, and enemies which are already frozen will no longer be knocked back by the ability.',
    			upgrades: [
    				{ desc: 'Damage for the ability "Elemental Surge" is increased against frozen enemies by <em>30%</em>.',
    					unlock: 10,
    				},
    				{ desc: 'Damage for the ability "Elemental Surge" is increased against frozen enemies by <em>50%</em>.',
    					unlock: 20,
    				},
    				{ desc: 'Time enemies are frozen is increased to <em>4</em> seconds.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 9,
    		furniture: {
    			name: 'Oathkeeper',
    			image: './img/furniture/eironn.png',
    			upgrades: [
    				{ desc: 'The ability "Sylvan Oath" has a <em>100%</em> chance to be triggered when Eironn\'s health is above <em>60%</em>.',
    					unlock: 3,
    				},
    				{ desc: 'Damage dealt by "Sylvan Oath" when triggered is increased by <em>15%</em>.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'tasi',
    		name: 'Tasi',
    		portrait: './img/portraits/tasi.jpg',
    		class: 'Support',
    		faction: 'Wilder',
    		type: 'Intelligence',
    		skills: [
    			{
    				name: 'Slumber',
    				image: './img/skills/tasi1.png',
    				desc: 'Tasi puts all enemy targets to sleep for <em>4</em> seconds. Once the enemies awaken, they will be dealt <em>25%</em> of the damage received while they were asleep.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Duration is extended up to <em>5</em> seconds.',
    						unlock: 81,
    					},
    					{ desc: 'Damage dealt after waking is increased to <em>30%</em>.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Dream Spirit',
    				image: './img/skills/tasi2.png',
    				desc: 'Tasi summons a magical fairy which lasts for <em>10</em> seconds and periodically attacks enemies or heals teammates. The fairy deals <em>55%</em> damage to enemies and heals teammates for <em>55%</em>.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Damage and healing values are raised by up to <em>60%</em>.',
    						unlock: 21,
    					},
    					{ desc: 'Effects are increased to <em>13</em> seconds.',
    						unlock: 101,
    					},
    					{ desc: 'Damage and healing values are raised by up to <em>65%</em>.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Banishment',
    				image: './img/skills/tasi3.png',
    				desc: 'Tasi banishes the most powerful enemy target for <em>4</em> seconds. While in a banished state the enemy cannot attack or be attacked.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Steals <em>40%</em> of the target\'s Attack Rating while they are banished.',
    						unlock: 121,
    					},
    					{ desc: 'Duration is extended up to <em>6</em> seconds.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Teleportation',
    				image: './img/skills/tasi4.png',
    				desc: 'Tasi is able to teleport behind an ally or enemy\'s back if she is struck. If Tasi teleports next to an ally, the ally\'s Haste will be increased, if Tasi teleports behind an enemy, they will be dealt <em>140%</em> damage. The ability has a cooldown period of <em>6</em> seconds.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Cooldown time is reduced each time Tasi is struck.',
    						unlock: 141,
    					},
    					{ desc: 'Damage is increased to <em>170%</em>.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 15,
    		sig_item: {
    			name: 'Diminish',
    			image: './img/si/tasi.png',
    			desc: 'Reduces the Attack Rating of nearby enemies by <em>10%</em> after Tasi uses her "Teleportation" ability.',
    			upgrades: [
    				{ desc: 'The scope of the reduced Attack Rating effect is increased up to <em>15%</em>.',
    					unlock: 10,
    				},
    				{ desc: 'The scope of the reduced Attack Rating effect is increased up to <em>20%</em>.',
    					unlock: 20,
    				},
    				{ desc: 'The scope of the reduced Attack Rating effect is increased up to <em>30%</em>.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 9,
    		furniture: {
    			name: 'Double Teleportation',
    			image: './img/furniture/tasi.png',
    			upgrades: [
    				{ desc: 'If Tasi is attacked within <em>1.5</em> seconds of using her ability "Teleportation", the ability will be instantly triggered again.',
    					unlock: 3,
    				},
    				{ desc: 'Cooldown for the ability "Teleportation" is reduced by <em>1</em> seconds.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'seirus',
    		name: 'Seirus',
    		portrait: './img/portraits/seirus.jpg',
    		class: 'Warrior',
    		faction: 'Wilder',
    		type: 'Strength',
    		skills: [
    			{
    				name: 'Abhorrent Torrent',
    				image: './img/skills/seirus1.png',
    				desc: 'Seirus sends several large waves surging towards his enemies, dealing <em>70%</em> damage per wave. Each wave knocks the enemies backwards and stuns them.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>75%</em>.',
    						unlock: 81,
    					},
    					{ desc: 'Damage is increased to <em>80%</em>.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Deluge',
    				image: './img/skills/seirus2.png',
    				desc: 'Seirus calls up on the ocean\'s power by summoning large columns of water that erupt at the nearest <em>2</em> enemies\' feet. The columns of water cause <em>120%</em> AoE damage to nearby enemies and become larger and more powerful, the closer they are standing to Seirus.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>130%</em>.',
    						unlock: 21,
    					},
    					{ desc: 'Targets <em>3</em> nearest enemies.',
    						unlock: 101,
    					},
    					{ desc: 'Damage is increased to <em>140%</em>.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Ocean\'s Blessing',
    				image: './img/skills/seirus3.png',
    				desc: 'Seirus uses the ocean\'s blessing to strengthen his weapon. After strengthening his weapon, the following <em>3</em> Normal Attacks will have a greater Area of Effect range and increased damage, allowing Seirus to deal <em>180%</em> damage per Normal Attack.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Damage of Normal Attacks raised up to <em>200%</em>.',
    						unlock: 121,
    					},
    					{ desc: 'Damage of Normal Attack raised up to <em>220%</em>.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Free Flow',
    				image: './img/skills/seirus4.png',
    				desc: 'Damage that is less than <em>7%</em> of Seirus\' maximum health is reduced by <em>50%</em>.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Damage less than <em>9%</em> of Seirus\' maximum health is reduced.',
    						unlock: 141,
    					},
    					{ desc: 'Damage less than <em>10%</em> of Seirus\' maximum health is reduced.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 10,
    		sig_item: {
    			name: 'Sea Lord',
    			image: './img/si/seirus.png',
    			desc: 'At the beginning of battles Seirus will cause his own max health to increase by <em>40%</em>, however his current health after the increase will not be at maximum unless restored.',
    			upgrades: [
    				{ desc: 'At the beginning of battles Seirus will recover <em>2%</em> of his max health per second over <em>40</em> seconds.',
    					unlock: 10,
    				},
    				{ desc: 'The value of Seirus\' max health increase is raised to <em>70%</em>.',
    					unlock: 20,
    				},
    				{ desc: 'The value of Seirus\' max health increase is raised to <em>100%</em>.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 9,
    		furniture: {
    			name: 'Submerge',
    			image: './img/furniture/seirus.png',
    			upgrades: [
    				{ desc: 'After an enemy has been knocked to the edge of the battlefield, Seirus uses his "Deluge" ability against them. Ability may only be used against the same enemy once every <em>10</em> seconds.',
    					unlock: 3,
    				},
    				{ desc: 'Ability may be used once every <em>4</em> seconds.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'lorsan',
    		name: 'Lorsan',
    		portrait: './img/portraits/lorsan.jpg',
    		class: 'Mage',
    		faction: 'Wilder',
    		type: 'Intelligence',
    		skills: [
    			{
    				name: 'Tempest',
    				image: './img/skills/lorsan1.png',
    				desc: 'Lorsan summons a tempest amongst a concentrated area of enemies that continuously grows larger over time, dealing AoE damage multiple times to its surrounding enemies. Once reaching its maximum size, the tempest will explode, dealing <em>200%</em> damage to nearby enemies.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Final explosion causes nearby enemies to lose <em>50%</em> of their Energy.',
    						unlock: 81,
    					},
    					{ desc: 'Final explosion damage is increased up to <em>250%</em>.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Inner Sight',
    				image: './img/skills/lorsan2.png',
    				desc: 'Lorsan attacks an enemy for <em>170%</em> damage and marks them with his inner sight symbol, which persists until the end of the battle. The symbol allows for the ultimate ability damage of all allied heroes to be raised by <em>250%</em> against marked enemies for <em>4</em> seconds when an ultimate ability is used. This ability prioritizes unmarked heroes first.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>220%</em>.',
    						unlock: 21,
    					},
    					{ desc: 'Stuns a marked enemy for <em>1.5</em> seconds within <em>4</em> seconds of an allied hero using their ultimate ability against the marked enemy.',
    						unlock: 101,
    					},
    					{ desc: 'Damage increased by up to <em>270%</em>.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Gale Force',
    				image: './img/skills/lorsan3.png',
    				desc: 'Lorsan links the farthest and closest enemies together. When one of the two enemies receives any damage, the other will receive <em>80%</em> of the damage received.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'If a linked enemy dies, the other surviving linked enemy will be stunned for <em>5</em> seconds.',
    						unlock: 121,
    					},
    					{ desc: 'Transferred damage received by linked enemies is increased up to <em>120%</em>.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Wind Ward',
    				image: './img/skills/lorsan4.png',
    				desc: 'Casts a shield upon <em>2</em> random allies which lasts for <em>7</em> seconds and is able to reduce damage equal to <em>250%</em> of Lorsan\'s own Attack Rating.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Allies currently protected by the shield will have their dodge increased by <em>90</em> points. If the ally being protected is a Wilder hero, the shield\'s value will be increased a further <em>20%</em>.',
    						unlock: 141,
    					},
    					{ desc: 'Value of shield is increased to <em>300%</em> of Attack Rating value.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 20,
    		sig_item: {
    			name: 'Fate',
    			image: './img/si/lorsan.png',
    			desc: 'When an enemy linked by the "Gale Force" ability dies, Lorsan will receive a permanent <em>20</em> Haste increase until the end of the battle.',
    			upgrades: [
    				{ desc: 'When an enemy linked by the "Gale Force" ability dies, Lorsan will receive a permanent <em>40</em> Haste increase until the end of the battle.',
    					unlock: 10,
    				},
    				{ desc: 'When an enemy linked by the "Gale Force" ability dies, Lorsan will be immune to all damage for <em>5</em> seconds.',
    					unlock: 20,
    				},
    				{ desc: 'When an enemy linked by the "Gale Force" ability dies, Lorsan will receive a permanent <em>60</em> Haste increase until the end of the battle.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 0,
    		furniture: {
    			name: 'Wind Dance',
    			image: './img/furniture/lorsan.png',
    			upgrades: [
    				{ desc: 'When the shield generated by the ability "Wind Ward" is broken, the affected ally shall continue to enjoy the increased Dodge effects that are awarded when the shield exists, up until the ability\'s original time duration has ended.',
    					unlock: 3,
    				},
    				{ desc: 'The effects of the ability "Wind Ward" are applied to all allied heroes the first <em>2</em> times that it is used.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'solise',
    		name: 'Solise',
    		portrait: './img/portraits/solise.jpg',
    		class: 'Mage',
    		faction: 'Wilder',
    		type: 'Intelligence',
    		skills: [
    			{
    				name: 'Blossom Fall',
    				image: './img/skills/solise1.png',
    				desc: 'Solise deals <em>280%</em> damage to all enemies on the battlefield, leaving them temporarily stunned. Using this ability causes cherry blossom leaves to fall upon the battlefield for <em>20</em> seconds. While cherry blossom leaves are falling, all of Solise\'s other abilities will gain a power increase.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>330%</em>.',
    						unlock: 81,
    					},
    					{ desc: 'Damage is increased to <em>380%</em>.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Floral Disruption',
    				image: './img/skills/solise2.png',
    				desc: 'Solise throws a vial at a single enemy target, dealing <em>200%</em> damage to them, causing them to become temporarily stunned. When "Blossom Fall" is occurring, enemies in close proximity to the original target will also from suffer this ability\'s effects.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>215%</em>.',
    						unlock: 21,
    					},
    					{ desc: 'Stun effect lasts for up to <em>3</em> seconds.',
    						unlock: 101,
    					},
    					{ desc: 'Damage is increased to <em>230%</em>.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Floral Specter',
    				image: './img/skills/solise3.png',
    				desc: 'Solise summons a Floral Specter that possesses <em>50%</em> of Solise\'s health which remains on the battlefield for <em>15</em> seconds. When "Blossom Fall" is occurring, the Floral Specter will deal <em>90%</em> worth of Solise\'s Attack Rating as damage to nearby enemies.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'When an enemy attacks the Floral Specter, it will deflect <em>50%</em> of the damage it receives back onto the enemy.',
    						unlock: 121,
    					},
    					{ desc: 'When an enemy attacks the Floral Specter, it will deflect <em>80%</em> of the damage it receives back onto the enemy.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Forest\'s Blessing',
    				image: './img/skills/solise4.png',
    				desc: 'Solise blesses an allied hero for <em>8</em> seconds. While the blessing is active, the amount of damage dealt to the ally is reduced by <em>20%</em> and the ally recovers <em>70%</em> worth of Solise\'s Attack Rating as health per second.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Blessing effects persist while "Blossom Fall" is occurring on the battlefield.',
    						unlock: 141,
    					},
    					{ desc: 'Allies using this blessing will receive <em>25%</em> less damage.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 30,
    		sig_item: {
    			name: 'Flower Power',
    			image: './img/si/solise.png',
    			desc: 'The Floral Specter will attack <em>2</em> enemies simultaneously.',
    			upgrades: [
    				{ desc: 'The Floral Specter gains an additional <em>20%</em> health.',
    					unlock: 10,
    				},
    				{ desc: 'The Floral Specter gains an additional <em>50%</em> health.',
    					unlock: 20,
    				},
    				{ desc: 'The Floral Specter will attack <em>3</em> enemies simultaneously.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 3,
    		furniture: {
    			name: 'Floral Rejuvenation',
    			image: './img/furniture/solise.png',
    			upgrades: [
    				{ desc: 'When the Floral Specter is defeated or its duration on the battlefield expires, it transforms itself into a spirit form that becomes impervious to all attacks for <em>8</em> seconds. When "Blossom Fall" is occurring, the spirit is able to attack enemies, however, its damage output is decreased by <em>15%</em>.',
    					unlock: 3,
    				},
    				{ desc: 'While Solise is alive, if an allied hero that is positioned on the frontline is defeated, a Floral Specter will appear at that allied hero\'s position.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'saurus',
    		name: 'Saurus',
    		portrait: './img/portraits/saurus.jpg',
    		class: 'Warrior',
    		faction: 'Wilder',
    		type: 'Strength',
    		skills: [
    			{
    				name: 'Phase Form',
    				image: './img/skills/saurus1.png',
    				desc: 'Enabling phase form creates a phased, ephemeral version of Saurus that copies several of Saurus\' abilities for <em>9</em> seconds, which deals <em>85%</em> of the original Saurus\' damage value.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Enabling phase form creates a shield around Saurus that is able to mitigate <em>500%</em> of the damage he receives, which persists until the phased version of Saurus disappears.',
    						unlock: 81,
    					},
    					{ desc: 'Enabling phase form creates a shield around Saurus that is able to mitigate <em>700%</em> of the damage he receives, which persists until the phased version of Saurus disappears.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'War Strike',
    				image: './img/skills/saurus2.png',
    				desc: 'Saurus uses his spear to attack all nearby enemy targets for <em>170%</em> AoE damage, after which he proceeds to attack the nearest enemy target, dealing a further <em>280%</em> damage to them, also causing them to become stunned for <em>2</em> seconds. Successfully using this ability without any interruptions resets the cooldown timer of Saurus\' "Burst Strikes" ability.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'AoE damage is raised to <em>180%</em>.',
    						unlock: 21,
    					},
    					{ desc: 'Stun effect lasts for up to <em>3</em> seconds.',
    						unlock: 101,
    					},
    					{ desc: 'AoE damage is raised to <em>200%</em>.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Burst Strikes',
    				image: './img/skills/saurus3.png',
    				desc: 'Saurus deals <em>100%</em> AoE damage <em>4</em> times to all enemies within his attack range. Successfully using this ability without any interruptions resets the cooldown timer of Saurus\' "War Strike" ability.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Each attack deals additional damage that is equal to <em>6%</em> of the target\'s current health.',
    						unlock: 121,
    					},
    					{ desc: 'Damage is increased to <em>110%</em>.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Tenacity',
    				image: './img/skills/saurus4.png',
    				desc: 'When Saurus or his phase form use either of their "War Strike" or "Burst Strikes" abilities without any interruptions, Saurus\' Attack Rating will be increased by <em>10%</em> and his Defense Rating will be increased by <em>25%</em>. This ability can be stacked <em>5</em> times. If any of Saurus\' abilities are interrupted, this effect will end.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'All of Saurus\' allies receive a Defense and Attack Rating increase that is worth <em>80%</em> of Saurus\' own increased Attack and Defense Ratings.',
    						unlock: 141,
    					},
    					{ desc: 'All of Saurus\' allies receive a Defense and Attack Rating increase that is worth <em>100%</em> of Saurus\' own increased Attack and Defense Ratings.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 30,
    		sig_item: {
    			name: 'Warrior\'s Valor',
    			image: './img/si/saurus.png',
    			desc: 'When the ability "Tenacity" can no longer be stacked any further, Saurus will recover <em>40%</em> worth of his own Attack Rating as health every second.',
    			upgrades: [
    				{ desc: 'When the ability "Tenacity" can no longer be stacked any further, Saurus will recover <em>70%</em> worth of his own Attack Rating as health every second.',
    					unlock: 10,
    				},
    				{ desc: 'When the ability "Tenacity" can no longer be stacked any further, Saurus will recover <em>100%</em> worth of his own Attack Rating as health every second.',
    					unlock: 20,
    				},
    				{ desc: 'When the ability "Tenacity" can no longer be stacked any further, Saurus\' allies will recover <em>150%</em> worth of his Attack Rating as health every time the abilities "War Strike" or "Burst Strikes" are used without being interrupted.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 9,
    		furniture: {
    			name: 'Impregnable Resistance',
    			image: './img/furniture/saurus.png',
    			upgrades: [
    				{ desc: 'Saurus receives <em>10%</em> less damage from enemies when using his "Burst Strikes" or "War Strike" abilities.',
    					unlock: 3,
    				},
    				{ desc: 'Saurus receives <em>25%</em> less damage from enemies when using his "Burst Strikes" or "War Strike" abilities.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'pippa',
    		name: 'Pippa',
    		portrait: './img/portraits/pippa.jpg',
    		class: 'Mage',
    		faction: 'Wilder',
    		type: 'Intelligence',
    		skills: [
    			{
    				name: 'Pippa\'s Immitation',
    				image: './img/skills/pippa1.png',
    				desc: 'Pippa randomly imitates the base effects of either Nemora\'s, Arden\'s or Tasi\'s Ultimate ability, which will not require continuous casting. If any of the aforementioned heroes are in the same formation as Pippa, she shall prioritize imitating that hero\'s ultimate ability above the others\'.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Imitates level <em>2</em> effects of either Nemora\'s, Arden\'s or Tasi\'s Ultimate ability.',
    						unlock: 81,
    					},
    					{ desc: 'Imitates level <em>3</em> effects of either Nemora\'s, Arden\'s or Tasi\'s Ultimate ability.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Pippa\'s Pandemonium',
    				image: './img/skills/pippa2.png',
    				desc: 'Pippa continuously fires <em>1</em> magic orb every <em>0.15</em> seconds, with each orb dealing <em>90%</em> damage to its target. After firing <em>4</em> magic orbs, every subsequent orb fired increases Pippa\'s chance of spell failure by <em>8%</em>. If Pippa fails to fire an orb, she is temporarily stunned and the ability will cease.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Pippa has a <em>25%</em> chance to fire a yellow magic orb that deals damage and simultaneously reduces its target\'s Energy points by <em>70</em>.',
    						unlock: 21,
    					},
    					{ desc: 'Pippa has a <em>25%</em> chance to fire a blue magic orb that deals damage and simultaneously reduces its target\'s Haste by <em>60</em> points for <em>4</em> seconds.',
    						unlock: 101,
    					},
    					{ desc: 'Pippa has a <em>25%</em> chance to fire a green magic orb that deals damage to its target, of which <em>100%</em> of the damage is converted into Pippa\'s health.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Transmogrification',
    				image: './img/skills/pippa3.png',
    				desc: 'Pippa deals <em>270%</em> damage to the enemy with the highest Attack Rating, simultaneously transforming them into an \'Acorn\' which is incapable of attacking for <em>5</em> seconds. Pippa has a <em>25%</em> chance of failing to correctly cast this spell. If Pippa fails, the spell\'s effects shall be cast upon herself.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Pippa gains <em>100</em> Dodge points while she is in a transformed state.',
    						unlock: 121,
    					},
    					{ desc: 'Pippa gains <em>200</em> Dodge points while she is in a transformed state.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Astral Shift',
    				image: './img/skills/pippa4.png',
    				desc: 'Pippa teleports the closest enemy target onto the head of the next closest enemy, dealing <em>290%</em> AoE damage and causing any enemies within range to become stunned for <em>3</em> seconds. Pippa has a <em>90%</em> chance of cast failure on the first cast. If Pippa fails, her closest frontline ally is teleported on to the top of the farthest enemy target\'s head, but her ally shall not be injured or stunned.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Pippa cannot fail to cast this ability when she is positioned at the center of the backline.',
    						unlock: 141,
    					},
    					{ desc: 'Any enemies within range are stunned for <em>4</em> seconds.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 20,
    		sig_item: {
    			name: 'Pippa Power',
    			image: './img/si/pippa.png',
    			desc: 'Every time Pippa fires a magic orb, she has a <em>40%</em> chance to fire an additional magic orb at a different random enemy target while using the ability "Pippa\'s Pandemonium".',
    			upgrades: [
    				{ desc: 'Every magic orb fired using "Pippa\'s Pandemonium" has a <em>65%</em> chance to produce an additional orb that targets a different random enemy target.',
    					unlock: 10,
    				},
    				{ desc: 'Pippa\'s teleported ally is immune to all damage for <em>5</em> seconds after being teleported by the ability "Astral Shift".',
    					unlock: 20,
    				},
    				{ desc: 'After using the ability "Transmogrification" a total of <em>2</em> times, Pippa will no longer fail to cast this spell, and it will now target the <em>2</em> enemies with the highest Attack Ratings.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 9,
    		furniture: {
    			name: 'Pippa\'s Perfection',
    			image: './img/furniture/pippa.png',
    			upgrades: [
    				{ desc: 'Pippa continues to imitate the Ultimate ability which she imitated for the first time throughout the battle, simultaneously improving its effects. While imitating Nemora\'s Ultimate, Pippa converts the excess portion of its healing effects into a shield, which exists for <em>12</em> seconds. While imitating Arden\'s Ultimate, every lightning bolt cast produces an additional lightning bolt which strikes a nearby enemy, dealing damage to them and stunning them for <em>1.5</em> seconds. While imitating Tasi\'s Ultimate, the enemy loses <em>20</em> Energy points every <em>0.5</em> seconds while they are asleep.',
    					unlock: 3,
    				},
    				{ desc: 'Pippa gains <em>80</em> Energy points every time another hero uses their Ultimate ability, and her Attack Rating is also permanently increased by <em>10%</em> each time. Permanent Attack Rating increase may be stacked up to <em>12</em> times.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'respen',
    		name: 'Respen',
    		portrait: './img/portraits/respen.jpg',
    		class: 'Ranger',
    		faction: 'Wilder',
    		type: 'Agility',
    		skills: [
    			{
    				name: 'Wind Spiral',
    				image: './img/skills/respen1.png',
    				desc: 'Respen manifests a Wind Swallow every <em>3</em> seconds, which encircle himself up until <em>5</em> Swallows exist. Active: Using his Ultimate ability, Respen sends the enemy with the highest Attack Rating hurtling into the air , dealing <em>250%</em> damage to them, also stunning them for <em>3</em> seconds . All Wind Swallows manifested by Respen currently on the battlefield will then respectively deal an additional <em>90%</em> damage to the enemy.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Damage dealt by manifested Wind Swallows is increased to <em>120%</em>.',
    						unlock: 81,
    					},
    					{ desc: 'Damage dealt by manifested Wind Swallows is increased to <em>150%</em>.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Feathered Fury',
    				image: './img/skills/respen2.png',
    				desc: 'Ability is only activated when a Wind Swallow is next to Respen. Respen commands a Wind Swallow to attack the nearest enemy, dealing <em>220%</em> damage to them. If the enemy is not already being encircled by a Swallow, the Swallow will encircle them until the end of the battle. If the enemy is already being encircled by a Swallow, the Swallow\'s attack will stun the enemy for <em>3</em> seconds, and the Swallow will fly towards an enemy which is not being encircled, and encircle them.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>250%</em>.',
    						unlock: 21,
    					},
    					{ desc: 'Enemies that are encircled by a Wind Swallow have their Accuracy reduced by <em>80</em> points and Haste reduced by <em>25</em> points.',
    						unlock: 101,
    					},
    					{ desc: 'Damage is increased to <em>280%</em>.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Winged Attack',
    				image: './img/skills/respen3.png',
    				desc: 'When an enemy is sent flying into the air, Respen manifests an additional Wind Swallow to attack them, dealing <em>240%</em> damage to them. After the attack, the Swallow will return to Respen\'s side. This ability can target the same enemy once every <em>3</em> seconds.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>260%</em>.',
    						unlock: 121,
    					},
    					{ desc: 'Damage is increased to <em>280%</em>.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Winged Protection',
    				image: './img/skills/respen4.png',
    				desc: 'When Respen is suffering the effects of control abilities, he manifests an additional Wind Swallow that encircles himself, creating a shield that exists for <em>6</em> seconds. The shield has a value equal to <em>18%</em> of Respen\'s own max health. This ability can be used once every <em>3</em> seconds.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Shield\'s value is equal to <em>20%</em> of Respen\'s max health.',
    						unlock: 141,
    					},
    					{ desc: 'Shield\'s value is equal to <em>22%</em> of Respen\'s max health.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 30,
    		sig_item: {
    			name: 'Kindred Spirits',
    			image: './img/si/respen.png',
    			desc: 'For every <em>3</em> Wind Swallows Respen has manifested, his Attack Rating is increased by <em>9%</em> and his Crit Amplification is increased by <em>4</em> points until the end of battle. Ability can be stacked <em>4</em> times.',
    			upgrades: [
    				{ desc: 'Each time Respen\'s attributes are increased, his Attack Rating is increased by <em>12%</em> and his Crit Amplification is increased by <em>6</em> points.',
    					unlock: 10,
    				},
    				{ desc: 'Each time Respen\'s attributes are increased, his Attack Rating is increased by <em>15%</em> and his Crit Amplification is increased by <em>8</em> points.',
    					unlock: 20,
    				},
    				{ desc: 'After manifesting a total of <em>6</em> Wind Swallows, all of allies will have their Haste increased by <em>25</em> points.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 9,
    		furniture: {
    			name: 'Wishful Winds',
    			image: './img/furniture/respen.png',
    			upgrades: [
    				{ desc: '<em>2</em> Wind Swallows are already encircling Respen when he enters battle.',
    					unlock: 3,
    				},
    				{ desc: 'Respen commands <em>2</em> Wind Swallows to attack enemies when using his ability "Feathered Fury", if there are no less than <em>3</em> Wind Swallows encircling him.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'raku',
    		name: 'Raku',
    		portrait: './img/portraits/raku.jpg',
    		class: 'Ranger',
    		faction: 'Wilder',
    		type: 'Agility',
    		skills: [
    			{
    				name: 'Acorn Cannon',
    				image: './img/skills/raku1.png',
    				desc: 'Raku shoots at the most injured enemy target, dealing <em>330%</em> damage to them. The attack also deals additional damage worth <em>55%</em> of the health which the target has already lost, and stuns them for <em>4</em> seconds. Value of the additional damage cannot exceed <em>900%</em> of Raku\'s Attack Rating. If this ability successfully kills the target, it will be cast again. Raku is immune to control effects while using this ability.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Additional damage dealt is equal to <em>60%</em> of the health already lost by the enemy target.',
    						unlock: 81,
    					},
    					{ desc: 'Additional damage dealt is equal to <em>65%</em> of the health already lost by the enemy target.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Entangling Shot',
    				image: './img/skills/raku2.png',
    				desc: 'Raku deals <em>220%</em> damage to the enemy target with the highest Attack Rating, also imprisoning them for <em>4</em> seconds.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>240%</em>.',
    						unlock: 21,
    					},
    					{ desc: 'Damage is increased to <em>260%</em>.',
    						unlock: 101,
    					},
    					{ desc: 'Damage is increased to <em>280%</em>.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Peckish',
    				image: './img/skills/raku3.png',
    				desc: 'Raku eats a snack that makes him immune to control abilities and raises his Attack Rating by <em>30%</em>, and Haste by <em>30</em> points for <em>8</em> seconds.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Raku\'s Attack Rating is raised by <em>40%</em> and Haste is raised by <em>40</em> points while the ability is active.',
    						unlock: 121,
    					},
    					{ desc: 'Raku\'s Attack Rating is raised by <em>50%</em> and Haste is raised by <em>50</em> points while the ability is active.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Raku\'s Mark',
    				image: './img/skills/raku4.png',
    				desc: 'Whenever an enemy target is under the effects of a control ability, Raku will additionally target them with his Normal Attack over the next <em>4</em> seconds. Passive: Damage dealt to any enemies under the effects of a control ability is increased by <em>35%</em>.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Damage dealt to any enemies under the effects of a control ability is increased by <em>40%</em>.',
    						unlock: 141,
    					},
    					{ desc: 'Damage dealt to any enemies under the effects of a control ability is increased by <em>45%</em>.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 30,
    		sig_item: {
    			name: 'Troublemaker',
    			image: './img/si/raku.png',
    			desc: 'Normal Attacks that inflict damage reduce enemies\' Haste by <em>15</em> points for <em>6</em> seconds. This ability can be stacked <em>3</em> times, with each successful attack resetting the cooldown timer.',
    			upgrades: [
    				{ desc: 'Normal Attacks that inflict damage reduce enemies\' Haste by <em>20</em> points for <em>6</em> seconds. This ability can be stacked <em>3</em> times, with each successful attack resetting the cooldown timer.',
    					unlock: 10,
    				},
    				{ desc: 'Normal Attacks that inflict damage reduce enemies\' Haste by <em>25</em> points for <em>6</em> seconds. This ability can be stacked <em>3</em> times, with each successful attack resetting the cooldown timer.',
    					unlock: 20,
    				},
    				{ desc: 'Normal Attacks deal additional damage equal to <em>15%</em> of the target\'s current health, but cannot exceed <em>650%</em> of Raku\'s Attack Rating.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 9,
    		furniture: {
    			name: 'Earnest Lad',
    			image: './img/furniture/raku.png',
    			upgrades: [
    				{ desc: 'Normal Attacks which strike enemies that are under control effects reduce the cooldown time of "Peckish" by <em>1</em> seconds.',
    					unlock: 3,
    				},
    				{ desc: 'Raku is able to use his Ultimate ability an additional time if the initial Ultimate did not successfully kill the enemy. This effect can only be used once each time Raku\'s Ultimate ability is used.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'grezhul',
    		name: 'Grezhul',
    		portrait: './img/portraits/grezhul.jpg',
    		class: 'Tank',
    		faction: 'Graveborn',
    		type: 'Strength',
    		skills: [
    			{
    				name: 'Reanimate',
    				image: './img/skills/grezhul1.png',
    				desc: 'Grezhul raises a gravestone behind his enemies causing <em>130%</em> damage to multiple targets within a certain radius of the gravestone. Grezhul then raises an undead skeletal warrior that attacks an enemy. The undead skeletal warrior\'s level is equal to Grezhul\'s current level and gradually loses health over time.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Damage is increased up to <em>140%</em>. Skeletal warrior can now use its own special abilities.',
    						unlock: 81,
    					},
    					{ desc: 'Damage is increased by up to <em>150%</em>. Summons <em>2</em> Skeletal warriors.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Demonic Assault',
    				image: './img/skills/grezhul2.png',
    				desc: 'Grezhul attacks an enemy in front of himself <em>3</em> times, for <em>80%</em> damage per time, also stealing some of their power. Stealing the enemy\'s power causes their damage output to fall by <em>50%</em>, and the damage they receive to increase by <em>25%</em>. The effects of this ability shall persist until the enemy dies, Grezhul dies, or until it is used on a different enemy target.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>90%</em>.',
    						unlock: 21,
    					},
    					{ desc: 'While stealing the enemy\'s power, Grezhul\'s Attack Rating is increased by a value equal to <em>75%</em> of the enemy\'s Attack Rating. While calculating the value of the Attack Rating increase, its value will change in real-time according to the enemy\'s Attack Rating value, and any Attack Rating debuffs that the enemy suffers will be temporarily ignored.',
    						unlock: 101,
    					},
    					{ desc: 'Damage is increased to <em>100%</em>.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Shadow Shield',
    				image: './img/skills/grezhul3.png',
    				desc: 'Grezhul forms a shield around a friendly target, mitigating up to <em>150%</em> damage for a period of time. If the shield is broken it will cause <em>120%</em> damage to nearby enemy targets.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Shield\'s armor increased by up to <em>200%</em> and damage is increased by up to <em>150%</em>. Reduces enemies\' Energy by <em>100</em> Energy points.',
    						unlock: 121,
    					},
    					{ desc: 'Damage is increased by up to <em>200%</em>.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Deathly Protection',
    				image: './img/skills/grezhul4.png',
    				desc: 'During battles, damage dealt to all allied heroes from Intelligence-based enemies is reduced by <em>15%</em>.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'During battles, damage dealt to allied Graveborn heroes from Intelligence-based enemies is reduced by an additional <em>15%</em>.',
    						unlock: 141,
    					},
    					{ desc: 'During battles, damage dealt to all allied heroes from Intelligence-based enemies is reduced by <em>20%</em>.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 20,
    		sig_item: {
    			name: 'Reanimation',
    			image: './img/si/grezhul.png',
    			desc: 'Summons <em>1</em> skeletal warrior every <em>9</em> seconds behind the enemy closest to the edge of the battlefield while Grezhul is alive.',
    			upgrades: [
    				{ desc: 'Grezhul recovers <em>10%</em> of his max health when the skeletal warrior dies.',
    					unlock: 10,
    				},
    				{ desc: '<em>20%</em> of max HP is restored after resurrection.',
    					unlock: 20,
    				},
    				{ desc: 'Skeletal warrior is summoned once every <em>7.5</em> seconds.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 9,
    		furniture: {
    			name: 'Shadow Strike',
    			image: './img/furniture/grezhul.png',
    			upgrades: [
    				{ desc: 'Value of Grezhul\'s "Shadow Shield" is increased by <em>150%</em>. Shield explodes when the ability ends if it has not already been destroyed.',
    					unlock: 3,
    				},
    				{ desc: 'Skeletal Warriors summoned as a result of any ability shall enjoy the shield effects of the ability "Shadow Shield".',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'shemira',
    		name: 'Shemira',
    		portrait: './img/portraits/shemira.jpg',
    		class: 'Mage',
    		faction: 'Graveborn',
    		type: 'Intelligence',
    		skills: [
    			{
    				name: 'Tortured Souls',
    				image: './img/skills/shemira1.png',
    				desc: 'Souls of the dead spiral around Shemira causing continuous damage to nearby enemies over a duration of <em>12</em> seconds. <em>50%</em> of all damage caused by this ability will be converted into health that heals Shemira.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Damage is increased by up to <em>80%</em>. <em>100%</em> of the ability\'s total damage is converted into health.',
    						unlock: 81,
    					},
    					{ desc: 'Damage is increased by up to <em>90%</em>. Restores <em>25%</em> health when dealing damage and gradually restores health after the ability has finished.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Soul Siphon',
    				image: './img/skills/shemira2.png',
    				desc: 'Shemira continuously leeches an enemy\'s life to restore her own which deals <em>45%</em> damage every <em>0.5</em> seconds.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Damage is increased up to <em>50%</em>.',
    						unlock: 21,
    					},
    					{ desc: 'Damage is increased by up to <em>55%</em> and gradually increases over time.',
    						unlock: 101,
    					},
    					{ desc: 'Damage is increased to <em>60%</em>.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Silence',
    				image: './img/skills/shemira3.png',
    				desc: 'Shemira deals <em>100%</em> damage to a magic based enemy and simultaneously prevents them from casting any abilities for several seconds.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Damage is increased by up to <em>130%</em>. The time the enemy is prevented from attacking is extended (time extension based on Shemira\'s HP).',
    						unlock: 121,
    					},
    					{ desc: 'Damage is increased to <em>150%</em>.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Wrath',
    				image: './img/skills/shemira4.png',
    				desc: 'Shemira deals more damage the more health she possesses. Shemira\'s damage can be increased by up to <em>30%</em>.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Crit Rating increases up to an additional <em>30%</em> (based on Shemira\'s HP).',
    						unlock: 141,
    					},
    					{ desc: 'Damage is increased by up to <em>40%</em>.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 0,
    		sig_item: {
    			name: 'Twisted Torture',
    			image: './img/si/shemira.png',
    			desc: 'The "Tortured Souls" ability deals <em>12%</em> extra damage when there is <em>1</em> enemy on the battlefield, <em>6%</em> when there are <em>2</em> enemies on the battlefield, and <em>3%</em> damage when there are <em>3</em> enemies on the battlefield.',
    			upgrades: [
    				{ desc: 'The "Tortured Souls" ability deals <em>24%</em> extra damage when there is <em>1</em> enemy on the battlefield, <em>12%</em> when there are <em>2</em> enemies on the battlefield, and <em>6%</em> damage when there are <em>3</em> enemies on the battlefield.',
    					unlock: 10,
    				},
    				{ desc: 'The "Tortured Souls" ability deals <em>36%</em> extra damage when there is <em>1</em> enemy on the battlefield, <em>18%</em> when there are <em>2</em> enemies on the battlefield, and <em>9%</em> damage when there are <em>3</em> enemies on the battlefield.',
    					unlock: 20,
    				},
    				{ desc: 'The "Tortured Souls" ability deals <em>48%</em> damage when there is <em>1</em> enemy on the battlefield, <em>24%</em> when there are <em>2</em> enemies on the battlefield and <em>12%</em> damage when there are <em>3</em> enemies on the battlefield.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 3,
    		furniture: {
    			name: 'Inner Yearning',
    			image: './img/furniture/shemira.png',
    			upgrades: [
    				{ desc: 'When Shemira\'s Energy is full, she becomes immune to all control abilities for <em>2</em> seconds and immediately uses her ultimate ability. This ability can be activated even while another ability is currently in use.',
    					unlock: 3,
    				},
    				{ desc: 'When Shemira\'s health falls below <em>50%</em>, the percentage of damage that is converted into health while her "Tortured Souls" ability is in effect is raised by <em>30%</em>. Once "Tortured Souls" has finished dealing damage to enemies, the percentage of damage converted into her health falls by <em>30%</em>.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'oden',
    		name: 'Oden',
    		portrait: './img/portraits/oden.jpg',
    		class: 'Mage',
    		faction: 'Graveborn',
    		type: 'Intelligence',
    		skills: [
    			{
    				name: 'Soul Burn',
    				image: './img/skills/oden1.png',
    				desc: 'Oden completely drains all Energy from the enemy that possesses the highest amount of Energy, dealing <em>160%</em> base damage to them. An additional <em>1%</em> damage is dealt to the enemy for every <em>1%</em> of Energy that the enemy target has when the ability is cast against them. The higher the amount of Energy that Oden drains from his enemies will result in Oden losing a higher proportion of his own Energy. Oden will lose at least <em>300</em> Energy points when using this ability, regardless of his enemies\' Energy levels.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Enemies cannot recover any Energy for <em>5</em> seconds after this ability is used against them.',
    						unlock: 81,
    					},
    					{ desc: 'Additional damage dealt to the enemy is increased to <em>1.5%</em> for every <em>1%</em> of Energy the enemy target has.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Void Lightning',
    				image: './img/skills/oden2.png',
    				desc: 'Oden opens up a portal to the void, causing void lightning to blast out of it, striking the nearest enemy that is standing directly opposite him for <em>180%</em> AoE damage.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Damage increased to <em>190%</em>.',
    						unlock: 21,
    					},
    					{ desc: 'Recovers an additional <em>50</em> Energy points for every enemy struck.',
    						unlock: 101,
    					},
    					{ desc: 'Damage increased to <em>200%</em>.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Eviction',
    				image: './img/skills/oden3.png',
    				desc: 'Oden opens up a portal to the void that sucks in the enemy with the highest percentage of health. The targeted enemy is then thrown out of the portal and onto the weakest enemy target, resulting in <em>180%</em> AoE damage being dealt to the affected targets.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Damage increased to <em>200%</em>.',
    						unlock: 121,
    					},
    					{ desc: 'Damage increased to <em>220%</em>.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Eye of Evil',
    				image: './img/skills/oden4.png',
    				desc: 'When Oden recovers 300/1000/2000 Energy points respectively, one of his eyes will open until all three of his eyes are open. After Oden\'s first eye has been opened, the AoE damage effect caused by the Ability "Eviction" will now include a stun effect, which stuns the affected enemies for <em>3</em> seconds. After Oden\'s second eye has been opened the ability "Void Lightning" will additionally target the enemy that is currently standing farthest away from Oden. After Oden\'s third and final eye has been opened, Oden\'s Normal Attacks will cause his enemies to lose an additional <em>60</em> Energy points per attack.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Oden\'s Attack Rating is increased by <em>10%</em> and his Casting Speed is increased by <em>10%</em> each time he opens another eye.',
    						unlock: 141,
    					},
    					{ desc: 'Oden\'s Attack Rating is increased by <em>15%</em> and his Casting Speed is increased by <em>15%</em> each time he opens another eye.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 30,
    		sig_item: {
    			name: 'Vengeful Fury',
    			image: './img/si/oden.png',
    			desc: 'During battles, Oden gains <em>1</em> Fiend Point required for his "Eye of Evil" ability from every Energy Point taken away from his enemies.',
    			upgrades: [
    				{ desc: 'Each time the ability "Eye of Evil" reaches <em>200</em> Fiend Points, Oden\'s Attack Rating is raised by <em>3%</em> and his Haste is raised by <em>3</em> points. Attributes can be raised up to <em>10</em> times.',
    					unlock: 10,
    				},
    				{ desc: 'Each time the ability "Eye of Evil" reaches <em>200</em> Fiend Points, Oden\'s Attack Rating is raised by <em>3%</em> and his Haste is raised by <em>3</em> points. Attributes can be raised up to <em>15</em> times.',
    					unlock: 20,
    				},
    				{ desc: 'Each time the ability "Eye of Evil" reaches <em>200</em> Fiend Points, Oden\'s Attack Rating is raised by <em>5%</em> and his Haste is raised by <em>4</em> points. Attributes can be raised up to <em>15</em> times.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 9,
    		furniture: {
    			name: 'Cursed Descent',
    			image: './img/furniture/oden.png',
    			upgrades: [
    				{ desc: 'Enemies struck by the ability "Void Lightning" have their Energy recovery reduced by <em>80%</em> for the following <em>5</em> seconds.',
    					unlock: 3,
    				},
    				{ desc: 'While alive, Oden passively uses the ability "Void Lightning" every <em>8</em> seconds to attack the enemy with the current highest Energy.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'isabella',
    		name: 'Isabella',
    		portrait: './img/portraits/isabella.jpg',
    		class: 'Mage',
    		faction: 'Graveborn',
    		type: 'Intelligence',
    		skills: [
    			{
    				name: 'Decimation',
    				image: './img/skills/isabella1.png',
    				desc: 'Isabella casts a spell that launches up to <em>8</em> arcane orbs. Each orb deals <em>220%</em> damage to a random enemy hero, prioritizing enemies that have not been already hit by the current spell, otherwise the most injured enemy target is prioritized.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Damage is raised by up to <em>250%</em>. Isabella is immune to control abilities for <em>3</em> seconds while casting this spell.',
    						unlock: 81,
    					},
    					{ desc: 'Each orb cast increases the damage of the following orb by <em>20%</em>.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Void Barrage',
    				image: './img/skills/isabella2.png',
    				desc: 'Isabella casts a spell as her Normal Attacks. After a short delay the most injured enemy is targeted with lighting, dealing <em>160%</em> damage to them.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>175%</em>.',
    						unlock: 21,
    					},
    					{ desc: 'Damage is raised by <em>12%</em> each time incantation is successfully cast. Damage can be stacked by up to <em>3</em> times. If interrupted while casting, this ability\'s stacked damage will be nullified.',
    						unlock: 101,
    					},
    					{ desc: 'Base damage is raised by up to <em>190%</em>. Damage is raised by <em>15%</em> for each successful cast.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Psi Reap',
    				image: './img/skills/isabella3.png',
    				desc: 'Isabella continuously casts a spell, stealing <em>75</em> Energy every <em>0.5</em> seconds from the nearest enemy hero.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'If Isabella finished casting her spell without being interrupted, she permanently steals <em>20</em> points of the enemy target\'s Crit Rating.',
    						unlock: 121,
    					},
    					{ desc: 'Damage taken by Isabella while spell-casting is reduced by <em>60%</em>.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Surge',
    				image: './img/skills/isabella4.png',
    				desc: 'Casting speed is increased by <em>15%</em>.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Casting speed is increased by <em>20%</em>.',
    						unlock: 141,
    					},
    					{ desc: 'Casting speed is further increased by <em>15%</em> for the first <em>10</em> seconds of battle.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 30,
    		sig_item: {
    			name: 'Lightning Barrage',
    			image: './img/si/isabella.png',
    			desc: 'Each time the ability "Void Barrage" has been successfully cast <em>3</em> times it will release <em>2</em> bolts of lightning that will each target different enemies.',
    			upgrades: [
    				{ desc: 'Casting speed is increased by <em>30%</em>.',
    					unlock: 10,
    				},
    				{ desc: 'Damage dealt by "Void Barrage" is increased by <em>15%</em>.',
    					unlock: 20,
    				},
    				{ desc: 'Each time the ability "Void Barrage" has been successfully cast <em>3</em> times it will release <em>3</em> bolts of lightning that will each target different enemies.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 9,
    		furniture: {
    			name: 'Concentrated Sorcery',
    			image: './img/furniture/isabella.png',
    			upgrades: [
    				{ desc: 'The ability "Psi Reap" additionally targets the enemy hero with the most Energy.',
    					unlock: 3,
    				},
    				{ desc: 'All enemies are terrified for <em>5</em> seconds whenever a non-summoned enemy dies within <em>8</em> seconds after being damaged by the ability "Decimation". While terrified, enemies are unable to attack and will run the opposite direction of Isabella.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'ferael',
    		name: 'Ferael',
    		portrait: './img/portraits/ferael.jpg',
    		class: 'Ranger',
    		faction: 'Graveborn',
    		type: 'Agility',
    		skills: [
    			{
    				name: 'Nether Blaze',
    				image: './img/skills/ferael1.png',
    				desc: 'Fires a demonic arrow that hits all enemies on the battlefield causing them to suffer <em>170%</em> damage. All enemies that are haunted by an evil spirit receive an additional <em>25%</em> damage per spirit.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Spirits\' attack speeds are increased for <em>6</em> seconds.',
    						unlock: 81,
    					},
    					{ desc: 'Damage is increased to <em>220%</em>.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Accursed Arrow',
    				image: './img/skills/ferael2.png',
    				desc: 'Fires a cursed arrow at an enemy, dealing <em>140%</em> damage. The cursed arrow causes an evil spirit to haunt the enemy for <em>10</em> seconds. Any spirits which are summoned due to one of Ferael\'s abilities will attack their targets once every <em>3</em> seconds.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>170%</em>.',
    						unlock: 21,
    					},
    					{ desc: 'Any spirits which are summoned due to one of Ferael\'s abilities will deduct <em>15</em> of their target\'s Energy points per attack.',
    						unlock: 101,
    					},
    					{ desc: 'Any spirits which are summoned due to one of Ferael\'s abilities have a chance to interrupt their enemies\' attacks each time they attack them.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Terrorize',
    				image: './img/skills/ferael3.png',
    				desc: 'Terrifies and stuns <em>2</em> heroes for <em>10</em> seconds and summons an evil spirit which haunts them for <em>10</em> seconds.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Terrifies up to <em>3</em> enemies.',
    						unlock: 121,
    					},
    					{ desc: 'Stun effect lasts for up to <em>3</em> seconds.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Corrupted Spirit',
    				image: './img/skills/ferael4.png',
    				desc: 'Summons an evil spirit from any fallen heroes\' corpse that then haunts an enemy for <em>10</em> seconds.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Any spirits which are summoned due to one of Ferael\'s abilities will remain on the battlefield for <em>3</em> seconds.',
    						unlock: 141,
    					},
    					{ desc: 'Any spirits which are summoned due to one of Ferael\'s abilities will remain on the battlefield for <em>5</em> seconds.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 20,
    		sig_item: {
    			name: 'Anguished Spirit',
    			image: './img/si/ferael.png',
    			desc: 'Normal Attacks will cause an evil spirit to haunt the enemy target if a critical strike occurs.',
    			upgrades: [
    				{ desc: 'Attack Ratings for all enemies are reduced by <em>3%</em> and Health Recovery Rates are reduced by <em>15%</em> for every spirit that is haunting an enemy on the battlefield. This ability may be stacked up to <em>4</em> times.',
    					unlock: 10,
    				},
    				{ desc: 'Attack Ratings for all enemies are reduced by <em>5%</em> and Health Recovery Rates are reduced by <em>15%</em> for every spirit that is haunting an enemy on the battlefield. This ability may be stacked up to <em>4</em> times.',
    					unlock: 20,
    				},
    				{ desc: 'Attack Ratings for all enemies are reduced by <em>5%</em> and Health Recovery Rates are reduced by <em>15%</em> for every spirit that is haunting an enemy on the battlefield. This ability may be stacked up to <em>6</em> times.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 9,
    		furniture: {
    			name: 'Ghastly Hauntings',
    			image: './img/furniture/ferael.png',
    			upgrades: [
    				{ desc: 'Ferael\'s Normal Attacks cause his targets to lose <em>12</em> Haste points for <em>1.5</em> seconds. If the target is haunted by <em>3</em> evil spirits, Ferael\'s Normal Attacks stun the target instead.',
    					unlock: 3,
    				},
    				{ desc: 'Ferael uses the ability "Accursed Arrow" as his Normal Attack, which can be used once every <em>1.5</em> seconds.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'thoran',
    		name: 'Thoran',
    		portrait: './img/portraits/thoran.jpg',
    		class: 'Tank',
    		faction: 'Graveborn',
    		type: 'Strength',
    		skills: [
    			{
    				name: 'Retaliation',
    				image: './img/skills/thoran1.png',
    				desc: 'Thoran focuses for several moments before swinging his weapon at all the enemies in front of him, dealing <em>140%</em> damage to them. <em>200%</em> of the damage received by Thoran during his focusing stage is dealt back to his enemies as additional damage. While in a focused state, Thoran is immune to control abilities and receives less damage.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>160%</em>.',
    						unlock: 81,
    					},
    					{ desc: 'Recovers <em>40%</em> of damage dealt to enemies as health.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Domination',
    				image: './img/skills/thoran2.png',
    				desc: 'Thoran cleaves at an enemy, dealing <em>120%</em> damage to them, and causes them to fall to the ground.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>140%</em>.',
    						unlock: 21,
    					},
    					{ desc: '<em>80%</em> of damage is converted into health.',
    						unlock: 101,
    					},
    					{ desc: 'Damage is increased to <em>160%</em>.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Resurrection',
    				image: './img/skills/thoran3.png',
    				desc: 'Thoran resurrects himself after dying with <em>60%</em> of his health restored. This ability can only be used once per battle.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'After being resurrected, nearby enemies are stunned for <em>3</em> seconds.',
    						unlock: 121,
    					},
    					{ desc: '<em>75%</em> of max HP is restored.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Taint',
    				image: './img/skills/thoran4.png',
    				desc: 'At the start of battle Thoran deals <em>100%</em> damage to the enemy with the least amount of health, also cursing them. Over the next <em>15</em> seconds, if Thoran is dealt damage, the cursed enemy will lose health equal to <em>70%</em> of the damage value.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Duration is extended up to <em>25</em> seconds.',
    						unlock: 141,
    					},
    					{ desc: 'Cursed enemy loses health equal to <em>75%</em> of the damage Thoran receives.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 30,
    		sig_item: {
    			name: 'King\'s Will',
    			image: './img/si/thoran.png',
    			desc: 'Thoran cannot be killed during the initial focusing phase of his "Retaliation" ability.',
    			upgrades: [
    				{ desc: 'Thoran\'s max health is increased by <em>15%</em> while in battle.',
    					unlock: 10,
    				},
    				{ desc: 'Thoran\'s max health is increased by <em>30%</em> while in battle.',
    					unlock: 20,
    				},
    				{ desc: 'Thoran cannot be killed in battle for the first <em>2</em> times that he enters the focusing phase of his "Retaliation" ability.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 9,
    		furniture: {
    			name: 'Deadly Attraction',
    			image: './img/furniture/thoran.png',
    			upgrades: [
    				{ desc: 'Enemies that are stunned by the ability "Resurrection" are drawn towards Thoran and he recovers <em>5%</em> of his max health for every enemy stunned by the ability "Resurrection".',
    					unlock: 3,
    				},
    				{ desc: 'Thoran immediately recovers <em>150</em> Energy points after he is brought back to life by his "Resurrection" ability.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'kelthur',
    		name: 'Kelthur',
    		portrait: './img/portraits/kelthur.jpg',
    		class: 'Ranger',
    		faction: 'Graveborn',
    		type: 'Agility',
    		skills: [
    			{
    				name: 'Blades of Fury',
    				image: './img/skills/kelthur1.png',
    				desc: 'Kelthur targets the enemy that is farthest away from himself with his shuriken which deals <em>65%</em> damage to all enemies standing in its path. Once the shuriken reaches its final target, Kelthur catches it and proceeds to attack the enemy target for <em>180%</em> damage.',
    				unlock: 1,
    				upgrades: [
    					{ desc: '<em>70%</em> of final attack damage dealt is returned to Kelthur as health.',
    						unlock: 81,
    					},
    					{ desc: 'Final attack damage is increased up to <em>220%</em>.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Retaliation',
    				image: './img/skills/kelthur2.png',
    				desc: 'Kelthur completely dodges an incoming enemy attack and jumps in front of the attacker, unleashing a counter-attack on them that deals <em>150%</em> damage. Ability is activated once every <em>10</em> seconds.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>170%</em>.',
    						unlock: 21,
    					},
    					{ desc: 'After counter-attacking, Kelthur\'s Haste is increased by <em>60%</em> for <em>4</em> seconds.',
    						unlock: 101,
    					},
    					{ desc: 'Ability is activated every <em>8</em> seconds.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Displace',
    				image: './img/skills/kelthur3.png',
    				desc: 'At the beginning of battles Kelthur swaps places with an enemy target. Any damage that the enemy receives will be increased by <em>35%</em> for <em>7</em> seconds. This ability prioritizes enemy targets that mirror Kelthur\'s position on the battlefield.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Damage received by enemy is increased by <em>35%</em> for <em>10</em> seconds.',
    						unlock: 121,
    					},
    					{ desc: 'Damage received by enemy is increased by <em>50%</em> for <em>10</em> seconds.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Etheral Resurgence',
    				image: './img/skills/kelthur4.png',
    				desc: 'When Kelthur dies he comes back to the battlefield in spectral form. While in this spectral form Kelthur cannot be attacked, however he will gradually lose health over time. Simultaneously Kelthur is still able to use his Normal Attacks and ultimate ability normally in combat. Kelthur\'s Haste is increased by <em>80%</em> for the time that he remains on the battlefield in spectral form.',
    				unlock: 61,
    				upgrades: [
    					{ desc: '<em>40%</em> of Kelthur\'s health is restored while in spectral form when any non-summoned enemy is slain.',
    						unlock: 141,
    					},
    					{ desc: '<em>60%</em> of Kelthur\'s health is restored while in spectral form when any non-summoned enemy is slain.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 30,
    		sig_item: {
    			name: 'Blood Sap',
    			image: './img/si/kelthur.png',
    			desc: 'When any non-summoned allies which are within <em>20</em> levels of Kelthur\'s own level are defeated, Kelthur\'s Attack Rating will be increased by <em>20%</em>.',
    			upgrades: [
    				{ desc: 'Increases Attack Rating by <em>28%</em>.',
    					unlock: 10,
    				},
    				{ desc: 'Increases Attack Rating by <em>36%</em>.',
    					unlock: 20,
    				},
    				{ desc: 'If <em>3</em> allied heroes have already died, Kelthur will increase his life leech attributes by <em>50</em> points for <em>10</em> seconds.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 9,
    		furniture: {
    			name: 'Life After Death',
    			image: './img/furniture/kelthur.png',
    			upgrades: [
    				{ desc: 'Kelthur is able to proactively trigger the ability "Retaliation" while the ability "Ethereal Resurgence" is in effect. Cooldown time of "Retaliation" is equal to the ability\'s regular passive interval time.',
    					unlock: 3,
    				},
    				{ desc: 'Retaliation cooldown time is reduced by <em>2</em> seconds.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'nara',
    		name: 'Nara',
    		portrait: './img/portraits/nara.jpg',
    		class: 'Warrior',
    		faction: 'Graveborn',
    		type: 'Strength',
    		skills: [
    			{
    				name: 'Butchery',
    				image: './img/skills/nara1.png',
    				desc: 'Nara deals <em>110%</em> damage to the enemy target. Damage ignores the target\'s defense and invincibility effects. If the target\'s health is below <em>40%</em>, then the ability\'s damage is multiplied <em>6</em> times. However, if the auto battle feature is being used, this ability will not deal damage to any enemy targets with health above a <em>40%</em>.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Restores an additional <em>250</em> Energy if enemy target is slain. If a summoned entity is slain, the amount of additional Energy points that are recovered is increased to <em>700</em> points.',
    						unlock: 81,
    					},
    					{ desc: 'Activates a shield that can mitigate <em>350%</em> damage if enemy target is slain.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Dismember',
    				image: './img/skills/nara2.png',
    				desc: 'Nara hits a nearby enemy, leaving them stunned for several seconds and then proceeds to attack the enemy multiple times, inflicting <em>35%</em> damage per attack to the enemy.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Fifth attack deals additional damage equal to <em>25%</em> of the target\'s current health.',
    						unlock: 21,
    					},
    					{ desc: 'Fifth attack deals additional damage equal to <em>30%</em> of the target\'s current health.',
    						unlock: 101,
    					},
    					{ desc: 'Fifth attack deals additional damage equal to <em>35%</em> of the target\'s current health.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Impale',
    				image: './img/skills/nara3.png',
    				desc: 'When there are no enemy targets in Nara\'s vicinity, she will proceed to use her grappling hook to impale an enemy and drag them towards herself. Nara will prioritize attacks towards enemies standing opposite herself.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'The targeted enemy bleeds after being impaled which causes <em>60%</em> damage per second for <em>8</em> seconds.',
    						unlock: 121,
    					},
    					{ desc: 'The targeted enemy bleeds after being impaled which causes <em>65%</em> damage per second for <em>8</em> seconds.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Terrify',
    				image: './img/skills/nara4.png',
    				desc: 'A passive ability that causes Nara\'s attackers to lose <em>90</em> Energy each time they deal damage to her. Enemies can suffer Energy loss up to a maximum of <em>4</em> times within <em>10</em> seconds.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Energy lost by attackers is raised to <em>100</em>.',
    						unlock: 141,
    					},
    					{ desc: 'Energy lost by attackers is raised to <em>110</em>.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 15,
    		sig_item: {
    			name: 'Looming Death',
    			image: './img/si/nara.png',
    			desc: 'When Nara discovers an enemy injured enough to be slain by her ultimate ability, she will attempt to use "Impale" to bring them closer to her before using her ultimate ability to finish them off.',
    			upgrades: [
    				{ desc: 'The ability "Butchery" will possess an additional <em>12%</em> life leech effect that is based on the ability\'s damage output.',
    					unlock: 10,
    				},
    				{ desc: 'The ability "Butchery" will possess an additional <em>24%</em> life leech effect that is based on the ability\'s damage output.',
    					unlock: 20,
    				},
    				{ desc: 'When Nara\'s health drops below <em>50%</em>, her "Butchery" ability will no longer require her enemies\' health to be below a certain percentage in order for it to deal high amounts of damage.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 9,
    		furniture: {
    			name: 'Perturbed',
    			image: './img/furniture/nara.png',
    			upgrades: [
    				{ desc: 'All enemies become terrified for <em>2</em> seconds after Nara successfully kills an enemy hero with her ultimate ability "Butchery". Enemies are unable to attack while terrified and will run away from Nara.',
    					unlock: 3,
    				},
    				{ desc: 'If the requirements for the "Butchery" ability\'s high damage multipliers are met, its damage will be additionally increased by <em>450%</em>.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'baden',
    		name: 'Baden',
    		portrait: './img/portraits/baden.jpg',
    		class: 'Warrior',
    		faction: 'Graveborn',
    		type: 'Agility',
    		skills: [
    			{
    				name: 'Phantom Assassin',
    				image: './img/skills/baden1.png',
    				desc: 'Baden summons a shadow phantom that possesses <em>90%</em> of his own health and Attack Rating. The phantom is able to use all of Baden\'s abilities except for his ultimate ability and will suffer <em>150%</em> damage when attacked.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Baden summons an additional phantom.',
    						unlock: 81,
    					},
    					{ desc: 'Damage dealt to the phantom is reduced to <em>130%</em>.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Phantom Strike',
    				image: './img/skills/baden2.png',
    				desc: 'Baden summons a phantom behind an enemy\'s back that lasts for <em>6</em> seconds that proceeds to attack them, dealing <em>180%</em> damage to them. The phantom possesses <em>70%</em> of Baden\'s Health and Attack Rating but will be dealt <em>220%</em> damage when attacked and may only attack with Normal Attacks.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>190%</em>.',
    						unlock: 21,
    					},
    					{ desc: 'Phantom\'s Attack Rating and health is increased to <em>80%</em>.',
    						unlock: 101,
    					},
    					{ desc: 'Damage is increased to <em>200%</em>.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Spectral Onslaught',
    				image: './img/skills/baden3.png',
    				desc: 'Baden unleashes a three-stage attack on surrounding enemies, with each attack dealing <em>135%</em> damage to enemy targets.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'When Baden or his phantom use this ability damage dealt to enemies will be increased by <em>10%</em> for <em>7</em> seconds. This ability can be stacked up to <em>5</em> times.',
    						unlock: 121,
    					},
    					{ desc: 'Damage is increased to <em>150%</em>.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Spectral Surge',
    				image: './img/skills/baden4.png',
    				desc: 'Baden\'s Attack Rating is increased by <em>3%</em> for every phantom on the battlefield, Baden is also able to mitigate <em>20%</em> damage for every phantom on the battlefield.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Attack Ratings of all phantoms are increased up to <em>4%</em>.',
    						unlock: 141,
    					},
    					{ desc: 'Attack Ratings of all phantoms are increased up to <em>5%</em>.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 5,
    		sig_item: {
    			name: 'Phantom Force',
    			image: './img/si/baden.png',
    			desc: 'Each time a total of <em>4</em> phantom Badens disappear from the battlefield, Baden will initiate the effects of his "Phantom Strike" ability.',
    			upgrades: [
    				{ desc: 'All of Baden\'s phantoms have their health increased by <em>15%</em>.',
    					unlock: 10,
    				},
    				{ desc: 'All of Baden\'s phantoms have their health inccreased by <em>30%</em>.',
    					unlock: 20,
    				},
    				{ desc: 'Each time a total of <em>3</em> phantom Badens disappear from the battlefield, Baden will initiate the effects of his "Phantom Strike" ability.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 9,
    		furniture: {
    			name: 'Phantom Commander',
    			image: './img/furniture/baden.png',
    			upgrades: [
    				{ desc: 'When one of Baden\'s phantoms disappears from the battlefield, the remaining phantoms regain <em>45%</em> of the health they have already lost.',
    					unlock: 3,
    				},
    				{ desc: 'If Baden receives fatal damage, he consumes one of his phantoms that currently has a higher health percentage than himself and transfers <em>60%</em> of the phantom\'s remaining health to himself. This ability can be used <em>6</em> times per battle.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'izold',
    		name: 'Izold',
    		portrait: './img/portraits/izold.jpg',
    		class: 'Warrior',
    		faction: 'Graveborn',
    		type: 'Strength',
    		skills: [
    			{
    				name: 'Toxic Transfusion',
    				image: './img/skills/izold1.png',
    				desc: 'Izold utilizes a powerful chemical agent that immediately restores <em>50%</em> of the health he has already lost while also increasing his Haste by <em>20</em> points and Attack Rating by <em>35%</em> for <em>12</em> seconds.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Effects are increased to <em>15</em> seconds.',
    						unlock: 81,
    					},
    					{ desc: 'Effects are increased to <em>18</em> seconds.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Noxious Blast',
    				image: './img/skills/izold2.png',
    				desc: 'When Izold\'s health is greater than <em>30%</em> he will use his Noxious Gas ability, dealing damage equal to <em>3%</em> of his own health as damage to nearby enemies. Noxious Gas also causes Izold to receive damage equal to <em>1%</em> of his own health as damage.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'A noxious explosion occurs every <em>6</em> seconds, dealing <em>190%</em> damage to nearby enemies, leaving them stunned for <em>3</em> seconds.',
    						unlock: 21,
    					},
    					{ desc: 'Explosive damage is raised to <em>270%</em> damage.',
    						unlock: 101,
    					},
    					{ desc: 'Explosive damage is raised to <em>340%</em> damage.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Needle Strike',
    				image: './img/skills/izold3.png',
    				desc: 'Izold charges into a single enemy target, stunning them and knocking them backwards, finally stabbing the enemy with his needle for <em>190%</em> damage.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Final attack damage increased to <em>270%</em> damage.',
    						unlock: 121,
    					},
    					{ desc: 'Final attack damage increased to <em>340%</em> damage.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Hypodermic Healing',
    				image: './img/skills/izold4.png',
    				desc: 'Izold injects himself, restoring <em>16%</em> of the health the he\'s already lost per second over <em>8</em> seconds.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Restores <em>18%</em> of lost HP per second.',
    						unlock: 141,
    					},
    					{ desc: 'Restores <em>20%</em> of lost HP per second.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 30,
    		sig_item: {
    			name: 'Lethal Dose',
    			image: './img/si/izold.png',
    			desc: 'When Izold uses "Toxic Transfusion" he will also receive the effects of his "Hypodermic Healing" ability.',
    			upgrades: [
    				{ desc: 'The damage Izold receives is reduced by <em>30%</em> for <em>15</em> seconds when any enemies are slain while Izold is using his "Toxic Transfusion" ability.',
    					unlock: 10,
    				},
    				{ desc: 'The damage Izold receives is reduced by <em>50%</em> for <em>15</em> seconds when any enemies are slain while Izold is using his "Toxic Transfusion" ability.',
    					unlock: 20,
    				},
    				{ desc: 'Izold cannot be controlled while using his "Toxic Transfusion" ability',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 3,
    		furniture: {
    			name: 'Exertion',
    			image: './img/furniture/izold.png',
    			upgrades: [
    				{ desc: 'Izold\'s Attack Rating is increased by <em>1%</em> and his attack frequency increased by <em>3%</em> until the end of the battle every time he loses <em>1%</em> of his max health.',
    					unlock: 3,
    				},
    				{ desc: 'The effects of the ability "Hypodermic Healing" become permanent after this ability has been stacked <em>45</em> times and does not need to be manually activated again.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'torne',
    		name: 'Torne',
    		portrait: './img/portraits/torne.jpg',
    		class: 'Tank',
    		faction: 'Graveborn',
    		type: 'Strength',
    		skills: [
    			{
    				name: 'Piercing Bones',
    				image: './img/skills/torne1.png',
    				desc: 'Deals <em>300%</em> damage to all enemies and causes bone spikes to protrude from the battlefield for <em>8</em> seconds. Bone spikes are able to deal damage once every <em>0.25</em> seconds. If an enemy moves positions within these <em>0.25</em> seconds, they will subsequently lose <em>3%</em> of their max health. Torne regrows his bone whip after using this ability.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Bone spikes protrude from the battlefield for <em>9</em> seconds.',
    						unlock: 81,
    					},
    					{ desc: 'Bone spikes protrude from the battlefield for <em>10</em> seconds.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Bone Prison',
    				image: './img/skills/torne2.png',
    				desc: 'Torne traps an enemy within a prison of bones and then proceeds to smash into the enemy target, dealing <em>260%</em> damage to them, also causing them to be knocked backwards. After being knocked backwards, the enemy loses <em>8</em> Haste points for a duration of <em>100</em> seconds.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>290%</em>.',
    						unlock: 21,
    					},
    					{ desc: 'Damage is increased to <em>320%</em>.',
    						unlock: 101,
    					},
    					{ desc: 'Damage is increased to <em>350%</em>.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Seething Death',
    				image: './img/skills/torne3.png',
    				desc: 'Torne deals <em>180%</em> AoE damage <em>3</em> times to enemies that are standing before him, with the final attack leeching <em>25%</em> health from the final enemy. All enemies that were struck by this attack are unable to recover life for the following <em>9</em> seconds. Torne regrows his bone whip after using this ability.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>190%</em>.',
    						unlock: 121,
    					},
    					{ desc: 'Damage is increased to <em>200%</em>.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Absorption',
    				image: './img/skills/torne4.png',
    				desc: 'Torne absorbs the remains of any dead heroes on the battlefield and forms a bone whip out of their bones. Simultaneously, Torne recovers <em>30%</em> of his max health and increases the value of his max health by the same amount. The area for all of Torne\'s AoE abilities is increased after this ability is used for the first time.',
    				unlock: 61,
    				upgrades: [
    					{ desc: '<em>35%</em> of max HP is restored.',
    						unlock: 141,
    					},
    					{ desc: '<em>40%</em> of max HP is restored.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 30,
    		sig_item: {
    			name: 'Baneful Focus',
    			image: './img/si/torne.png',
    			desc: 'Every time Torne forms a bone whip, his Attack Rating is increased by <em>10%</em> and his Defense Rating is increased by <em>20%</em> up until the battle ends. This ability can be stacked <em>6</em> times.',
    			upgrades: [
    				{ desc: 'Every time Torne forms a bone whip, his Attack Rating is increased by <em>15%</em> and his Defense Rating is increased by <em>30%</em> up until the battle ends. This ability can be stacked <em>6</em> times.',
    					unlock: 10,
    				},
    				{ desc: 'Every time Torne forms a bone whip, his Attack Rating is increased by <em>20%</em> and his Defense Rating is increased by <em>40%</em> up until the battle ends. This ability can be stacked <em>6</em> times.',
    					unlock: 20,
    				},
    				{ desc: 'After forming his bone whip a total of <em>3</em> times, Torne gains <em>35</em> Life Leech points and is immune to control abilities until the end of battle.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 3,
    		furniture: {
    			name: 'Death Shield',
    			image: './img/furniture/torne.png',
    			upgrades: [
    				{ desc: 'Torne is granted a shield that is able to mitigate damage equal to <em>18%</em> of his max health, which lasts for <em>5</em> seconds every time Torne loses <em>40%</em> of his max health.',
    					unlock: 3,
    				},
    				{ desc: 'Torne is granted a shield that is able to mitigate damage equal to <em>28%</em> of his max health, which lasts for <em>10</em> seconds every time Torne loses <em>40%</em> of his max health.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'daimon',
    		name: 'Daimon',
    		portrait: './img/portraits/daimon.jpg',
    		class: 'Tank',
    		faction: 'Graveborn',
    		type: 'Strength',
    		skills: [
    			{
    				name: 'Soul Feast',
    				image: './img/skills/daimon1.png',
    				desc: 'Daimon deals <em>260%</em> damage to all enemy targets. If already unlocked, the ability "Blood Shield" will be used against the <em>2</em> enemies with the highest maximum health values. While Daimon is using his shield, he will suffer <em>35%</em> of the damage received by his allies, but will not die as a result.',
    				unlock: 1,
    				upgrades: [
    					{ desc: '"Blood Shield" now targets <em>3</em> enemies.',
    						unlock: 81,
    					},
    					{ desc: 'Damage is increased to <em>300%</em>.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Blood Shield',
    				image: './img/skills/daimon2.png',
    				desc: 'Daimon steals <em>18%</em> health from the enemy with the highest maximum health and converts it into a shield that lasts for <em>5</em> seconds (health stolen does not kill the enemy). Once the shield has expired, its remaining shield value will be returned to the enemy as health.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Percentage of max health stolen from enemies is increased to <em>20%</em>.',
    						unlock: 21,
    					},
    					{ desc: 'Percentage of max health stolen from enemies is increased to <em>23%</em>.',
    						unlock: 101,
    					},
    					{ desc: 'Percentage of max health stolen from enemies is increased to <em>26%</em>.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Inanimate Companion',
    				image: './img/skills/daimon3.png',
    				desc: 'Daimon uses his doll, Stitchy to attack the enemy standing in front of him <em>3</em> times, each attack deals <em>200%</em> damage to the enemy, with the final attack causing the enemy to become stunned for <em>3</em> seconds.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'After every <em>9</em> seconds, Stitchy converts <em>100%</em> of the damage he received during the previous <em>9</em> seconds into health for Daimon.',
    						unlock: 121,
    					},
    					{ desc: 'After every <em>9</em> seconds, Stitchy converts <em>150%</em> of the damage he received during the previous <em>9</em> seconds into health for Daimon.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Forbidden Power',
    				image: './img/skills/daimon4.png',
    				desc: 'Daimon deals <em>250%</em> damage to a nearby enemy target, but also receives <em>120%</em> damage himself. Effects of this ability cannot kill Daimon.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Damage dealt to the enemy is increased to <em>280%</em>.',
    						unlock: 141,
    					},
    					{ desc: 'Damage dealt to the enemy is increased to <em>300%</em>.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 20,
    		sig_item: {
    			name: 'Soul Sunder',
    			image: './img/si/daimon.png',
    			desc: 'After using the ability "Blood Shield", while the shield is still in use, Daimon temporarily gains <em>20%</em> of the enemy target\'s Attack Rating and <em>30%</em> of their Defense Rating. This ability cannot be stacked.',
    			upgrades: [
    				{ desc: 'Daimon permanently acquires the target\'s Attack and Defense Ratings if the enemy target dies while Daimon\'s "Blood Shield" is being used.',
    					unlock: 10,
    				},
    				{ desc: 'After using the ability "Blood Shield", while the shield is still in use, Daimon temporarily gains <em>40%</em> of the enemy target\'s Attack Rating and <em>60%</em> of their Defense Rating. This ability cannot be stacked.',
    					unlock: 20,
    				},
    				{ desc: 'Duration of "Blood Shield" lasts for <em>7</em> seconds.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 3,
    		furniture: {
    			name: 'Dying Wish',
    			image: './img/furniture/daimon.png',
    			upgrades: [
    				{ desc: 'Enemies that have already dealt damage to Daimon receive <em>40%</em> increased damage for <em>3</em> seconds. This ability cannot be stacked.',
    					unlock: 3,
    				},
    				{ desc: 'Enemies that have already dealt damage to Daimon receive <em>40%</em> increased damage for <em>6</em> seconds. This ability cannot be stacked. When Daimon dies, all of his allies receive a shield that is equal to <em>20%</em> of his max health for <em>5</em> seconds.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'theowyn',
    		name: 'Theowyn',
    		portrait: './img/portraits/theowyn.jpg',
    		class: 'Ranger',
    		faction: 'Graveborn',
    		type: 'Agility',
    		skills: [
    			{
    				name: 'Spectral Divergence',
    				image: './img/skills/theowyn1.png',
    				desc: 'Theowyn splits herself into multiple Specters and flies in all directions, during which time she cannot be attacked nor receive any active effects from her allies\' abilities. Each Specter that passes through an enemy inflicts <em>150%</em> damage upon them. Afterwards, the Specters converge on the weakest enemy target currently on the battlefield after which Theowyn re-manifests herself next to the target. Damage dealt to enemies during the ability\'s convergence phase is equal to the ability\'s initial attack damage.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Damage dealt to enemies when Specters pass through them is increased to <em>170%</em>.',
    						unlock: 81,
    					},
    					{ desc: 'Damage dealt to enemies when Specters pass through them is increased to <em>190%</em>.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Haunting Specter',
    				image: './img/skills/theowyn2.png',
    				desc: 'Theowyn enters spectral form to enshroud an enemy target and, prevent them from recovering any health. While the enemy is enshrouded, Theowyn deals <em>130%</em> damage per second for a total duration of up to <em>8</em> seconds. Once Theowyn has finished enshrouding the enemy, she deals an additional <em>130%</em> damage to the target. During the enshroud phase, Theowyn cannot be attacked nor receive any active effects from her allies\' abilities.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Damage dealt to enemy is increased to <em>150%</em> after Theowyn has finished enshrouding them.',
    						unlock: 21,
    					},
    					{ desc: '<em>100%</em> of the health which should have been recovered by the enemy target while enshrouded is transferred to Theowyn.',
    						unlock: 101,
    					},
    					{ desc: 'Damage dealt to enemy is increased to <em>170%</em> after Theowyn has finished enshrouding them.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Spectral Curse',
    				image: './img/skills/theowyn3.png',
    				desc: 'Theowyn enters spectral form and charges ahead, cursing every enemy that she passes through, dealing <em>130%</em> damage to them. If an enemy is already cursed, the curse is removed and Theowyn instead deals damage equal to <em>15%</em> of the enemy\'s max health, ignoring all of their defense. While in spectral form Theowyn is immune to enemy control abilities.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Damage dealt to enemies when Specters pass through them is increased to <em>150%</em>.',
    						unlock: 121,
    					},
    					{ desc: 'Damage dealt to enemies when Specters pass through them is increased to <em>170%</em>.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Song of Mourning',
    				image: './img/skills/theowyn4.png',
    				desc: 'Whenever Theowyn receives damage that exceeds <em>10%</em> of her current health, the exceeding amount of damage shall be reduced by <em>55%</em>.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Exceeding damage is reduced by <em>60%</em>.',
    						unlock: 141,
    					},
    					{ desc: 'Exceeding damage is reduced by <em>65%</em>.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 30,
    		sig_item: {
    			name: 'Sorrowful Affliction',
    			image: './img/si/theowyn.png',
    			desc: 'This ability is activated every <em>15</em> seconds of battle. The <em>1</em> enemies which have dealt the highest amount of damage to Theowyn within the last <em>15</em> seconds shall be afflicted by the effects of Theowyn\'s "Spectral Curse" ability.',
    			upgrades: [
    				{ desc: 'The Attack Ratings of cursed targets are decreased by <em>20%</em> for <em>8</em> seconds.',
    					unlock: 10,
    				},
    				{ desc: 'Number of enemies targeted by this ability is increased to <em>2</em>.',
    					unlock: 20,
    				},
    				{ desc: 'Number of enemies targeted by this ability is increased to <em>3</em>.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 9,
    		furniture: {
    			name: 'Entangled Souls',
    			image: './img/furniture/theowyn.png',
    			upgrades: [
    				{ desc: 'Enemies cannot recover Energy when they are afflicted by the "Haunting Specter" ability.',
    					unlock: 3,
    				},
    				{ desc: 'Enemies afflicted by the "Haunting Specter" ability now give <em>100%</em> of the Energy they would have recovered to Theowyn.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'silas',
    		name: 'Silas',
    		portrait: './img/portraits/silas.jpg',
    		class: 'Support',
    		faction: 'Graveborn',
    		type: 'Intelligence',
    		skills: [
    			{
    				name: 'Injected Fury',
    				image: './img/skills/silas1.png',
    				desc: 'Silas jumps beside his weakest ally and injects them with a powerful substance which increases their Attack Rating by <em>50%</em> and causes them to become immune to all damage for <em>8</em> seconds. Once this ability has ended, the affected ally will be dealt <em>70%</em> of the total amount of damage that was negated while they were in an immune state, but will not die as a result of it.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Duration is extended up to <em>9</em> seconds.',
    						unlock: 81,
    					},
    					{ desc: 'Duration is extended up to <em>10</em> seconds.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Stimulated Rage',
    				image: './img/skills/silas2.png',
    				desc: 'Silas is able to immediately heal his weakest ally for <em>12%</em> of their max health. Once healed, the ally is able to recover <em>35%</em> of Silas\' Attack Rating value as health per second over a duration of <em>8</em> seconds.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Duration of healing over time effect is increased to <em>9</em> seconds.',
    						unlock: 21,
    					},
    					{ desc: 'Duration of healing over time effect is increased to <em>10</em> seconds.',
    						unlock: 101,
    					},
    					{ desc: 'Duration of healing over time effect is increased to <em>11</em> seconds.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Double Dosage',
    				image: './img/skills/silas3.png',
    				desc: 'Silas sprays a powerful gas onto the battlefield that remains there for <em>12</em> seconds. Any allies standing within the gas cloud will recover health equal to <em>30%</em> of Silas\' Attack Rating value per second. If any enemies are standing within the gas cloud, they will suffer <em>60%</em> damage per second.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Reduces the Health Recovery Rate of enemies within the gas cloud by <em>35%</em>.',
    						unlock: 121,
    					},
    					{ desc: 'Gas cloud deals damage equal to <em>70%</em> of Silas\' Attack Rating per second to enemies.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Healing Haze',
    				image: './img/skills/silas4.png',
    				desc: 'Silas creates a gas cloud that is capable of moving slowly around the battlefield. Any allies within the cloud\'s radius will recover <em>20%</em> of the health that they\'ve already lost per second. The cloud will disappear once a total healing value equal to <em>500%</em> of Silas\' Attack Rating has been reached.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'The total amount of health that may be recovered is equal to <em>600%</em> of Silas\' Attack Rating.',
    						unlock: 141,
    					},
    					{ desc: 'The total amount of health that may be recovered is equal to <em>700%</em> of Silas\' Attack Rating.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 30,
    		sig_item: {
    			name: 'Adrenaline Shot',
    			image: './img/si/silas.png',
    			desc: 'Each time an enemy loses <em>1%</em> of their max health, their Health Recovery Rate decreases by <em>0.6%</em>, which may be further decreased up until it reaches a total value of <em>38%</em>. Each time an ally loses <em>1%</em> of their max health, their Health Recovery Rate increases by <em>0.8%</em>, which may be increased up until it reaches a total value of <em>48%</em>.',
    			upgrades: [
    				{ desc: 'Health Recovery Rate of enemies is decreased by <em>0.8%</em> until it reaches <em>48%</em>.',
    					unlock: 10,
    				},
    				{ desc: 'Health Recovery Rate of enemies is decreased by <em>1%</em> until it reaches <em>60%</em>.',
    					unlock: 20,
    				},
    				{ desc: 'Allied heroes that have more than <em>50%</em> of their max health receive an Attack Rating increase of <em>20%</em>.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 9,
    		furniture: {
    			name: 'Rampart Carnage',
    			image: './img/furniture/silas.png',
    			upgrades: [
    				{ desc: 'Using the ability "Injected Fury" on a nearby melee ally additionally increases their Normal Attack damage by <em>50%</em> and their Normal Attack frequency by <em>30%</em>.',
    					unlock: 3,
    				},
    				{ desc: 'The effects of this ability can be utilized by ranged allies whenever the "Injected Fury" is used.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'desira',
    		name: 'Desira',
    		portrait: './img/portraits/desira.jpg',
    		class: 'Support',
    		faction: 'Graveborn',
    		type: 'Intelligence',
    		skills: [
    			{
    				name: 'Siren\'s Call',
    				image: './img/skills/desira1.png',
    				desc: 'Desira uses her conch to heal all allies and herself for a value of health equal to <em>130%</em> of her Attack Rating, and records their health value after healing. If any ally\'s (including Desira\'s) health falls below the recorded value <em>5</em> seconds after healing, their health will be restored to the recorded health value, but the total restoration value will not exceed <em>280%</em> of Desira\'s Attack Rating. If any ally is dealt damage that causes their health to drop below <em>30%</em> of the recorded health value within the specified timeframe, the damage will be ignored, and the restoring effect will be triggered in advance.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'The value of health which allied heroes recover is equal to <em>150%</em> of Desira\'s Attack Rating. Health restoration value cannot exceed <em>375%</em> of Desira\'s Attack Rating.',
    						unlock: 81,
    					},
    					{ desc: 'Allies that trigger the restoring effect in advance are immune to damage and control effects for the following <em>2</em> seconds.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Hatred\'s Mark',
    				image: './img/skills/desira2.png',
    				desc: 'Desira deals <em>130%</em> AoE damage to enemies in front of her, also cursing them with a "Mark of Hatred" for <em>12</em> seconds. Every time a "Mark of Hatred" is stacked upon an enemy, their Attack Rating is reduced by <em>8%</em>, and they lose <em>15</em> Accuracy points Once <em>3</em> "Marks of Hatred" have been stacked on an enemy, all marks will disappear and the enemy target becomes terrified for <em>3.5</em> seconds.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>150%</em>.',
    						unlock: 21,
    					},
    					{ desc: 'Damage is increased to <em>170%</em>.',
    						unlock: 101,
    					},
    					{ desc: 'Each "Mark of Hatred" reduces enemy targets\' Attack Rating by <em>12%</em> and Accuracy by <em>35</em> points.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Oceanic Shield',
    				image: './img/skills/desira3.png',
    				desc: 'Desira creates a protective bubble around the most injured ally that allows them to gradually restore <em>18%</em> worth of Desira\'s max health over <em>5</em> seconds. If the target is dealt damage that exceeds <em>50%</em> of their current health while the protective bubble exists, the bubble will disappear, and the damage shall be completely ignored, allowing the target to instantly recover <em>1.5</em> times the amount of remaining health that they have yet to recover.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'The most injured ally gradually restores <em>24%</em> of Desira\'s max health.',
    						unlock: 121,
    					},
    					{ desc: 'The most injured ally immediately recovers <em>1.75</em> times the amount of remaining health.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Oceanic Mist',
    				image: './img/skills/desira4.png',
    				desc: 'Desira summons the "Oceanic Mist" that spreads from behind the allied side\'s backline towards the enemies\' backline, which will then cover the whole battlefield. Any allies within the mist shall recover an amount of health equal to <em>15%</em> of Desira\'s Attack Rating every <em>0.5</em> seconds. The "Oceanic Mist" will stay on the battlefield for a maximum of <em>12</em> seconds, and shall also disappear if Desira dies.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Amount of health recovered is equal to <em>18%</em> of Desira\'s Attack Rating.',
    						unlock: 141,
    					},
    					{ desc: 'Amount of health recovered is equal to <em>20%</em> of Desira\'s Attack Rating.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 30,
    		sig_item: {
    			name: 'Concealing Mist',
    			image: './img/si/desira.png',
    			desc: 'The "Oceanic Mist" no longer disappears when Desira dies. Allies within the mist gain <em>20</em> Dodge points, while enemies shall have their Crit Ratings reduced by <em>10%</em>.',
    			upgrades: [
    				{ desc: 'Allies gain <em>30</em> Dodge points.',
    					unlock: 10,
    				},
    				{ desc: 'Allies gain an extra <em>15</em> Received Healing points.',
    					unlock: 20,
    				},
    				{ desc: 'Allies within the mist receive <em>16%</em> less damage.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 3,
    		furniture: {
    			name: 'Treacherous Mist',
    			image: './img/furniture/desira.png',
    			upgrades: [
    				{ desc: 'Enemy targets are cursed with <em>1</em> "Mark of Hatred" for every <em>3</em> seconds that they are within the "Oceanic Mist."',
    					unlock: 3,
    				},
    				{ desc: 'Enemies within the "Oceanic Mist" are unable to receive a majority of buffs from their allies, but shall retain all of the buffs they already have.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'athalia',
    		name: 'Athalia',
    		portrait: './img/portraits/athalia.jpg',
    		class: 'Ranger',
    		faction: 'Celestial',
    		type: 'Agility',
    		skills: [
    			{
    				name: 'Divine Fury',
    				image: './img/skills/athalia1.png',
    				desc: 'Athalia attacks her enemies with lightning speed and precision, slashing them <em>3</em> times from various positions on the battlefield. Each slash deals <em>160%</em> damage to all enemies in her path. The third slash has a <em>100%</em> critical strike chance.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Enemies that are struck more than once are dealt an additional <em>50%</em> damage.',
    						unlock: 81,
    					},
    					{ desc: 'Damage increased by up to <em>190%</em>.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Judgement',
    				image: './img/skills/athalia2.png',
    				desc: 'Athalia descends from the heavens onto the battlefield and targets the enemy directly opposite her, inflicting <em>280%</em> damage on them. Once the initial attack has finished, Athalia will stand and attack the targeted enemy normally. Enemies will not be able to regenerate Energy when attacked by this ability.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Damage increased by up to <em>290%</em>.',
    						unlock: 21,
    					},
    					{ desc: 'Targeted enemy cannot regenerate Energy from attacks for <em>5</em> seconds after initial attack.',
    						unlock: 101,
    					},
    					{ desc: 'Damage increased by up to <em>310%</em>.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Purging Frenzy',
    				image: './img/skills/athalia3.png',
    				desc: 'Athalia unleashes a multi-staged attack on the enemy nearest to her, with the final blow dealing <em>150%</em> damage to the target that also leaves them stunned for <em>2</em> seconds.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Stun effect lasts for up to <em>3</em> seconds.',
    						unlock: 121,
    					},
    					{ desc: 'Final attack damage increased to <em>170%</em> damage.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Protection',
    				image: './img/skills/athalia4.png',
    				desc: 'Athalia uses a divine aura that allows herself to mitigate <em>8%</em> of all received damage for every ally still alive on the battlefield.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Each living ally raises Athalia\'s damage by <em>3%</em>.',
    						unlock: 141,
    					},
    					{ desc: 'Each living ally raises Athalia\'s damage by <em>4%</em>.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 30,
    		sig_item: {
    			name: 'Bloodless',
    			image: './img/si/athalia.png',
    			desc: 'Defense Rating is increased by <em>4%</em> of the value of Athalia\'s Attack Rating.',
    			upgrades: [
    				{ desc: 'Defense Rating is increased by <em>9%</em> of the value of Athalia\'s Attack Rating.',
    					unlock: 10,
    				},
    				{ desc: 'Enemies that attack Athalia will begin to bleed out for <em>2</em> seconds (ability cannot be stacked). Enemies will lose health equal to <em>85%</em> of Athalia\'s Attack Rating per second and their Health Recovery Rate will be decreased by <em>70%</em>.',
    					unlock: 20,
    				},
    				{ desc: 'Enemies injured by Athalia will begin to bleed out for <em>2</em> seconds (ability cannot be stacked). Enemies will lose health equal to <em>85%</em> of Athalia\'s Attack Rating per second and their Health Recovery Rate will be decreased by <em>70%</em>.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 3,
    		furniture: {
    			name: 'Heaven\'s Justice',
    			image: './img/furniture/athalia.png',
    			upgrades: [
    				{ desc: 'Athalia strikes at her enemies every <em>15</em> seconds, utilizing the same damage and AoE range as her ability "Divine Fury" against them. After striking, the damage of Athalia\'s Normal Attacks is increased by <em>15%</em> until the end of battle. This ability can be stacked <em>2</em> times.',
    					unlock: 3,
    				},
    				{ desc: 'Athalia strikes at her enemies every <em>15</em> seconds, utilizing the same damage and AoE range as her ability "Divine Fury" against them. After striking, the damage of Athalia\'s Normal Attacks is increased by <em>20%</em> until the end of battle. This ability can be stacked <em>4</em> times.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'twins',
    		name: 'Elijah & Lailah',
    		portrait: './img/portraits/twins.jpg',
    		class: 'support',
    		faction: 'Celestial',
    		type: 'Intelligence',
    		skills: [
    			{
    				name: 'Hope',
    				image: './img/skills/twins1.png',
    				desc: 'Elijah and Lailah both fight independently but share the same health and Energy, they also possess an additional <em>35%</em> health. After activating this ability, Elijah and Lailah dance with one another, motivating all allied heroes, increasing their haste by <em>75</em> for <em>8</em> seconds. This ability cannot be used when Elijah is under the effects of enemy control abilities.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Ability removes all negative effects from all allied heroes and prevents them from being controlled by enemies for <em>4</em> seconds.',
    						unlock: 81,
    					},
    					{ desc: 'Haste increase persists for <em>10</em> seconds.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Grace',
    				image: './img/skills/twins2.png',
    				desc: 'Elijah restores <em>130%</em> of his weakest ally\'s health and Lailah restores the Energy of the ally with the highest remaining Energy by <em>40</em> points. This ability will prioritize frontline heroes first.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Elijah restores <em>140%</em> of his ally\'s health, Lailah restores <em>50</em> of her ally\'s Energy points.',
    						unlock: 21,
    					},
    					{ desc: 'Elijah restores <em>150%</em> of his ally\'s health, Lailah restores <em>60</em> of her ally\'s Energy points.',
    						unlock: 101,
    					},
    					{ desc: 'Elijah restores <em>160%</em> of his ally\'s health, Lailah restores <em>70</em> of her ally\'s Energy points.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Cleanse',
    				image: './img/skills/twins3.png',
    				desc: 'If Lailah is affected by an enemy control ability, Elijah will remove all negative effects from Lailah and create a shield around her equal to <em>280%</em> of their Attack Rating. When an enemy nears Elijah, Lailah will teleport to his location, attacking the enemy for <em>180%</em> damage, knocking them back in the process.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Value of shield cast by Elijah is increased to <em>320%</em>, Lailah\'s knockback effect stuns enemies for <em>2.5</em> seconds.',
    						unlock: 121,
    					},
    					{ desc: 'Value of shield cast by Elijah is increased to <em>360%</em>, Lailah\'s knockback effect stuns enemies for <em>4</em> seconds.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Unity',
    				image: './img/skills/twins4.png',
    				desc: 'The last two allies to be affected by Lailah and Elijah\'s "Grace" ability will form a union. In this state of union, the two heroes will both take <em>30%</em> of the damage that is inflicted upon the other, subsequently lessening the damage of the allied hero which is attacked.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Attack and Defense Ratings for the two heroes in a state of union are both increased by <em>20%</em> of the other union hero\'s own rating values.',
    						unlock: 141,
    					},
    					{ desc: 'Attack, defense, crit ratings, dodge, accuracy and life leech attributes are all increased by <em>15%</em> of the other union hero\'s own attribute values.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 20,
    		sig_item: {
    			name: 'Blessed Binding',
    			image: './img/si/twins.png',
    			desc: 'When Lailah and Elijah are in close proximity to one another, their Attack Rating will be increased by <em>5%</em>. When they are far apart from one another, their Defense Rating will be increased by <em>15%</em>.',
    			upgrades: [
    				{ desc: 'When Lailah and Elijah are in close proximity to one another, their Attack Rating will be increased by <em>10%</em>. When they are far apart from one another, their Defense Rating will be increased by <em>25%</em>.',
    					unlock: 10,
    				},
    				{ desc: 'When Elijah\'s Normal Attack deals a critical strike to an enemy, the affected enemy\'s damage towards Lailah will be reduced by <em>40%</em> for <em>6</em> seconds.',
    					unlock: 20,
    				},
    				{ desc: 'When Lailah\'s Normal Attack deals a critical strike to an enemy, any damage dealt to the affected enemy by Elijah will be increased by <em>100%</em> for <em>6</em> seconds.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 3,
    		furniture: {
    			name: 'Heaven\'s Grace',
    			image: './img/furniture/twins.png',
    			upgrades: [
    				{ desc: 'If Elijah or Lailah lose a combined amount of health equal to <em>70%</em> of their max health, they are granted a protective shield that is able to mitigate damage equal to <em>50%</em> of their max health for <em>6</em> seconds.',
    					unlock: 3,
    				},
    				{ desc: 'Shield duration increased to <em>15</em> seconds.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'flora',
    		name: 'Flora',
    		portrait: './img/portraits/flora.jpg',
    		class: 'Mage',
    		faction: 'Celestial',
    		type: 'Intelligence',
    		skills: [
    			{
    				name: 'Sea of Flowers',
    				image: './img/skills/flora1.png',
    				desc: 'Flora targets the most densely packed group of enemies and unleashes a sea of flowers which lasts for <em>12</em> seconds onto them, dealing <em>200%</em> AoE damage to the targets. Enemies that are within the sea of flowers lose <em>40%</em> worth of Flora\'s Attack Rating as health per second. Only <em>1</em> sea of flowers may be active at a time.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>220%</em>.',
    						unlock: 81,
    					},
    					{ desc: 'Damage is increased to <em>240%</em>.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Airborne',
    				image: './img/skills/flora2.png',
    				desc: 'Flora flies high into the air at the beginning of battles where she remains until all of her allies have perished, during which time she cannot be targeted by any enemies or allies. While in the air, Flora constantly releases magic dust down onto her enemies, dealing <em>110%</em> AoE damage to the targets.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>114%</em>.',
    						unlock: 21,
    					},
    					{ desc: 'Damage is increased to <em>118%</em>.',
    						unlock: 101,
    					},
    					{ desc: 'Damage is increased to <em>122%</em>.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Swoop',
    				image: './img/skills/flora3.png',
    				desc: 'Flora sacrifices <em>25%</em> of her current health in order to send her little bird swooping across the battlefield. Each enemy that is in the little bird\'s path is dealt an amount of damage equal to <em>55%</em> of the health that Flora sacrificed. This ability cannot be used when Flora\'s health falls below <em>60%</em>.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'After inflicting damage upon an enemy, the little bird grants each ally that it passes a protective shield which lasts for <em>5</em> seconds. The shield is able to mitigate an amount of damage equal to <em>65%</em> of the health that Flora sacrificed.',
    						unlock: 121,
    					},
    					{ desc: 'Damage dealt is equal to <em>60%</em> of the health value sacrificed by Flora.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Rejuvenation',
    				image: './img/skills/flora4.png',
    				desc: 'Flora is able to recover <em>0.6%</em> of her max health per second in battles while using this ability. Simultaneously, each time any non-summoned character (including enemies) recovers <em>10%</em> of their max health, Flora will also recover <em>3.5%</em> of that character\'s max health for herself.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Recovers <em>0.8%</em> of own max health per second.',
    						unlock: 141,
    					},
    					{ desc: 'Recovers <em>1%</em> of own max health per second.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 20,
    		sig_item: {
    			name: 'Diminish',
    			image: './img/si/flora.png',
    			desc: 'Reduces an enemy\'s Haste by <em>20</em> points for <em>4</em> seconds when the ability "Swoop" deals Critical Damage to an enemy.',
    			upgrades: [
    				{ desc: 'Reduces an enemy\'s Haste by <em>35</em> points for <em>4</em> seconds when the ability "Swoop" deals Critical Damage to an enemy.',
    					unlock: 10,
    				},
    				{ desc: 'When Flora\'s health is above <em>90%</em>, the cooldown time of her ability "Swoop" is reduced by <em>250%</em>.',
    					unlock: 20,
    				},
    				{ desc: 'Reduces an enemy\'s Haste by <em>50</em> points for <em>5</em> seconds when the ability "Swoop" deals Critical Damage to an enemy.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 3,
    		furniture: {
    			name: 'Floral Projection',
    			image: './img/furniture/flora.png',
    			upgrades: [
    				{ desc: 'Enemies within range of the ability "Sea of Flowers" ability lose <em>12</em> Haste points and allies within range of the "Sea of Flowers" gain <em>6</em> Haste points.',
    					unlock: 3,
    				},
    				{ desc: 'Enemies within range of the ability "Sea of Flowers" ability lose <em>12</em> Haste points and allies within range of the "Sea of Flowers" gain <em>24</em> Haste points.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'orthros',
    		name: 'Orthros',
    		portrait: './img/portraits/orthros.jpg',
    		class: 'Tank',
    		faction: 'Celestial',
    		type: 'Strength',
    		skills: [
    			{
    				name: 'Time Suspension',
    				image: './img/skills/orthros1.png',
    				desc: 'Orthros stops time for <em>3</em> seconds, causing everyone and everything but himself to become frozen. Orthros then attacks the weakest enemy on the battlefield at lightning speed, inflicting <em>60%</em> damage per attack on the enemy.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Damage increased by up to <em>70%</em>.',
    						unlock: 81,
    					},
    					{ desc: 'Damage increased by up to <em>80%</em>.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Time Trap',
    				image: './img/skills/orthros2.png',
    				desc: 'At the beginning of the battle, Orthros will set up a time trap that individually targets the <em>2</em> enemies that are currently closest to him. The time traps will then explode within the first <em>20</em> seconds of battle. Once a time trap is triggered it will cause <em>320%</em> AoE damage to nearby enemies, the time trap will also be triggered if an affected enemy dies.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Damage increased by up to <em>360%</em>.',
    						unlock: 21,
    					},
    					{ desc: 'Enemies injured by the explosion are stunned for <em>3</em> seconds.',
    						unlock: 101,
    					},
    					{ desc: 'Damage increased by up to <em>400%</em>.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Inertia',
    				image: './img/skills/orthros3.png',
    				desc: 'Deals <em>200%</em> damage to a single enemy target and prevents them from recovering Energy for the following <em>9</em> seconds.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Damage increased by up to <em>220%</em>.',
    						unlock: 121,
    					},
    					{ desc: 'Damage increased by up to <em>240%</em>.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Celestial Vigor',
    				image: './img/skills/orthros4.png',
    				desc: 'Orthros\' max health is increased by <em>25%</em> per second, up until it reaches <em>150%</em>. The ratio of Orthros\' current health will not be affected by the new increased max health value. Zolrath\'s "Déjà vu" ability will not affect this ability\'s cumulative time.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'After <em>15</em> seconds of battle, Orthros will recover <em>3%</em> of his max health per second.',
    						unlock: 141,
    					},
    					{ desc: 'After <em>30</em> seconds of battle, Orthros will become immune to control abilities.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 30,
    		sig_item: {
    			name: 'Time Warp',
    			image: './img/si/orthros.png',
    			desc: 'Reduces the Haste of enemies that get too close to Orthros by <em>30</em> points.',
    			upgrades: [
    				{ desc: 'Reduces the Haste of enemies that get too close to Orthros by <em>45</em> points.',
    					unlock: 10,
    				},
    				{ desc: 'Reduces the Haste of enemies that get too close to Orthros by <em>60</em> points.',
    					unlock: 20,
    				},
    				{ desc: 'Enemies that remain too close to Orthros for more than <em>6</em> seconds will become frozen in time for <em>3</em> seconds.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 9,
    		furniture: {
    			name: 'Time Management',
    			image: './img/furniture/orthros.png',
    			upgrades: [
    				{ desc: 'After using the ability "Time Suspension", the ally with the highest Attack Rating (excluding Orthros) is able to move normally on the battlefield.',
    					unlock: 3,
    				},
    				{ desc: 'After using the ability "Time Suspension", the ally with the highest Attack Rating (excluding Orthros) is able to move normally on the battlefield. Ally\'s Haste is increased by <em>35</em> while moving during "Time Suspension".',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'talene',
    		name: 'Talene',
    		portrait: './img/portraits/talene.jpg',
    		class: 'Support',
    		faction: 'Celestial',
    		type: 'Agility',
    		skills: [
    			{
    				name: 'Fire Born',
    				image: './img/skills/talene1.png',
    				desc: 'Talene goes into \'Phoenix\' form that lasts until death and converts <em>90%</em> of her current health into a permanent shield of equal value, plus an additional extra permanent shield on top that is equal to <em>20%</em> of her max health. Talene\'s Normal Attacks will turn into close-range area attacks that deal <em>150%</em> damage while in Phoenix form.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'When in \Phoenix Form\', Talene\'s Normal Attacks shall deal additional damage that is equal to <em>20%</em> of the remaining shield values produced by her shield abilities.',
    						unlock: 81,
    					},
    					{ desc: 'Additional shield is equal to <em>25%</em> of Talene\'s max health.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Meteor Shower',
    				image: './img/skills/talene2.png',
    				desc: 'Talene calls down a fiery meteorite that deals <em>200%</em> damage to a single enemy target. When Talene is in Phoenix form, meteorites will continually fall randomly every <em>0.5</em> seconds upon random enemy targets for a certain duration of time.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Damage increased to <em>240%</em>.',
    						unlock: 21,
    					},
    					{ desc: '<em>30%</em> of damage is converted into health.',
    						unlock: 101,
    					},
    					{ desc: 'Damage is increased to <em>280%</em>.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Phoenix Rising',
    				image: './img/skills/talene3.png',
    				desc: 'Every time Talene dies she transforms into a fireball. While in this state, Talene recovers <em>7%</em> of her max health every second and cannot be targeted by her enemies but will still receive the positive effects of her allies\' abilities. Once Talene\'s health reaches <em>50%</em>, she is reborn, resulting in a brilliant explosion that deals <em>200%</em> area damage to enemies. Talene\'s Recovery Rate is reduced by <em>20%</em> every subsequent time that she transforms into a fireball.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Damage increased to <em>250%</em>.',
    						unlock: 121,
    					},
    					{ desc: 'Damage increased to <em>300%</em>.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Afterglow',
    				image: './img/skills/talene4.png',
    				desc: 'A passive ability that allows for Talene\'s <em>2</em> weakest allies to respectively recover <em>150%</em> of Talene\'s Attack Rating as health each time Talene cumulatively loses <em>10%</em> of her max health.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Health recovery increased by up to <em>200%</em> of Attack Rating.',
    						unlock: 141,
    					},
    					{ desc: 'Health recovery increased by up to <em>250%</em> of Attack Rating.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 30,
    		sig_item: {
    			name: 'Resurgence',
    			image: './img/si/talene.png',
    			desc: 'Talene\'s Attack Rating is increased by <em>10%</em> and her Defense Rating is increased by <em>20%</em> every time she is reborn using her "Phoenix Rising" ability.',
    			upgrades: [
    				{ desc: 'Talene\'s Attack Rating is increased by <em>20%</em> and her Defense Rating is increased by <em>40%</em> every time she is reborn using her "Phoenix Rising" ability.',
    					unlock: 10,
    				},
    				{ desc: 'Talene immediately recovers <em>120</em> Energy points each time she is reborn.',
    					unlock: 20,
    				},
    				{ desc: 'Talene immediately recovers <em>400</em> Energy points each time she is reborn.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 9,
    		furniture: {
    			name: 'Burning Sun',
    			image: './img/furniture/talene.png',
    			upgrades: [
    				{ desc: 'Talene deals <em>110%</em> AoE damage per second to nearby enemies while in her "Fireball" state. <em>60%</em> of the damage dealt to enemies is converted into Talene\'s health.',
    					unlock: 3,
    				},
    				{ desc: 'When there are any allies on the battlefield with a lower percentage of health than that of Talene\'s own, she actively converts <em>15%</em> of her current health into a permanent shield of equal value for herself. If the value converted exceeds <em>10%</em> of Talene\'s max health, a meteorite with the same effect as the ability "Meteor Shower" will be summoned against a random enemy. This ability can only be triggered once every <em>5</em> seconds.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'wukong',
    		name: 'Wu Kong',
    		portrait: './img/portraits/wukong.jpg',
    		class: 'Warrior',
    		faction: 'Celestial',
    		type: 'Strength',
    		skills: [
    			{
    				name: 'Cloud Clones',
    				image: './img/skills/wukong1.png',
    				desc: 'Wu Kong disappears from the battlefield after summoning <em>3</em> clones of himself. Once all the clones have disappeared from the battlefield, the original Wu Kong will return to it. Cloud clones are able to use Wu Kong\'s "Bludgeon" ability as well as his Normal Attacks. Clones possess <em>90%</em> of the original Wu Kong\'s stats, however, they will receive <em>220%</em> damage dealt from enemy attacks.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Clones receive <em>200%</em> damage.',
    						unlock: 81,
    					},
    					{ desc: 'Clones receive <em>180%</em> damage.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Bludgeon',
    				image: './img/skills/wukong2.png',
    				desc: 'Wu Kong uses his rod to bludgeon his enemies, dealing <em>180%</em> area damage to them. This ability also deals additional damage that is equal to <em>8%</em> of his enemies\' current health value. When there are no enemies nearby, Wu Kong will travel towards his enemies upon his cloud and proceed to attack them when within range.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Damage increased to <em>200%</em>.',
    						unlock: 21,
    					},
    					{ desc: 'This ability cannot be dodged.',
    						unlock: 101,
    					},
    					{ desc: 'Damage increased to <em>220%</em>.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Falling Fury',
    				image: './img/skills/wukong3.png',
    				desc: 'Wu Kong throws his rod into the air so that it falls down upon the most densely concentrated area of enemies on the battlefield, dealing <em>270%</em> area damage to them. Enemies that were successfully struck by the rodwill lose <em>100</em> Haste points for <em>8</em> seconds.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Damage increased to <em>300%</em>.',
    						unlock: 121,
    					},
    					{ desc: 'Damage increased to <em>330%</em>.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Foresight',
    				image: './img/skills/wukong4.png',
    				desc: 'Wu Kong is able to predict when his enemies will use control effects against him and will momentarily disappear from the battlefield to evade the attack and summon a cloud clone in his original position. The summoned clone shares the same attributes as Wu Kong\'s "Cloud Clones" and can be summoned once every <em>11</em> seconds.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Ability is activated every <em>10</em> seconds.',
    						unlock: 141,
    					},
    					{ desc: 'Ability is activated every <em>9</em> seconds.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 20,
    		sig_item: {
    			name: 'Golden Barrier',
    			image: './img/si/wukong.png',
    			desc: 'Wu Kong gains a 2-layer protective barrier at the start of battles. If Wu Kong is dealt damage that exceeds <em>10%</em> of his max health he will lose <em>1</em> layer of his protective barriers without suffering any damage at all.',
    			upgrades: [
    				{ desc: 'Gains a 4-layer protective barrier at the start of battles.',
    					unlock: 10,
    				},
    				{ desc: 'Wu Kong\'s clones now possess a 1-layer protective barrier.',
    					unlock: 20,
    				},
    				{ desc: 'Regains <em>3</em> protective barriers each time his ultimate ability is used.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 9,
    		furniture: {
    			name: 'Warrior\'s Meditation',
    			image: './img/furniture/wukong.png',
    			upgrades: [
    				{ desc: 'Wu Kong recovers <em>60</em> Energy points per second when he is absent from the battlefield as a result of his "Cloud Clones" ability. This ability no longer regenerates Energy when Wu Kong\'s Energy reaches or exceeds <em>600</em> points.',
    					unlock: 3,
    				},
    				{ desc: 'Wu Kong recovers <em>3%</em> of his max health per second while absent from the battlefield as a result of his "Cloud Clones" ability.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'zaphrael',
    		name: 'Zaphrael',
    		portrait: './img/portraits/zaphrael.jpg',
    		class: 'Mage',
    		faction: 'Celestial',
    		type: 'Intelligence',
    		skills: [
    			{
    				name: 'Lightning Purge',
    				image: './img/skills/zaphrael1.png',
    				desc: 'Zaphrael teleports to the side of the battlefield which has the most enemies on it and fires <em>7</em> powerful bolts of lightning across the battlefield, dealing <em>180%</em> damage per lightning bolt to each enemy that the bolts strike.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>190%</em>.',
    						unlock: 81,
    					},
    					{ desc: 'Damage is increased to <em>200%</em>.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Thunderstorm',
    				image: './img/skills/zaphrael2.png',
    				desc: 'Zaphrael summons a thundercloud that exists for <em>18</em> seconds which strikes the enemy target nearest to Zaphrael every <em>4</em> seconds, dealing <em>150%</em> damage to them and also causing them to be temporarily stunned.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>160%</em>.',
    						unlock: 21,
    					},
    					{ desc: 'The thundercloud deals additional damage equal to <em>5%</em> of the enemy target\'s max health (additional damage cannot exceed <em>200%</em> of Zaphrael\'s Attack Rating).',
    						unlock: 101,
    					},
    					{ desc: 'Damage is increased to <em>170%</em>.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Lightning Arc',
    				image: './img/skills/zaphrael3.png',
    				desc: 'Zaphrael teleports behind the enemy that is closest to his allies\' side of the battlefield and knocks them to the ground, dealing <em>230%</em> AoE damage to the target and nearby enemies. Simultaneously, Zaphrael receives a shield that is able to mitigate damage equal to <em>500%</em> of his own Attack Rating, which has duration of <em>8</em> seconds. While the shield exists, Zaphrael uses melee attacks and once the shield disappears, Zaphrael shall immediately return to his original position.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Value of the shield is increased to <em>700%</em> of Attack Rating value.',
    						unlock: 121,
    					},
    					{ desc: 'Damage is increased to <em>250%</em>.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Static Charge',
    				image: './img/skills/zaphrael4.png',
    				desc: 'During battle, enemies damaged by Zaphrael will be electrified for <em>10</em> seconds. When electrified enemies are dealt damage that exceeds <em>12%</em> of their max health, the electric shall be transferred to the next closest enemy, causing the nearby enemy to lose health that is equal to <em>30%</em> of the initial attack\'s damage.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Electric transfer now occurs when damage exceeds <em>10%</em> of the enemy\'s max health.',
    						unlock: 141,
    					},
    					{ desc: 'Enemy that is affected by transferred electric loses health equal to <em>50%</em> of the initial attack\'s damage.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 0,
    		sig_item: {
    			name: 'Zeal',
    			image: './img/si/zaphrael.png',
    			desc: 'After using the ability "Lightning Arc" Zaphrael\'s Normal Melee Attacks become even more powerful, dealing <em>60%</em> damage <em>9</em> times to the enemy, also interrupting their current action.',
    			upgrades: [
    				{ desc: 'Damage is increased to <em>70%</em>.',
    					unlock: 10,
    				},
    				{ desc: 'Damage is increased to <em>80%</em>.',
    					unlock: 20,
    				},
    				{ desc: 'The ability "Thunderstorm" targets an additional <em>1</em> enemy targets.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 9,
    		furniture: {
    			name: 'Divine Intervention',
    			image: './img/furniture/zaphrael.png',
    			upgrades: [
    				{ desc: 'When an enemy deals damage to Zaphrael they are stunned for <em>0.5</em> seconds. Stunned enemies cannot be stunned again for <em>8</em> seconds. This ability shall still stun its target even if its damage was completely mitigated by the enemy.',
    					unlock: 3,
    				},
    				{ desc: 'When an enemy deals damage to Zaphrael they are stunned for <em>2</em> seconds. Stunned enemies cannot be stunned again for <em>8</em> seconds. This ability shall still stun its target even if its damage was completely mitigated by the enemy.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'alna',
    		name: 'Alna',
    		portrait: './img/portraits/alna.jpg',
    		class: 'Warrior',
    		faction: 'Celestial',
    		type: 'Agility',
    		skills: [
    			{
    				name: 'Winter War Cry',
    				image: './img/skills/alna1.png',
    				desc: 'Passive: All characters on the battle (including allies) have their Haste reduced by <em>40</em> points.<br><br>Active: Alna calls down a blizzard upon all enemies, dealing <em>340%</em> damage to them, causing any Haste reductions to be multiplied by <em>2</em> times over <em>12</em> seconds, also nullifying any Haste buffs that are received during this time. The effects of this ability cannot be affected by any other abilities.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>360%</em>.',
    						unlock: 81,
    					},
    					{ desc: 'Damage is increased to <em>380%</em>.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Freezing Pierce',
    				image: './img/skills/alna2.png',
    				desc: 'Alna thrusts her spear into an enemy target, dealing damage equal to <em>10%</em> of their max health. Damage dealt cannot exceed <em>520%</em> of Alna\'s own Attack Rating.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Damage dealt is increased by <em>1%</em> of the enemy\'s max health whenever their Haste is reduced by <em>3</em> points.',
    						unlock: 21,
    					},
    					{ desc: 'Damage dealt is equal to <em>12%</em> of the enemy\'s max health.',
    						unlock: 101,
    					},
    					{ desc: 'Damage dealt is equal to <em>14%</em> of the enemy\'s max health.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Winter\'s Call',
    				image: './img/skills/alna3.png',
    				desc: 'Alna calls upon the frigid wind to encircle herself and disrupt her enemies. Alna is immune to damage and control abilities for <em>7</em> seconds and nearby enemies will have their Dodge reduced by <em>280</em> points.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Effects last for <em>8</em> seconds.',
    						unlock: 121,
    					},
    					{ desc: 'Effects last for <em>9</em> seconds.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Frozen Fury',
    				image: './img/skills/alna4.png',
    				desc: 'Alna uses her spear to swipe at nearby enemies, dealing <em>200%</em> damage to them, also reducing their Haste by <em>20</em> points for <em>5</em> seconds. Each use of this ability increases the number of attacks that are dealt, up until a maximum of <em>3</em> attacks are reached. This ability\'s Haste reduction effect may be stacked multiple times.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>220%</em>.',
    						unlock: 141,
    					},
    					{ desc: 'Damage is increased to <em>250%</em>.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 30,
    		sig_item: {
    			name: 'Unrelenting Heart',
    			image: './img/si/alna.png',
    			desc: 'During battles, when Alna suffers damage, she gradually recovers <em>50%</em> of the health which was lost over the next <em>15</em> seconds.',
    			upgrades: [
    				{ desc: 'During battles, when Alna suffers damage, she gradually recovers <em>70%</em> of the health which was lost over the next <em>15</em> seconds.',
    					unlock: 10,
    				},
    				{ desc: 'During battles, when Alna suffers damage, she gradually recovers <em>70%</em> of the health which was lost over the next <em>10</em> seconds.',
    					unlock: 20,
    				},
    				{ desc: 'When Alna\'s health drops below <em>50%</em> for the first time, the effects of "Winter\'s Call" are triggered.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 9,
    		furniture: {
    			name: 'Army of Two',
    			image: './img/furniture/alna.png',
    			upgrades: [
    				{ desc: 'When placed on the frontline, damage dealt by the other frontline ally causes enemy targets to lose <em>5</em> Haste points for <em>30</em> seconds. This ability cannot be stacked.',
    					unlock: 3,
    				},
    				{ desc: 'When placed on the frontline, the effects of the ability "Winter\'s Call" also take effect for her other frontline ally.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'morael',
    		name: 'Morael',
    		portrait: './img/portraits/morael.jpg',
    		class: 'Mage',
    		faction: 'Celestial',
    		type: 'Intelligence',
    		skills: [
    			{
    				name: 'Cosmic Field',
    				image: './img/skills/morael1.png',
    				desc: 'At the start of battles Morael creates a Star Core which remains on the battlefield. When Morael uses her Ultimate ability, a Cosmic Field is generated for <em>6</em> seconds by the Star Core, which traps any nearby enemies. While the Cosmic Field exists, Morael deals <em>120%</em> damage per second to all enemies trapped by it. If an enemy escapes the Cosmic Field, Morael will deal <em>320%</em> damage to them, also stunning them for <em>3</em> seconds.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Cosmic Field exists for <em>7</em> seconds.',
    						unlock: 81,
    					},
    					{ desc: 'Cosmic Field exists for <em>8</em> seconds.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Cosmic Motion',
    				image: './img/skills/morael2.png',
    				desc: 'Morael commands her Star Core to move to the most densely concentrated area of enemies, which deals <em>60%</em> damage to any enemies that are in its way.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>65%</em>.',
    						unlock: 21,
    					},
    					{ desc: 'Damage is increased to <em>70%</em>.',
    						unlock: 101,
    					},
    					{ desc: 'Damage is increased to <em>75%</em>.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Cosmic Fusion',
    				image: './img/skills/morael3.png',
    				desc: 'Morael charges her Star Core with cosmic power, causing it to explode, dealing <em>240%</em> damage to nearby enemies.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>260%</em>.',
    						unlock: 121,
    					},
    					{ desc: 'Damage is increased to <em>280%</em>.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Celestial Blessing',
    				image: './img/skills/morael4.png',
    				desc: 'During battle, the Star Core gathers cosmic energy over time from the galaxy. Once the Star Core has finished gathering energy, it respectively transfers <em>120</em> Energy points to Morael and all allies close to it, which consequently exhausts all of the Star Core\'s energy. The Star Core is able to gather <em>10%</em> of its total energy capacity per second.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'The Star Core respectively transfers <em>160</em> Energy points to Morael and her allies.',
    						unlock: 141,
    					},
    					{ desc: 'Transferring energy also grants Morael and her allies a shield, which has a value equal to <em>180%</em> of Morael\'s Attack Rating, that exists for <em>6</em> seconds.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 20,
    		sig_item: {
    			name: 'Astral Fortune',
    			image: './img/si/morael.png',
    			desc: 'During battles, each time an enemy hero near the Star Core loses <em>1%</em> health, the Star Core gathers an extra <em>0.4%</em> of its total energy capacity.',
    			upgrades: [
    				{ desc: 'When the Star Core is transferring Energy to Morael and her allies, it will also raise their Attack Ratings by <em>20%</em> for <em>5</em> seconds.',
    					unlock: 10,
    				},
    				{ desc: 'When the Star Core is transferring Energy to Morael and her allies, it will also raise their Haste by <em>30</em> points for <em>5</em> seconds.',
    					unlock: 20,
    				},
    				{ desc: 'During battles, each time an enemy hero near the Star Core loses <em>1%</em> health, the Star Core gathers an extra <em>0.6%</em> of its total energy capacity.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 9,
    		furniture: {
    			name: 'Cosmic Attraction',
    			image: './img/furniture/morael.png',
    			upgrades: [
    				{ desc: 'If an enemy walks into the Star Core\'s Cosmic Field after it has already been created by Morael\'s Ultimate ability, they shall also become trapped. If an enemy leaves the Cosmic Field and is later trapped by it again, the damage dealt this time is reduced by <em>20%</em>.',
    					unlock: 3,
    				},
    				{ desc: 'While the Cosmic Field exists, all enemies on the battlefield are pulled towards the Star Core at a certain speed due to its gravitational force.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'titus',
    		name: 'Titus',
    		portrait: './img/portraits/titus.jpg',
    		class: 'Tank',
    		faction: 'Celestial',
    		type: 'Strength',
    		skills: [
    			{
    				name: 'Temple Guardian',
    				image: './img/skills/titus1.png',
    				desc: 'Passive: Titus is immune to control effects throughout battles and receives <em>35%</em> less damage. At the start of battle, Titus enters a dormant state until his Ultimate ability is activated. While in an active state, Titus expends <em>50</em> Energy Points per second, and his Energy Recovery is reduced by <em>60%</em> and his Attack Rating is increased by <em>20%</em>. Each Normal Attack expends <em>25</em> Energy Points and deals <em>150%</em> AoE damage. Once all of Titus\' Energy has been exhausted, he re-enters a dormant state.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Once activated, Titus deals one attack to inflict <em>300%</em> damage on all enemies, simultaneously stunning them for <em>2</em> seconds.',
    						unlock: 81,
    					},
    					{ desc: 'Once activated, Titus deals one attack to inflict <em>350%</em> damage on all enemies, simultaneously stunning them for <em>2</em> seconds.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Energy Absorption',
    				image: './img/skills/titus2.png',
    				desc: 'Excluding Titus and summoned targets, whenever each target on the battlefield respectively receives damage (including damage received by shields) equal to <em>8%</em> of their max health, the target will produce an Energy Orb which Titus absorbs, allowing him to recover <em>80</em> Energy Points. Each character may only produce an Energy Orb once every <em>1</em> seconds.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'After absorbing <em>4</em> Energy Orbs from Strength based heroes, the percentage of damage that Titus receives is reduced by <em>15%</em>.',
    						unlock: 21,
    					},
    					{ desc: 'After absorbing <em>4</em> Energy Orbs from Agility based heroes, Titus\' Crit Rating is increased by <em>30%</em>.',
    						unlock: 101,
    					},
    					{ desc: 'After absorbing <em>4</em> Energy Orbs from Intelligence based heroes, Titus recovers <em>20%</em> of his max health. This effect can only be triggered once.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Spiral',
    				image: './img/skills/titus3.png',
    				desc: 'Titus continuously spins both arms in a spiral motion, dealing <em>170%</em> damage every <em>0.5</em> seconds to nearby enemies, also knocking them backwards. While spinning, Titus consumes an additional <em>75</em> Energy Points per seconds. Before Titus\' Energy is exhausted, he will spin for at least <em>2</em> seconds. Once Titus\' Energy drops below <em>400</em> points, he will stop spinning.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>200%</em>.',
    						unlock: 121,
    					},
    					{ desc: 'Damage is increased to <em>220%</em>.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Guardian Shield',
    				image: './img/skills/titus4.png',
    				desc: 'At the start of battles, while in a dormant state, Titus deploys a defensive shield that exists for <em>7</em> seconds which is able to mitigate damage equal to <em>1200%</em> of Titus\' own Attack Rating for himself and his allies, during which time Titus is unable to use his Ultimate ability.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Mitigates damage equal to <em>1500%</em> of Titus\' Attack Rating.',
    						unlock: 141,
    					},
    					{ desc: 'Mitigates damage equal to <em>1800%</em> of Titus\' Attack Rating.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 30,
    		sig_item: {
    			name: 'Final Aegis',
    			image: './img/si/titus.png',
    			desc: 'When <em>3</em> or more Energy Orbs have been respectively absorbed from Strength, Agility, and Intelligence based heroes, the ability "Final Aegis" is unlocked. When this ability is used, all enemies within a certain range shall be dealt <em>250%</em> damage. The ability has a cooldown time of <em>8</em> seconds.',
    			upgrades: [
    				{ desc: 'Damage is increased to <em>280%</em>',
    					unlock: 10,
    				},
    				{ desc: 'Damage is increased to <em>300%</em>',
    					unlock: 20,
    				},
    				{ desc: 'Damage is increased to <em>350%</em>. Ability\'s cooldown time is reduced to <em>6</em> seconds.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 9,
    		furniture: {
    			name: 'Titan Surge',
    			image: './img/furniture/titus.png',
    			upgrades: [
    				{ desc: 'When Titus goes from an active state into a dormant state, he recovers <em>150</em> Energy Points every second for the following <em>5</em> seconds.',
    					unlock: 3,
    				},
    				{ desc: 'When Titus goes from an active state into a dormant state, he recovers <em>8%</em> of his max health every second for the following <em>5</em> seconds.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'ezizh',
    		name: 'Ezizh',
    		portrait: './img/portraits/ezizh.jpg',
    		class: 'Support',
    		faction: 'Hypogean',
    		type: 'Strength',
    		skills: [
    			{
    				name: 'Fissure',
    				image: './img/skills/ezizh1.png',
    				desc: 'Ezizh causes an explosion that deals <em>180%</em> damage to any surrounding enemies. The explosion causes part of the ground to burn, damaging any enemies standing upon it for <em>5</em> seconds.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Reduces the Attack Ratings of enemies standing on the burning ground by <em>40%</em>.',
    						unlock: 81,
    					},
    					{ desc: 'Damage increased to <em>220%</em>.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Feeble Mind',
    				image: './img/skills/ezizh2.png',
    				desc: 'Ezizh mind controls the enemy farthest away from himself, causing them to walk towards him, also rendering the enemy unable to attack. Once in front of Ezizh, the enemy is dealt <em>210%</em> damage and knocked into the air.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Damage increased to <em>220%</em>.',
    						unlock: 21,
    					},
    					{ desc: 'Enemy\'s Attack Rating is reduced by <em>30%</em> for <em>5</em> seconds after being dealt damage.',
    						unlock: 101,
    					},
    					{ desc: 'Damage increased to <em>230%</em>.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Horrify',
    				image: './img/skills/ezizh3.png',
    				desc: 'Ezizh launches an ungodly shockwave towards all of his enemies that inflicts <em>160%</em> damage upon them, rendering them unable to cast their ultimate abilities for <em>3</em> seconds.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Prevents enemies using ultimate abilities for <em>2</em> seconds every time one of Ezizh\'s teammates uses an ultimate ability.',
    						unlock: 121,
    					},
    					{ desc: 'Damage increased to <em>180%</em>.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Mental Fury',
    				image: './img/skills/ezizh4.png',
    				desc: 'Ezizh enrages his teammates, allowing them to to regain <em>40</em> Energy points every <em>3</em> seconds.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Ezizh\'s teammates are able to regain Energy after his death, however the effect\'s efficiency is reduced by <em>30%</em>.',
    						unlock: 141,
    					},
    					{ desc: 'Allies recover <em>50</em> Energy points every <em>3</em> seconds.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 20,
    		sig_item: {
    			name: 'Immolate',
    			image: './img/si/ezizh.png',
    			desc: 'Enemies with less than <em>30%</em> health will be stunned for a short period of time.',
    			upgrades: [
    				{ desc: 'Ezizh\'s fire lasts for <em>1</em> second and raises the damage by <em>15%</em>.',
    					unlock: 10,
    				},
    				{ desc: 'Ezizh\'s fire lasts for <em>1</em> second and raises the damage by <em>20%</em>.',
    					unlock: 20,
    				},
    				{ desc: 'Increases the duration the ground burns for by <em>100%</em>. However only <em>1</em> location can be burned at a time.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 9,
    		furniture: {
    			name: 'Mind Focus',
    			image: './img/furniture/ezizh.png',
    			upgrades: [
    				{ desc: 'While using the ability "Feeble Mind", Ezizh receives <em>60%</em> less damage from enemy attacks and cannot be controlled by enemies.',
    					unlock: 3,
    				},
    				{ desc: 'The ability "Feeble Mind" simultaneously causes both the farthest frontline and backline enemies to fall under Ezizh\'s control. While under Ezizh\'s control, the affected enemies will walk towards Ezizh for several seconds and be unable to attack, but only the farthest enemy of the two will be dealt damage.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'mehira',
    		name: 'Mehira',
    		portrait: './img/portraits/mehira.jpg',
    		class: 'Mage',
    		faction: 'Hypogean',
    		type: 'Intelligence',
    		skills: [
    			{
    				name: 'Mesmerize',
    				image: './img/skills/mehira1.png',
    				desc: 'Mehira entrances an enemy heroes which causes them to start attacking each other with their Normal Attacks for <em>4</em> seconds.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'While entranced, enemies will not recover Energy when attacked.',
    						unlock: 81,
    					},
    					{ desc: 'Duration is extended up to <em>5</em> seconds.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Whiplash',
    				image: './img/skills/mehira2.png',
    				desc: 'Mehira uses her whip to deal <em>120%</em> AoE damage to everyone in front of her, including allies. If this ability inflicts damage upon any of her allies, they will recover <em>65</em> Energy and their Haste will be increased by <em>40%</em> for <em>8</em> seconds.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>125%</em>.',
    						unlock: 21,
    					},
    					{ desc: '<em>50%</em> of the damage inflicted by this ability is converted into health for Mehira.',
    						unlock: 101,
    					},
    					{ desc: 'Damage is increased to <em>130%</em>.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Infatuation',
    				image: './img/skills/mehira3.png',
    				desc: 'Deals <em>60%</em> damage to a single enemy target and reduces the damage Mehira may receive from the enemy target by <em>40%</em> for <em>10</em> seconds. Simultaneously, Mehira will leech <em>3%</em> of the enemy\'s current health to restore her own.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Duration is extended up to <em>12</em> seconds.',
    						unlock: 121,
    					},
    					{ desc: 'Damage is increased to <em>80%</em>.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Hellspawn',
    				image: './img/skills/mehira4.png',
    				desc: 'At the beginning of battles Mehira will sacrifice <em>60%</em> of her current health to summon <em>3</em> minions which will automatically attack her enemies for <em>65%</em> damage. After returning from an attack the minions will convert <em>30%</em> of the damage they have inflicted upon their enemies back to Mehira as health and if Mehira receives any fatal damage she will sacrifice a minion in order to restore <em>25%</em> of her maximum health.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>70%</em>.',
    						unlock: 141,
    					},
    					{ desc: 'Damage is increased to <em>75%</em>.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 30,
    		sig_item: {
    			name: 'Carnal Bliss',
    			image: './img/si/mehira.png',
    			desc: 'When any non-summoned allies lose health, <em>10%</em> of the health lost will be given to Mehira.',
    			upgrades: [
    				{ desc: 'When other teammates lose health, <em>15%</em> of the health lost will be given to Mehira.',
    					unlock: 10,
    				},
    				{ desc: 'When other teammates lose health, <em>20%</em> of the health lost will be given to Mehira.',
    					unlock: 20,
    				},
    				{ desc: 'If at full health, any excess healing abilities or effects that Mehira receives will be converted into Energy.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 0,
    		furniture: {
    			name: 'Vicious Friends',
    			image: './img/furniture/mehira.png',
    			upgrades: [
    				{ desc: 'Minions summoned by the "Hellspawn" ability grow larger after they initiated <em>8</em> attacks. After growing larger, the minions\' damage is increased by <em>100%</em> and when sacrificed by Mehira, the amount of health she regains from them is increased by <em>80%</em>.',
    					unlock: 3,
    				},
    				{ desc: 'Minions grow larger after initiating <em>4</em> attacks.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'zolrath',
    		name: 'Zolrath',
    		portrait: './img/portraits/zolrath.jpg',
    		class: 'Warrior',
    		faction: 'Hypogean',
    		type: 'Agility',
    		skills: [
    			{
    				name: 'Time Rift',
    				image: './img/skills/zolrath1.png',
    				desc: 'Zolrath expends <em>200</em> Energy to open a time rift. Once inside the time rift, Zolrath will continuously lose <em>120</em> Energy points per second while he recovers <em>7.5%</em> of his max health. When Zolrath\'s Energy is exhausted, his health is fully recovered or the ability is used again, Zolrath will reappear from the time rift and attack the weakest enemy target for <em>360%</em> damage. This ability may be used even if Zolrath is being controlled by an enemy ability.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Zolrath ignores fatal damage the first time it is dealt to him and immediately uses his ultimate ability, ignoring its Energy requirement.',
    						unlock: 81,
    					},
    					{ desc: 'Ability restores <em>9%</em> of max health per second.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Doppelganger',
    				image: './img/skills/zolrath2.png',
    				desc: 'Zolrath and his future self deal <em>50%</em> damage multiple times to an enemy. The final <em>2</em> attacks on the enemy deal <em>180%</em> damage each to any enemy in the attack\'s path. While using this ability the two Zolrath\'s cannot be controlled, however both can receive damage.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Damage of final <em>2</em> attacks is increased up to <em>200%</em> each.',
    						unlock: 21,
    					},
    					{ desc: 'Damage of final <em>2</em> attacks is increased up to <em>230%</em> each.',
    						unlock: 101,
    					},
    					{ desc: 'Damage of final <em>2</em> attacks is increased up to <em>250%</em> each.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Annihilate',
    				image: './img/skills/zolrath3.png',
    				desc: 'After <em>18</em> seconds Zolrath\'s Normal Attack becomes more powerful, allowing his Normal Attack to deal <em>150%</em> damage twice per attack.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'After <em>45</em> seconds Zolrath\'s Normal Attack becomes more powerful, allowing him to strike at surrounding enemies in a three-stage attack for <em>230%</em> damage per attack. Zolrath\'s first <em>2</em> attacks are able to knock-back enemies, with the final attack causing the enemy to become temporarily stunned.',
    						unlock: 121,
    					},
    					{ desc: 'Zolrath\'s Attack Rating increases by <em>1%</em> per second until it reaches <em>70%</em>.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Déjà vu',
    				image: './img/skills/zolrath4.png',
    				desc: 'When Zolrath is on the brink of death and all of his allies are already dead, Zolrath will turn back time, causing the battle to be reverted back to its start. Zolrath will maintain the effects of his "Annihilate" ability even after the battle has been reverted. This ability may only be used once per battle and can only be used in certain game modes.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'From the start of the battle, Zolrath steals <em>15%</em> of his non-summoned allies\' Defense Ratings to strengthen himself, up until the ability is used or the battle ends, from which point the attributes are returned to his allies.',
    						unlock: 141,
    					},
    					{ desc: 'After time has been turned back, Zolrath\'s Haste will be increased by <em>40</em> points for the first <em>12</em> seconds.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 30,
    		sig_item: {
    			name: 'Prey',
    			image: './img/si/zolrath.png',
    			desc: 'Damage dealt to enemies with a lower health percentage than Zolrath is increased by <em>10%</em>.',
    			upgrades: [
    				{ desc: 'Damage dealt to enemies with a lower health percentage than Zolrath is increased by <em>25%</em>.',
    					unlock: 10,
    				},
    				{ desc: 'Damage dealt to enemies with a lower health percentage than Zolrath is increased by <em>40%</em>.',
    					unlock: 20,
    				},
    				{ desc: 'Damage ignores Defense Rating and damage immunity effect of enemies that have less than <em>40%</em> of their max health.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 9,
    		furniture: {
    			name: 'Postponement',
    			image: './img/furniture/zolrath.png',
    			upgrades: [
    				{ desc: 'Zolrath delays his enemies\' entrance onto the battlefield by <em>0.75</em> seconds and the time prerequisite for his ability "Annihilate" is reduced by <em>3.75</em> seconds when this ability is used.',
    					unlock: 3,
    				},
    				{ desc: 'The frequency of Zolrath\'s Normal Attacks are increased by <em>50%</em> after using the ability "Annihilate" for a total of <em>65</em> seconds.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'khazard',
    		name: 'Khazard',
    		portrait: './img/portraits/khazard.jpg',
    		class: 'Mage',
    		faction: 'Hypogean',
    		type: 'Intelligence',
    		skills: [
    			{
    				name: 'Frozen Mist',
    				image: './img/skills/khazard1.png',
    				desc: 'Khazard explodes, dealing an initial <em>130%</em> damage to all enemies on the battlefield, causing the battlefield to become enveloped in a "Frozen Mist" for <em>14</em> seconds. While the frozen mist is present, enemies will suffer <em>45%</em> damage per second and enemies with health lower than <em>30%</em> will become frozen until the are able to recover <em>30%</em> of their health or the mist disappears.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Enemies\' Health Recovery Rates are reduced by <em>70%</em> when "Frozen Mist" has enveloped the battlefield.',
    						unlock: 81,
    					},
    					{ desc: 'Duration of "Frozen Mist" ability effects are increased to <em>16</em> seconds.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Glacial Shards',
    				image: './img/skills/khazard2.png',
    				desc: 'Khazard fires <em>3</em> "Glacial Shards" in multiple directions. Each glacial shard deals <em>150%</em> damage to the enemies which are struck, also causing them to lose <em>50</em> Haste points for <em>4</em> seconds. Any enemies that are struck by multiple ice shards will be dealt <em>50%</em> less damage by subsequent shards after the second glacial shard.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>170%</em>.',
    						unlock: 21,
    					},
    					{ desc: 'Fires <em>5</em> Glacial Shards.',
    						unlock: 101,
    					},
    					{ desc: 'Fires <em>7</em> Glacial Shards.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Frozen Beam',
    				image: './img/skills/khazard3.png',
    				desc: 'Khazard fires an icy beam at an enemy which deals <em>220%</em> damage to them and causes them to become frozen for <em>3</em> seconds.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>250%</em>.',
    						unlock: 121,
    					},
    					{ desc: 'Damage is increased to <em>270%</em>.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Frost Serpent',
    				image: './img/skills/khazard4.png',
    				desc: 'While there is "Frozen Mist" present on the battlefield, Khazard\'s "Frost Serpent" attacks an enemy with its ice breath, dealing <em>160%</em> damage to them, causing them to become frozen for <em>2</em> seconds.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'When Khazard uses his "Glacial Shards" ability his "Frost Serpent" will deal an additional attack to the nearest enemy target, knocking them backwards, dealing <em>200%</em> damage to them.',
    						unlock: 141,
    					},
    					{ desc: 'As the effects of "Frost Beam" are about to wear off, Khazard\'s "Frost Serpent" will smash the frozen enemy target, dealing damage equal to <em>20%</em> of the health that they have already lost.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 30,
    		sig_item: {
    			name: 'Frozen Curse',
    			image: './img/si/khazard.png',
    			desc: 'Increases the duration of most negative debuff effects which are currently affecting all enemies on the battlefield by <em>30%</em>.',
    			upgrades: [
    				{ desc: 'Normal Attacks that deal critical damage now have a freezing effect that lasts for <em>1</em> seconds.',
    					unlock: 10,
    				},
    				{ desc: 'Normal Attacks that deal critical damage now have a freezing effect that lasts for <em>3</em> seconds.',
    					unlock: 20,
    				},
    				{ desc: 'Increases the duration of most negative debuff effects which are currently affecting all enemies on the battlefield by <em>60%</em> seconds.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 3,
    		furniture: {
    			name: 'Solid Ice',
    			image: './img/furniture/khazard.png',
    			upgrades: [
    				{ desc: 'When using the ability "Glacial Shards", If a single enemy is struck by <em>2</em> shards or more, the target becomes completely frozen for <em>1.5</em> seconds.',
    					unlock: 3,
    				},
    				{ desc: 'Any enemies frozen by one of Khazard\'s abilities will receive <em>15%</em> more damage.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'mezoth',
    		name: 'Mezoth',
    		portrait: './img/portraits/mezoth.jpg',
    		class: 'Tank',
    		faction: 'Hypogean',
    		type: 'Strength',
    		skills: [
    			{
    				name: 'Devour',
    				image: './img/skills/mezoth1.png',
    				desc: 'Passive: Mezoth cannot be controlled whenever his health is higher than <em>50%</em>, and the duration for the majority of debuffs affecting him is reduced by <em>50%</em>. When actively using his Ultimate ability, Mezoth imprisons an enemy up until his Energy is completely exhausted. During the imprisonment period, Mezoth loses <em>70</em> Energy per second and the imprisoned enemy lose health equal to <em>70%</em> of Mezoth\'s Attack Rating every second and cannot attack or use any abilities (enemies cannot die as a result of this damage). If affected by an enemy control ability, Mezoth will lose an additional <em>70</em> Energy per <em>0.5</em> seconds. If the enemy target is immune to control abilities, they will not be imprisoned and shall be immediately dealt <em>480%</em> damage instead. Allied heroes shall prioritize their attacks against enemies that are not imprisoned.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Imprisoned enemies lose health equal to <em>80%</em> of Mezoth\'s Attack Rating per second.',
    						unlock: 81,
    					},
    					{ desc: 'Imprisoned enemies lose health equal to <em>90%</em> of Mezoth\'s Attack Rating per second.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Abyssal Butchery',
    				image: './img/skills/mezoth2.png',
    				desc: 'Mezoth attempts to knock down an enemy. If Mezoth successfully knocks down an enemy, he proceeds to strike them multiple times, dealing <em>70%</em> damage per strike, with the final strike dealing <em>220%</em> damage to the enemy. Every time Mezoth lands a strike on the enemy, he will recover a proportion of health equal to <em>8%</em> of the health already lost by the enemy.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>80%</em>.',
    						unlock: 21,
    					},
    					{ desc: 'If the enemy is slain by this ability, Mezoth recovers a proportion of health equal to <em>30%</em> of the enemy\'s max health.',
    						unlock: 101,
    					},
    					{ desc: 'Damage is increased to <em>85%</em>.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Demonic Hunger',
    				image: './img/skills/mezoth3.png',
    				desc: 'Mezoth gains a shield for <em>7</em> seconds that is able to mitigate a damage value equal to <em>10%</em> of his own max health. Mezoth hacks at enemies that are standing within a certain distance in front of himself, dealing damage equal to <em>20%</em> of his own current health to them, also causing their Haste to be reduced by <em>50</em> points for <em>7</em> seconds.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Shield value is equal to <em>12%</em> of Mezoth\'s max health.',
    						unlock: 121,
    					},
    					{ desc: 'Shield value is equal to <em>12%</em> of Mezoth\'s max health.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Carnivorous Lust',
    				image: './img/skills/mezoth4.png',
    				desc: 'At the beginning of battles Mezoth\'s max health value is increased by <em>80%</em>, and the percentage of health that he begins the battle with remains unchanged. The increased value of Mezoth\'s health will slowly diminish over <em>50</em> seconds, starting from the beginning of battles. The diminishing max health value does not affect the current percentage of Mezoth\'s overall health.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Mezoth\'s Defense Rating can be increased by up to an additional <em>100%</em>, based upon the current percentage of his max health. A higher health ratio results in a higher Defense Rating.',
    						unlock: 141,
    					},
    					{ desc: 'Mezoth\'s Defense Rating can be increased by up to an additional <em>180%</em>, based upon the current percentage of his max health. A higher health ratio results in a higher Defense Rating.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 30,
    		sig_item: {
    			name: 'Virclent Greed',
    			image: './img/si/mezoth.png',
    			desc: 'Hero gains <em>200</em> Energy points at the start of battles.',
    			upgrades: [
    				{ desc: 'Imprisoned enemies shall bear <em>25%</em> of the damage that is intended for Mezoth.',
    					unlock: 10,
    				},
    				{ desc: 'Hero gains <em>500</em> Energy points at the start of battles.',
    					unlock: 20,
    				},
    				{ desc: 'Imprisoned enemies shall bear <em>50%</em> of the damage that is intended for Mezoth.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 9,
    		furniture: {
    			name: 'Fiendish Negation',
    			image: './img/furniture/mezoth.png',
    			upgrades: [
    				{ desc: 'If an enemy imprisoned by the ability "Devour" currently has less than <em>15%</em> health they will be instantly slain.',
    					unlock: 3,
    				},
    				{ desc: 'When an enemy is slain by the ability "Fiendish Negation", Mezoth recovers <em>10%</em> of his max health and <em>80</em> Energy points every second over <em>4</em> seconds.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'lucretia',
    		name: 'Lucretia',
    		portrait: './img/portraits/lucretia.jpg',
    		class: 'Ranger',
    		faction: 'Hypogean',
    		type: 'Agility',
    		skills: [
    			{
    				name: 'Ungodly Defiance',
    				image: './img/skills/lucretia1.png',
    				desc: 'The first time Lucretia uses her Ultimate ability, she absorbs her two revolving skulls, absorbing their Energy until the end of the battle. After absorbing the skulls, Lucretia\'s Life Leech is increased by <em>40</em> and her Energy Recovery rate is increased by <em>50%</em>. Afterwards, each time she uses her Ultimate ability deals <em>280%</em> AoE damage to nearby enemies.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>300%</em>.',
    						unlock: 81,
    					},
    					{ desc: 'Damage is increased to <em>320%</em>.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Hellfire',
    				image: './img/skills/lucretia2.png',
    				desc: 'Flames encircle Lucretia for <em>10</em> seconds, dealing <em>60%</em> damage every <em>0.5</em> seconds to enemies in close proximity to her. Enemies affected by Lucretia\'s flames have their Defense Ratings decreased by <em>15%</em> for <em>2</em> seconds. This ability can be stacked.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>70%</em>.',
    						unlock: 21,
    					},
    					{ desc: 'Damage Lucretia receives while flames are present is reduced by <em>20%</em>.',
    						unlock: 101,
    					},
    					{ desc: 'Damage is increased to <em>90%</em>.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Deathwish',
    				image: './img/skills/lucretia3.png',
    				desc: 'Lucretia marks the enemy that has dealt the highest total amount of damage and hunts them until their death. While Lucretia is hunting down the enemy target, the target\'s damage is reduced by <em>30%</em>. If the enemy formation includes Zaphrael, Lucretia shall prioritize her attacks against Zaphrael above all other enemies.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Damage to hunted enemy is increased by <em>40%</em> during the hunting phase.',
    						unlock: 121,
    					},
    					{ desc: 'The damage Lucretia receives is reduced by <em>20%</em> for the first <em>5</em> seconds of the hunting phase.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Twin Terrors',
    				image: './img/skills/lucretia4.png',
    				desc: 'When positioned on the frontline, the Skull of Treachery is activated, raising Lucretia\'s Dodge by <em>50</em> points and her Tenacity by <em>20</em> points. When positioned on the backline, the Skull of Destruction is activated, raising Lucretia\'s Attack Speed by <em>15</em> points and her Crit Amplification by <em>30</em> points. The effects of both skulls are simultaneously activated after Lucretia uses her Ultimate ability for the first time.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'When on the frontline, activating the Skull of Treachery raises Lucretia\'s Dodge by <em>80</em> and Tenacity by <em>30</em>.',
    						unlock: 141,
    					},
    					{ desc: 'When on the backline, activating the Skull of Destruction raises Lucretia\'s Attack Speed by <em>25</em> and Crit Amplification by <em>35</em>.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 30,
    		sig_item: {
    			name: 'Animus',
    			image: './img/si/lucretia.png',
    			desc: 'Lucretia gains <em>150</em> Energy per second over <em>5</em> seconds when a non-summoned ally dies for the first time.',
    			upgrades: [
    				{ desc: 'When any non-summoned allies die, Lucretia\'s Attack Rating is increased by <em>30%</em> for <em>20</em> seconds. This ability can be stacked. Time durations for the stacked effects are calculated individually.',
    					unlock: 10,
    				},
    				{ desc: 'When any non-summoned allies die, Lucretia\'s Haste is increased by <em>8</em> points for <em>20</em> seconds. This ability can be stacked. Time durations for the stacked effects are calculated individually.',
    					unlock: 20,
    				},
    				{ desc: 'When any non-summoned allies die, Lucretia\'s Attack Rating is increased by <em>50%</em> for <em>20</em> seconds. This ability can be stacked. Time durations for the stacked effects are calculated individually.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 9,
    		furniture: {
    			name: 'Blazing Fury',
    			image: './img/furniture/lucretia.png',
    			upgrades: [
    				{ desc: 'When Lucretia has used her Ultimate ability for a combined number of <em>1</em> times, the effects caused by the flames of the ability "Hellfire" are strengthened. Enemies that are damaged by the flames have their Energy Recovery rates reduced by <em>50%</em>.',
    					unlock: 3,
    				},
    				{ desc: 'When Lucretia has used her Ultimate ability for a combined number of <em>2</em> times, the flame effects of the ability "Hellfire" are strengthened and the flames shall no longer disappear. Enemies that are damaged by the flames will be unable to use their Ultimate abilities for a short duration.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'mortas',
    		name: 'Mortas',
    		portrait: './img/portraits/mortas.jpg',
    		class: 'Support',
    		faction: 'Hypogean',
    		type: 'Agility',
    		skills: [
    			{
    				name: 'Empowerment',
    				image: './img/skills/mortas1.png',
    				desc: 'Mortas grants the allied target with the highest Attack Rating <em>25%</em> of the target\'s own Attack Rating and <em>25</em> Attack Speed points as well as the effects of the ability "Greed" up until the end of battle.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Allies are granted <em>35%</em> of their Attack Rating and <em>35</em> Attack Speed points.',
    						unlock: 81,
    					},
    					{ desc: 'Allies are granted <em>40%</em> of their Attack Rating and <em>40</em> Attack Speed points.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Greed',
    				image: './img/skills/mortas2.png',
    				desc: 'This is a passive ability that allows for Mortas\' Normal Attacks to steal <em>4%</em> of an enemy\'s current health and <em>10%</em> of their current shield value. Each enemy may only be affected by this ability once every <em>1.5</em> seconds. The amount of health stolen from an enemy cannot exceed <em>220%</em> of Mortas\' own Attack Rating.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Normal Attacks now also steal <em>50</em> Energy points from the enemy.',
    						unlock: 21,
    					},
    					{ desc: 'Normal Attacks steal <em>6%</em> of the enemy\'s current health and <em>15%</em> of their current shield value.',
    						unlock: 101,
    					},
    					{ desc: 'Normal Attacks steal <em>8%</em> of the enemy\'s current health and <em>20%</em> of their current shield value.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Blood Pact',
    				image: './img/skills/mortas3.png',
    				desc: 'Mortas consumes <em>10%</em> of his current health to heal the most injured non-summoned ally for <em>2</em> times worth the amount of the health which was consumed.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Heals most injured ally for <em>3</em> times worth the amount of health which was consumed.',
    						unlock: 121,
    					},
    					{ desc: 'Heals most injured ally for <em>4</em> times worth the amount of health which was consumed.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Devilish Deal',
    				image: './img/skills/mortas4.png',
    				desc: 'Mortas allows the enemy that has regenerated the highest amount of health to instantly recover <em>15%</em> of their max health, however, for the following <em>15</em> seconds, all of the health regenerated by the enemy is transferred to Mortas.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Enemy recovers <em>10%</em> of their max health.',
    						unlock: 141,
    					},
    					{ desc: 'Effects are increased to <em>25</em> seconds.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 20,
    		sig_item: {
    			name: 'Trickery',
    			image: './img/si/mortas.png',
    			desc: 'When a Normal Attack deals a Critical Strike, another enemy is additionally struck, however, the damage dealt is reduced by <em>70%</em> and the additional attack does not trigger any effects.',
    			upgrades: [
    				{ desc: 'When a Normal Attack deals a Critical Strike, another enemy is additionally struck, however, the damage dealt is reduced by <em>50%</em> and the additional attack does not trigger any effects.',
    					weight: 1,
    				},
    				{ desc: 'Normal Attacks that are buffed by "Greed" now have a small Area of Effect.',
    					weight: 1,
    				},
    				{ desc: 'When a Normal Attack deals a Critical Strike, another enemy is additionally struck, however, the damage dealt is reduced by <em>20%</em> and the additional attack does not trigger any effects.',
    					weight: 1,
    				},
    			],
    		},
    		furn_benchmark: 0,
    		furniture: {
    			name: 'Deadly Redemption',
    			image: './img/furniture/mortas.png',
    			upgrades: [
    				{ desc: 'When the ally benefiting from the effects of the ability "Empowerment" dies, Mortas takes back the empowered Attack Rating and Attack Speed bonuses from them and deals <em>250%</em> AoE damage from where the ally was standing. This ability may only be activated <em>1</em> time(s) per battle.',
    					unlock: 3,
    				},
    				{ desc: 'When the ally benefiting from the effects of the ability "Empowerment" dies, Mortas takes back the empowered Attack Rating and Attack Speed bonuses from them and deals <em>250%</em> AoE damage from where the ally was standing. This ability may only be activated <em>3</em> time(s) per battle.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'leofric',
    		name: 'Leofric',
    		portrait: './img/portraits/leofric.jpg',
    		class: 'Support',
    		faction: 'Hypogean',
    		type: 'Intelligence',
    		skills: [
    			{
    				name: 'Shadow Mastiff',
    				image: './img/skills/leofric1.png',
    				desc: 'Leofric summons a "Shadow Mastiff" statue in front of the enemy with the highest Attack Rating, and taunts them for <em>8</em> seconds. The "Shadow Mastiff" possesses <em>1150%</em> of Leofric\'s Attack Rating as health, and only <em>1</em> may be present on the battlefield at a time. If the "Shadow Mastiff" is destroyed before its timer ends, the attacking enemy will permanently lose <em>18%</em> of their Attack Rating (effect can only occur once per enemy). If the "Shadow Mastiff" is not destroyed before its timer ends, it shall deal <em>290%</em> damage to the attacking enemy when its timer ends.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'If the "Shadow Mastiff" is destroyed before its timer ends, the attacking enemy will permanently lose <em>22%</em> of their Attack Rating. If the "Shadow Mastiff" is not destroyed before its timer ends, it shall deal <em>320%</em> damage when it ends.',
    						unlock: 81,
    					},
    					{ desc: 'If the "Shadow Mastiff" is destroyed before its timer ends, the attacking enemy will permanently lose <em>25%</em> of their Attack Rating. If the "Shadow Mastiff" is not destroyed before its timer ends, it shall deal <em>350%</em> damage when it ends.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Hell Wyrms',
    				image: './img/skills/leofric2.png',
    				desc: 'Deals <em>250%</em> damage to enemies within a certain range, also causing them to lose <em>90</em> Energy points. Any enemies that were dealt damage shall also have their Energy Recovery reduced by <em>50%</em> for the following <em>4</em> seconds. This effect cannot be stacked.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>300%</em>.',
    						unlock: 21,
    					},
    					{ desc: 'Damage is increased to <em>350%</em>.',
    						unlock: 101,
    					},
    					{ desc: 'Any enemies that were dealt damage shall have their Energy Recovery reduced by <em>70%</em> for the following <em>5</em> seconds.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Unmasked Horror',
    				image: './img/skills/leofric3.png',
    				desc: 'All enemies in front of Leofric that are facing towards him are terrified for <em>3</em> seconds and lose <em>20%</em> of their respective Attack Ratings for the following <em>6</em> seconds. This effect cannot be stacked.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Terrified enemies lose <em>30%</em> of their respective Attack Rating.',
    						unlock: 121,
    					},
    					{ desc: 'Terrified enemies lose <em>40%</em> of their respective Attack Rating.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Perfect Disguise',
    				image: './img/skills/leofric4.png',
    				desc: 'Leofric and his most injured ally become immune to all damage and attacks for <em>5</em> seconds. While immune, <em>50%</em> of the damage dealt by the injured ally is converted into their own health.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'While immune, <em>70%</em> of the damage dealt by the injured ally is converted into their own health.',
    						unlock: 141,
    					},
    					{ desc: 'While immune, <em>90%</em> of the damage dealt by the injured ally is converted into their own health.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 20,
    		sig_item: {
    			name: 'Heart of Malice',
    			image: './img/si/leofric.png',
    			desc: 'Enemies struck by the ability "Hell Wyrms" shall receive <em>15%</em> more damage from Leofric\'s attacks for the following <em>4</em> seconds.',
    			upgrades: [
    				{ desc: 'Enemies struck by the ability "Hell Wyrms" shall receive <em>25%</em> more damage from Leofric\'s attacks for the following <em>4</em> seconds.',
    					unlock: 10,
    				},
    				{ desc: 'Enemies struck by the ability "Hell Wyrms" shall receive <em>25%</em> more damage from all attacks for the following <em>4</em> seconds.',
    					unlock: 20,
    				},
    				{ desc: 'Enemies struck by the ability "Hell Wyrms" shall receive <em>35%</em> more damage from all attacks for the following <em>6</em> seconds.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 3,
    		furniture: {
    			name: 'Subdued Vigor',
    			image: './img/furniture/leofric.png',
    			upgrades: [
    				{ desc: 'Enemies that are currently taunted by the ability "Shadow Mastiff" have their Health Regeneration reduced by <em>90%</em>.',
    					unlock: 3,
    				},
    				{ desc: 'Enemies that are taunted by the ability "Shadow Mastiff" are unable to recover Energy. Whenever a "Shadow Mastiff" disappears or is destroyed it will deal <em>350%</em> damage to nearby enemies, also stunning them for <em>3</em> seconds.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'arthur',
    		name: 'Arthur',
    		portrait: './img/portraits/arthur.jpg',
    		class: 'Tank',
    		faction: 'Dimensional',
    		type: 'Strength',
    		skills: [
    			{
    				name: 'Smite',
    				image: './img/skills/arthur1.png',
    				desc: 'Arthur will claim Excalibur from a lake the first time this ability is used. Once he is wielding the Lake Excalibur, Arthur\'s Normal Attacks will be greatly strengthened. Any subsequent uses of this ability will then deal <em>380%</em> AoE damage to enemies in front of Arthur.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>430%</em>.',
    						unlock: 81,
    					},
    					{ desc: 'Damage is increased to <em>480%</em>.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Excalibur\'s Fury',
    				image: './img/skills/arthur2.png',
    				desc: 'Arthur uses his sword to form a blade aura that deals <em>200%</em> damage to all enemies that it passes through. If Arthur is using the Lake Excalibur, he will form an additional <em>2</em> air blades that targets the enemies to his sides. Any enemies that are struck by multiple blade auras will receive <em>40%</em> less damage from subsequent attacks.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>220%</em>.',
    						unlock: 21,
    					},
    					{ desc: 'Damage is increased to <em>240%</em>.',
    						unlock: 101,
    					},
    					{ desc: 'Damage is increased to <em>260%</em>.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'King\'s Blessing',
    				image: './img/skills/arthur3.png',
    				desc: 'Arthur thrusts his sword into the ground, creating a small shockwave that deals <em>220%</em> damage to nearby enemies, simultaneously forming a shield around himself which is equal to <em>400%</em> of his Attack Rating\'s value. If Arthur is wielding the Lake Excalibur, an additional aura that lasts for <em>8</em> seconds will be cast upon the ground, reducing the amount of damage inflicted upon all allied heroes that are standing within it by <em>35%</em>.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Value of shield is increased to <em>440%</em> of Attack Rating value.',
    						unlock: 121,
    					},
    					{ desc: 'Value of shield is increased to <em>480%</em> of Attack Rating value.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Shield of Honor',
    				image: './img/skills/arthur4.png',
    				desc: 'Attacks that strike Arthur face on deal <em>50%</em> less damage to him.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Attacks that strike Arthur face on deal <em>60%</em> less damage to him.',
    						unlock: 141,
    					},
    					{ desc: 'Attacks that strike Arthur face on deal <em>70%</em> less damage to him.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 30,
    		sig_item: {
    			name: 'Battle Rally',
    			image: './img/si/arthur.png',
    			desc: 'Arthur rallies his team, raising the attack frequency of Normal Attacks for all allies standing behind Arthur by <em>50%</em>.',
    			upgrades: [
    				{ desc: 'Arthur rallies his team, raising the Crit Rating for all allies standing behind Arthur by <em>15%</em>.',
    					unlock: 10,
    				},
    				{ desc: 'Arthur rallies his team, raising the Crit Rating for all allies standing behind Arthur by <em>30%</em>.',
    					unlock: 20,
    				},
    				{ desc: 'Arthur recovers <em>5%</em> of his max health every second when there are <em>2</em> or more rallied allies on the battlefield and is also immune to control abilities.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 3,
    		furniture: {
    			name: 'King\'s Protection',
    			image: './img/furniture/arthur.png',
    			upgrades: [
    				{ desc: 'After Arthur uses his ultimate ability "Smite", if any of his non-summoned allies (including himself) are dealt fatal damage, this ability will be triggered, making the ally become immune to this damage and granting them a shield that lasts for <em>5</em> seconds. The shield is able to offset damage equal to <em>35%</em> of Arthur\'s max health. This ability may only be triggered once per battle.',
    					unlock: 3,
    				},
    				{ desc: 'Shield now lasts for <em>10</em> seconds, and can offset damage equal to <em>45%</em> of Arthur\'s max health.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'nakoruru',
    		name: 'Nakoruru',
    		portrait: './img/portraits/nakoruru.jpg',
    		class: 'Ranger',
    		faction: 'Dimensional',
    		type: 'Agility',
    		skills: [
    			{
    				name: 'Running Chest Jab',
    				image: './img/skills/nakoruru1.png',
    				desc: 'Nakoruru knocks a single enemy target onto the ground, removing all of their defensive shield effects as a result and then proceeds to stab the enemy, dealing <em>460%</em> damage the target.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>490%</em>.',
    						unlock: 81,
    					},
    					{ desc: 'Damage is increased to <em>520%</em>.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Kamui Rimuse',
    				image: './img/skills/nakoruru2.png',
    				desc: 'Nakoruru attacks any enemies that are within range of her <em>3</em> times. Each attack deals <em>190%</em> damage to the targets and also interrupts their current actions.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>200%</em>.',
    						unlock: 21,
    					},
    					{ desc: '<em>40%</em> of the damage caused by this ability will be recovered as Nakoruru\'s health.',
    						unlock: 101,
    					},
    					{ desc: 'Damage is increased to <em>210%</em>.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Shichikapu Etu',
    				image: './img/skills/nakoruru3.png',
    				desc: 'Mamahaha swoops down and attacks a backline enemy as they are preparing to use an ability (excludes ultimate abilities), dealing <em>220%</em> damage to them, causing them to be stunned for <em>2</em> seconds. This ability can be activated once every <em>6</em> seconds.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Ability is activated once every <em>5</em> seconds.',
    						unlock: 121,
    					},
    					{ desc: 'Ability is activated once every <em>4</em> seconds.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Kamui Matsube',
    				image: './img/skills/nakoruru4.png',
    				desc: 'Nakoruru is carried by Mamahaha towards the weakest enemy target. Once close enough, Nakoruru pounces on the enemy target, dealing <em>280%</em> damage to them. This ability may be used up to <em>2</em> times per battle; once when Nakoruru\'s health falls below <em>70%</em> for the first time and again when it falls below <em>40%</em> for the first time. While being carried by Mamahaha, Nakoruru cannot be attacked and will recover <em>400%</em> worth of her Attack Rating as health.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>300%</em>.',
    						unlock: 141,
    					},
    					{ desc: 'Damage is increased to <em>320%</em>.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 30,
    		sig_item: {
    			name: 'Heavy Slash',
    			image: './img/si/nakoruru.png',
    			desc: 'Stuns enemies for <em>1.5</em> seconds and sends them hurtling into the air whenever a Normal Attack deals a Critical Damage.',
    			upgrades: [
    				{ desc: 'Frequency of Normal Attacks is raised by <em>20%</em> in battle.',
    					unlock: 10,
    				},
    				{ desc: 'Frequency of Normal Attacks is raised by <em>40%</em> in battle.',
    					unlock: 20,
    				},
    				{ desc: 'Stun effect lasts for <em>3</em> seconds.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 3,
    		furniture: {
    			name: 'Nature\'s Hand',
    			image: './img/furniture/nakoruru.png',
    			upgrades: [
    				{ desc: 'Nakoruru\'s "Kamui Mutsube" ability is triggered each time she collectively loses <em>30%</em> of her max health. This ability can be used up to <em>3</em> times per battle.',
    					unlock: 3,
    				},
    				{ desc: 'Nakoruru\'s "Kamui Mutsube" ability is triggered each time she collectively loses <em>30%</em> of her max health. This ability can be used up to <em>5</em> times per battle.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'ukyo',
    		name: 'Ukyo',
    		portrait: './img/portraits/ukyo.jpg',
    		class: 'Warrior',
    		faction: 'Dimensional',
    		type: 'Agility',
    		skills: [
    			{
    				name: 'Hientorajin',
    				image: './img/skills/ukyo1.png',
    				desc: 'Ukyo leaps at his enemies and unleashes <em>10</em> swift attacks against them, dealing <em>70%</em> AoE damage per attack, with the final attack striking his enemies into the air. Ukyo is immune to all damage while using this ability.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>80%</em>.',
    						unlock: 81,
    					},
    					{ desc: 'Damage is increased to <em>90%</em>.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Snowfall Slash',
    				image: './img/skills/ukyo2.png',
    				desc: 'Ukyo swiftly brings his sword out and attacks the enemies standing before him <em>7</em> times, dealing <em>70%</em> AoE damage per attack to them, also interrupting their attacks. Ukyo is immune to all frontal attacks while using this ability.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>75%</em>.',
    						unlock: 21,
    					},
    					{ desc: 'Damage is increased to <em>80%</em>.',
    						unlock: 101,
    					},
    					{ desc: 'Damage is increased to <em>85%</em>.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Phantom Strike',
    				image: './img/skills/ukyo3.png',
    				desc: 'When there are no enemies in close proximity to Ukyo, he will rapidly move near to an enemy and unleash a triple-strike attack against them that deals <em>180%</em> damage per attack. Each attack will knock back the enemy and cause them to become stunned for <em>3</em> seconds.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>190%</em>.',
    						unlock: 121,
    					},
    					{ desc: 'Damage is increased to <em>200%</em>.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Swallow Swipe',
    				image: './img/skills/ukyo4.png',
    				desc: 'Ukyo leaps into the air to attack his enemies, dealing <em>250%</em> AoE damage to nearby enemies.',
    				unlock: 61,
    				upgrades: [
    					{ desc: '<em>60%</em> of the damage caused by this ability will be recovered as Ukyo\'s health.',
    						unlock: 141,
    					},
    					{ desc: 'Damage is increased to <em>290%</em>.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 30,
    		sig_item: {
    			name: 'Rage Eruption',
    			image: './img/si/ukyo.png',
    			desc: 'This ability can be used once per battle. After using his ultimate ability, Ukyo will be immune to all control abilities for <em>8</em> seconds, his Attack Rating will be increased by <em>20%</em> and his Life Leech attribute will be increased by <em>10</em> points.',
    			upgrades: [
    				{ desc: 'Ukyo\'s Attack Rating is increased by <em>30%</em> and his Life Leech attribute is increased by <em>25</em> points.',
    					unlock: 10,
    				},
    				{ desc: 'Ukyo\'s Attack Rating is increased by <em>40%</em> and his Life Leech attribute is increased by <em>40</em> points.',
    					unlock: 20,
    				},
    				{ desc: 'Ukyo can use this ability up to <em>3</em> times per battle.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 0,
    		furniture: {
    			name: 'Ferocity Burst',
    			image: './img/furniture/ukyo.png',
    			upgrades: [
    				{ desc: 'Ukyo\'s Attack Rating is increased by <em>6%</em> each time he deals damage to an enemy. This ability can be stacked up to <em>6</em> times. If an enemy dodges, mitigates or is immune to one of Ukyo\'s attacks, he will lose <em>3</em> layers of his increased Attack Rating.',
    					unlock: 3,
    				},
    				{ desc: 'Ability can be stacked up to <em>15</em> times.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'ezio',
    		name: 'Ezio',
    		portrait: './img/portraits/ezio.jpg',
    		class: 'Ranger',
    		faction: 'Dimensional',
    		type: 'Agility',
    		skills: [
    			{
    				name: 'Eagle Vision',
    				image: './img/skills/ezio1.png',
    				desc: 'Ezio marks all enemy targets with \'Execution Threshold\' markers. If a target\'s health falls below the designated \'Execution Threshold\' of <em>27%</em> of their max health, Ezio will swiftly execute them. Each time this ability is used against enemies that are already marked by an \'Execution Threshold\', their thresholds will be raised by a further <em>8%</em> of their max health. When used against other heroes, the maximum execution threshold value will not exceed <em>1600%</em> of Ezio\'s Attack Rating. When used against NPC bosses, the damage dealt is equal to <em>500%</em> of Ezio\'s Attack Rating.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Enemies marked with an \'Execution Threshold\' marker receive <em>45%</em> more damage from Ezio\'s attacks.',
    						unlock: 81,
    					},
    					{ desc: 'Enemies marked with an \'Execution Threshold\' marker receive <em>65%</em> more damage from Ezio\'s attacks.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Final Retribution',
    				image: './img/skills/ezio2.png',
    				desc: 'Activated once every <em>9</em> seconds, this ability allows Ezio to avoid all the damage he receives from a single enemy target\'s attack. After avoiding the enemy\'s attack, Ezio prioritizes a counter-attack against the attacking enemy. When counter attacking a nearby enemy, Ezio initiates a 6-stage attack on them, with each strike dealing <em>95%</em> damage to the enemy. When counter attacking distant enemies, Ezio uses his crossbow to inflict <em>300%</em> damage on the enemy target.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Ability can be activated every <em>8</em> seconds.',
    						unlock: 21,
    					},
    					{ desc: 'Ability can be activated every <em>7</em> seconds.',
    						unlock: 101,
    					},
    					{ desc: 'Ability can be activated every <em>6</em> seconds.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Smoke Bomb',
    				image: './img/skills/ezio3.png',
    				desc: 'Nearby enemies are enshrouded in a heavy cloud which causes them to lose <em>105</em> Accuracy points, <em>70</em> Haste points, and also have a <em>35%</em> increased chance of suffering Critical Damage from their enemies for a duration of <em>9</em> seconds.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Enemies now lose <em>120</em> Accuracy points.',
    						unlock: 121,
    					},
    					{ desc: 'Enemies now lose <em>135</em> Accuracy points.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Evasion',
    				image: './img/skills/ezio4.png',
    				desc: 'Ezio receives <em>4</em> Dodge points every <em>1</em> second during battles until <em>120</em> points are reached.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Ezio has the chance to regain <em>6%</em> of his max health whenever he successfully dodges enemy attacks. This ability can be activated once every <em>2</em> seconds.',
    						unlock: 141,
    					},
    					{ desc: 'Ezio has the chance to regain <em>8%</em> of his max health whenever he successfully dodges enemy attacks. This ability can be activated once every <em>2</em> seconds.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 25,
    		sig_item: {
    			name: 'Assassin\'s Target',
    			image: './img/si/ezio.png',
    			desc: 'Each time Ezio defeats an enemy, all enemies marked with \'Execution Threshold\' markers have their thresholds raised by <em>50%</em> for the following <em>10</em> seconds. This ability cannot be stacked.',
    			upgrades: [
    				{ desc: 'Each time Ezio defeats an enemy he receives <em>35%</em> less damage from enemies for <em>10</em> seconds. This ability cannot be stacked.',
    					unlock: 10,
    				},
    				{ desc: 'Each time Ezio defeats an enemy he receives <em>55%</em> less damage from enemies for <em>10</em> seconds. This ability cannot be stacked.',
    					unlock: 20,
    				},
    				{ desc: 'Each time Ezio defeats an enemy his "Smoke Bomb" ability is triggered.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 9,
    		furniture: {
    			name: 'Master Assassin',
    			image: './img/furniture/ezio.png',
    			upgrades: [
    				{ desc: 'All negative control abilities are removed from Ezio whenever a deadly strike is dealt to an enemy as a result of his "Eagle Vision" ability.',
    					unlock: 3,
    				},
    				{ desc: 'Ezio gains <em>500</em> Energy points at the beginning of the battles.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'ainz',
    		name: 'Ainz Ooal Gown',
    		portrait: './img/portraits/ainz.jpg',
    		class: 'Mage',
    		faction: 'Dimensional',
    		type: 'Intelligence',
    		skills: [
    			{
    				name: 'Fallen Down',
    				image: './img/skills/ainz1.png',
    				desc: 'Ainz begins a chant which lasts for <em>5</em> seconds, after which <em>460%</em> damage is dealt to all enemy targets. If his chant is interrupted, Ainz will recover <em>500</em> Energy points.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>520%</em>.',
    						unlock: 81,
    					},
    					{ desc: 'Damage is increased to <em>580%</em>.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Magic Caster',
    				image: './img/skills/ainz2.png',
    				desc: 'Ainz\' Normal Attacks are changed to the following abilities, which are used in a cycle:<br><br>Call Greater Thunder: Deals <em>240%</em> damage to the enemy target.<br>Gravity Maelstrom: Deals <em>210%</em> damage to the enemy and any other nearby enemy targets.<br>True Dark: Deals <em>180%</em> damage to the enemy target and prevents the enemy from using their Ultimate ability for <em>5</em> seconds.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Call Greater Thunder damage is increased to <em>270%</em>.',
    						unlock: 21,
    					},
    					{ desc: 'Gravity Maelstrom damage is increased to <em>230%</em>.',
    						unlock: 101,
    					},
    					{ desc: 'True Dark prevents the enemy target from using their Ultimate ability for <em>8</em> seconds.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'The Goal of All Life is Death',
    				image: './img/skills/ainz3.png',
    				desc: 'After <em>24</em> seconds of battle, all enemies lose <em>30%</em> of their current health and are stunned for <em>4</em> seconds.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Enemies lose <em>40%</em> of their current health.',
    						unlock: 121,
    					},
    					{ desc: 'Enemies lose <em>50%</em> of their current health.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Steady Preparations',
    				image: './img/skills/ainz4.png',
    				desc: 'At the beginning of battle Ainz receives a shield equal to <em>40%</em> of his max health, which lasts for <em>6</em> seconds. While the shield exists, Ainz is immune to control abilities and continues to chant, gaining <em>70</em> Energy points and a permanent <em>+4%</em> Attack Rating and <em>+8%</em> Defense Rating attribute increase per second. Once the shield disappears, Ainz ceases chanting.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Attack Rating is increased by <em>6%</em> per second, and Defense Rating is increased by <em>10%</em> per second.',
    						unlock: 141,
    					},
    					{ desc: 'Once Ainz\' attributes have been increased <em>6</em> times, he receives an additional <em>50</em> Crit Amplification points and <em>30</em> Attack Speed points.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 30,
    		sig_item: {
    			name: 'Cash Items',
    			image: './img/si/ainz.png',
    			desc: 'The chanting phase of the Ultimate ability "Fallen Down" is omitted the first time it is used.',
    			upgrades: [
    				{ desc: 'The chanting phase of the Ultimate ability "Fallen Down" is omitted the first <em>2</em> times it is used.',
    					unlock: 10,
    				},
    				{ desc: 'The chanting phase of the Ultimate ability "Fallen Down" is omitted the first <em>3</em> times it is used.',
    					unlock: 20,
    				},
    				{ desc: 'The Ultimate ability "Fallen Down" deals an extra <em>30%</em> damage.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 9,
    		furniture: {
    			name: 'Maximize Magic',
    			image: './img/furniture/ainz.png',
    			upgrades: [
    				{ desc: 'Every <em>8</em> seconds during battle, the damage and debuff duration of the "Magic Caster" ability are increased by <em>200%</em>.',
    					unlock: 3,
    				},
    				{ desc: 'The effects of the ability "The Goal of All Life Is Death" will take effect <em>15</em> seconds into battle.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'albedo',
    		name: 'Albedo',
    		portrait: './img/portraits/albedo.jpg',
    		class: 'Tank',
    		faction: 'Dimensional',
    		type: 'Strength',
    		skills: [
    			{
    				name: 'Ginnungagap',
    				image: './img/skills/albedo1.png',
    				desc: 'Albedo instantly teleports to the most densely populated area of enemies and deals <em>300%</em> AoE damage to nearby enemies. <em>45%</em> of the total damage dealt to her enemies is converted into a shield, which has a duration of <em>8</em> seconds.',
    				unlock: 1,
    				upgrades: [
    					{ desc: '<em>55%</em> of the total damage dealt to her enemies is converted into Albedo\'s shield.',
    						unlock: 81,
    					},
    					{ desc: '<em>65%</em> of the total damage dealt to her enemies is converted into Albedo\'s shield.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Black Guard',
    				image: './img/skills/albedo2.png',
    				desc: 'Albedo gains a shield with a value equal to <em>220%</em> of her Attack Rating, after which she teleports next to the backline ally with the lowest HP and protects them for <em>5</em> seconds. While the shield exists, both Albedo and that ally are immune to control abilities, and Albedo shall bear all of the damage intended for that ally. If the hero Ainz Ooal Gown is an ally, Albedo will prioritize him with this ability above all other allies.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Albedo\'s shield value is increased to <em>270%</em> of her Attack Rating.',
    						unlock: 21,
    					},
    					{ desc: 'Damage received by Albedo while shield is active is reduced by <em>40%</em>.',
    						unlock: 101,
    					},
    					{ desc: 'Damage received by Albedo while shield is active is reduced by <em>60%</em>.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Shield Lord',
    				image: './img/skills/albedo3.png',
    				desc: 'Albedo teleports next to a random ally that is currently near an enemy and deals <em>220%</em> damage to the enemy, stunning them for <em>4</em> seconds. If the hero Ainz Ooal Gown is an ally, Albedo will prioritize him with this ability above all other allies.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Damaged is increased to <em>250%</em>.',
    						unlock: 121,
    					},
    					{ desc: 'Damaged is increased to <em>280%</em>.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Hermes Trismegistus',
    				image: './img/skills/albedo4.png',
    				desc: 'During battle, Albedo\'s Crit Resistance is increased by <em>35</em> points. If Albedo is dealt a Critical Strike, the attacker\'s Attack Rating is reduced by <em>30%</em> for <em>5</em> seconds. This ability cannot be stacked.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Albedo\'s Crit Resistance is increased by <em>50</em> points.',
    						unlock: 141,
    					},
    					{ desc: 'If Albedo is dealt a Critical Strike, the attacker\'s Attack Rating is reduced by <em>50%</em>.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 30,
    		sig_item: {
    			name: 'Guardian Overseer',
    			image: './img/si/albedo.png',
    			desc: 'During battle, the Defense Ratings of all Dimensional heroes are increased by <em>15%</em> for every Dimensional hero that is in the allied formation. The effects of this ability can be stacked up to <em>2</em> times.',
    			upgrades: [
    				{ desc: 'During battle, the Defense Rating of all Dimensional heroes are increased by <em>25%</em> for every Dimensional hero that is in the allied formation.',
    					unlock: 10,
    				},
    				{ desc: 'The effects of this ability can be stacked up to <em>3</em> times.',
    					unlock: 20,
    				},
    				{ desc: 'During battle, the Attack Rating of all Dimensional heroes are increased by <em>15%</em> for every Dimensional hero that is in the allied formation. The effects of this ability can be stacked up to <em>3</em> times.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 3,
    		furniture: {
    			name: 'Mournful Rage',
    			image: './img/furniture/albedo.png',
    			upgrades: [
    				{ desc: 'Albedo enters a rage which last <em>10</em> seconds whenever Ainz Ooal Gown dies or whenever the first ally (except Ainz) on her team dies. During the enraged state Albedo is immune to all damage and control effects, and <em>250%</em> of her Defense Rating is converted into her Attack Rating. If Albedo is currently using her "Black Guard" ability to protect an ally, the enraged state shall be initiated once her "Black Guard" ability ends.',
    					unlock: 3,
    				},
    				{ desc: '<em>80%</em> of the damage caused during the enraged state is converted into Albedo\'s health.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'joker',
    		name: 'JOKER',
    		portrait: './img/portraits/joker.jpg',
    		class: 'Ranger',
    		faction: 'Dimensional',
    		type: 'Agility',
    		skills: [
    			{
    				name: 'Maeigaon',
    				image: './img/skills/joker1.png',
    				desc: 'Summons Arsène who deals <em>260%</em> damage to all enemy targets.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>280%</em>.',
    						unlock: 81,
    					},
    					{ desc: 'Damage is increased to <em>300%</em>.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Adverse Reaction',
    				image: './img/skills/joker2.png',
    				desc: 'JOKER chooses the enemy that is positioned directly opposite himself at the start of battles as his Combat Target (CT). If the CT belongs to a non-Dimensional faction, JOKER will temporarily change factions in order to gain a factional damage bonus against the CT but will also suffer from its adverse effects. When JOKER\'s abilities deal damage to an enemy of whom he has a factional advantage against, the enemy will be knocked down for <em>2</em> seconds and then weakened. Weakened enemies receive <em>30%</em> more damage over <em>5</em> seconds. Knock-down and weakening effects may only be used once every <em>7</em> seconds against the same target. If the CT is slain, JOKER will choose the enemy with the highest Combat Rating as his next CT.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Combat Target is knocked to the ground for <em>2.5</em> seconds.',
    						unlock: 21,
    					},
    					{ desc: 'Combat Target is knocked to the ground for <em>3</em> seconds.',
    						unlock: 101,
    					},
    					{ desc: 'Enemies that have a factional advantage over JOKER have their factional damage bonuses reduced to <em>15%</em>.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Concentrated Fire',
    				image: './img/skills/joker3.png',
    				desc: 'Each time JOKER has used his Normal Attack <em>4</em> times, he will use his gun to deal <em>180%</em> damage to his Combat Target.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Deals <em>210%</em> damage to Combat Target.',
    						unlock: 121,
    					},
    					{ desc: 'Each time JOKER has used his Normal Attack <em>3</em> times he will use his gun against the Combat Target.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'All-Out Attack',
    				image: './img/skills/joker4.png',
    				desc: 'When <em>3</em> or more enemies, or all enemies are controlled, All-Out Attack is triggered, dealing <em>300%</em> damage to all enemies. This ability can only be used when there are surviving allies on the battlefield. This ability can be triggered once every <em>7</em> seconds and can be used up to a maximum of <em>3</em> times per battle. The damage caused by this ability will not trigger the effects of "Adverse Reaction".',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Deals <em>320%</em> damage to all enemies.',
    						unlock: 141,
    					},
    					{ desc: 'Deals <em>340%</em> damage to all enemies.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 20,
    		sig_item: {
    			name: 'Widespread Attack',
    			image: './img/si/joker.png',
    			desc: 'After JOKER uses his Ultimate ability, the AoE range of his Normal Attacks is increased for <em>7</em> seconds, during which time he deals <em>20%</em> additional damage.',
    			upgrades: [
    				{ desc: 'JOKER gains <em>20</em> Attack Speed points while this ability\'s effects are in use.',
    					unlock: 10,
    				},
    				{ desc: 'JOKER gains <em>35</em> Attack Speed points while this ability\'s effects are in use.',
    					unlock: 20,
    				},
    				{ desc: 'Duration of ability is increased to <em>15</em> seconds.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 3,
    		furniture: {
    			name: 'Leader\'s Enlightenment',
    			image: './img/furniture/joker.png',
    			upgrades: [
    				{ desc: 'While JOKER is suffering the effects of enemy control abilities, he has a <em>25%</em> greater chance of being extricated by his allies for every <em>1</em> non-summoned ally that is currently not being controlled, and shall be immune to enemy control abilities for <em>5</em> seconds if he is successfully extricated. This ability can be triggered once every <em>10</em> seconds. If the ally QUEEN is also on the battlefield, she will raise JOKER\'s extrication chances by an additional <em>40%</em>.',
    					unlock: 3,
    				},
    				{ desc: 'Each ally has a <em>35%</em> chance of extricating JOKER from enemy control abilities, and JOKER gains a shield worth <em>40%</em> of his max health that exists for <em>5</em> seconds if he is successfully extricated.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'queen',
    		name: 'QUEEN',
    		portrait: './img/portraits/queen.jpg',
    		class: 'Warrior',
    		faction: 'Dimensional',
    		type: 'Strength',
    		skills: [
    			{
    				name: 'Stationary Drifter',
    				image: './img/skills/queen1.png',
    				desc: 'QUEEN summons Johanna and rides it, spinning around at highspeed to generate a Nuclear Tornado. The tornado sucks enemies in towards its center, dealing <em>60%</em> AoE damage <em>7</em> times with a final attack which deals <em>200%</em> AoE damage. QUEEN cannot be attacked while the effects of her Ultimate ability occurring.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Final attack deals <em>220%</em> AoE damage.',
    						unlock: 81,
    					},
    					{ desc: 'Final attack deals <em>250%</em> AoE damage.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Freidyne',
    				image: './img/skills/queen2.png',
    				desc: 'QUEEN summons Johanna which deals <em>250%</em> AoE damage to all enemies in front of it and also generates a nuclear effect which lasts for <em>5</em> seconds. If an enemy suffers <em>2</em> Critical Strikes, while the effect is active, they shall be stunned for <em>2</em> seconds. Enemies can be stunned multiple times while the nuclear effect is occurring.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Nuclear effect lasts for <em>6</em> seconds.',
    						unlock: 21,
    					},
    					{ desc: 'Nuclear effect lasts for <em>7</em> seconds.',
    						unlock: 101,
    					},
    					{ desc: 'Nuclear effect lasts for <em>8</em> seconds.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Attack & Defend',
    				image: './img/skills/queen3.png',
    				desc: 'QUEEN\'s Crit Rating is increased by <em>6%</em> and her Defense Rating is increased by <em>20%</em> every <em>10</em> seconds. This ability can be stacked.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'QUEEN\'s Crit Rating is increased by <em>8%</em> and her Defense Rating is increased by <em>25%</em> each time her attributes are increased.',
    						unlock: 121,
    					},
    					{ desc: 'QUEEN\'s Crit Rating is increased by <em>10%</em> and her Defense Rating is increased by <em>30%</em> each time her attributes are increased.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Ms. Post-Apocalyptic Raider',
    				image: './img/skills/queen4.png',
    				desc: 'QUEEN deals a <em>4</em> hit combo, with each hit dealing <em>160%</em> damage to an enemy target, and on the final hit summons Johanna, which knocks nearby enemies backwards and causes them to be stunned for <em>3</em> seconds.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>180%</em>.',
    						unlock: 141,
    					},
    					{ desc: 'Damage is increased to <em>200%</em>.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 0,
    		sig_item: {
    			name: 'Edge of Death',
    			image: './img/si/queen.png',
    			desc: 'QUEEN is granted a shield which exists for <em>5</em> seconds and has a value equal to <em>25%</em> of her max health every time Johanna is summoned by any of her abilities.',
    			upgrades: [
    				{ desc: 'Shield has a value equal to <em>30%</em> of QUEEN\'s max health.',
    					unlock: 10,
    				},
    				{ desc: 'Shield has a value equal to <em>35%</em> of QUEEN\'s max health.',
    					unlock: 20,
    				},
    				{ desc: 'QUEEN gains an additional <em>25%</em> Crit Rating and <em>30</em> Crit Amplification points while the shield exists.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 3,
    		furniture: {
    			name: 'High Morale',
    			image: './img/furniture/queen.png',
    			upgrades: [
    				{ desc: 'When QUEEN attacks an enemy that is being controlled, herself and nearby allies are healed for <em>40%</em> of the attack\'s damage value.',
    					unlock: 3,
    				},
    				{ desc: 'QUEEN heals herself and her allies, while also increasing her and her allies\' Attack Ratings by <em>30%</em> for <em>3</em> seconds. This ability cannot be stacked.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'prince',
    		name: 'Prince of Persia',
    		portrait: './img/portraits/prince.jpg',
    		class: 'Ranger',
    		faction: 'Dimensional',
    		type: 'Agility',
    		skills: [
    			{
    				name: 'Sands of Time',
    				image: './img/skills/prince1.png',
    				desc: 'When this ability is actively used, Prince uses <em>600</em> Energy to use the "Ravages of Time", which deals <em>210%</em> damage to surrounding enemies, also stunning them for <em>3</em> seconds. Whenever Prince suffers fatal damage, "Recall" is triggered, and Prince uses <em>200</em> Energy to revert his health and position to as they were <em>8</em> seconds prior. "Recall" can be triggered up to <em>1</em> time per battle.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>230%</em>.',
    						unlock: 81,
    					},
    					{ desc: 'Damage is increased to <em>250%</em>.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Tempest of Agony',
    				image: './img/skills/prince2.png',
    				desc: 'This ability can only be used whenever there is more than <em>1</em> enemy in close proximity to Prince. Prince deals <em>150%</em> damage to nearby enemies, also stunning them for <em>2</em> seconds. This ability can be used up to <em>1</em> time every <em>5</em> seconds.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Damage is increased to <em>170%</em>.',
    						unlock: 21,
    					},
    					{ desc: 'Damage is increased to <em>190%</em>.',
    						unlock: 101,
    					},
    					{ desc: 'Damage is increased to <em>210%</em>.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Wall Dive Attack',
    				image: './img/skills/prince3.png',
    				desc: 'This ability can only be used whenever Prince is situated at the edge of the battlefield and an enemy is nearby. When used, Prince pounces from a wall towards an enemy target, dealing damage to all enemies he passes through, which is equal to <em>9%</em> of their own max health, but shall not exceed <em>290%</em> of Prince\'s own Attack Rating. This ability can be used up to <em>1</em> time every <em>3</em> seconds.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Damage dealt is equal to <em>12%</em> of enemies\' max health, but cannot exceed <em>320%</em> of Prince\'s Attack Rating.',
    						unlock: 121,
    					},
    					{ desc: 'Damage dealt is equal to <em>15%</em> of enemies\' max health, but cannot exceed <em>350%</em> of Prince\'s Attack Rating.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Concentrated Force',
    				image: './img/skills/prince4.png',
    				desc: 'Each time an enemy loses a total of <em>25%</em> of their max health, Prince immediately recovers <em>40</em> Energy points, and his Crit Rating is raised by <em>30%</em> for the next <em>4</em> seconds.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Recovers up to <em>50</em> Energy points.',
    						unlock: 141,
    					},
    					{ desc: 'Recovers up to <em>60</em> Energy points.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 20,
    		sig_item: {
    			name: 'Bounding Agility',
    			image: './img/si/prince.png',
    			desc: 'In between abilities and attacks, Prince will attempt to adjust his position by rolling or somersaulting backwards in order to meet the conditions needed to activate his "Tempest of Agony" and "Wall Dive Attack" abilities. During these actions, Prince\'s Dodge is raised by <em>100</em> points, and once the actions have finished, Prince\'s Attack Rating will be increased by <em>20%</em> for <em>3</em> seconds.',
    			upgrades: [
    				{ desc: 'Attack Rating is increased by <em>25%</em> for <em>4</em> seconds after the actions have finished.',
    					unlock: 10,
    				},
    				{ desc: 'Attack Rating is increased by <em>25%</em> for <em>6</em> seconds after the actions have finished.',
    					unlock: 20,
    				},
    				{ desc: 'Attack Rating is increased by <em>30%</em> for <em>6</em> seconds after the actions have finished.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 3,
    		furniture: {
    			name: 'Battle Memory',
    			image: './img/furniture/prince.png',
    			upgrades: [
    				{ desc: 'After the Ultimate ability\'s "Recall" effect is triggered, Prince\'s Dodge is increased by <em>70</em> points and he will not suffer Critical Strikes for the following <em>4</em> seconds.',
    					unlock: 3,
    				},
    				{ desc: 'The Energy required to trigger the Ultimate ability\'s "Recall" effect is reduced to <em>150</em> points, and the effect can be triggered up to <em>2</em> times per battle.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    	{ id: 'merlin',
    		name: 'Merlin',
    		portrait: './img/portraits/merlin.jpg',
    		class: 'Support',
    		faction: 'Dimensional',
    		type: 'Intelligence',
    		skills: [
    			{
    				name: 'Destiny Foreseen',
    				image: './img/skills/merlin1.png',
    				desc: 'Merlin foresees impending danger, allowing him to reduce the damage received by himself and all allies by <em>25%</em> for <em>8</em> seconds. While Merlin\'s premonition is still occurring, if an enemy that is symmetrically positioned uses their Ultimate ability, all allied heroes will receive a runic shield that has a value equal to <em>180%</em> of their own max health, which exists for <em>5</em> seconds. While the shield exists it prevents enemy control effects and cannot be dispelled. If a premonition is still in effect when Merlin uses his Ultimate ability again, the duration of this ability shall be reset.',
    				unlock: 1,
    				upgrades: [
    					{ desc: 'All damage received by allied heroes is reduced by <em>30%</em> while Merlin\'s premonition is in effect.',
    						unlock: 81,
    					},
    					{ desc: 'All damage received by allied heroes is reduced by <em>35%</em> while Merlin\'s premonition is in effect.',
    						unlock: 161,
    					},
    				],
    			},
    			{
    				name: 'Magical Amelioration',
    				image: './img/skills/merlin2.png',
    				desc: 'Merlin calls upon the forces of magic to heal himself and his most injured ally for <em>4.5%</em> max health per second over <em>8</em> seconds. <em>30%</em> of all damage dealt to this injured ally during the healing period is borne by Merlin.',
    				unlock: 11,
    				upgrades: [
    					{ desc: 'Heals <em>5%</em> max health per second.',
    						unlock: 21,
    					},
    					{ desc: 'Heals <em>5.5%</em> max health per second.',
    						unlock: 101,
    					},
    					{ desc: 'Heals <em>6%</em> max health per second.',
    						unlock: 181,
    					},
    				],
    			},
    			{
    				name: 'Karmic Law',
    				image: './img/skills/merlin3.png',
    				desc: 'When Merlin is suffering from the effects of an enemy control ability, he dispels the majority of the negative effects currently affecting him and lets loose his Spirit Owl, who proceeds to imprison the source of the effect for <em>3</em> seconds, causing them to lose health equal to <em>150%</em> of Merlin\'s Attack Rating every second. This ability cannot be dispelled. This ability can be triggered once every <em>8</em> seconds.',
    				unlock: 41,
    				upgrades: [
    					{ desc: 'Enemy loses health equal to <em>170%</em> of Merlin\'s Attack Rating every second.',
    						unlock: 121,
    					},
    					{ desc: 'Ability can be triggered once every <em>6</em> seconds.',
    						unlock: 201,
    					},
    				],
    			},
    			{
    				name: 'Guardian Owl',
    				image: './img/skills/merlin4.png',
    				desc: 'When Merlin suffers fatal damage for the first time he enters a spirit form and seeks refuge in his Spirit Owl. While in spirit form, Merlin protects his most injured ally, during which time both Merlin and the ally recover <em>10%</em> max health per second over <em>7</em> seconds. When Merlin stops protecting his ally, he reappears in his original position. If the allied target dies while Merlin is protecting them, Merlin will prematurely reappear in his original position. This ability may only be used when there are surviving allies still on the battlefield.',
    				unlock: 61,
    				upgrades: [
    					{ desc: 'Damage received by ally while Merlin is in spirit form is reduced by <em>30%</em>.',
    						unlock: 141,
    					},
    					{ desc: 'Value of health recovered per second is increased to <em>15%</em>.',
    						unlock: 221,
    					},
    				],
    			},
    		],
    		si_benchmark: 30,
    		sig_item: {
    			name: 'Shared Destiny',
    			image: './img/si/merlin.png',
    			desc: 'While the ability "Magical Amelioration" is in effect, <em>10%</em> of the damage dealt by the protected allied target is converted into health for both Merlin and the allied target.',
    			upgrades: [
    				{ desc: '<em>20%</em> of the damage dealt by the protected allied target is converted into health for both Merlin and the allied target.',
    					unlock: 10,
    				},
    				{ desc: '<em>30%</em> of the damage dealt by the protected allied target is converted into health for both Merlin and the allied target.',
    					unlock: 20,
    				},
    				{ desc: 'The amount of health Merlin loses as a result of bearing damage for his ally when using the ability "Magical Amelioration" is reduced by half, and the ability now targets <em>2</em> allies.',
    					unlock: 30,
    				},
    			],
    		},
    		furn_benchmark: 9,
    		furniture: {
    			name: 'Foresight',
    			image: './img/furniture/merlin.png',
    			upgrades: [
    				{ desc: 'The duration of the ability "Destiny Foreseen" is extended by <em>50%</em>.',
    					unlock: 3,
    				},
    				{ desc: 'Merlin can immediately use the ability "Destiny Foreseen" when he enters the battlefield.',
    					unlock: 9,
    				},
    			],
    		},
    	},
    ]);

    // import TestComps from './TestComps.js'

    let AppData; // final exported value
    let appdata; // temporary value for editing
    const herodata = get_store_value(HeroData); // data from HeroData store
    const maxDescLen = 5000;
    const maxCompTags = 10;
    const maxNoteLen = 280;
    // const testcomps = get(TestComps); // data from TestComps store

    // validation function for MH.List
    window.validateMyHeroData = async function(data) {
    	const expectedProps = [
    		{name: 'claimed', type: 'boolean', },
    		{name: 'ascendLv', type: 'number', },
    		{name: 'furn', type: 'number', },
    		{name: 'si', type: 'number', },
    	];

    	// make sure that data is an object (and nothing else)
    	if(!isObject$3(data)) return { retCode: 1, message: 'My Hero List data must be a plain Javascript object.'};

    	// data must be an object at this point, so make sure it's consistent with the format we expect
    	for(const key in data) {
    		// error if any keys aren't an id in heroData
    		if(!herodata.some(e => e.id === key)) {
    			return {retCode: 1, message: `Unexpected key found in hero list: ${key}`};
    		}
    		for(const prop in data[key]) {
    			// error if there are extra props
    			if(!expectedProps.some(e => e.name === prop)) {
    				return {retCode: 1, message: `Unexpected prop found for ${key} key: ${prop}`};
    			}
    			// error if props are the wrong type
    			let expectedPropType = expectedProps.find(e => e.name === prop).type;
    			if(!compareType(data[key][prop], expectedPropType)) {
    				return {retCode: 1, message: `Incorrect type for prop ${prop} in key ${key}, expected ${expectedPropType}`};
    			}
    		}
    	}

    	// everything should be good now, return the validated MH.List object
    	return {retCode: 0, message: data};
    };

    // validation function for Comps
    window.validateComp = async function(data) {
    	const expectedProps = [
    		{name: 'name', type: 'string'},
    		{name: 'uuid', type: 'string'},
    		{name: 'desc', type: 'string'},
    		{name: 'starred', type: 'boolean'},
    		{name: 'draft', type: 'boolean'},
    		{name: 'author', type: 'string'},
    		{name: 'lastUpdate', type: 'date'},
    		{name: 'heroes', type: 'object'},
    		{name: 'lines', type: 'array'},
    		{name: 'subs', type: 'array'},
    		{name: 'tags', type: 'array'},
    	];
    	const expectedHeroProps = [
    		{name: 'ascendLv', type: 'number'},
    		{name: 'si', type: 'number'},
    		{name: 'furn', type: 'number'},
    		{name: 'artifacts', type: 'object'},
    		{name: 'core', type: 'boolean'},
    		{name: 'notes', type: 'string'},
    	];
    	const expectedSubProps = [
    		{name: 'name', type: 'string'},
    		{name: 'heroes', type: 'array'},
    	];
    	const expectedLineProps = [
    		{name: 'name', type: 'string'},
    		{name: 'heroes', type: 'array'},
    	];
    	let expectedPropType = '';

    	// make sure that data is an object (and nothing else)
    	if(!isObject$3(data)) return { retCode: 1, message: 'Comp data must be a plain Javascript object.'};

    	// data must be an object at this point, so make sure it's consistent with the format we expect
    	// make sure all properties are there
    	for(const prop of expectedProps) {
    		if(!(prop.name in data)) {
    			return {retCode: 1, message: `Data is missing property: ${prop.name}`}
    		}
    	}
    	// make sure there are no unexpected keys and all keys are the right type
    	for(const key in data) {
    		if(!expectedProps.some(e => e.name === key)) {
    			return {retCode: 1, message: `Unexpected key found in comp: ${key}`};
    		}
    		expectedPropType = expectedProps.find(e => e.name === key).type;
    		if(!compareType(data[key], expectedPropType)) {
    			return {retCode: 1, message: `Incorrect type for key ${key}, expected ${expectedPropType}`};
    		}
    	}
    	// perform detailed checks on finalized comps
    	if(!data.draft) {
    		if(data.lines.length < 1) return {retCode: 1, message: 'Comps must have at least 1 line'};
    		if(data.name === '') return {retcode: 1, message: 'Comp title cannot be blank'};
    		// line validation
    		for(let line of data.lines) {
    			// each line should be an object
    			if(!isObject$3(line)) {
    				return {retCode: 1, message: `Unexpected line object type detected. All lines should be objects.`};
    			}
    			// make sure all properties are there
    			for(const prop of expectedLineProps) {
    				if(!(prop.name in line)) {
    					return {retCode: 1, message: `Line named ${line.name} is missing expected property ${prop.name}`};
    				}
    			}
    			// make sure there are no unexpected keys and all keys are the right type
    			for(const key in line) {
    				if(!expectedLineProps.some(e => e.name === key)) {
    					return {retCode: 1, message: `Unexpected key found in line named ${line.name}: ${key}`};
    				}
    				expectedPropType = expectedLineProps.find(e => e.name === key).type;
    				if(!compareType(line[key], expectedPropType)) {
    					return {retCode: 1, message: `Incorrect type for key ${key} in line named ${line.name}, expected ${expectedPropType}`};
    				}
    			}
    			// make sure every hero in a line is also in heroes or is unknown
    			for(const hero of line.heroes) {
    				if(!(hero in data.heroes) && hero !== 'unknown') {
    					return {retCode: 1, message: `Hero ${hero} in line named ${line.name} is not in heroes`};
    				}
    			}
    		}
    		// sub validation
    		for(let sub of data.subs) {
    			// each sub line should be an object
    			if(!isObject$3(sub)) {
    				return {retCode: 1, message: `Unexpected sub object type detected. All subs should be objects.`};
    			}
    			// make sure each sub category object has the right props
    			for(const prop of expectedSubProps) {
    				if(!(prop.name in sub)) {
    					return {retCode: 1, message: `Sub line named ${sub.name} is missing expected property ${prop.name}`};
    				}
    			}
    			// make sure there are no unexpected keys and all keys are the right type
    			for(const key in sub) {
    				if(!expectedSubProps.some(e => e.name === key)) {
    					return {retCode: 1, message: `Unexpected key found in sub line named ${sub.name}: ${key}`};
    				}
    				expectedPropType = expectedSubProps.find(e => e.name === key).type;
    				if(!compareType(sub[key], expectedPropType)) {
    					return {retCode: 1, message: `Incorrect type for key ${key} in sub line named ${sub.name}, expected ${expectedPropType}`};
    				}
    			}
    			// make sure every hero in a sub line is also in heroes
    			for(const hero of sub.heroes) {
    				if(!(hero in data.heroes)) {
    					return {retCode: 1, message: `Hero ${hero} in sub line named ${sub.name} is not in heroes`};
    				}
    			}
    		}
    		// heroes validation
    		for(const hero in data.heroes) {
    			// make sure all heroes are in HeroData
    			if(!(herodata.some(e => e.id === hero))) {
    				return {retCode: 1, message: `Hero ${hero} is not an ID in HeroData`};
    			}
    			// each hero should be an object
    			if(!isObject$3(data.heroes[hero])) {
    				return {retCode: 1, message: `Unexpected hero object type detected. All heroes should be objects.`};
    			}
    			// make sure heroes have the right props
    			for(const prop of expectedHeroProps) {
    				if(!(prop.name in data.heroes[hero])) {
    					return {retCode: 1, message: `Hero named ${hero} is missing expected property ${prop.name}`};
    				}
    			}
    			// make sure there are no unexpected keys and all keys are the right type
    			for(const key in data.heroes[hero]) {
    				if(!expectedHeroProps.some(e => e.name === key)) {
    					return {retCode: 1, message: `Unexpected key found in hero named ${hero}: ${key}`};
    				}
    				expectedPropType = expectedHeroProps.find(e => e.name === key).type;
    				if(!compareType(data.heroes[hero][key], expectedPropType)) {
    					return {retCode: 1, message: `Incorrect type for key ${key} in hero named ${hero}, expected ${expectedPropType}`};
    				}
    			}
    			// make sure that hero notes isn't longer than max
    			if(data.heroes[hero].notes.length > maxNoteLen) return {retCode: 1, message: `Hero notes for ${hero} cannot be longer than ${maxNoteLen} characters.`};
    		}
    		// make sure the description isn't longer than max
    		if(data.desc.length > maxDescLen) return {retCode: 1, message: `Description cannot be longer than ${maxDescLen} characters.`};
    		// make sure the number of tags is under max
    		if(data.tags.length > maxCompTags) return {retCode: 1, message: `Comps can have a max of ${maxCompTags} tags.`};
    	}

    	// everything should be good now, return the clean Comp object
    	return {retCode: 0, message: data};
    };

    // update test comps if necessary
    // function updateTestComps(appdata) {
    // 	let i;
    // 	for(const mcomp of testcomps) {
    // 		if(appdata.Comps.some(e => e.uuid === mcomp.uuid)) {
    // 			i = appdata.Comps.findIndex(e => e.uuid === mcomp.uuid);
    // 			if(mcomp.lastUpdate > appdata.Comps[i].lastUpdate) {
    // 				appdata.Comps[i] = mcomp;
    // 			}
    // 		}
    // 	}
    // }

    // function to build or add in new app data top level structures
    function buildAppData(data) {
    	const expectedProps = [
    		{name: 'activeView', default: 'comps'},
    		{name: 'selectedComp', default: null},
    		{name: 'selectedUUID', default: null},
    		{name: 'dismissImportWarn', default: false},
    		{name: 'dismissHLSearchInfo', default: false},
    		{name: 'dismissMHSearchInfo', default: false},
    		{name: 'maxDescLen', default: maxDescLen},
    		{name: 'maxCompTags', default: maxCompTags},
    		{name: 'maxNoteLen', default: maxNoteLen},
    		{name: 'compSearchStr', default: ''},
    		{name: 'HL', default: {}},
    		{name: 'MH', default: {}},
    		{name: 'REC', default: {}},
    		{name: 'Comps', default: []},
    	];
    	const expectedHLProps = [
    		{name: 'Sort', default: 'name'},
    		{name: 'Order', default: 'asc'},
    		{name: 'SearchStr', default: ''},
    		{name: 'ShowLB', default: true},
    		{name: 'ShowM', default: true},
    		{name: 'ShowW', default: true},
    		{name: 'ShowGB', default: true},
    		{name: 'ShowC', default: true},
    		{name: 'ShowH', default: true},
    		{name: 'ShowD', default: true},
    		{name: 'ShowInt', default: true},
    		{name: 'ShowAgi', default: true},
    		{name: 'ShowStr', default: true},
    		{name: 'ShowMage', default: true},
    		{name: 'ShowWar', default: true},
    		{name: 'ShowTank', default: true},
    		{name: 'ShowSup', default: true},
    		{name: 'ShowRan', default: true},
    	];
    	const expectedMHProps = [
    		{name: 'Sort', default: 'name'},
    		{name: 'Order', default: 'asc'},
    		{name: 'SearchStr', default: ''},
    		{name: 'ShowLB', default: true},
    		{name: 'ShowM', default: true},
    		{name: 'ShowW', default: true},
    		{name: 'ShowGB', default: true},
    		{name: 'ShowC', default: true},
    		{name: 'ShowH', default: true},
    		{name: 'ShowD', default: true},
    		{name: 'ShowInt', default: true},
    		{name: 'ShowAgi', default: true},
    		{name: 'ShowStr', default: true},
    		{name: 'ShowMage', default: true},
    		{name: 'ShowWar', default: true},
    		{name: 'ShowTank', default: true},
    		{name: 'ShowSup', default: true},
    		{name: 'ShowRan', default: true},
    		{name: 'List', default: {}},
    		{name: 'openSection', default: 0},
    	];
    	const expectedRECProps = [
    		{name: 'openSection', default: 0},
    	];

    	// make sure that data is an object (and nothing else)
    	if(!isObject$3(data)) throw new Error('AppData must be a plain Javascript object.');

    	// data must be an object at this point, so make sure it's consistent with the format we expect
    	// add top-level props as required
    	for(const prop of expectedProps) {
    		if(!(prop.name in data)) data[prop.name] = prop.default;
    	}
    	// delete extra top-level props
    	for(let prop in data) {
    		if(!expectedProps.some(e => e.name === prop)) delete data[prop];
    	}
    	// limits are special and should always be updated
    	data.maxDescLen = expectedProps.find(e => e.name === 'maxDescLen').default;
    	data.maxCompTags = expectedProps.find(e => e.name === 'maxCompTags').default;
    	data.maxNoteLen = expectedProps.find(e => e.name === 'maxNoteLen').default;

    	// add HL props as required
    	for(const prop of expectedHLProps) {
    		if(!(prop.name in data.HL)) data.HL[prop.name] = prop.default;
    	}
    	// delete extra HL props
    	for(let prop in data.HL) {
    		if(!expectedHLProps.some(e => e.name === prop)) delete data.HL[prop];
    	}

    	// add MH props as required
    	for(const prop of expectedMHProps) {
    		if(!(prop.name in data.MH)) data.MH[prop.name] = prop.default;
    	}
    	// delete extra MH props
    	for(let prop in data.MH) {
    		if(!expectedMHProps.some(e => e.name === prop)) delete data.MH[prop];
    	}
    	// rebuild MH.List
    	data.MH.List = buildMyHeroData(data.MH.List);

    	// add REC props as required
    	for(const prop of expectedRECProps) {
    		if(!(prop.name in data.REC)) data.REC[prop.name] = prop.default;
    	}
    	// delete extra REC props
    	for(let prop in data.REC) {
    		if(!expectedRECProps.some(e => e.name === prop)) delete data.REC[prop];
    	}

    	// rebuild Comps
    	data.Comps = buildCompsData(data.Comps);

    	// everything should be good now, return the clean AppData object
    	return data;
    }

    // function to build or add in new heroes from HeroData into MH.List
    function buildMyHeroData(data) {
    	const expectedProps = [
    		{name: 'claimed', default: false},
    		{name: 'ascendLv', default: 0},
    		{name: 'furn', default: 0},
    		{name: 'si', default: 0},
    	];

    	// make sure that data is an object (and nothing else)
    	if(!isObject$3(data)) throw new Error('My Hero List data must be a plain Javascript object.');

    	// data must be an object at this point, so make sure it's consistent with the format we expect
    	for(let i = 0; i < herodata.length; i++) {
    		if(!(herodata[i].id in data)) {
    			// add a hero key to data if it's missing
    			data[herodata[i].id] = { claimed: false, ascendLv: 0, furn: 0, si: -1, };
    		} else {
    			// add properties to heroes if they're missing
    			for(const prop of expectedProps) {
    				if(!(prop.name in data[herodata[i].id])) {
    					data[herodata[i].id][prop.name] = prop.default;
    				}
    			}
    		}
    		// reset ascendLv, SI, and Furn if the hero is unclaimed
    		if(!data[herodata[i].id].claimed) {
    			data[herodata[i].id].ascendLv = 0;
    			data[herodata[i].id].furn = 0;
    			data[herodata[i].id].si = -1;
    		}
    	}
    	for(const key in data) {
    		// delete any keys in data that aren't an id in herodata
    		if(!herodata.some(e => e.id === key)) delete data[key];
    		// delete extra properties 
    		for(const prop in data[key]) {
    			if(!expectedProps.some(e => e.name === prop)) delete data[key][prop];
    		}
    	}

    	// everything should be good now, return the clean MH.List object
    	return data;
    }

    // function to build or add new props to objects in the Comp array
    function buildCompsData(data) {
    	const expectedProps = [
    		{name: 'author', default: ''},
    		{name: 'desc', default: ''},
    		{name: 'draft', default: false},
    		{name: 'heroes', default: {}},
    		{name: 'lastUpdate', default: new Date()},
    		{name: 'lines', default: []},
    		{name: 'name', default: ''},
    		{name: 'starred', default: false},
    		{name: 'subs', default: []},
    		{name: 'uuid', default: ''},
    		{name: 'tags', default: []},
    	];
    	const expectedHeroProps = [
    		{name: 'ascendLv', default: 6},
    		{name: 'si', default: 20},
    		{name: 'furn', default: 3},
    		{name: 'artifacts', default: {}},
    		{name: 'core', default: false},
    		{name: 'notes', default: ''},
    	];
    	const expectedArtifactsProps = [
    		{name: 'primary', default: []},
    		{name: 'secondary', default: []},
    		{name: 'situational', default: []},
    	];
    	const expectedLineProps = [
    		{name: 'name', default: ''},
    		{name: 'heroes', default: ['unknown','unknown','unknown','unknown','unknown']},
    	];
    	const expectedSubProps = [
    		{name: 'name', default: ''},
    		{name: 'heroes', default: []},
    	];

    	// make sure that data is an array
    	if(!Array.isArray(data)) throw new Error('Comps must be an array.');

    	// data must be an array at this point, so make sure it's consistent with the format we expect
    	for(let comp of data) {
    		// add top-level props as required
    		for(const prop of expectedProps) {
    			if(!(prop.name in comp)) comp[prop.name] = prop.default;
    		}
    		// delete extra top-level props
    		for(let prop in comp) {
    			if(!expectedProps.some(e => e.name === prop)) delete comp[prop];
    		}
    		// clean up hero and artifacts props
    		for(const hero in comp.heroes) {
    			for(const prop of expectedHeroProps) {
    				if(!(prop.name in comp.heroes[hero])) comp.heroes[hero][prop.name] = prop.default;
    			}
    			for(let prop in comp.heroes[hero]) {
    				if(!expectedHeroProps.some(e => e.name === prop)) delete comp.heroes[hero][prop];
    			}
    			for(const prop of expectedArtifactsProps) {
    				if(!(prop.name in comp.heroes[hero].artifacts)) comp.heroes[hero].artifacts[prop.name] = prop.default;
    			}
    			for(let prop in comp.heroes[hero].artifacts) {
    				if(!expectedArtifactsProps.some(e => e.name === prop)) delete comp.heroes[hero].artifacts[prop];
    			}
    		}
    		// clean up line props
    		for(let line of comp.lines) {
    			for(const prop of expectedLineProps) {
    				if(!(prop.name in line)) line[prop.name] = prop.default;
    			}
    			for(let prop in line) {
    				if(!expectedLineProps.some(e => e.name === prop)) delete line[prop];
    			}
    		}
    		// clean up sub props
    		for(let sub of comp.subs) {
    			for(const prop of expectedSubProps) {
    				if(!(prop.name in sub)) sub[prop.name] = prop.default;
    			}
    			for(let prop in sub) {
    				if(!expectedSubProps.some(e => e.name === prop)) delete sub[prop];
    			}
    		}
    	}

    	// everything should be good now, return the clean Comp object
    	return data;
    }

    // utility function returns true iff data is an object (and nothing else)
    function isObject$3(data) {
    	// https://javascript.plainenglish.io/javascript-check-if-a-variable-is-an-object-and-nothing-else-not-an-array-a-set-etc-a3987ea08fd7
    	return Object.prototype.toString.call(data) === '[object Object]';
    }

    // utility function returns true iff data is a date object
    function isDate(data) {
    	return Object.prototype.toString.call(data) === '[object Date]';
    }

    // utility function returns true iff type of data matches type
    function compareType(data, type) {
    	switch(type) {
    		case 'object':
    			return isObject$3(data);
    		case 'array':
    			return Array.isArray(data);
    		case 'date':
    			return isDate(data);
    		case 'boolean':
    		case 'number':
    		case 'string':
    		case 'undefined':
    		case 'bigint':
    		case 'symbol':
    			return (typeof data === type);
    		default:
    			throw new Error(`Invalid type specified: ${type}. Must be object, array, boolean, number, string, undefined, bigint, or symbol.`);
    	}
    }

    // perform a consistency check on MH.List
    async function performMHValidation() {
    	const returnObj = await validateMyHeroData(appdata.MH.List);
    	if(returnObj.retCode !== 0) {
    		// validation error occurred
    		throw new Error(`MH.List validation error occurred: ${returnObj.message}`);
    	} else {
    		// message should contain a clean MH.List data object now
    		appdata.MH.List = returnObj.message;
    	}
    }

    // perform a consistency check on Comps
    async function performCompsValidation() {
    	let returnObj;
    	for(let comp of appdata.Comps) {
    		returnObj = await validateComp(comp);
    		if(returnObj.retCode !== 0) {
    			// validation error occurred
    			throw new Error(`Comp validation error occurred for comp named ${comp.name}: ${returnObj.message}`);
    		} else {
    			// message should contain a clean comp data object now
    			comp = returnObj.message;
    		}
    	}
    }

    if(window.localStorage.getItem('appData') !== null) {
    	// Load AppData from localstorage if it exists
    	appdata = JSON.parse(window.localStorage.getItem('appData'));
    	appdata.HL.SearchStr = '';
    	appdata.MH.SearchStr = '';
    	// rebuild app data structure (adds any new attributes and also rebuilds MH.List)
    	appdata = buildAppData(appdata);
    	// JSON doesn't parse date objects correctly, so need to re-initialize them
    	for(let comp of appdata.Comps) {
    		comp.lastUpdate = new Date(comp.lastUpdate);
    	}
    	// updateTestComps(appdata);
    } else {
    	// Otherwise initialize a clean AppData
    	appdata = buildAppData({});
    }

    performMHValidation();
    performCompsValidation();

    AppData = writable(appdata);

    var AppData$1 = AppData;

    function cubicOut(t) {
        const f = t - 1.0;
        return f * f * f + 1.0;
    }
    function quintOut(t) {
        return --t * t * t * t * t + 1;
    }

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function fade(node, { delay = 0, duration = 400, easing = identity } = {}) {
        const o = +getComputedStyle(node).opacity;
        return {
            delay,
            duration,
            easing,
            css: t => `opacity: ${t * o}`
        };
    }
    function crossfade(_a) {
        var { fallback } = _a, defaults = __rest(_a, ["fallback"]);
        const to_receive = new Map();
        const to_send = new Map();
        function crossfade(from, node, params) {
            const { delay = 0, duration = d => Math.sqrt(d) * 30, easing = cubicOut } = assign$3(assign$3({}, defaults), params);
            const to = node.getBoundingClientRect();
            const dx = from.left - to.left;
            const dy = from.top - to.top;
            const dw = from.width / to.width;
            const dh = from.height / to.height;
            const d = Math.sqrt(dx * dx + dy * dy);
            const style = getComputedStyle(node);
            const transform = style.transform === 'none' ? '' : style.transform;
            const opacity = +style.opacity;
            return {
                delay,
                duration: is_function(duration) ? duration(d) : duration,
                easing,
                css: (t, u) => `
				opacity: ${t * opacity};
				transform-origin: top left;
				transform: ${transform} translate(${u * dx}px,${u * dy}px) scale(${t + (1 - t) * dw}, ${t + (1 - t) * dh});
			`
            };
        }
        function transition(items, counterparts, intro) {
            return (node, params) => {
                items.set(params.key, {
                    rect: node.getBoundingClientRect()
                });
                return () => {
                    if (counterparts.has(params.key)) {
                        const { rect } = counterparts.get(params.key);
                        counterparts.delete(params.key);
                        return crossfade(rect, node, params);
                    }
                    // if the node is disappearing altogether
                    // (i.e. wasn't claimed by the other list)
                    // then we need to supply an outro
                    items.delete(params.key);
                    return fallback && fallback(node, params, intro);
                };
            };
        }
        return [
            transition(to_send, to_receive, false),
            transition(to_receive, to_send, true)
        ];
    }

    /* node_modules\svelte-simple-modal\src\Modal.svelte generated by Svelte v3.41.0 */

    const { Object: Object_1$3, window: window_1$2 } = globals;
    const file$o = "node_modules\\svelte-simple-modal\\src\\Modal.svelte";

    // (328:0) {#if Component}
    function create_if_block$g(ctx) {
    	let div3;
    	let div2;
    	let div1;
    	let t;
    	let div0;
    	let switch_instance;
    	let div1_transition;
    	let div3_transition;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block = /*state*/ ctx[0].closeButton && create_if_block_1$9(ctx);
    	var switch_value = /*Component*/ ctx[1];

    	function switch_props(ctx) {
    		return { $$inline: true };
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props());
    	}

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			div2 = element("div");
    			div1 = element("div");
    			if (if_block) if_block.c();
    			t = space();
    			div0 = element("div");
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			attr_dev(div0, "class", "content svelte-gximr3");
    			attr_dev(div0, "style", /*cssContent*/ ctx[8]);
    			add_location(div0, file$o, 356, 8, 8427);
    			attr_dev(div1, "class", "window svelte-gximr3");
    			attr_dev(div1, "role", "dialog");
    			attr_dev(div1, "aria-modal", "true");
    			attr_dev(div1, "style", /*cssWindow*/ ctx[7]);
    			add_location(div1, file$o, 337, 6, 7802);
    			attr_dev(div2, "class", "window-wrap svelte-gximr3");
    			attr_dev(div2, "style", /*cssWindowWrap*/ ctx[6]);
    			add_location(div2, file$o, 336, 4, 7731);
    			attr_dev(div3, "class", "bg svelte-gximr3");
    			attr_dev(div3, "style", /*cssBg*/ ctx[5]);
    			add_location(div3, file$o, 328, 2, 7521);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div2);
    			append_dev(div2, div1);
    			if (if_block) if_block.m(div1, null);
    			append_dev(div1, t);
    			append_dev(div1, div0);

    			if (switch_instance) {
    				mount_component(switch_instance, div0, null);
    			}

    			/*div1_binding*/ ctx[38](div1);
    			/*div2_binding*/ ctx[39](div2);
    			/*div3_binding*/ ctx[40](div3);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(
    						div1,
    						"introstart",
    						function () {
    							if (is_function(/*onOpen*/ ctx[12])) /*onOpen*/ ctx[12].apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					),
    					listen_dev(
    						div1,
    						"outrostart",
    						function () {
    							if (is_function(/*onClose*/ ctx[13])) /*onClose*/ ctx[13].apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					),
    					listen_dev(
    						div1,
    						"introend",
    						function () {
    							if (is_function(/*onOpened*/ ctx[14])) /*onOpened*/ ctx[14].apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					),
    					listen_dev(
    						div1,
    						"outroend",
    						function () {
    							if (is_function(/*onClosed*/ ctx[15])) /*onClosed*/ ctx[15].apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					),
    					listen_dev(div3, "mousedown", /*handleOuterMousedown*/ ctx[19], false, false, false),
    					listen_dev(div3, "mouseup", /*handleOuterMouseup*/ ctx[20], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (/*state*/ ctx[0].closeButton) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty[0] & /*state*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_1$9(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div1, t);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			if (switch_value !== (switch_value = /*Component*/ ctx[1])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props());
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, div0, null);
    				} else {
    					switch_instance = null;
    				}
    			}

    			if (!current || dirty[0] & /*cssContent*/ 256) {
    				attr_dev(div0, "style", /*cssContent*/ ctx[8]);
    			}

    			if (!current || dirty[0] & /*cssWindow*/ 128) {
    				attr_dev(div1, "style", /*cssWindow*/ ctx[7]);
    			}

    			if (!current || dirty[0] & /*cssWindowWrap*/ 64) {
    				attr_dev(div2, "style", /*cssWindowWrap*/ ctx[6]);
    			}

    			if (!current || dirty[0] & /*cssBg*/ 32) {
    				attr_dev(div3, "style", /*cssBg*/ ctx[5]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);

    			add_render_callback(() => {
    				if (!div1_transition) div1_transition = create_bidirectional_transition(div1, /*currentTransitionWindow*/ ctx[11], /*state*/ ctx[0].transitionWindowProps, true);
    				div1_transition.run(1);
    			});

    			add_render_callback(() => {
    				if (!div3_transition) div3_transition = create_bidirectional_transition(div3, /*currentTransitionBg*/ ctx[10], /*state*/ ctx[0].transitionBgProps, true);
    				div3_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			if (!div1_transition) div1_transition = create_bidirectional_transition(div1, /*currentTransitionWindow*/ ctx[11], /*state*/ ctx[0].transitionWindowProps, false);
    			div1_transition.run(0);
    			if (!div3_transition) div3_transition = create_bidirectional_transition(div3, /*currentTransitionBg*/ ctx[10], /*state*/ ctx[0].transitionBgProps, false);
    			div3_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			if (if_block) if_block.d();
    			if (switch_instance) destroy_component(switch_instance);
    			/*div1_binding*/ ctx[38](null);
    			if (detaching && div1_transition) div1_transition.end();
    			/*div2_binding*/ ctx[39](null);
    			/*div3_binding*/ ctx[40](null);
    			if (detaching && div3_transition) div3_transition.end();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$g.name,
    		type: "if",
    		source: "(328:0) {#if Component}",
    		ctx
    	});

    	return block;
    }

    // (350:8) {#if state.closeButton}
    function create_if_block_1$9(ctx) {
    	let show_if;
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block_2$7, create_else_block$c];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (dirty[0] & /*state*/ 1) show_if = !!/*isFunction*/ ctx[16](/*state*/ ctx[0].closeButton);
    		if (show_if) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx, [-1, -1]);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty$3();
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx, dirty);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$9.name,
    		type: "if",
    		source: "(350:8) {#if state.closeButton}",
    		ctx
    	});

    	return block;
    }

    // (353:10) {:else}
    function create_else_block$c(ctx) {
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			attr_dev(button, "class", "close svelte-gximr3");
    			attr_dev(button, "style", /*cssCloseButton*/ ctx[9]);
    			add_location(button, file$o, 353, 12, 8324);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*close*/ ctx[17], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*cssCloseButton*/ 512) {
    				attr_dev(button, "style", /*cssCloseButton*/ ctx[9]);
    			}
    		},
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$c.name,
    		type: "else",
    		source: "(353:10) {:else}",
    		ctx
    	});

    	return block;
    }

    // (351:10) {#if isFunction(state.closeButton)}
    function create_if_block_2$7(ctx) {
    	let switch_instance;
    	let switch_instance_anchor;
    	let current;
    	var switch_value = /*state*/ ctx[0].closeButton;

    	function switch_props(ctx) {
    		return {
    			props: { onClose: /*close*/ ctx[17] },
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props(ctx));
    	}

    	const block = {
    		c: function create() {
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			switch_instance_anchor = empty$3();
    		},
    		m: function mount(target, anchor) {
    			if (switch_instance) {
    				mount_component(switch_instance, target, anchor);
    			}

    			insert_dev(target, switch_instance_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (switch_value !== (switch_value = /*state*/ ctx[0].closeButton)) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props(ctx));
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
    				} else {
    					switch_instance = null;
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(switch_instance_anchor);
    			if (switch_instance) destroy_component(switch_instance, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$7.name,
    		type: "if",
    		source: "(351:10) {#if isFunction(state.closeButton)}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$r(ctx) {
    	let t;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block = /*Component*/ ctx[1] && create_if_block$g(ctx);
    	const default_slot_template = /*#slots*/ ctx[37].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[36], null);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			t = space();
    			if (default_slot) default_slot.c();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, t, anchor);

    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(window_1$2, "keydown", /*handleKeydown*/ ctx[18], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (/*Component*/ ctx[1]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty[0] & /*Component*/ 2) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$g(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(t.parentNode, t);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty[1] & /*$$scope*/ 32)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[36],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[36])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[36], dirty, null),
    						null
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(t);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$r.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function bind$1(Component, props = {}) {
    	return function ModalComponent(options) {
    		return new Component({
    				...options,
    				props: { ...props, ...options.props }
    			});
    	};
    }

    function instance$r($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Modal', slots, ['default']);
    	const dispatch = createEventDispatcher();
    	const baseSetContext = setContext;
    	let { show = null } = $$props;
    	let { key = 'simple-modal' } = $$props;
    	let { closeButton = true } = $$props;
    	let { closeOnEsc = true } = $$props;
    	let { closeOnOuterClick = true } = $$props;
    	let { styleBg = {} } = $$props;
    	let { styleWindowWrap = {} } = $$props;
    	let { styleWindow = {} } = $$props;
    	let { styleContent = {} } = $$props;
    	let { styleCloseButton = {} } = $$props;
    	let { setContext: setContext$1 = baseSetContext } = $$props;
    	let { transitionBg = fade } = $$props;
    	let { transitionBgProps = { duration: 250 } } = $$props;
    	let { transitionWindow = transitionBg } = $$props;
    	let { transitionWindowProps = transitionBgProps } = $$props;

    	const defaultState = {
    		closeButton,
    		closeOnEsc,
    		closeOnOuterClick,
    		styleBg,
    		styleWindowWrap,
    		styleWindow,
    		styleContent,
    		styleCloseButton,
    		transitionBg,
    		transitionBgProps,
    		transitionWindow,
    		transitionWindowProps
    	};

    	let state = { ...defaultState };
    	let Component = null;
    	let background;
    	let wrap;
    	let modalWindow;
    	let scrollY;
    	let cssBg;
    	let cssWindowWrap;
    	let cssWindow;
    	let cssContent;
    	let cssCloseButton;
    	let currentTransitionBg;
    	let currentTransitionWindow;
    	let prevBodyPosition;
    	let prevBodyOverflow;
    	let outerClickTarget;
    	const camelCaseToDash = str => str.replace(/([a-zA-Z])(?=[A-Z])/g, '$1-').toLowerCase();

    	const toCssString = props => props
    	? Object.keys(props).reduce((str, key) => `${str}; ${camelCaseToDash(key)}: ${props[key]}`, '')
    	: '';

    	const isFunction = f => !!(f && f.constructor && f.call && f.apply);

    	const updateStyleTransition = () => {
    		$$invalidate(5, cssBg = toCssString(Object.assign(
    			{},
    			{
    				width: window.innerWidth,
    				height: window.innerHeight
    			},
    			state.styleBg
    		)));

    		$$invalidate(6, cssWindowWrap = toCssString(state.styleWindowWrap));
    		$$invalidate(7, cssWindow = toCssString(state.styleWindow));
    		$$invalidate(8, cssContent = toCssString(state.styleContent));
    		$$invalidate(9, cssCloseButton = toCssString(state.styleCloseButton));
    		$$invalidate(10, currentTransitionBg = state.transitionBg);
    		$$invalidate(11, currentTransitionWindow = state.transitionWindow);
    	};

    	const toVoid = () => {
    		
    	};

    	let onOpen = toVoid;
    	let onClose = toVoid;
    	let onOpened = toVoid;
    	let onClosed = toVoid;

    	const open = (NewComponent, newProps = {}, options = {}, callback = {}) => {
    		$$invalidate(1, Component = bind$1(NewComponent, newProps));
    		$$invalidate(0, state = { ...defaultState, ...options });
    		updateStyleTransition();

    		($$invalidate(12, onOpen = event => {
    			if (callback.onOpen) callback.onOpen(event);
    			dispatch('open');
    			dispatch('opening'); // Deprecated. Do not use!
    		}), $$invalidate(13, onClose = event => {
    			if (callback.onClose) callback.onClose(event);
    			dispatch('close');
    			dispatch('closing'); // Deprecated. Do not use!
    		}), $$invalidate(14, onOpened = event => {
    			if (callback.onOpened) callback.onOpened(event);
    			dispatch('opened');
    		}));

    		$$invalidate(15, onClosed = event => {
    			if (callback.onClosed) callback.onClosed(event);
    			dispatch('closed');
    		});
    	};

    	const close = (callback = {}) => {
    		$$invalidate(13, onClose = callback.onClose || onClose);
    		$$invalidate(15, onClosed = callback.onClosed || onClosed);
    		$$invalidate(1, Component = null);
    	};

    	const handleKeydown = event => {
    		if (state.closeOnEsc && Component && event.key === 'Escape') {
    			event.preventDefault();
    			close();
    		}

    		if (Component && event.key === 'Tab') {
    			// trap focus
    			const nodes = modalWindow.querySelectorAll('*');

    			const tabbable = Array.from(nodes).filter(node => node.tabIndex >= 0);
    			let index = tabbable.indexOf(document.activeElement);
    			if (index === -1 && event.shiftKey) index = 0;
    			index += tabbable.length + (event.shiftKey ? -1 : 1);
    			index %= tabbable.length;
    			tabbable[index].focus();
    			event.preventDefault();
    		}
    	};

    	const handleOuterMousedown = event => {
    		if (state.closeOnOuterClick && (event.target === background || event.target === wrap)) outerClickTarget = event.target;
    	};

    	const handleOuterMouseup = event => {
    		if (state.closeOnOuterClick && event.target === outerClickTarget) {
    			event.preventDefault();
    			close();
    		}
    	};

    	const disableScroll = () => {
    		scrollY = window.scrollY;
    		prevBodyPosition = document.body.style.position;
    		prevBodyOverflow = document.body.style.overflow;
    		document.body.style.position = 'fixed';
    		document.body.style.top = `-${scrollY}px`;
    		document.body.style.overflow = 'hidden';
    	};

    	const enableScroll = () => {
    		document.body.style.position = prevBodyPosition || '';
    		document.body.style.top = '';
    		document.body.style.overflow = prevBodyOverflow || '';
    		window.scrollTo(0, scrollY);
    	};

    	setContext$1(key, { open, close });

    	onDestroy(() => {
    		close();
    	});

    	afterUpdate(() => {
    		if (Component) {
    			disableScroll();
    		} else {
    			enableScroll();
    		}
    	});

    	const writable_props = [
    		'show',
    		'key',
    		'closeButton',
    		'closeOnEsc',
    		'closeOnOuterClick',
    		'styleBg',
    		'styleWindowWrap',
    		'styleWindow',
    		'styleContent',
    		'styleCloseButton',
    		'setContext',
    		'transitionBg',
    		'transitionBgProps',
    		'transitionWindow',
    		'transitionWindowProps'
    	];

    	Object_1$3.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Modal> was created with unknown prop '${key}'`);
    	});

    	function div1_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			modalWindow = $$value;
    			$$invalidate(4, modalWindow);
    		});
    	}

    	function div2_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			wrap = $$value;
    			$$invalidate(3, wrap);
    		});
    	}

    	function div3_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			background = $$value;
    			$$invalidate(2, background);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('show' in $$props) $$invalidate(21, show = $$props.show);
    		if ('key' in $$props) $$invalidate(22, key = $$props.key);
    		if ('closeButton' in $$props) $$invalidate(23, closeButton = $$props.closeButton);
    		if ('closeOnEsc' in $$props) $$invalidate(24, closeOnEsc = $$props.closeOnEsc);
    		if ('closeOnOuterClick' in $$props) $$invalidate(25, closeOnOuterClick = $$props.closeOnOuterClick);
    		if ('styleBg' in $$props) $$invalidate(26, styleBg = $$props.styleBg);
    		if ('styleWindowWrap' in $$props) $$invalidate(27, styleWindowWrap = $$props.styleWindowWrap);
    		if ('styleWindow' in $$props) $$invalidate(28, styleWindow = $$props.styleWindow);
    		if ('styleContent' in $$props) $$invalidate(29, styleContent = $$props.styleContent);
    		if ('styleCloseButton' in $$props) $$invalidate(30, styleCloseButton = $$props.styleCloseButton);
    		if ('setContext' in $$props) $$invalidate(31, setContext$1 = $$props.setContext);
    		if ('transitionBg' in $$props) $$invalidate(32, transitionBg = $$props.transitionBg);
    		if ('transitionBgProps' in $$props) $$invalidate(33, transitionBgProps = $$props.transitionBgProps);
    		if ('transitionWindow' in $$props) $$invalidate(34, transitionWindow = $$props.transitionWindow);
    		if ('transitionWindowProps' in $$props) $$invalidate(35, transitionWindowProps = $$props.transitionWindowProps);
    		if ('$$scope' in $$props) $$invalidate(36, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		bind: bind$1,
    		svelte,
    		fade,
    		createEventDispatcher,
    		dispatch,
    		baseSetContext,
    		show,
    		key,
    		closeButton,
    		closeOnEsc,
    		closeOnOuterClick,
    		styleBg,
    		styleWindowWrap,
    		styleWindow,
    		styleContent,
    		styleCloseButton,
    		setContext: setContext$1,
    		transitionBg,
    		transitionBgProps,
    		transitionWindow,
    		transitionWindowProps,
    		defaultState,
    		state,
    		Component,
    		background,
    		wrap,
    		modalWindow,
    		scrollY,
    		cssBg,
    		cssWindowWrap,
    		cssWindow,
    		cssContent,
    		cssCloseButton,
    		currentTransitionBg,
    		currentTransitionWindow,
    		prevBodyPosition,
    		prevBodyOverflow,
    		outerClickTarget,
    		camelCaseToDash,
    		toCssString,
    		isFunction,
    		updateStyleTransition,
    		toVoid,
    		onOpen,
    		onClose,
    		onOpened,
    		onClosed,
    		open,
    		close,
    		handleKeydown,
    		handleOuterMousedown,
    		handleOuterMouseup,
    		disableScroll,
    		enableScroll
    	});

    	$$self.$inject_state = $$props => {
    		if ('show' in $$props) $$invalidate(21, show = $$props.show);
    		if ('key' in $$props) $$invalidate(22, key = $$props.key);
    		if ('closeButton' in $$props) $$invalidate(23, closeButton = $$props.closeButton);
    		if ('closeOnEsc' in $$props) $$invalidate(24, closeOnEsc = $$props.closeOnEsc);
    		if ('closeOnOuterClick' in $$props) $$invalidate(25, closeOnOuterClick = $$props.closeOnOuterClick);
    		if ('styleBg' in $$props) $$invalidate(26, styleBg = $$props.styleBg);
    		if ('styleWindowWrap' in $$props) $$invalidate(27, styleWindowWrap = $$props.styleWindowWrap);
    		if ('styleWindow' in $$props) $$invalidate(28, styleWindow = $$props.styleWindow);
    		if ('styleContent' in $$props) $$invalidate(29, styleContent = $$props.styleContent);
    		if ('styleCloseButton' in $$props) $$invalidate(30, styleCloseButton = $$props.styleCloseButton);
    		if ('setContext' in $$props) $$invalidate(31, setContext$1 = $$props.setContext);
    		if ('transitionBg' in $$props) $$invalidate(32, transitionBg = $$props.transitionBg);
    		if ('transitionBgProps' in $$props) $$invalidate(33, transitionBgProps = $$props.transitionBgProps);
    		if ('transitionWindow' in $$props) $$invalidate(34, transitionWindow = $$props.transitionWindow);
    		if ('transitionWindowProps' in $$props) $$invalidate(35, transitionWindowProps = $$props.transitionWindowProps);
    		if ('state' in $$props) $$invalidate(0, state = $$props.state);
    		if ('Component' in $$props) $$invalidate(1, Component = $$props.Component);
    		if ('background' in $$props) $$invalidate(2, background = $$props.background);
    		if ('wrap' in $$props) $$invalidate(3, wrap = $$props.wrap);
    		if ('modalWindow' in $$props) $$invalidate(4, modalWindow = $$props.modalWindow);
    		if ('scrollY' in $$props) scrollY = $$props.scrollY;
    		if ('cssBg' in $$props) $$invalidate(5, cssBg = $$props.cssBg);
    		if ('cssWindowWrap' in $$props) $$invalidate(6, cssWindowWrap = $$props.cssWindowWrap);
    		if ('cssWindow' in $$props) $$invalidate(7, cssWindow = $$props.cssWindow);
    		if ('cssContent' in $$props) $$invalidate(8, cssContent = $$props.cssContent);
    		if ('cssCloseButton' in $$props) $$invalidate(9, cssCloseButton = $$props.cssCloseButton);
    		if ('currentTransitionBg' in $$props) $$invalidate(10, currentTransitionBg = $$props.currentTransitionBg);
    		if ('currentTransitionWindow' in $$props) $$invalidate(11, currentTransitionWindow = $$props.currentTransitionWindow);
    		if ('prevBodyPosition' in $$props) prevBodyPosition = $$props.prevBodyPosition;
    		if ('prevBodyOverflow' in $$props) prevBodyOverflow = $$props.prevBodyOverflow;
    		if ('outerClickTarget' in $$props) outerClickTarget = $$props.outerClickTarget;
    		if ('onOpen' in $$props) $$invalidate(12, onOpen = $$props.onOpen);
    		if ('onClose' in $$props) $$invalidate(13, onClose = $$props.onClose);
    		if ('onOpened' in $$props) $$invalidate(14, onOpened = $$props.onOpened);
    		if ('onClosed' in $$props) $$invalidate(15, onClosed = $$props.onClosed);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*show*/ 2097152) {
    			{
    				if (isFunction(show)) {
    					open(show);
    				} else {
    					close();
    				}
    			}
    		}
    	};

    	return [
    		state,
    		Component,
    		background,
    		wrap,
    		modalWindow,
    		cssBg,
    		cssWindowWrap,
    		cssWindow,
    		cssContent,
    		cssCloseButton,
    		currentTransitionBg,
    		currentTransitionWindow,
    		onOpen,
    		onClose,
    		onOpened,
    		onClosed,
    		isFunction,
    		close,
    		handleKeydown,
    		handleOuterMousedown,
    		handleOuterMouseup,
    		show,
    		key,
    		closeButton,
    		closeOnEsc,
    		closeOnOuterClick,
    		styleBg,
    		styleWindowWrap,
    		styleWindow,
    		styleContent,
    		styleCloseButton,
    		setContext$1,
    		transitionBg,
    		transitionBgProps,
    		transitionWindow,
    		transitionWindowProps,
    		$$scope,
    		slots,
    		div1_binding,
    		div2_binding,
    		div3_binding
    	];
    }

    class Modal extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance$r,
    			create_fragment$r,
    			safe_not_equal,
    			{
    				show: 21,
    				key: 22,
    				closeButton: 23,
    				closeOnEsc: 24,
    				closeOnOuterClick: 25,
    				styleBg: 26,
    				styleWindowWrap: 27,
    				styleWindow: 28,
    				styleContent: 29,
    				styleCloseButton: 30,
    				setContext: 31,
    				transitionBg: 32,
    				transitionBgProps: 33,
    				transitionWindow: 34,
    				transitionWindowProps: 35
    			},
    			null,
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Modal",
    			options,
    			id: create_fragment$r.name
    		});
    	}

    	get show() {
    		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set show(value) {
    		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get key() {
    		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set key(value) {
    		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get closeButton() {
    		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set closeButton(value) {
    		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get closeOnEsc() {
    		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set closeOnEsc(value) {
    		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get closeOnOuterClick() {
    		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set closeOnOuterClick(value) {
    		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get styleBg() {
    		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set styleBg(value) {
    		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get styleWindowWrap() {
    		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set styleWindowWrap(value) {
    		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get styleWindow() {
    		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set styleWindow(value) {
    		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get styleContent() {
    		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set styleContent(value) {
    		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get styleCloseButton() {
    		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set styleCloseButton(value) {
    		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get setContext() {
    		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set setContext(value) {
    		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get transitionBg() {
    		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set transitionBg(value) {
    		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get transitionBgProps() {
    		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set transitionBgProps(value) {
    		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get transitionWindow() {
    		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set transitionWindow(value) {
    		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get transitionWindowProps() {
    		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set transitionWindowProps(value) {
    		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\components\Header.svelte generated by Svelte v3.41.0 */
    const file$n = "src\\components\\Header.svelte";

    function get_each_context$e(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[10] = list[i];
    	return child_ctx;
    }

    // (52:3) {#each menu as item}
    function create_each_block$e(ctx) {
    	let li;
    	let button;
    	let t0_value = /*item*/ ctx[10] + "";
    	let t0;
    	let button_class_value;
    	let t1;
    	let mounted;
    	let dispose;

    	function click_handler_2() {
    		return /*click_handler_2*/ ctx[7](/*item*/ ctx[10]);
    	}

    	const block = {
    		c: function create() {
    			li = element("li");
    			button = element("button");
    			t0 = text$2(t0_value);
    			t1 = space();
    			attr_dev(button, "type", "button");

    			attr_dev(button, "class", button_class_value = "" + (null_to_empty(/*$AppData*/ ctx[2].activeView === /*item*/ ctx[10].toLowerCase()
    			? 'selected'
    			: '') + " svelte-q0n9no"));

    			add_location(button, file$n, 53, 5, 1688);
    			attr_dev(li, "class", "svelte-q0n9no");
    			add_location(li, file$n, 52, 4, 1623);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, button);
    			append_dev(button, t0);
    			append_dev(li, t1);

    			if (!mounted) {
    				dispose = listen_dev(li, "click", click_handler_2, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*menu*/ 1 && t0_value !== (t0_value = /*item*/ ctx[10] + "")) set_data_dev(t0, t0_value);

    			if (dirty & /*$AppData, menu*/ 5 && button_class_value !== (button_class_value = "" + (null_to_empty(/*$AppData*/ ctx[2].activeView === /*item*/ ctx[10].toLowerCase()
    			? 'selected'
    			: '') + " svelte-q0n9no"))) {
    				attr_dev(button, "class", button_class_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$e.name,
    		type: "each",
    		source: "(52:3) {#each menu as item}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$q(ctx) {
    	let nav;
    	let div2;
    	let div1;
    	let div0;
    	let div1_class_value;
    	let t0;
    	let ul;
    	let li;
    	let button;
    	let img;
    	let img_src_value;
    	let t1;
    	let ul_class_value;
    	let mounted;
    	let dispose;
    	let each_value = /*menu*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$e(get_each_context$e(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			nav = element("nav");
    			div2 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			t0 = space();
    			ul = element("ul");
    			li = element("li");
    			button = element("button");
    			img = element("img");
    			t1 = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div0, "class", "middle-line svelte-q0n9no");
    			add_location(div0, file$n, 45, 3, 1284);
    			attr_dev(div1, "class", div1_class_value = "mobile-icon " + (/*showMobileMenu*/ ctx[1] ? 'active' : '') + " svelte-q0n9no");
    			add_location(div1, file$n, 44, 2, 1180);
    			if (!src_url_equal(img.src, img_src_value = "./img/app/afkbuilder_logo.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "AFKBuilder");
    			attr_dev(img, "class", "svelte-q0n9no");
    			add_location(img, file$n, 49, 39, 1515);
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "logo svelte-q0n9no");
    			add_location(button, file$n, 49, 4, 1480);
    			attr_dev(li, "class", "logoContainer svelte-q0n9no");
    			add_location(li, file$n, 48, 3, 1391);
    			attr_dev(ul, "class", ul_class_value = "navbar-list " + (/*showMobileMenu*/ ctx[1] ? 'mobile' : '') + " svelte-q0n9no");
    			add_location(ul, file$n, 47, 2, 1329);
    			attr_dev(div2, "class", "inner svelte-q0n9no");
    			add_location(div2, file$n, 43, 1, 1157);
    			attr_dev(nav, "class", "svelte-q0n9no");
    			add_location(nav, file$n, 42, 0, 1149);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, nav, anchor);
    			append_dev(nav, div2);
    			append_dev(div2, div1);
    			append_dev(div1, div0);
    			append_dev(div2, t0);
    			append_dev(div2, ul);
    			append_dev(ul, li);
    			append_dev(li, button);
    			append_dev(button, img);
    			append_dev(ul, t1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(ul, null);
    			}

    			if (!mounted) {
    				dispose = [
    					listen_dev(div1, "click", /*click_handler*/ ctx[5], false, false, false),
    					listen_dev(li, "click", /*click_handler_1*/ ctx[6], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*showMobileMenu*/ 2 && div1_class_value !== (div1_class_value = "mobile-icon " + (/*showMobileMenu*/ ctx[1] ? 'active' : '') + " svelte-q0n9no")) {
    				attr_dev(div1, "class", div1_class_value);
    			}

    			if (dirty & /*handleMenuChange, menu, $AppData*/ 13) {
    				each_value = /*menu*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$e(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$e(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(ul, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (dirty & /*showMobileMenu*/ 2 && ul_class_value !== (ul_class_value = "navbar-list " + (/*showMobileMenu*/ ctx[1] ? 'mobile' : '') + " svelte-q0n9no")) {
    				attr_dev(ul, "class", ul_class_value);
    			}
    		},
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(nav);
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$q.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$q($$self, $$props, $$invalidate) {
    	let $AppData;
    	validate_store(AppData$1, 'AppData');
    	component_subscribe($$self, AppData$1, $$value => $$invalidate(2, $AppData = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Header', slots, []);
    	let { menu = [] } = $$props;
    	const dispatch = createEventDispatcher();
    	let showMobileMenu = false;

    	function handleMenuChange(item) {
    		const queryString = window.location.search;
    		const urlParams = new URLSearchParams(queryString);

    		if (urlParams.has('view')) {
    			if (urlParams.get('view') === item) {
    				history.replaceState({ view: item, modal: false }, item, `?view=${item}`);
    			} else {
    				history.pushState({ view: item, modal: false }, item, `?view=${item}`);
    			}
    		} else {
    			history.pushState({ view: item, modal: false }, item, `?view=${item}`);
    		}

    		set_store_value(AppData$1, $AppData.activeView = item, $AppData);
    		dispatch('saveData');
    		$$invalidate(1, showMobileMenu = false);
    	}

    	function handleMobileIconClick() {
    		$$invalidate(1, showMobileMenu = !showMobileMenu);
    	}

    	function mediaQueryHandler(e) {
    		// Reset mobile state
    		if (!e.matches) {
    			$$invalidate(1, showMobileMenu = false);
    		}
    	}

    	onMount(async () => {
    		const mediaListener = window.matchMedia("(max-width: 767px)");
    		mediaListener.addEventListener('change', mediaQueryHandler);
    	});

    	const writable_props = ['menu'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Header> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => handleMobileIconClick();
    	const click_handler_1 = () => handleMenuChange(menu[0].toLowerCase());
    	const click_handler_2 = item => handleMenuChange(item.toLowerCase());

    	$$self.$$set = $$props => {
    		if ('menu' in $$props) $$invalidate(0, menu = $$props.menu);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		createEventDispatcher,
    		AppData: AppData$1,
    		menu,
    		dispatch,
    		showMobileMenu,
    		handleMenuChange,
    		handleMobileIconClick,
    		mediaQueryHandler,
    		$AppData
    	});

    	$$self.$inject_state = $$props => {
    		if ('menu' in $$props) $$invalidate(0, menu = $$props.menu);
    		if ('showMobileMenu' in $$props) $$invalidate(1, showMobileMenu = $$props.showMobileMenu);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		menu,
    		showMobileMenu,
    		$AppData,
    		handleMenuChange,
    		handleMobileIconClick,
    		click_handler,
    		click_handler_1,
    		click_handler_2
    	];
    }

    class Header extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$q, create_fragment$q, safe_not_equal, { menu: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Header",
    			options,
    			id: create_fragment$q.name
    		});
    	}

    	get menu() {
    		throw new Error("<Header>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set menu(value) {
    		throw new Error("<Header>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var Aacute$2 = "Á";
    var aacute$2 = "á";
    var Abreve$1 = "Ă";
    var abreve$1 = "ă";
    var ac$1 = "∾";
    var acd$1 = "∿";
    var acE$1 = "∾̳";
    var Acirc$2 = "Â";
    var acirc$2 = "â";
    var acute$2 = "´";
    var Acy$1 = "А";
    var acy$1 = "а";
    var AElig$2 = "Æ";
    var aelig$2 = "æ";
    var af$1 = "⁡";
    var Afr$1 = "𝔄";
    var afr$1 = "𝔞";
    var Agrave$2 = "À";
    var agrave$2 = "à";
    var alefsym$1 = "ℵ";
    var aleph$1 = "ℵ";
    var Alpha$1 = "Α";
    var alpha$1 = "α";
    var Amacr$1 = "Ā";
    var amacr$1 = "ā";
    var amalg$1 = "⨿";
    var amp$3 = "&";
    var AMP$2 = "&";
    var andand$1 = "⩕";
    var And$1 = "⩓";
    var and$1 = "∧";
    var andd$1 = "⩜";
    var andslope$1 = "⩘";
    var andv$1 = "⩚";
    var ang$1 = "∠";
    var ange$1 = "⦤";
    var angle$1 = "∠";
    var angmsdaa$1 = "⦨";
    var angmsdab$1 = "⦩";
    var angmsdac$1 = "⦪";
    var angmsdad$1 = "⦫";
    var angmsdae$1 = "⦬";
    var angmsdaf$1 = "⦭";
    var angmsdag$1 = "⦮";
    var angmsdah$1 = "⦯";
    var angmsd$1 = "∡";
    var angrt$1 = "∟";
    var angrtvb$1 = "⊾";
    var angrtvbd$1 = "⦝";
    var angsph$1 = "∢";
    var angst$1 = "Å";
    var angzarr$1 = "⍼";
    var Aogon$1 = "Ą";
    var aogon$1 = "ą";
    var Aopf$1 = "𝔸";
    var aopf$1 = "𝕒";
    var apacir$1 = "⩯";
    var ap$1 = "≈";
    var apE$1 = "⩰";
    var ape$1 = "≊";
    var apid$1 = "≋";
    var apos$2 = "'";
    var ApplyFunction$1 = "⁡";
    var approx$1 = "≈";
    var approxeq$1 = "≊";
    var Aring$2 = "Å";
    var aring$2 = "å";
    var Ascr$1 = "𝒜";
    var ascr$1 = "𝒶";
    var Assign$1 = "≔";
    var ast$1 = "*";
    var asymp$1 = "≈";
    var asympeq$1 = "≍";
    var Atilde$2 = "Ã";
    var atilde$2 = "ã";
    var Auml$2 = "Ä";
    var auml$2 = "ä";
    var awconint$1 = "∳";
    var awint$1 = "⨑";
    var backcong$1 = "≌";
    var backepsilon$1 = "϶";
    var backprime$1 = "‵";
    var backsim$1 = "∽";
    var backsimeq$1 = "⋍";
    var Backslash$1 = "∖";
    var Barv$1 = "⫧";
    var barvee$1 = "⊽";
    var barwed$1 = "⌅";
    var Barwed$1 = "⌆";
    var barwedge$1 = "⌅";
    var bbrk$1 = "⎵";
    var bbrktbrk$1 = "⎶";
    var bcong$1 = "≌";
    var Bcy$1 = "Б";
    var bcy$1 = "б";
    var bdquo$1 = "„";
    var becaus$1 = "∵";
    var because$1 = "∵";
    var Because$1 = "∵";
    var bemptyv$1 = "⦰";
    var bepsi$1 = "϶";
    var bernou$1 = "ℬ";
    var Bernoullis$1 = "ℬ";
    var Beta$1 = "Β";
    var beta$1 = "β";
    var beth$1 = "ℶ";
    var between$2 = "≬";
    var Bfr$1 = "𝔅";
    var bfr$1 = "𝔟";
    var bigcap$1 = "⋂";
    var bigcirc$1 = "◯";
    var bigcup$1 = "⋃";
    var bigodot$1 = "⨀";
    var bigoplus$1 = "⨁";
    var bigotimes$1 = "⨂";
    var bigsqcup$1 = "⨆";
    var bigstar$1 = "★";
    var bigtriangledown$1 = "▽";
    var bigtriangleup$1 = "△";
    var biguplus$1 = "⨄";
    var bigvee$1 = "⋁";
    var bigwedge$1 = "⋀";
    var bkarow$1 = "⤍";
    var blacklozenge$1 = "⧫";
    var blacksquare$1 = "▪";
    var blacktriangle$1 = "▴";
    var blacktriangledown$1 = "▾";
    var blacktriangleleft$1 = "◂";
    var blacktriangleright$1 = "▸";
    var blank$1 = "␣";
    var blk12$1 = "▒";
    var blk14$1 = "░";
    var blk34$1 = "▓";
    var block$2 = "█";
    var bne$1 = "=⃥";
    var bnequiv$1 = "≡⃥";
    var bNot$1 = "⫭";
    var bnot$1 = "⌐";
    var Bopf$1 = "𝔹";
    var bopf$1 = "𝕓";
    var bot$1 = "⊥";
    var bottom$1 = "⊥";
    var bowtie$1 = "⋈";
    var boxbox$1 = "⧉";
    var boxdl$1 = "┐";
    var boxdL$1 = "╕";
    var boxDl$1 = "╖";
    var boxDL$1 = "╗";
    var boxdr$1 = "┌";
    var boxdR$1 = "╒";
    var boxDr$1 = "╓";
    var boxDR$1 = "╔";
    var boxh$1 = "─";
    var boxH$1 = "═";
    var boxhd$1 = "┬";
    var boxHd$1 = "╤";
    var boxhD$1 = "╥";
    var boxHD$1 = "╦";
    var boxhu$1 = "┴";
    var boxHu$1 = "╧";
    var boxhU$1 = "╨";
    var boxHU$1 = "╩";
    var boxminus$1 = "⊟";
    var boxplus$1 = "⊞";
    var boxtimes$1 = "⊠";
    var boxul$1 = "┘";
    var boxuL$1 = "╛";
    var boxUl$1 = "╜";
    var boxUL$1 = "╝";
    var boxur$1 = "└";
    var boxuR$1 = "╘";
    var boxUr$1 = "╙";
    var boxUR$1 = "╚";
    var boxv$1 = "│";
    var boxV$1 = "║";
    var boxvh$1 = "┼";
    var boxvH$1 = "╪";
    var boxVh$1 = "╫";
    var boxVH$1 = "╬";
    var boxvl$1 = "┤";
    var boxvL$1 = "╡";
    var boxVl$1 = "╢";
    var boxVL$1 = "╣";
    var boxvr$1 = "├";
    var boxvR$1 = "╞";
    var boxVr$1 = "╟";
    var boxVR$1 = "╠";
    var bprime$1 = "‵";
    var breve$1 = "˘";
    var Breve$1 = "˘";
    var brvbar$2 = "¦";
    var bscr$1 = "𝒷";
    var Bscr$1 = "ℬ";
    var bsemi$1 = "⁏";
    var bsim$1 = "∽";
    var bsime$1 = "⋍";
    var bsolb$1 = "⧅";
    var bsol$1 = "\\";
    var bsolhsub$1 = "⟈";
    var bull$1 = "•";
    var bullet$1 = "•";
    var bump$1 = "≎";
    var bumpE$1 = "⪮";
    var bumpe$1 = "≏";
    var Bumpeq$1 = "≎";
    var bumpeq$1 = "≏";
    var Cacute$1 = "Ć";
    var cacute$1 = "ć";
    var capand$1 = "⩄";
    var capbrcup$1 = "⩉";
    var capcap$1 = "⩋";
    var cap$1 = "∩";
    var Cap$1 = "⋒";
    var capcup$1 = "⩇";
    var capdot$1 = "⩀";
    var CapitalDifferentialD$1 = "ⅅ";
    var caps$1 = "∩︀";
    var caret$1 = "⁁";
    var caron$1 = "ˇ";
    var Cayleys$1 = "ℭ";
    var ccaps$1 = "⩍";
    var Ccaron$1 = "Č";
    var ccaron$1 = "č";
    var Ccedil$2 = "Ç";
    var ccedil$2 = "ç";
    var Ccirc$1 = "Ĉ";
    var ccirc$1 = "ĉ";
    var Cconint$1 = "∰";
    var ccups$1 = "⩌";
    var ccupssm$1 = "⩐";
    var Cdot$1 = "Ċ";
    var cdot$1 = "ċ";
    var cedil$2 = "¸";
    var Cedilla$1 = "¸";
    var cemptyv$1 = "⦲";
    var cent$2 = "¢";
    var centerdot$1 = "·";
    var CenterDot$1 = "·";
    var cfr$1 = "𝔠";
    var Cfr$1 = "ℭ";
    var CHcy$1 = "Ч";
    var chcy$1 = "ч";
    var check$1 = "✓";
    var checkmark$1 = "✓";
    var Chi$1 = "Χ";
    var chi$1 = "χ";
    var circ$1 = "ˆ";
    var circeq$1 = "≗";
    var circlearrowleft$1 = "↺";
    var circlearrowright$1 = "↻";
    var circledast$1 = "⊛";
    var circledcirc$1 = "⊚";
    var circleddash$1 = "⊝";
    var CircleDot$1 = "⊙";
    var circledR$1 = "®";
    var circledS$1 = "Ⓢ";
    var CircleMinus$1 = "⊖";
    var CirclePlus$1 = "⊕";
    var CircleTimes$1 = "⊗";
    var cir$1 = "○";
    var cirE$1 = "⧃";
    var cire$1 = "≗";
    var cirfnint$1 = "⨐";
    var cirmid$1 = "⫯";
    var cirscir$1 = "⧂";
    var ClockwiseContourIntegral$1 = "∲";
    var CloseCurlyDoubleQuote$1 = "”";
    var CloseCurlyQuote$1 = "’";
    var clubs$2 = "♣";
    var clubsuit$1 = "♣";
    var colon$1 = ":";
    var Colon$1 = "∷";
    var Colone$1 = "⩴";
    var colone$1 = "≔";
    var coloneq$1 = "≔";
    var comma$1 = ",";
    var commat$1 = "@";
    var comp$1 = "∁";
    var compfn$1 = "∘";
    var complement$1 = "∁";
    var complexes$1 = "ℂ";
    var cong$1 = "≅";
    var congdot$1 = "⩭";
    var Congruent$1 = "≡";
    var conint$1 = "∮";
    var Conint$1 = "∯";
    var ContourIntegral$1 = "∮";
    var copf$1 = "𝕔";
    var Copf$1 = "ℂ";
    var coprod$1 = "∐";
    var Coproduct$1 = "∐";
    var copy$3 = "©";
    var COPY$2 = "©";
    var copysr$1 = "℗";
    var CounterClockwiseContourIntegral$1 = "∳";
    var crarr$1 = "↵";
    var cross$1 = "✗";
    var Cross$1 = "⨯";
    var Cscr$1 = "𝒞";
    var cscr$1 = "𝒸";
    var csub$1 = "⫏";
    var csube$1 = "⫑";
    var csup$1 = "⫐";
    var csupe$1 = "⫒";
    var ctdot$1 = "⋯";
    var cudarrl$1 = "⤸";
    var cudarrr$1 = "⤵";
    var cuepr$1 = "⋞";
    var cuesc$1 = "⋟";
    var cularr$1 = "↶";
    var cularrp$1 = "⤽";
    var cupbrcap$1 = "⩈";
    var cupcap$1 = "⩆";
    var CupCap$1 = "≍";
    var cup$1 = "∪";
    var Cup$1 = "⋓";
    var cupcup$1 = "⩊";
    var cupdot$1 = "⊍";
    var cupor$1 = "⩅";
    var cups$1 = "∪︀";
    var curarr$1 = "↷";
    var curarrm$1 = "⤼";
    var curlyeqprec$1 = "⋞";
    var curlyeqsucc$1 = "⋟";
    var curlyvee$1 = "⋎";
    var curlywedge$1 = "⋏";
    var curren$2 = "¤";
    var curvearrowleft$1 = "↶";
    var curvearrowright$1 = "↷";
    var cuvee$1 = "⋎";
    var cuwed$1 = "⋏";
    var cwconint$1 = "∲";
    var cwint$1 = "∱";
    var cylcty$1 = "⌭";
    var dagger$2 = "†";
    var Dagger$1 = "‡";
    var daleth$1 = "ℸ";
    var darr$1 = "↓";
    var Darr$1 = "↡";
    var dArr$1 = "⇓";
    var dash$2 = "‐";
    var Dashv$1 = "⫤";
    var dashv$1 = "⊣";
    var dbkarow$1 = "⤏";
    var dblac$1 = "˝";
    var Dcaron$1 = "Ď";
    var dcaron$1 = "ď";
    var Dcy$1 = "Д";
    var dcy$1 = "д";
    var ddagger$1 = "‡";
    var ddarr$1 = "⇊";
    var DD$1 = "ⅅ";
    var dd$1 = "ⅆ";
    var DDotrahd$1 = "⤑";
    var ddotseq$1 = "⩷";
    var deg$2 = "°";
    var Del$1 = "∇";
    var Delta$1 = "Δ";
    var delta$1 = "δ";
    var demptyv$1 = "⦱";
    var dfisht$1 = "⥿";
    var Dfr$1 = "𝔇";
    var dfr$1 = "𝔡";
    var dHar$1 = "⥥";
    var dharl$1 = "⇃";
    var dharr$1 = "⇂";
    var DiacriticalAcute$1 = "´";
    var DiacriticalDot$1 = "˙";
    var DiacriticalDoubleAcute$1 = "˝";
    var DiacriticalGrave$1 = "`";
    var DiacriticalTilde$1 = "˜";
    var diam$1 = "⋄";
    var diamond$1 = "⋄";
    var Diamond$1 = "⋄";
    var diamondsuit$1 = "♦";
    var diams$1 = "♦";
    var die$1 = "¨";
    var DifferentialD$1 = "ⅆ";
    var digamma$1 = "ϝ";
    var disin$1 = "⋲";
    var div$1 = "÷";
    var divide$2 = "÷";
    var divideontimes$1 = "⋇";
    var divonx$1 = "⋇";
    var DJcy$1 = "Ђ";
    var djcy$1 = "ђ";
    var dlcorn$1 = "⌞";
    var dlcrop$1 = "⌍";
    var dollar$2 = "$";
    var Dopf$1 = "𝔻";
    var dopf$1 = "𝕕";
    var Dot$1 = "¨";
    var dot$1 = "˙";
    var DotDot$1 = "⃜";
    var doteq$1 = "≐";
    var doteqdot$1 = "≑";
    var DotEqual$1 = "≐";
    var dotminus$1 = "∸";
    var dotplus$1 = "∔";
    var dotsquare$1 = "⊡";
    var doublebarwedge$1 = "⌆";
    var DoubleContourIntegral$1 = "∯";
    var DoubleDot$1 = "¨";
    var DoubleDownArrow$1 = "⇓";
    var DoubleLeftArrow$1 = "⇐";
    var DoubleLeftRightArrow$1 = "⇔";
    var DoubleLeftTee$1 = "⫤";
    var DoubleLongLeftArrow$1 = "⟸";
    var DoubleLongLeftRightArrow$1 = "⟺";
    var DoubleLongRightArrow$1 = "⟹";
    var DoubleRightArrow$1 = "⇒";
    var DoubleRightTee$1 = "⊨";
    var DoubleUpArrow$1 = "⇑";
    var DoubleUpDownArrow$1 = "⇕";
    var DoubleVerticalBar$1 = "∥";
    var DownArrowBar$1 = "⤓";
    var downarrow$1 = "↓";
    var DownArrow$1 = "↓";
    var Downarrow$1 = "⇓";
    var DownArrowUpArrow$1 = "⇵";
    var DownBreve$1 = "̑";
    var downdownarrows$1 = "⇊";
    var downharpoonleft$1 = "⇃";
    var downharpoonright$1 = "⇂";
    var DownLeftRightVector$1 = "⥐";
    var DownLeftTeeVector$1 = "⥞";
    var DownLeftVectorBar$1 = "⥖";
    var DownLeftVector$1 = "↽";
    var DownRightTeeVector$1 = "⥟";
    var DownRightVectorBar$1 = "⥗";
    var DownRightVector$1 = "⇁";
    var DownTeeArrow$1 = "↧";
    var DownTee$1 = "⊤";
    var drbkarow$1 = "⤐";
    var drcorn$1 = "⌟";
    var drcrop$1 = "⌌";
    var Dscr$1 = "𝒟";
    var dscr$1 = "𝒹";
    var DScy$1 = "Ѕ";
    var dscy$1 = "ѕ";
    var dsol$1 = "⧶";
    var Dstrok$1 = "Đ";
    var dstrok$1 = "đ";
    var dtdot$1 = "⋱";
    var dtri$1 = "▿";
    var dtrif$1 = "▾";
    var duarr$1 = "⇵";
    var duhar$1 = "⥯";
    var dwangle$1 = "⦦";
    var DZcy$1 = "Џ";
    var dzcy$1 = "џ";
    var dzigrarr$1 = "⟿";
    var Eacute$2 = "É";
    var eacute$2 = "é";
    var easter$1 = "⩮";
    var Ecaron$1 = "Ě";
    var ecaron$1 = "ě";
    var Ecirc$2 = "Ê";
    var ecirc$2 = "ê";
    var ecir$1 = "≖";
    var ecolon$1 = "≕";
    var Ecy$1 = "Э";
    var ecy$1 = "э";
    var eDDot$1 = "⩷";
    var Edot$1 = "Ė";
    var edot$1 = "ė";
    var eDot$1 = "≑";
    var ee$1 = "ⅇ";
    var efDot$1 = "≒";
    var Efr$1 = "𝔈";
    var efr$1 = "𝔢";
    var eg$1 = "⪚";
    var Egrave$2 = "È";
    var egrave$2 = "è";
    var egs$1 = "⪖";
    var egsdot$1 = "⪘";
    var el$1 = "⪙";
    var Element$2 = "∈";
    var elinters$1 = "⏧";
    var ell$1 = "ℓ";
    var els$1 = "⪕";
    var elsdot$1 = "⪗";
    var Emacr$1 = "Ē";
    var emacr$1 = "ē";
    var empty$2 = "∅";
    var emptyset$1 = "∅";
    var EmptySmallSquare$1 = "◻";
    var emptyv$1 = "∅";
    var EmptyVerySmallSquare$1 = "▫";
    var emsp13$1 = " ";
    var emsp14$1 = " ";
    var emsp$1 = " ";
    var ENG$1 = "Ŋ";
    var eng$1 = "ŋ";
    var ensp$1 = " ";
    var Eogon$1 = "Ę";
    var eogon$1 = "ę";
    var Eopf$1 = "𝔼";
    var eopf$1 = "𝕖";
    var epar$1 = "⋕";
    var eparsl$1 = "⧣";
    var eplus$1 = "⩱";
    var epsi$1 = "ε";
    var Epsilon$1 = "Ε";
    var epsilon$1 = "ε";
    var epsiv$1 = "ϵ";
    var eqcirc$1 = "≖";
    var eqcolon$1 = "≕";
    var eqsim$1 = "≂";
    var eqslantgtr$1 = "⪖";
    var eqslantless$1 = "⪕";
    var Equal$1 = "⩵";
    var equals$1 = "=";
    var EqualTilde$1 = "≂";
    var equest$1 = "≟";
    var Equilibrium$1 = "⇌";
    var equiv$1 = "≡";
    var equivDD$1 = "⩸";
    var eqvparsl$1 = "⧥";
    var erarr$1 = "⥱";
    var erDot$1 = "≓";
    var escr$1 = "ℯ";
    var Escr$1 = "ℰ";
    var esdot$1 = "≐";
    var Esim$1 = "⩳";
    var esim$1 = "≂";
    var Eta$1 = "Η";
    var eta$1 = "η";
    var ETH$2 = "Ð";
    var eth$2 = "ð";
    var Euml$2 = "Ë";
    var euml$2 = "ë";
    var euro$2 = "€";
    var excl$1 = "!";
    var exist$1 = "∃";
    var Exists$1 = "∃";
    var expectation$1 = "ℰ";
    var exponentiale$1 = "ⅇ";
    var ExponentialE$1 = "ⅇ";
    var fallingdotseq$1 = "≒";
    var Fcy$1 = "Ф";
    var fcy$1 = "ф";
    var female$1 = "♀";
    var ffilig$1 = "ﬃ";
    var fflig$1 = "ﬀ";
    var ffllig$1 = "ﬄ";
    var Ffr$1 = "𝔉";
    var ffr$1 = "𝔣";
    var filig$1 = "ﬁ";
    var FilledSmallSquare$1 = "◼";
    var FilledVerySmallSquare$1 = "▪";
    var fjlig$1 = "fj";
    var flat$1 = "♭";
    var fllig$1 = "ﬂ";
    var fltns$1 = "▱";
    var fnof$1 = "ƒ";
    var Fopf$1 = "𝔽";
    var fopf$1 = "𝕗";
    var forall$1 = "∀";
    var ForAll$1 = "∀";
    var fork$1 = "⋔";
    var forkv$1 = "⫙";
    var Fouriertrf$1 = "ℱ";
    var fpartint$1 = "⨍";
    var frac12$2 = "½";
    var frac13$1 = "⅓";
    var frac14$2 = "¼";
    var frac15$1 = "⅕";
    var frac16$1 = "⅙";
    var frac18$1 = "⅛";
    var frac23$1 = "⅔";
    var frac25$1 = "⅖";
    var frac34$2 = "¾";
    var frac35$1 = "⅗";
    var frac38$1 = "⅜";
    var frac45$1 = "⅘";
    var frac56$1 = "⅚";
    var frac58$1 = "⅝";
    var frac78$1 = "⅞";
    var frasl$1 = "⁄";
    var frown$1 = "⌢";
    var fscr$1 = "𝒻";
    var Fscr$1 = "ℱ";
    var gacute$1 = "ǵ";
    var Gamma$1 = "Γ";
    var gamma$1 = "γ";
    var Gammad$1 = "Ϝ";
    var gammad$1 = "ϝ";
    var gap$1 = "⪆";
    var Gbreve$1 = "Ğ";
    var gbreve$1 = "ğ";
    var Gcedil$1 = "Ģ";
    var Gcirc$1 = "Ĝ";
    var gcirc$1 = "ĝ";
    var Gcy$1 = "Г";
    var gcy$1 = "г";
    var Gdot$1 = "Ġ";
    var gdot$1 = "ġ";
    var ge$1 = "≥";
    var gE$1 = "≧";
    var gEl$1 = "⪌";
    var gel$1 = "⋛";
    var geq$1 = "≥";
    var geqq$1 = "≧";
    var geqslant$1 = "⩾";
    var gescc$1 = "⪩";
    var ges$1 = "⩾";
    var gesdot$1 = "⪀";
    var gesdoto$1 = "⪂";
    var gesdotol$1 = "⪄";
    var gesl$1 = "⋛︀";
    var gesles$1 = "⪔";
    var Gfr$1 = "𝔊";
    var gfr$1 = "𝔤";
    var gg$1 = "≫";
    var Gg$1 = "⋙";
    var ggg$1 = "⋙";
    var gimel$1 = "ℷ";
    var GJcy$1 = "Ѓ";
    var gjcy$1 = "ѓ";
    var gla$1 = "⪥";
    var gl$1 = "≷";
    var glE$1 = "⪒";
    var glj$1 = "⪤";
    var gnap$1 = "⪊";
    var gnapprox$1 = "⪊";
    var gne$1 = "⪈";
    var gnE$1 = "≩";
    var gneq$1 = "⪈";
    var gneqq$1 = "≩";
    var gnsim$1 = "⋧";
    var Gopf$1 = "𝔾";
    var gopf$1 = "𝕘";
    var grave$1 = "`";
    var GreaterEqual$1 = "≥";
    var GreaterEqualLess$1 = "⋛";
    var GreaterFullEqual$1 = "≧";
    var GreaterGreater$1 = "⪢";
    var GreaterLess$1 = "≷";
    var GreaterSlantEqual$1 = "⩾";
    var GreaterTilde$1 = "≳";
    var Gscr$1 = "𝒢";
    var gscr$1 = "ℊ";
    var gsim$1 = "≳";
    var gsime$1 = "⪎";
    var gsiml$1 = "⪐";
    var gtcc$1 = "⪧";
    var gtcir$1 = "⩺";
    var gt$3 = ">";
    var GT$2 = ">";
    var Gt$1 = "≫";
    var gtdot$1 = "⋗";
    var gtlPar$1 = "⦕";
    var gtquest$1 = "⩼";
    var gtrapprox$1 = "⪆";
    var gtrarr$1 = "⥸";
    var gtrdot$1 = "⋗";
    var gtreqless$1 = "⋛";
    var gtreqqless$1 = "⪌";
    var gtrless$1 = "≷";
    var gtrsim$1 = "≳";
    var gvertneqq$1 = "≩︀";
    var gvnE$1 = "≩︀";
    var Hacek$1 = "ˇ";
    var hairsp$1 = " ";
    var half$1 = "½";
    var hamilt$1 = "ℋ";
    var HARDcy$1 = "Ъ";
    var hardcy$1 = "ъ";
    var harrcir$1 = "⥈";
    var harr$1 = "↔";
    var hArr$1 = "⇔";
    var harrw$1 = "↭";
    var Hat$1 = "^";
    var hbar$1 = "ℏ";
    var Hcirc$1 = "Ĥ";
    var hcirc$1 = "ĥ";
    var hearts$2 = "♥";
    var heartsuit$1 = "♥";
    var hellip$1 = "…";
    var hercon$1 = "⊹";
    var hfr$1 = "𝔥";
    var Hfr$1 = "ℌ";
    var HilbertSpace$1 = "ℋ";
    var hksearow$1 = "⤥";
    var hkswarow$1 = "⤦";
    var hoarr$1 = "⇿";
    var homtht$1 = "∻";
    var hookleftarrow$1 = "↩";
    var hookrightarrow$1 = "↪";
    var hopf$1 = "𝕙";
    var Hopf$1 = "ℍ";
    var horbar$1 = "―";
    var HorizontalLine$1 = "─";
    var hscr$1 = "𝒽";
    var Hscr$1 = "ℋ";
    var hslash$1 = "ℏ";
    var Hstrok$1 = "Ħ";
    var hstrok$1 = "ħ";
    var HumpDownHump$1 = "≎";
    var HumpEqual$1 = "≏";
    var hybull$1 = "⁃";
    var hyphen$1 = "‐";
    var Iacute$2 = "Í";
    var iacute$2 = "í";
    var ic$1 = "⁣";
    var Icirc$2 = "Î";
    var icirc$2 = "î";
    var Icy$1 = "И";
    var icy$1 = "и";
    var Idot$1 = "İ";
    var IEcy$1 = "Е";
    var iecy$1 = "е";
    var iexcl$2 = "¡";
    var iff$1 = "⇔";
    var ifr$1 = "𝔦";
    var Ifr$1 = "ℑ";
    var Igrave$2 = "Ì";
    var igrave$2 = "ì";
    var ii$1 = "ⅈ";
    var iiiint$1 = "⨌";
    var iiint$1 = "∭";
    var iinfin$1 = "⧜";
    var iiota$1 = "℩";
    var IJlig$1 = "Ĳ";
    var ijlig$1 = "ĳ";
    var Imacr$1 = "Ī";
    var imacr$1 = "ī";
    var image$3 = "ℑ";
    var ImaginaryI$1 = "ⅈ";
    var imagline$1 = "ℐ";
    var imagpart$1 = "ℑ";
    var imath$1 = "ı";
    var Im$1 = "ℑ";
    var imof$1 = "⊷";
    var imped$1 = "Ƶ";
    var Implies$1 = "⇒";
    var incare$1 = "℅";
    var infin$1 = "∞";
    var infintie$1 = "⧝";
    var inodot$1 = "ı";
    var intcal$1 = "⊺";
    var int$1 = "∫";
    var Int$1 = "∬";
    var integers$1 = "ℤ";
    var Integral$1 = "∫";
    var intercal$1 = "⊺";
    var Intersection$1 = "⋂";
    var intlarhk$1 = "⨗";
    var intprod$1 = "⨼";
    var InvisibleComma$1 = "⁣";
    var InvisibleTimes$1 = "⁢";
    var IOcy$1 = "Ё";
    var iocy$1 = "ё";
    var Iogon$1 = "Į";
    var iogon$1 = "į";
    var Iopf$1 = "𝕀";
    var iopf$1 = "𝕚";
    var Iota$1 = "Ι";
    var iota$1 = "ι";
    var iprod$1 = "⨼";
    var iquest$2 = "¿";
    var iscr$1 = "𝒾";
    var Iscr$1 = "ℐ";
    var isin$1 = "∈";
    var isindot$1 = "⋵";
    var isinE$1 = "⋹";
    var isins$1 = "⋴";
    var isinsv$1 = "⋳";
    var isinv$1 = "∈";
    var it$2 = "⁢";
    var Itilde$1 = "Ĩ";
    var itilde$1 = "ĩ";
    var Iukcy$1 = "І";
    var iukcy$1 = "і";
    var Iuml$2 = "Ï";
    var iuml$2 = "ï";
    var Jcirc$1 = "Ĵ";
    var jcirc$1 = "ĵ";
    var Jcy$1 = "Й";
    var jcy$1 = "й";
    var Jfr$1 = "𝔍";
    var jfr$1 = "𝔧";
    var jmath$1 = "ȷ";
    var Jopf$1 = "𝕁";
    var jopf$1 = "𝕛";
    var Jscr$1 = "𝒥";
    var jscr$1 = "𝒿";
    var Jsercy$1 = "Ј";
    var jsercy$1 = "ј";
    var Jukcy$1 = "Є";
    var jukcy$1 = "є";
    var Kappa$1 = "Κ";
    var kappa$1 = "κ";
    var kappav$1 = "ϰ";
    var Kcedil$1 = "Ķ";
    var kcedil$1 = "ķ";
    var Kcy$1 = "К";
    var kcy$1 = "к";
    var Kfr$1 = "𝔎";
    var kfr$1 = "𝔨";
    var kgreen$1 = "ĸ";
    var KHcy$1 = "Х";
    var khcy$1 = "х";
    var KJcy$1 = "Ќ";
    var kjcy$1 = "ќ";
    var Kopf$1 = "𝕂";
    var kopf$1 = "𝕜";
    var Kscr$1 = "𝒦";
    var kscr$1 = "𝓀";
    var lAarr$1 = "⇚";
    var Lacute$1 = "Ĺ";
    var lacute$1 = "ĺ";
    var laemptyv$1 = "⦴";
    var lagran$1 = "ℒ";
    var Lambda$1 = "Λ";
    var lambda$1 = "λ";
    var lang$1 = "⟨";
    var Lang$1 = "⟪";
    var langd$1 = "⦑";
    var langle$1 = "⟨";
    var lap$1 = "⪅";
    var Laplacetrf$1 = "ℒ";
    var laquo$2 = "«";
    var larrb$1 = "⇤";
    var larrbfs$1 = "⤟";
    var larr$1 = "←";
    var Larr$1 = "↞";
    var lArr$1 = "⇐";
    var larrfs$1 = "⤝";
    var larrhk$1 = "↩";
    var larrlp$1 = "↫";
    var larrpl$1 = "⤹";
    var larrsim$1 = "⥳";
    var larrtl$1 = "↢";
    var latail$1 = "⤙";
    var lAtail$1 = "⤛";
    var lat$1 = "⪫";
    var late$1 = "⪭";
    var lates$1 = "⪭︀";
    var lbarr$1 = "⤌";
    var lBarr$1 = "⤎";
    var lbbrk$1 = "❲";
    var lbrace$1 = "{";
    var lbrack$1 = "[";
    var lbrke$1 = "⦋";
    var lbrksld$1 = "⦏";
    var lbrkslu$1 = "⦍";
    var Lcaron$1 = "Ľ";
    var lcaron$1 = "ľ";
    var Lcedil$1 = "Ļ";
    var lcedil$1 = "ļ";
    var lceil$1 = "⌈";
    var lcub$1 = "{";
    var Lcy$1 = "Л";
    var lcy$1 = "л";
    var ldca$1 = "⤶";
    var ldquo$1 = "“";
    var ldquor$1 = "„";
    var ldrdhar$1 = "⥧";
    var ldrushar$1 = "⥋";
    var ldsh$1 = "↲";
    var le$1 = "≤";
    var lE$1 = "≦";
    var LeftAngleBracket$1 = "⟨";
    var LeftArrowBar$1 = "⇤";
    var leftarrow$1 = "←";
    var LeftArrow$1 = "←";
    var Leftarrow$1 = "⇐";
    var LeftArrowRightArrow$1 = "⇆";
    var leftarrowtail$1 = "↢";
    var LeftCeiling$1 = "⌈";
    var LeftDoubleBracket$1 = "⟦";
    var LeftDownTeeVector$1 = "⥡";
    var LeftDownVectorBar$1 = "⥙";
    var LeftDownVector$1 = "⇃";
    var LeftFloor$1 = "⌊";
    var leftharpoondown$1 = "↽";
    var leftharpoonup$1 = "↼";
    var leftleftarrows$1 = "⇇";
    var leftrightarrow$1 = "↔";
    var LeftRightArrow$1 = "↔";
    var Leftrightarrow$1 = "⇔";
    var leftrightarrows$1 = "⇆";
    var leftrightharpoons$1 = "⇋";
    var leftrightsquigarrow$1 = "↭";
    var LeftRightVector$1 = "⥎";
    var LeftTeeArrow$1 = "↤";
    var LeftTee$1 = "⊣";
    var LeftTeeVector$1 = "⥚";
    var leftthreetimes$1 = "⋋";
    var LeftTriangleBar$1 = "⧏";
    var LeftTriangle$1 = "⊲";
    var LeftTriangleEqual$1 = "⊴";
    var LeftUpDownVector$1 = "⥑";
    var LeftUpTeeVector$1 = "⥠";
    var LeftUpVectorBar$1 = "⥘";
    var LeftUpVector$1 = "↿";
    var LeftVectorBar$1 = "⥒";
    var LeftVector$1 = "↼";
    var lEg$1 = "⪋";
    var leg$2 = "⋚";
    var leq$1 = "≤";
    var leqq$1 = "≦";
    var leqslant$1 = "⩽";
    var lescc$1 = "⪨";
    var les$1 = "⩽";
    var lesdot$1 = "⩿";
    var lesdoto$1 = "⪁";
    var lesdotor$1 = "⪃";
    var lesg$1 = "⋚︀";
    var lesges$1 = "⪓";
    var lessapprox$1 = "⪅";
    var lessdot$1 = "⋖";
    var lesseqgtr$1 = "⋚";
    var lesseqqgtr$1 = "⪋";
    var LessEqualGreater$1 = "⋚";
    var LessFullEqual$1 = "≦";
    var LessGreater$1 = "≶";
    var lessgtr$1 = "≶";
    var LessLess$1 = "⪡";
    var lesssim$1 = "≲";
    var LessSlantEqual$1 = "⩽";
    var LessTilde$1 = "≲";
    var lfisht$1 = "⥼";
    var lfloor$1 = "⌊";
    var Lfr$1 = "𝔏";
    var lfr$1 = "𝔩";
    var lg$1 = "≶";
    var lgE$1 = "⪑";
    var lHar$1 = "⥢";
    var lhard$1 = "↽";
    var lharu$1 = "↼";
    var lharul$1 = "⥪";
    var lhblk$1 = "▄";
    var LJcy$1 = "Љ";
    var ljcy$1 = "љ";
    var llarr$1 = "⇇";
    var ll$1 = "≪";
    var Ll$1 = "⋘";
    var llcorner$1 = "⌞";
    var Lleftarrow$1 = "⇚";
    var llhard$1 = "⥫";
    var lltri$1 = "◺";
    var Lmidot$1 = "Ŀ";
    var lmidot$1 = "ŀ";
    var lmoustache$1 = "⎰";
    var lmoust$1 = "⎰";
    var lnap$1 = "⪉";
    var lnapprox$1 = "⪉";
    var lne$1 = "⪇";
    var lnE$1 = "≨";
    var lneq$1 = "⪇";
    var lneqq$1 = "≨";
    var lnsim$1 = "⋦";
    var loang$1 = "⟬";
    var loarr$1 = "⇽";
    var lobrk$1 = "⟦";
    var longleftarrow$1 = "⟵";
    var LongLeftArrow$1 = "⟵";
    var Longleftarrow$1 = "⟸";
    var longleftrightarrow$1 = "⟷";
    var LongLeftRightArrow$1 = "⟷";
    var Longleftrightarrow$1 = "⟺";
    var longmapsto$1 = "⟼";
    var longrightarrow$1 = "⟶";
    var LongRightArrow$1 = "⟶";
    var Longrightarrow$1 = "⟹";
    var looparrowleft$1 = "↫";
    var looparrowright$1 = "↬";
    var lopar$1 = "⦅";
    var Lopf$1 = "𝕃";
    var lopf$1 = "𝕝";
    var loplus$1 = "⨭";
    var lotimes$1 = "⨴";
    var lowast$1 = "∗";
    var lowbar$1 = "_";
    var LowerLeftArrow$1 = "↙";
    var LowerRightArrow$1 = "↘";
    var loz$1 = "◊";
    var lozenge$1 = "◊";
    var lozf$1 = "⧫";
    var lpar$1 = "(";
    var lparlt$1 = "⦓";
    var lrarr$1 = "⇆";
    var lrcorner$1 = "⌟";
    var lrhar$1 = "⇋";
    var lrhard$1 = "⥭";
    var lrm$1 = "‎";
    var lrtri$1 = "⊿";
    var lsaquo$1 = "‹";
    var lscr$1 = "𝓁";
    var Lscr$1 = "ℒ";
    var lsh$1 = "↰";
    var Lsh$1 = "↰";
    var lsim$1 = "≲";
    var lsime$1 = "⪍";
    var lsimg$1 = "⪏";
    var lsqb$1 = "[";
    var lsquo$1 = "‘";
    var lsquor$1 = "‚";
    var Lstrok$1 = "Ł";
    var lstrok$1 = "ł";
    var ltcc$1 = "⪦";
    var ltcir$1 = "⩹";
    var lt$3 = "<";
    var LT$2 = "<";
    var Lt$1 = "≪";
    var ltdot$1 = "⋖";
    var lthree$1 = "⋋";
    var ltimes$1 = "⋉";
    var ltlarr$1 = "⥶";
    var ltquest$1 = "⩻";
    var ltri$1 = "◃";
    var ltrie$1 = "⊴";
    var ltrif$1 = "◂";
    var ltrPar$1 = "⦖";
    var lurdshar$1 = "⥊";
    var luruhar$1 = "⥦";
    var lvertneqq$1 = "≨︀";
    var lvnE$1 = "≨︀";
    var macr$2 = "¯";
    var male$1 = "♂";
    var malt$1 = "✠";
    var maltese$1 = "✠";
    var map$2 = "↦";
    var mapsto$1 = "↦";
    var mapstodown$1 = "↧";
    var mapstoleft$1 = "↤";
    var mapstoup$1 = "↥";
    var marker$1 = "▮";
    var mcomma$1 = "⨩";
    var Mcy$1 = "М";
    var mcy$1 = "м";
    var mdash$1 = "—";
    var mDDot$1 = "∺";
    var measuredangle$1 = "∡";
    var MediumSpace$1 = " ";
    var Mellintrf$1 = "ℳ";
    var Mfr$1 = "𝔐";
    var mfr$1 = "𝔪";
    var mho$1 = "℧";
    var micro$2 = "µ";
    var midast$1 = "*";
    var midcir$1 = "⫰";
    var mid$1 = "∣";
    var middot$2 = "·";
    var minusb$1 = "⊟";
    var minus$1 = "−";
    var minusd$1 = "∸";
    var minusdu$1 = "⨪";
    var MinusPlus$1 = "∓";
    var mlcp$1 = "⫛";
    var mldr$1 = "…";
    var mnplus$1 = "∓";
    var models$1 = "⊧";
    var Mopf$1 = "𝕄";
    var mopf$1 = "𝕞";
    var mp$1 = "∓";
    var mscr$1 = "𝓂";
    var Mscr$1 = "ℳ";
    var mstpos$1 = "∾";
    var Mu$1 = "Μ";
    var mu$1 = "μ";
    var multimap$1 = "⊸";
    var mumap$1 = "⊸";
    var nabla$1 = "∇";
    var Nacute$1 = "Ń";
    var nacute$1 = "ń";
    var nang$1 = "∠⃒";
    var nap$1 = "≉";
    var napE$1 = "⩰̸";
    var napid$1 = "≋̸";
    var napos$1 = "ŉ";
    var napprox$1 = "≉";
    var natural$1 = "♮";
    var naturals$1 = "ℕ";
    var natur$1 = "♮";
    var nbsp$2 = " ";
    var nbump$1 = "≎̸";
    var nbumpe$1 = "≏̸";
    var ncap$1 = "⩃";
    var Ncaron$1 = "Ň";
    var ncaron$1 = "ň";
    var Ncedil$1 = "Ņ";
    var ncedil$1 = "ņ";
    var ncong$1 = "≇";
    var ncongdot$1 = "⩭̸";
    var ncup$1 = "⩂";
    var Ncy$1 = "Н";
    var ncy$1 = "н";
    var ndash$1 = "–";
    var nearhk$1 = "⤤";
    var nearr$1 = "↗";
    var neArr$1 = "⇗";
    var nearrow$1 = "↗";
    var ne$1 = "≠";
    var nedot$1 = "≐̸";
    var NegativeMediumSpace$1 = "​";
    var NegativeThickSpace$1 = "​";
    var NegativeThinSpace$1 = "​";
    var NegativeVeryThinSpace$1 = "​";
    var nequiv$1 = "≢";
    var nesear$1 = "⤨";
    var nesim$1 = "≂̸";
    var NestedGreaterGreater$1 = "≫";
    var NestedLessLess$1 = "≪";
    var NewLine$1 = "\n";
    var nexist$1 = "∄";
    var nexists$1 = "∄";
    var Nfr$1 = "𝔑";
    var nfr$1 = "𝔫";
    var ngE$1 = "≧̸";
    var nge$1 = "≱";
    var ngeq$1 = "≱";
    var ngeqq$1 = "≧̸";
    var ngeqslant$1 = "⩾̸";
    var nges$1 = "⩾̸";
    var nGg$1 = "⋙̸";
    var ngsim$1 = "≵";
    var nGt$1 = "≫⃒";
    var ngt$1 = "≯";
    var ngtr$1 = "≯";
    var nGtv$1 = "≫̸";
    var nharr$1 = "↮";
    var nhArr$1 = "⇎";
    var nhpar$1 = "⫲";
    var ni$1 = "∋";
    var nis$1 = "⋼";
    var nisd$1 = "⋺";
    var niv$1 = "∋";
    var NJcy$1 = "Њ";
    var njcy$1 = "њ";
    var nlarr$1 = "↚";
    var nlArr$1 = "⇍";
    var nldr$1 = "‥";
    var nlE$1 = "≦̸";
    var nle$1 = "≰";
    var nleftarrow$1 = "↚";
    var nLeftarrow$1 = "⇍";
    var nleftrightarrow$1 = "↮";
    var nLeftrightarrow$1 = "⇎";
    var nleq$1 = "≰";
    var nleqq$1 = "≦̸";
    var nleqslant$1 = "⩽̸";
    var nles$1 = "⩽̸";
    var nless$1 = "≮";
    var nLl$1 = "⋘̸";
    var nlsim$1 = "≴";
    var nLt$1 = "≪⃒";
    var nlt$1 = "≮";
    var nltri$1 = "⋪";
    var nltrie$1 = "⋬";
    var nLtv$1 = "≪̸";
    var nmid$1 = "∤";
    var NoBreak$1 = "⁠";
    var NonBreakingSpace$1 = " ";
    var nopf$1 = "𝕟";
    var Nopf$1 = "ℕ";
    var Not$1 = "⫬";
    var not$2 = "¬";
    var NotCongruent$1 = "≢";
    var NotCupCap$1 = "≭";
    var NotDoubleVerticalBar$1 = "∦";
    var NotElement$1 = "∉";
    var NotEqual$1 = "≠";
    var NotEqualTilde$1 = "≂̸";
    var NotExists$1 = "∄";
    var NotGreater$1 = "≯";
    var NotGreaterEqual$1 = "≱";
    var NotGreaterFullEqual$1 = "≧̸";
    var NotGreaterGreater$1 = "≫̸";
    var NotGreaterLess$1 = "≹";
    var NotGreaterSlantEqual$1 = "⩾̸";
    var NotGreaterTilde$1 = "≵";
    var NotHumpDownHump$1 = "≎̸";
    var NotHumpEqual$1 = "≏̸";
    var notin$1 = "∉";
    var notindot$1 = "⋵̸";
    var notinE$1 = "⋹̸";
    var notinva$1 = "∉";
    var notinvb$1 = "⋷";
    var notinvc$1 = "⋶";
    var NotLeftTriangleBar$1 = "⧏̸";
    var NotLeftTriangle$1 = "⋪";
    var NotLeftTriangleEqual$1 = "⋬";
    var NotLess$1 = "≮";
    var NotLessEqual$1 = "≰";
    var NotLessGreater$1 = "≸";
    var NotLessLess$1 = "≪̸";
    var NotLessSlantEqual$1 = "⩽̸";
    var NotLessTilde$1 = "≴";
    var NotNestedGreaterGreater$1 = "⪢̸";
    var NotNestedLessLess$1 = "⪡̸";
    var notni$1 = "∌";
    var notniva$1 = "∌";
    var notnivb$1 = "⋾";
    var notnivc$1 = "⋽";
    var NotPrecedes$1 = "⊀";
    var NotPrecedesEqual$1 = "⪯̸";
    var NotPrecedesSlantEqual$1 = "⋠";
    var NotReverseElement$1 = "∌";
    var NotRightTriangleBar$1 = "⧐̸";
    var NotRightTriangle$1 = "⋫";
    var NotRightTriangleEqual$1 = "⋭";
    var NotSquareSubset$1 = "⊏̸";
    var NotSquareSubsetEqual$1 = "⋢";
    var NotSquareSuperset$1 = "⊐̸";
    var NotSquareSupersetEqual$1 = "⋣";
    var NotSubset$1 = "⊂⃒";
    var NotSubsetEqual$1 = "⊈";
    var NotSucceeds$1 = "⊁";
    var NotSucceedsEqual$1 = "⪰̸";
    var NotSucceedsSlantEqual$1 = "⋡";
    var NotSucceedsTilde$1 = "≿̸";
    var NotSuperset$1 = "⊃⃒";
    var NotSupersetEqual$1 = "⊉";
    var NotTilde$1 = "≁";
    var NotTildeEqual$1 = "≄";
    var NotTildeFullEqual$1 = "≇";
    var NotTildeTilde$1 = "≉";
    var NotVerticalBar$1 = "∤";
    var nparallel$1 = "∦";
    var npar$1 = "∦";
    var nparsl$1 = "⫽⃥";
    var npart$1 = "∂̸";
    var npolint$1 = "⨔";
    var npr$1 = "⊀";
    var nprcue$1 = "⋠";
    var nprec$1 = "⊀";
    var npreceq$1 = "⪯̸";
    var npre$1 = "⪯̸";
    var nrarrc$1 = "⤳̸";
    var nrarr$1 = "↛";
    var nrArr$1 = "⇏";
    var nrarrw$1 = "↝̸";
    var nrightarrow$1 = "↛";
    var nRightarrow$1 = "⇏";
    var nrtri$1 = "⋫";
    var nrtrie$1 = "⋭";
    var nsc$1 = "⊁";
    var nsccue$1 = "⋡";
    var nsce$1 = "⪰̸";
    var Nscr$1 = "𝒩";
    var nscr$1 = "𝓃";
    var nshortmid$1 = "∤";
    var nshortparallel$1 = "∦";
    var nsim$1 = "≁";
    var nsime$1 = "≄";
    var nsimeq$1 = "≄";
    var nsmid$1 = "∤";
    var nspar$1 = "∦";
    var nsqsube$1 = "⋢";
    var nsqsupe$1 = "⋣";
    var nsub$1 = "⊄";
    var nsubE$1 = "⫅̸";
    var nsube$1 = "⊈";
    var nsubset$1 = "⊂⃒";
    var nsubseteq$1 = "⊈";
    var nsubseteqq$1 = "⫅̸";
    var nsucc$1 = "⊁";
    var nsucceq$1 = "⪰̸";
    var nsup$1 = "⊅";
    var nsupE$1 = "⫆̸";
    var nsupe$1 = "⊉";
    var nsupset$1 = "⊃⃒";
    var nsupseteq$1 = "⊉";
    var nsupseteqq$1 = "⫆̸";
    var ntgl$1 = "≹";
    var Ntilde$2 = "Ñ";
    var ntilde$2 = "ñ";
    var ntlg$1 = "≸";
    var ntriangleleft$1 = "⋪";
    var ntrianglelefteq$1 = "⋬";
    var ntriangleright$1 = "⋫";
    var ntrianglerighteq$1 = "⋭";
    var Nu$1 = "Ν";
    var nu$1 = "ν";
    var num$1 = "#";
    var numero$1 = "№";
    var numsp$1 = " ";
    var nvap$1 = "≍⃒";
    var nvdash$1 = "⊬";
    var nvDash$1 = "⊭";
    var nVdash$1 = "⊮";
    var nVDash$1 = "⊯";
    var nvge$1 = "≥⃒";
    var nvgt$1 = ">⃒";
    var nvHarr$1 = "⤄";
    var nvinfin$1 = "⧞";
    var nvlArr$1 = "⤂";
    var nvle$1 = "≤⃒";
    var nvlt$1 = "<⃒";
    var nvltrie$1 = "⊴⃒";
    var nvrArr$1 = "⤃";
    var nvrtrie$1 = "⊵⃒";
    var nvsim$1 = "∼⃒";
    var nwarhk$1 = "⤣";
    var nwarr$1 = "↖";
    var nwArr$1 = "⇖";
    var nwarrow$1 = "↖";
    var nwnear$1 = "⤧";
    var Oacute$2 = "Ó";
    var oacute$2 = "ó";
    var oast$1 = "⊛";
    var Ocirc$2 = "Ô";
    var ocirc$2 = "ô";
    var ocir$1 = "⊚";
    var Ocy$1 = "О";
    var ocy$1 = "о";
    var odash$1 = "⊝";
    var Odblac$1 = "Ő";
    var odblac$1 = "ő";
    var odiv$1 = "⨸";
    var odot$1 = "⊙";
    var odsold$1 = "⦼";
    var OElig$1 = "Œ";
    var oelig$1 = "œ";
    var ofcir$1 = "⦿";
    var Ofr$1 = "𝔒";
    var ofr$1 = "𝔬";
    var ogon$1 = "˛";
    var Ograve$2 = "Ò";
    var ograve$2 = "ò";
    var ogt$1 = "⧁";
    var ohbar$1 = "⦵";
    var ohm$1 = "Ω";
    var oint$1 = "∮";
    var olarr$1 = "↺";
    var olcir$1 = "⦾";
    var olcross$1 = "⦻";
    var oline$1 = "‾";
    var olt$1 = "⧀";
    var Omacr$1 = "Ō";
    var omacr$1 = "ō";
    var Omega$1 = "Ω";
    var omega$1 = "ω";
    var Omicron$1 = "Ο";
    var omicron$1 = "ο";
    var omid$1 = "⦶";
    var ominus$1 = "⊖";
    var Oopf$1 = "𝕆";
    var oopf$1 = "𝕠";
    var opar$1 = "⦷";
    var OpenCurlyDoubleQuote$1 = "“";
    var OpenCurlyQuote$1 = "‘";
    var operp$1 = "⦹";
    var oplus$1 = "⊕";
    var orarr$1 = "↻";
    var Or$1 = "⩔";
    var or$1 = "∨";
    var ord$1 = "⩝";
    var order$1 = "ℴ";
    var orderof$1 = "ℴ";
    var ordf$2 = "ª";
    var ordm$2 = "º";
    var origof$1 = "⊶";
    var oror$1 = "⩖";
    var orslope$1 = "⩗";
    var orv$1 = "⩛";
    var oS$1 = "Ⓢ";
    var Oscr$1 = "𝒪";
    var oscr$1 = "ℴ";
    var Oslash$2 = "Ø";
    var oslash$2 = "ø";
    var osol$1 = "⊘";
    var Otilde$2 = "Õ";
    var otilde$2 = "õ";
    var otimesas$1 = "⨶";
    var Otimes$1 = "⨷";
    var otimes$1 = "⊗";
    var Ouml$2 = "Ö";
    var ouml$2 = "ö";
    var ovbar$1 = "⌽";
    var OverBar$1 = "‾";
    var OverBrace$1 = "⏞";
    var OverBracket$1 = "⎴";
    var OverParenthesis$1 = "⏜";
    var para$2 = "¶";
    var parallel$1 = "∥";
    var par$1 = "∥";
    var parsim$1 = "⫳";
    var parsl$1 = "⫽";
    var part$1 = "∂";
    var PartialD$1 = "∂";
    var Pcy$1 = "П";
    var pcy$1 = "п";
    var percnt$1 = "%";
    var period$1 = ".";
    var permil$1 = "‰";
    var perp$1 = "⊥";
    var pertenk$1 = "‱";
    var Pfr$1 = "𝔓";
    var pfr$1 = "𝔭";
    var Phi$1 = "Φ";
    var phi$1 = "φ";
    var phiv$1 = "ϕ";
    var phmmat$1 = "ℳ";
    var phone$2 = "☎";
    var Pi$1 = "Π";
    var pi$1 = "π";
    var pitchfork$1 = "⋔";
    var piv$1 = "ϖ";
    var planck$1 = "ℏ";
    var planckh$1 = "ℎ";
    var plankv$1 = "ℏ";
    var plusacir$1 = "⨣";
    var plusb$1 = "⊞";
    var pluscir$1 = "⨢";
    var plus$1 = "+";
    var plusdo$1 = "∔";
    var plusdu$1 = "⨥";
    var pluse$1 = "⩲";
    var PlusMinus$1 = "±";
    var plusmn$2 = "±";
    var plussim$1 = "⨦";
    var plustwo$1 = "⨧";
    var pm$1 = "±";
    var Poincareplane$1 = "ℌ";
    var pointint$1 = "⨕";
    var popf$1 = "𝕡";
    var Popf$1 = "ℙ";
    var pound$3 = "£";
    var prap$1 = "⪷";
    var Pr$1 = "⪻";
    var pr$1 = "≺";
    var prcue$1 = "≼";
    var precapprox$1 = "⪷";
    var prec$1 = "≺";
    var preccurlyeq$1 = "≼";
    var Precedes$1 = "≺";
    var PrecedesEqual$1 = "⪯";
    var PrecedesSlantEqual$1 = "≼";
    var PrecedesTilde$1 = "≾";
    var preceq$1 = "⪯";
    var precnapprox$1 = "⪹";
    var precneqq$1 = "⪵";
    var precnsim$1 = "⋨";
    var pre$1 = "⪯";
    var prE$1 = "⪳";
    var precsim$1 = "≾";
    var prime$1 = "′";
    var Prime$1 = "″";
    var primes$1 = "ℙ";
    var prnap$1 = "⪹";
    var prnE$1 = "⪵";
    var prnsim$1 = "⋨";
    var prod$1 = "∏";
    var Product$1 = "∏";
    var profalar$1 = "⌮";
    var profline$1 = "⌒";
    var profsurf$1 = "⌓";
    var prop$2 = "∝";
    var Proportional$1 = "∝";
    var Proportion$1 = "∷";
    var propto$1 = "∝";
    var prsim$1 = "≾";
    var prurel$1 = "⊰";
    var Pscr$1 = "𝒫";
    var pscr$1 = "𝓅";
    var Psi$1 = "Ψ";
    var psi$1 = "ψ";
    var puncsp$1 = " ";
    var Qfr$1 = "𝔔";
    var qfr$1 = "𝔮";
    var qint$1 = "⨌";
    var qopf$1 = "𝕢";
    var Qopf$1 = "ℚ";
    var qprime$1 = "⁗";
    var Qscr$1 = "𝒬";
    var qscr$1 = "𝓆";
    var quaternions$1 = "ℍ";
    var quatint$1 = "⨖";
    var quest$1 = "?";
    var questeq$1 = "≟";
    var quot$3 = "\"";
    var QUOT$2 = "\"";
    var rAarr$1 = "⇛";
    var race$1 = "∽̱";
    var Racute$1 = "Ŕ";
    var racute$1 = "ŕ";
    var radic$1 = "√";
    var raemptyv$1 = "⦳";
    var rang$1 = "⟩";
    var Rang$1 = "⟫";
    var rangd$1 = "⦒";
    var range$1 = "⦥";
    var rangle$1 = "⟩";
    var raquo$2 = "»";
    var rarrap$1 = "⥵";
    var rarrb$1 = "⇥";
    var rarrbfs$1 = "⤠";
    var rarrc$1 = "⤳";
    var rarr$1 = "→";
    var Rarr$1 = "↠";
    var rArr$1 = "⇒";
    var rarrfs$1 = "⤞";
    var rarrhk$1 = "↪";
    var rarrlp$1 = "↬";
    var rarrpl$1 = "⥅";
    var rarrsim$1 = "⥴";
    var Rarrtl$1 = "⤖";
    var rarrtl$1 = "↣";
    var rarrw$1 = "↝";
    var ratail$1 = "⤚";
    var rAtail$1 = "⤜";
    var ratio$1 = "∶";
    var rationals$1 = "ℚ";
    var rbarr$1 = "⤍";
    var rBarr$1 = "⤏";
    var RBarr$1 = "⤐";
    var rbbrk$1 = "❳";
    var rbrace$1 = "}";
    var rbrack$1 = "]";
    var rbrke$1 = "⦌";
    var rbrksld$1 = "⦎";
    var rbrkslu$1 = "⦐";
    var Rcaron$1 = "Ř";
    var rcaron$1 = "ř";
    var Rcedil$1 = "Ŗ";
    var rcedil$1 = "ŗ";
    var rceil$1 = "⌉";
    var rcub$1 = "}";
    var Rcy$1 = "Р";
    var rcy$1 = "р";
    var rdca$1 = "⤷";
    var rdldhar$1 = "⥩";
    var rdquo$1 = "”";
    var rdquor$1 = "”";
    var rdsh$1 = "↳";
    var real$1 = "ℜ";
    var realine$1 = "ℛ";
    var realpart$1 = "ℜ";
    var reals$1 = "ℝ";
    var Re$1 = "ℜ";
    var rect$1 = "▭";
    var reg$2 = "®";
    var REG$2 = "®";
    var ReverseElement$1 = "∋";
    var ReverseEquilibrium$1 = "⇋";
    var ReverseUpEquilibrium$1 = "⥯";
    var rfisht$1 = "⥽";
    var rfloor$1 = "⌋";
    var rfr$1 = "𝔯";
    var Rfr$1 = "ℜ";
    var rHar$1 = "⥤";
    var rhard$1 = "⇁";
    var rharu$1 = "⇀";
    var rharul$1 = "⥬";
    var Rho$1 = "Ρ";
    var rho$1 = "ρ";
    var rhov$1 = "ϱ";
    var RightAngleBracket$1 = "⟩";
    var RightArrowBar$1 = "⇥";
    var rightarrow$1 = "→";
    var RightArrow$1 = "→";
    var Rightarrow$1 = "⇒";
    var RightArrowLeftArrow$1 = "⇄";
    var rightarrowtail$1 = "↣";
    var RightCeiling$1 = "⌉";
    var RightDoubleBracket$1 = "⟧";
    var RightDownTeeVector$1 = "⥝";
    var RightDownVectorBar$1 = "⥕";
    var RightDownVector$1 = "⇂";
    var RightFloor$1 = "⌋";
    var rightharpoondown$1 = "⇁";
    var rightharpoonup$1 = "⇀";
    var rightleftarrows$1 = "⇄";
    var rightleftharpoons$1 = "⇌";
    var rightrightarrows$1 = "⇉";
    var rightsquigarrow$1 = "↝";
    var RightTeeArrow$1 = "↦";
    var RightTee$1 = "⊢";
    var RightTeeVector$1 = "⥛";
    var rightthreetimes$1 = "⋌";
    var RightTriangleBar$1 = "⧐";
    var RightTriangle$1 = "⊳";
    var RightTriangleEqual$1 = "⊵";
    var RightUpDownVector$1 = "⥏";
    var RightUpTeeVector$1 = "⥜";
    var RightUpVectorBar$1 = "⥔";
    var RightUpVector$1 = "↾";
    var RightVectorBar$1 = "⥓";
    var RightVector$1 = "⇀";
    var ring$2 = "˚";
    var risingdotseq$1 = "≓";
    var rlarr$1 = "⇄";
    var rlhar$1 = "⇌";
    var rlm$1 = "‏";
    var rmoustache$1 = "⎱";
    var rmoust$1 = "⎱";
    var rnmid$1 = "⫮";
    var roang$1 = "⟭";
    var roarr$1 = "⇾";
    var robrk$1 = "⟧";
    var ropar$1 = "⦆";
    var ropf$1 = "𝕣";
    var Ropf$1 = "ℝ";
    var roplus$1 = "⨮";
    var rotimes$1 = "⨵";
    var RoundImplies$1 = "⥰";
    var rpar$1 = ")";
    var rpargt$1 = "⦔";
    var rppolint$1 = "⨒";
    var rrarr$1 = "⇉";
    var Rrightarrow$1 = "⇛";
    var rsaquo$1 = "›";
    var rscr$1 = "𝓇";
    var Rscr$1 = "ℛ";
    var rsh$1 = "↱";
    var Rsh$1 = "↱";
    var rsqb$1 = "]";
    var rsquo$1 = "’";
    var rsquor$1 = "’";
    var rthree$1 = "⋌";
    var rtimes$1 = "⋊";
    var rtri$1 = "▹";
    var rtrie$1 = "⊵";
    var rtrif$1 = "▸";
    var rtriltri$1 = "⧎";
    var RuleDelayed$1 = "⧴";
    var ruluhar$1 = "⥨";
    var rx$1 = "℞";
    var Sacute$1 = "Ś";
    var sacute$1 = "ś";
    var sbquo$1 = "‚";
    var scap$1 = "⪸";
    var Scaron$1 = "Š";
    var scaron$1 = "š";
    var Sc$1 = "⪼";
    var sc$1 = "≻";
    var sccue$1 = "≽";
    var sce$1 = "⪰";
    var scE$1 = "⪴";
    var Scedil$1 = "Ş";
    var scedil$1 = "ş";
    var Scirc$1 = "Ŝ";
    var scirc$1 = "ŝ";
    var scnap$1 = "⪺";
    var scnE$1 = "⪶";
    var scnsim$1 = "⋩";
    var scpolint$1 = "⨓";
    var scsim$1 = "≿";
    var Scy$1 = "С";
    var scy$1 = "с";
    var sdotb$1 = "⊡";
    var sdot$1 = "⋅";
    var sdote$1 = "⩦";
    var searhk$1 = "⤥";
    var searr$1 = "↘";
    var seArr$1 = "⇘";
    var searrow$1 = "↘";
    var sect$2 = "§";
    var semi$1 = ";";
    var seswar$1 = "⤩";
    var setminus$1 = "∖";
    var setmn$1 = "∖";
    var sext$1 = "✶";
    var Sfr$1 = "𝔖";
    var sfr$1 = "𝔰";
    var sfrown$1 = "⌢";
    var sharp$1 = "♯";
    var SHCHcy$1 = "Щ";
    var shchcy$1 = "щ";
    var SHcy$1 = "Ш";
    var shcy$1 = "ш";
    var ShortDownArrow$1 = "↓";
    var ShortLeftArrow$1 = "←";
    var shortmid$1 = "∣";
    var shortparallel$1 = "∥";
    var ShortRightArrow$1 = "→";
    var ShortUpArrow$1 = "↑";
    var shy$2 = "­";
    var Sigma$1 = "Σ";
    var sigma$1 = "σ";
    var sigmaf$1 = "ς";
    var sigmav$1 = "ς";
    var sim$1 = "∼";
    var simdot$1 = "⩪";
    var sime$1 = "≃";
    var simeq$1 = "≃";
    var simg$1 = "⪞";
    var simgE$1 = "⪠";
    var siml$1 = "⪝";
    var simlE$1 = "⪟";
    var simne$1 = "≆";
    var simplus$1 = "⨤";
    var simrarr$1 = "⥲";
    var slarr$1 = "←";
    var SmallCircle$1 = "∘";
    var smallsetminus$1 = "∖";
    var smashp$1 = "⨳";
    var smeparsl$1 = "⧤";
    var smid$1 = "∣";
    var smile$2 = "⌣";
    var smt$1 = "⪪";
    var smte$1 = "⪬";
    var smtes$1 = "⪬︀";
    var SOFTcy$1 = "Ь";
    var softcy$1 = "ь";
    var solbar$1 = "⌿";
    var solb$1 = "⧄";
    var sol$1 = "/";
    var Sopf$1 = "𝕊";
    var sopf$1 = "𝕤";
    var spades$2 = "♠";
    var spadesuit$1 = "♠";
    var spar$1 = "∥";
    var sqcap$1 = "⊓";
    var sqcaps$1 = "⊓︀";
    var sqcup$1 = "⊔";
    var sqcups$1 = "⊔︀";
    var Sqrt$1 = "√";
    var sqsub$1 = "⊏";
    var sqsube$1 = "⊑";
    var sqsubset$1 = "⊏";
    var sqsubseteq$1 = "⊑";
    var sqsup$1 = "⊐";
    var sqsupe$1 = "⊒";
    var sqsupset$1 = "⊐";
    var sqsupseteq$1 = "⊒";
    var square$1 = "□";
    var Square$1 = "□";
    var SquareIntersection$1 = "⊓";
    var SquareSubset$1 = "⊏";
    var SquareSubsetEqual$1 = "⊑";
    var SquareSuperset$1 = "⊐";
    var SquareSupersetEqual$1 = "⊒";
    var SquareUnion$1 = "⊔";
    var squarf$1 = "▪";
    var squ$1 = "□";
    var squf$1 = "▪";
    var srarr$1 = "→";
    var Sscr$1 = "𝒮";
    var sscr$1 = "𝓈";
    var ssetmn$1 = "∖";
    var ssmile$1 = "⌣";
    var sstarf$1 = "⋆";
    var Star$1 = "⋆";
    var star$2 = "☆";
    var starf$1 = "★";
    var straightepsilon$1 = "ϵ";
    var straightphi$1 = "ϕ";
    var strns$1 = "¯";
    var sub$1 = "⊂";
    var Sub$1 = "⋐";
    var subdot$1 = "⪽";
    var subE$1 = "⫅";
    var sube$1 = "⊆";
    var subedot$1 = "⫃";
    var submult$1 = "⫁";
    var subnE$1 = "⫋";
    var subne$1 = "⊊";
    var subplus$1 = "⪿";
    var subrarr$1 = "⥹";
    var subset$1 = "⊂";
    var Subset$1 = "⋐";
    var subseteq$1 = "⊆";
    var subseteqq$1 = "⫅";
    var SubsetEqual$1 = "⊆";
    var subsetneq$1 = "⊊";
    var subsetneqq$1 = "⫋";
    var subsim$1 = "⫇";
    var subsub$1 = "⫕";
    var subsup$1 = "⫓";
    var succapprox$1 = "⪸";
    var succ$1 = "≻";
    var succcurlyeq$1 = "≽";
    var Succeeds$1 = "≻";
    var SucceedsEqual$1 = "⪰";
    var SucceedsSlantEqual$1 = "≽";
    var SucceedsTilde$1 = "≿";
    var succeq$1 = "⪰";
    var succnapprox$1 = "⪺";
    var succneqq$1 = "⪶";
    var succnsim$1 = "⋩";
    var succsim$1 = "≿";
    var SuchThat$1 = "∋";
    var sum$1 = "∑";
    var Sum$1 = "∑";
    var sung$1 = "♪";
    var sup1$2 = "¹";
    var sup2$2 = "²";
    var sup3$2 = "³";
    var sup$1 = "⊃";
    var Sup$1 = "⋑";
    var supdot$1 = "⪾";
    var supdsub$1 = "⫘";
    var supE$1 = "⫆";
    var supe$1 = "⊇";
    var supedot$1 = "⫄";
    var Superset$1 = "⊃";
    var SupersetEqual$1 = "⊇";
    var suphsol$1 = "⟉";
    var suphsub$1 = "⫗";
    var suplarr$1 = "⥻";
    var supmult$1 = "⫂";
    var supnE$1 = "⫌";
    var supne$1 = "⊋";
    var supplus$1 = "⫀";
    var supset$1 = "⊃";
    var Supset$1 = "⋑";
    var supseteq$1 = "⊇";
    var supseteqq$1 = "⫆";
    var supsetneq$1 = "⊋";
    var supsetneqq$1 = "⫌";
    var supsim$1 = "⫈";
    var supsub$1 = "⫔";
    var supsup$1 = "⫖";
    var swarhk$1 = "⤦";
    var swarr$1 = "↙";
    var swArr$1 = "⇙";
    var swarrow$1 = "↙";
    var swnwar$1 = "⤪";
    var szlig$2 = "ß";
    var Tab$1 = "\t";
    var target$1 = "⌖";
    var Tau$1 = "Τ";
    var tau$1 = "τ";
    var tbrk$1 = "⎴";
    var Tcaron$1 = "Ť";
    var tcaron$1 = "ť";
    var Tcedil$1 = "Ţ";
    var tcedil$1 = "ţ";
    var Tcy$1 = "Т";
    var tcy$1 = "т";
    var tdot$1 = "⃛";
    var telrec$1 = "⌕";
    var Tfr$1 = "𝔗";
    var tfr$1 = "𝔱";
    var there4$1 = "∴";
    var therefore$1 = "∴";
    var Therefore$1 = "∴";
    var Theta$1 = "Θ";
    var theta$1 = "θ";
    var thetasym$1 = "ϑ";
    var thetav$1 = "ϑ";
    var thickapprox$1 = "≈";
    var thicksim$1 = "∼";
    var ThickSpace$1 = "  ";
    var ThinSpace$1 = " ";
    var thinsp$1 = " ";
    var thkap$1 = "≈";
    var thksim$1 = "∼";
    var THORN$2 = "Þ";
    var thorn$2 = "þ";
    var tilde$1 = "˜";
    var Tilde$1 = "∼";
    var TildeEqual$1 = "≃";
    var TildeFullEqual$1 = "≅";
    var TildeTilde$1 = "≈";
    var timesbar$1 = "⨱";
    var timesb$1 = "⊠";
    var times$2 = "×";
    var timesd$1 = "⨰";
    var tint$1 = "∭";
    var toea$1 = "⤨";
    var topbot$1 = "⌶";
    var topcir$1 = "⫱";
    var top$2 = "⊤";
    var Topf$1 = "𝕋";
    var topf$1 = "𝕥";
    var topfork$1 = "⫚";
    var tosa$1 = "⤩";
    var tprime$1 = "‴";
    var trade$1 = "™";
    var TRADE$1 = "™";
    var triangle$1 = "▵";
    var triangledown$1 = "▿";
    var triangleleft$1 = "◃";
    var trianglelefteq$1 = "⊴";
    var triangleq$1 = "≜";
    var triangleright$1 = "▹";
    var trianglerighteq$1 = "⊵";
    var tridot$1 = "◬";
    var trie$1 = "≜";
    var triminus$1 = "⨺";
    var TripleDot$1 = "⃛";
    var triplus$1 = "⨹";
    var trisb$1 = "⧍";
    var tritime$1 = "⨻";
    var trpezium$1 = "⏢";
    var Tscr$1 = "𝒯";
    var tscr$1 = "𝓉";
    var TScy$1 = "Ц";
    var tscy$1 = "ц";
    var TSHcy$1 = "Ћ";
    var tshcy$1 = "ћ";
    var Tstrok$1 = "Ŧ";
    var tstrok$1 = "ŧ";
    var twixt$1 = "≬";
    var twoheadleftarrow$1 = "↞";
    var twoheadrightarrow$1 = "↠";
    var Uacute$2 = "Ú";
    var uacute$2 = "ú";
    var uarr$1 = "↑";
    var Uarr$1 = "↟";
    var uArr$1 = "⇑";
    var Uarrocir$1 = "⥉";
    var Ubrcy$1 = "Ў";
    var ubrcy$1 = "ў";
    var Ubreve$1 = "Ŭ";
    var ubreve$1 = "ŭ";
    var Ucirc$2 = "Û";
    var ucirc$2 = "û";
    var Ucy$1 = "У";
    var ucy$1 = "у";
    var udarr$1 = "⇅";
    var Udblac$1 = "Ű";
    var udblac$1 = "ű";
    var udhar$1 = "⥮";
    var ufisht$1 = "⥾";
    var Ufr$1 = "𝔘";
    var ufr$1 = "𝔲";
    var Ugrave$2 = "Ù";
    var ugrave$2 = "ù";
    var uHar$1 = "⥣";
    var uharl$1 = "↿";
    var uharr$1 = "↾";
    var uhblk$1 = "▀";
    var ulcorn$1 = "⌜";
    var ulcorner$1 = "⌜";
    var ulcrop$1 = "⌏";
    var ultri$1 = "◸";
    var Umacr$1 = "Ū";
    var umacr$1 = "ū";
    var uml$2 = "¨";
    var UnderBar$1 = "_";
    var UnderBrace$1 = "⏟";
    var UnderBracket$1 = "⎵";
    var UnderParenthesis$1 = "⏝";
    var Union$1 = "⋃";
    var UnionPlus$1 = "⊎";
    var Uogon$1 = "Ų";
    var uogon$1 = "ų";
    var Uopf$1 = "𝕌";
    var uopf$1 = "𝕦";
    var UpArrowBar$1 = "⤒";
    var uparrow$1 = "↑";
    var UpArrow$1 = "↑";
    var Uparrow$1 = "⇑";
    var UpArrowDownArrow$1 = "⇅";
    var updownarrow$1 = "↕";
    var UpDownArrow$1 = "↕";
    var Updownarrow$1 = "⇕";
    var UpEquilibrium$1 = "⥮";
    var upharpoonleft$1 = "↿";
    var upharpoonright$1 = "↾";
    var uplus$1 = "⊎";
    var UpperLeftArrow$1 = "↖";
    var UpperRightArrow$1 = "↗";
    var upsi$1 = "υ";
    var Upsi$1 = "ϒ";
    var upsih$1 = "ϒ";
    var Upsilon$1 = "Υ";
    var upsilon$1 = "υ";
    var UpTeeArrow$1 = "↥";
    var UpTee$1 = "⊥";
    var upuparrows$1 = "⇈";
    var urcorn$1 = "⌝";
    var urcorner$1 = "⌝";
    var urcrop$1 = "⌎";
    var Uring$1 = "Ů";
    var uring$1 = "ů";
    var urtri$1 = "◹";
    var Uscr$1 = "𝒰";
    var uscr$1 = "𝓊";
    var utdot$1 = "⋰";
    var Utilde$1 = "Ũ";
    var utilde$1 = "ũ";
    var utri$1 = "▵";
    var utrif$1 = "▴";
    var uuarr$1 = "⇈";
    var Uuml$2 = "Ü";
    var uuml$2 = "ü";
    var uwangle$1 = "⦧";
    var vangrt$1 = "⦜";
    var varepsilon$1 = "ϵ";
    var varkappa$1 = "ϰ";
    var varnothing$1 = "∅";
    var varphi$1 = "ϕ";
    var varpi$1 = "ϖ";
    var varpropto$1 = "∝";
    var varr$1 = "↕";
    var vArr$1 = "⇕";
    var varrho$1 = "ϱ";
    var varsigma$1 = "ς";
    var varsubsetneq$1 = "⊊︀";
    var varsubsetneqq$1 = "⫋︀";
    var varsupsetneq$1 = "⊋︀";
    var varsupsetneqq$1 = "⫌︀";
    var vartheta$1 = "ϑ";
    var vartriangleleft$1 = "⊲";
    var vartriangleright$1 = "⊳";
    var vBar$1 = "⫨";
    var Vbar$1 = "⫫";
    var vBarv$1 = "⫩";
    var Vcy$1 = "В";
    var vcy$1 = "в";
    var vdash$1 = "⊢";
    var vDash$1 = "⊨";
    var Vdash$1 = "⊩";
    var VDash$1 = "⊫";
    var Vdashl$1 = "⫦";
    var veebar$1 = "⊻";
    var vee$1 = "∨";
    var Vee$1 = "⋁";
    var veeeq$1 = "≚";
    var vellip$1 = "⋮";
    var verbar$1 = "|";
    var Verbar$1 = "‖";
    var vert$1 = "|";
    var Vert$1 = "‖";
    var VerticalBar$1 = "∣";
    var VerticalLine$1 = "|";
    var VerticalSeparator$1 = "❘";
    var VerticalTilde$1 = "≀";
    var VeryThinSpace$1 = " ";
    var Vfr$1 = "𝔙";
    var vfr$1 = "𝔳";
    var vltri$1 = "⊲";
    var vnsub$1 = "⊂⃒";
    var vnsup$1 = "⊃⃒";
    var Vopf$1 = "𝕍";
    var vopf$1 = "𝕧";
    var vprop$1 = "∝";
    var vrtri$1 = "⊳";
    var Vscr$1 = "𝒱";
    var vscr$1 = "𝓋";
    var vsubnE$1 = "⫋︀";
    var vsubne$1 = "⊊︀";
    var vsupnE$1 = "⫌︀";
    var vsupne$1 = "⊋︀";
    var Vvdash$1 = "⊪";
    var vzigzag$1 = "⦚";
    var Wcirc$1 = "Ŵ";
    var wcirc$1 = "ŵ";
    var wedbar$1 = "⩟";
    var wedge$1 = "∧";
    var Wedge$1 = "⋀";
    var wedgeq$1 = "≙";
    var weierp$1 = "℘";
    var Wfr$1 = "𝔚";
    var wfr$1 = "𝔴";
    var Wopf$1 = "𝕎";
    var wopf$1 = "𝕨";
    var wp$1 = "℘";
    var wr$1 = "≀";
    var wreath$1 = "≀";
    var Wscr$1 = "𝒲";
    var wscr$1 = "𝓌";
    var xcap$1 = "⋂";
    var xcirc$1 = "◯";
    var xcup$1 = "⋃";
    var xdtri$1 = "▽";
    var Xfr$1 = "𝔛";
    var xfr$1 = "𝔵";
    var xharr$1 = "⟷";
    var xhArr$1 = "⟺";
    var Xi$1 = "Ξ";
    var xi$1 = "ξ";
    var xlarr$1 = "⟵";
    var xlArr$1 = "⟸";
    var xmap$1 = "⟼";
    var xnis$1 = "⋻";
    var xodot$1 = "⨀";
    var Xopf$1 = "𝕏";
    var xopf$1 = "𝕩";
    var xoplus$1 = "⨁";
    var xotime$1 = "⨂";
    var xrarr$1 = "⟶";
    var xrArr$1 = "⟹";
    var Xscr$1 = "𝒳";
    var xscr$1 = "𝓍";
    var xsqcup$1 = "⨆";
    var xuplus$1 = "⨄";
    var xutri$1 = "△";
    var xvee$1 = "⋁";
    var xwedge$1 = "⋀";
    var Yacute$2 = "Ý";
    var yacute$2 = "ý";
    var YAcy$1 = "Я";
    var yacy$1 = "я";
    var Ycirc$1 = "Ŷ";
    var ycirc$1 = "ŷ";
    var Ycy$1 = "Ы";
    var ycy$1 = "ы";
    var yen$3 = "¥";
    var Yfr$1 = "𝔜";
    var yfr$1 = "𝔶";
    var YIcy$1 = "Ї";
    var yicy$1 = "ї";
    var Yopf$1 = "𝕐";
    var yopf$1 = "𝕪";
    var Yscr$1 = "𝒴";
    var yscr$1 = "𝓎";
    var YUcy$1 = "Ю";
    var yucy$1 = "ю";
    var yuml$2 = "ÿ";
    var Yuml$1 = "Ÿ";
    var Zacute$1 = "Ź";
    var zacute$1 = "ź";
    var Zcaron$1 = "Ž";
    var zcaron$1 = "ž";
    var Zcy$1 = "З";
    var zcy$1 = "з";
    var Zdot$1 = "Ż";
    var zdot$1 = "ż";
    var zeetrf$1 = "ℨ";
    var ZeroWidthSpace$1 = "​";
    var Zeta$1 = "Ζ";
    var zeta$1 = "ζ";
    var zfr$1 = "𝔷";
    var Zfr$1 = "ℨ";
    var ZHcy$1 = "Ж";
    var zhcy$1 = "ж";
    var zigrarr$1 = "⇝";
    var zopf$1 = "𝕫";
    var Zopf$1 = "ℤ";
    var Zscr$1 = "𝒵";
    var zscr$1 = "𝓏";
    var zwj$1 = "‍";
    var zwnj$1 = "‌";
    var require$$0$2 = {
    	Aacute: Aacute$2,
    	aacute: aacute$2,
    	Abreve: Abreve$1,
    	abreve: abreve$1,
    	ac: ac$1,
    	acd: acd$1,
    	acE: acE$1,
    	Acirc: Acirc$2,
    	acirc: acirc$2,
    	acute: acute$2,
    	Acy: Acy$1,
    	acy: acy$1,
    	AElig: AElig$2,
    	aelig: aelig$2,
    	af: af$1,
    	Afr: Afr$1,
    	afr: afr$1,
    	Agrave: Agrave$2,
    	agrave: agrave$2,
    	alefsym: alefsym$1,
    	aleph: aleph$1,
    	Alpha: Alpha$1,
    	alpha: alpha$1,
    	Amacr: Amacr$1,
    	amacr: amacr$1,
    	amalg: amalg$1,
    	amp: amp$3,
    	AMP: AMP$2,
    	andand: andand$1,
    	And: And$1,
    	and: and$1,
    	andd: andd$1,
    	andslope: andslope$1,
    	andv: andv$1,
    	ang: ang$1,
    	ange: ange$1,
    	angle: angle$1,
    	angmsdaa: angmsdaa$1,
    	angmsdab: angmsdab$1,
    	angmsdac: angmsdac$1,
    	angmsdad: angmsdad$1,
    	angmsdae: angmsdae$1,
    	angmsdaf: angmsdaf$1,
    	angmsdag: angmsdag$1,
    	angmsdah: angmsdah$1,
    	angmsd: angmsd$1,
    	angrt: angrt$1,
    	angrtvb: angrtvb$1,
    	angrtvbd: angrtvbd$1,
    	angsph: angsph$1,
    	angst: angst$1,
    	angzarr: angzarr$1,
    	Aogon: Aogon$1,
    	aogon: aogon$1,
    	Aopf: Aopf$1,
    	aopf: aopf$1,
    	apacir: apacir$1,
    	ap: ap$1,
    	apE: apE$1,
    	ape: ape$1,
    	apid: apid$1,
    	apos: apos$2,
    	ApplyFunction: ApplyFunction$1,
    	approx: approx$1,
    	approxeq: approxeq$1,
    	Aring: Aring$2,
    	aring: aring$2,
    	Ascr: Ascr$1,
    	ascr: ascr$1,
    	Assign: Assign$1,
    	ast: ast$1,
    	asymp: asymp$1,
    	asympeq: asympeq$1,
    	Atilde: Atilde$2,
    	atilde: atilde$2,
    	Auml: Auml$2,
    	auml: auml$2,
    	awconint: awconint$1,
    	awint: awint$1,
    	backcong: backcong$1,
    	backepsilon: backepsilon$1,
    	backprime: backprime$1,
    	backsim: backsim$1,
    	backsimeq: backsimeq$1,
    	Backslash: Backslash$1,
    	Barv: Barv$1,
    	barvee: barvee$1,
    	barwed: barwed$1,
    	Barwed: Barwed$1,
    	barwedge: barwedge$1,
    	bbrk: bbrk$1,
    	bbrktbrk: bbrktbrk$1,
    	bcong: bcong$1,
    	Bcy: Bcy$1,
    	bcy: bcy$1,
    	bdquo: bdquo$1,
    	becaus: becaus$1,
    	because: because$1,
    	Because: Because$1,
    	bemptyv: bemptyv$1,
    	bepsi: bepsi$1,
    	bernou: bernou$1,
    	Bernoullis: Bernoullis$1,
    	Beta: Beta$1,
    	beta: beta$1,
    	beth: beth$1,
    	between: between$2,
    	Bfr: Bfr$1,
    	bfr: bfr$1,
    	bigcap: bigcap$1,
    	bigcirc: bigcirc$1,
    	bigcup: bigcup$1,
    	bigodot: bigodot$1,
    	bigoplus: bigoplus$1,
    	bigotimes: bigotimes$1,
    	bigsqcup: bigsqcup$1,
    	bigstar: bigstar$1,
    	bigtriangledown: bigtriangledown$1,
    	bigtriangleup: bigtriangleup$1,
    	biguplus: biguplus$1,
    	bigvee: bigvee$1,
    	bigwedge: bigwedge$1,
    	bkarow: bkarow$1,
    	blacklozenge: blacklozenge$1,
    	blacksquare: blacksquare$1,
    	blacktriangle: blacktriangle$1,
    	blacktriangledown: blacktriangledown$1,
    	blacktriangleleft: blacktriangleleft$1,
    	blacktriangleright: blacktriangleright$1,
    	blank: blank$1,
    	blk12: blk12$1,
    	blk14: blk14$1,
    	blk34: blk34$1,
    	block: block$2,
    	bne: bne$1,
    	bnequiv: bnequiv$1,
    	bNot: bNot$1,
    	bnot: bnot$1,
    	Bopf: Bopf$1,
    	bopf: bopf$1,
    	bot: bot$1,
    	bottom: bottom$1,
    	bowtie: bowtie$1,
    	boxbox: boxbox$1,
    	boxdl: boxdl$1,
    	boxdL: boxdL$1,
    	boxDl: boxDl$1,
    	boxDL: boxDL$1,
    	boxdr: boxdr$1,
    	boxdR: boxdR$1,
    	boxDr: boxDr$1,
    	boxDR: boxDR$1,
    	boxh: boxh$1,
    	boxH: boxH$1,
    	boxhd: boxhd$1,
    	boxHd: boxHd$1,
    	boxhD: boxhD$1,
    	boxHD: boxHD$1,
    	boxhu: boxhu$1,
    	boxHu: boxHu$1,
    	boxhU: boxhU$1,
    	boxHU: boxHU$1,
    	boxminus: boxminus$1,
    	boxplus: boxplus$1,
    	boxtimes: boxtimes$1,
    	boxul: boxul$1,
    	boxuL: boxuL$1,
    	boxUl: boxUl$1,
    	boxUL: boxUL$1,
    	boxur: boxur$1,
    	boxuR: boxuR$1,
    	boxUr: boxUr$1,
    	boxUR: boxUR$1,
    	boxv: boxv$1,
    	boxV: boxV$1,
    	boxvh: boxvh$1,
    	boxvH: boxvH$1,
    	boxVh: boxVh$1,
    	boxVH: boxVH$1,
    	boxvl: boxvl$1,
    	boxvL: boxvL$1,
    	boxVl: boxVl$1,
    	boxVL: boxVL$1,
    	boxvr: boxvr$1,
    	boxvR: boxvR$1,
    	boxVr: boxVr$1,
    	boxVR: boxVR$1,
    	bprime: bprime$1,
    	breve: breve$1,
    	Breve: Breve$1,
    	brvbar: brvbar$2,
    	bscr: bscr$1,
    	Bscr: Bscr$1,
    	bsemi: bsemi$1,
    	bsim: bsim$1,
    	bsime: bsime$1,
    	bsolb: bsolb$1,
    	bsol: bsol$1,
    	bsolhsub: bsolhsub$1,
    	bull: bull$1,
    	bullet: bullet$1,
    	bump: bump$1,
    	bumpE: bumpE$1,
    	bumpe: bumpe$1,
    	Bumpeq: Bumpeq$1,
    	bumpeq: bumpeq$1,
    	Cacute: Cacute$1,
    	cacute: cacute$1,
    	capand: capand$1,
    	capbrcup: capbrcup$1,
    	capcap: capcap$1,
    	cap: cap$1,
    	Cap: Cap$1,
    	capcup: capcup$1,
    	capdot: capdot$1,
    	CapitalDifferentialD: CapitalDifferentialD$1,
    	caps: caps$1,
    	caret: caret$1,
    	caron: caron$1,
    	Cayleys: Cayleys$1,
    	ccaps: ccaps$1,
    	Ccaron: Ccaron$1,
    	ccaron: ccaron$1,
    	Ccedil: Ccedil$2,
    	ccedil: ccedil$2,
    	Ccirc: Ccirc$1,
    	ccirc: ccirc$1,
    	Cconint: Cconint$1,
    	ccups: ccups$1,
    	ccupssm: ccupssm$1,
    	Cdot: Cdot$1,
    	cdot: cdot$1,
    	cedil: cedil$2,
    	Cedilla: Cedilla$1,
    	cemptyv: cemptyv$1,
    	cent: cent$2,
    	centerdot: centerdot$1,
    	CenterDot: CenterDot$1,
    	cfr: cfr$1,
    	Cfr: Cfr$1,
    	CHcy: CHcy$1,
    	chcy: chcy$1,
    	check: check$1,
    	checkmark: checkmark$1,
    	Chi: Chi$1,
    	chi: chi$1,
    	circ: circ$1,
    	circeq: circeq$1,
    	circlearrowleft: circlearrowleft$1,
    	circlearrowright: circlearrowright$1,
    	circledast: circledast$1,
    	circledcirc: circledcirc$1,
    	circleddash: circleddash$1,
    	CircleDot: CircleDot$1,
    	circledR: circledR$1,
    	circledS: circledS$1,
    	CircleMinus: CircleMinus$1,
    	CirclePlus: CirclePlus$1,
    	CircleTimes: CircleTimes$1,
    	cir: cir$1,
    	cirE: cirE$1,
    	cire: cire$1,
    	cirfnint: cirfnint$1,
    	cirmid: cirmid$1,
    	cirscir: cirscir$1,
    	ClockwiseContourIntegral: ClockwiseContourIntegral$1,
    	CloseCurlyDoubleQuote: CloseCurlyDoubleQuote$1,
    	CloseCurlyQuote: CloseCurlyQuote$1,
    	clubs: clubs$2,
    	clubsuit: clubsuit$1,
    	colon: colon$1,
    	Colon: Colon$1,
    	Colone: Colone$1,
    	colone: colone$1,
    	coloneq: coloneq$1,
    	comma: comma$1,
    	commat: commat$1,
    	comp: comp$1,
    	compfn: compfn$1,
    	complement: complement$1,
    	complexes: complexes$1,
    	cong: cong$1,
    	congdot: congdot$1,
    	Congruent: Congruent$1,
    	conint: conint$1,
    	Conint: Conint$1,
    	ContourIntegral: ContourIntegral$1,
    	copf: copf$1,
    	Copf: Copf$1,
    	coprod: coprod$1,
    	Coproduct: Coproduct$1,
    	copy: copy$3,
    	COPY: COPY$2,
    	copysr: copysr$1,
    	CounterClockwiseContourIntegral: CounterClockwiseContourIntegral$1,
    	crarr: crarr$1,
    	cross: cross$1,
    	Cross: Cross$1,
    	Cscr: Cscr$1,
    	cscr: cscr$1,
    	csub: csub$1,
    	csube: csube$1,
    	csup: csup$1,
    	csupe: csupe$1,
    	ctdot: ctdot$1,
    	cudarrl: cudarrl$1,
    	cudarrr: cudarrr$1,
    	cuepr: cuepr$1,
    	cuesc: cuesc$1,
    	cularr: cularr$1,
    	cularrp: cularrp$1,
    	cupbrcap: cupbrcap$1,
    	cupcap: cupcap$1,
    	CupCap: CupCap$1,
    	cup: cup$1,
    	Cup: Cup$1,
    	cupcup: cupcup$1,
    	cupdot: cupdot$1,
    	cupor: cupor$1,
    	cups: cups$1,
    	curarr: curarr$1,
    	curarrm: curarrm$1,
    	curlyeqprec: curlyeqprec$1,
    	curlyeqsucc: curlyeqsucc$1,
    	curlyvee: curlyvee$1,
    	curlywedge: curlywedge$1,
    	curren: curren$2,
    	curvearrowleft: curvearrowleft$1,
    	curvearrowright: curvearrowright$1,
    	cuvee: cuvee$1,
    	cuwed: cuwed$1,
    	cwconint: cwconint$1,
    	cwint: cwint$1,
    	cylcty: cylcty$1,
    	dagger: dagger$2,
    	Dagger: Dagger$1,
    	daleth: daleth$1,
    	darr: darr$1,
    	Darr: Darr$1,
    	dArr: dArr$1,
    	dash: dash$2,
    	Dashv: Dashv$1,
    	dashv: dashv$1,
    	dbkarow: dbkarow$1,
    	dblac: dblac$1,
    	Dcaron: Dcaron$1,
    	dcaron: dcaron$1,
    	Dcy: Dcy$1,
    	dcy: dcy$1,
    	ddagger: ddagger$1,
    	ddarr: ddarr$1,
    	DD: DD$1,
    	dd: dd$1,
    	DDotrahd: DDotrahd$1,
    	ddotseq: ddotseq$1,
    	deg: deg$2,
    	Del: Del$1,
    	Delta: Delta$1,
    	delta: delta$1,
    	demptyv: demptyv$1,
    	dfisht: dfisht$1,
    	Dfr: Dfr$1,
    	dfr: dfr$1,
    	dHar: dHar$1,
    	dharl: dharl$1,
    	dharr: dharr$1,
    	DiacriticalAcute: DiacriticalAcute$1,
    	DiacriticalDot: DiacriticalDot$1,
    	DiacriticalDoubleAcute: DiacriticalDoubleAcute$1,
    	DiacriticalGrave: DiacriticalGrave$1,
    	DiacriticalTilde: DiacriticalTilde$1,
    	diam: diam$1,
    	diamond: diamond$1,
    	Diamond: Diamond$1,
    	diamondsuit: diamondsuit$1,
    	diams: diams$1,
    	die: die$1,
    	DifferentialD: DifferentialD$1,
    	digamma: digamma$1,
    	disin: disin$1,
    	div: div$1,
    	divide: divide$2,
    	divideontimes: divideontimes$1,
    	divonx: divonx$1,
    	DJcy: DJcy$1,
    	djcy: djcy$1,
    	dlcorn: dlcorn$1,
    	dlcrop: dlcrop$1,
    	dollar: dollar$2,
    	Dopf: Dopf$1,
    	dopf: dopf$1,
    	Dot: Dot$1,
    	dot: dot$1,
    	DotDot: DotDot$1,
    	doteq: doteq$1,
    	doteqdot: doteqdot$1,
    	DotEqual: DotEqual$1,
    	dotminus: dotminus$1,
    	dotplus: dotplus$1,
    	dotsquare: dotsquare$1,
    	doublebarwedge: doublebarwedge$1,
    	DoubleContourIntegral: DoubleContourIntegral$1,
    	DoubleDot: DoubleDot$1,
    	DoubleDownArrow: DoubleDownArrow$1,
    	DoubleLeftArrow: DoubleLeftArrow$1,
    	DoubleLeftRightArrow: DoubleLeftRightArrow$1,
    	DoubleLeftTee: DoubleLeftTee$1,
    	DoubleLongLeftArrow: DoubleLongLeftArrow$1,
    	DoubleLongLeftRightArrow: DoubleLongLeftRightArrow$1,
    	DoubleLongRightArrow: DoubleLongRightArrow$1,
    	DoubleRightArrow: DoubleRightArrow$1,
    	DoubleRightTee: DoubleRightTee$1,
    	DoubleUpArrow: DoubleUpArrow$1,
    	DoubleUpDownArrow: DoubleUpDownArrow$1,
    	DoubleVerticalBar: DoubleVerticalBar$1,
    	DownArrowBar: DownArrowBar$1,
    	downarrow: downarrow$1,
    	DownArrow: DownArrow$1,
    	Downarrow: Downarrow$1,
    	DownArrowUpArrow: DownArrowUpArrow$1,
    	DownBreve: DownBreve$1,
    	downdownarrows: downdownarrows$1,
    	downharpoonleft: downharpoonleft$1,
    	downharpoonright: downharpoonright$1,
    	DownLeftRightVector: DownLeftRightVector$1,
    	DownLeftTeeVector: DownLeftTeeVector$1,
    	DownLeftVectorBar: DownLeftVectorBar$1,
    	DownLeftVector: DownLeftVector$1,
    	DownRightTeeVector: DownRightTeeVector$1,
    	DownRightVectorBar: DownRightVectorBar$1,
    	DownRightVector: DownRightVector$1,
    	DownTeeArrow: DownTeeArrow$1,
    	DownTee: DownTee$1,
    	drbkarow: drbkarow$1,
    	drcorn: drcorn$1,
    	drcrop: drcrop$1,
    	Dscr: Dscr$1,
    	dscr: dscr$1,
    	DScy: DScy$1,
    	dscy: dscy$1,
    	dsol: dsol$1,
    	Dstrok: Dstrok$1,
    	dstrok: dstrok$1,
    	dtdot: dtdot$1,
    	dtri: dtri$1,
    	dtrif: dtrif$1,
    	duarr: duarr$1,
    	duhar: duhar$1,
    	dwangle: dwangle$1,
    	DZcy: DZcy$1,
    	dzcy: dzcy$1,
    	dzigrarr: dzigrarr$1,
    	Eacute: Eacute$2,
    	eacute: eacute$2,
    	easter: easter$1,
    	Ecaron: Ecaron$1,
    	ecaron: ecaron$1,
    	Ecirc: Ecirc$2,
    	ecirc: ecirc$2,
    	ecir: ecir$1,
    	ecolon: ecolon$1,
    	Ecy: Ecy$1,
    	ecy: ecy$1,
    	eDDot: eDDot$1,
    	Edot: Edot$1,
    	edot: edot$1,
    	eDot: eDot$1,
    	ee: ee$1,
    	efDot: efDot$1,
    	Efr: Efr$1,
    	efr: efr$1,
    	eg: eg$1,
    	Egrave: Egrave$2,
    	egrave: egrave$2,
    	egs: egs$1,
    	egsdot: egsdot$1,
    	el: el$1,
    	Element: Element$2,
    	elinters: elinters$1,
    	ell: ell$1,
    	els: els$1,
    	elsdot: elsdot$1,
    	Emacr: Emacr$1,
    	emacr: emacr$1,
    	empty: empty$2,
    	emptyset: emptyset$1,
    	EmptySmallSquare: EmptySmallSquare$1,
    	emptyv: emptyv$1,
    	EmptyVerySmallSquare: EmptyVerySmallSquare$1,
    	emsp13: emsp13$1,
    	emsp14: emsp14$1,
    	emsp: emsp$1,
    	ENG: ENG$1,
    	eng: eng$1,
    	ensp: ensp$1,
    	Eogon: Eogon$1,
    	eogon: eogon$1,
    	Eopf: Eopf$1,
    	eopf: eopf$1,
    	epar: epar$1,
    	eparsl: eparsl$1,
    	eplus: eplus$1,
    	epsi: epsi$1,
    	Epsilon: Epsilon$1,
    	epsilon: epsilon$1,
    	epsiv: epsiv$1,
    	eqcirc: eqcirc$1,
    	eqcolon: eqcolon$1,
    	eqsim: eqsim$1,
    	eqslantgtr: eqslantgtr$1,
    	eqslantless: eqslantless$1,
    	Equal: Equal$1,
    	equals: equals$1,
    	EqualTilde: EqualTilde$1,
    	equest: equest$1,
    	Equilibrium: Equilibrium$1,
    	equiv: equiv$1,
    	equivDD: equivDD$1,
    	eqvparsl: eqvparsl$1,
    	erarr: erarr$1,
    	erDot: erDot$1,
    	escr: escr$1,
    	Escr: Escr$1,
    	esdot: esdot$1,
    	Esim: Esim$1,
    	esim: esim$1,
    	Eta: Eta$1,
    	eta: eta$1,
    	ETH: ETH$2,
    	eth: eth$2,
    	Euml: Euml$2,
    	euml: euml$2,
    	euro: euro$2,
    	excl: excl$1,
    	exist: exist$1,
    	Exists: Exists$1,
    	expectation: expectation$1,
    	exponentiale: exponentiale$1,
    	ExponentialE: ExponentialE$1,
    	fallingdotseq: fallingdotseq$1,
    	Fcy: Fcy$1,
    	fcy: fcy$1,
    	female: female$1,
    	ffilig: ffilig$1,
    	fflig: fflig$1,
    	ffllig: ffllig$1,
    	Ffr: Ffr$1,
    	ffr: ffr$1,
    	filig: filig$1,
    	FilledSmallSquare: FilledSmallSquare$1,
    	FilledVerySmallSquare: FilledVerySmallSquare$1,
    	fjlig: fjlig$1,
    	flat: flat$1,
    	fllig: fllig$1,
    	fltns: fltns$1,
    	fnof: fnof$1,
    	Fopf: Fopf$1,
    	fopf: fopf$1,
    	forall: forall$1,
    	ForAll: ForAll$1,
    	fork: fork$1,
    	forkv: forkv$1,
    	Fouriertrf: Fouriertrf$1,
    	fpartint: fpartint$1,
    	frac12: frac12$2,
    	frac13: frac13$1,
    	frac14: frac14$2,
    	frac15: frac15$1,
    	frac16: frac16$1,
    	frac18: frac18$1,
    	frac23: frac23$1,
    	frac25: frac25$1,
    	frac34: frac34$2,
    	frac35: frac35$1,
    	frac38: frac38$1,
    	frac45: frac45$1,
    	frac56: frac56$1,
    	frac58: frac58$1,
    	frac78: frac78$1,
    	frasl: frasl$1,
    	frown: frown$1,
    	fscr: fscr$1,
    	Fscr: Fscr$1,
    	gacute: gacute$1,
    	Gamma: Gamma$1,
    	gamma: gamma$1,
    	Gammad: Gammad$1,
    	gammad: gammad$1,
    	gap: gap$1,
    	Gbreve: Gbreve$1,
    	gbreve: gbreve$1,
    	Gcedil: Gcedil$1,
    	Gcirc: Gcirc$1,
    	gcirc: gcirc$1,
    	Gcy: Gcy$1,
    	gcy: gcy$1,
    	Gdot: Gdot$1,
    	gdot: gdot$1,
    	ge: ge$1,
    	gE: gE$1,
    	gEl: gEl$1,
    	gel: gel$1,
    	geq: geq$1,
    	geqq: geqq$1,
    	geqslant: geqslant$1,
    	gescc: gescc$1,
    	ges: ges$1,
    	gesdot: gesdot$1,
    	gesdoto: gesdoto$1,
    	gesdotol: gesdotol$1,
    	gesl: gesl$1,
    	gesles: gesles$1,
    	Gfr: Gfr$1,
    	gfr: gfr$1,
    	gg: gg$1,
    	Gg: Gg$1,
    	ggg: ggg$1,
    	gimel: gimel$1,
    	GJcy: GJcy$1,
    	gjcy: gjcy$1,
    	gla: gla$1,
    	gl: gl$1,
    	glE: glE$1,
    	glj: glj$1,
    	gnap: gnap$1,
    	gnapprox: gnapprox$1,
    	gne: gne$1,
    	gnE: gnE$1,
    	gneq: gneq$1,
    	gneqq: gneqq$1,
    	gnsim: gnsim$1,
    	Gopf: Gopf$1,
    	gopf: gopf$1,
    	grave: grave$1,
    	GreaterEqual: GreaterEqual$1,
    	GreaterEqualLess: GreaterEqualLess$1,
    	GreaterFullEqual: GreaterFullEqual$1,
    	GreaterGreater: GreaterGreater$1,
    	GreaterLess: GreaterLess$1,
    	GreaterSlantEqual: GreaterSlantEqual$1,
    	GreaterTilde: GreaterTilde$1,
    	Gscr: Gscr$1,
    	gscr: gscr$1,
    	gsim: gsim$1,
    	gsime: gsime$1,
    	gsiml: gsiml$1,
    	gtcc: gtcc$1,
    	gtcir: gtcir$1,
    	gt: gt$3,
    	GT: GT$2,
    	Gt: Gt$1,
    	gtdot: gtdot$1,
    	gtlPar: gtlPar$1,
    	gtquest: gtquest$1,
    	gtrapprox: gtrapprox$1,
    	gtrarr: gtrarr$1,
    	gtrdot: gtrdot$1,
    	gtreqless: gtreqless$1,
    	gtreqqless: gtreqqless$1,
    	gtrless: gtrless$1,
    	gtrsim: gtrsim$1,
    	gvertneqq: gvertneqq$1,
    	gvnE: gvnE$1,
    	Hacek: Hacek$1,
    	hairsp: hairsp$1,
    	half: half$1,
    	hamilt: hamilt$1,
    	HARDcy: HARDcy$1,
    	hardcy: hardcy$1,
    	harrcir: harrcir$1,
    	harr: harr$1,
    	hArr: hArr$1,
    	harrw: harrw$1,
    	Hat: Hat$1,
    	hbar: hbar$1,
    	Hcirc: Hcirc$1,
    	hcirc: hcirc$1,
    	hearts: hearts$2,
    	heartsuit: heartsuit$1,
    	hellip: hellip$1,
    	hercon: hercon$1,
    	hfr: hfr$1,
    	Hfr: Hfr$1,
    	HilbertSpace: HilbertSpace$1,
    	hksearow: hksearow$1,
    	hkswarow: hkswarow$1,
    	hoarr: hoarr$1,
    	homtht: homtht$1,
    	hookleftarrow: hookleftarrow$1,
    	hookrightarrow: hookrightarrow$1,
    	hopf: hopf$1,
    	Hopf: Hopf$1,
    	horbar: horbar$1,
    	HorizontalLine: HorizontalLine$1,
    	hscr: hscr$1,
    	Hscr: Hscr$1,
    	hslash: hslash$1,
    	Hstrok: Hstrok$1,
    	hstrok: hstrok$1,
    	HumpDownHump: HumpDownHump$1,
    	HumpEqual: HumpEqual$1,
    	hybull: hybull$1,
    	hyphen: hyphen$1,
    	Iacute: Iacute$2,
    	iacute: iacute$2,
    	ic: ic$1,
    	Icirc: Icirc$2,
    	icirc: icirc$2,
    	Icy: Icy$1,
    	icy: icy$1,
    	Idot: Idot$1,
    	IEcy: IEcy$1,
    	iecy: iecy$1,
    	iexcl: iexcl$2,
    	iff: iff$1,
    	ifr: ifr$1,
    	Ifr: Ifr$1,
    	Igrave: Igrave$2,
    	igrave: igrave$2,
    	ii: ii$1,
    	iiiint: iiiint$1,
    	iiint: iiint$1,
    	iinfin: iinfin$1,
    	iiota: iiota$1,
    	IJlig: IJlig$1,
    	ijlig: ijlig$1,
    	Imacr: Imacr$1,
    	imacr: imacr$1,
    	image: image$3,
    	ImaginaryI: ImaginaryI$1,
    	imagline: imagline$1,
    	imagpart: imagpart$1,
    	imath: imath$1,
    	Im: Im$1,
    	imof: imof$1,
    	imped: imped$1,
    	Implies: Implies$1,
    	incare: incare$1,
    	"in": "∈",
    	infin: infin$1,
    	infintie: infintie$1,
    	inodot: inodot$1,
    	intcal: intcal$1,
    	int: int$1,
    	Int: Int$1,
    	integers: integers$1,
    	Integral: Integral$1,
    	intercal: intercal$1,
    	Intersection: Intersection$1,
    	intlarhk: intlarhk$1,
    	intprod: intprod$1,
    	InvisibleComma: InvisibleComma$1,
    	InvisibleTimes: InvisibleTimes$1,
    	IOcy: IOcy$1,
    	iocy: iocy$1,
    	Iogon: Iogon$1,
    	iogon: iogon$1,
    	Iopf: Iopf$1,
    	iopf: iopf$1,
    	Iota: Iota$1,
    	iota: iota$1,
    	iprod: iprod$1,
    	iquest: iquest$2,
    	iscr: iscr$1,
    	Iscr: Iscr$1,
    	isin: isin$1,
    	isindot: isindot$1,
    	isinE: isinE$1,
    	isins: isins$1,
    	isinsv: isinsv$1,
    	isinv: isinv$1,
    	it: it$2,
    	Itilde: Itilde$1,
    	itilde: itilde$1,
    	Iukcy: Iukcy$1,
    	iukcy: iukcy$1,
    	Iuml: Iuml$2,
    	iuml: iuml$2,
    	Jcirc: Jcirc$1,
    	jcirc: jcirc$1,
    	Jcy: Jcy$1,
    	jcy: jcy$1,
    	Jfr: Jfr$1,
    	jfr: jfr$1,
    	jmath: jmath$1,
    	Jopf: Jopf$1,
    	jopf: jopf$1,
    	Jscr: Jscr$1,
    	jscr: jscr$1,
    	Jsercy: Jsercy$1,
    	jsercy: jsercy$1,
    	Jukcy: Jukcy$1,
    	jukcy: jukcy$1,
    	Kappa: Kappa$1,
    	kappa: kappa$1,
    	kappav: kappav$1,
    	Kcedil: Kcedil$1,
    	kcedil: kcedil$1,
    	Kcy: Kcy$1,
    	kcy: kcy$1,
    	Kfr: Kfr$1,
    	kfr: kfr$1,
    	kgreen: kgreen$1,
    	KHcy: KHcy$1,
    	khcy: khcy$1,
    	KJcy: KJcy$1,
    	kjcy: kjcy$1,
    	Kopf: Kopf$1,
    	kopf: kopf$1,
    	Kscr: Kscr$1,
    	kscr: kscr$1,
    	lAarr: lAarr$1,
    	Lacute: Lacute$1,
    	lacute: lacute$1,
    	laemptyv: laemptyv$1,
    	lagran: lagran$1,
    	Lambda: Lambda$1,
    	lambda: lambda$1,
    	lang: lang$1,
    	Lang: Lang$1,
    	langd: langd$1,
    	langle: langle$1,
    	lap: lap$1,
    	Laplacetrf: Laplacetrf$1,
    	laquo: laquo$2,
    	larrb: larrb$1,
    	larrbfs: larrbfs$1,
    	larr: larr$1,
    	Larr: Larr$1,
    	lArr: lArr$1,
    	larrfs: larrfs$1,
    	larrhk: larrhk$1,
    	larrlp: larrlp$1,
    	larrpl: larrpl$1,
    	larrsim: larrsim$1,
    	larrtl: larrtl$1,
    	latail: latail$1,
    	lAtail: lAtail$1,
    	lat: lat$1,
    	late: late$1,
    	lates: lates$1,
    	lbarr: lbarr$1,
    	lBarr: lBarr$1,
    	lbbrk: lbbrk$1,
    	lbrace: lbrace$1,
    	lbrack: lbrack$1,
    	lbrke: lbrke$1,
    	lbrksld: lbrksld$1,
    	lbrkslu: lbrkslu$1,
    	Lcaron: Lcaron$1,
    	lcaron: lcaron$1,
    	Lcedil: Lcedil$1,
    	lcedil: lcedil$1,
    	lceil: lceil$1,
    	lcub: lcub$1,
    	Lcy: Lcy$1,
    	lcy: lcy$1,
    	ldca: ldca$1,
    	ldquo: ldquo$1,
    	ldquor: ldquor$1,
    	ldrdhar: ldrdhar$1,
    	ldrushar: ldrushar$1,
    	ldsh: ldsh$1,
    	le: le$1,
    	lE: lE$1,
    	LeftAngleBracket: LeftAngleBracket$1,
    	LeftArrowBar: LeftArrowBar$1,
    	leftarrow: leftarrow$1,
    	LeftArrow: LeftArrow$1,
    	Leftarrow: Leftarrow$1,
    	LeftArrowRightArrow: LeftArrowRightArrow$1,
    	leftarrowtail: leftarrowtail$1,
    	LeftCeiling: LeftCeiling$1,
    	LeftDoubleBracket: LeftDoubleBracket$1,
    	LeftDownTeeVector: LeftDownTeeVector$1,
    	LeftDownVectorBar: LeftDownVectorBar$1,
    	LeftDownVector: LeftDownVector$1,
    	LeftFloor: LeftFloor$1,
    	leftharpoondown: leftharpoondown$1,
    	leftharpoonup: leftharpoonup$1,
    	leftleftarrows: leftleftarrows$1,
    	leftrightarrow: leftrightarrow$1,
    	LeftRightArrow: LeftRightArrow$1,
    	Leftrightarrow: Leftrightarrow$1,
    	leftrightarrows: leftrightarrows$1,
    	leftrightharpoons: leftrightharpoons$1,
    	leftrightsquigarrow: leftrightsquigarrow$1,
    	LeftRightVector: LeftRightVector$1,
    	LeftTeeArrow: LeftTeeArrow$1,
    	LeftTee: LeftTee$1,
    	LeftTeeVector: LeftTeeVector$1,
    	leftthreetimes: leftthreetimes$1,
    	LeftTriangleBar: LeftTriangleBar$1,
    	LeftTriangle: LeftTriangle$1,
    	LeftTriangleEqual: LeftTriangleEqual$1,
    	LeftUpDownVector: LeftUpDownVector$1,
    	LeftUpTeeVector: LeftUpTeeVector$1,
    	LeftUpVectorBar: LeftUpVectorBar$1,
    	LeftUpVector: LeftUpVector$1,
    	LeftVectorBar: LeftVectorBar$1,
    	LeftVector: LeftVector$1,
    	lEg: lEg$1,
    	leg: leg$2,
    	leq: leq$1,
    	leqq: leqq$1,
    	leqslant: leqslant$1,
    	lescc: lescc$1,
    	les: les$1,
    	lesdot: lesdot$1,
    	lesdoto: lesdoto$1,
    	lesdotor: lesdotor$1,
    	lesg: lesg$1,
    	lesges: lesges$1,
    	lessapprox: lessapprox$1,
    	lessdot: lessdot$1,
    	lesseqgtr: lesseqgtr$1,
    	lesseqqgtr: lesseqqgtr$1,
    	LessEqualGreater: LessEqualGreater$1,
    	LessFullEqual: LessFullEqual$1,
    	LessGreater: LessGreater$1,
    	lessgtr: lessgtr$1,
    	LessLess: LessLess$1,
    	lesssim: lesssim$1,
    	LessSlantEqual: LessSlantEqual$1,
    	LessTilde: LessTilde$1,
    	lfisht: lfisht$1,
    	lfloor: lfloor$1,
    	Lfr: Lfr$1,
    	lfr: lfr$1,
    	lg: lg$1,
    	lgE: lgE$1,
    	lHar: lHar$1,
    	lhard: lhard$1,
    	lharu: lharu$1,
    	lharul: lharul$1,
    	lhblk: lhblk$1,
    	LJcy: LJcy$1,
    	ljcy: ljcy$1,
    	llarr: llarr$1,
    	ll: ll$1,
    	Ll: Ll$1,
    	llcorner: llcorner$1,
    	Lleftarrow: Lleftarrow$1,
    	llhard: llhard$1,
    	lltri: lltri$1,
    	Lmidot: Lmidot$1,
    	lmidot: lmidot$1,
    	lmoustache: lmoustache$1,
    	lmoust: lmoust$1,
    	lnap: lnap$1,
    	lnapprox: lnapprox$1,
    	lne: lne$1,
    	lnE: lnE$1,
    	lneq: lneq$1,
    	lneqq: lneqq$1,
    	lnsim: lnsim$1,
    	loang: loang$1,
    	loarr: loarr$1,
    	lobrk: lobrk$1,
    	longleftarrow: longleftarrow$1,
    	LongLeftArrow: LongLeftArrow$1,
    	Longleftarrow: Longleftarrow$1,
    	longleftrightarrow: longleftrightarrow$1,
    	LongLeftRightArrow: LongLeftRightArrow$1,
    	Longleftrightarrow: Longleftrightarrow$1,
    	longmapsto: longmapsto$1,
    	longrightarrow: longrightarrow$1,
    	LongRightArrow: LongRightArrow$1,
    	Longrightarrow: Longrightarrow$1,
    	looparrowleft: looparrowleft$1,
    	looparrowright: looparrowright$1,
    	lopar: lopar$1,
    	Lopf: Lopf$1,
    	lopf: lopf$1,
    	loplus: loplus$1,
    	lotimes: lotimes$1,
    	lowast: lowast$1,
    	lowbar: lowbar$1,
    	LowerLeftArrow: LowerLeftArrow$1,
    	LowerRightArrow: LowerRightArrow$1,
    	loz: loz$1,
    	lozenge: lozenge$1,
    	lozf: lozf$1,
    	lpar: lpar$1,
    	lparlt: lparlt$1,
    	lrarr: lrarr$1,
    	lrcorner: lrcorner$1,
    	lrhar: lrhar$1,
    	lrhard: lrhard$1,
    	lrm: lrm$1,
    	lrtri: lrtri$1,
    	lsaquo: lsaquo$1,
    	lscr: lscr$1,
    	Lscr: Lscr$1,
    	lsh: lsh$1,
    	Lsh: Lsh$1,
    	lsim: lsim$1,
    	lsime: lsime$1,
    	lsimg: lsimg$1,
    	lsqb: lsqb$1,
    	lsquo: lsquo$1,
    	lsquor: lsquor$1,
    	Lstrok: Lstrok$1,
    	lstrok: lstrok$1,
    	ltcc: ltcc$1,
    	ltcir: ltcir$1,
    	lt: lt$3,
    	LT: LT$2,
    	Lt: Lt$1,
    	ltdot: ltdot$1,
    	lthree: lthree$1,
    	ltimes: ltimes$1,
    	ltlarr: ltlarr$1,
    	ltquest: ltquest$1,
    	ltri: ltri$1,
    	ltrie: ltrie$1,
    	ltrif: ltrif$1,
    	ltrPar: ltrPar$1,
    	lurdshar: lurdshar$1,
    	luruhar: luruhar$1,
    	lvertneqq: lvertneqq$1,
    	lvnE: lvnE$1,
    	macr: macr$2,
    	male: male$1,
    	malt: malt$1,
    	maltese: maltese$1,
    	"Map": "⤅",
    	map: map$2,
    	mapsto: mapsto$1,
    	mapstodown: mapstodown$1,
    	mapstoleft: mapstoleft$1,
    	mapstoup: mapstoup$1,
    	marker: marker$1,
    	mcomma: mcomma$1,
    	Mcy: Mcy$1,
    	mcy: mcy$1,
    	mdash: mdash$1,
    	mDDot: mDDot$1,
    	measuredangle: measuredangle$1,
    	MediumSpace: MediumSpace$1,
    	Mellintrf: Mellintrf$1,
    	Mfr: Mfr$1,
    	mfr: mfr$1,
    	mho: mho$1,
    	micro: micro$2,
    	midast: midast$1,
    	midcir: midcir$1,
    	mid: mid$1,
    	middot: middot$2,
    	minusb: minusb$1,
    	minus: minus$1,
    	minusd: minusd$1,
    	minusdu: minusdu$1,
    	MinusPlus: MinusPlus$1,
    	mlcp: mlcp$1,
    	mldr: mldr$1,
    	mnplus: mnplus$1,
    	models: models$1,
    	Mopf: Mopf$1,
    	mopf: mopf$1,
    	mp: mp$1,
    	mscr: mscr$1,
    	Mscr: Mscr$1,
    	mstpos: mstpos$1,
    	Mu: Mu$1,
    	mu: mu$1,
    	multimap: multimap$1,
    	mumap: mumap$1,
    	nabla: nabla$1,
    	Nacute: Nacute$1,
    	nacute: nacute$1,
    	nang: nang$1,
    	nap: nap$1,
    	napE: napE$1,
    	napid: napid$1,
    	napos: napos$1,
    	napprox: napprox$1,
    	natural: natural$1,
    	naturals: naturals$1,
    	natur: natur$1,
    	nbsp: nbsp$2,
    	nbump: nbump$1,
    	nbumpe: nbumpe$1,
    	ncap: ncap$1,
    	Ncaron: Ncaron$1,
    	ncaron: ncaron$1,
    	Ncedil: Ncedil$1,
    	ncedil: ncedil$1,
    	ncong: ncong$1,
    	ncongdot: ncongdot$1,
    	ncup: ncup$1,
    	Ncy: Ncy$1,
    	ncy: ncy$1,
    	ndash: ndash$1,
    	nearhk: nearhk$1,
    	nearr: nearr$1,
    	neArr: neArr$1,
    	nearrow: nearrow$1,
    	ne: ne$1,
    	nedot: nedot$1,
    	NegativeMediumSpace: NegativeMediumSpace$1,
    	NegativeThickSpace: NegativeThickSpace$1,
    	NegativeThinSpace: NegativeThinSpace$1,
    	NegativeVeryThinSpace: NegativeVeryThinSpace$1,
    	nequiv: nequiv$1,
    	nesear: nesear$1,
    	nesim: nesim$1,
    	NestedGreaterGreater: NestedGreaterGreater$1,
    	NestedLessLess: NestedLessLess$1,
    	NewLine: NewLine$1,
    	nexist: nexist$1,
    	nexists: nexists$1,
    	Nfr: Nfr$1,
    	nfr: nfr$1,
    	ngE: ngE$1,
    	nge: nge$1,
    	ngeq: ngeq$1,
    	ngeqq: ngeqq$1,
    	ngeqslant: ngeqslant$1,
    	nges: nges$1,
    	nGg: nGg$1,
    	ngsim: ngsim$1,
    	nGt: nGt$1,
    	ngt: ngt$1,
    	ngtr: ngtr$1,
    	nGtv: nGtv$1,
    	nharr: nharr$1,
    	nhArr: nhArr$1,
    	nhpar: nhpar$1,
    	ni: ni$1,
    	nis: nis$1,
    	nisd: nisd$1,
    	niv: niv$1,
    	NJcy: NJcy$1,
    	njcy: njcy$1,
    	nlarr: nlarr$1,
    	nlArr: nlArr$1,
    	nldr: nldr$1,
    	nlE: nlE$1,
    	nle: nle$1,
    	nleftarrow: nleftarrow$1,
    	nLeftarrow: nLeftarrow$1,
    	nleftrightarrow: nleftrightarrow$1,
    	nLeftrightarrow: nLeftrightarrow$1,
    	nleq: nleq$1,
    	nleqq: nleqq$1,
    	nleqslant: nleqslant$1,
    	nles: nles$1,
    	nless: nless$1,
    	nLl: nLl$1,
    	nlsim: nlsim$1,
    	nLt: nLt$1,
    	nlt: nlt$1,
    	nltri: nltri$1,
    	nltrie: nltrie$1,
    	nLtv: nLtv$1,
    	nmid: nmid$1,
    	NoBreak: NoBreak$1,
    	NonBreakingSpace: NonBreakingSpace$1,
    	nopf: nopf$1,
    	Nopf: Nopf$1,
    	Not: Not$1,
    	not: not$2,
    	NotCongruent: NotCongruent$1,
    	NotCupCap: NotCupCap$1,
    	NotDoubleVerticalBar: NotDoubleVerticalBar$1,
    	NotElement: NotElement$1,
    	NotEqual: NotEqual$1,
    	NotEqualTilde: NotEqualTilde$1,
    	NotExists: NotExists$1,
    	NotGreater: NotGreater$1,
    	NotGreaterEqual: NotGreaterEqual$1,
    	NotGreaterFullEqual: NotGreaterFullEqual$1,
    	NotGreaterGreater: NotGreaterGreater$1,
    	NotGreaterLess: NotGreaterLess$1,
    	NotGreaterSlantEqual: NotGreaterSlantEqual$1,
    	NotGreaterTilde: NotGreaterTilde$1,
    	NotHumpDownHump: NotHumpDownHump$1,
    	NotHumpEqual: NotHumpEqual$1,
    	notin: notin$1,
    	notindot: notindot$1,
    	notinE: notinE$1,
    	notinva: notinva$1,
    	notinvb: notinvb$1,
    	notinvc: notinvc$1,
    	NotLeftTriangleBar: NotLeftTriangleBar$1,
    	NotLeftTriangle: NotLeftTriangle$1,
    	NotLeftTriangleEqual: NotLeftTriangleEqual$1,
    	NotLess: NotLess$1,
    	NotLessEqual: NotLessEqual$1,
    	NotLessGreater: NotLessGreater$1,
    	NotLessLess: NotLessLess$1,
    	NotLessSlantEqual: NotLessSlantEqual$1,
    	NotLessTilde: NotLessTilde$1,
    	NotNestedGreaterGreater: NotNestedGreaterGreater$1,
    	NotNestedLessLess: NotNestedLessLess$1,
    	notni: notni$1,
    	notniva: notniva$1,
    	notnivb: notnivb$1,
    	notnivc: notnivc$1,
    	NotPrecedes: NotPrecedes$1,
    	NotPrecedesEqual: NotPrecedesEqual$1,
    	NotPrecedesSlantEqual: NotPrecedesSlantEqual$1,
    	NotReverseElement: NotReverseElement$1,
    	NotRightTriangleBar: NotRightTriangleBar$1,
    	NotRightTriangle: NotRightTriangle$1,
    	NotRightTriangleEqual: NotRightTriangleEqual$1,
    	NotSquareSubset: NotSquareSubset$1,
    	NotSquareSubsetEqual: NotSquareSubsetEqual$1,
    	NotSquareSuperset: NotSquareSuperset$1,
    	NotSquareSupersetEqual: NotSquareSupersetEqual$1,
    	NotSubset: NotSubset$1,
    	NotSubsetEqual: NotSubsetEqual$1,
    	NotSucceeds: NotSucceeds$1,
    	NotSucceedsEqual: NotSucceedsEqual$1,
    	NotSucceedsSlantEqual: NotSucceedsSlantEqual$1,
    	NotSucceedsTilde: NotSucceedsTilde$1,
    	NotSuperset: NotSuperset$1,
    	NotSupersetEqual: NotSupersetEqual$1,
    	NotTilde: NotTilde$1,
    	NotTildeEqual: NotTildeEqual$1,
    	NotTildeFullEqual: NotTildeFullEqual$1,
    	NotTildeTilde: NotTildeTilde$1,
    	NotVerticalBar: NotVerticalBar$1,
    	nparallel: nparallel$1,
    	npar: npar$1,
    	nparsl: nparsl$1,
    	npart: npart$1,
    	npolint: npolint$1,
    	npr: npr$1,
    	nprcue: nprcue$1,
    	nprec: nprec$1,
    	npreceq: npreceq$1,
    	npre: npre$1,
    	nrarrc: nrarrc$1,
    	nrarr: nrarr$1,
    	nrArr: nrArr$1,
    	nrarrw: nrarrw$1,
    	nrightarrow: nrightarrow$1,
    	nRightarrow: nRightarrow$1,
    	nrtri: nrtri$1,
    	nrtrie: nrtrie$1,
    	nsc: nsc$1,
    	nsccue: nsccue$1,
    	nsce: nsce$1,
    	Nscr: Nscr$1,
    	nscr: nscr$1,
    	nshortmid: nshortmid$1,
    	nshortparallel: nshortparallel$1,
    	nsim: nsim$1,
    	nsime: nsime$1,
    	nsimeq: nsimeq$1,
    	nsmid: nsmid$1,
    	nspar: nspar$1,
    	nsqsube: nsqsube$1,
    	nsqsupe: nsqsupe$1,
    	nsub: nsub$1,
    	nsubE: nsubE$1,
    	nsube: nsube$1,
    	nsubset: nsubset$1,
    	nsubseteq: nsubseteq$1,
    	nsubseteqq: nsubseteqq$1,
    	nsucc: nsucc$1,
    	nsucceq: nsucceq$1,
    	nsup: nsup$1,
    	nsupE: nsupE$1,
    	nsupe: nsupe$1,
    	nsupset: nsupset$1,
    	nsupseteq: nsupseteq$1,
    	nsupseteqq: nsupseteqq$1,
    	ntgl: ntgl$1,
    	Ntilde: Ntilde$2,
    	ntilde: ntilde$2,
    	ntlg: ntlg$1,
    	ntriangleleft: ntriangleleft$1,
    	ntrianglelefteq: ntrianglelefteq$1,
    	ntriangleright: ntriangleright$1,
    	ntrianglerighteq: ntrianglerighteq$1,
    	Nu: Nu$1,
    	nu: nu$1,
    	num: num$1,
    	numero: numero$1,
    	numsp: numsp$1,
    	nvap: nvap$1,
    	nvdash: nvdash$1,
    	nvDash: nvDash$1,
    	nVdash: nVdash$1,
    	nVDash: nVDash$1,
    	nvge: nvge$1,
    	nvgt: nvgt$1,
    	nvHarr: nvHarr$1,
    	nvinfin: nvinfin$1,
    	nvlArr: nvlArr$1,
    	nvle: nvle$1,
    	nvlt: nvlt$1,
    	nvltrie: nvltrie$1,
    	nvrArr: nvrArr$1,
    	nvrtrie: nvrtrie$1,
    	nvsim: nvsim$1,
    	nwarhk: nwarhk$1,
    	nwarr: nwarr$1,
    	nwArr: nwArr$1,
    	nwarrow: nwarrow$1,
    	nwnear: nwnear$1,
    	Oacute: Oacute$2,
    	oacute: oacute$2,
    	oast: oast$1,
    	Ocirc: Ocirc$2,
    	ocirc: ocirc$2,
    	ocir: ocir$1,
    	Ocy: Ocy$1,
    	ocy: ocy$1,
    	odash: odash$1,
    	Odblac: Odblac$1,
    	odblac: odblac$1,
    	odiv: odiv$1,
    	odot: odot$1,
    	odsold: odsold$1,
    	OElig: OElig$1,
    	oelig: oelig$1,
    	ofcir: ofcir$1,
    	Ofr: Ofr$1,
    	ofr: ofr$1,
    	ogon: ogon$1,
    	Ograve: Ograve$2,
    	ograve: ograve$2,
    	ogt: ogt$1,
    	ohbar: ohbar$1,
    	ohm: ohm$1,
    	oint: oint$1,
    	olarr: olarr$1,
    	olcir: olcir$1,
    	olcross: olcross$1,
    	oline: oline$1,
    	olt: olt$1,
    	Omacr: Omacr$1,
    	omacr: omacr$1,
    	Omega: Omega$1,
    	omega: omega$1,
    	Omicron: Omicron$1,
    	omicron: omicron$1,
    	omid: omid$1,
    	ominus: ominus$1,
    	Oopf: Oopf$1,
    	oopf: oopf$1,
    	opar: opar$1,
    	OpenCurlyDoubleQuote: OpenCurlyDoubleQuote$1,
    	OpenCurlyQuote: OpenCurlyQuote$1,
    	operp: operp$1,
    	oplus: oplus$1,
    	orarr: orarr$1,
    	Or: Or$1,
    	or: or$1,
    	ord: ord$1,
    	order: order$1,
    	orderof: orderof$1,
    	ordf: ordf$2,
    	ordm: ordm$2,
    	origof: origof$1,
    	oror: oror$1,
    	orslope: orslope$1,
    	orv: orv$1,
    	oS: oS$1,
    	Oscr: Oscr$1,
    	oscr: oscr$1,
    	Oslash: Oslash$2,
    	oslash: oslash$2,
    	osol: osol$1,
    	Otilde: Otilde$2,
    	otilde: otilde$2,
    	otimesas: otimesas$1,
    	Otimes: Otimes$1,
    	otimes: otimes$1,
    	Ouml: Ouml$2,
    	ouml: ouml$2,
    	ovbar: ovbar$1,
    	OverBar: OverBar$1,
    	OverBrace: OverBrace$1,
    	OverBracket: OverBracket$1,
    	OverParenthesis: OverParenthesis$1,
    	para: para$2,
    	parallel: parallel$1,
    	par: par$1,
    	parsim: parsim$1,
    	parsl: parsl$1,
    	part: part$1,
    	PartialD: PartialD$1,
    	Pcy: Pcy$1,
    	pcy: pcy$1,
    	percnt: percnt$1,
    	period: period$1,
    	permil: permil$1,
    	perp: perp$1,
    	pertenk: pertenk$1,
    	Pfr: Pfr$1,
    	pfr: pfr$1,
    	Phi: Phi$1,
    	phi: phi$1,
    	phiv: phiv$1,
    	phmmat: phmmat$1,
    	phone: phone$2,
    	Pi: Pi$1,
    	pi: pi$1,
    	pitchfork: pitchfork$1,
    	piv: piv$1,
    	planck: planck$1,
    	planckh: planckh$1,
    	plankv: plankv$1,
    	plusacir: plusacir$1,
    	plusb: plusb$1,
    	pluscir: pluscir$1,
    	plus: plus$1,
    	plusdo: plusdo$1,
    	plusdu: plusdu$1,
    	pluse: pluse$1,
    	PlusMinus: PlusMinus$1,
    	plusmn: plusmn$2,
    	plussim: plussim$1,
    	plustwo: plustwo$1,
    	pm: pm$1,
    	Poincareplane: Poincareplane$1,
    	pointint: pointint$1,
    	popf: popf$1,
    	Popf: Popf$1,
    	pound: pound$3,
    	prap: prap$1,
    	Pr: Pr$1,
    	pr: pr$1,
    	prcue: prcue$1,
    	precapprox: precapprox$1,
    	prec: prec$1,
    	preccurlyeq: preccurlyeq$1,
    	Precedes: Precedes$1,
    	PrecedesEqual: PrecedesEqual$1,
    	PrecedesSlantEqual: PrecedesSlantEqual$1,
    	PrecedesTilde: PrecedesTilde$1,
    	preceq: preceq$1,
    	precnapprox: precnapprox$1,
    	precneqq: precneqq$1,
    	precnsim: precnsim$1,
    	pre: pre$1,
    	prE: prE$1,
    	precsim: precsim$1,
    	prime: prime$1,
    	Prime: Prime$1,
    	primes: primes$1,
    	prnap: prnap$1,
    	prnE: prnE$1,
    	prnsim: prnsim$1,
    	prod: prod$1,
    	Product: Product$1,
    	profalar: profalar$1,
    	profline: profline$1,
    	profsurf: profsurf$1,
    	prop: prop$2,
    	Proportional: Proportional$1,
    	Proportion: Proportion$1,
    	propto: propto$1,
    	prsim: prsim$1,
    	prurel: prurel$1,
    	Pscr: Pscr$1,
    	pscr: pscr$1,
    	Psi: Psi$1,
    	psi: psi$1,
    	puncsp: puncsp$1,
    	Qfr: Qfr$1,
    	qfr: qfr$1,
    	qint: qint$1,
    	qopf: qopf$1,
    	Qopf: Qopf$1,
    	qprime: qprime$1,
    	Qscr: Qscr$1,
    	qscr: qscr$1,
    	quaternions: quaternions$1,
    	quatint: quatint$1,
    	quest: quest$1,
    	questeq: questeq$1,
    	quot: quot$3,
    	QUOT: QUOT$2,
    	rAarr: rAarr$1,
    	race: race$1,
    	Racute: Racute$1,
    	racute: racute$1,
    	radic: radic$1,
    	raemptyv: raemptyv$1,
    	rang: rang$1,
    	Rang: Rang$1,
    	rangd: rangd$1,
    	range: range$1,
    	rangle: rangle$1,
    	raquo: raquo$2,
    	rarrap: rarrap$1,
    	rarrb: rarrb$1,
    	rarrbfs: rarrbfs$1,
    	rarrc: rarrc$1,
    	rarr: rarr$1,
    	Rarr: Rarr$1,
    	rArr: rArr$1,
    	rarrfs: rarrfs$1,
    	rarrhk: rarrhk$1,
    	rarrlp: rarrlp$1,
    	rarrpl: rarrpl$1,
    	rarrsim: rarrsim$1,
    	Rarrtl: Rarrtl$1,
    	rarrtl: rarrtl$1,
    	rarrw: rarrw$1,
    	ratail: ratail$1,
    	rAtail: rAtail$1,
    	ratio: ratio$1,
    	rationals: rationals$1,
    	rbarr: rbarr$1,
    	rBarr: rBarr$1,
    	RBarr: RBarr$1,
    	rbbrk: rbbrk$1,
    	rbrace: rbrace$1,
    	rbrack: rbrack$1,
    	rbrke: rbrke$1,
    	rbrksld: rbrksld$1,
    	rbrkslu: rbrkslu$1,
    	Rcaron: Rcaron$1,
    	rcaron: rcaron$1,
    	Rcedil: Rcedil$1,
    	rcedil: rcedil$1,
    	rceil: rceil$1,
    	rcub: rcub$1,
    	Rcy: Rcy$1,
    	rcy: rcy$1,
    	rdca: rdca$1,
    	rdldhar: rdldhar$1,
    	rdquo: rdquo$1,
    	rdquor: rdquor$1,
    	rdsh: rdsh$1,
    	real: real$1,
    	realine: realine$1,
    	realpart: realpart$1,
    	reals: reals$1,
    	Re: Re$1,
    	rect: rect$1,
    	reg: reg$2,
    	REG: REG$2,
    	ReverseElement: ReverseElement$1,
    	ReverseEquilibrium: ReverseEquilibrium$1,
    	ReverseUpEquilibrium: ReverseUpEquilibrium$1,
    	rfisht: rfisht$1,
    	rfloor: rfloor$1,
    	rfr: rfr$1,
    	Rfr: Rfr$1,
    	rHar: rHar$1,
    	rhard: rhard$1,
    	rharu: rharu$1,
    	rharul: rharul$1,
    	Rho: Rho$1,
    	rho: rho$1,
    	rhov: rhov$1,
    	RightAngleBracket: RightAngleBracket$1,
    	RightArrowBar: RightArrowBar$1,
    	rightarrow: rightarrow$1,
    	RightArrow: RightArrow$1,
    	Rightarrow: Rightarrow$1,
    	RightArrowLeftArrow: RightArrowLeftArrow$1,
    	rightarrowtail: rightarrowtail$1,
    	RightCeiling: RightCeiling$1,
    	RightDoubleBracket: RightDoubleBracket$1,
    	RightDownTeeVector: RightDownTeeVector$1,
    	RightDownVectorBar: RightDownVectorBar$1,
    	RightDownVector: RightDownVector$1,
    	RightFloor: RightFloor$1,
    	rightharpoondown: rightharpoondown$1,
    	rightharpoonup: rightharpoonup$1,
    	rightleftarrows: rightleftarrows$1,
    	rightleftharpoons: rightleftharpoons$1,
    	rightrightarrows: rightrightarrows$1,
    	rightsquigarrow: rightsquigarrow$1,
    	RightTeeArrow: RightTeeArrow$1,
    	RightTee: RightTee$1,
    	RightTeeVector: RightTeeVector$1,
    	rightthreetimes: rightthreetimes$1,
    	RightTriangleBar: RightTriangleBar$1,
    	RightTriangle: RightTriangle$1,
    	RightTriangleEqual: RightTriangleEqual$1,
    	RightUpDownVector: RightUpDownVector$1,
    	RightUpTeeVector: RightUpTeeVector$1,
    	RightUpVectorBar: RightUpVectorBar$1,
    	RightUpVector: RightUpVector$1,
    	RightVectorBar: RightVectorBar$1,
    	RightVector: RightVector$1,
    	ring: ring$2,
    	risingdotseq: risingdotseq$1,
    	rlarr: rlarr$1,
    	rlhar: rlhar$1,
    	rlm: rlm$1,
    	rmoustache: rmoustache$1,
    	rmoust: rmoust$1,
    	rnmid: rnmid$1,
    	roang: roang$1,
    	roarr: roarr$1,
    	robrk: robrk$1,
    	ropar: ropar$1,
    	ropf: ropf$1,
    	Ropf: Ropf$1,
    	roplus: roplus$1,
    	rotimes: rotimes$1,
    	RoundImplies: RoundImplies$1,
    	rpar: rpar$1,
    	rpargt: rpargt$1,
    	rppolint: rppolint$1,
    	rrarr: rrarr$1,
    	Rrightarrow: Rrightarrow$1,
    	rsaquo: rsaquo$1,
    	rscr: rscr$1,
    	Rscr: Rscr$1,
    	rsh: rsh$1,
    	Rsh: Rsh$1,
    	rsqb: rsqb$1,
    	rsquo: rsquo$1,
    	rsquor: rsquor$1,
    	rthree: rthree$1,
    	rtimes: rtimes$1,
    	rtri: rtri$1,
    	rtrie: rtrie$1,
    	rtrif: rtrif$1,
    	rtriltri: rtriltri$1,
    	RuleDelayed: RuleDelayed$1,
    	ruluhar: ruluhar$1,
    	rx: rx$1,
    	Sacute: Sacute$1,
    	sacute: sacute$1,
    	sbquo: sbquo$1,
    	scap: scap$1,
    	Scaron: Scaron$1,
    	scaron: scaron$1,
    	Sc: Sc$1,
    	sc: sc$1,
    	sccue: sccue$1,
    	sce: sce$1,
    	scE: scE$1,
    	Scedil: Scedil$1,
    	scedil: scedil$1,
    	Scirc: Scirc$1,
    	scirc: scirc$1,
    	scnap: scnap$1,
    	scnE: scnE$1,
    	scnsim: scnsim$1,
    	scpolint: scpolint$1,
    	scsim: scsim$1,
    	Scy: Scy$1,
    	scy: scy$1,
    	sdotb: sdotb$1,
    	sdot: sdot$1,
    	sdote: sdote$1,
    	searhk: searhk$1,
    	searr: searr$1,
    	seArr: seArr$1,
    	searrow: searrow$1,
    	sect: sect$2,
    	semi: semi$1,
    	seswar: seswar$1,
    	setminus: setminus$1,
    	setmn: setmn$1,
    	sext: sext$1,
    	Sfr: Sfr$1,
    	sfr: sfr$1,
    	sfrown: sfrown$1,
    	sharp: sharp$1,
    	SHCHcy: SHCHcy$1,
    	shchcy: shchcy$1,
    	SHcy: SHcy$1,
    	shcy: shcy$1,
    	ShortDownArrow: ShortDownArrow$1,
    	ShortLeftArrow: ShortLeftArrow$1,
    	shortmid: shortmid$1,
    	shortparallel: shortparallel$1,
    	ShortRightArrow: ShortRightArrow$1,
    	ShortUpArrow: ShortUpArrow$1,
    	shy: shy$2,
    	Sigma: Sigma$1,
    	sigma: sigma$1,
    	sigmaf: sigmaf$1,
    	sigmav: sigmav$1,
    	sim: sim$1,
    	simdot: simdot$1,
    	sime: sime$1,
    	simeq: simeq$1,
    	simg: simg$1,
    	simgE: simgE$1,
    	siml: siml$1,
    	simlE: simlE$1,
    	simne: simne$1,
    	simplus: simplus$1,
    	simrarr: simrarr$1,
    	slarr: slarr$1,
    	SmallCircle: SmallCircle$1,
    	smallsetminus: smallsetminus$1,
    	smashp: smashp$1,
    	smeparsl: smeparsl$1,
    	smid: smid$1,
    	smile: smile$2,
    	smt: smt$1,
    	smte: smte$1,
    	smtes: smtes$1,
    	SOFTcy: SOFTcy$1,
    	softcy: softcy$1,
    	solbar: solbar$1,
    	solb: solb$1,
    	sol: sol$1,
    	Sopf: Sopf$1,
    	sopf: sopf$1,
    	spades: spades$2,
    	spadesuit: spadesuit$1,
    	spar: spar$1,
    	sqcap: sqcap$1,
    	sqcaps: sqcaps$1,
    	sqcup: sqcup$1,
    	sqcups: sqcups$1,
    	Sqrt: Sqrt$1,
    	sqsub: sqsub$1,
    	sqsube: sqsube$1,
    	sqsubset: sqsubset$1,
    	sqsubseteq: sqsubseteq$1,
    	sqsup: sqsup$1,
    	sqsupe: sqsupe$1,
    	sqsupset: sqsupset$1,
    	sqsupseteq: sqsupseteq$1,
    	square: square$1,
    	Square: Square$1,
    	SquareIntersection: SquareIntersection$1,
    	SquareSubset: SquareSubset$1,
    	SquareSubsetEqual: SquareSubsetEqual$1,
    	SquareSuperset: SquareSuperset$1,
    	SquareSupersetEqual: SquareSupersetEqual$1,
    	SquareUnion: SquareUnion$1,
    	squarf: squarf$1,
    	squ: squ$1,
    	squf: squf$1,
    	srarr: srarr$1,
    	Sscr: Sscr$1,
    	sscr: sscr$1,
    	ssetmn: ssetmn$1,
    	ssmile: ssmile$1,
    	sstarf: sstarf$1,
    	Star: Star$1,
    	star: star$2,
    	starf: starf$1,
    	straightepsilon: straightepsilon$1,
    	straightphi: straightphi$1,
    	strns: strns$1,
    	sub: sub$1,
    	Sub: Sub$1,
    	subdot: subdot$1,
    	subE: subE$1,
    	sube: sube$1,
    	subedot: subedot$1,
    	submult: submult$1,
    	subnE: subnE$1,
    	subne: subne$1,
    	subplus: subplus$1,
    	subrarr: subrarr$1,
    	subset: subset$1,
    	Subset: Subset$1,
    	subseteq: subseteq$1,
    	subseteqq: subseteqq$1,
    	SubsetEqual: SubsetEqual$1,
    	subsetneq: subsetneq$1,
    	subsetneqq: subsetneqq$1,
    	subsim: subsim$1,
    	subsub: subsub$1,
    	subsup: subsup$1,
    	succapprox: succapprox$1,
    	succ: succ$1,
    	succcurlyeq: succcurlyeq$1,
    	Succeeds: Succeeds$1,
    	SucceedsEqual: SucceedsEqual$1,
    	SucceedsSlantEqual: SucceedsSlantEqual$1,
    	SucceedsTilde: SucceedsTilde$1,
    	succeq: succeq$1,
    	succnapprox: succnapprox$1,
    	succneqq: succneqq$1,
    	succnsim: succnsim$1,
    	succsim: succsim$1,
    	SuchThat: SuchThat$1,
    	sum: sum$1,
    	Sum: Sum$1,
    	sung: sung$1,
    	sup1: sup1$2,
    	sup2: sup2$2,
    	sup3: sup3$2,
    	sup: sup$1,
    	Sup: Sup$1,
    	supdot: supdot$1,
    	supdsub: supdsub$1,
    	supE: supE$1,
    	supe: supe$1,
    	supedot: supedot$1,
    	Superset: Superset$1,
    	SupersetEqual: SupersetEqual$1,
    	suphsol: suphsol$1,
    	suphsub: suphsub$1,
    	suplarr: suplarr$1,
    	supmult: supmult$1,
    	supnE: supnE$1,
    	supne: supne$1,
    	supplus: supplus$1,
    	supset: supset$1,
    	Supset: Supset$1,
    	supseteq: supseteq$1,
    	supseteqq: supseteqq$1,
    	supsetneq: supsetneq$1,
    	supsetneqq: supsetneqq$1,
    	supsim: supsim$1,
    	supsub: supsub$1,
    	supsup: supsup$1,
    	swarhk: swarhk$1,
    	swarr: swarr$1,
    	swArr: swArr$1,
    	swarrow: swarrow$1,
    	swnwar: swnwar$1,
    	szlig: szlig$2,
    	Tab: Tab$1,
    	target: target$1,
    	Tau: Tau$1,
    	tau: tau$1,
    	tbrk: tbrk$1,
    	Tcaron: Tcaron$1,
    	tcaron: tcaron$1,
    	Tcedil: Tcedil$1,
    	tcedil: tcedil$1,
    	Tcy: Tcy$1,
    	tcy: tcy$1,
    	tdot: tdot$1,
    	telrec: telrec$1,
    	Tfr: Tfr$1,
    	tfr: tfr$1,
    	there4: there4$1,
    	therefore: therefore$1,
    	Therefore: Therefore$1,
    	Theta: Theta$1,
    	theta: theta$1,
    	thetasym: thetasym$1,
    	thetav: thetav$1,
    	thickapprox: thickapprox$1,
    	thicksim: thicksim$1,
    	ThickSpace: ThickSpace$1,
    	ThinSpace: ThinSpace$1,
    	thinsp: thinsp$1,
    	thkap: thkap$1,
    	thksim: thksim$1,
    	THORN: THORN$2,
    	thorn: thorn$2,
    	tilde: tilde$1,
    	Tilde: Tilde$1,
    	TildeEqual: TildeEqual$1,
    	TildeFullEqual: TildeFullEqual$1,
    	TildeTilde: TildeTilde$1,
    	timesbar: timesbar$1,
    	timesb: timesb$1,
    	times: times$2,
    	timesd: timesd$1,
    	tint: tint$1,
    	toea: toea$1,
    	topbot: topbot$1,
    	topcir: topcir$1,
    	top: top$2,
    	Topf: Topf$1,
    	topf: topf$1,
    	topfork: topfork$1,
    	tosa: tosa$1,
    	tprime: tprime$1,
    	trade: trade$1,
    	TRADE: TRADE$1,
    	triangle: triangle$1,
    	triangledown: triangledown$1,
    	triangleleft: triangleleft$1,
    	trianglelefteq: trianglelefteq$1,
    	triangleq: triangleq$1,
    	triangleright: triangleright$1,
    	trianglerighteq: trianglerighteq$1,
    	tridot: tridot$1,
    	trie: trie$1,
    	triminus: triminus$1,
    	TripleDot: TripleDot$1,
    	triplus: triplus$1,
    	trisb: trisb$1,
    	tritime: tritime$1,
    	trpezium: trpezium$1,
    	Tscr: Tscr$1,
    	tscr: tscr$1,
    	TScy: TScy$1,
    	tscy: tscy$1,
    	TSHcy: TSHcy$1,
    	tshcy: tshcy$1,
    	Tstrok: Tstrok$1,
    	tstrok: tstrok$1,
    	twixt: twixt$1,
    	twoheadleftarrow: twoheadleftarrow$1,
    	twoheadrightarrow: twoheadrightarrow$1,
    	Uacute: Uacute$2,
    	uacute: uacute$2,
    	uarr: uarr$1,
    	Uarr: Uarr$1,
    	uArr: uArr$1,
    	Uarrocir: Uarrocir$1,
    	Ubrcy: Ubrcy$1,
    	ubrcy: ubrcy$1,
    	Ubreve: Ubreve$1,
    	ubreve: ubreve$1,
    	Ucirc: Ucirc$2,
    	ucirc: ucirc$2,
    	Ucy: Ucy$1,
    	ucy: ucy$1,
    	udarr: udarr$1,
    	Udblac: Udblac$1,
    	udblac: udblac$1,
    	udhar: udhar$1,
    	ufisht: ufisht$1,
    	Ufr: Ufr$1,
    	ufr: ufr$1,
    	Ugrave: Ugrave$2,
    	ugrave: ugrave$2,
    	uHar: uHar$1,
    	uharl: uharl$1,
    	uharr: uharr$1,
    	uhblk: uhblk$1,
    	ulcorn: ulcorn$1,
    	ulcorner: ulcorner$1,
    	ulcrop: ulcrop$1,
    	ultri: ultri$1,
    	Umacr: Umacr$1,
    	umacr: umacr$1,
    	uml: uml$2,
    	UnderBar: UnderBar$1,
    	UnderBrace: UnderBrace$1,
    	UnderBracket: UnderBracket$1,
    	UnderParenthesis: UnderParenthesis$1,
    	Union: Union$1,
    	UnionPlus: UnionPlus$1,
    	Uogon: Uogon$1,
    	uogon: uogon$1,
    	Uopf: Uopf$1,
    	uopf: uopf$1,
    	UpArrowBar: UpArrowBar$1,
    	uparrow: uparrow$1,
    	UpArrow: UpArrow$1,
    	Uparrow: Uparrow$1,
    	UpArrowDownArrow: UpArrowDownArrow$1,
    	updownarrow: updownarrow$1,
    	UpDownArrow: UpDownArrow$1,
    	Updownarrow: Updownarrow$1,
    	UpEquilibrium: UpEquilibrium$1,
    	upharpoonleft: upharpoonleft$1,
    	upharpoonright: upharpoonright$1,
    	uplus: uplus$1,
    	UpperLeftArrow: UpperLeftArrow$1,
    	UpperRightArrow: UpperRightArrow$1,
    	upsi: upsi$1,
    	Upsi: Upsi$1,
    	upsih: upsih$1,
    	Upsilon: Upsilon$1,
    	upsilon: upsilon$1,
    	UpTeeArrow: UpTeeArrow$1,
    	UpTee: UpTee$1,
    	upuparrows: upuparrows$1,
    	urcorn: urcorn$1,
    	urcorner: urcorner$1,
    	urcrop: urcrop$1,
    	Uring: Uring$1,
    	uring: uring$1,
    	urtri: urtri$1,
    	Uscr: Uscr$1,
    	uscr: uscr$1,
    	utdot: utdot$1,
    	Utilde: Utilde$1,
    	utilde: utilde$1,
    	utri: utri$1,
    	utrif: utrif$1,
    	uuarr: uuarr$1,
    	Uuml: Uuml$2,
    	uuml: uuml$2,
    	uwangle: uwangle$1,
    	vangrt: vangrt$1,
    	varepsilon: varepsilon$1,
    	varkappa: varkappa$1,
    	varnothing: varnothing$1,
    	varphi: varphi$1,
    	varpi: varpi$1,
    	varpropto: varpropto$1,
    	varr: varr$1,
    	vArr: vArr$1,
    	varrho: varrho$1,
    	varsigma: varsigma$1,
    	varsubsetneq: varsubsetneq$1,
    	varsubsetneqq: varsubsetneqq$1,
    	varsupsetneq: varsupsetneq$1,
    	varsupsetneqq: varsupsetneqq$1,
    	vartheta: vartheta$1,
    	vartriangleleft: vartriangleleft$1,
    	vartriangleright: vartriangleright$1,
    	vBar: vBar$1,
    	Vbar: Vbar$1,
    	vBarv: vBarv$1,
    	Vcy: Vcy$1,
    	vcy: vcy$1,
    	vdash: vdash$1,
    	vDash: vDash$1,
    	Vdash: Vdash$1,
    	VDash: VDash$1,
    	Vdashl: Vdashl$1,
    	veebar: veebar$1,
    	vee: vee$1,
    	Vee: Vee$1,
    	veeeq: veeeq$1,
    	vellip: vellip$1,
    	verbar: verbar$1,
    	Verbar: Verbar$1,
    	vert: vert$1,
    	Vert: Vert$1,
    	VerticalBar: VerticalBar$1,
    	VerticalLine: VerticalLine$1,
    	VerticalSeparator: VerticalSeparator$1,
    	VerticalTilde: VerticalTilde$1,
    	VeryThinSpace: VeryThinSpace$1,
    	Vfr: Vfr$1,
    	vfr: vfr$1,
    	vltri: vltri$1,
    	vnsub: vnsub$1,
    	vnsup: vnsup$1,
    	Vopf: Vopf$1,
    	vopf: vopf$1,
    	vprop: vprop$1,
    	vrtri: vrtri$1,
    	Vscr: Vscr$1,
    	vscr: vscr$1,
    	vsubnE: vsubnE$1,
    	vsubne: vsubne$1,
    	vsupnE: vsupnE$1,
    	vsupne: vsupne$1,
    	Vvdash: Vvdash$1,
    	vzigzag: vzigzag$1,
    	Wcirc: Wcirc$1,
    	wcirc: wcirc$1,
    	wedbar: wedbar$1,
    	wedge: wedge$1,
    	Wedge: Wedge$1,
    	wedgeq: wedgeq$1,
    	weierp: weierp$1,
    	Wfr: Wfr$1,
    	wfr: wfr$1,
    	Wopf: Wopf$1,
    	wopf: wopf$1,
    	wp: wp$1,
    	wr: wr$1,
    	wreath: wreath$1,
    	Wscr: Wscr$1,
    	wscr: wscr$1,
    	xcap: xcap$1,
    	xcirc: xcirc$1,
    	xcup: xcup$1,
    	xdtri: xdtri$1,
    	Xfr: Xfr$1,
    	xfr: xfr$1,
    	xharr: xharr$1,
    	xhArr: xhArr$1,
    	Xi: Xi$1,
    	xi: xi$1,
    	xlarr: xlarr$1,
    	xlArr: xlArr$1,
    	xmap: xmap$1,
    	xnis: xnis$1,
    	xodot: xodot$1,
    	Xopf: Xopf$1,
    	xopf: xopf$1,
    	xoplus: xoplus$1,
    	xotime: xotime$1,
    	xrarr: xrarr$1,
    	xrArr: xrArr$1,
    	Xscr: Xscr$1,
    	xscr: xscr$1,
    	xsqcup: xsqcup$1,
    	xuplus: xuplus$1,
    	xutri: xutri$1,
    	xvee: xvee$1,
    	xwedge: xwedge$1,
    	Yacute: Yacute$2,
    	yacute: yacute$2,
    	YAcy: YAcy$1,
    	yacy: yacy$1,
    	Ycirc: Ycirc$1,
    	ycirc: ycirc$1,
    	Ycy: Ycy$1,
    	ycy: ycy$1,
    	yen: yen$3,
    	Yfr: Yfr$1,
    	yfr: yfr$1,
    	YIcy: YIcy$1,
    	yicy: yicy$1,
    	Yopf: Yopf$1,
    	yopf: yopf$1,
    	Yscr: Yscr$1,
    	yscr: yscr$1,
    	YUcy: YUcy$1,
    	yucy: yucy$1,
    	yuml: yuml$2,
    	Yuml: Yuml$1,
    	Zacute: Zacute$1,
    	zacute: zacute$1,
    	Zcaron: Zcaron$1,
    	zcaron: zcaron$1,
    	Zcy: Zcy$1,
    	zcy: zcy$1,
    	Zdot: Zdot$1,
    	zdot: zdot$1,
    	zeetrf: zeetrf$1,
    	ZeroWidthSpace: ZeroWidthSpace$1,
    	Zeta: Zeta$1,
    	zeta: zeta$1,
    	zfr: zfr$1,
    	Zfr: Zfr$1,
    	ZHcy: ZHcy$1,
    	zhcy: zhcy$1,
    	zigrarr: zigrarr$1,
    	zopf: zopf$1,
    	Zopf: Zopf$1,
    	Zscr: Zscr$1,
    	zscr: zscr$1,
    	zwj: zwj$1,
    	zwnj: zwnj$1
    };

    /*eslint quotes:0*/
    var entities = require$$0$2;

    var regex$4=/[!-#%-\*,-\/:;\?@\[-\]_\{\}\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166D\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4E\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]|\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD803[\uDF55-\uDF59]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDF3C-\uDF3E]|\uD806[\uDC3B\uDE3F-\uDE46\uDE9A-\uDE9C\uDE9E-\uDEA2]|\uD807[\uDC41-\uDC45\uDC70\uDC71\uDEF7\uDEF8]|\uD809[\uDC70-\uDC74]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD81B[\uDE97-\uDE9A]|\uD82F\uDC9F|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]/;

    var encodeCache$1 = {};


    // Create a lookup array where anything but characters in `chars` string
    // and alphanumeric chars is percent-encoded.
    //
    function getEncodeCache$1(exclude) {
      var i, ch, cache = encodeCache$1[exclude];
      if (cache) { return cache; }

      cache = encodeCache$1[exclude] = [];

      for (i = 0; i < 128; i++) {
        ch = String.fromCharCode(i);

        if (/^[0-9a-z]$/i.test(ch)) {
          // always allow unencoded alphanumeric characters
          cache.push(ch);
        } else {
          cache.push('%' + ('0' + i.toString(16).toUpperCase()).slice(-2));
        }
      }

      for (i = 0; i < exclude.length; i++) {
        cache[exclude.charCodeAt(i)] = exclude[i];
      }

      return cache;
    }


    // Encode unsafe characters with percent-encoding, skipping already
    // encoded sequences.
    //
    //  - string       - string to encode
    //  - exclude      - list of characters to ignore (in addition to a-zA-Z0-9)
    //  - keepEscaped  - don't encode '%' in a correct escape sequence (default: true)
    //
    function encode$4(string, exclude, keepEscaped) {
      var i, l, code, nextCode, cache,
          result = '';

      if (typeof exclude !== 'string') {
        // encode(string, keepEscaped)
        keepEscaped  = exclude;
        exclude = encode$4.defaultChars;
      }

      if (typeof keepEscaped === 'undefined') {
        keepEscaped = true;
      }

      cache = getEncodeCache$1(exclude);

      for (i = 0, l = string.length; i < l; i++) {
        code = string.charCodeAt(i);

        if (keepEscaped && code === 0x25 /* % */ && i + 2 < l) {
          if (/^[0-9a-f]{2}$/i.test(string.slice(i + 1, i + 3))) {
            result += string.slice(i, i + 3);
            i += 2;
            continue;
          }
        }

        if (code < 128) {
          result += cache[code];
          continue;
        }

        if (code >= 0xD800 && code <= 0xDFFF) {
          if (code >= 0xD800 && code <= 0xDBFF && i + 1 < l) {
            nextCode = string.charCodeAt(i + 1);
            if (nextCode >= 0xDC00 && nextCode <= 0xDFFF) {
              result += encodeURIComponent(string[i] + string[i + 1]);
              i++;
              continue;
            }
          }
          result += '%EF%BF%BD';
          continue;
        }

        result += encodeURIComponent(string[i]);
      }

      return result;
    }

    encode$4.defaultChars   = ";/?:@&=+$,-_.!~*'()#";
    encode$4.componentChars = "-_.!~*'()";


    var encode_1$1 = encode$4;

    /* eslint-disable no-bitwise */

    var decodeCache = {};

    function getDecodeCache(exclude) {
      var i, ch, cache = decodeCache[exclude];
      if (cache) { return cache; }

      cache = decodeCache[exclude] = [];

      for (i = 0; i < 128; i++) {
        ch = String.fromCharCode(i);
        cache.push(ch);
      }

      for (i = 0; i < exclude.length; i++) {
        ch = exclude.charCodeAt(i);
        cache[ch] = '%' + ('0' + ch.toString(16).toUpperCase()).slice(-2);
      }

      return cache;
    }


    // Decode percent-encoded string.
    //
    function decode$3(string, exclude) {
      var cache;

      if (typeof exclude !== 'string') {
        exclude = decode$3.defaultChars;
      }

      cache = getDecodeCache(exclude);

      return string.replace(/(%[a-f0-9]{2})+/gi, function(seq) {
        var i, l, b1, b2, b3, b4, chr,
            result = '';

        for (i = 0, l = seq.length; i < l; i += 3) {
          b1 = parseInt(seq.slice(i + 1, i + 3), 16);

          if (b1 < 0x80) {
            result += cache[b1];
            continue;
          }

          if ((b1 & 0xE0) === 0xC0 && (i + 3 < l)) {
            // 110xxxxx 10xxxxxx
            b2 = parseInt(seq.slice(i + 4, i + 6), 16);

            if ((b2 & 0xC0) === 0x80) {
              chr = ((b1 << 6) & 0x7C0) | (b2 & 0x3F);

              if (chr < 0x80) {
                result += '\ufffd\ufffd';
              } else {
                result += String.fromCharCode(chr);
              }

              i += 3;
              continue;
            }
          }

          if ((b1 & 0xF0) === 0xE0 && (i + 6 < l)) {
            // 1110xxxx 10xxxxxx 10xxxxxx
            b2 = parseInt(seq.slice(i + 4, i + 6), 16);
            b3 = parseInt(seq.slice(i + 7, i + 9), 16);

            if ((b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80) {
              chr = ((b1 << 12) & 0xF000) | ((b2 << 6) & 0xFC0) | (b3 & 0x3F);

              if (chr < 0x800 || (chr >= 0xD800 && chr <= 0xDFFF)) {
                result += '\ufffd\ufffd\ufffd';
              } else {
                result += String.fromCharCode(chr);
              }

              i += 6;
              continue;
            }
          }

          if ((b1 & 0xF8) === 0xF0 && (i + 9 < l)) {
            // 111110xx 10xxxxxx 10xxxxxx 10xxxxxx
            b2 = parseInt(seq.slice(i + 4, i + 6), 16);
            b3 = parseInt(seq.slice(i + 7, i + 9), 16);
            b4 = parseInt(seq.slice(i + 10, i + 12), 16);

            if ((b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80 && (b4 & 0xC0) === 0x80) {
              chr = ((b1 << 18) & 0x1C0000) | ((b2 << 12) & 0x3F000) | ((b3 << 6) & 0xFC0) | (b4 & 0x3F);

              if (chr < 0x10000 || chr > 0x10FFFF) {
                result += '\ufffd\ufffd\ufffd\ufffd';
              } else {
                chr -= 0x10000;
                result += String.fromCharCode(0xD800 + (chr >> 10), 0xDC00 + (chr & 0x3FF));
              }

              i += 9;
              continue;
            }
          }

          result += '\ufffd';
        }

        return result;
      });
    }


    decode$3.defaultChars   = ';/?:@&=+$,#';
    decode$3.componentChars = '';


    var decode_1 = decode$3;

    var format$1 = function format(url) {
      var result = '';

      result += url.protocol || '';
      result += url.slashes ? '//' : '';
      result += url.auth ? url.auth + '@' : '';

      if (url.hostname && url.hostname.indexOf(':') !== -1) {
        // ipv6 address
        result += '[' + url.hostname + ']';
      } else {
        result += url.hostname || '';
      }

      result += url.port ? ':' + url.port : '';
      result += url.pathname || '';
      result += url.search || '';
      result += url.hash || '';

      return result;
    };

    // Copyright Joyent, Inc. and other Node contributors.

    //
    // Changes from joyent/node:
    //
    // 1. No leading slash in paths,
    //    e.g. in `url.parse('http://foo?bar')` pathname is ``, not `/`
    //
    // 2. Backslashes are not replaced with slashes,
    //    so `http:\\example.org\` is treated like a relative path
    //
    // 3. Trailing colon is treated like a part of the path,
    //    i.e. in `http://example.org:foo` pathname is `:foo`
    //
    // 4. Nothing is URL-encoded in the resulting object,
    //    (in joyent/node some chars in auth and paths are encoded)
    //
    // 5. `url.parse()` does not have `parseQueryString` argument
    //
    // 6. Removed extraneous result properties: `host`, `path`, `query`, etc.,
    //    which can be constructed using other parts of the url.
    //


    function Url() {
      this.protocol = null;
      this.slashes = null;
      this.auth = null;
      this.port = null;
      this.hostname = null;
      this.hash = null;
      this.search = null;
      this.pathname = null;
    }

    // Reference: RFC 3986, RFC 1808, RFC 2396

    // define these here so at least they only have to be
    // compiled once on the first module load.
    var protocolPattern = /^([a-z0-9.+-]+:)/i,
        portPattern = /:[0-9]*$/,

        // Special case for a simple path URL
        simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

        // RFC 2396: characters reserved for delimiting URLs.
        // We actually just auto-escape these.
        delims = [ '<', '>', '"', '`', ' ', '\r', '\n', '\t' ],

        // RFC 2396: characters not allowed for various reasons.
        unwise = [ '{', '}', '|', '\\', '^', '`' ].concat(delims),

        // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
        autoEscape = [ '\'' ].concat(unwise),
        // Characters that are never ever allowed in a hostname.
        // Note that any invalid chars are also handled, but these
        // are the ones that are *expected* to be seen, so we fast-path
        // them.
        nonHostChars = [ '%', '/', '?', ';', '#' ].concat(autoEscape),
        hostEndingChars = [ '/', '?', '#' ],
        hostnameMaxLen = 255,
        hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
        hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
        // protocols that can allow "unsafe" and "unwise" chars.
        /* eslint-disable no-script-url */
        // protocols that never have a hostname.
        hostlessProtocol = {
          'javascript': true,
          'javascript:': true
        },
        // protocols that always contain a // bit.
        slashedProtocol = {
          'http': true,
          'https': true,
          'ftp': true,
          'gopher': true,
          'file': true,
          'http:': true,
          'https:': true,
          'ftp:': true,
          'gopher:': true,
          'file:': true
        };
        /* eslint-enable no-script-url */

    function urlParse(url, slashesDenoteHost) {
      if (url && url instanceof Url) { return url; }

      var u = new Url();
      u.parse(url, slashesDenoteHost);
      return u;
    }

    Url.prototype.parse = function(url, slashesDenoteHost) {
      var i, l, lowerProto, hec, slashes,
          rest = url;

      // trim before proceeding.
      // This is to support parse stuff like "  http://foo.com  \n"
      rest = rest.trim();

      if (!slashesDenoteHost && url.split('#').length === 1) {
        // Try fast path regexp
        var simplePath = simplePathPattern.exec(rest);
        if (simplePath) {
          this.pathname = simplePath[1];
          if (simplePath[2]) {
            this.search = simplePath[2];
          }
          return this;
        }
      }

      var proto = protocolPattern.exec(rest);
      if (proto) {
        proto = proto[0];
        lowerProto = proto.toLowerCase();
        this.protocol = proto;
        rest = rest.substr(proto.length);
      }

      // figure out if it's got a host
      // user@server is *always* interpreted as a hostname, and url
      // resolution will treat //foo/bar as host=foo,path=bar because that's
      // how the browser resolves relative URLs.
      if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
        slashes = rest.substr(0, 2) === '//';
        if (slashes && !(proto && hostlessProtocol[proto])) {
          rest = rest.substr(2);
          this.slashes = true;
        }
      }

      if (!hostlessProtocol[proto] &&
          (slashes || (proto && !slashedProtocol[proto]))) {

        // there's a hostname.
        // the first instance of /, ?, ;, or # ends the host.
        //
        // If there is an @ in the hostname, then non-host chars *are* allowed
        // to the left of the last @ sign, unless some host-ending character
        // comes *before* the @-sign.
        // URLs are obnoxious.
        //
        // ex:
        // http://a@b@c/ => user:a@b host:c
        // http://a@b?@c => user:a host:c path:/?@c

        // v0.12 TODO(isaacs): This is not quite how Chrome does things.
        // Review our test case against browsers more comprehensively.

        // find the first instance of any hostEndingChars
        var hostEnd = -1;
        for (i = 0; i < hostEndingChars.length; i++) {
          hec = rest.indexOf(hostEndingChars[i]);
          if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {
            hostEnd = hec;
          }
        }

        // at this point, either we have an explicit point where the
        // auth portion cannot go past, or the last @ char is the decider.
        var auth, atSign;
        if (hostEnd === -1) {
          // atSign can be anywhere.
          atSign = rest.lastIndexOf('@');
        } else {
          // atSign must be in auth portion.
          // http://a@b/c@d => host:b auth:a path:/c@d
          atSign = rest.lastIndexOf('@', hostEnd);
        }

        // Now we have a portion which is definitely the auth.
        // Pull that off.
        if (atSign !== -1) {
          auth = rest.slice(0, atSign);
          rest = rest.slice(atSign + 1);
          this.auth = auth;
        }

        // the host is the remaining to the left of the first non-host char
        hostEnd = -1;
        for (i = 0; i < nonHostChars.length; i++) {
          hec = rest.indexOf(nonHostChars[i]);
          if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {
            hostEnd = hec;
          }
        }
        // if we still have not hit it, then the entire thing is a host.
        if (hostEnd === -1) {
          hostEnd = rest.length;
        }

        if (rest[hostEnd - 1] === ':') { hostEnd--; }
        var host = rest.slice(0, hostEnd);
        rest = rest.slice(hostEnd);

        // pull out port.
        this.parseHost(host);

        // we've indicated that there is a hostname,
        // so even if it's empty, it has to be present.
        this.hostname = this.hostname || '';

        // if hostname begins with [ and ends with ]
        // assume that it's an IPv6 address.
        var ipv6Hostname = this.hostname[0] === '[' &&
            this.hostname[this.hostname.length - 1] === ']';

        // validate a little.
        if (!ipv6Hostname) {
          var hostparts = this.hostname.split(/\./);
          for (i = 0, l = hostparts.length; i < l; i++) {
            var part = hostparts[i];
            if (!part) { continue; }
            if (!part.match(hostnamePartPattern)) {
              var newpart = '';
              for (var j = 0, k = part.length; j < k; j++) {
                if (part.charCodeAt(j) > 127) {
                  // we replace non-ASCII char with a temporary placeholder
                  // we need this to make sure size of hostname is not
                  // broken by replacing non-ASCII by nothing
                  newpart += 'x';
                } else {
                  newpart += part[j];
                }
              }
              // we test again with ASCII char only
              if (!newpart.match(hostnamePartPattern)) {
                var validParts = hostparts.slice(0, i);
                var notHost = hostparts.slice(i + 1);
                var bit = part.match(hostnamePartStart);
                if (bit) {
                  validParts.push(bit[1]);
                  notHost.unshift(bit[2]);
                }
                if (notHost.length) {
                  rest = notHost.join('.') + rest;
                }
                this.hostname = validParts.join('.');
                break;
              }
            }
          }
        }

        if (this.hostname.length > hostnameMaxLen) {
          this.hostname = '';
        }

        // strip [ and ] from the hostname
        // the host field still retains them, though
        if (ipv6Hostname) {
          this.hostname = this.hostname.substr(1, this.hostname.length - 2);
        }
      }

      // chop off from the tail first.
      var hash = rest.indexOf('#');
      if (hash !== -1) {
        // got a fragment string.
        this.hash = rest.substr(hash);
        rest = rest.slice(0, hash);
      }
      var qm = rest.indexOf('?');
      if (qm !== -1) {
        this.search = rest.substr(qm);
        rest = rest.slice(0, qm);
      }
      if (rest) { this.pathname = rest; }
      if (slashedProtocol[lowerProto] &&
          this.hostname && !this.pathname) {
        this.pathname = '';
      }

      return this;
    };

    Url.prototype.parseHost = function(host) {
      var port = portPattern.exec(host);
      if (port) {
        port = port[0];
        if (port !== ':') {
          this.port = port.substr(1);
        }
        host = host.substr(0, host.length - port.length);
      }
      if (host) { this.hostname = host; }
    };

    var parse$1 = urlParse;

    var encode$3 = encode_1$1;
    var decode$2 = decode_1;
    var format = format$1;
    var parse  = parse$1;

    var mdurl = {
    	encode: encode$3,
    	decode: decode$2,
    	format: format,
    	parse: parse
    };

    var regex$3=/[\0-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;

    var regex$2=/[\0-\x1F\x7F-\x9F]/;

    var regex$1=/[\xAD\u0600-\u0605\u061C\u06DD\u070F\u08E2\u180E\u200B-\u200F\u202A-\u202E\u2060-\u2064\u2066-\u206F\uFEFF\uFFF9-\uFFFB]|\uD804[\uDCBD\uDCCD]|\uD82F[\uDCA0-\uDCA3]|\uD834[\uDD73-\uDD7A]|\uDB40[\uDC01\uDC20-\uDC7F]/;

    var regex=/[ \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000]/;

    var Any = regex$3;
    var Cc  = regex$2;
    var Cf  = regex$1;
    var P   = regex$4;
    var Z   = regex;

    var uc_micro = {
    	Any: Any,
    	Cc: Cc,
    	Cf: Cf,
    	P: P,
    	Z: Z
    };

    var utils = createCommonjsModule(function (module, exports) {


    function _class(obj) { return Object.prototype.toString.call(obj); }

    function isString(obj) { return _class(obj) === '[object String]'; }

    var _hasOwnProperty = Object.prototype.hasOwnProperty;

    function has(object, key) {
      return _hasOwnProperty.call(object, key);
    }

    // Merge objects
    //
    function assign(obj /*from1, from2, from3, ...*/) {
      var sources = Array.prototype.slice.call(arguments, 1);

      sources.forEach(function (source) {
        if (!source) { return; }

        if (typeof source !== 'object') {
          throw new TypeError(source + 'must be object');
        }

        Object.keys(source).forEach(function (key) {
          obj[key] = source[key];
        });
      });

      return obj;
    }

    // Remove element from array and put another array at those position.
    // Useful for some operations with tokens
    function arrayReplaceAt(src, pos, newElements) {
      return [].concat(src.slice(0, pos), newElements, src.slice(pos + 1));
    }

    ////////////////////////////////////////////////////////////////////////////////

    function isValidEntityCode(c) {
      /*eslint no-bitwise:0*/
      // broken sequence
      if (c >= 0xD800 && c <= 0xDFFF) { return false; }
      // never used
      if (c >= 0xFDD0 && c <= 0xFDEF) { return false; }
      if ((c & 0xFFFF) === 0xFFFF || (c & 0xFFFF) === 0xFFFE) { return false; }
      // control codes
      if (c >= 0x00 && c <= 0x08) { return false; }
      if (c === 0x0B) { return false; }
      if (c >= 0x0E && c <= 0x1F) { return false; }
      if (c >= 0x7F && c <= 0x9F) { return false; }
      // out of range
      if (c > 0x10FFFF) { return false; }
      return true;
    }

    function fromCodePoint(c) {
      /*eslint no-bitwise:0*/
      if (c > 0xffff) {
        c -= 0x10000;
        var surrogate1 = 0xd800 + (c >> 10),
            surrogate2 = 0xdc00 + (c & 0x3ff);

        return String.fromCharCode(surrogate1, surrogate2);
      }
      return String.fromCharCode(c);
    }


    var UNESCAPE_MD_RE  = /\\([!"#$%&'()*+,\-.\/:;<=>?@[\\\]^_`{|}~])/g;
    var ENTITY_RE       = /&([a-z#][a-z0-9]{1,31});/gi;
    var UNESCAPE_ALL_RE = new RegExp(UNESCAPE_MD_RE.source + '|' + ENTITY_RE.source, 'gi');

    var DIGITAL_ENTITY_TEST_RE = /^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))/i;



    function replaceEntityPattern(match, name) {
      var code = 0;

      if (has(entities, name)) {
        return entities[name];
      }

      if (name.charCodeAt(0) === 0x23/* # */ && DIGITAL_ENTITY_TEST_RE.test(name)) {
        code = name[1].toLowerCase() === 'x' ?
          parseInt(name.slice(2), 16) : parseInt(name.slice(1), 10);

        if (isValidEntityCode(code)) {
          return fromCodePoint(code);
        }
      }

      return match;
    }

    /*function replaceEntities(str) {
      if (str.indexOf('&') < 0) { return str; }

      return str.replace(ENTITY_RE, replaceEntityPattern);
    }*/

    function unescapeMd(str) {
      if (str.indexOf('\\') < 0) { return str; }
      return str.replace(UNESCAPE_MD_RE, '$1');
    }

    function unescapeAll(str) {
      if (str.indexOf('\\') < 0 && str.indexOf('&') < 0) { return str; }

      return str.replace(UNESCAPE_ALL_RE, function (match, escaped, entity) {
        if (escaped) { return escaped; }
        return replaceEntityPattern(match, entity);
      });
    }

    ////////////////////////////////////////////////////////////////////////////////

    var HTML_ESCAPE_TEST_RE = /[&<>"]/;
    var HTML_ESCAPE_REPLACE_RE = /[&<>"]/g;
    var HTML_REPLACEMENTS = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;'
    };

    function replaceUnsafeChar(ch) {
      return HTML_REPLACEMENTS[ch];
    }

    function escapeHtml(str) {
      if (HTML_ESCAPE_TEST_RE.test(str)) {
        return str.replace(HTML_ESCAPE_REPLACE_RE, replaceUnsafeChar);
      }
      return str;
    }

    ////////////////////////////////////////////////////////////////////////////////

    var REGEXP_ESCAPE_RE = /[.?*+^$[\]\\(){}|-]/g;

    function escapeRE(str) {
      return str.replace(REGEXP_ESCAPE_RE, '\\$&');
    }

    ////////////////////////////////////////////////////////////////////////////////

    function isSpace(code) {
      switch (code) {
        case 0x09:
        case 0x20:
          return true;
      }
      return false;
    }

    // Zs (unicode class) || [\t\f\v\r\n]
    function isWhiteSpace(code) {
      if (code >= 0x2000 && code <= 0x200A) { return true; }
      switch (code) {
        case 0x09: // \t
        case 0x0A: // \n
        case 0x0B: // \v
        case 0x0C: // \f
        case 0x0D: // \r
        case 0x20:
        case 0xA0:
        case 0x1680:
        case 0x202F:
        case 0x205F:
        case 0x3000:
          return true;
      }
      return false;
    }

    ////////////////////////////////////////////////////////////////////////////////

    /*eslint-disable max-len*/


    // Currently without astral characters support.
    function isPunctChar(ch) {
      return regex$4.test(ch);
    }


    // Markdown ASCII punctuation characters.
    //
    // !, ", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \, ], ^, _, `, {, |, }, or ~
    // http://spec.commonmark.org/0.15/#ascii-punctuation-character
    //
    // Don't confuse with unicode punctuation !!! It lacks some chars in ascii range.
    //
    function isMdAsciiPunct(ch) {
      switch (ch) {
        case 0x21/* ! */:
        case 0x22/* " */:
        case 0x23/* # */:
        case 0x24/* $ */:
        case 0x25/* % */:
        case 0x26/* & */:
        case 0x27/* ' */:
        case 0x28/* ( */:
        case 0x29/* ) */:
        case 0x2A/* * */:
        case 0x2B/* + */:
        case 0x2C/* , */:
        case 0x2D/* - */:
        case 0x2E/* . */:
        case 0x2F/* / */:
        case 0x3A/* : */:
        case 0x3B/* ; */:
        case 0x3C/* < */:
        case 0x3D/* = */:
        case 0x3E/* > */:
        case 0x3F/* ? */:
        case 0x40/* @ */:
        case 0x5B/* [ */:
        case 0x5C/* \ */:
        case 0x5D/* ] */:
        case 0x5E/* ^ */:
        case 0x5F/* _ */:
        case 0x60/* ` */:
        case 0x7B/* { */:
        case 0x7C/* | */:
        case 0x7D/* } */:
        case 0x7E/* ~ */:
          return true;
        default:
          return false;
      }
    }

    // Hepler to unify [reference labels].
    //
    function normalizeReference(str) {
      // Trim and collapse whitespace
      //
      str = str.trim().replace(/\s+/g, ' ');

      // In node v10 'ẞ'.toLowerCase() === 'Ṿ', which is presumed to be a bug
      // fixed in v12 (couldn't find any details).
      //
      // So treat this one as a special case
      // (remove this when node v10 is no longer supported).
      //
      if ('ẞ'.toLowerCase() === 'Ṿ') {
        str = str.replace(/ẞ/g, 'ß');
      }

      // .toLowerCase().toUpperCase() should get rid of all differences
      // between letter variants.
      //
      // Simple .toLowerCase() doesn't normalize 125 code points correctly,
      // and .toUpperCase doesn't normalize 6 of them (list of exceptions:
      // İ, ϴ, ẞ, Ω, K, Å - those are already uppercased, but have differently
      // uppercased versions).
      //
      // Here's an example showing how it happens. Lets take greek letter omega:
      // uppercase U+0398 (Θ), U+03f4 (ϴ) and lowercase U+03b8 (θ), U+03d1 (ϑ)
      //
      // Unicode entries:
      // 0398;GREEK CAPITAL LETTER THETA;Lu;0;L;;;;;N;;;;03B8;
      // 03B8;GREEK SMALL LETTER THETA;Ll;0;L;;;;;N;;;0398;;0398
      // 03D1;GREEK THETA SYMBOL;Ll;0;L;<compat> 03B8;;;;N;GREEK SMALL LETTER SCRIPT THETA;;0398;;0398
      // 03F4;GREEK CAPITAL THETA SYMBOL;Lu;0;L;<compat> 0398;;;;N;;;;03B8;
      //
      // Case-insensitive comparison should treat all of them as equivalent.
      //
      // But .toLowerCase() doesn't change ϑ (it's already lowercase),
      // and .toUpperCase() doesn't change ϴ (already uppercase).
      //
      // Applying first lower then upper case normalizes any character:
      // '\u0398\u03f4\u03b8\u03d1'.toLowerCase().toUpperCase() === '\u0398\u0398\u0398\u0398'
      //
      // Note: this is equivalent to unicode case folding; unicode normalization
      // is a different step that is not required here.
      //
      // Final result should be uppercased, because it's later stored in an object
      // (this avoid a conflict with Object.prototype members,
      // most notably, `__proto__`)
      //
      return str.toLowerCase().toUpperCase();
    }

    ////////////////////////////////////////////////////////////////////////////////

    // Re-export libraries commonly used in both markdown-it and its plugins,
    // so plugins won't have to depend on them explicitly, which reduces their
    // bundled size (e.g. a browser build).
    //
    exports.lib                 = {};
    exports.lib.mdurl           = mdurl;
    exports.lib.ucmicro         = uc_micro;

    exports.assign              = assign;
    exports.isString            = isString;
    exports.has                 = has;
    exports.unescapeMd          = unescapeMd;
    exports.unescapeAll         = unescapeAll;
    exports.isValidEntityCode   = isValidEntityCode;
    exports.fromCodePoint       = fromCodePoint;
    // exports.replaceEntities     = replaceEntities;
    exports.escapeHtml          = escapeHtml;
    exports.arrayReplaceAt      = arrayReplaceAt;
    exports.isSpace             = isSpace;
    exports.isWhiteSpace        = isWhiteSpace;
    exports.isMdAsciiPunct      = isMdAsciiPunct;
    exports.isPunctChar         = isPunctChar;
    exports.escapeRE            = escapeRE;
    exports.normalizeReference  = normalizeReference;
    });

    // Parse link label

    var parse_link_label = function parseLinkLabel(state, start, disableNested) {
      var level, found, marker, prevPos,
          labelEnd = -1,
          max = state.posMax,
          oldPos = state.pos;

      state.pos = start + 1;
      level = 1;

      while (state.pos < max) {
        marker = state.src.charCodeAt(state.pos);
        if (marker === 0x5D /* ] */) {
          level--;
          if (level === 0) {
            found = true;
            break;
          }
        }

        prevPos = state.pos;
        state.md.inline.skipToken(state);
        if (marker === 0x5B /* [ */) {
          if (prevPos === state.pos - 1) {
            // increase level if we find text `[`, which is not a part of any token
            level++;
          } else if (disableNested) {
            state.pos = oldPos;
            return -1;
          }
        }
      }

      if (found) {
        labelEnd = state.pos;
      }

      // restore old state
      state.pos = oldPos;

      return labelEnd;
    };

    var unescapeAll$2 = utils.unescapeAll;


    var parse_link_destination = function parseLinkDestination(str, pos, max) {
      var code, level,
          lines = 0,
          start = pos,
          result = {
            ok: false,
            pos: 0,
            lines: 0,
            str: ''
          };

      if (str.charCodeAt(pos) === 0x3C /* < */) {
        pos++;
        while (pos < max) {
          code = str.charCodeAt(pos);
          if (code === 0x0A /* \n */) { return result; }
          if (code === 0x3C /* < */) { return result; }
          if (code === 0x3E /* > */) {
            result.pos = pos + 1;
            result.str = unescapeAll$2(str.slice(start + 1, pos));
            result.ok = true;
            return result;
          }
          if (code === 0x5C /* \ */ && pos + 1 < max) {
            pos += 2;
            continue;
          }

          pos++;
        }

        // no closing '>'
        return result;
      }

      // this should be ... } else { ... branch

      level = 0;
      while (pos < max) {
        code = str.charCodeAt(pos);

        if (code === 0x20) { break; }

        // ascii control characters
        if (code < 0x20 || code === 0x7F) { break; }

        if (code === 0x5C /* \ */ && pos + 1 < max) {
          if (str.charCodeAt(pos + 1) === 0x20) { break; }
          pos += 2;
          continue;
        }

        if (code === 0x28 /* ( */) {
          level++;
          if (level > 32) { return result; }
        }

        if (code === 0x29 /* ) */) {
          if (level === 0) { break; }
          level--;
        }

        pos++;
      }

      if (start === pos) { return result; }
      if (level !== 0) { return result; }

      result.str = unescapeAll$2(str.slice(start, pos));
      result.lines = lines;
      result.pos = pos;
      result.ok = true;
      return result;
    };

    var unescapeAll$1 = utils.unescapeAll;


    var parse_link_title = function parseLinkTitle(str, pos, max) {
      var code,
          marker,
          lines = 0,
          start = pos,
          result = {
            ok: false,
            pos: 0,
            lines: 0,
            str: ''
          };

      if (pos >= max) { return result; }

      marker = str.charCodeAt(pos);

      if (marker !== 0x22 /* " */ && marker !== 0x27 /* ' */ && marker !== 0x28 /* ( */) { return result; }

      pos++;

      // if opening marker is "(", switch it to closing marker ")"
      if (marker === 0x28) { marker = 0x29; }

      while (pos < max) {
        code = str.charCodeAt(pos);
        if (code === marker) {
          result.pos = pos + 1;
          result.lines = lines;
          result.str = unescapeAll$1(str.slice(start + 1, pos));
          result.ok = true;
          return result;
        } else if (code === 0x28 /* ( */ && marker === 0x29 /* ) */) {
          return result;
        } else if (code === 0x0A) {
          lines++;
        } else if (code === 0x5C /* \ */ && pos + 1 < max) {
          pos++;
          if (str.charCodeAt(pos) === 0x0A) {
            lines++;
          }
        }

        pos++;
      }

      return result;
    };

    var parseLinkLabel       = parse_link_label;
    var parseLinkDestination = parse_link_destination;
    var parseLinkTitle       = parse_link_title;

    var helpers = {
    	parseLinkLabel: parseLinkLabel,
    	parseLinkDestination: parseLinkDestination,
    	parseLinkTitle: parseLinkTitle
    };

    /**
     * class Renderer
     *
     * Generates HTML from parsed token stream. Each instance has independent
     * copy of rules. Those can be rewritten with ease. Also, you can add new
     * rules if you create plugin and adds new token types.
     **/


    var assign$2          = utils.assign;
    var unescapeAll     = utils.unescapeAll;
    var escapeHtml      = utils.escapeHtml;


    ////////////////////////////////////////////////////////////////////////////////

    var default_rules = {};


    default_rules.code_inline = function (tokens, idx, options, env, slf) {
      var token = tokens[idx];

      return  '<code' + slf.renderAttrs(token) + '>' +
              escapeHtml(tokens[idx].content) +
              '</code>';
    };


    default_rules.code_block = function (tokens, idx, options, env, slf) {
      var token = tokens[idx];

      return  '<pre' + slf.renderAttrs(token) + '><code>' +
              escapeHtml(tokens[idx].content) +
              '</code></pre>\n';
    };


    default_rules.fence = function (tokens, idx, options, env, slf) {
      var token = tokens[idx],
          info = token.info ? unescapeAll(token.info).trim() : '',
          langName = '',
          langAttrs = '',
          highlighted, i, arr, tmpAttrs, tmpToken;

      if (info) {
        arr = info.split(/(\s+)/g);
        langName = arr[0];
        langAttrs = arr.slice(2).join('');
      }

      if (options.highlight) {
        highlighted = options.highlight(token.content, langName, langAttrs) || escapeHtml(token.content);
      } else {
        highlighted = escapeHtml(token.content);
      }

      if (highlighted.indexOf('<pre') === 0) {
        return highlighted + '\n';
      }

      // If language exists, inject class gently, without modifying original token.
      // May be, one day we will add .deepClone() for token and simplify this part, but
      // now we prefer to keep things local.
      if (info) {
        i        = token.attrIndex('class');
        tmpAttrs = token.attrs ? token.attrs.slice() : [];

        if (i < 0) {
          tmpAttrs.push([ 'class', options.langPrefix + langName ]);
        } else {
          tmpAttrs[i] = tmpAttrs[i].slice();
          tmpAttrs[i][1] += ' ' + options.langPrefix + langName;
        }

        // Fake token just to render attributes
        tmpToken = {
          attrs: tmpAttrs
        };

        return  '<pre><code' + slf.renderAttrs(tmpToken) + '>'
              + highlighted
              + '</code></pre>\n';
      }


      return  '<pre><code' + slf.renderAttrs(token) + '>'
            + highlighted
            + '</code></pre>\n';
    };


    default_rules.image = function (tokens, idx, options, env, slf) {
      var token = tokens[idx];

      // "alt" attr MUST be set, even if empty. Because it's mandatory and
      // should be placed on proper position for tests.
      //
      // Replace content with actual value

      token.attrs[token.attrIndex('alt')][1] =
        slf.renderInlineAsText(token.children, options, env);

      return slf.renderToken(tokens, idx, options);
    };


    default_rules.hardbreak = function (tokens, idx, options /*, env */) {
      return options.xhtmlOut ? '<br />\n' : '<br>\n';
    };
    default_rules.softbreak = function (tokens, idx, options /*, env */) {
      return options.breaks ? (options.xhtmlOut ? '<br />\n' : '<br>\n') : '\n';
    };


    default_rules.text = function (tokens, idx /*, options, env */) {
      return escapeHtml(tokens[idx].content);
    };


    default_rules.html_block = function (tokens, idx /*, options, env */) {
      return tokens[idx].content;
    };
    default_rules.html_inline = function (tokens, idx /*, options, env */) {
      return tokens[idx].content;
    };


    /**
     * new Renderer()
     *
     * Creates new [[Renderer]] instance and fill [[Renderer#rules]] with defaults.
     **/
    function Renderer$1() {

      /**
       * Renderer#rules -> Object
       *
       * Contains render rules for tokens. Can be updated and extended.
       *
       * ##### Example
       *
       * ```javascript
       * var md = require('markdown-it')();
       *
       * md.renderer.rules.strong_open  = function () { return '<b>'; };
       * md.renderer.rules.strong_close = function () { return '</b>'; };
       *
       * var result = md.renderInline(...);
       * ```
       *
       * Each rule is called as independent static function with fixed signature:
       *
       * ```javascript
       * function my_token_render(tokens, idx, options, env, renderer) {
       *   // ...
       *   return renderedHTML;
       * }
       * ```
       *
       * See [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js)
       * for more details and examples.
       **/
      this.rules = assign$2({}, default_rules);
    }


    /**
     * Renderer.renderAttrs(token) -> String
     *
     * Render token attributes to string.
     **/
    Renderer$1.prototype.renderAttrs = function renderAttrs(token) {
      var i, l, result;

      if (!token.attrs) { return ''; }

      result = '';

      for (i = 0, l = token.attrs.length; i < l; i++) {
        result += ' ' + escapeHtml(token.attrs[i][0]) + '="' + escapeHtml(token.attrs[i][1]) + '"';
      }

      return result;
    };


    /**
     * Renderer.renderToken(tokens, idx, options) -> String
     * - tokens (Array): list of tokens
     * - idx (Numbed): token index to render
     * - options (Object): params of parser instance
     *
     * Default token renderer. Can be overriden by custom function
     * in [[Renderer#rules]].
     **/
    Renderer$1.prototype.renderToken = function renderToken(tokens, idx, options) {
      var nextToken,
          result = '',
          needLf = false,
          token = tokens[idx];

      // Tight list paragraphs
      if (token.hidden) {
        return '';
      }

      // Insert a newline between hidden paragraph and subsequent opening
      // block-level tag.
      //
      // For example, here we should insert a newline before blockquote:
      //  - a
      //    >
      //
      if (token.block && token.nesting !== -1 && idx && tokens[idx - 1].hidden) {
        result += '\n';
      }

      // Add token name, e.g. `<img`
      result += (token.nesting === -1 ? '</' : '<') + token.tag;

      // Encode attributes, e.g. `<img src="foo"`
      result += this.renderAttrs(token);

      // Add a slash for self-closing tags, e.g. `<img src="foo" /`
      if (token.nesting === 0 && options.xhtmlOut) {
        result += ' /';
      }

      // Check if we need to add a newline after this tag
      if (token.block) {
        needLf = true;

        if (token.nesting === 1) {
          if (idx + 1 < tokens.length) {
            nextToken = tokens[idx + 1];

            if (nextToken.type === 'inline' || nextToken.hidden) {
              // Block-level tag containing an inline tag.
              //
              needLf = false;

            } else if (nextToken.nesting === -1 && nextToken.tag === token.tag) {
              // Opening tag + closing tag of the same type. E.g. `<li></li>`.
              //
              needLf = false;
            }
          }
        }
      }

      result += needLf ? '>\n' : '>';

      return result;
    };


    /**
     * Renderer.renderInline(tokens, options, env) -> String
     * - tokens (Array): list on block tokens to renter
     * - options (Object): params of parser instance
     * - env (Object): additional data from parsed input (references, for example)
     *
     * The same as [[Renderer.render]], but for single token of `inline` type.
     **/
    Renderer$1.prototype.renderInline = function (tokens, options, env) {
      var type,
          result = '',
          rules = this.rules;

      for (var i = 0, len = tokens.length; i < len; i++) {
        type = tokens[i].type;

        if (typeof rules[type] !== 'undefined') {
          result += rules[type](tokens, i, options, env, this);
        } else {
          result += this.renderToken(tokens, i, options);
        }
      }

      return result;
    };


    /** internal
     * Renderer.renderInlineAsText(tokens, options, env) -> String
     * - tokens (Array): list on block tokens to renter
     * - options (Object): params of parser instance
     * - env (Object): additional data from parsed input (references, for example)
     *
     * Special kludge for image `alt` attributes to conform CommonMark spec.
     * Don't try to use it! Spec requires to show `alt` content with stripped markup,
     * instead of simple escaping.
     **/
    Renderer$1.prototype.renderInlineAsText = function (tokens, options, env) {
      var result = '';

      for (var i = 0, len = tokens.length; i < len; i++) {
        if (tokens[i].type === 'text') {
          result += tokens[i].content;
        } else if (tokens[i].type === 'image') {
          result += this.renderInlineAsText(tokens[i].children, options, env);
        } else if (tokens[i].type === 'softbreak') {
          result += '\n';
        }
      }

      return result;
    };


    /**
     * Renderer.render(tokens, options, env) -> String
     * - tokens (Array): list on block tokens to renter
     * - options (Object): params of parser instance
     * - env (Object): additional data from parsed input (references, for example)
     *
     * Takes token stream and generates HTML. Probably, you will never need to call
     * this method directly.
     **/
    Renderer$1.prototype.render = function (tokens, options, env) {
      var i, len, type,
          result = '',
          rules = this.rules;

      for (i = 0, len = tokens.length; i < len; i++) {
        type = tokens[i].type;

        if (type === 'inline') {
          result += this.renderInline(tokens[i].children, options, env);
        } else if (typeof rules[type] !== 'undefined') {
          result += rules[tokens[i].type](tokens, i, options, env, this);
        } else {
          result += this.renderToken(tokens, i, options, env);
        }
      }

      return result;
    };

    var renderer = Renderer$1;

    /**
     * class Ruler
     *
     * Helper class, used by [[MarkdownIt#core]], [[MarkdownIt#block]] and
     * [[MarkdownIt#inline]] to manage sequences of functions (rules):
     *
     * - keep rules in defined order
     * - assign the name to each rule
     * - enable/disable rules
     * - add/replace rules
     * - allow assign rules to additional named chains (in the same)
     * - cacheing lists of active rules
     *
     * You will not need use this class directly until write plugins. For simple
     * rules control use [[MarkdownIt.disable]], [[MarkdownIt.enable]] and
     * [[MarkdownIt.use]].
     **/


    /**
     * new Ruler()
     **/
    function Ruler() {
      // List of added rules. Each element is:
      //
      // {
      //   name: XXX,
      //   enabled: Boolean,
      //   fn: Function(),
      //   alt: [ name2, name3 ]
      // }
      //
      this.__rules__ = [];

      // Cached rule chains.
      //
      // First level - chain name, '' for default.
      // Second level - diginal anchor for fast filtering by charcodes.
      //
      this.__cache__ = null;
    }

    ////////////////////////////////////////////////////////////////////////////////
    // Helper methods, should not be used directly


    // Find rule index by name
    //
    Ruler.prototype.__find__ = function (name) {
      for (var i = 0; i < this.__rules__.length; i++) {
        if (this.__rules__[i].name === name) {
          return i;
        }
      }
      return -1;
    };


    // Build rules lookup cache
    //
    Ruler.prototype.__compile__ = function () {
      var self = this;
      var chains = [ '' ];

      // collect unique names
      self.__rules__.forEach(function (rule) {
        if (!rule.enabled) { return; }

        rule.alt.forEach(function (altName) {
          if (chains.indexOf(altName) < 0) {
            chains.push(altName);
          }
        });
      });

      self.__cache__ = {};

      chains.forEach(function (chain) {
        self.__cache__[chain] = [];
        self.__rules__.forEach(function (rule) {
          if (!rule.enabled) { return; }

          if (chain && rule.alt.indexOf(chain) < 0) { return; }

          self.__cache__[chain].push(rule.fn);
        });
      });
    };


    /**
     * Ruler.at(name, fn [, options])
     * - name (String): rule name to replace.
     * - fn (Function): new rule function.
     * - options (Object): new rule options (not mandatory).
     *
     * Replace rule by name with new function & options. Throws error if name not
     * found.
     *
     * ##### Options:
     *
     * - __alt__ - array with names of "alternate" chains.
     *
     * ##### Example
     *
     * Replace existing typographer replacement rule with new one:
     *
     * ```javascript
     * var md = require('markdown-it')();
     *
     * md.core.ruler.at('replacements', function replace(state) {
     *   //...
     * });
     * ```
     **/
    Ruler.prototype.at = function (name, fn, options) {
      var index = this.__find__(name);
      var opt = options || {};

      if (index === -1) { throw new Error('Parser rule not found: ' + name); }

      this.__rules__[index].fn = fn;
      this.__rules__[index].alt = opt.alt || [];
      this.__cache__ = null;
    };


    /**
     * Ruler.before(beforeName, ruleName, fn [, options])
     * - beforeName (String): new rule will be added before this one.
     * - ruleName (String): name of added rule.
     * - fn (Function): rule function.
     * - options (Object): rule options (not mandatory).
     *
     * Add new rule to chain before one with given name. See also
     * [[Ruler.after]], [[Ruler.push]].
     *
     * ##### Options:
     *
     * - __alt__ - array with names of "alternate" chains.
     *
     * ##### Example
     *
     * ```javascript
     * var md = require('markdown-it')();
     *
     * md.block.ruler.before('paragraph', 'my_rule', function replace(state) {
     *   //...
     * });
     * ```
     **/
    Ruler.prototype.before = function (beforeName, ruleName, fn, options) {
      var index = this.__find__(beforeName);
      var opt = options || {};

      if (index === -1) { throw new Error('Parser rule not found: ' + beforeName); }

      this.__rules__.splice(index, 0, {
        name: ruleName,
        enabled: true,
        fn: fn,
        alt: opt.alt || []
      });

      this.__cache__ = null;
    };


    /**
     * Ruler.after(afterName, ruleName, fn [, options])
     * - afterName (String): new rule will be added after this one.
     * - ruleName (String): name of added rule.
     * - fn (Function): rule function.
     * - options (Object): rule options (not mandatory).
     *
     * Add new rule to chain after one with given name. See also
     * [[Ruler.before]], [[Ruler.push]].
     *
     * ##### Options:
     *
     * - __alt__ - array with names of "alternate" chains.
     *
     * ##### Example
     *
     * ```javascript
     * var md = require('markdown-it')();
     *
     * md.inline.ruler.after('text', 'my_rule', function replace(state) {
     *   //...
     * });
     * ```
     **/
    Ruler.prototype.after = function (afterName, ruleName, fn, options) {
      var index = this.__find__(afterName);
      var opt = options || {};

      if (index === -1) { throw new Error('Parser rule not found: ' + afterName); }

      this.__rules__.splice(index + 1, 0, {
        name: ruleName,
        enabled: true,
        fn: fn,
        alt: opt.alt || []
      });

      this.__cache__ = null;
    };

    /**
     * Ruler.push(ruleName, fn [, options])
     * - ruleName (String): name of added rule.
     * - fn (Function): rule function.
     * - options (Object): rule options (not mandatory).
     *
     * Push new rule to the end of chain. See also
     * [[Ruler.before]], [[Ruler.after]].
     *
     * ##### Options:
     *
     * - __alt__ - array with names of "alternate" chains.
     *
     * ##### Example
     *
     * ```javascript
     * var md = require('markdown-it')();
     *
     * md.core.ruler.push('my_rule', function replace(state) {
     *   //...
     * });
     * ```
     **/
    Ruler.prototype.push = function (ruleName, fn, options) {
      var opt = options || {};

      this.__rules__.push({
        name: ruleName,
        enabled: true,
        fn: fn,
        alt: opt.alt || []
      });

      this.__cache__ = null;
    };


    /**
     * Ruler.enable(list [, ignoreInvalid]) -> Array
     * - list (String|Array): list of rule names to enable.
     * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
     *
     * Enable rules with given names. If any rule name not found - throw Error.
     * Errors can be disabled by second param.
     *
     * Returns list of found rule names (if no exception happened).
     *
     * See also [[Ruler.disable]], [[Ruler.enableOnly]].
     **/
    Ruler.prototype.enable = function (list, ignoreInvalid) {
      if (!Array.isArray(list)) { list = [ list ]; }

      var result = [];

      // Search by name and enable
      list.forEach(function (name) {
        var idx = this.__find__(name);

        if (idx < 0) {
          if (ignoreInvalid) { return; }
          throw new Error('Rules manager: invalid rule name ' + name);
        }
        this.__rules__[idx].enabled = true;
        result.push(name);
      }, this);

      this.__cache__ = null;
      return result;
    };


    /**
     * Ruler.enableOnly(list [, ignoreInvalid])
     * - list (String|Array): list of rule names to enable (whitelist).
     * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
     *
     * Enable rules with given names, and disable everything else. If any rule name
     * not found - throw Error. Errors can be disabled by second param.
     *
     * See also [[Ruler.disable]], [[Ruler.enable]].
     **/
    Ruler.prototype.enableOnly = function (list, ignoreInvalid) {
      if (!Array.isArray(list)) { list = [ list ]; }

      this.__rules__.forEach(function (rule) { rule.enabled = false; });

      this.enable(list, ignoreInvalid);
    };


    /**
     * Ruler.disable(list [, ignoreInvalid]) -> Array
     * - list (String|Array): list of rule names to disable.
     * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
     *
     * Disable rules with given names. If any rule name not found - throw Error.
     * Errors can be disabled by second param.
     *
     * Returns list of found rule names (if no exception happened).
     *
     * See also [[Ruler.enable]], [[Ruler.enableOnly]].
     **/
    Ruler.prototype.disable = function (list, ignoreInvalid) {
      if (!Array.isArray(list)) { list = [ list ]; }

      var result = [];

      // Search by name and disable
      list.forEach(function (name) {
        var idx = this.__find__(name);

        if (idx < 0) {
          if (ignoreInvalid) { return; }
          throw new Error('Rules manager: invalid rule name ' + name);
        }
        this.__rules__[idx].enabled = false;
        result.push(name);
      }, this);

      this.__cache__ = null;
      return result;
    };


    /**
     * Ruler.getRules(chainName) -> Array
     *
     * Return array of active functions (rules) for given chain name. It analyzes
     * rules configuration, compiles caches if not exists and returns result.
     *
     * Default chain name is `''` (empty string). It can't be skipped. That's
     * done intentionally, to keep signature monomorphic for high speed.
     **/
    Ruler.prototype.getRules = function (chainName) {
      if (this.__cache__ === null) {
        this.__compile__();
      }

      // Chain can be empty, if rules disabled. But we still have to return Array.
      return this.__cache__[chainName] || [];
    };

    var ruler = Ruler;

    // Normalize input string


    // https://spec.commonmark.org/0.29/#line-ending
    var NEWLINES_RE  = /\r\n?|\n/g;
    var NULL_RE      = /\0/g;


    var normalize$1 = function normalize(state) {
      var str;

      // Normalize newlines
      str = state.src.replace(NEWLINES_RE, '\n');

      // Replace NULL characters
      str = str.replace(NULL_RE, '\uFFFD');

      state.src = str;
    };

    var block$1 = function block(state) {
      var token;

      if (state.inlineMode) {
        token          = new state.Token('inline', '', 0);
        token.content  = state.src;
        token.map      = [ 0, 1 ];
        token.children = [];
        state.tokens.push(token);
      } else {
        state.md.block.parse(state.src, state.md, state.env, state.tokens);
      }
    };

    var inline = function inline(state) {
      var tokens = state.tokens, tok, i, l;

      // Parse inlines
      for (i = 0, l = tokens.length; i < l; i++) {
        tok = tokens[i];
        if (tok.type === 'inline') {
          state.md.inline.parse(tok.content, state.md, state.env, tok.children);
        }
      }
    };

    var arrayReplaceAt = utils.arrayReplaceAt;


    function isLinkOpen(str) {
      return /^<a[>\s]/i.test(str);
    }
    function isLinkClose(str) {
      return /^<\/a\s*>/i.test(str);
    }


    var linkify = function linkify(state) {
      var i, j, l, tokens, token, currentToken, nodes, ln, text, pos, lastPos,
          level, htmlLinkLevel, url, fullUrl, urlText,
          blockTokens = state.tokens,
          links;

      if (!state.md.options.linkify) { return; }

      for (j = 0, l = blockTokens.length; j < l; j++) {
        if (blockTokens[j].type !== 'inline' ||
            !state.md.linkify.pretest(blockTokens[j].content)) {
          continue;
        }

        tokens = blockTokens[j].children;

        htmlLinkLevel = 0;

        // We scan from the end, to keep position when new tags added.
        // Use reversed logic in links start/end match
        for (i = tokens.length - 1; i >= 0; i--) {
          currentToken = tokens[i];

          // Skip content of markdown links
          if (currentToken.type === 'link_close') {
            i--;
            while (tokens[i].level !== currentToken.level && tokens[i].type !== 'link_open') {
              i--;
            }
            continue;
          }

          // Skip content of html tag links
          if (currentToken.type === 'html_inline') {
            if (isLinkOpen(currentToken.content) && htmlLinkLevel > 0) {
              htmlLinkLevel--;
            }
            if (isLinkClose(currentToken.content)) {
              htmlLinkLevel++;
            }
          }
          if (htmlLinkLevel > 0) { continue; }

          if (currentToken.type === 'text' && state.md.linkify.test(currentToken.content)) {

            text = currentToken.content;
            links = state.md.linkify.match(text);

            // Now split string to nodes
            nodes = [];
            level = currentToken.level;
            lastPos = 0;

            for (ln = 0; ln < links.length; ln++) {

              url = links[ln].url;
              fullUrl = state.md.normalizeLink(url);
              if (!state.md.validateLink(fullUrl)) { continue; }

              urlText = links[ln].text;

              // Linkifier might send raw hostnames like "example.com", where url
              // starts with domain name. So we prepend http:// in those cases,
              // and remove it afterwards.
              //
              if (!links[ln].schema) {
                urlText = state.md.normalizeLinkText('http://' + urlText).replace(/^http:\/\//, '');
              } else if (links[ln].schema === 'mailto:' && !/^mailto:/i.test(urlText)) {
                urlText = state.md.normalizeLinkText('mailto:' + urlText).replace(/^mailto:/, '');
              } else {
                urlText = state.md.normalizeLinkText(urlText);
              }

              pos = links[ln].index;

              if (pos > lastPos) {
                token         = new state.Token('text', '', 0);
                token.content = text.slice(lastPos, pos);
                token.level   = level;
                nodes.push(token);
              }

              token         = new state.Token('link_open', 'a', 1);
              token.attrs   = [ [ 'href', fullUrl ] ];
              token.level   = level++;
              token.markup  = 'linkify';
              token.info    = 'auto';
              nodes.push(token);

              token         = new state.Token('text', '', 0);
              token.content = urlText;
              token.level   = level;
              nodes.push(token);

              token         = new state.Token('link_close', 'a', -1);
              token.level   = --level;
              token.markup  = 'linkify';
              token.info    = 'auto';
              nodes.push(token);

              lastPos = links[ln].lastIndex;
            }
            if (lastPos < text.length) {
              token         = new state.Token('text', '', 0);
              token.content = text.slice(lastPos);
              token.level   = level;
              nodes.push(token);
            }

            // replace current node
            blockTokens[j].children = tokens = arrayReplaceAt(tokens, i, nodes);
          }
        }
      }
    };

    // Simple typographic replacements

    // TODO:
    // - fractionals 1/2, 1/4, 3/4 -> ½, ¼, ¾
    // - miltiplication 2 x 4 -> 2 × 4

    var RARE_RE = /\+-|\.\.|\?\?\?\?|!!!!|,,|--/;

    // Workaround for phantomjs - need regex without /g flag,
    // or root check will fail every second time
    var SCOPED_ABBR_TEST_RE = /\((c|tm|r|p)\)/i;

    var SCOPED_ABBR_RE = /\((c|tm|r|p)\)/ig;
    var SCOPED_ABBR = {
      c: '©',
      r: '®',
      p: '§',
      tm: '™'
    };

    function replaceFn(match, name) {
      return SCOPED_ABBR[name.toLowerCase()];
    }

    function replace_scoped(inlineTokens) {
      var i, token, inside_autolink = 0;

      for (i = inlineTokens.length - 1; i >= 0; i--) {
        token = inlineTokens[i];

        if (token.type === 'text' && !inside_autolink) {
          token.content = token.content.replace(SCOPED_ABBR_RE, replaceFn);
        }

        if (token.type === 'link_open' && token.info === 'auto') {
          inside_autolink--;
        }

        if (token.type === 'link_close' && token.info === 'auto') {
          inside_autolink++;
        }
      }
    }

    function replace_rare(inlineTokens) {
      var i, token, inside_autolink = 0;

      for (i = inlineTokens.length - 1; i >= 0; i--) {
        token = inlineTokens[i];

        if (token.type === 'text' && !inside_autolink) {
          if (RARE_RE.test(token.content)) {
            token.content = token.content
              .replace(/\+-/g, '±')
              // .., ..., ....... -> …
              // but ?..... & !..... -> ?.. & !..
              .replace(/\.{2,}/g, '…').replace(/([?!])…/g, '$1..')
              .replace(/([?!]){4,}/g, '$1$1$1').replace(/,{2,}/g, ',')
              // em-dash
              .replace(/(^|[^-])---(?=[^-]|$)/mg, '$1\u2014')
              // en-dash
              .replace(/(^|\s)--(?=\s|$)/mg, '$1\u2013')
              .replace(/(^|[^-\s])--(?=[^-\s]|$)/mg, '$1\u2013');
          }
        }

        if (token.type === 'link_open' && token.info === 'auto') {
          inside_autolink--;
        }

        if (token.type === 'link_close' && token.info === 'auto') {
          inside_autolink++;
        }
      }
    }


    var replacements = function replace(state) {
      var blkIdx;

      if (!state.md.options.typographer) { return; }

      for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {

        if (state.tokens[blkIdx].type !== 'inline') { continue; }

        if (SCOPED_ABBR_TEST_RE.test(state.tokens[blkIdx].content)) {
          replace_scoped(state.tokens[blkIdx].children);
        }

        if (RARE_RE.test(state.tokens[blkIdx].content)) {
          replace_rare(state.tokens[blkIdx].children);
        }

      }
    };

    var isWhiteSpace$1   = utils.isWhiteSpace;
    var isPunctChar$1    = utils.isPunctChar;
    var isMdAsciiPunct$1 = utils.isMdAsciiPunct;

    var QUOTE_TEST_RE = /['"]/;
    var QUOTE_RE = /['"]/g;
    var APOSTROPHE = '\u2019'; /* ’ */


    function replaceAt(str, index, ch) {
      return str.substr(0, index) + ch + str.substr(index + 1);
    }

    function process_inlines(tokens, state) {
      var i, token, text, t, pos, max, thisLevel, item, lastChar, nextChar,
          isLastPunctChar, isNextPunctChar, isLastWhiteSpace, isNextWhiteSpace,
          canOpen, canClose, j, isSingle, stack, openQuote, closeQuote;

      stack = [];

      for (i = 0; i < tokens.length; i++) {
        token = tokens[i];

        thisLevel = tokens[i].level;

        for (j = stack.length - 1; j >= 0; j--) {
          if (stack[j].level <= thisLevel) { break; }
        }
        stack.length = j + 1;

        if (token.type !== 'text') { continue; }

        text = token.content;
        pos = 0;
        max = text.length;

        /*eslint no-labels:0,block-scoped-var:0*/
        OUTER:
        while (pos < max) {
          QUOTE_RE.lastIndex = pos;
          t = QUOTE_RE.exec(text);
          if (!t) { break; }

          canOpen = canClose = true;
          pos = t.index + 1;
          isSingle = (t[0] === "'");

          // Find previous character,
          // default to space if it's the beginning of the line
          //
          lastChar = 0x20;

          if (t.index - 1 >= 0) {
            lastChar = text.charCodeAt(t.index - 1);
          } else {
            for (j = i - 1; j >= 0; j--) {
              if (tokens[j].type === 'softbreak' || tokens[j].type === 'hardbreak') break; // lastChar defaults to 0x20
              if (!tokens[j].content) continue; // should skip all tokens except 'text', 'html_inline' or 'code_inline'

              lastChar = tokens[j].content.charCodeAt(tokens[j].content.length - 1);
              break;
            }
          }

          // Find next character,
          // default to space if it's the end of the line
          //
          nextChar = 0x20;

          if (pos < max) {
            nextChar = text.charCodeAt(pos);
          } else {
            for (j = i + 1; j < tokens.length; j++) {
              if (tokens[j].type === 'softbreak' || tokens[j].type === 'hardbreak') break; // nextChar defaults to 0x20
              if (!tokens[j].content) continue; // should skip all tokens except 'text', 'html_inline' or 'code_inline'

              nextChar = tokens[j].content.charCodeAt(0);
              break;
            }
          }

          isLastPunctChar = isMdAsciiPunct$1(lastChar) || isPunctChar$1(String.fromCharCode(lastChar));
          isNextPunctChar = isMdAsciiPunct$1(nextChar) || isPunctChar$1(String.fromCharCode(nextChar));

          isLastWhiteSpace = isWhiteSpace$1(lastChar);
          isNextWhiteSpace = isWhiteSpace$1(nextChar);

          if (isNextWhiteSpace) {
            canOpen = false;
          } else if (isNextPunctChar) {
            if (!(isLastWhiteSpace || isLastPunctChar)) {
              canOpen = false;
            }
          }

          if (isLastWhiteSpace) {
            canClose = false;
          } else if (isLastPunctChar) {
            if (!(isNextWhiteSpace || isNextPunctChar)) {
              canClose = false;
            }
          }

          if (nextChar === 0x22 /* " */ && t[0] === '"') {
            if (lastChar >= 0x30 /* 0 */ && lastChar <= 0x39 /* 9 */) {
              // special case: 1"" - count first quote as an inch
              canClose = canOpen = false;
            }
          }

          if (canOpen && canClose) {
            // Replace quotes in the middle of punctuation sequence, but not
            // in the middle of the words, i.e.:
            //
            // 1. foo " bar " baz - not replaced
            // 2. foo-"-bar-"-baz - replaced
            // 3. foo"bar"baz     - not replaced
            //
            canOpen = isLastPunctChar;
            canClose = isNextPunctChar;
          }

          if (!canOpen && !canClose) {
            // middle of word
            if (isSingle) {
              token.content = replaceAt(token.content, t.index, APOSTROPHE);
            }
            continue;
          }

          if (canClose) {
            // this could be a closing quote, rewind the stack to get a match
            for (j = stack.length - 1; j >= 0; j--) {
              item = stack[j];
              if (stack[j].level < thisLevel) { break; }
              if (item.single === isSingle && stack[j].level === thisLevel) {
                item = stack[j];

                if (isSingle) {
                  openQuote = state.md.options.quotes[2];
                  closeQuote = state.md.options.quotes[3];
                } else {
                  openQuote = state.md.options.quotes[0];
                  closeQuote = state.md.options.quotes[1];
                }

                // replace token.content *before* tokens[item.token].content,
                // because, if they are pointing at the same token, replaceAt
                // could mess up indices when quote length != 1
                token.content = replaceAt(token.content, t.index, closeQuote);
                tokens[item.token].content = replaceAt(
                  tokens[item.token].content, item.pos, openQuote);

                pos += closeQuote.length - 1;
                if (item.token === i) { pos += openQuote.length - 1; }

                text = token.content;
                max = text.length;

                stack.length = j;
                continue OUTER;
              }
            }
          }

          if (canOpen) {
            stack.push({
              token: i,
              pos: t.index,
              single: isSingle,
              level: thisLevel
            });
          } else if (canClose && isSingle) {
            token.content = replaceAt(token.content, t.index, APOSTROPHE);
          }
        }
      }
    }


    var smartquotes = function smartquotes(state) {
      /*eslint max-depth:0*/
      var blkIdx;

      if (!state.md.options.typographer) { return; }

      for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {

        if (state.tokens[blkIdx].type !== 'inline' ||
            !QUOTE_TEST_RE.test(state.tokens[blkIdx].content)) {
          continue;
        }

        process_inlines(state.tokens[blkIdx].children, state);
      }
    };

    // Token class


    /**
     * class Token
     **/

    /**
     * new Token(type, tag, nesting)
     *
     * Create new token and fill passed properties.
     **/
    function Token(type, tag, nesting) {
      /**
       * Token#type -> String
       *
       * Type of the token (string, e.g. "paragraph_open")
       **/
      this.type     = type;

      /**
       * Token#tag -> String
       *
       * html tag name, e.g. "p"
       **/
      this.tag      = tag;

      /**
       * Token#attrs -> Array
       *
       * Html attributes. Format: `[ [ name1, value1 ], [ name2, value2 ] ]`
       **/
      this.attrs    = null;

      /**
       * Token#map -> Array
       *
       * Source map info. Format: `[ line_begin, line_end ]`
       **/
      this.map      = null;

      /**
       * Token#nesting -> Number
       *
       * Level change (number in {-1, 0, 1} set), where:
       *
       * -  `1` means the tag is opening
       * -  `0` means the tag is self-closing
       * - `-1` means the tag is closing
       **/
      this.nesting  = nesting;

      /**
       * Token#level -> Number
       *
       * nesting level, the same as `state.level`
       **/
      this.level    = 0;

      /**
       * Token#children -> Array
       *
       * An array of child nodes (inline and img tokens)
       **/
      this.children = null;

      /**
       * Token#content -> String
       *
       * In a case of self-closing tag (code, html, fence, etc.),
       * it has contents of this tag.
       **/
      this.content  = '';

      /**
       * Token#markup -> String
       *
       * '*' or '_' for emphasis, fence string for fence, etc.
       **/
      this.markup   = '';

      /**
       * Token#info -> String
       *
       * Additional information:
       *
       * - Info string for "fence" tokens
       * - The value "auto" for autolink "link_open" and "link_close" tokens
       **/
      this.info     = '';

      /**
       * Token#meta -> Object
       *
       * A place for plugins to store an arbitrary data
       **/
      this.meta     = null;

      /**
       * Token#block -> Boolean
       *
       * True for block-level tokens, false for inline tokens.
       * Used in renderer to calculate line breaks
       **/
      this.block    = false;

      /**
       * Token#hidden -> Boolean
       *
       * If it's true, ignore this element when rendering. Used for tight lists
       * to hide paragraphs.
       **/
      this.hidden   = false;
    }


    /**
     * Token.attrIndex(name) -> Number
     *
     * Search attribute index by name.
     **/
    Token.prototype.attrIndex = function attrIndex(name) {
      var attrs, i, len;

      if (!this.attrs) { return -1; }

      attrs = this.attrs;

      for (i = 0, len = attrs.length; i < len; i++) {
        if (attrs[i][0] === name) { return i; }
      }
      return -1;
    };


    /**
     * Token.attrPush(attrData)
     *
     * Add `[ name, value ]` attribute to list. Init attrs if necessary
     **/
    Token.prototype.attrPush = function attrPush(attrData) {
      if (this.attrs) {
        this.attrs.push(attrData);
      } else {
        this.attrs = [ attrData ];
      }
    };


    /**
     * Token.attrSet(name, value)
     *
     * Set `name` attribute to `value`. Override old value if exists.
     **/
    Token.prototype.attrSet = function attrSet(name, value) {
      var idx = this.attrIndex(name),
          attrData = [ name, value ];

      if (idx < 0) {
        this.attrPush(attrData);
      } else {
        this.attrs[idx] = attrData;
      }
    };


    /**
     * Token.attrGet(name)
     *
     * Get the value of attribute `name`, or null if it does not exist.
     **/
    Token.prototype.attrGet = function attrGet(name) {
      var idx = this.attrIndex(name), value = null;
      if (idx >= 0) {
        value = this.attrs[idx][1];
      }
      return value;
    };


    /**
     * Token.attrJoin(name, value)
     *
     * Join value to existing attribute via space. Or create new attribute if not
     * exists. Useful to operate with token classes.
     **/
    Token.prototype.attrJoin = function attrJoin(name, value) {
      var idx = this.attrIndex(name);

      if (idx < 0) {
        this.attrPush([ name, value ]);
      } else {
        this.attrs[idx][1] = this.attrs[idx][1] + ' ' + value;
      }
    };


    var token = Token;

    function StateCore(src, md, env) {
      this.src = src;
      this.env = env;
      this.tokens = [];
      this.inlineMode = false;
      this.md = md; // link to parser instance
    }

    // re-export Token class to use in core rules
    StateCore.prototype.Token = token;


    var state_core = StateCore;

    /** internal
     * class Core
     *
     * Top-level rules executor. Glues block/inline parsers and does intermediate
     * transformations.
     **/





    var _rules$2 = [
      [ 'normalize',      normalize$1      ],
      [ 'block',          block$1          ],
      [ 'inline',         inline         ],
      [ 'linkify',        linkify        ],
      [ 'replacements',   replacements   ],
      [ 'smartquotes',    smartquotes    ]
    ];


    /**
     * new Core()
     **/
    function Core() {
      /**
       * Core#ruler -> Ruler
       *
       * [[Ruler]] instance. Keep configuration of core rules.
       **/
      this.ruler = new ruler();

      for (var i = 0; i < _rules$2.length; i++) {
        this.ruler.push(_rules$2[i][0], _rules$2[i][1]);
      }
    }


    /**
     * Core.process(state)
     *
     * Executes core chain rules.
     **/
    Core.prototype.process = function (state) {
      var i, l, rules;

      rules = this.ruler.getRules('');

      for (i = 0, l = rules.length; i < l; i++) {
        rules[i](state);
      }
    };

    Core.prototype.State = state_core;


    var parser_core = Core;

    var isSpace$a = utils.isSpace;


    function getLine(state, line) {
      var pos = state.bMarks[line] + state.tShift[line],
          max = state.eMarks[line];

      return state.src.substr(pos, max - pos);
    }

    function escapedSplit(str) {
      var result = [],
          pos = 0,
          max = str.length,
          ch,
          isEscaped = false,
          lastPos = 0,
          current = '';

      ch  = str.charCodeAt(pos);

      while (pos < max) {
        if (ch === 0x7c/* | */) {
          if (!isEscaped) {
            // pipe separating cells, '|'
            result.push(current + str.substring(lastPos, pos));
            current = '';
            lastPos = pos + 1;
          } else {
            // escaped pipe, '\|'
            current += str.substring(lastPos, pos - 1);
            lastPos = pos;
          }
        }

        isEscaped = (ch === 0x5c/* \ */);
        pos++;

        ch = str.charCodeAt(pos);
      }

      result.push(current + str.substring(lastPos));

      return result;
    }


    var table$1 = function table(state, startLine, endLine, silent) {
      var ch, lineText, pos, i, l, nextLine, columns, columnCount, token,
          aligns, t, tableLines, tbodyLines, oldParentType, terminate,
          terminatorRules, firstCh, secondCh;

      // should have at least two lines
      if (startLine + 2 > endLine) { return false; }

      nextLine = startLine + 1;

      if (state.sCount[nextLine] < state.blkIndent) { return false; }

      // if it's indented more than 3 spaces, it should be a code block
      if (state.sCount[nextLine] - state.blkIndent >= 4) { return false; }

      // first character of the second line should be '|', '-', ':',
      // and no other characters are allowed but spaces;
      // basically, this is the equivalent of /^[-:|][-:|\s]*$/ regexp

      pos = state.bMarks[nextLine] + state.tShift[nextLine];
      if (pos >= state.eMarks[nextLine]) { return false; }

      firstCh = state.src.charCodeAt(pos++);
      if (firstCh !== 0x7C/* | */ && firstCh !== 0x2D/* - */ && firstCh !== 0x3A/* : */) { return false; }

      if (pos >= state.eMarks[nextLine]) { return false; }

      secondCh = state.src.charCodeAt(pos++);
      if (secondCh !== 0x7C/* | */ && secondCh !== 0x2D/* - */ && secondCh !== 0x3A/* : */ && !isSpace$a(secondCh)) {
        return false;
      }

      // if first character is '-', then second character must not be a space
      // (due to parsing ambiguity with list)
      if (firstCh === 0x2D/* - */ && isSpace$a(secondCh)) { return false; }

      while (pos < state.eMarks[nextLine]) {
        ch = state.src.charCodeAt(pos);

        if (ch !== 0x7C/* | */ && ch !== 0x2D/* - */ && ch !== 0x3A/* : */ && !isSpace$a(ch)) { return false; }

        pos++;
      }

      lineText = getLine(state, startLine + 1);

      columns = lineText.split('|');
      aligns = [];
      for (i = 0; i < columns.length; i++) {
        t = columns[i].trim();
        if (!t) {
          // allow empty columns before and after table, but not in between columns;
          // e.g. allow ` |---| `, disallow ` ---||--- `
          if (i === 0 || i === columns.length - 1) {
            continue;
          } else {
            return false;
          }
        }

        if (!/^:?-+:?$/.test(t)) { return false; }
        if (t.charCodeAt(t.length - 1) === 0x3A/* : */) {
          aligns.push(t.charCodeAt(0) === 0x3A/* : */ ? 'center' : 'right');
        } else if (t.charCodeAt(0) === 0x3A/* : */) {
          aligns.push('left');
        } else {
          aligns.push('');
        }
      }

      lineText = getLine(state, startLine).trim();
      if (lineText.indexOf('|') === -1) { return false; }
      if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }
      columns = escapedSplit(lineText);
      if (columns.length && columns[0] === '') columns.shift();
      if (columns.length && columns[columns.length - 1] === '') columns.pop();

      // header row will define an amount of columns in the entire table,
      // and align row should be exactly the same (the rest of the rows can differ)
      columnCount = columns.length;
      if (columnCount === 0 || columnCount !== aligns.length) { return false; }

      if (silent) { return true; }

      oldParentType = state.parentType;
      state.parentType = 'table';

      // use 'blockquote' lists for termination because it's
      // the most similar to tables
      terminatorRules = state.md.block.ruler.getRules('blockquote');

      token     = state.push('table_open', 'table', 1);
      token.map = tableLines = [ startLine, 0 ];

      token     = state.push('thead_open', 'thead', 1);
      token.map = [ startLine, startLine + 1 ];

      token     = state.push('tr_open', 'tr', 1);
      token.map = [ startLine, startLine + 1 ];

      for (i = 0; i < columns.length; i++) {
        token          = state.push('th_open', 'th', 1);
        if (aligns[i]) {
          token.attrs  = [ [ 'style', 'text-align:' + aligns[i] ] ];
        }

        token          = state.push('inline', '', 0);
        token.content  = columns[i].trim();
        token.children = [];

        token          = state.push('th_close', 'th', -1);
      }

      token     = state.push('tr_close', 'tr', -1);
      token     = state.push('thead_close', 'thead', -1);

      for (nextLine = startLine + 2; nextLine < endLine; nextLine++) {
        if (state.sCount[nextLine] < state.blkIndent) { break; }

        terminate = false;
        for (i = 0, l = terminatorRules.length; i < l; i++) {
          if (terminatorRules[i](state, nextLine, endLine, true)) {
            terminate = true;
            break;
          }
        }

        if (terminate) { break; }
        lineText = getLine(state, nextLine).trim();
        if (!lineText) { break; }
        if (state.sCount[nextLine] - state.blkIndent >= 4) { break; }
        columns = escapedSplit(lineText);
        if (columns.length && columns[0] === '') columns.shift();
        if (columns.length && columns[columns.length - 1] === '') columns.pop();

        if (nextLine === startLine + 2) {
          token     = state.push('tbody_open', 'tbody', 1);
          token.map = tbodyLines = [ startLine + 2, 0 ];
        }

        token     = state.push('tr_open', 'tr', 1);
        token.map = [ nextLine, nextLine + 1 ];

        for (i = 0; i < columnCount; i++) {
          token          = state.push('td_open', 'td', 1);
          if (aligns[i]) {
            token.attrs  = [ [ 'style', 'text-align:' + aligns[i] ] ];
          }

          token          = state.push('inline', '', 0);
          token.content  = columns[i] ? columns[i].trim() : '';
          token.children = [];

          token          = state.push('td_close', 'td', -1);
        }
        token = state.push('tr_close', 'tr', -1);
      }

      if (tbodyLines) {
        token = state.push('tbody_close', 'tbody', -1);
        tbodyLines[1] = nextLine;
      }

      token = state.push('table_close', 'table', -1);
      tableLines[1] = nextLine;

      state.parentType = oldParentType;
      state.line = nextLine;
      return true;
    };

    // Code block (4 spaces padded)


    var code$2 = function code(state, startLine, endLine/*, silent*/) {
      var nextLine, last, token;

      if (state.sCount[startLine] - state.blkIndent < 4) { return false; }

      last = nextLine = startLine + 1;

      while (nextLine < endLine) {
        if (state.isEmpty(nextLine)) {
          nextLine++;
          continue;
        }

        if (state.sCount[nextLine] - state.blkIndent >= 4) {
          nextLine++;
          last = nextLine;
          continue;
        }
        break;
      }

      state.line = last;

      token         = state.push('code_block', 'code', 0);
      token.content = state.getLines(startLine, last, 4 + state.blkIndent, true);
      token.map     = [ startLine, state.line ];

      return true;
    };

    // fences (``` lang, ~~~ lang)


    var fence = function fence(state, startLine, endLine, silent) {
      var marker, len, params, nextLine, mem, token, markup,
          haveEndMarker = false,
          pos = state.bMarks[startLine] + state.tShift[startLine],
          max = state.eMarks[startLine];

      // if it's indented more than 3 spaces, it should be a code block
      if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }

      if (pos + 3 > max) { return false; }

      marker = state.src.charCodeAt(pos);

      if (marker !== 0x7E/* ~ */ && marker !== 0x60 /* ` */) {
        return false;
      }

      // scan marker length
      mem = pos;
      pos = state.skipChars(pos, marker);

      len = pos - mem;

      if (len < 3) { return false; }

      markup = state.src.slice(mem, pos);
      params = state.src.slice(pos, max);

      if (marker === 0x60 /* ` */) {
        if (params.indexOf(String.fromCharCode(marker)) >= 0) {
          return false;
        }
      }

      // Since start is found, we can report success here in validation mode
      if (silent) { return true; }

      // search end of block
      nextLine = startLine;

      for (;;) {
        nextLine++;
        if (nextLine >= endLine) {
          // unclosed block should be autoclosed by end of document.
          // also block seems to be autoclosed by end of parent
          break;
        }

        pos = mem = state.bMarks[nextLine] + state.tShift[nextLine];
        max = state.eMarks[nextLine];

        if (pos < max && state.sCount[nextLine] < state.blkIndent) {
          // non-empty line with negative indent should stop the list:
          // - ```
          //  test
          break;
        }

        if (state.src.charCodeAt(pos) !== marker) { continue; }

        if (state.sCount[nextLine] - state.blkIndent >= 4) {
          // closing fence should be indented less than 4 spaces
          continue;
        }

        pos = state.skipChars(pos, marker);

        // closing code fence must be at least as long as the opening one
        if (pos - mem < len) { continue; }

        // make sure tail has spaces only
        pos = state.skipSpaces(pos);

        if (pos < max) { continue; }

        haveEndMarker = true;
        // found!
        break;
      }

      // If a fence has heading spaces, they should be removed from its inner block
      len = state.sCount[startLine];

      state.line = nextLine + (haveEndMarker ? 1 : 0);

      token         = state.push('fence', 'code', 0);
      token.info    = params;
      token.content = state.getLines(startLine + 1, nextLine, len, true);
      token.markup  = markup;
      token.map     = [ startLine, state.line ];

      return true;
    };

    var isSpace$9 = utils.isSpace;


    var blockquote = function blockquote(state, startLine, endLine, silent) {
      var adjustTab,
          ch,
          i,
          initial,
          l,
          lastLineEmpty,
          lines,
          nextLine,
          offset,
          oldBMarks,
          oldBSCount,
          oldIndent,
          oldParentType,
          oldSCount,
          oldTShift,
          spaceAfterMarker,
          terminate,
          terminatorRules,
          token,
          isOutdented,
          oldLineMax = state.lineMax,
          pos = state.bMarks[startLine] + state.tShift[startLine],
          max = state.eMarks[startLine];

      // if it's indented more than 3 spaces, it should be a code block
      if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }

      // check the block quote marker
      if (state.src.charCodeAt(pos++) !== 0x3E/* > */) { return false; }

      // we know that it's going to be a valid blockquote,
      // so no point trying to find the end of it in silent mode
      if (silent) { return true; }

      // set offset past spaces and ">"
      initial = offset = state.sCount[startLine] + 1;

      // skip one optional space after '>'
      if (state.src.charCodeAt(pos) === 0x20 /* space */) {
        // ' >   test '
        //     ^ -- position start of line here:
        pos++;
        initial++;
        offset++;
        adjustTab = false;
        spaceAfterMarker = true;
      } else if (state.src.charCodeAt(pos) === 0x09 /* tab */) {
        spaceAfterMarker = true;

        if ((state.bsCount[startLine] + offset) % 4 === 3) {
          // '  >\t  test '
          //       ^ -- position start of line here (tab has width===1)
          pos++;
          initial++;
          offset++;
          adjustTab = false;
        } else {
          // ' >\t  test '
          //    ^ -- position start of line here + shift bsCount slightly
          //         to make extra space appear
          adjustTab = true;
        }
      } else {
        spaceAfterMarker = false;
      }

      oldBMarks = [ state.bMarks[startLine] ];
      state.bMarks[startLine] = pos;

      while (pos < max) {
        ch = state.src.charCodeAt(pos);

        if (isSpace$9(ch)) {
          if (ch === 0x09) {
            offset += 4 - (offset + state.bsCount[startLine] + (adjustTab ? 1 : 0)) % 4;
          } else {
            offset++;
          }
        } else {
          break;
        }

        pos++;
      }

      oldBSCount = [ state.bsCount[startLine] ];
      state.bsCount[startLine] = state.sCount[startLine] + 1 + (spaceAfterMarker ? 1 : 0);

      lastLineEmpty = pos >= max;

      oldSCount = [ state.sCount[startLine] ];
      state.sCount[startLine] = offset - initial;

      oldTShift = [ state.tShift[startLine] ];
      state.tShift[startLine] = pos - state.bMarks[startLine];

      terminatorRules = state.md.block.ruler.getRules('blockquote');

      oldParentType = state.parentType;
      state.parentType = 'blockquote';

      // Search the end of the block
      //
      // Block ends with either:
      //  1. an empty line outside:
      //     ```
      //     > test
      //
      //     ```
      //  2. an empty line inside:
      //     ```
      //     >
      //     test
      //     ```
      //  3. another tag:
      //     ```
      //     > test
      //      - - -
      //     ```
      for (nextLine = startLine + 1; nextLine < endLine; nextLine++) {
        // check if it's outdented, i.e. it's inside list item and indented
        // less than said list item:
        //
        // ```
        // 1. anything
        //    > current blockquote
        // 2. checking this line
        // ```
        isOutdented = state.sCount[nextLine] < state.blkIndent;

        pos = state.bMarks[nextLine] + state.tShift[nextLine];
        max = state.eMarks[nextLine];

        if (pos >= max) {
          // Case 1: line is not inside the blockquote, and this line is empty.
          break;
        }

        if (state.src.charCodeAt(pos++) === 0x3E/* > */ && !isOutdented) {
          // This line is inside the blockquote.

          // set offset past spaces and ">"
          initial = offset = state.sCount[nextLine] + 1;

          // skip one optional space after '>'
          if (state.src.charCodeAt(pos) === 0x20 /* space */) {
            // ' >   test '
            //     ^ -- position start of line here:
            pos++;
            initial++;
            offset++;
            adjustTab = false;
            spaceAfterMarker = true;
          } else if (state.src.charCodeAt(pos) === 0x09 /* tab */) {
            spaceAfterMarker = true;

            if ((state.bsCount[nextLine] + offset) % 4 === 3) {
              // '  >\t  test '
              //       ^ -- position start of line here (tab has width===1)
              pos++;
              initial++;
              offset++;
              adjustTab = false;
            } else {
              // ' >\t  test '
              //    ^ -- position start of line here + shift bsCount slightly
              //         to make extra space appear
              adjustTab = true;
            }
          } else {
            spaceAfterMarker = false;
          }

          oldBMarks.push(state.bMarks[nextLine]);
          state.bMarks[nextLine] = pos;

          while (pos < max) {
            ch = state.src.charCodeAt(pos);

            if (isSpace$9(ch)) {
              if (ch === 0x09) {
                offset += 4 - (offset + state.bsCount[nextLine] + (adjustTab ? 1 : 0)) % 4;
              } else {
                offset++;
              }
            } else {
              break;
            }

            pos++;
          }

          lastLineEmpty = pos >= max;

          oldBSCount.push(state.bsCount[nextLine]);
          state.bsCount[nextLine] = state.sCount[nextLine] + 1 + (spaceAfterMarker ? 1 : 0);

          oldSCount.push(state.sCount[nextLine]);
          state.sCount[nextLine] = offset - initial;

          oldTShift.push(state.tShift[nextLine]);
          state.tShift[nextLine] = pos - state.bMarks[nextLine];
          continue;
        }

        // Case 2: line is not inside the blockquote, and the last line was empty.
        if (lastLineEmpty) { break; }

        // Case 3: another tag found.
        terminate = false;
        for (i = 0, l = terminatorRules.length; i < l; i++) {
          if (terminatorRules[i](state, nextLine, endLine, true)) {
            terminate = true;
            break;
          }
        }

        if (terminate) {
          // Quirk to enforce "hard termination mode" for paragraphs;
          // normally if you call `tokenize(state, startLine, nextLine)`,
          // paragraphs will look below nextLine for paragraph continuation,
          // but if blockquote is terminated by another tag, they shouldn't
          state.lineMax = nextLine;

          if (state.blkIndent !== 0) {
            // state.blkIndent was non-zero, we now set it to zero,
            // so we need to re-calculate all offsets to appear as
            // if indent wasn't changed
            oldBMarks.push(state.bMarks[nextLine]);
            oldBSCount.push(state.bsCount[nextLine]);
            oldTShift.push(state.tShift[nextLine]);
            oldSCount.push(state.sCount[nextLine]);
            state.sCount[nextLine] -= state.blkIndent;
          }

          break;
        }

        oldBMarks.push(state.bMarks[nextLine]);
        oldBSCount.push(state.bsCount[nextLine]);
        oldTShift.push(state.tShift[nextLine]);
        oldSCount.push(state.sCount[nextLine]);

        // A negative indentation means that this is a paragraph continuation
        //
        state.sCount[nextLine] = -1;
      }

      oldIndent = state.blkIndent;
      state.blkIndent = 0;

      token        = state.push('blockquote_open', 'blockquote', 1);
      token.markup = '>';
      token.map    = lines = [ startLine, 0 ];

      state.md.block.tokenize(state, startLine, nextLine);

      token        = state.push('blockquote_close', 'blockquote', -1);
      token.markup = '>';

      state.lineMax = oldLineMax;
      state.parentType = oldParentType;
      lines[1] = state.line;

      // Restore original tShift; this might not be necessary since the parser
      // has already been here, but just to make sure we can do that.
      for (i = 0; i < oldTShift.length; i++) {
        state.bMarks[i + startLine] = oldBMarks[i];
        state.tShift[i + startLine] = oldTShift[i];
        state.sCount[i + startLine] = oldSCount[i];
        state.bsCount[i + startLine] = oldBSCount[i];
      }
      state.blkIndent = oldIndent;

      return true;
    };

    var isSpace$8 = utils.isSpace;


    var hr = function hr(state, startLine, endLine, silent) {
      var marker, cnt, ch, token,
          pos = state.bMarks[startLine] + state.tShift[startLine],
          max = state.eMarks[startLine];

      // if it's indented more than 3 spaces, it should be a code block
      if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }

      marker = state.src.charCodeAt(pos++);

      // Check hr marker
      if (marker !== 0x2A/* * */ &&
          marker !== 0x2D/* - */ &&
          marker !== 0x5F/* _ */) {
        return false;
      }

      // markers can be mixed with spaces, but there should be at least 3 of them

      cnt = 1;
      while (pos < max) {
        ch = state.src.charCodeAt(pos++);
        if (ch !== marker && !isSpace$8(ch)) { return false; }
        if (ch === marker) { cnt++; }
      }

      if (cnt < 3) { return false; }

      if (silent) { return true; }

      state.line = startLine + 1;

      token        = state.push('hr', 'hr', 0);
      token.map    = [ startLine, state.line ];
      token.markup = Array(cnt + 1).join(String.fromCharCode(marker));

      return true;
    };

    var isSpace$7 = utils.isSpace;


    // Search `[-+*][\n ]`, returns next pos after marker on success
    // or -1 on fail.
    function skipBulletListMarker(state, startLine) {
      var marker, pos, max, ch;

      pos = state.bMarks[startLine] + state.tShift[startLine];
      max = state.eMarks[startLine];

      marker = state.src.charCodeAt(pos++);
      // Check bullet
      if (marker !== 0x2A/* * */ &&
          marker !== 0x2D/* - */ &&
          marker !== 0x2B/* + */) {
        return -1;
      }

      if (pos < max) {
        ch = state.src.charCodeAt(pos);

        if (!isSpace$7(ch)) {
          // " -test " - is not a list item
          return -1;
        }
      }

      return pos;
    }

    // Search `\d+[.)][\n ]`, returns next pos after marker on success
    // or -1 on fail.
    function skipOrderedListMarker(state, startLine) {
      var ch,
          start = state.bMarks[startLine] + state.tShift[startLine],
          pos = start,
          max = state.eMarks[startLine];

      // List marker should have at least 2 chars (digit + dot)
      if (pos + 1 >= max) { return -1; }

      ch = state.src.charCodeAt(pos++);

      if (ch < 0x30/* 0 */ || ch > 0x39/* 9 */) { return -1; }

      for (;;) {
        // EOL -> fail
        if (pos >= max) { return -1; }

        ch = state.src.charCodeAt(pos++);

        if (ch >= 0x30/* 0 */ && ch <= 0x39/* 9 */) {

          // List marker should have no more than 9 digits
          // (prevents integer overflow in browsers)
          if (pos - start >= 10) { return -1; }

          continue;
        }

        // found valid marker
        if (ch === 0x29/* ) */ || ch === 0x2e/* . */) {
          break;
        }

        return -1;
      }


      if (pos < max) {
        ch = state.src.charCodeAt(pos);

        if (!isSpace$7(ch)) {
          // " 1.test " - is not a list item
          return -1;
        }
      }
      return pos;
    }

    function markTightParagraphs(state, idx) {
      var i, l,
          level = state.level + 2;

      for (i = idx + 2, l = state.tokens.length - 2; i < l; i++) {
        if (state.tokens[i].level === level && state.tokens[i].type === 'paragraph_open') {
          state.tokens[i + 2].hidden = true;
          state.tokens[i].hidden = true;
          i += 2;
        }
      }
    }


    var list$1 = function list(state, startLine, endLine, silent) {
      var ch,
          contentStart,
          i,
          indent,
          indentAfterMarker,
          initial,
          isOrdered,
          itemLines,
          l,
          listLines,
          listTokIdx,
          markerCharCode,
          markerValue,
          max,
          nextLine,
          offset,
          oldListIndent,
          oldParentType,
          oldSCount,
          oldTShift,
          oldTight,
          pos,
          posAfterMarker,
          prevEmptyEnd,
          start,
          terminate,
          terminatorRules,
          token,
          isTerminatingParagraph = false,
          tight = true;

      // if it's indented more than 3 spaces, it should be a code block
      if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }

      // Special case:
      //  - item 1
      //   - item 2
      //    - item 3
      //     - item 4
      //      - this one is a paragraph continuation
      if (state.listIndent >= 0 &&
          state.sCount[startLine] - state.listIndent >= 4 &&
          state.sCount[startLine] < state.blkIndent) {
        return false;
      }

      // limit conditions when list can interrupt
      // a paragraph (validation mode only)
      if (silent && state.parentType === 'paragraph') {
        // Next list item should still terminate previous list item;
        //
        // This code can fail if plugins use blkIndent as well as lists,
        // but I hope the spec gets fixed long before that happens.
        //
        if (state.tShift[startLine] >= state.blkIndent) {
          isTerminatingParagraph = true;
        }
      }

      // Detect list type and position after marker
      if ((posAfterMarker = skipOrderedListMarker(state, startLine)) >= 0) {
        isOrdered = true;
        start = state.bMarks[startLine] + state.tShift[startLine];
        markerValue = Number(state.src.substr(start, posAfterMarker - start - 1));

        // If we're starting a new ordered list right after
        // a paragraph, it should start with 1.
        if (isTerminatingParagraph && markerValue !== 1) return false;

      } else if ((posAfterMarker = skipBulletListMarker(state, startLine)) >= 0) {
        isOrdered = false;

      } else {
        return false;
      }

      // If we're starting a new unordered list right after
      // a paragraph, first line should not be empty.
      if (isTerminatingParagraph) {
        if (state.skipSpaces(posAfterMarker) >= state.eMarks[startLine]) return false;
      }

      // We should terminate list on style change. Remember first one to compare.
      markerCharCode = state.src.charCodeAt(posAfterMarker - 1);

      // For validation mode we can terminate immediately
      if (silent) { return true; }

      // Start list
      listTokIdx = state.tokens.length;

      if (isOrdered) {
        token       = state.push('ordered_list_open', 'ol', 1);
        if (markerValue !== 1) {
          token.attrs = [ [ 'start', markerValue ] ];
        }

      } else {
        token       = state.push('bullet_list_open', 'ul', 1);
      }

      token.map    = listLines = [ startLine, 0 ];
      token.markup = String.fromCharCode(markerCharCode);

      //
      // Iterate list items
      //

      nextLine = startLine;
      prevEmptyEnd = false;
      terminatorRules = state.md.block.ruler.getRules('list');

      oldParentType = state.parentType;
      state.parentType = 'list';

      while (nextLine < endLine) {
        pos = posAfterMarker;
        max = state.eMarks[nextLine];

        initial = offset = state.sCount[nextLine] + posAfterMarker - (state.bMarks[startLine] + state.tShift[startLine]);

        while (pos < max) {
          ch = state.src.charCodeAt(pos);

          if (ch === 0x09) {
            offset += 4 - (offset + state.bsCount[nextLine]) % 4;
          } else if (ch === 0x20) {
            offset++;
          } else {
            break;
          }

          pos++;
        }

        contentStart = pos;

        if (contentStart >= max) {
          // trimming space in "-    \n  3" case, indent is 1 here
          indentAfterMarker = 1;
        } else {
          indentAfterMarker = offset - initial;
        }

        // If we have more than 4 spaces, the indent is 1
        // (the rest is just indented code block)
        if (indentAfterMarker > 4) { indentAfterMarker = 1; }

        // "  -  test"
        //  ^^^^^ - calculating total length of this thing
        indent = initial + indentAfterMarker;

        // Run subparser & write tokens
        token        = state.push('list_item_open', 'li', 1);
        token.markup = String.fromCharCode(markerCharCode);
        token.map    = itemLines = [ startLine, 0 ];

        // change current state, then restore it after parser subcall
        oldTight = state.tight;
        oldTShift = state.tShift[startLine];
        oldSCount = state.sCount[startLine];

        //  - example list
        // ^ listIndent position will be here
        //   ^ blkIndent position will be here
        //
        oldListIndent = state.listIndent;
        state.listIndent = state.blkIndent;
        state.blkIndent = indent;

        state.tight = true;
        state.tShift[startLine] = contentStart - state.bMarks[startLine];
        state.sCount[startLine] = offset;

        if (contentStart >= max && state.isEmpty(startLine + 1)) {
          // workaround for this case
          // (list item is empty, list terminates before "foo"):
          // ~~~~~~~~
          //   -
          //
          //     foo
          // ~~~~~~~~
          state.line = Math.min(state.line + 2, endLine);
        } else {
          state.md.block.tokenize(state, startLine, endLine, true);
        }

        // If any of list item is tight, mark list as tight
        if (!state.tight || prevEmptyEnd) {
          tight = false;
        }
        // Item become loose if finish with empty line,
        // but we should filter last element, because it means list finish
        prevEmptyEnd = (state.line - startLine) > 1 && state.isEmpty(state.line - 1);

        state.blkIndent = state.listIndent;
        state.listIndent = oldListIndent;
        state.tShift[startLine] = oldTShift;
        state.sCount[startLine] = oldSCount;
        state.tight = oldTight;

        token        = state.push('list_item_close', 'li', -1);
        token.markup = String.fromCharCode(markerCharCode);

        nextLine = startLine = state.line;
        itemLines[1] = nextLine;
        contentStart = state.bMarks[startLine];

        if (nextLine >= endLine) { break; }

        //
        // Try to check if list is terminated or continued.
        //
        if (state.sCount[nextLine] < state.blkIndent) { break; }

        // if it's indented more than 3 spaces, it should be a code block
        if (state.sCount[startLine] - state.blkIndent >= 4) { break; }

        // fail if terminating block found
        terminate = false;
        for (i = 0, l = terminatorRules.length; i < l; i++) {
          if (terminatorRules[i](state, nextLine, endLine, true)) {
            terminate = true;
            break;
          }
        }
        if (terminate) { break; }

        // fail if list has another type
        if (isOrdered) {
          posAfterMarker = skipOrderedListMarker(state, nextLine);
          if (posAfterMarker < 0) { break; }
        } else {
          posAfterMarker = skipBulletListMarker(state, nextLine);
          if (posAfterMarker < 0) { break; }
        }

        if (markerCharCode !== state.src.charCodeAt(posAfterMarker - 1)) { break; }
      }

      // Finalize list
      if (isOrdered) {
        token = state.push('ordered_list_close', 'ol', -1);
      } else {
        token = state.push('bullet_list_close', 'ul', -1);
      }
      token.markup = String.fromCharCode(markerCharCode);

      listLines[1] = nextLine;
      state.line = nextLine;

      state.parentType = oldParentType;

      // mark paragraphs tight if needed
      if (tight) {
        markTightParagraphs(state, listTokIdx);
      }

      return true;
    };

    var normalizeReference$3   = utils.normalizeReference;
    var isSpace$6              = utils.isSpace;


    var reference = function reference(state, startLine, _endLine, silent) {
      var ch,
          destEndPos,
          destEndLineNo,
          endLine,
          href,
          i,
          l,
          label,
          labelEnd,
          oldParentType,
          res,
          start,
          str,
          terminate,
          terminatorRules,
          title,
          lines = 0,
          pos = state.bMarks[startLine] + state.tShift[startLine],
          max = state.eMarks[startLine],
          nextLine = startLine + 1;

      // if it's indented more than 3 spaces, it should be a code block
      if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }

      if (state.src.charCodeAt(pos) !== 0x5B/* [ */) { return false; }

      // Simple check to quickly interrupt scan on [link](url) at the start of line.
      // Can be useful on practice: https://github.com/markdown-it/markdown-it/issues/54
      while (++pos < max) {
        if (state.src.charCodeAt(pos) === 0x5D /* ] */ &&
            state.src.charCodeAt(pos - 1) !== 0x5C/* \ */) {
          if (pos + 1 === max) { return false; }
          if (state.src.charCodeAt(pos + 1) !== 0x3A/* : */) { return false; }
          break;
        }
      }

      endLine = state.lineMax;

      // jump line-by-line until empty one or EOF
      terminatorRules = state.md.block.ruler.getRules('reference');

      oldParentType = state.parentType;
      state.parentType = 'reference';

      for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {
        // this would be a code block normally, but after paragraph
        // it's considered a lazy continuation regardless of what's there
        if (state.sCount[nextLine] - state.blkIndent > 3) { continue; }

        // quirk for blockquotes, this line should already be checked by that rule
        if (state.sCount[nextLine] < 0) { continue; }

        // Some tags can terminate paragraph without empty line.
        terminate = false;
        for (i = 0, l = terminatorRules.length; i < l; i++) {
          if (terminatorRules[i](state, nextLine, endLine, true)) {
            terminate = true;
            break;
          }
        }
        if (terminate) { break; }
      }

      str = state.getLines(startLine, nextLine, state.blkIndent, false).trim();
      max = str.length;

      for (pos = 1; pos < max; pos++) {
        ch = str.charCodeAt(pos);
        if (ch === 0x5B /* [ */) {
          return false;
        } else if (ch === 0x5D /* ] */) {
          labelEnd = pos;
          break;
        } else if (ch === 0x0A /* \n */) {
          lines++;
        } else if (ch === 0x5C /* \ */) {
          pos++;
          if (pos < max && str.charCodeAt(pos) === 0x0A) {
            lines++;
          }
        }
      }

      if (labelEnd < 0 || str.charCodeAt(labelEnd + 1) !== 0x3A/* : */) { return false; }

      // [label]:   destination   'title'
      //         ^^^ skip optional whitespace here
      for (pos = labelEnd + 2; pos < max; pos++) {
        ch = str.charCodeAt(pos);
        if (ch === 0x0A) {
          lines++;
        } else if (isSpace$6(ch)) ; else {
          break;
        }
      }

      // [label]:   destination   'title'
      //            ^^^^^^^^^^^ parse this
      res = state.md.helpers.parseLinkDestination(str, pos, max);
      if (!res.ok) { return false; }

      href = state.md.normalizeLink(res.str);
      if (!state.md.validateLink(href)) { return false; }

      pos = res.pos;
      lines += res.lines;

      // save cursor state, we could require to rollback later
      destEndPos = pos;
      destEndLineNo = lines;

      // [label]:   destination   'title'
      //                       ^^^ skipping those spaces
      start = pos;
      for (; pos < max; pos++) {
        ch = str.charCodeAt(pos);
        if (ch === 0x0A) {
          lines++;
        } else if (isSpace$6(ch)) ; else {
          break;
        }
      }

      // [label]:   destination   'title'
      //                          ^^^^^^^ parse this
      res = state.md.helpers.parseLinkTitle(str, pos, max);
      if (pos < max && start !== pos && res.ok) {
        title = res.str;
        pos = res.pos;
        lines += res.lines;
      } else {
        title = '';
        pos = destEndPos;
        lines = destEndLineNo;
      }

      // skip trailing spaces until the rest of the line
      while (pos < max) {
        ch = str.charCodeAt(pos);
        if (!isSpace$6(ch)) { break; }
        pos++;
      }

      if (pos < max && str.charCodeAt(pos) !== 0x0A) {
        if (title) {
          // garbage at the end of the line after title,
          // but it could still be a valid reference if we roll back
          title = '';
          pos = destEndPos;
          lines = destEndLineNo;
          while (pos < max) {
            ch = str.charCodeAt(pos);
            if (!isSpace$6(ch)) { break; }
            pos++;
          }
        }
      }

      if (pos < max && str.charCodeAt(pos) !== 0x0A) {
        // garbage at the end of the line
        return false;
      }

      label = normalizeReference$3(str.slice(1, labelEnd));
      if (!label) {
        // CommonMark 0.20 disallows empty labels
        return false;
      }

      // Reference can not terminate anything. This check is for safety only.
      /*istanbul ignore if*/
      if (silent) { return true; }

      if (typeof state.env.references === 'undefined') {
        state.env.references = {};
      }
      if (typeof state.env.references[label] === 'undefined') {
        state.env.references[label] = { title: title, href: href };
      }

      state.parentType = oldParentType;

      state.line = startLine + lines + 1;
      return true;
    };

    // List of valid html blocks names, accorting to commonmark spec


    var html_blocks = [
      'address',
      'article',
      'aside',
      'base',
      'basefont',
      'blockquote',
      'body',
      'caption',
      'center',
      'col',
      'colgroup',
      'dd',
      'details',
      'dialog',
      'dir',
      'div',
      'dl',
      'dt',
      'fieldset',
      'figcaption',
      'figure',
      'footer',
      'form',
      'frame',
      'frameset',
      'h1',
      'h2',
      'h3',
      'h4',
      'h5',
      'h6',
      'head',
      'header',
      'hr',
      'html',
      'iframe',
      'legend',
      'li',
      'link',
      'main',
      'menu',
      'menuitem',
      'nav',
      'noframes',
      'ol',
      'optgroup',
      'option',
      'p',
      'param',
      'section',
      'source',
      'summary',
      'table',
      'tbody',
      'td',
      'tfoot',
      'th',
      'thead',
      'title',
      'tr',
      'track',
      'ul'
    ];

    // Regexps to match html elements

    var attr_name     = '[a-zA-Z_:][a-zA-Z0-9:._-]*';

    var unquoted      = '[^"\'=<>`\\x00-\\x20]+';
    var single_quoted = "'[^']*'";
    var double_quoted = '"[^"]*"';

    var attr_value  = '(?:' + unquoted + '|' + single_quoted + '|' + double_quoted + ')';

    var attribute   = '(?:\\s+' + attr_name + '(?:\\s*=\\s*' + attr_value + ')?)';

    var open_tag    = '<[A-Za-z][A-Za-z0-9\\-]*' + attribute + '*\\s*\\/?>';

    var close_tag   = '<\\/[A-Za-z][A-Za-z0-9\\-]*\\s*>';
    var comment     = '<!---->|<!--(?:-?[^>-])(?:-?[^-])*-->';
    var processing  = '<[?][\\s\\S]*?[?]>';
    var declaration = '<![A-Z]+\\s+[^>]*>';
    var cdata       = '<!\\[CDATA\\[[\\s\\S]*?\\]\\]>';

    var HTML_TAG_RE$1 = new RegExp('^(?:' + open_tag + '|' + close_tag + '|' + comment +
                            '|' + processing + '|' + declaration + '|' + cdata + ')');
    var HTML_OPEN_CLOSE_TAG_RE$1 = new RegExp('^(?:' + open_tag + '|' + close_tag + ')');

    var HTML_TAG_RE_1 = HTML_TAG_RE$1;
    var HTML_OPEN_CLOSE_TAG_RE_1 = HTML_OPEN_CLOSE_TAG_RE$1;

    var html_re = {
    	HTML_TAG_RE: HTML_TAG_RE_1,
    	HTML_OPEN_CLOSE_TAG_RE: HTML_OPEN_CLOSE_TAG_RE_1
    };

    var HTML_OPEN_CLOSE_TAG_RE = html_re.HTML_OPEN_CLOSE_TAG_RE;

    // An array of opening and corresponding closing sequences for html tags,
    // last argument defines whether it can terminate a paragraph or not
    //
    var HTML_SEQUENCES = [
      [ /^<(script|pre|style|textarea)(?=(\s|>|$))/i, /<\/(script|pre|style|textarea)>/i, true ],
      [ /^<!--/,        /-->/,   true ],
      [ /^<\?/,         /\?>/,   true ],
      [ /^<![A-Z]/,     />/,     true ],
      [ /^<!\[CDATA\[/, /\]\]>/, true ],
      [ new RegExp('^</?(' + html_blocks.join('|') + ')(?=(\\s|/?>|$))', 'i'), /^$/, true ],
      [ new RegExp(HTML_OPEN_CLOSE_TAG_RE.source + '\\s*$'),  /^$/, false ]
    ];


    var html_block = function html_block(state, startLine, endLine, silent) {
      var i, nextLine, token, lineText,
          pos = state.bMarks[startLine] + state.tShift[startLine],
          max = state.eMarks[startLine];

      // if it's indented more than 3 spaces, it should be a code block
      if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }

      if (!state.md.options.html) { return false; }

      if (state.src.charCodeAt(pos) !== 0x3C/* < */) { return false; }

      lineText = state.src.slice(pos, max);

      for (i = 0; i < HTML_SEQUENCES.length; i++) {
        if (HTML_SEQUENCES[i][0].test(lineText)) { break; }
      }

      if (i === HTML_SEQUENCES.length) { return false; }

      if (silent) {
        // true if this sequence can be a terminator, false otherwise
        return HTML_SEQUENCES[i][2];
      }

      nextLine = startLine + 1;

      // If we are here - we detected HTML block.
      // Let's roll down till block end.
      if (!HTML_SEQUENCES[i][1].test(lineText)) {
        for (; nextLine < endLine; nextLine++) {
          if (state.sCount[nextLine] < state.blkIndent) { break; }

          pos = state.bMarks[nextLine] + state.tShift[nextLine];
          max = state.eMarks[nextLine];
          lineText = state.src.slice(pos, max);

          if (HTML_SEQUENCES[i][1].test(lineText)) {
            if (lineText.length !== 0) { nextLine++; }
            break;
          }
        }
      }

      state.line = nextLine;

      token         = state.push('html_block', '', 0);
      token.map     = [ startLine, nextLine ];
      token.content = state.getLines(startLine, nextLine, state.blkIndent, true);

      return true;
    };

    var isSpace$5 = utils.isSpace;


    var heading$2 = function heading(state, startLine, endLine, silent) {
      var ch, level, tmp, token,
          pos = state.bMarks[startLine] + state.tShift[startLine],
          max = state.eMarks[startLine];

      // if it's indented more than 3 spaces, it should be a code block
      if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }

      ch  = state.src.charCodeAt(pos);

      if (ch !== 0x23/* # */ || pos >= max) { return false; }

      // count heading level
      level = 1;
      ch = state.src.charCodeAt(++pos);
      while (ch === 0x23/* # */ && pos < max && level <= 6) {
        level++;
        ch = state.src.charCodeAt(++pos);
      }

      if (level > 6 || (pos < max && !isSpace$5(ch))) { return false; }

      if (silent) { return true; }

      // Let's cut tails like '    ###  ' from the end of string

      max = state.skipSpacesBack(max, pos);
      tmp = state.skipCharsBack(max, 0x23, pos); // #
      if (tmp > pos && isSpace$5(state.src.charCodeAt(tmp - 1))) {
        max = tmp;
      }

      state.line = startLine + 1;

      token        = state.push('heading_open', 'h' + String(level), 1);
      token.markup = '########'.slice(0, level);
      token.map    = [ startLine, state.line ];

      token          = state.push('inline', '', 0);
      token.content  = state.src.slice(pos, max).trim();
      token.map      = [ startLine, state.line ];
      token.children = [];

      token        = state.push('heading_close', 'h' + String(level), -1);
      token.markup = '########'.slice(0, level);

      return true;
    };

    // lheading (---, ===)


    var lheading = function lheading(state, startLine, endLine/*, silent*/) {
      var content, terminate, i, l, token, pos, max, level, marker,
          nextLine = startLine + 1, oldParentType,
          terminatorRules = state.md.block.ruler.getRules('paragraph');

      // if it's indented more than 3 spaces, it should be a code block
      if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }

      oldParentType = state.parentType;
      state.parentType = 'paragraph'; // use paragraph to match terminatorRules

      // jump line-by-line until empty one or EOF
      for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {
        // this would be a code block normally, but after paragraph
        // it's considered a lazy continuation regardless of what's there
        if (state.sCount[nextLine] - state.blkIndent > 3) { continue; }

        //
        // Check for underline in setext header
        //
        if (state.sCount[nextLine] >= state.blkIndent) {
          pos = state.bMarks[nextLine] + state.tShift[nextLine];
          max = state.eMarks[nextLine];

          if (pos < max) {
            marker = state.src.charCodeAt(pos);

            if (marker === 0x2D/* - */ || marker === 0x3D/* = */) {
              pos = state.skipChars(pos, marker);
              pos = state.skipSpaces(pos);

              if (pos >= max) {
                level = (marker === 0x3D/* = */ ? 1 : 2);
                break;
              }
            }
          }
        }

        // quirk for blockquotes, this line should already be checked by that rule
        if (state.sCount[nextLine] < 0) { continue; }

        // Some tags can terminate paragraph without empty line.
        terminate = false;
        for (i = 0, l = terminatorRules.length; i < l; i++) {
          if (terminatorRules[i](state, nextLine, endLine, true)) {
            terminate = true;
            break;
          }
        }
        if (terminate) { break; }
      }

      if (!level) {
        // Didn't find valid underline
        return false;
      }

      content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();

      state.line = nextLine + 1;

      token          = state.push('heading_open', 'h' + String(level), 1);
      token.markup   = String.fromCharCode(marker);
      token.map      = [ startLine, state.line ];

      token          = state.push('inline', '', 0);
      token.content  = content;
      token.map      = [ startLine, state.line - 1 ];
      token.children = [];

      token          = state.push('heading_close', 'h' + String(level), -1);
      token.markup   = String.fromCharCode(marker);

      state.parentType = oldParentType;

      return true;
    };

    // Paragraph


    var paragraph$1 = function paragraph(state, startLine/*, endLine*/) {
      var content, terminate, i, l, token, oldParentType,
          nextLine = startLine + 1,
          terminatorRules = state.md.block.ruler.getRules('paragraph'),
          endLine = state.lineMax;

      oldParentType = state.parentType;
      state.parentType = 'paragraph';

      // jump line-by-line until empty one or EOF
      for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {
        // this would be a code block normally, but after paragraph
        // it's considered a lazy continuation regardless of what's there
        if (state.sCount[nextLine] - state.blkIndent > 3) { continue; }

        // quirk for blockquotes, this line should already be checked by that rule
        if (state.sCount[nextLine] < 0) { continue; }

        // Some tags can terminate paragraph without empty line.
        terminate = false;
        for (i = 0, l = terminatorRules.length; i < l; i++) {
          if (terminatorRules[i](state, nextLine, endLine, true)) {
            terminate = true;
            break;
          }
        }
        if (terminate) { break; }
      }

      content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();

      state.line = nextLine;

      token          = state.push('paragraph_open', 'p', 1);
      token.map      = [ startLine, state.line ];

      token          = state.push('inline', '', 0);
      token.content  = content;
      token.map      = [ startLine, state.line ];
      token.children = [];

      token          = state.push('paragraph_close', 'p', -1);

      state.parentType = oldParentType;

      return true;
    };

    var isSpace$4 = utils.isSpace;


    function StateBlock(src, md, env, tokens) {
      var ch, s, start, pos, len, indent, offset, indent_found;

      this.src = src;

      // link to parser instance
      this.md     = md;

      this.env = env;

      //
      // Internal state vartiables
      //

      this.tokens = tokens;

      this.bMarks = [];  // line begin offsets for fast jumps
      this.eMarks = [];  // line end offsets for fast jumps
      this.tShift = [];  // offsets of the first non-space characters (tabs not expanded)
      this.sCount = [];  // indents for each line (tabs expanded)

      // An amount of virtual spaces (tabs expanded) between beginning
      // of each line (bMarks) and real beginning of that line.
      //
      // It exists only as a hack because blockquotes override bMarks
      // losing information in the process.
      //
      // It's used only when expanding tabs, you can think about it as
      // an initial tab length, e.g. bsCount=21 applied to string `\t123`
      // means first tab should be expanded to 4-21%4 === 3 spaces.
      //
      this.bsCount = [];

      // block parser variables
      this.blkIndent  = 0; // required block content indent (for example, if we are
                           // inside a list, it would be positioned after list marker)
      this.line       = 0; // line index in src
      this.lineMax    = 0; // lines count
      this.tight      = false;  // loose/tight mode for lists
      this.ddIndent   = -1; // indent of the current dd block (-1 if there isn't any)
      this.listIndent = -1; // indent of the current list block (-1 if there isn't any)

      // can be 'blockquote', 'list', 'root', 'paragraph' or 'reference'
      // used in lists to determine if they interrupt a paragraph
      this.parentType = 'root';

      this.level = 0;

      // renderer
      this.result = '';

      // Create caches
      // Generate markers.
      s = this.src;
      indent_found = false;

      for (start = pos = indent = offset = 0, len = s.length; pos < len; pos++) {
        ch = s.charCodeAt(pos);

        if (!indent_found) {
          if (isSpace$4(ch)) {
            indent++;

            if (ch === 0x09) {
              offset += 4 - offset % 4;
            } else {
              offset++;
            }
            continue;
          } else {
            indent_found = true;
          }
        }

        if (ch === 0x0A || pos === len - 1) {
          if (ch !== 0x0A) { pos++; }
          this.bMarks.push(start);
          this.eMarks.push(pos);
          this.tShift.push(indent);
          this.sCount.push(offset);
          this.bsCount.push(0);

          indent_found = false;
          indent = 0;
          offset = 0;
          start = pos + 1;
        }
      }

      // Push fake entry to simplify cache bounds checks
      this.bMarks.push(s.length);
      this.eMarks.push(s.length);
      this.tShift.push(0);
      this.sCount.push(0);
      this.bsCount.push(0);

      this.lineMax = this.bMarks.length - 1; // don't count last fake line
    }

    // Push new token to "stream".
    //
    StateBlock.prototype.push = function (type, tag, nesting) {
      var token$1 = new token(type, tag, nesting);
      token$1.block = true;

      if (nesting < 0) this.level--; // closing tag
      token$1.level = this.level;
      if (nesting > 0) this.level++; // opening tag

      this.tokens.push(token$1);
      return token$1;
    };

    StateBlock.prototype.isEmpty = function isEmpty(line) {
      return this.bMarks[line] + this.tShift[line] >= this.eMarks[line];
    };

    StateBlock.prototype.skipEmptyLines = function skipEmptyLines(from) {
      for (var max = this.lineMax; from < max; from++) {
        if (this.bMarks[from] + this.tShift[from] < this.eMarks[from]) {
          break;
        }
      }
      return from;
    };

    // Skip spaces from given position.
    StateBlock.prototype.skipSpaces = function skipSpaces(pos) {
      var ch;

      for (var max = this.src.length; pos < max; pos++) {
        ch = this.src.charCodeAt(pos);
        if (!isSpace$4(ch)) { break; }
      }
      return pos;
    };

    // Skip spaces from given position in reverse.
    StateBlock.prototype.skipSpacesBack = function skipSpacesBack(pos, min) {
      if (pos <= min) { return pos; }

      while (pos > min) {
        if (!isSpace$4(this.src.charCodeAt(--pos))) { return pos + 1; }
      }
      return pos;
    };

    // Skip char codes from given position
    StateBlock.prototype.skipChars = function skipChars(pos, code) {
      for (var max = this.src.length; pos < max; pos++) {
        if (this.src.charCodeAt(pos) !== code) { break; }
      }
      return pos;
    };

    // Skip char codes reverse from given position - 1
    StateBlock.prototype.skipCharsBack = function skipCharsBack(pos, code, min) {
      if (pos <= min) { return pos; }

      while (pos > min) {
        if (code !== this.src.charCodeAt(--pos)) { return pos + 1; }
      }
      return pos;
    };

    // cut lines range from source.
    StateBlock.prototype.getLines = function getLines(begin, end, indent, keepLastLF) {
      var i, lineIndent, ch, first, last, queue, lineStart,
          line = begin;

      if (begin >= end) {
        return '';
      }

      queue = new Array(end - begin);

      for (i = 0; line < end; line++, i++) {
        lineIndent = 0;
        lineStart = first = this.bMarks[line];

        if (line + 1 < end || keepLastLF) {
          // No need for bounds check because we have fake entry on tail.
          last = this.eMarks[line] + 1;
        } else {
          last = this.eMarks[line];
        }

        while (first < last && lineIndent < indent) {
          ch = this.src.charCodeAt(first);

          if (isSpace$4(ch)) {
            if (ch === 0x09) {
              lineIndent += 4 - (lineIndent + this.bsCount[line]) % 4;
            } else {
              lineIndent++;
            }
          } else if (first - lineStart < this.tShift[line]) {
            // patched tShift masked characters to look like spaces (blockquotes, list markers)
            lineIndent++;
          } else {
            break;
          }

          first++;
        }

        if (lineIndent > indent) {
          // partially expanding tabs in code blocks, e.g '\t\tfoobar'
          // with indent=2 becomes '  \tfoobar'
          queue[i] = new Array(lineIndent - indent + 1).join(' ') + this.src.slice(first, last);
        } else {
          queue[i] = this.src.slice(first, last);
        }
      }

      return queue.join('');
    };

    // re-export Token class to use in block rules
    StateBlock.prototype.Token = token;


    var state_block = StateBlock;

    /** internal
     * class ParserBlock
     *
     * Block-level tokenizer.
     **/





    var _rules$1 = [
      // First 2 params - rule name & source. Secondary array - list of rules,
      // which can be terminated by this one.
      [ 'table',      table$1,      [ 'paragraph', 'reference' ] ],
      [ 'code',       code$2 ],
      [ 'fence',      fence,      [ 'paragraph', 'reference', 'blockquote', 'list' ] ],
      [ 'blockquote', blockquote, [ 'paragraph', 'reference', 'blockquote', 'list' ] ],
      [ 'hr',         hr,         [ 'paragraph', 'reference', 'blockquote', 'list' ] ],
      [ 'list',       list$1,       [ 'paragraph', 'reference', 'blockquote' ] ],
      [ 'reference',  reference ],
      [ 'html_block', html_block, [ 'paragraph', 'reference', 'blockquote' ] ],
      [ 'heading',    heading$2,    [ 'paragraph', 'reference', 'blockquote' ] ],
      [ 'lheading',   lheading ],
      [ 'paragraph',  paragraph$1 ]
    ];


    /**
     * new ParserBlock()
     **/
    function ParserBlock() {
      /**
       * ParserBlock#ruler -> Ruler
       *
       * [[Ruler]] instance. Keep configuration of block rules.
       **/
      this.ruler = new ruler();

      for (var i = 0; i < _rules$1.length; i++) {
        this.ruler.push(_rules$1[i][0], _rules$1[i][1], { alt: (_rules$1[i][2] || []).slice() });
      }
    }


    // Generate tokens for input range
    //
    ParserBlock.prototype.tokenize = function (state, startLine, endLine) {
      var ok, i,
          rules = this.ruler.getRules(''),
          len = rules.length,
          line = startLine,
          hasEmptyLines = false,
          maxNesting = state.md.options.maxNesting;

      while (line < endLine) {
        state.line = line = state.skipEmptyLines(line);
        if (line >= endLine) { break; }

        // Termination condition for nested calls.
        // Nested calls currently used for blockquotes & lists
        if (state.sCount[line] < state.blkIndent) { break; }

        // If nesting level exceeded - skip tail to the end. That's not ordinary
        // situation and we should not care about content.
        if (state.level >= maxNesting) {
          state.line = endLine;
          break;
        }

        // Try all possible rules.
        // On success, rule should:
        //
        // - update `state.line`
        // - update `state.tokens`
        // - return true

        for (i = 0; i < len; i++) {
          ok = rules[i](state, line, endLine, false);
          if (ok) { break; }
        }

        // set state.tight if we had an empty line before current tag
        // i.e. latest empty line should not count
        state.tight = !hasEmptyLines;

        // paragraph might "eat" one newline after it in nested lists
        if (state.isEmpty(state.line - 1)) {
          hasEmptyLines = true;
        }

        line = state.line;

        if (line < endLine && state.isEmpty(line)) {
          hasEmptyLines = true;
          line++;
          state.line = line;
        }
      }
    };


    /**
     * ParserBlock.parse(str, md, env, outTokens)
     *
     * Process input string and push block tokens into `outTokens`
     **/
    ParserBlock.prototype.parse = function (src, md, env, outTokens) {
      var state;

      if (!src) { return; }

      state = new this.State(src, md, env, outTokens);

      this.tokenize(state, state.line, state.lineMax);
    };


    ParserBlock.prototype.State = state_block;


    var parser_block = ParserBlock;

    // Skip text characters for text token, place those to pending buffer


    // Rule to skip pure text
    // '{}$%@~+=:' reserved for extentions

    // !, ", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \, ], ^, _, `, {, |, }, or ~

    // !!!! Don't confuse with "Markdown ASCII Punctuation" chars
    // http://spec.commonmark.org/0.15/#ascii-punctuation-character
    function isTerminatorChar(ch) {
      switch (ch) {
        case 0x0A/* \n */:
        case 0x21/* ! */:
        case 0x23/* # */:
        case 0x24/* $ */:
        case 0x25/* % */:
        case 0x26/* & */:
        case 0x2A/* * */:
        case 0x2B/* + */:
        case 0x2D/* - */:
        case 0x3A/* : */:
        case 0x3C/* < */:
        case 0x3D/* = */:
        case 0x3E/* > */:
        case 0x40/* @ */:
        case 0x5B/* [ */:
        case 0x5C/* \ */:
        case 0x5D/* ] */:
        case 0x5E/* ^ */:
        case 0x5F/* _ */:
        case 0x60/* ` */:
        case 0x7B/* { */:
        case 0x7D/* } */:
        case 0x7E/* ~ */:
          return true;
        default:
          return false;
      }
    }

    var text$1 = function text(state, silent) {
      var pos = state.pos;

      while (pos < state.posMax && !isTerminatorChar(state.src.charCodeAt(pos))) {
        pos++;
      }

      if (pos === state.pos) { return false; }

      if (!silent) { state.pending += state.src.slice(state.pos, pos); }

      state.pos = pos;

      return true;
    };

    var isSpace$3 = utils.isSpace;


    var newline = function newline(state, silent) {
      var pmax, max, pos = state.pos;

      if (state.src.charCodeAt(pos) !== 0x0A/* \n */) { return false; }

      pmax = state.pending.length - 1;
      max = state.posMax;

      // '  \n' -> hardbreak
      // Lookup in pending chars is bad practice! Don't copy to other rules!
      // Pending string is stored in concat mode, indexed lookups will cause
      // convertion to flat mode.
      if (!silent) {
        if (pmax >= 0 && state.pending.charCodeAt(pmax) === 0x20) {
          if (pmax >= 1 && state.pending.charCodeAt(pmax - 1) === 0x20) {
            state.pending = state.pending.replace(/ +$/, '');
            state.push('hardbreak', 'br', 0);
          } else {
            state.pending = state.pending.slice(0, -1);
            state.push('softbreak', 'br', 0);
          }

        } else {
          state.push('softbreak', 'br', 0);
        }
      }

      pos++;

      // skip heading spaces for next line
      while (pos < max && isSpace$3(state.src.charCodeAt(pos))) { pos++; }

      state.pos = pos;
      return true;
    };

    var isSpace$2 = utils.isSpace;

    var ESCAPED = [];

    for (var i$2 = 0; i$2 < 256; i$2++) { ESCAPED.push(0); }

    '\\!"#$%&\'()*+,./:;<=>?@[]^_`{|}~-'
      .split('').forEach(function (ch) { ESCAPED[ch.charCodeAt(0)] = 1; });


    var _escape = function escape(state, silent) {
      var ch, pos = state.pos, max = state.posMax;

      if (state.src.charCodeAt(pos) !== 0x5C/* \ */) { return false; }

      pos++;

      if (pos < max) {
        ch = state.src.charCodeAt(pos);

        if (ch < 256 && ESCAPED[ch] !== 0) {
          if (!silent) { state.pending += state.src[pos]; }
          state.pos += 2;
          return true;
        }

        if (ch === 0x0A) {
          if (!silent) {
            state.push('hardbreak', 'br', 0);
          }

          pos++;
          // skip leading whitespaces from next line
          while (pos < max) {
            ch = state.src.charCodeAt(pos);
            if (!isSpace$2(ch)) { break; }
            pos++;
          }

          state.pos = pos;
          return true;
        }
      }

      if (!silent) { state.pending += '\\'; }
      state.pos++;
      return true;
    };

    // Parse backticks


    var backticks = function backtick(state, silent) {
      var start, max, marker, token, matchStart, matchEnd, openerLength, closerLength,
          pos = state.pos,
          ch = state.src.charCodeAt(pos);

      if (ch !== 0x60/* ` */) { return false; }

      start = pos;
      pos++;
      max = state.posMax;

      // scan marker length
      while (pos < max && state.src.charCodeAt(pos) === 0x60/* ` */) { pos++; }

      marker = state.src.slice(start, pos);
      openerLength = marker.length;

      if (state.backticksScanned && (state.backticks[openerLength] || 0) <= start) {
        if (!silent) state.pending += marker;
        state.pos += openerLength;
        return true;
      }

      matchStart = matchEnd = pos;

      // Nothing found in the cache, scan until the end of the line (or until marker is found)
      while ((matchStart = state.src.indexOf('`', matchEnd)) !== -1) {
        matchEnd = matchStart + 1;

        // scan marker length
        while (matchEnd < max && state.src.charCodeAt(matchEnd) === 0x60/* ` */) { matchEnd++; }

        closerLength = matchEnd - matchStart;

        if (closerLength === openerLength) {
          // Found matching closer length.
          if (!silent) {
            token     = state.push('code_inline', 'code', 0);
            token.markup  = marker;
            token.content = state.src.slice(pos, matchStart)
              .replace(/\n/g, ' ')
              .replace(/^ (.+) $/, '$1');
          }
          state.pos = matchEnd;
          return true;
        }

        // Some different length found, put it in cache as upper limit of where closer can be found
        state.backticks[closerLength] = matchStart;
      }

      // Scanned through the end, didn't find anything
      state.backticksScanned = true;

      if (!silent) state.pending += marker;
      state.pos += openerLength;
      return true;
    };

    // ~~strike through~~


    // Insert each marker as a separate text token, and add it to delimiter list
    //
    var tokenize$1 = function strikethrough(state, silent) {
      var i, scanned, token, len, ch,
          start = state.pos,
          marker = state.src.charCodeAt(start);

      if (silent) { return false; }

      if (marker !== 0x7E/* ~ */) { return false; }

      scanned = state.scanDelims(state.pos, true);
      len = scanned.length;
      ch = String.fromCharCode(marker);

      if (len < 2) { return false; }

      if (len % 2) {
        token         = state.push('text', '', 0);
        token.content = ch;
        len--;
      }

      for (i = 0; i < len; i += 2) {
        token         = state.push('text', '', 0);
        token.content = ch + ch;

        state.delimiters.push({
          marker: marker,
          length: 0,     // disable "rule of 3" length checks meant for emphasis
          jump:   i / 2, // for `~~` 1 marker = 2 characters
          token:  state.tokens.length - 1,
          end:    -1,
          open:   scanned.can_open,
          close:  scanned.can_close
        });
      }

      state.pos += scanned.length;

      return true;
    };


    function postProcess$1(state, delimiters) {
      var i, j,
          startDelim,
          endDelim,
          token,
          loneMarkers = [],
          max = delimiters.length;

      for (i = 0; i < max; i++) {
        startDelim = delimiters[i];

        if (startDelim.marker !== 0x7E/* ~ */) {
          continue;
        }

        if (startDelim.end === -1) {
          continue;
        }

        endDelim = delimiters[startDelim.end];

        token         = state.tokens[startDelim.token];
        token.type    = 's_open';
        token.tag     = 's';
        token.nesting = 1;
        token.markup  = '~~';
        token.content = '';

        token         = state.tokens[endDelim.token];
        token.type    = 's_close';
        token.tag     = 's';
        token.nesting = -1;
        token.markup  = '~~';
        token.content = '';

        if (state.tokens[endDelim.token - 1].type === 'text' &&
            state.tokens[endDelim.token - 1].content === '~') {

          loneMarkers.push(endDelim.token - 1);
        }
      }

      // If a marker sequence has an odd number of characters, it's splitted
      // like this: `~~~~~` -> `~` + `~~` + `~~`, leaving one marker at the
      // start of the sequence.
      //
      // So, we have to move all those markers after subsequent s_close tags.
      //
      while (loneMarkers.length) {
        i = loneMarkers.pop();
        j = i + 1;

        while (j < state.tokens.length && state.tokens[j].type === 's_close') {
          j++;
        }

        j--;

        if (i !== j) {
          token = state.tokens[j];
          state.tokens[j] = state.tokens[i];
          state.tokens[i] = token;
        }
      }
    }


    // Walk through delimiter list and replace text tokens with tags
    //
    var postProcess_1$1 = function strikethrough(state) {
      var curr,
          tokens_meta = state.tokens_meta,
          max = state.tokens_meta.length;

      postProcess$1(state, state.delimiters);

      for (curr = 0; curr < max; curr++) {
        if (tokens_meta[curr] && tokens_meta[curr].delimiters) {
          postProcess$1(state, tokens_meta[curr].delimiters);
        }
      }
    };

    var strikethrough = {
    	tokenize: tokenize$1,
    	postProcess: postProcess_1$1
    };

    // Process *this* and _that_


    // Insert each marker as a separate text token, and add it to delimiter list
    //
    var tokenize = function emphasis(state, silent) {
      var i, scanned, token,
          start = state.pos,
          marker = state.src.charCodeAt(start);

      if (silent) { return false; }

      if (marker !== 0x5F /* _ */ && marker !== 0x2A /* * */) { return false; }

      scanned = state.scanDelims(state.pos, marker === 0x2A);

      for (i = 0; i < scanned.length; i++) {
        token         = state.push('text', '', 0);
        token.content = String.fromCharCode(marker);

        state.delimiters.push({
          // Char code of the starting marker (number).
          //
          marker: marker,

          // Total length of these series of delimiters.
          //
          length: scanned.length,

          // An amount of characters before this one that's equivalent to
          // current one. In plain English: if this delimiter does not open
          // an emphasis, neither do previous `jump` characters.
          //
          // Used to skip sequences like "*****" in one step, for 1st asterisk
          // value will be 0, for 2nd it's 1 and so on.
          //
          jump:   i,

          // A position of the token this delimiter corresponds to.
          //
          token:  state.tokens.length - 1,

          // If this delimiter is matched as a valid opener, `end` will be
          // equal to its position, otherwise it's `-1`.
          //
          end:    -1,

          // Boolean flags that determine if this delimiter could open or close
          // an emphasis.
          //
          open:   scanned.can_open,
          close:  scanned.can_close
        });
      }

      state.pos += scanned.length;

      return true;
    };


    function postProcess(state, delimiters) {
      var i,
          startDelim,
          endDelim,
          token,
          ch,
          isStrong,
          max = delimiters.length;

      for (i = max - 1; i >= 0; i--) {
        startDelim = delimiters[i];

        if (startDelim.marker !== 0x5F/* _ */ && startDelim.marker !== 0x2A/* * */) {
          continue;
        }

        // Process only opening markers
        if (startDelim.end === -1) {
          continue;
        }

        endDelim = delimiters[startDelim.end];

        // If the previous delimiter has the same marker and is adjacent to this one,
        // merge those into one strong delimiter.
        //
        // `<em><em>whatever</em></em>` -> `<strong>whatever</strong>`
        //
        isStrong = i > 0 &&
                   delimiters[i - 1].end === startDelim.end + 1 &&
                   delimiters[i - 1].token === startDelim.token - 1 &&
                   delimiters[startDelim.end + 1].token === endDelim.token + 1 &&
                   delimiters[i - 1].marker === startDelim.marker;

        ch = String.fromCharCode(startDelim.marker);

        token         = state.tokens[startDelim.token];
        token.type    = isStrong ? 'strong_open' : 'em_open';
        token.tag     = isStrong ? 'strong' : 'em';
        token.nesting = 1;
        token.markup  = isStrong ? ch + ch : ch;
        token.content = '';

        token         = state.tokens[endDelim.token];
        token.type    = isStrong ? 'strong_close' : 'em_close';
        token.tag     = isStrong ? 'strong' : 'em';
        token.nesting = -1;
        token.markup  = isStrong ? ch + ch : ch;
        token.content = '';

        if (isStrong) {
          state.tokens[delimiters[i - 1].token].content = '';
          state.tokens[delimiters[startDelim.end + 1].token].content = '';
          i--;
        }
      }
    }


    // Walk through delimiter list and replace text tokens with tags
    //
    var postProcess_1 = function emphasis(state) {
      var curr,
          tokens_meta = state.tokens_meta,
          max = state.tokens_meta.length;

      postProcess(state, state.delimiters);

      for (curr = 0; curr < max; curr++) {
        if (tokens_meta[curr] && tokens_meta[curr].delimiters) {
          postProcess(state, tokens_meta[curr].delimiters);
        }
      }
    };

    var emphasis = {
    	tokenize: tokenize,
    	postProcess: postProcess_1
    };

    var normalizeReference$2   = utils.normalizeReference;
    var isSpace$1              = utils.isSpace;


    var link$2 = function link(state, silent) {
      var attrs,
          code,
          label,
          labelEnd,
          labelStart,
          pos,
          res,
          ref,
          token,
          href = '',
          title = '',
          oldPos = state.pos,
          max = state.posMax,
          start = state.pos,
          parseReference = true;

      if (state.src.charCodeAt(state.pos) !== 0x5B/* [ */) { return false; }

      labelStart = state.pos + 1;
      labelEnd = state.md.helpers.parseLinkLabel(state, state.pos, true);

      // parser failed to find ']', so it's not a valid link
      if (labelEnd < 0) { return false; }

      pos = labelEnd + 1;
      if (pos < max && state.src.charCodeAt(pos) === 0x28/* ( */) {
        //
        // Inline link
        //

        // might have found a valid shortcut link, disable reference parsing
        parseReference = false;

        // [link](  <href>  "title"  )
        //        ^^ skipping these spaces
        pos++;
        for (; pos < max; pos++) {
          code = state.src.charCodeAt(pos);
          if (!isSpace$1(code) && code !== 0x0A) { break; }
        }
        if (pos >= max) { return false; }

        // [link](  <href>  "title"  )
        //          ^^^^^^ parsing link destination
        start = pos;
        res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);
        if (res.ok) {
          href = state.md.normalizeLink(res.str);
          if (state.md.validateLink(href)) {
            pos = res.pos;
          } else {
            href = '';
          }

          // [link](  <href>  "title"  )
          //                ^^ skipping these spaces
          start = pos;
          for (; pos < max; pos++) {
            code = state.src.charCodeAt(pos);
            if (!isSpace$1(code) && code !== 0x0A) { break; }
          }

          // [link](  <href>  "title"  )
          //                  ^^^^^^^ parsing link title
          res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);
          if (pos < max && start !== pos && res.ok) {
            title = res.str;
            pos = res.pos;

            // [link](  <href>  "title"  )
            //                         ^^ skipping these spaces
            for (; pos < max; pos++) {
              code = state.src.charCodeAt(pos);
              if (!isSpace$1(code) && code !== 0x0A) { break; }
            }
          }
        }

        if (pos >= max || state.src.charCodeAt(pos) !== 0x29/* ) */) {
          // parsing a valid shortcut link failed, fallback to reference
          parseReference = true;
        }
        pos++;
      }

      if (parseReference) {
        //
        // Link reference
        //
        if (typeof state.env.references === 'undefined') { return false; }

        if (pos < max && state.src.charCodeAt(pos) === 0x5B/* [ */) {
          start = pos + 1;
          pos = state.md.helpers.parseLinkLabel(state, pos);
          if (pos >= 0) {
            label = state.src.slice(start, pos++);
          } else {
            pos = labelEnd + 1;
          }
        } else {
          pos = labelEnd + 1;
        }

        // covers label === '' and label === undefined
        // (collapsed reference link and shortcut reference link respectively)
        if (!label) { label = state.src.slice(labelStart, labelEnd); }

        ref = state.env.references[normalizeReference$2(label)];
        if (!ref) {
          state.pos = oldPos;
          return false;
        }
        href = ref.href;
        title = ref.title;
      }

      //
      // We found the end of the link, and know for a fact it's a valid link;
      // so all that's left to do is to call tokenizer.
      //
      if (!silent) {
        state.pos = labelStart;
        state.posMax = labelEnd;

        token        = state.push('link_open', 'a', 1);
        token.attrs  = attrs = [ [ 'href', href ] ];
        if (title) {
          attrs.push([ 'title', title ]);
        }

        state.md.inline.tokenize(state);

        token        = state.push('link_close', 'a', -1);
      }

      state.pos = pos;
      state.posMax = max;
      return true;
    };

    var normalizeReference$1   = utils.normalizeReference;
    var isSpace              = utils.isSpace;


    var image$2 = function image(state, silent) {
      var attrs,
          code,
          content,
          label,
          labelEnd,
          labelStart,
          pos,
          ref,
          res,
          title,
          token,
          tokens,
          start,
          href = '',
          oldPos = state.pos,
          max = state.posMax;

      if (state.src.charCodeAt(state.pos) !== 0x21/* ! */) { return false; }
      if (state.src.charCodeAt(state.pos + 1) !== 0x5B/* [ */) { return false; }

      labelStart = state.pos + 2;
      labelEnd = state.md.helpers.parseLinkLabel(state, state.pos + 1, false);

      // parser failed to find ']', so it's not a valid link
      if (labelEnd < 0) { return false; }

      pos = labelEnd + 1;
      if (pos < max && state.src.charCodeAt(pos) === 0x28/* ( */) {
        //
        // Inline link
        //

        // [link](  <href>  "title"  )
        //        ^^ skipping these spaces
        pos++;
        for (; pos < max; pos++) {
          code = state.src.charCodeAt(pos);
          if (!isSpace(code) && code !== 0x0A) { break; }
        }
        if (pos >= max) { return false; }

        // [link](  <href>  "title"  )
        //          ^^^^^^ parsing link destination
        start = pos;
        res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);
        if (res.ok) {
          href = state.md.normalizeLink(res.str);
          if (state.md.validateLink(href)) {
            pos = res.pos;
          } else {
            href = '';
          }
        }

        // [link](  <href>  "title"  )
        //                ^^ skipping these spaces
        start = pos;
        for (; pos < max; pos++) {
          code = state.src.charCodeAt(pos);
          if (!isSpace(code) && code !== 0x0A) { break; }
        }

        // [link](  <href>  "title"  )
        //                  ^^^^^^^ parsing link title
        res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);
        if (pos < max && start !== pos && res.ok) {
          title = res.str;
          pos = res.pos;

          // [link](  <href>  "title"  )
          //                         ^^ skipping these spaces
          for (; pos < max; pos++) {
            code = state.src.charCodeAt(pos);
            if (!isSpace(code) && code !== 0x0A) { break; }
          }
        } else {
          title = '';
        }

        if (pos >= max || state.src.charCodeAt(pos) !== 0x29/* ) */) {
          state.pos = oldPos;
          return false;
        }
        pos++;
      } else {
        //
        // Link reference
        //
        if (typeof state.env.references === 'undefined') { return false; }

        if (pos < max && state.src.charCodeAt(pos) === 0x5B/* [ */) {
          start = pos + 1;
          pos = state.md.helpers.parseLinkLabel(state, pos);
          if (pos >= 0) {
            label = state.src.slice(start, pos++);
          } else {
            pos = labelEnd + 1;
          }
        } else {
          pos = labelEnd + 1;
        }

        // covers label === '' and label === undefined
        // (collapsed reference link and shortcut reference link respectively)
        if (!label) { label = state.src.slice(labelStart, labelEnd); }

        ref = state.env.references[normalizeReference$1(label)];
        if (!ref) {
          state.pos = oldPos;
          return false;
        }
        href = ref.href;
        title = ref.title;
      }

      //
      // We found the end of the link, and know for a fact it's a valid link;
      // so all that's left to do is to call tokenizer.
      //
      if (!silent) {
        content = state.src.slice(labelStart, labelEnd);

        state.md.inline.parse(
          content,
          state.md,
          state.env,
          tokens = []
        );

        token          = state.push('image', 'img', 0);
        token.attrs    = attrs = [ [ 'src', href ], [ 'alt', '' ] ];
        token.children = tokens;
        token.content  = content;

        if (title) {
          attrs.push([ 'title', title ]);
        }
      }

      state.pos = pos;
      state.posMax = max;
      return true;
    };

    // Process autolinks '<protocol:...>'


    /*eslint max-len:0*/
    var EMAIL_RE    = /^([a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)$/;
    var AUTOLINK_RE = /^([a-zA-Z][a-zA-Z0-9+.\-]{1,31}):([^<>\x00-\x20]*)$/;


    var autolink = function autolink(state, silent) {
      var url, fullUrl, token, ch, start, max,
          pos = state.pos;

      if (state.src.charCodeAt(pos) !== 0x3C/* < */) { return false; }

      start = state.pos;
      max = state.posMax;

      for (;;) {
        if (++pos >= max) return false;

        ch = state.src.charCodeAt(pos);

        if (ch === 0x3C /* < */) return false;
        if (ch === 0x3E /* > */) break;
      }

      url = state.src.slice(start + 1, pos);

      if (AUTOLINK_RE.test(url)) {
        fullUrl = state.md.normalizeLink(url);
        if (!state.md.validateLink(fullUrl)) { return false; }

        if (!silent) {
          token         = state.push('link_open', 'a', 1);
          token.attrs   = [ [ 'href', fullUrl ] ];
          token.markup  = 'autolink';
          token.info    = 'auto';

          token         = state.push('text', '', 0);
          token.content = state.md.normalizeLinkText(url);

          token         = state.push('link_close', 'a', -1);
          token.markup  = 'autolink';
          token.info    = 'auto';
        }

        state.pos += url.length + 2;
        return true;
      }

      if (EMAIL_RE.test(url)) {
        fullUrl = state.md.normalizeLink('mailto:' + url);
        if (!state.md.validateLink(fullUrl)) { return false; }

        if (!silent) {
          token         = state.push('link_open', 'a', 1);
          token.attrs   = [ [ 'href', fullUrl ] ];
          token.markup  = 'autolink';
          token.info    = 'auto';

          token         = state.push('text', '', 0);
          token.content = state.md.normalizeLinkText(url);

          token         = state.push('link_close', 'a', -1);
          token.markup  = 'autolink';
          token.info    = 'auto';
        }

        state.pos += url.length + 2;
        return true;
      }

      return false;
    };

    var HTML_TAG_RE = html_re.HTML_TAG_RE;


    function isLetter(ch) {
      /*eslint no-bitwise:0*/
      var lc = ch | 0x20; // to lower case
      return (lc >= 0x61/* a */) && (lc <= 0x7a/* z */);
    }


    var html_inline = function html_inline(state, silent) {
      var ch, match, max, token,
          pos = state.pos;

      if (!state.md.options.html) { return false; }

      // Check start
      max = state.posMax;
      if (state.src.charCodeAt(pos) !== 0x3C/* < */ ||
          pos + 2 >= max) {
        return false;
      }

      // Quick fail on second char
      ch = state.src.charCodeAt(pos + 1);
      if (ch !== 0x21/* ! */ &&
          ch !== 0x3F/* ? */ &&
          ch !== 0x2F/* / */ &&
          !isLetter(ch)) {
        return false;
      }

      match = state.src.slice(pos).match(HTML_TAG_RE);
      if (!match) { return false; }

      if (!silent) {
        token         = state.push('html_inline', '', 0);
        token.content = state.src.slice(pos, pos + match[0].length);
      }
      state.pos += match[0].length;
      return true;
    };

    var has               = utils.has;
    var isValidEntityCode = utils.isValidEntityCode;
    var fromCodePoint$3     = utils.fromCodePoint;


    var DIGITAL_RE = /^&#((?:x[a-f0-9]{1,6}|[0-9]{1,7}));/i;
    var NAMED_RE   = /^&([a-z][a-z0-9]{1,31});/i;


    var entity = function entity(state, silent) {
      var ch, code, match, pos = state.pos, max = state.posMax;

      if (state.src.charCodeAt(pos) !== 0x26/* & */) { return false; }

      if (pos + 1 < max) {
        ch = state.src.charCodeAt(pos + 1);

        if (ch === 0x23 /* # */) {
          match = state.src.slice(pos).match(DIGITAL_RE);
          if (match) {
            if (!silent) {
              code = match[1][0].toLowerCase() === 'x' ? parseInt(match[1].slice(1), 16) : parseInt(match[1], 10);
              state.pending += isValidEntityCode(code) ? fromCodePoint$3(code) : fromCodePoint$3(0xFFFD);
            }
            state.pos += match[0].length;
            return true;
          }
        } else {
          match = state.src.slice(pos).match(NAMED_RE);
          if (match) {
            if (has(entities, match[1])) {
              if (!silent) { state.pending += entities[match[1]]; }
              state.pos += match[0].length;
              return true;
            }
          }
        }
      }

      if (!silent) { state.pending += '&'; }
      state.pos++;
      return true;
    };

    // For each opening emphasis-like marker find a matching closing one


    function processDelimiters(state, delimiters) {
      var closerIdx, openerIdx, closer, opener, minOpenerIdx, newMinOpenerIdx,
          isOddMatch, lastJump,
          openersBottom = {},
          max = delimiters.length;

      for (closerIdx = 0; closerIdx < max; closerIdx++) {
        closer = delimiters[closerIdx];

        // Length is only used for emphasis-specific "rule of 3",
        // if it's not defined (in strikethrough or 3rd party plugins),
        // we can default it to 0 to disable those checks.
        //
        closer.length = closer.length || 0;

        if (!closer.close) continue;

        // Previously calculated lower bounds (previous fails)
        // for each marker, each delimiter length modulo 3,
        // and for whether this closer can be an opener;
        // https://github.com/commonmark/cmark/commit/34250e12ccebdc6372b8b49c44fab57c72443460
        if (!openersBottom.hasOwnProperty(closer.marker)) {
          openersBottom[closer.marker] = [ -1, -1, -1, -1, -1, -1 ];
        }

        minOpenerIdx = openersBottom[closer.marker][(closer.open ? 3 : 0) + (closer.length % 3)];

        openerIdx = closerIdx - closer.jump - 1;

        // avoid crash if `closer.jump` is pointing outside of the array, see #742
        if (openerIdx < -1) openerIdx = -1;

        newMinOpenerIdx = openerIdx;

        for (; openerIdx > minOpenerIdx; openerIdx -= opener.jump + 1) {
          opener = delimiters[openerIdx];

          if (opener.marker !== closer.marker) continue;

          if (opener.open && opener.end < 0) {

            isOddMatch = false;

            // from spec:
            //
            // If one of the delimiters can both open and close emphasis, then the
            // sum of the lengths of the delimiter runs containing the opening and
            // closing delimiters must not be a multiple of 3 unless both lengths
            // are multiples of 3.
            //
            if (opener.close || closer.open) {
              if ((opener.length + closer.length) % 3 === 0) {
                if (opener.length % 3 !== 0 || closer.length % 3 !== 0) {
                  isOddMatch = true;
                }
              }
            }

            if (!isOddMatch) {
              // If previous delimiter cannot be an opener, we can safely skip
              // the entire sequence in future checks. This is required to make
              // sure algorithm has linear complexity (see *_*_*_*_*_... case).
              //
              lastJump = openerIdx > 0 && !delimiters[openerIdx - 1].open ?
                delimiters[openerIdx - 1].jump + 1 :
                0;

              closer.jump  = closerIdx - openerIdx + lastJump;
              closer.open  = false;
              opener.end   = closerIdx;
              opener.jump  = lastJump;
              opener.close = false;
              newMinOpenerIdx = -1;
              break;
            }
          }
        }

        if (newMinOpenerIdx !== -1) {
          // If match for this delimiter run failed, we want to set lower bound for
          // future lookups. This is required to make sure algorithm has linear
          // complexity.
          //
          // See details here:
          // https://github.com/commonmark/cmark/issues/178#issuecomment-270417442
          //
          openersBottom[closer.marker][(closer.open ? 3 : 0) + ((closer.length || 0) % 3)] = newMinOpenerIdx;
        }
      }
    }


    var balance_pairs = function link_pairs(state) {
      var curr,
          tokens_meta = state.tokens_meta,
          max = state.tokens_meta.length;

      processDelimiters(state, state.delimiters);

      for (curr = 0; curr < max; curr++) {
        if (tokens_meta[curr] && tokens_meta[curr].delimiters) {
          processDelimiters(state, tokens_meta[curr].delimiters);
        }
      }
    };

    // Clean up tokens after emphasis and strikethrough postprocessing:


    var text_collapse = function text_collapse(state) {
      var curr, last,
          level = 0,
          tokens = state.tokens,
          max = state.tokens.length;

      for (curr = last = 0; curr < max; curr++) {
        // re-calculate levels after emphasis/strikethrough turns some text nodes
        // into opening/closing tags
        if (tokens[curr].nesting < 0) level--; // closing tag
        tokens[curr].level = level;
        if (tokens[curr].nesting > 0) level++; // opening tag

        if (tokens[curr].type === 'text' &&
            curr + 1 < max &&
            tokens[curr + 1].type === 'text') {

          // collapse two adjacent text nodes
          tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content;
        } else {
          if (curr !== last) { tokens[last] = tokens[curr]; }

          last++;
        }
      }

      if (curr !== last) {
        tokens.length = last;
      }
    };

    var isWhiteSpace   = utils.isWhiteSpace;
    var isPunctChar    = utils.isPunctChar;
    var isMdAsciiPunct = utils.isMdAsciiPunct;


    function StateInline(src, md, env, outTokens) {
      this.src = src;
      this.env = env;
      this.md = md;
      this.tokens = outTokens;
      this.tokens_meta = Array(outTokens.length);

      this.pos = 0;
      this.posMax = this.src.length;
      this.level = 0;
      this.pending = '';
      this.pendingLevel = 0;

      // Stores { start: end } pairs. Useful for backtrack
      // optimization of pairs parse (emphasis, strikes).
      this.cache = {};

      // List of emphasis-like delimiters for current tag
      this.delimiters = [];

      // Stack of delimiter lists for upper level tags
      this._prev_delimiters = [];

      // backtick length => last seen position
      this.backticks = {};
      this.backticksScanned = false;
    }


    // Flush pending text
    //
    StateInline.prototype.pushPending = function () {
      var token$1 = new token('text', '', 0);
      token$1.content = this.pending;
      token$1.level = this.pendingLevel;
      this.tokens.push(token$1);
      this.pending = '';
      return token$1;
    };


    // Push new token to "stream".
    // If pending text exists - flush it as text token
    //
    StateInline.prototype.push = function (type, tag, nesting) {
      if (this.pending) {
        this.pushPending();
      }

      var token$1 = new token(type, tag, nesting);
      var token_meta = null;

      if (nesting < 0) {
        // closing tag
        this.level--;
        this.delimiters = this._prev_delimiters.pop();
      }

      token$1.level = this.level;

      if (nesting > 0) {
        // opening tag
        this.level++;
        this._prev_delimiters.push(this.delimiters);
        this.delimiters = [];
        token_meta = { delimiters: this.delimiters };
      }

      this.pendingLevel = this.level;
      this.tokens.push(token$1);
      this.tokens_meta.push(token_meta);
      return token$1;
    };


    // Scan a sequence of emphasis-like markers, and determine whether
    // it can start an emphasis sequence or end an emphasis sequence.
    //
    //  - start - position to scan from (it should point at a valid marker);
    //  - canSplitWord - determine if these markers can be found inside a word
    //
    StateInline.prototype.scanDelims = function (start, canSplitWord) {
      var pos = start, lastChar, nextChar, count, can_open, can_close,
          isLastWhiteSpace, isLastPunctChar,
          isNextWhiteSpace, isNextPunctChar,
          left_flanking = true,
          right_flanking = true,
          max = this.posMax,
          marker = this.src.charCodeAt(start);

      // treat beginning of the line as a whitespace
      lastChar = start > 0 ? this.src.charCodeAt(start - 1) : 0x20;

      while (pos < max && this.src.charCodeAt(pos) === marker) { pos++; }

      count = pos - start;

      // treat end of the line as a whitespace
      nextChar = pos < max ? this.src.charCodeAt(pos) : 0x20;

      isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));
      isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));

      isLastWhiteSpace = isWhiteSpace(lastChar);
      isNextWhiteSpace = isWhiteSpace(nextChar);

      if (isNextWhiteSpace) {
        left_flanking = false;
      } else if (isNextPunctChar) {
        if (!(isLastWhiteSpace || isLastPunctChar)) {
          left_flanking = false;
        }
      }

      if (isLastWhiteSpace) {
        right_flanking = false;
      } else if (isLastPunctChar) {
        if (!(isNextWhiteSpace || isNextPunctChar)) {
          right_flanking = false;
        }
      }

      if (!canSplitWord) {
        can_open  = left_flanking  && (!right_flanking || isLastPunctChar);
        can_close = right_flanking && (!left_flanking  || isNextPunctChar);
      } else {
        can_open  = left_flanking;
        can_close = right_flanking;
      }

      return {
        can_open:  can_open,
        can_close: can_close,
        length:    count
      };
    };


    // re-export Token class to use in block rules
    StateInline.prototype.Token = token;


    var state_inline = StateInline;

    /** internal
     * class ParserInline
     *
     * Tokenizes paragraph content.
     **/





    ////////////////////////////////////////////////////////////////////////////////
    // Parser rules

    var _rules = [
      [ 'text',            text$1 ],
      [ 'newline',         newline ],
      [ 'escape',          _escape ],
      [ 'backticks',       backticks ],
      [ 'strikethrough',   strikethrough.tokenize ],
      [ 'emphasis',        emphasis.tokenize ],
      [ 'link',            link$2 ],
      [ 'image',           image$2 ],
      [ 'autolink',        autolink ],
      [ 'html_inline',     html_inline ],
      [ 'entity',          entity ]
    ];

    var _rules2 = [
      [ 'balance_pairs',   balance_pairs ],
      [ 'strikethrough',   strikethrough.postProcess ],
      [ 'emphasis',        emphasis.postProcess ],
      [ 'text_collapse',   text_collapse ]
    ];


    /**
     * new ParserInline()
     **/
    function ParserInline() {
      var i;

      /**
       * ParserInline#ruler -> Ruler
       *
       * [[Ruler]] instance. Keep configuration of inline rules.
       **/
      this.ruler = new ruler();

      for (i = 0; i < _rules.length; i++) {
        this.ruler.push(_rules[i][0], _rules[i][1]);
      }

      /**
       * ParserInline#ruler2 -> Ruler
       *
       * [[Ruler]] instance. Second ruler used for post-processing
       * (e.g. in emphasis-like rules).
       **/
      this.ruler2 = new ruler();

      for (i = 0; i < _rules2.length; i++) {
        this.ruler2.push(_rules2[i][0], _rules2[i][1]);
      }
    }


    // Skip single token by running all rules in validation mode;
    // returns `true` if any rule reported success
    //
    ParserInline.prototype.skipToken = function (state) {
      var ok, i, pos = state.pos,
          rules = this.ruler.getRules(''),
          len = rules.length,
          maxNesting = state.md.options.maxNesting,
          cache = state.cache;


      if (typeof cache[pos] !== 'undefined') {
        state.pos = cache[pos];
        return;
      }

      if (state.level < maxNesting) {
        for (i = 0; i < len; i++) {
          // Increment state.level and decrement it later to limit recursion.
          // It's harmless to do here, because no tokens are created. But ideally,
          // we'd need a separate private state variable for this purpose.
          //
          state.level++;
          ok = rules[i](state, true);
          state.level--;

          if (ok) { break; }
        }
      } else {
        // Too much nesting, just skip until the end of the paragraph.
        //
        // NOTE: this will cause links to behave incorrectly in the following case,
        //       when an amount of `[` is exactly equal to `maxNesting + 1`:
        //
        //       [[[[[[[[[[[[[[[[[[[[[foo]()
        //
        // TODO: remove this workaround when CM standard will allow nested links
        //       (we can replace it by preventing links from being parsed in
        //       validation mode)
        //
        state.pos = state.posMax;
      }

      if (!ok) { state.pos++; }
      cache[pos] = state.pos;
    };


    // Generate tokens for input range
    //
    ParserInline.prototype.tokenize = function (state) {
      var ok, i,
          rules = this.ruler.getRules(''),
          len = rules.length,
          end = state.posMax,
          maxNesting = state.md.options.maxNesting;

      while (state.pos < end) {
        // Try all possible rules.
        // On success, rule should:
        //
        // - update `state.pos`
        // - update `state.tokens`
        // - return true

        if (state.level < maxNesting) {
          for (i = 0; i < len; i++) {
            ok = rules[i](state, false);
            if (ok) { break; }
          }
        }

        if (ok) {
          if (state.pos >= end) { break; }
          continue;
        }

        state.pending += state.src[state.pos++];
      }

      if (state.pending) {
        state.pushPending();
      }
    };


    /**
     * ParserInline.parse(str, md, env, outTokens)
     *
     * Process input string and push inline tokens into `outTokens`
     **/
    ParserInline.prototype.parse = function (str, md, env, outTokens) {
      var i, rules, len;
      var state = new this.State(str, md, env, outTokens);

      this.tokenize(state);

      rules = this.ruler2.getRules('');
      len = rules.length;

      for (i = 0; i < len; i++) {
        rules[i](state);
      }
    };


    ParserInline.prototype.State = state_inline;


    var parser_inline = ParserInline;

    var re = function (opts) {
      var re = {};

      // Use direct extract instead of `regenerate` to reduse browserified size
      re.src_Any = regex$3.source;
      re.src_Cc  = regex$2.source;
      re.src_Z   = regex.source;
      re.src_P   = regex$4.source;

      // \p{\Z\P\Cc\CF} (white spaces + control + format + punctuation)
      re.src_ZPCc = [ re.src_Z, re.src_P, re.src_Cc ].join('|');

      // \p{\Z\Cc} (white spaces + control)
      re.src_ZCc = [ re.src_Z, re.src_Cc ].join('|');

      // Experimental. List of chars, completely prohibited in links
      // because can separate it from other part of text
      var text_separators = '[><\uff5c]';

      // All possible word characters (everything without punctuation, spaces & controls)
      // Defined via punctuation & spaces to save space
      // Should be something like \p{\L\N\S\M} (\w but without `_`)
      re.src_pseudo_letter       = '(?:(?!' + text_separators + '|' + re.src_ZPCc + ')' + re.src_Any + ')';
      // The same as abothe but without [0-9]
      // var src_pseudo_letter_non_d = '(?:(?![0-9]|' + src_ZPCc + ')' + src_Any + ')';

      ////////////////////////////////////////////////////////////////////////////////

      re.src_ip4 =

        '(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)';

      // Prohibit any of "@/[]()" in user/pass to avoid wrong domain fetch.
      re.src_auth    = '(?:(?:(?!' + re.src_ZCc + '|[@/\\[\\]()]).)+@)?';

      re.src_port =

        '(?::(?:6(?:[0-4]\\d{3}|5(?:[0-4]\\d{2}|5(?:[0-2]\\d|3[0-5])))|[1-5]?\\d{1,4}))?';

      re.src_host_terminator =

        '(?=$|' + text_separators + '|' + re.src_ZPCc + ')(?!-|_|:\\d|\\.-|\\.(?!$|' + re.src_ZPCc + '))';

      re.src_path =

        '(?:' +
          '[/?#]' +
            '(?:' +
              '(?!' + re.src_ZCc + '|' + text_separators + '|[()[\\]{}.,"\'?!\\-]).|' +
              '\\[(?:(?!' + re.src_ZCc + '|\\]).)*\\]|' +
              '\\((?:(?!' + re.src_ZCc + '|[)]).)*\\)|' +
              '\\{(?:(?!' + re.src_ZCc + '|[}]).)*\\}|' +
              '\\"(?:(?!' + re.src_ZCc + '|["]).)+\\"|' +
              "\\'(?:(?!" + re.src_ZCc + "|[']).)+\\'|" +
              "\\'(?=" + re.src_pseudo_letter + '|[-]).|' +  // allow `I'm_king` if no pair found
              '\\.{2,}[a-zA-Z0-9%/&]|' + // google has many dots in "google search" links (#66, #81).
                                         // github has ... in commit range links,
                                         // Restrict to
                                         // - english
                                         // - percent-encoded
                                         // - parts of file path
                                         // - params separator
                                         // until more examples found.
              '\\.(?!' + re.src_ZCc + '|[.]).|' +
              (opts && opts['---'] ?
                '\\-(?!--(?:[^-]|$))(?:-*)|' // `---` => long dash, terminate
                :
                '\\-+|'
              ) +
              '\\,(?!' + re.src_ZCc + ').|' +       // allow `,,,` in paths
              '\\!+(?!' + re.src_ZCc + '|[!]).|' +  // allow `!!!` in paths, but not at the end
              '\\?(?!' + re.src_ZCc + '|[?]).' +
            ')+' +
          '|\\/' +
        ')?';

      // Allow anything in markdown spec, forbid quote (") at the first position
      // because emails enclosed in quotes are far more common
      re.src_email_name =

        '[\\-;:&=\\+\\$,\\.a-zA-Z0-9_][\\-;:&=\\+\\$,\\"\\.a-zA-Z0-9_]*';

      re.src_xn =

        'xn--[a-z0-9\\-]{1,59}';

      // More to read about domain names
      // http://serverfault.com/questions/638260/

      re.src_domain_root =

        // Allow letters & digits (http://test1)
        '(?:' +
          re.src_xn +
          '|' +
          re.src_pseudo_letter + '{1,63}' +
        ')';

      re.src_domain =

        '(?:' +
          re.src_xn +
          '|' +
          '(?:' + re.src_pseudo_letter + ')' +
          '|' +
          '(?:' + re.src_pseudo_letter + '(?:-|' + re.src_pseudo_letter + '){0,61}' + re.src_pseudo_letter + ')' +
        ')';

      re.src_host =

        '(?:' +
        // Don't need IP check, because digits are already allowed in normal domain names
        //   src_ip4 +
        // '|' +
          '(?:(?:(?:' + re.src_domain + ')\\.)*' + re.src_domain/*_root*/ + ')' +
        ')';

      re.tpl_host_fuzzy =

        '(?:' +
          re.src_ip4 +
        '|' +
          '(?:(?:(?:' + re.src_domain + ')\\.)+(?:%TLDS%))' +
        ')';

      re.tpl_host_no_ip_fuzzy =

        '(?:(?:(?:' + re.src_domain + ')\\.)+(?:%TLDS%))';

      re.src_host_strict =

        re.src_host + re.src_host_terminator;

      re.tpl_host_fuzzy_strict =

        re.tpl_host_fuzzy + re.src_host_terminator;

      re.src_host_port_strict =

        re.src_host + re.src_port + re.src_host_terminator;

      re.tpl_host_port_fuzzy_strict =

        re.tpl_host_fuzzy + re.src_port + re.src_host_terminator;

      re.tpl_host_port_no_ip_fuzzy_strict =

        re.tpl_host_no_ip_fuzzy + re.src_port + re.src_host_terminator;


      ////////////////////////////////////////////////////////////////////////////////
      // Main rules

      // Rude test fuzzy links by host, for quick deny
      re.tpl_host_fuzzy_test =

        'localhost|www\\.|\\.\\d{1,3}\\.|(?:\\.(?:%TLDS%)(?:' + re.src_ZPCc + '|>|$))';

      re.tpl_email_fuzzy =

          '(^|' + text_separators + '|"|\\(|' + re.src_ZCc + ')' +
          '(' + re.src_email_name + '@' + re.tpl_host_fuzzy_strict + ')';

      re.tpl_link_fuzzy =
          // Fuzzy link can't be prepended with .:/\- and non punctuation.
          // but can start with > (markdown blockquote)
          '(^|(?![.:/\\-_@])(?:[$+<=>^`|\uff5c]|' + re.src_ZPCc + '))' +
          '((?![$+<=>^`|\uff5c])' + re.tpl_host_port_fuzzy_strict + re.src_path + ')';

      re.tpl_link_no_ip_fuzzy =
          // Fuzzy link can't be prepended with .:/\- and non punctuation.
          // but can start with > (markdown blockquote)
          '(^|(?![.:/\\-_@])(?:[$+<=>^`|\uff5c]|' + re.src_ZPCc + '))' +
          '((?![$+<=>^`|\uff5c])' + re.tpl_host_port_no_ip_fuzzy_strict + re.src_path + ')';

      return re;
    };

    ////////////////////////////////////////////////////////////////////////////////
    // Helpers

    // Merge objects
    //
    function assign$1(obj /*from1, from2, from3, ...*/) {
      var sources = Array.prototype.slice.call(arguments, 1);

      sources.forEach(function (source) {
        if (!source) { return; }

        Object.keys(source).forEach(function (key) {
          obj[key] = source[key];
        });
      });

      return obj;
    }

    function _class(obj) { return Object.prototype.toString.call(obj); }
    function isString$4(obj) { return _class(obj) === '[object String]'; }
    function isObject$2(obj) { return _class(obj) === '[object Object]'; }
    function isRegExp(obj) { return _class(obj) === '[object RegExp]'; }
    function isFunction$1(obj) { return _class(obj) === '[object Function]'; }


    function escapeRE(str) { return str.replace(/[.?*+^$[\]\\(){}|-]/g, '\\$&'); }

    ////////////////////////////////////////////////////////////////////////////////


    var defaultOptions$2 = {
      fuzzyLink: true,
      fuzzyEmail: true,
      fuzzyIP: false
    };


    function isOptionsObj(obj) {
      return Object.keys(obj || {}).reduce(function (acc, k) {
        return acc || defaultOptions$2.hasOwnProperty(k);
      }, false);
    }


    var defaultSchemas = {
      'http:': {
        validate: function (text, pos, self) {
          var tail = text.slice(pos);

          if (!self.re.http) {
            // compile lazily, because "host"-containing variables can change on tlds update.
            self.re.http =  new RegExp(
              '^\\/\\/' + self.re.src_auth + self.re.src_host_port_strict + self.re.src_path, 'i'
            );
          }
          if (self.re.http.test(tail)) {
            return tail.match(self.re.http)[0].length;
          }
          return 0;
        }
      },
      'https:':  'http:',
      'ftp:':    'http:',
      '//':      {
        validate: function (text, pos, self) {
          var tail = text.slice(pos);

          if (!self.re.no_http) {
          // compile lazily, because "host"-containing variables can change on tlds update.
            self.re.no_http =  new RegExp(
              '^' +
              self.re.src_auth +
              // Don't allow single-level domains, because of false positives like '//test'
              // with code comments
              '(?:localhost|(?:(?:' + self.re.src_domain + ')\\.)+' + self.re.src_domain_root + ')' +
              self.re.src_port +
              self.re.src_host_terminator +
              self.re.src_path,

              'i'
            );
          }

          if (self.re.no_http.test(tail)) {
            // should not be `://` & `///`, that protects from errors in protocol name
            if (pos >= 3 && text[pos - 3] === ':') { return 0; }
            if (pos >= 3 && text[pos - 3] === '/') { return 0; }
            return tail.match(self.re.no_http)[0].length;
          }
          return 0;
        }
      },
      'mailto:': {
        validate: function (text, pos, self) {
          var tail = text.slice(pos);

          if (!self.re.mailto) {
            self.re.mailto =  new RegExp(
              '^' + self.re.src_email_name + '@' + self.re.src_host_strict, 'i'
            );
          }
          if (self.re.mailto.test(tail)) {
            return tail.match(self.re.mailto)[0].length;
          }
          return 0;
        }
      }
    };

    /*eslint-disable max-len*/

    // RE pattern for 2-character tlds (autogenerated by ./support/tlds_2char_gen.js)
    var tlds_2ch_src_re = 'a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]';

    // DON'T try to make PRs with changes. Extend TLDs with LinkifyIt.tlds() instead
    var tlds_default = 'biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф'.split('|');

    /*eslint-enable max-len*/

    ////////////////////////////////////////////////////////////////////////////////

    function resetScanCache(self) {
      self.__index__ = -1;
      self.__text_cache__   = '';
    }

    function createValidator(re) {
      return function (text, pos) {
        var tail = text.slice(pos);

        if (re.test(tail)) {
          return tail.match(re)[0].length;
        }
        return 0;
      };
    }

    function createNormalizer() {
      return function (match, self) {
        self.normalize(match);
      };
    }

    // Schemas compiler. Build regexps.
    //
    function compile(self) {

      // Load & clone RE patterns.
      var re$1 = self.re = re(self.__opts__);

      // Define dynamic patterns
      var tlds = self.__tlds__.slice();

      self.onCompile();

      if (!self.__tlds_replaced__) {
        tlds.push(tlds_2ch_src_re);
      }
      tlds.push(re$1.src_xn);

      re$1.src_tlds = tlds.join('|');

      function untpl(tpl) { return tpl.replace('%TLDS%', re$1.src_tlds); }

      re$1.email_fuzzy      = RegExp(untpl(re$1.tpl_email_fuzzy), 'i');
      re$1.link_fuzzy       = RegExp(untpl(re$1.tpl_link_fuzzy), 'i');
      re$1.link_no_ip_fuzzy = RegExp(untpl(re$1.tpl_link_no_ip_fuzzy), 'i');
      re$1.host_fuzzy_test  = RegExp(untpl(re$1.tpl_host_fuzzy_test), 'i');

      //
      // Compile each schema
      //

      var aliases = [];

      self.__compiled__ = {}; // Reset compiled data

      function schemaError(name, val) {
        throw new Error('(LinkifyIt) Invalid schema "' + name + '": ' + val);
      }

      Object.keys(self.__schemas__).forEach(function (name) {
        var val = self.__schemas__[name];

        // skip disabled methods
        if (val === null) { return; }

        var compiled = { validate: null, link: null };

        self.__compiled__[name] = compiled;

        if (isObject$2(val)) {
          if (isRegExp(val.validate)) {
            compiled.validate = createValidator(val.validate);
          } else if (isFunction$1(val.validate)) {
            compiled.validate = val.validate;
          } else {
            schemaError(name, val);
          }

          if (isFunction$1(val.normalize)) {
            compiled.normalize = val.normalize;
          } else if (!val.normalize) {
            compiled.normalize = createNormalizer();
          } else {
            schemaError(name, val);
          }

          return;
        }

        if (isString$4(val)) {
          aliases.push(name);
          return;
        }

        schemaError(name, val);
      });

      //
      // Compile postponed aliases
      //

      aliases.forEach(function (alias) {
        if (!self.__compiled__[self.__schemas__[alias]]) {
          // Silently fail on missed schemas to avoid errons on disable.
          // schemaError(alias, self.__schemas__[alias]);
          return;
        }

        self.__compiled__[alias].validate =
          self.__compiled__[self.__schemas__[alias]].validate;
        self.__compiled__[alias].normalize =
          self.__compiled__[self.__schemas__[alias]].normalize;
      });

      //
      // Fake record for guessed links
      //
      self.__compiled__[''] = { validate: null, normalize: createNormalizer() };

      //
      // Build schema condition
      //
      var slist = Object.keys(self.__compiled__)
                          .filter(function (name) {
                            // Filter disabled & fake schemas
                            return name.length > 0 && self.__compiled__[name];
                          })
                          .map(escapeRE)
                          .join('|');
      // (?!_) cause 1.5x slowdown
      self.re.schema_test   = RegExp('(^|(?!_)(?:[><\uff5c]|' + re$1.src_ZPCc + '))(' + slist + ')', 'i');
      self.re.schema_search = RegExp('(^|(?!_)(?:[><\uff5c]|' + re$1.src_ZPCc + '))(' + slist + ')', 'ig');

      self.re.pretest = RegExp(
        '(' + self.re.schema_test.source + ')|(' + self.re.host_fuzzy_test.source + ')|@',
        'i'
      );

      //
      // Cleanup
      //

      resetScanCache(self);
    }

    /**
     * class Match
     *
     * Match result. Single element of array, returned by [[LinkifyIt#match]]
     **/
    function Match(self, shift) {
      var start = self.__index__,
          end   = self.__last_index__,
          text  = self.__text_cache__.slice(start, end);

      /**
       * Match#schema -> String
       *
       * Prefix (protocol) for matched string.
       **/
      this.schema    = self.__schema__.toLowerCase();
      /**
       * Match#index -> Number
       *
       * First position of matched string.
       **/
      this.index     = start + shift;
      /**
       * Match#lastIndex -> Number
       *
       * Next position after matched string.
       **/
      this.lastIndex = end + shift;
      /**
       * Match#raw -> String
       *
       * Matched string.
       **/
      this.raw       = text;
      /**
       * Match#text -> String
       *
       * Notmalized text of matched string.
       **/
      this.text      = text;
      /**
       * Match#url -> String
       *
       * Normalized url of matched string.
       **/
      this.url       = text;
    }

    function createMatch(self, shift) {
      var match = new Match(self, shift);

      self.__compiled__[match.schema].normalize(match, self);

      return match;
    }


    /**
     * class LinkifyIt
     **/

    /**
     * new LinkifyIt(schemas, options)
     * - schemas (Object): Optional. Additional schemas to validate (prefix/validator)
     * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }
     *
     * Creates new linkifier instance with optional additional schemas.
     * Can be called without `new` keyword for convenience.
     *
     * By default understands:
     *
     * - `http(s)://...` , `ftp://...`, `mailto:...` & `//...` links
     * - "fuzzy" links and emails (example.com, foo@bar.com).
     *
     * `schemas` is an object, where each key/value describes protocol/rule:
     *
     * - __key__ - link prefix (usually, protocol name with `:` at the end, `skype:`
     *   for example). `linkify-it` makes shure that prefix is not preceeded with
     *   alphanumeric char and symbols. Only whitespaces and punctuation allowed.
     * - __value__ - rule to check tail after link prefix
     *   - _String_ - just alias to existing rule
     *   - _Object_
     *     - _validate_ - validator function (should return matched length on success),
     *       or `RegExp`.
     *     - _normalize_ - optional function to normalize text & url of matched result
     *       (for example, for @twitter mentions).
     *
     * `options`:
     *
     * - __fuzzyLink__ - recognige URL-s without `http(s):` prefix. Default `true`.
     * - __fuzzyIP__ - allow IPs in fuzzy links above. Can conflict with some texts
     *   like version numbers. Default `false`.
     * - __fuzzyEmail__ - recognize emails without `mailto:` prefix.
     *
     **/
    function LinkifyIt(schemas, options) {
      if (!(this instanceof LinkifyIt)) {
        return new LinkifyIt(schemas, options);
      }

      if (!options) {
        if (isOptionsObj(schemas)) {
          options = schemas;
          schemas = {};
        }
      }

      this.__opts__           = assign$1({}, defaultOptions$2, options);

      // Cache last tested result. Used to skip repeating steps on next `match` call.
      this.__index__          = -1;
      this.__last_index__     = -1; // Next scan position
      this.__schema__         = '';
      this.__text_cache__     = '';

      this.__schemas__        = assign$1({}, defaultSchemas, schemas);
      this.__compiled__       = {};

      this.__tlds__           = tlds_default;
      this.__tlds_replaced__  = false;

      this.re = {};

      compile(this);
    }


    /** chainable
     * LinkifyIt#add(schema, definition)
     * - schema (String): rule name (fixed pattern prefix)
     * - definition (String|RegExp|Object): schema definition
     *
     * Add new rule definition. See constructor description for details.
     **/
    LinkifyIt.prototype.add = function add(schema, definition) {
      this.__schemas__[schema] = definition;
      compile(this);
      return this;
    };


    /** chainable
     * LinkifyIt#set(options)
     * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }
     *
     * Set recognition options for links without schema.
     **/
    LinkifyIt.prototype.set = function set(options) {
      this.__opts__ = assign$1(this.__opts__, options);
      return this;
    };


    /**
     * LinkifyIt#test(text) -> Boolean
     *
     * Searches linkifiable pattern and returns `true` on success or `false` on fail.
     **/
    LinkifyIt.prototype.test = function test(text) {
      // Reset scan cache
      this.__text_cache__ = text;
      this.__index__      = -1;

      if (!text.length) { return false; }

      var m, ml, me, len, shift, next, re, tld_pos, at_pos;

      // try to scan for link with schema - that's the most simple rule
      if (this.re.schema_test.test(text)) {
        re = this.re.schema_search;
        re.lastIndex = 0;
        while ((m = re.exec(text)) !== null) {
          len = this.testSchemaAt(text, m[2], re.lastIndex);
          if (len) {
            this.__schema__     = m[2];
            this.__index__      = m.index + m[1].length;
            this.__last_index__ = m.index + m[0].length + len;
            break;
          }
        }
      }

      if (this.__opts__.fuzzyLink && this.__compiled__['http:']) {
        // guess schemaless links
        tld_pos = text.search(this.re.host_fuzzy_test);
        if (tld_pos >= 0) {
          // if tld is located after found link - no need to check fuzzy pattern
          if (this.__index__ < 0 || tld_pos < this.__index__) {
            if ((ml = text.match(this.__opts__.fuzzyIP ? this.re.link_fuzzy : this.re.link_no_ip_fuzzy)) !== null) {

              shift = ml.index + ml[1].length;

              if (this.__index__ < 0 || shift < this.__index__) {
                this.__schema__     = '';
                this.__index__      = shift;
                this.__last_index__ = ml.index + ml[0].length;
              }
            }
          }
        }
      }

      if (this.__opts__.fuzzyEmail && this.__compiled__['mailto:']) {
        // guess schemaless emails
        at_pos = text.indexOf('@');
        if (at_pos >= 0) {
          // We can't skip this check, because this cases are possible:
          // 192.168.1.1@gmail.com, my.in@example.com
          if ((me = text.match(this.re.email_fuzzy)) !== null) {

            shift = me.index + me[1].length;
            next  = me.index + me[0].length;

            if (this.__index__ < 0 || shift < this.__index__ ||
                (shift === this.__index__ && next > this.__last_index__)) {
              this.__schema__     = 'mailto:';
              this.__index__      = shift;
              this.__last_index__ = next;
            }
          }
        }
      }

      return this.__index__ >= 0;
    };


    /**
     * LinkifyIt#pretest(text) -> Boolean
     *
     * Very quick check, that can give false positives. Returns true if link MAY BE
     * can exists. Can be used for speed optimization, when you need to check that
     * link NOT exists.
     **/
    LinkifyIt.prototype.pretest = function pretest(text) {
      return this.re.pretest.test(text);
    };


    /**
     * LinkifyIt#testSchemaAt(text, name, position) -> Number
     * - text (String): text to scan
     * - name (String): rule (schema) name
     * - position (Number): text offset to check from
     *
     * Similar to [[LinkifyIt#test]] but checks only specific protocol tail exactly
     * at given position. Returns length of found pattern (0 on fail).
     **/
    LinkifyIt.prototype.testSchemaAt = function testSchemaAt(text, schema, pos) {
      // If not supported schema check requested - terminate
      if (!this.__compiled__[schema.toLowerCase()]) {
        return 0;
      }
      return this.__compiled__[schema.toLowerCase()].validate(text, pos, this);
    };


    /**
     * LinkifyIt#match(text) -> Array|null
     *
     * Returns array of found link descriptions or `null` on fail. We strongly
     * recommend to use [[LinkifyIt#test]] first, for best speed.
     *
     * ##### Result match description
     *
     * - __schema__ - link schema, can be empty for fuzzy links, or `//` for
     *   protocol-neutral  links.
     * - __index__ - offset of matched text
     * - __lastIndex__ - index of next char after mathch end
     * - __raw__ - matched text
     * - __text__ - normalized text
     * - __url__ - link, generated from matched text
     **/
    LinkifyIt.prototype.match = function match(text) {
      var shift = 0, result = [];

      // Try to take previous element from cache, if .test() called before
      if (this.__index__ >= 0 && this.__text_cache__ === text) {
        result.push(createMatch(this, shift));
        shift = this.__last_index__;
      }

      // Cut head if cache was used
      var tail = shift ? text.slice(shift) : text;

      // Scan string until end reached
      while (this.test(tail)) {
        result.push(createMatch(this, shift));

        tail = tail.slice(this.__last_index__);
        shift += this.__last_index__;
      }

      if (result.length) {
        return result;
      }

      return null;
    };


    /** chainable
     * LinkifyIt#tlds(list [, keepOld]) -> this
     * - list (Array): list of tlds
     * - keepOld (Boolean): merge with current list if `true` (`false` by default)
     *
     * Load (or merge) new tlds list. Those are user for fuzzy links (without prefix)
     * to avoid false positives. By default this algorythm used:
     *
     * - hostname with any 2-letter root zones are ok.
     * - biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф
     *   are ok.
     * - encoded (`xn--...`) root zones are ok.
     *
     * If list is replaced, then exact match for 2-chars root zones will be checked.
     **/
    LinkifyIt.prototype.tlds = function tlds(list, keepOld) {
      list = Array.isArray(list) ? list : [ list ];

      if (!keepOld) {
        this.__tlds__ = list.slice();
        this.__tlds_replaced__ = true;
        compile(this);
        return this;
      }

      this.__tlds__ = this.__tlds__.concat(list)
                                      .sort()
                                      .filter(function (el, idx, arr) {
                                        return el !== arr[idx - 1];
                                      })
                                      .reverse();

      compile(this);
      return this;
    };

    /**
     * LinkifyIt#normalize(match)
     *
     * Default normalizer (if schema does not define it's own).
     **/
    LinkifyIt.prototype.normalize = function normalize(match) {

      // Do minimal possible changes by default. Need to collect feedback prior
      // to move forward https://github.com/markdown-it/linkify-it/issues/1

      if (!match.schema) { match.url = 'http://' + match.url; }

      if (match.schema === 'mailto:' && !/^mailto:/i.test(match.url)) {
        match.url = 'mailto:' + match.url;
      }
    };


    /**
     * LinkifyIt#onCompile()
     *
     * Override to modify basic RegExp-s.
     **/
    LinkifyIt.prototype.onCompile = function onCompile() {
    };


    var linkifyIt = LinkifyIt;

    /** Highest positive signed 32-bit float value */
    const maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1

    /** Bootstring parameters */
    const base$1 = 36;
    const tMin = 1;
    const tMax = 26;
    const skew = 38;
    const damp = 700;
    const initialBias = 72;
    const initialN = 128; // 0x80
    const delimiter = '-'; // '\x2D'

    /** Regular expressions */
    const regexPunycode = /^xn--/;
    const regexNonASCII = /[^\0-\x7E]/; // non-ASCII chars
    const regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g; // RFC 3490 separators

    /** Error messages */
    const errors = {
    	'overflow': 'Overflow: input needs wider integers to process',
    	'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
    	'invalid-input': 'Invalid input'
    };

    /** Convenience shortcuts */
    const baseMinusTMin = base$1 - tMin;
    const floor = Math.floor;
    const stringFromCharCode = String.fromCharCode;

    /*--------------------------------------------------------------------------*/

    /**
     * A generic error utility function.
     * @private
     * @param {String} type The error type.
     * @returns {Error} Throws a `RangeError` with the applicable error message.
     */
    function error(type) {
    	throw new RangeError(errors[type]);
    }

    /**
     * A generic `Array#map` utility function.
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} callback The function that gets called for every array
     * item.
     * @returns {Array} A new array of values returned by the callback function.
     */
    function map$1(array, fn) {
    	const result = [];
    	let length = array.length;
    	while (length--) {
    		result[length] = fn(array[length]);
    	}
    	return result;
    }

    /**
     * A simple `Array#map`-like wrapper to work with domain name strings or email
     * addresses.
     * @private
     * @param {String} domain The domain name or email address.
     * @param {Function} callback The function that gets called for every
     * character.
     * @returns {Array} A new string of characters returned by the callback
     * function.
     */
    function mapDomain(string, fn) {
    	const parts = string.split('@');
    	let result = '';
    	if (parts.length > 1) {
    		// In email addresses, only the domain name should be punycoded. Leave
    		// the local part (i.e. everything up to `@`) intact.
    		result = parts[0] + '@';
    		string = parts[1];
    	}
    	// Avoid `split(regex)` for IE8 compatibility. See #17.
    	string = string.replace(regexSeparators, '\x2E');
    	const labels = string.split('.');
    	const encoded = map$1(labels, fn).join('.');
    	return result + encoded;
    }

    /**
     * Creates an array containing the numeric code points of each Unicode
     * character in the string. While JavaScript uses UCS-2 internally,
     * this function will convert a pair of surrogate halves (each of which
     * UCS-2 exposes as separate characters) into a single code point,
     * matching UTF-16.
     * @see `punycode.ucs2.encode`
     * @see <https://mathiasbynens.be/notes/javascript-encoding>
     * @memberOf punycode.ucs2
     * @name decode
     * @param {String} string The Unicode input string (UCS-2).
     * @returns {Array} The new array of code points.
     */
    function ucs2decode(string) {
    	const output = [];
    	let counter = 0;
    	const length = string.length;
    	while (counter < length) {
    		const value = string.charCodeAt(counter++);
    		if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
    			// It's a high surrogate, and there is a next character.
    			const extra = string.charCodeAt(counter++);
    			if ((extra & 0xFC00) == 0xDC00) { // Low surrogate.
    				output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
    			} else {
    				// It's an unmatched surrogate; only append this code unit, in case the
    				// next code unit is the high surrogate of a surrogate pair.
    				output.push(value);
    				counter--;
    			}
    		} else {
    			output.push(value);
    		}
    	}
    	return output;
    }

    /**
     * Creates a string based on an array of numeric code points.
     * @see `punycode.ucs2.decode`
     * @memberOf punycode.ucs2
     * @name encode
     * @param {Array} codePoints The array of numeric code points.
     * @returns {String} The new Unicode string (UCS-2).
     */
    const ucs2encode = array => String.fromCodePoint(...array);

    /**
     * Converts a basic code point into a digit/integer.
     * @see `digitToBasic()`
     * @private
     * @param {Number} codePoint The basic numeric code point value.
     * @returns {Number} The numeric value of a basic code point (for use in
     * representing integers) in the range `0` to `base - 1`, or `base` if
     * the code point does not represent a value.
     */
    const basicToDigit = function(codePoint) {
    	if (codePoint - 0x30 < 0x0A) {
    		return codePoint - 0x16;
    	}
    	if (codePoint - 0x41 < 0x1A) {
    		return codePoint - 0x41;
    	}
    	if (codePoint - 0x61 < 0x1A) {
    		return codePoint - 0x61;
    	}
    	return base$1;
    };

    /**
     * Converts a digit/integer into a basic code point.
     * @see `basicToDigit()`
     * @private
     * @param {Number} digit The numeric value of a basic code point.
     * @returns {Number} The basic code point whose value (when used for
     * representing integers) is `digit`, which needs to be in the range
     * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
     * used; else, the lowercase form is used. The behavior is undefined
     * if `flag` is non-zero and `digit` has no uppercase form.
     */
    const digitToBasic = function(digit, flag) {
    	//  0..25 map to ASCII a..z or A..Z
    	// 26..35 map to ASCII 0..9
    	return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
    };

    /**
     * Bias adaptation function as per section 3.4 of RFC 3492.
     * https://tools.ietf.org/html/rfc3492#section-3.4
     * @private
     */
    const adapt = function(delta, numPoints, firstTime) {
    	let k = 0;
    	delta = firstTime ? floor(delta / damp) : delta >> 1;
    	delta += floor(delta / numPoints);
    	for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base$1) {
    		delta = floor(delta / baseMinusTMin);
    	}
    	return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
    };

    /**
     * Converts a Punycode string of ASCII-only symbols to a string of Unicode
     * symbols.
     * @memberOf punycode
     * @param {String} input The Punycode string of ASCII-only symbols.
     * @returns {String} The resulting string of Unicode symbols.
     */
    const decode$1 = function(input) {
    	// Don't use UCS-2.
    	const output = [];
    	const inputLength = input.length;
    	let i = 0;
    	let n = initialN;
    	let bias = initialBias;

    	// Handle the basic code points: let `basic` be the number of input code
    	// points before the last delimiter, or `0` if there is none, then copy
    	// the first basic code points to the output.

    	let basic = input.lastIndexOf(delimiter);
    	if (basic < 0) {
    		basic = 0;
    	}

    	for (let j = 0; j < basic; ++j) {
    		// if it's not a basic code point
    		if (input.charCodeAt(j) >= 0x80) {
    			error('not-basic');
    		}
    		output.push(input.charCodeAt(j));
    	}

    	// Main decoding loop: start just after the last delimiter if any basic code
    	// points were copied; start at the beginning otherwise.

    	for (let index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

    		// `index` is the index of the next character to be consumed.
    		// Decode a generalized variable-length integer into `delta`,
    		// which gets added to `i`. The overflow checking is easier
    		// if we increase `i` as we go, then subtract off its starting
    		// value at the end to obtain `delta`.
    		let oldi = i;
    		for (let w = 1, k = base$1; /* no condition */; k += base$1) {

    			if (index >= inputLength) {
    				error('invalid-input');
    			}

    			const digit = basicToDigit(input.charCodeAt(index++));

    			if (digit >= base$1 || digit > floor((maxInt - i) / w)) {
    				error('overflow');
    			}

    			i += digit * w;
    			const t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

    			if (digit < t) {
    				break;
    			}

    			const baseMinusT = base$1 - t;
    			if (w > floor(maxInt / baseMinusT)) {
    				error('overflow');
    			}

    			w *= baseMinusT;

    		}

    		const out = output.length + 1;
    		bias = adapt(i - oldi, out, oldi == 0);

    		// `i` was supposed to wrap around from `out` to `0`,
    		// incrementing `n` each time, so we'll fix that now:
    		if (floor(i / out) > maxInt - n) {
    			error('overflow');
    		}

    		n += floor(i / out);
    		i %= out;

    		// Insert `n` at position `i` of the output.
    		output.splice(i++, 0, n);

    	}

    	return String.fromCodePoint(...output);
    };

    /**
     * Converts a string of Unicode symbols (e.g. a domain name label) to a
     * Punycode string of ASCII-only symbols.
     * @memberOf punycode
     * @param {String} input The string of Unicode symbols.
     * @returns {String} The resulting Punycode string of ASCII-only symbols.
     */
    const encode$2 = function(input) {
    	const output = [];

    	// Convert the input in UCS-2 to an array of Unicode code points.
    	input = ucs2decode(input);

    	// Cache the length.
    	let inputLength = input.length;

    	// Initialize the state.
    	let n = initialN;
    	let delta = 0;
    	let bias = initialBias;

    	// Handle the basic code points.
    	for (const currentValue of input) {
    		if (currentValue < 0x80) {
    			output.push(stringFromCharCode(currentValue));
    		}
    	}

    	let basicLength = output.length;
    	let handledCPCount = basicLength;

    	// `handledCPCount` is the number of code points that have been handled;
    	// `basicLength` is the number of basic code points.

    	// Finish the basic string with a delimiter unless it's empty.
    	if (basicLength) {
    		output.push(delimiter);
    	}

    	// Main encoding loop:
    	while (handledCPCount < inputLength) {

    		// All non-basic code points < n have been handled already. Find the next
    		// larger one:
    		let m = maxInt;
    		for (const currentValue of input) {
    			if (currentValue >= n && currentValue < m) {
    				m = currentValue;
    			}
    		}

    		// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
    		// but guard against overflow.
    		const handledCPCountPlusOne = handledCPCount + 1;
    		if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
    			error('overflow');
    		}

    		delta += (m - n) * handledCPCountPlusOne;
    		n = m;

    		for (const currentValue of input) {
    			if (currentValue < n && ++delta > maxInt) {
    				error('overflow');
    			}
    			if (currentValue == n) {
    				// Represent delta as a generalized variable-length integer.
    				let q = delta;
    				for (let k = base$1; /* no condition */; k += base$1) {
    					const t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
    					if (q < t) {
    						break;
    					}
    					const qMinusT = q - t;
    					const baseMinusT = base$1 - t;
    					output.push(
    						stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
    					);
    					q = floor(qMinusT / baseMinusT);
    				}

    				output.push(stringFromCharCode(digitToBasic(q, 0)));
    				bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
    				delta = 0;
    				++handledCPCount;
    			}
    		}

    		++delta;
    		++n;

    	}
    	return output.join('');
    };

    /**
     * Converts a Punycode string representing a domain name or an email address
     * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
     * it doesn't matter if you call it on a string that has already been
     * converted to Unicode.
     * @memberOf punycode
     * @param {String} input The Punycoded domain name or email address to
     * convert to Unicode.
     * @returns {String} The Unicode representation of the given Punycode
     * string.
     */
    const toUnicode = function(input) {
    	return mapDomain(input, function(string) {
    		return regexPunycode.test(string)
    			? decode$1(string.slice(4).toLowerCase())
    			: string;
    	});
    };

    /**
     * Converts a Unicode string representing a domain name or an email address to
     * Punycode. Only the non-ASCII parts of the domain name will be converted,
     * i.e. it doesn't matter if you call it with a domain that's already in
     * ASCII.
     * @memberOf punycode
     * @param {String} input The domain name or email address to convert, as a
     * Unicode string.
     * @returns {String} The Punycode representation of the given domain name or
     * email address.
     */
    const toASCII = function(input) {
    	return mapDomain(input, function(string) {
    		return regexNonASCII.test(string)
    			? 'xn--' + encode$2(string)
    			: string;
    	});
    };

    /*--------------------------------------------------------------------------*/

    /** Define the public API */
    const punycode$1 = {
    	/**
    	 * A string representing the current Punycode.js version number.
    	 * @memberOf punycode
    	 * @type String
    	 */
    	'version': '2.1.0',
    	/**
    	 * An object of methods to convert from JavaScript's internal character
    	 * representation (UCS-2) to Unicode code points, and back.
    	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
    	 * @memberOf punycode
    	 * @type Object
    	 */
    	'ucs2': {
    		'decode': ucs2decode,
    		'encode': ucs2encode
    	},
    	'decode': decode$1,
    	'encode': encode$2,
    	'toASCII': toASCII,
    	'toUnicode': toUnicode
    };

    var punycode_es6 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ucs2decode: ucs2decode,
        ucs2encode: ucs2encode,
        decode: decode$1,
        encode: encode$2,
        toASCII: toASCII,
        toUnicode: toUnicode,
        'default': punycode$1
    });

    // markdown-it default options


    var _default = {
      options: {
        html:         false,        // Enable HTML tags in source
        xhtmlOut:     false,        // Use '/' to close single tags (<br />)
        breaks:       false,        // Convert '\n' in paragraphs into <br>
        langPrefix:   'language-',  // CSS language prefix for fenced blocks
        linkify:      false,        // autoconvert URL-like texts to links

        // Enable some language-neutral replacements + quotes beautification
        typographer:  false,

        // Double + single quotes replacement pairs, when typographer enabled,
        // and smartquotes on. Could be either a String or an Array.
        //
        // For example, you can use '«»„“' for Russian, '„“‚‘' for German,
        // and ['«\xA0', '\xA0»', '‹\xA0', '\xA0›'] for French (including nbsp).
        quotes: '\u201c\u201d\u2018\u2019', /* “”‘’ */

        // Highlighter function. Should return escaped HTML,
        // or '' if the source string is not changed and should be escaped externaly.
        // If result starts with <pre... internal wrapper is skipped.
        //
        // function (/*str, lang*/) { return ''; }
        //
        highlight: null,

        maxNesting:   100            // Internal protection, recursion limit
      },

      components: {

        core: {},
        block: {},
        inline: {}
      }
    };

    // "Zero" preset, with nothing enabled. Useful for manual configuring of simple


    var zero$1 = {
      options: {
        html:         false,        // Enable HTML tags in source
        xhtmlOut:     false,        // Use '/' to close single tags (<br />)
        breaks:       false,        // Convert '\n' in paragraphs into <br>
        langPrefix:   'language-',  // CSS language prefix for fenced blocks
        linkify:      false,        // autoconvert URL-like texts to links

        // Enable some language-neutral replacements + quotes beautification
        typographer:  false,

        // Double + single quotes replacement pairs, when typographer enabled,
        // and smartquotes on. Could be either a String or an Array.
        //
        // For example, you can use '«»„“' for Russian, '„“‚‘' for German,
        // and ['«\xA0', '\xA0»', '‹\xA0', '\xA0›'] for French (including nbsp).
        quotes: '\u201c\u201d\u2018\u2019', /* “”‘’ */

        // Highlighter function. Should return escaped HTML,
        // or '' if the source string is not changed and should be escaped externaly.
        // If result starts with <pre... internal wrapper is skipped.
        //
        // function (/*str, lang*/) { return ''; }
        //
        highlight: null,

        maxNesting:   20            // Internal protection, recursion limit
      },

      components: {

        core: {
          rules: [
            'normalize',
            'block',
            'inline'
          ]
        },

        block: {
          rules: [
            'paragraph'
          ]
        },

        inline: {
          rules: [
            'text'
          ],
          rules2: [
            'balance_pairs',
            'text_collapse'
          ]
        }
      }
    };

    // Commonmark default options


    var commonmark = {
      options: {
        html:         true,         // Enable HTML tags in source
        xhtmlOut:     true,         // Use '/' to close single tags (<br />)
        breaks:       false,        // Convert '\n' in paragraphs into <br>
        langPrefix:   'language-',  // CSS language prefix for fenced blocks
        linkify:      false,        // autoconvert URL-like texts to links

        // Enable some language-neutral replacements + quotes beautification
        typographer:  false,

        // Double + single quotes replacement pairs, when typographer enabled,
        // and smartquotes on. Could be either a String or an Array.
        //
        // For example, you can use '«»„“' for Russian, '„“‚‘' for German,
        // and ['«\xA0', '\xA0»', '‹\xA0', '\xA0›'] for French (including nbsp).
        quotes: '\u201c\u201d\u2018\u2019', /* “”‘’ */

        // Highlighter function. Should return escaped HTML,
        // or '' if the source string is not changed and should be escaped externaly.
        // If result starts with <pre... internal wrapper is skipped.
        //
        // function (/*str, lang*/) { return ''; }
        //
        highlight: null,

        maxNesting:   20            // Internal protection, recursion limit
      },

      components: {

        core: {
          rules: [
            'normalize',
            'block',
            'inline'
          ]
        },

        block: {
          rules: [
            'blockquote',
            'code',
            'fence',
            'heading',
            'hr',
            'html_block',
            'lheading',
            'list',
            'reference',
            'paragraph'
          ]
        },

        inline: {
          rules: [
            'autolink',
            'backticks',
            'emphasis',
            'entity',
            'escape',
            'html_inline',
            'image',
            'link',
            'newline',
            'text'
          ],
          rules2: [
            'balance_pairs',
            'emphasis',
            'text_collapse'
          ]
        }
      }
    };

    var punycode = /*@__PURE__*/getAugmentedNamespace(punycode_es6);

    var config = {
      default: _default,
      zero: zero$1,
      commonmark: commonmark
    };

    ////////////////////////////////////////////////////////////////////////////////
    //
    // This validator can prohibit more than really needed to prevent XSS. It's a
    // tradeoff to keep code simple and to be secure by default.
    //
    // If you need different setup - override validator method as you wish. Or
    // replace it with dummy function and use external sanitizer.
    //

    var BAD_PROTO_RE = /^(vbscript|javascript|file|data):/;
    var GOOD_DATA_RE = /^data:image\/(gif|png|jpeg|webp);/;

    function validateLink(url) {
      // url should be normalized at this point, and existing entities are decoded
      var str = url.trim().toLowerCase();

      return BAD_PROTO_RE.test(str) ? (GOOD_DATA_RE.test(str) ? true : false) : true;
    }

    ////////////////////////////////////////////////////////////////////////////////


    var RECODE_HOSTNAME_FOR = [ 'http:', 'https:', 'mailto:' ];

    function normalizeLink(url) {
      var parsed = mdurl.parse(url, true);

      if (parsed.hostname) {
        // Encode hostnames in urls like:
        // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`
        //
        // We don't encode unknown schemas, because it's likely that we encode
        // something we shouldn't (e.g. `skype:name` treated as `skype:host`)
        //
        if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {
          try {
            parsed.hostname = punycode.toASCII(parsed.hostname);
          } catch (er) { /**/ }
        }
      }

      return mdurl.encode(mdurl.format(parsed));
    }

    function normalizeLinkText(url) {
      var parsed = mdurl.parse(url, true);

      if (parsed.hostname) {
        // Encode hostnames in urls like:
        // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`
        //
        // We don't encode unknown schemas, because it's likely that we encode
        // something we shouldn't (e.g. `skype:name` treated as `skype:host`)
        //
        if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {
          try {
            parsed.hostname = punycode.toUnicode(parsed.hostname);
          } catch (er) { /**/ }
        }
      }

      // add '%' to exclude list because of https://github.com/markdown-it/markdown-it/issues/720
      return mdurl.decode(mdurl.format(parsed), mdurl.decode.defaultChars + '%');
    }


    /**
     * class MarkdownIt
     *
     * Main parser/renderer class.
     *
     * ##### Usage
     *
     * ```javascript
     * // node.js, "classic" way:
     * var MarkdownIt = require('markdown-it'),
     *     md = new MarkdownIt();
     * var result = md.render('# markdown-it rulezz!');
     *
     * // node.js, the same, but with sugar:
     * var md = require('markdown-it')();
     * var result = md.render('# markdown-it rulezz!');
     *
     * // browser without AMD, added to "window" on script load
     * // Note, there are no dash.
     * var md = window.markdownit();
     * var result = md.render('# markdown-it rulezz!');
     * ```
     *
     * Single line rendering, without paragraph wrap:
     *
     * ```javascript
     * var md = require('markdown-it')();
     * var result = md.renderInline('__markdown-it__ rulezz!');
     * ```
     **/

    /**
     * new MarkdownIt([presetName, options])
     * - presetName (String): optional, `commonmark` / `zero`
     * - options (Object)
     *
     * Creates parser instanse with given config. Can be called without `new`.
     *
     * ##### presetName
     *
     * MarkdownIt provides named presets as a convenience to quickly
     * enable/disable active syntax rules and options for common use cases.
     *
     * - ["commonmark"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/commonmark.js) -
     *   configures parser to strict [CommonMark](http://commonmark.org/) mode.
     * - [default](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/default.js) -
     *   similar to GFM, used when no preset name given. Enables all available rules,
     *   but still without html, typographer & autolinker.
     * - ["zero"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/zero.js) -
     *   all rules disabled. Useful to quickly setup your config via `.enable()`.
     *   For example, when you need only `bold` and `italic` markup and nothing else.
     *
     * ##### options:
     *
     * - __html__ - `false`. Set `true` to enable HTML tags in source. Be careful!
     *   That's not safe! You may need external sanitizer to protect output from XSS.
     *   It's better to extend features via plugins, instead of enabling HTML.
     * - __xhtmlOut__ - `false`. Set `true` to add '/' when closing single tags
     *   (`<br />`). This is needed only for full CommonMark compatibility. In real
     *   world you will need HTML output.
     * - __breaks__ - `false`. Set `true` to convert `\n` in paragraphs into `<br>`.
     * - __langPrefix__ - `language-`. CSS language class prefix for fenced blocks.
     *   Can be useful for external highlighters.
     * - __linkify__ - `false`. Set `true` to autoconvert URL-like text to links.
     * - __typographer__  - `false`. Set `true` to enable [some language-neutral
     *   replacement](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/replacements.js) +
     *   quotes beautification (smartquotes).
     * - __quotes__ - `“”‘’`, String or Array. Double + single quotes replacement
     *   pairs, when typographer enabled and smartquotes on. For example, you can
     *   use `'«»„“'` for Russian, `'„“‚‘'` for German, and
     *   `['«\xA0', '\xA0»', '‹\xA0', '\xA0›']` for French (including nbsp).
     * - __highlight__ - `null`. Highlighter function for fenced code blocks.
     *   Highlighter `function (str, lang)` should return escaped HTML. It can also
     *   return empty string if the source was not changed and should be escaped
     *   externaly. If result starts with <pre... internal wrapper is skipped.
     *
     * ##### Example
     *
     * ```javascript
     * // commonmark mode
     * var md = require('markdown-it')('commonmark');
     *
     * // default mode
     * var md = require('markdown-it')();
     *
     * // enable everything
     * var md = require('markdown-it')({
     *   html: true,
     *   linkify: true,
     *   typographer: true
     * });
     * ```
     *
     * ##### Syntax highlighting
     *
     * ```js
     * var hljs = require('highlight.js') // https://highlightjs.org/
     *
     * var md = require('markdown-it')({
     *   highlight: function (str, lang) {
     *     if (lang && hljs.getLanguage(lang)) {
     *       try {
     *         return hljs.highlight(str, { language: lang, ignoreIllegals: true }).value;
     *       } catch (__) {}
     *     }
     *
     *     return ''; // use external default escaping
     *   }
     * });
     * ```
     *
     * Or with full wrapper override (if you need assign class to `<pre>`):
     *
     * ```javascript
     * var hljs = require('highlight.js') // https://highlightjs.org/
     *
     * // Actual default values
     * var md = require('markdown-it')({
     *   highlight: function (str, lang) {
     *     if (lang && hljs.getLanguage(lang)) {
     *       try {
     *         return '<pre class="hljs"><code>' +
     *                hljs.highlight(str, { language: lang, ignoreIllegals: true }).value +
     *                '</code></pre>';
     *       } catch (__) {}
     *     }
     *
     *     return '<pre class="hljs"><code>' + md.utils.escapeHtml(str) + '</code></pre>';
     *   }
     * });
     * ```
     *
     **/
    function MarkdownIt(presetName, options) {
      if (!(this instanceof MarkdownIt)) {
        return new MarkdownIt(presetName, options);
      }

      if (!options) {
        if (!utils.isString(presetName)) {
          options = presetName || {};
          presetName = 'default';
        }
      }

      /**
       * MarkdownIt#inline -> ParserInline
       *
       * Instance of [[ParserInline]]. You may need it to add new rules when
       * writing plugins. For simple rules control use [[MarkdownIt.disable]] and
       * [[MarkdownIt.enable]].
       **/
      this.inline = new parser_inline();

      /**
       * MarkdownIt#block -> ParserBlock
       *
       * Instance of [[ParserBlock]]. You may need it to add new rules when
       * writing plugins. For simple rules control use [[MarkdownIt.disable]] and
       * [[MarkdownIt.enable]].
       **/
      this.block = new parser_block();

      /**
       * MarkdownIt#core -> Core
       *
       * Instance of [[Core]] chain executor. You may need it to add new rules when
       * writing plugins. For simple rules control use [[MarkdownIt.disable]] and
       * [[MarkdownIt.enable]].
       **/
      this.core = new parser_core();

      /**
       * MarkdownIt#renderer -> Renderer
       *
       * Instance of [[Renderer]]. Use it to modify output look. Or to add rendering
       * rules for new token types, generated by plugins.
       *
       * ##### Example
       *
       * ```javascript
       * var md = require('markdown-it')();
       *
       * function myToken(tokens, idx, options, env, self) {
       *   //...
       *   return result;
       * };
       *
       * md.renderer.rules['my_token'] = myToken
       * ```
       *
       * See [[Renderer]] docs and [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js).
       **/
      this.renderer = new renderer();

      /**
       * MarkdownIt#linkify -> LinkifyIt
       *
       * [linkify-it](https://github.com/markdown-it/linkify-it) instance.
       * Used by [linkify](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/linkify.js)
       * rule.
       **/
      this.linkify = new linkifyIt();

      /**
       * MarkdownIt#validateLink(url) -> Boolean
       *
       * Link validation function. CommonMark allows too much in links. By default
       * we disable `javascript:`, `vbscript:`, `file:` schemas, and almost all `data:...` schemas
       * except some embedded image types.
       *
       * You can change this behaviour:
       *
       * ```javascript
       * var md = require('markdown-it')();
       * // enable everything
       * md.validateLink = function () { return true; }
       * ```
       **/
      this.validateLink = validateLink;

      /**
       * MarkdownIt#normalizeLink(url) -> String
       *
       * Function used to encode link url to a machine-readable format,
       * which includes url-encoding, punycode, etc.
       **/
      this.normalizeLink = normalizeLink;

      /**
       * MarkdownIt#normalizeLinkText(url) -> String
       *
       * Function used to decode link url to a human-readable format`
       **/
      this.normalizeLinkText = normalizeLinkText;


      // Expose utils & helpers for easy acces from plugins

      /**
       * MarkdownIt#utils -> utils
       *
       * Assorted utility functions, useful to write plugins. See details
       * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/common/utils.js).
       **/
      this.utils = utils;

      /**
       * MarkdownIt#helpers -> helpers
       *
       * Link components parser functions, useful to write plugins. See details
       * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/helpers).
       **/
      this.helpers = utils.assign({}, helpers);


      this.options = {};
      this.configure(presetName);

      if (options) { this.set(options); }
    }


    /** chainable
     * MarkdownIt.set(options)
     *
     * Set parser options (in the same format as in constructor). Probably, you
     * will never need it, but you can change options after constructor call.
     *
     * ##### Example
     *
     * ```javascript
     * var md = require('markdown-it')()
     *             .set({ html: true, breaks: true })
     *             .set({ typographer, true });
     * ```
     *
     * __Note:__ To achieve the best possible performance, don't modify a
     * `markdown-it` instance options on the fly. If you need multiple configurations
     * it's best to create multiple instances and initialize each with separate
     * config.
     **/
    MarkdownIt.prototype.set = function (options) {
      utils.assign(this.options, options);
      return this;
    };


    /** chainable, internal
     * MarkdownIt.configure(presets)
     *
     * Batch load of all options and compenent settings. This is internal method,
     * and you probably will not need it. But if you will - see available presets
     * and data structure [here](https://github.com/markdown-it/markdown-it/tree/master/lib/presets)
     *
     * We strongly recommend to use presets instead of direct config loads. That
     * will give better compatibility with next versions.
     **/
    MarkdownIt.prototype.configure = function (presets) {
      var self = this, presetName;

      if (utils.isString(presets)) {
        presetName = presets;
        presets = config[presetName];
        if (!presets) { throw new Error('Wrong `markdown-it` preset "' + presetName + '", check name'); }
      }

      if (!presets) { throw new Error('Wrong `markdown-it` preset, can\'t be empty'); }

      if (presets.options) { self.set(presets.options); }

      if (presets.components) {
        Object.keys(presets.components).forEach(function (name) {
          if (presets.components[name].rules) {
            self[name].ruler.enableOnly(presets.components[name].rules);
          }
          if (presets.components[name].rules2) {
            self[name].ruler2.enableOnly(presets.components[name].rules2);
          }
        });
      }
      return this;
    };


    /** chainable
     * MarkdownIt.enable(list, ignoreInvalid)
     * - list (String|Array): rule name or list of rule names to enable
     * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
     *
     * Enable list or rules. It will automatically find appropriate components,
     * containing rules with given names. If rule not found, and `ignoreInvalid`
     * not set - throws exception.
     *
     * ##### Example
     *
     * ```javascript
     * var md = require('markdown-it')()
     *             .enable(['sub', 'sup'])
     *             .disable('smartquotes');
     * ```
     **/
    MarkdownIt.prototype.enable = function (list, ignoreInvalid) {
      var result = [];

      if (!Array.isArray(list)) { list = [ list ]; }

      [ 'core', 'block', 'inline' ].forEach(function (chain) {
        result = result.concat(this[chain].ruler.enable(list, true));
      }, this);

      result = result.concat(this.inline.ruler2.enable(list, true));

      var missed = list.filter(function (name) { return result.indexOf(name) < 0; });

      if (missed.length && !ignoreInvalid) {
        throw new Error('MarkdownIt. Failed to enable unknown rule(s): ' + missed);
      }

      return this;
    };


    /** chainable
     * MarkdownIt.disable(list, ignoreInvalid)
     * - list (String|Array): rule name or list of rule names to disable.
     * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
     *
     * The same as [[MarkdownIt.enable]], but turn specified rules off.
     **/
    MarkdownIt.prototype.disable = function (list, ignoreInvalid) {
      var result = [];

      if (!Array.isArray(list)) { list = [ list ]; }

      [ 'core', 'block', 'inline' ].forEach(function (chain) {
        result = result.concat(this[chain].ruler.disable(list, true));
      }, this);

      result = result.concat(this.inline.ruler2.disable(list, true));

      var missed = list.filter(function (name) { return result.indexOf(name) < 0; });

      if (missed.length && !ignoreInvalid) {
        throw new Error('MarkdownIt. Failed to disable unknown rule(s): ' + missed);
      }
      return this;
    };


    /** chainable
     * MarkdownIt.use(plugin, params)
     *
     * Load specified plugin with given params into current parser instance.
     * It's just a sugar to call `plugin(md, params)` with curring.
     *
     * ##### Example
     *
     * ```javascript
     * var iterator = require('markdown-it-for-inline');
     * var md = require('markdown-it')()
     *             .use(iterator, 'foo_replace', 'text', function (tokens, idx) {
     *               tokens[idx].content = tokens[idx].content.replace(/foo/g, 'bar');
     *             });
     * ```
     **/
    MarkdownIt.prototype.use = function (plugin /*, params, ... */) {
      var args = [ this ].concat(Array.prototype.slice.call(arguments, 1));
      plugin.apply(plugin, args);
      return this;
    };


    /** internal
     * MarkdownIt.parse(src, env) -> Array
     * - src (String): source string
     * - env (Object): environment sandbox
     *
     * Parse input string and return list of block tokens (special token type
     * "inline" will contain list of inline tokens). You should not call this
     * method directly, until you write custom renderer (for example, to produce
     * AST).
     *
     * `env` is used to pass data between "distributed" rules and return additional
     * metadata like reference info, needed for the renderer. It also can be used to
     * inject data in specific cases. Usually, you will be ok to pass `{}`,
     * and then pass updated object to renderer.
     **/
    MarkdownIt.prototype.parse = function (src, env) {
      if (typeof src !== 'string') {
        throw new Error('Input data should be a String');
      }

      var state = new this.core.State(src, this, env);

      this.core.process(state);

      return state.tokens;
    };


    /**
     * MarkdownIt.render(src [, env]) -> String
     * - src (String): source string
     * - env (Object): environment sandbox
     *
     * Render markdown string into html. It does all magic for you :).
     *
     * `env` can be used to inject additional metadata (`{}` by default).
     * But you will not need it with high probability. See also comment
     * in [[MarkdownIt.parse]].
     **/
    MarkdownIt.prototype.render = function (src, env) {
      env = env || {};

      return this.renderer.render(this.parse(src, env), this.options, env);
    };


    /** internal
     * MarkdownIt.parseInline(src, env) -> Array
     * - src (String): source string
     * - env (Object): environment sandbox
     *
     * The same as [[MarkdownIt.parse]] but skip all block rules. It returns the
     * block tokens list with the single `inline` element, containing parsed inline
     * tokens in `children` property. Also updates `env` object.
     **/
    MarkdownIt.prototype.parseInline = function (src, env) {
      var state = new this.core.State(src, this, env);

      state.inlineMode = true;
      this.core.process(state);

      return state.tokens;
    };


    /**
     * MarkdownIt.renderInline(src [, env]) -> String
     * - src (String): source string
     * - env (Object): environment sandbox
     *
     * Similar to [[MarkdownIt.render]] but for single paragraph content. Result
     * will NOT be wrapped into `<p>` tags.
     **/
    MarkdownIt.prototype.renderInline = function (src, env) {
      env = env || {};

      return this.renderer.render(this.parseInline(src, env), this.options, env);
    };


    var lib$1 = MarkdownIt;

    var markdownIt = lib$1;

    var grinning = "😀";
    var smiley = "😃";
    var smile$1 = "😄";
    var grin = "😁";
    var laughing = "😆";
    var satisfied = "😆";
    var sweat_smile = "😅";
    var rofl = "🤣";
    var joy = "😂";
    var slightly_smiling_face = "🙂";
    var upside_down_face = "🙃";
    var wink = "😉";
    var blush = "😊";
    var innocent = "😇";
    var smiling_face_with_three_hearts = "🥰";
    var heart_eyes = "😍";
    var star_struck = "🤩";
    var kissing_heart = "😘";
    var kissing = "😗";
    var relaxed = "☺️";
    var kissing_closed_eyes = "😚";
    var kissing_smiling_eyes = "😙";
    var smiling_face_with_tear = "🥲";
    var yum = "😋";
    var stuck_out_tongue = "😛";
    var stuck_out_tongue_winking_eye = "😜";
    var zany_face = "🤪";
    var stuck_out_tongue_closed_eyes = "😝";
    var money_mouth_face = "🤑";
    var hugs = "🤗";
    var hand_over_mouth = "🤭";
    var shushing_face = "🤫";
    var thinking = "🤔";
    var zipper_mouth_face = "🤐";
    var raised_eyebrow = "🤨";
    var neutral_face = "😐";
    var expressionless = "😑";
    var no_mouth = "😶";
    var smirk = "😏";
    var unamused = "😒";
    var roll_eyes = "🙄";
    var grimacing = "😬";
    var lying_face = "🤥";
    var relieved = "😌";
    var pensive = "😔";
    var sleepy = "😪";
    var drooling_face = "🤤";
    var sleeping = "😴";
    var mask = "😷";
    var face_with_thermometer = "🤒";
    var face_with_head_bandage = "🤕";
    var nauseated_face = "🤢";
    var vomiting_face = "🤮";
    var sneezing_face = "🤧";
    var hot_face = "🥵";
    var cold_face = "🥶";
    var woozy_face = "🥴";
    var dizzy_face = "😵";
    var exploding_head = "🤯";
    var cowboy_hat_face = "🤠";
    var partying_face = "🥳";
    var disguised_face = "🥸";
    var sunglasses = "😎";
    var nerd_face = "🤓";
    var monocle_face = "🧐";
    var confused = "😕";
    var worried = "😟";
    var slightly_frowning_face = "🙁";
    var frowning_face = "☹️";
    var open_mouth = "😮";
    var hushed = "😯";
    var astonished = "😲";
    var flushed = "😳";
    var pleading_face = "🥺";
    var frowning = "😦";
    var anguished = "😧";
    var fearful = "😨";
    var cold_sweat = "😰";
    var disappointed_relieved = "😥";
    var cry = "😢";
    var sob = "😭";
    var scream = "😱";
    var confounded = "😖";
    var persevere = "😣";
    var disappointed = "😞";
    var sweat = "😓";
    var weary = "😩";
    var tired_face = "😫";
    var yawning_face = "🥱";
    var triumph = "😤";
    var rage = "😡";
    var pout = "😡";
    var angry = "😠";
    var cursing_face = "🤬";
    var smiling_imp = "😈";
    var imp = "👿";
    var skull = "💀";
    var skull_and_crossbones = "☠️";
    var hankey = "💩";
    var poop = "💩";
    var shit = "💩";
    var clown_face = "🤡";
    var japanese_ogre = "👹";
    var japanese_goblin = "👺";
    var ghost = "👻";
    var alien = "👽";
    var space_invader = "👾";
    var robot = "🤖";
    var smiley_cat = "😺";
    var smile_cat = "😸";
    var joy_cat = "😹";
    var heart_eyes_cat = "😻";
    var smirk_cat = "😼";
    var kissing_cat = "😽";
    var scream_cat = "🙀";
    var crying_cat_face = "😿";
    var pouting_cat = "😾";
    var see_no_evil = "🙈";
    var hear_no_evil = "🙉";
    var speak_no_evil = "🙊";
    var kiss = "💋";
    var love_letter = "💌";
    var cupid = "💘";
    var gift_heart = "💝";
    var sparkling_heart = "💖";
    var heartpulse = "💗";
    var heartbeat = "💓";
    var revolving_hearts = "💞";
    var two_hearts = "💕";
    var heart_decoration = "💟";
    var heavy_heart_exclamation = "❣️";
    var broken_heart = "💔";
    var heart = "❤️";
    var orange_heart = "🧡";
    var yellow_heart = "💛";
    var green_heart = "💚";
    var blue_heart = "💙";
    var purple_heart = "💜";
    var brown_heart = "🤎";
    var black_heart = "🖤";
    var white_heart = "🤍";
    var anger = "💢";
    var boom = "💥";
    var collision = "💥";
    var dizzy = "💫";
    var sweat_drops = "💦";
    var dash$1 = "💨";
    var hole = "🕳️";
    var bomb = "💣";
    var speech_balloon = "💬";
    var eye_speech_bubble = "👁️‍🗨️";
    var left_speech_bubble = "🗨️";
    var right_anger_bubble = "🗯️";
    var thought_balloon = "💭";
    var zzz = "💤";
    var wave = "👋";
    var raised_back_of_hand = "🤚";
    var raised_hand_with_fingers_splayed = "🖐️";
    var hand = "✋";
    var raised_hand = "✋";
    var vulcan_salute = "🖖";
    var ok_hand = "👌";
    var pinched_fingers = "🤌";
    var pinching_hand = "🤏";
    var v = "✌️";
    var crossed_fingers = "🤞";
    var love_you_gesture = "🤟";
    var metal = "🤘";
    var call_me_hand = "🤙";
    var point_left = "👈";
    var point_right = "👉";
    var point_up_2 = "👆";
    var middle_finger = "🖕";
    var fu = "🖕";
    var point_down = "👇";
    var point_up = "☝️";
    var thumbsup = "👍";
    var thumbsdown = "👎";
    var fist_raised = "✊";
    var fist = "✊";
    var fist_oncoming = "👊";
    var facepunch = "👊";
    var punch = "👊";
    var fist_left = "🤛";
    var fist_right = "🤜";
    var clap = "👏";
    var raised_hands = "🙌";
    var open_hands = "👐";
    var palms_up_together = "🤲";
    var handshake = "🤝";
    var pray = "🙏";
    var writing_hand = "✍️";
    var nail_care = "💅";
    var selfie = "🤳";
    var muscle = "💪";
    var mechanical_arm = "🦾";
    var mechanical_leg = "🦿";
    var leg$1 = "🦵";
    var foot = "🦶";
    var ear = "👂";
    var ear_with_hearing_aid = "🦻";
    var nose = "👃";
    var brain = "🧠";
    var anatomical_heart = "🫀";
    var lungs = "🫁";
    var tooth = "🦷";
    var bone = "🦴";
    var eyes = "👀";
    var eye = "👁️";
    var tongue = "👅";
    var lips = "👄";
    var baby = "👶";
    var child = "🧒";
    var boy = "👦";
    var girl = "👧";
    var adult = "🧑";
    var blond_haired_person = "👱";
    var man = "👨";
    var bearded_person = "🧔";
    var red_haired_man = "👨‍🦰";
    var curly_haired_man = "👨‍🦱";
    var white_haired_man = "👨‍🦳";
    var bald_man = "👨‍🦲";
    var woman = "👩";
    var red_haired_woman = "👩‍🦰";
    var person_red_hair = "🧑‍🦰";
    var curly_haired_woman = "👩‍🦱";
    var person_curly_hair = "🧑‍🦱";
    var white_haired_woman = "👩‍🦳";
    var person_white_hair = "🧑‍🦳";
    var bald_woman = "👩‍🦲";
    var person_bald = "🧑‍🦲";
    var blond_haired_woman = "👱‍♀️";
    var blonde_woman = "👱‍♀️";
    var blond_haired_man = "👱‍♂️";
    var older_adult = "🧓";
    var older_man = "👴";
    var older_woman = "👵";
    var frowning_person = "🙍";
    var frowning_man = "🙍‍♂️";
    var frowning_woman = "🙍‍♀️";
    var pouting_face = "🙎";
    var pouting_man = "🙎‍♂️";
    var pouting_woman = "🙎‍♀️";
    var no_good = "🙅";
    var no_good_man = "🙅‍♂️";
    var ng_man = "🙅‍♂️";
    var no_good_woman = "🙅‍♀️";
    var ng_woman = "🙅‍♀️";
    var ok_person = "🙆";
    var ok_man = "🙆‍♂️";
    var ok_woman = "🙆‍♀️";
    var tipping_hand_person = "💁";
    var information_desk_person = "💁";
    var tipping_hand_man = "💁‍♂️";
    var sassy_man = "💁‍♂️";
    var tipping_hand_woman = "💁‍♀️";
    var sassy_woman = "💁‍♀️";
    var raising_hand = "🙋";
    var raising_hand_man = "🙋‍♂️";
    var raising_hand_woman = "🙋‍♀️";
    var deaf_person = "🧏";
    var deaf_man = "🧏‍♂️";
    var deaf_woman = "🧏‍♀️";
    var bow = "🙇";
    var bowing_man = "🙇‍♂️";
    var bowing_woman = "🙇‍♀️";
    var facepalm = "🤦";
    var man_facepalming = "🤦‍♂️";
    var woman_facepalming = "🤦‍♀️";
    var shrug = "🤷";
    var man_shrugging = "🤷‍♂️";
    var woman_shrugging = "🤷‍♀️";
    var health_worker = "🧑‍⚕️";
    var man_health_worker = "👨‍⚕️";
    var woman_health_worker = "👩‍⚕️";
    var student = "🧑‍🎓";
    var man_student = "👨‍🎓";
    var woman_student = "👩‍🎓";
    var teacher = "🧑‍🏫";
    var man_teacher = "👨‍🏫";
    var woman_teacher = "👩‍🏫";
    var judge = "🧑‍⚖️";
    var man_judge = "👨‍⚖️";
    var woman_judge = "👩‍⚖️";
    var farmer = "🧑‍🌾";
    var man_farmer = "👨‍🌾";
    var woman_farmer = "👩‍🌾";
    var cook = "🧑‍🍳";
    var man_cook = "👨‍🍳";
    var woman_cook = "👩‍🍳";
    var mechanic = "🧑‍🔧";
    var man_mechanic = "👨‍🔧";
    var woman_mechanic = "👩‍🔧";
    var factory_worker = "🧑‍🏭";
    var man_factory_worker = "👨‍🏭";
    var woman_factory_worker = "👩‍🏭";
    var office_worker = "🧑‍💼";
    var man_office_worker = "👨‍💼";
    var woman_office_worker = "👩‍💼";
    var scientist = "🧑‍🔬";
    var man_scientist = "👨‍🔬";
    var woman_scientist = "👩‍🔬";
    var technologist = "🧑‍💻";
    var man_technologist = "👨‍💻";
    var woman_technologist = "👩‍💻";
    var singer = "🧑‍🎤";
    var man_singer = "👨‍🎤";
    var woman_singer = "👩‍🎤";
    var artist = "🧑‍🎨";
    var man_artist = "👨‍🎨";
    var woman_artist = "👩‍🎨";
    var pilot = "🧑‍✈️";
    var man_pilot = "👨‍✈️";
    var woman_pilot = "👩‍✈️";
    var astronaut = "🧑‍🚀";
    var man_astronaut = "👨‍🚀";
    var woman_astronaut = "👩‍🚀";
    var firefighter = "🧑‍🚒";
    var man_firefighter = "👨‍🚒";
    var woman_firefighter = "👩‍🚒";
    var police_officer = "👮";
    var cop = "👮";
    var policeman = "👮‍♂️";
    var policewoman = "👮‍♀️";
    var detective = "🕵️";
    var male_detective = "🕵️‍♂️";
    var female_detective = "🕵️‍♀️";
    var guard = "💂";
    var guardsman = "💂‍♂️";
    var guardswoman = "💂‍♀️";
    var ninja = "🥷";
    var construction_worker = "👷";
    var construction_worker_man = "👷‍♂️";
    var construction_worker_woman = "👷‍♀️";
    var prince = "🤴";
    var princess = "👸";
    var person_with_turban = "👳";
    var man_with_turban = "👳‍♂️";
    var woman_with_turban = "👳‍♀️";
    var man_with_gua_pi_mao = "👲";
    var woman_with_headscarf = "🧕";
    var person_in_tuxedo = "🤵";
    var man_in_tuxedo = "🤵‍♂️";
    var woman_in_tuxedo = "🤵‍♀️";
    var person_with_veil = "👰";
    var man_with_veil = "👰‍♂️";
    var woman_with_veil = "👰‍♀️";
    var bride_with_veil = "👰‍♀️";
    var pregnant_woman = "🤰";
    var breast_feeding = "🤱";
    var woman_feeding_baby = "👩‍🍼";
    var man_feeding_baby = "👨‍🍼";
    var person_feeding_baby = "🧑‍🍼";
    var angel = "👼";
    var santa = "🎅";
    var mrs_claus = "🤶";
    var mx_claus = "🧑‍🎄";
    var superhero = "🦸";
    var superhero_man = "🦸‍♂️";
    var superhero_woman = "🦸‍♀️";
    var supervillain = "🦹";
    var supervillain_man = "🦹‍♂️";
    var supervillain_woman = "🦹‍♀️";
    var mage = "🧙";
    var mage_man = "🧙‍♂️";
    var mage_woman = "🧙‍♀️";
    var fairy = "🧚";
    var fairy_man = "🧚‍♂️";
    var fairy_woman = "🧚‍♀️";
    var vampire = "🧛";
    var vampire_man = "🧛‍♂️";
    var vampire_woman = "🧛‍♀️";
    var merperson = "🧜";
    var merman = "🧜‍♂️";
    var mermaid = "🧜‍♀️";
    var elf = "🧝";
    var elf_man = "🧝‍♂️";
    var elf_woman = "🧝‍♀️";
    var genie = "🧞";
    var genie_man = "🧞‍♂️";
    var genie_woman = "🧞‍♀️";
    var zombie = "🧟";
    var zombie_man = "🧟‍♂️";
    var zombie_woman = "🧟‍♀️";
    var massage = "💆";
    var massage_man = "💆‍♂️";
    var massage_woman = "💆‍♀️";
    var haircut = "💇";
    var haircut_man = "💇‍♂️";
    var haircut_woman = "💇‍♀️";
    var walking = "🚶";
    var walking_man = "🚶‍♂️";
    var walking_woman = "🚶‍♀️";
    var standing_person = "🧍";
    var standing_man = "🧍‍♂️";
    var standing_woman = "🧍‍♀️";
    var kneeling_person = "🧎";
    var kneeling_man = "🧎‍♂️";
    var kneeling_woman = "🧎‍♀️";
    var person_with_probing_cane = "🧑‍🦯";
    var man_with_probing_cane = "👨‍🦯";
    var woman_with_probing_cane = "👩‍🦯";
    var person_in_motorized_wheelchair = "🧑‍🦼";
    var man_in_motorized_wheelchair = "👨‍🦼";
    var woman_in_motorized_wheelchair = "👩‍🦼";
    var person_in_manual_wheelchair = "🧑‍🦽";
    var man_in_manual_wheelchair = "👨‍🦽";
    var woman_in_manual_wheelchair = "👩‍🦽";
    var runner = "🏃";
    var running = "🏃";
    var running_man = "🏃‍♂️";
    var running_woman = "🏃‍♀️";
    var woman_dancing = "💃";
    var dancer = "💃";
    var man_dancing = "🕺";
    var business_suit_levitating = "🕴️";
    var dancers = "👯";
    var dancing_men = "👯‍♂️";
    var dancing_women = "👯‍♀️";
    var sauna_person = "🧖";
    var sauna_man = "🧖‍♂️";
    var sauna_woman = "🧖‍♀️";
    var climbing = "🧗";
    var climbing_man = "🧗‍♂️";
    var climbing_woman = "🧗‍♀️";
    var person_fencing = "🤺";
    var horse_racing = "🏇";
    var skier = "⛷️";
    var snowboarder = "🏂";
    var golfing = "🏌️";
    var golfing_man = "🏌️‍♂️";
    var golfing_woman = "🏌️‍♀️";
    var surfer = "🏄";
    var surfing_man = "🏄‍♂️";
    var surfing_woman = "🏄‍♀️";
    var rowboat = "🚣";
    var rowing_man = "🚣‍♂️";
    var rowing_woman = "🚣‍♀️";
    var swimmer = "🏊";
    var swimming_man = "🏊‍♂️";
    var swimming_woman = "🏊‍♀️";
    var bouncing_ball_person = "⛹️";
    var bouncing_ball_man = "⛹️‍♂️";
    var basketball_man = "⛹️‍♂️";
    var bouncing_ball_woman = "⛹️‍♀️";
    var basketball_woman = "⛹️‍♀️";
    var weight_lifting = "🏋️";
    var weight_lifting_man = "🏋️‍♂️";
    var weight_lifting_woman = "🏋️‍♀️";
    var bicyclist = "🚴";
    var biking_man = "🚴‍♂️";
    var biking_woman = "🚴‍♀️";
    var mountain_bicyclist = "🚵";
    var mountain_biking_man = "🚵‍♂️";
    var mountain_biking_woman = "🚵‍♀️";
    var cartwheeling = "🤸";
    var man_cartwheeling = "🤸‍♂️";
    var woman_cartwheeling = "🤸‍♀️";
    var wrestling = "🤼";
    var men_wrestling = "🤼‍♂️";
    var women_wrestling = "🤼‍♀️";
    var water_polo = "🤽";
    var man_playing_water_polo = "🤽‍♂️";
    var woman_playing_water_polo = "🤽‍♀️";
    var handball_person = "🤾";
    var man_playing_handball = "🤾‍♂️";
    var woman_playing_handball = "🤾‍♀️";
    var juggling_person = "🤹";
    var man_juggling = "🤹‍♂️";
    var woman_juggling = "🤹‍♀️";
    var lotus_position = "🧘";
    var lotus_position_man = "🧘‍♂️";
    var lotus_position_woman = "🧘‍♀️";
    var bath = "🛀";
    var sleeping_bed = "🛌";
    var people_holding_hands = "🧑‍🤝‍🧑";
    var two_women_holding_hands = "👭";
    var couple = "👫";
    var two_men_holding_hands = "👬";
    var couplekiss = "💏";
    var couplekiss_man_woman = "👩‍❤️‍💋‍👨";
    var couplekiss_man_man = "👨‍❤️‍💋‍👨";
    var couplekiss_woman_woman = "👩‍❤️‍💋‍👩";
    var couple_with_heart = "💑";
    var couple_with_heart_woman_man = "👩‍❤️‍👨";
    var couple_with_heart_man_man = "👨‍❤️‍👨";
    var couple_with_heart_woman_woman = "👩‍❤️‍👩";
    var family = "👪";
    var family_man_woman_boy = "👨‍👩‍👦";
    var family_man_woman_girl = "👨‍👩‍👧";
    var family_man_woman_girl_boy = "👨‍👩‍👧‍👦";
    var family_man_woman_boy_boy = "👨‍👩‍👦‍👦";
    var family_man_woman_girl_girl = "👨‍👩‍👧‍👧";
    var family_man_man_boy = "👨‍👨‍👦";
    var family_man_man_girl = "👨‍👨‍👧";
    var family_man_man_girl_boy = "👨‍👨‍👧‍👦";
    var family_man_man_boy_boy = "👨‍👨‍👦‍👦";
    var family_man_man_girl_girl = "👨‍👨‍👧‍👧";
    var family_woman_woman_boy = "👩‍👩‍👦";
    var family_woman_woman_girl = "👩‍👩‍👧";
    var family_woman_woman_girl_boy = "👩‍👩‍👧‍👦";
    var family_woman_woman_boy_boy = "👩‍👩‍👦‍👦";
    var family_woman_woman_girl_girl = "👩‍👩‍👧‍👧";
    var family_man_boy = "👨‍👦";
    var family_man_boy_boy = "👨‍👦‍👦";
    var family_man_girl = "👨‍👧";
    var family_man_girl_boy = "👨‍👧‍👦";
    var family_man_girl_girl = "👨‍👧‍👧";
    var family_woman_boy = "👩‍👦";
    var family_woman_boy_boy = "👩‍👦‍👦";
    var family_woman_girl = "👩‍👧";
    var family_woman_girl_boy = "👩‍👧‍👦";
    var family_woman_girl_girl = "👩‍👧‍👧";
    var speaking_head = "🗣️";
    var bust_in_silhouette = "👤";
    var busts_in_silhouette = "👥";
    var people_hugging = "🫂";
    var footprints = "👣";
    var monkey_face = "🐵";
    var monkey = "🐒";
    var gorilla = "🦍";
    var orangutan = "🦧";
    var dog = "🐶";
    var dog2 = "🐕";
    var guide_dog = "🦮";
    var service_dog = "🐕‍🦺";
    var poodle = "🐩";
    var wolf = "🐺";
    var fox_face = "🦊";
    var raccoon = "🦝";
    var cat = "🐱";
    var cat2 = "🐈";
    var black_cat = "🐈‍⬛";
    var lion = "🦁";
    var tiger = "🐯";
    var tiger2 = "🐅";
    var leopard = "🐆";
    var horse = "🐴";
    var racehorse = "🐎";
    var unicorn = "🦄";
    var zebra = "🦓";
    var deer = "🦌";
    var bison = "🦬";
    var cow = "🐮";
    var ox = "🐂";
    var water_buffalo = "🐃";
    var cow2 = "🐄";
    var pig = "🐷";
    var pig2 = "🐖";
    var boar = "🐗";
    var pig_nose = "🐽";
    var ram = "🐏";
    var sheep = "🐑";
    var goat = "🐐";
    var dromedary_camel = "🐪";
    var camel = "🐫";
    var llama = "🦙";
    var giraffe = "🦒";
    var elephant = "🐘";
    var mammoth = "🦣";
    var rhinoceros = "🦏";
    var hippopotamus = "🦛";
    var mouse = "🐭";
    var mouse2 = "🐁";
    var rat = "🐀";
    var hamster = "🐹";
    var rabbit = "🐰";
    var rabbit2 = "🐇";
    var chipmunk = "🐿️";
    var beaver = "🦫";
    var hedgehog = "🦔";
    var bat = "🦇";
    var bear = "🐻";
    var polar_bear = "🐻‍❄️";
    var koala = "🐨";
    var panda_face = "🐼";
    var sloth = "🦥";
    var otter = "🦦";
    var skunk = "🦨";
    var kangaroo = "🦘";
    var badger = "🦡";
    var feet = "🐾";
    var paw_prints = "🐾";
    var turkey = "🦃";
    var chicken = "🐔";
    var rooster = "🐓";
    var hatching_chick = "🐣";
    var baby_chick = "🐤";
    var hatched_chick = "🐥";
    var bird = "🐦";
    var penguin = "🐧";
    var dove = "🕊️";
    var eagle = "🦅";
    var duck = "🦆";
    var swan = "🦢";
    var owl = "🦉";
    var dodo = "🦤";
    var feather = "🪶";
    var flamingo = "🦩";
    var peacock = "🦚";
    var parrot = "🦜";
    var frog = "🐸";
    var crocodile = "🐊";
    var turtle = "🐢";
    var lizard = "🦎";
    var snake = "🐍";
    var dragon_face = "🐲";
    var dragon = "🐉";
    var sauropod = "🦕";
    var whale = "🐳";
    var whale2 = "🐋";
    var dolphin = "🐬";
    var flipper = "🐬";
    var seal = "🦭";
    var fish = "🐟";
    var tropical_fish = "🐠";
    var blowfish = "🐡";
    var shark = "🦈";
    var octopus = "🐙";
    var shell = "🐚";
    var snail = "🐌";
    var butterfly = "🦋";
    var bug = "🐛";
    var ant = "🐜";
    var bee = "🐝";
    var honeybee = "🐝";
    var beetle = "🪲";
    var lady_beetle = "🐞";
    var cricket = "🦗";
    var cockroach = "🪳";
    var spider = "🕷️";
    var spider_web = "🕸️";
    var scorpion = "🦂";
    var mosquito = "🦟";
    var fly = "🪰";
    var worm = "🪱";
    var microbe = "🦠";
    var bouquet = "💐";
    var cherry_blossom = "🌸";
    var white_flower = "💮";
    var rosette = "🏵️";
    var rose = "🌹";
    var wilted_flower = "🥀";
    var hibiscus = "🌺";
    var sunflower = "🌻";
    var blossom = "🌼";
    var tulip = "🌷";
    var seedling = "🌱";
    var potted_plant = "🪴";
    var evergreen_tree = "🌲";
    var deciduous_tree = "🌳";
    var palm_tree = "🌴";
    var cactus = "🌵";
    var ear_of_rice = "🌾";
    var herb = "🌿";
    var shamrock = "☘️";
    var four_leaf_clover = "🍀";
    var maple_leaf = "🍁";
    var fallen_leaf = "🍂";
    var leaves = "🍃";
    var grapes = "🍇";
    var melon = "🍈";
    var watermelon = "🍉";
    var tangerine = "🍊";
    var orange = "🍊";
    var mandarin = "🍊";
    var lemon = "🍋";
    var banana = "🍌";
    var pineapple = "🍍";
    var mango = "🥭";
    var apple = "🍎";
    var green_apple = "🍏";
    var pear = "🍐";
    var peach = "🍑";
    var cherries = "🍒";
    var strawberry = "🍓";
    var blueberries = "🫐";
    var kiwi_fruit = "🥝";
    var tomato = "🍅";
    var olive = "🫒";
    var coconut = "🥥";
    var avocado = "🥑";
    var eggplant = "🍆";
    var potato = "🥔";
    var carrot = "🥕";
    var corn = "🌽";
    var hot_pepper = "🌶️";
    var bell_pepper = "🫑";
    var cucumber = "🥒";
    var leafy_green = "🥬";
    var broccoli = "🥦";
    var garlic = "🧄";
    var onion = "🧅";
    var mushroom = "🍄";
    var peanuts = "🥜";
    var chestnut = "🌰";
    var bread = "🍞";
    var croissant = "🥐";
    var baguette_bread = "🥖";
    var flatbread = "🫓";
    var pretzel = "🥨";
    var bagel = "🥯";
    var pancakes = "🥞";
    var waffle = "🧇";
    var cheese = "🧀";
    var meat_on_bone = "🍖";
    var poultry_leg = "🍗";
    var cut_of_meat = "🥩";
    var bacon = "🥓";
    var hamburger = "🍔";
    var fries = "🍟";
    var pizza = "🍕";
    var hotdog = "🌭";
    var sandwich = "🥪";
    var taco = "🌮";
    var burrito = "🌯";
    var tamale = "🫔";
    var stuffed_flatbread = "🥙";
    var falafel = "🧆";
    var egg = "🥚";
    var fried_egg = "🍳";
    var shallow_pan_of_food = "🥘";
    var stew = "🍲";
    var fondue = "🫕";
    var bowl_with_spoon = "🥣";
    var green_salad = "🥗";
    var popcorn = "🍿";
    var butter = "🧈";
    var salt = "🧂";
    var canned_food = "🥫";
    var bento = "🍱";
    var rice_cracker = "🍘";
    var rice_ball = "🍙";
    var rice = "🍚";
    var curry = "🍛";
    var ramen = "🍜";
    var spaghetti = "🍝";
    var sweet_potato = "🍠";
    var oden = "🍢";
    var sushi = "🍣";
    var fried_shrimp = "🍤";
    var fish_cake = "🍥";
    var moon_cake = "🥮";
    var dango = "🍡";
    var dumpling = "🥟";
    var fortune_cookie = "🥠";
    var takeout_box = "🥡";
    var crab = "🦀";
    var lobster = "🦞";
    var shrimp = "🦐";
    var squid = "🦑";
    var oyster = "🦪";
    var icecream = "🍦";
    var shaved_ice = "🍧";
    var ice_cream = "🍨";
    var doughnut = "🍩";
    var cookie = "🍪";
    var birthday = "🎂";
    var cake = "🍰";
    var cupcake = "🧁";
    var pie = "🥧";
    var chocolate_bar = "🍫";
    var candy = "🍬";
    var lollipop = "🍭";
    var custard = "🍮";
    var honey_pot = "🍯";
    var baby_bottle = "🍼";
    var milk_glass = "🥛";
    var coffee = "☕";
    var teapot = "🫖";
    var tea = "🍵";
    var sake = "🍶";
    var champagne = "🍾";
    var wine_glass = "🍷";
    var cocktail = "🍸";
    var tropical_drink = "🍹";
    var beer = "🍺";
    var beers = "🍻";
    var clinking_glasses = "🥂";
    var tumbler_glass = "🥃";
    var cup_with_straw = "🥤";
    var bubble_tea = "🧋";
    var beverage_box = "🧃";
    var mate = "🧉";
    var ice_cube = "🧊";
    var chopsticks = "🥢";
    var plate_with_cutlery = "🍽️";
    var fork_and_knife = "🍴";
    var spoon = "🥄";
    var hocho = "🔪";
    var knife = "🔪";
    var amphora = "🏺";
    var earth_africa = "🌍";
    var earth_americas = "🌎";
    var earth_asia = "🌏";
    var globe_with_meridians = "🌐";
    var world_map = "🗺️";
    var japan = "🗾";
    var compass = "🧭";
    var mountain_snow = "🏔️";
    var mountain = "⛰️";
    var volcano = "🌋";
    var mount_fuji = "🗻";
    var camping = "🏕️";
    var beach_umbrella = "🏖️";
    var desert = "🏜️";
    var desert_island = "🏝️";
    var national_park = "🏞️";
    var stadium = "🏟️";
    var classical_building = "🏛️";
    var building_construction = "🏗️";
    var bricks = "🧱";
    var rock = "🪨";
    var wood = "🪵";
    var hut = "🛖";
    var houses = "🏘️";
    var derelict_house = "🏚️";
    var house = "🏠";
    var house_with_garden = "🏡";
    var office = "🏢";
    var post_office = "🏣";
    var european_post_office = "🏤";
    var hospital = "🏥";
    var bank = "🏦";
    var hotel = "🏨";
    var love_hotel = "🏩";
    var convenience_store = "🏪";
    var school = "🏫";
    var department_store = "🏬";
    var factory = "🏭";
    var japanese_castle = "🏯";
    var european_castle = "🏰";
    var wedding = "💒";
    var tokyo_tower = "🗼";
    var statue_of_liberty = "🗽";
    var church = "⛪";
    var mosque = "🕌";
    var hindu_temple = "🛕";
    var synagogue = "🕍";
    var shinto_shrine = "⛩️";
    var kaaba = "🕋";
    var fountain = "⛲";
    var tent = "⛺";
    var foggy = "🌁";
    var night_with_stars = "🌃";
    var cityscape = "🏙️";
    var sunrise_over_mountains = "🌄";
    var sunrise = "🌅";
    var city_sunset = "🌆";
    var city_sunrise = "🌇";
    var bridge_at_night = "🌉";
    var hotsprings = "♨️";
    var carousel_horse = "🎠";
    var ferris_wheel = "🎡";
    var roller_coaster = "🎢";
    var barber = "💈";
    var circus_tent = "🎪";
    var steam_locomotive = "🚂";
    var railway_car = "🚃";
    var bullettrain_side = "🚄";
    var bullettrain_front = "🚅";
    var train2 = "🚆";
    var metro = "🚇";
    var light_rail = "🚈";
    var station = "🚉";
    var tram = "🚊";
    var monorail = "🚝";
    var mountain_railway = "🚞";
    var train = "🚋";
    var bus = "🚌";
    var oncoming_bus = "🚍";
    var trolleybus = "🚎";
    var minibus = "🚐";
    var ambulance = "🚑";
    var fire_engine = "🚒";
    var police_car = "🚓";
    var oncoming_police_car = "🚔";
    var taxi = "🚕";
    var oncoming_taxi = "🚖";
    var car = "🚗";
    var red_car = "🚗";
    var oncoming_automobile = "🚘";
    var blue_car = "🚙";
    var pickup_truck = "🛻";
    var truck = "🚚";
    var articulated_lorry = "🚛";
    var tractor = "🚜";
    var racing_car = "🏎️";
    var motorcycle = "🏍️";
    var motor_scooter = "🛵";
    var manual_wheelchair = "🦽";
    var motorized_wheelchair = "🦼";
    var auto_rickshaw = "🛺";
    var bike = "🚲";
    var kick_scooter = "🛴";
    var skateboard = "🛹";
    var roller_skate = "🛼";
    var busstop = "🚏";
    var motorway = "🛣️";
    var railway_track = "🛤️";
    var oil_drum = "🛢️";
    var fuelpump = "⛽";
    var rotating_light = "🚨";
    var traffic_light = "🚥";
    var vertical_traffic_light = "🚦";
    var stop_sign = "🛑";
    var construction = "🚧";
    var anchor = "⚓";
    var boat = "⛵";
    var sailboat = "⛵";
    var canoe = "🛶";
    var speedboat = "🚤";
    var passenger_ship = "🛳️";
    var ferry = "⛴️";
    var motor_boat = "🛥️";
    var ship = "🚢";
    var airplane = "✈️";
    var small_airplane = "🛩️";
    var flight_departure = "🛫";
    var flight_arrival = "🛬";
    var parachute = "🪂";
    var seat = "💺";
    var helicopter = "🚁";
    var suspension_railway = "🚟";
    var mountain_cableway = "🚠";
    var aerial_tramway = "🚡";
    var artificial_satellite = "🛰️";
    var rocket = "🚀";
    var flying_saucer = "🛸";
    var bellhop_bell = "🛎️";
    var luggage = "🧳";
    var hourglass = "⌛";
    var hourglass_flowing_sand = "⏳";
    var watch = "⌚";
    var alarm_clock = "⏰";
    var stopwatch = "⏱️";
    var timer_clock = "⏲️";
    var mantelpiece_clock = "🕰️";
    var clock12 = "🕛";
    var clock1230 = "🕧";
    var clock1 = "🕐";
    var clock130 = "🕜";
    var clock2 = "🕑";
    var clock230 = "🕝";
    var clock3 = "🕒";
    var clock330 = "🕞";
    var clock4 = "🕓";
    var clock430 = "🕟";
    var clock5 = "🕔";
    var clock530 = "🕠";
    var clock6 = "🕕";
    var clock630 = "🕡";
    var clock7 = "🕖";
    var clock730 = "🕢";
    var clock8 = "🕗";
    var clock830 = "🕣";
    var clock9 = "🕘";
    var clock930 = "🕤";
    var clock10 = "🕙";
    var clock1030 = "🕥";
    var clock11 = "🕚";
    var clock1130 = "🕦";
    var new_moon = "🌑";
    var waxing_crescent_moon = "🌒";
    var first_quarter_moon = "🌓";
    var moon = "🌔";
    var waxing_gibbous_moon = "🌔";
    var full_moon = "🌕";
    var waning_gibbous_moon = "🌖";
    var last_quarter_moon = "🌗";
    var waning_crescent_moon = "🌘";
    var crescent_moon = "🌙";
    var new_moon_with_face = "🌚";
    var first_quarter_moon_with_face = "🌛";
    var last_quarter_moon_with_face = "🌜";
    var thermometer = "🌡️";
    var sunny = "☀️";
    var full_moon_with_face = "🌝";
    var sun_with_face = "🌞";
    var ringed_planet = "🪐";
    var star$1 = "⭐";
    var star2 = "🌟";
    var stars = "🌠";
    var milky_way = "🌌";
    var cloud = "☁️";
    var partly_sunny = "⛅";
    var cloud_with_lightning_and_rain = "⛈️";
    var sun_behind_small_cloud = "🌤️";
    var sun_behind_large_cloud = "🌥️";
    var sun_behind_rain_cloud = "🌦️";
    var cloud_with_rain = "🌧️";
    var cloud_with_snow = "🌨️";
    var cloud_with_lightning = "🌩️";
    var tornado = "🌪️";
    var fog = "🌫️";
    var wind_face = "🌬️";
    var cyclone = "🌀";
    var rainbow = "🌈";
    var closed_umbrella = "🌂";
    var open_umbrella = "☂️";
    var umbrella = "☔";
    var parasol_on_ground = "⛱️";
    var zap = "⚡";
    var snowflake = "❄️";
    var snowman_with_snow = "☃️";
    var snowman = "⛄";
    var comet = "☄️";
    var fire = "🔥";
    var droplet = "💧";
    var ocean = "🌊";
    var jack_o_lantern = "🎃";
    var christmas_tree = "🎄";
    var fireworks = "🎆";
    var sparkler = "🎇";
    var firecracker = "🧨";
    var sparkles = "✨";
    var balloon = "🎈";
    var tada = "🎉";
    var confetti_ball = "🎊";
    var tanabata_tree = "🎋";
    var bamboo = "🎍";
    var dolls = "🎎";
    var flags = "🎏";
    var wind_chime = "🎐";
    var rice_scene = "🎑";
    var red_envelope = "🧧";
    var ribbon = "🎀";
    var gift = "🎁";
    var reminder_ribbon = "🎗️";
    var tickets = "🎟️";
    var ticket = "🎫";
    var medal_military = "🎖️";
    var trophy = "🏆";
    var medal_sports = "🏅";
    var soccer = "⚽";
    var baseball = "⚾";
    var softball = "🥎";
    var basketball = "🏀";
    var volleyball = "🏐";
    var football = "🏈";
    var rugby_football = "🏉";
    var tennis = "🎾";
    var flying_disc = "🥏";
    var bowling = "🎳";
    var cricket_game = "🏏";
    var field_hockey = "🏑";
    var ice_hockey = "🏒";
    var lacrosse = "🥍";
    var ping_pong = "🏓";
    var badminton = "🏸";
    var boxing_glove = "🥊";
    var martial_arts_uniform = "🥋";
    var goal_net = "🥅";
    var golf = "⛳";
    var ice_skate = "⛸️";
    var fishing_pole_and_fish = "🎣";
    var diving_mask = "🤿";
    var running_shirt_with_sash = "🎽";
    var ski = "🎿";
    var sled = "🛷";
    var curling_stone = "🥌";
    var dart = "🎯";
    var yo_yo = "🪀";
    var kite = "🪁";
    var crystal_ball = "🔮";
    var magic_wand = "🪄";
    var nazar_amulet = "🧿";
    var video_game = "🎮";
    var joystick = "🕹️";
    var slot_machine = "🎰";
    var game_die = "🎲";
    var jigsaw = "🧩";
    var teddy_bear = "🧸";
    var pinata = "🪅";
    var nesting_dolls = "🪆";
    var spades$1 = "♠️";
    var hearts$1 = "♥️";
    var diamonds = "♦️";
    var clubs$1 = "♣️";
    var chess_pawn = "♟️";
    var black_joker = "🃏";
    var mahjong = "🀄";
    var flower_playing_cards = "🎴";
    var performing_arts = "🎭";
    var framed_picture = "🖼️";
    var art = "🎨";
    var thread = "🧵";
    var sewing_needle = "🪡";
    var yarn = "🧶";
    var knot = "🪢";
    var eyeglasses = "👓";
    var dark_sunglasses = "🕶️";
    var goggles = "🥽";
    var lab_coat = "🥼";
    var safety_vest = "🦺";
    var necktie = "👔";
    var shirt = "👕";
    var tshirt = "👕";
    var jeans = "👖";
    var scarf = "🧣";
    var gloves = "🧤";
    var coat = "🧥";
    var socks = "🧦";
    var dress = "👗";
    var kimono = "👘";
    var sari = "🥻";
    var one_piece_swimsuit = "🩱";
    var swim_brief = "🩲";
    var shorts = "🩳";
    var bikini = "👙";
    var womans_clothes = "👚";
    var purse = "👛";
    var handbag = "👜";
    var pouch = "👝";
    var shopping = "🛍️";
    var school_satchel = "🎒";
    var thong_sandal = "🩴";
    var mans_shoe = "👞";
    var shoe = "👞";
    var athletic_shoe = "👟";
    var hiking_boot = "🥾";
    var flat_shoe = "🥿";
    var high_heel = "👠";
    var sandal = "👡";
    var ballet_shoes = "🩰";
    var boot = "👢";
    var crown = "👑";
    var womans_hat = "👒";
    var tophat = "🎩";
    var mortar_board = "🎓";
    var billed_cap = "🧢";
    var military_helmet = "🪖";
    var rescue_worker_helmet = "⛑️";
    var prayer_beads = "📿";
    var lipstick = "💄";
    var ring$1 = "💍";
    var gem = "💎";
    var mute = "🔇";
    var speaker = "🔈";
    var sound = "🔉";
    var loud_sound = "🔊";
    var loudspeaker = "📢";
    var mega = "📣";
    var postal_horn = "📯";
    var bell = "🔔";
    var no_bell = "🔕";
    var musical_score = "🎼";
    var musical_note = "🎵";
    var notes = "🎶";
    var studio_microphone = "🎙️";
    var level_slider = "🎚️";
    var control_knobs = "🎛️";
    var microphone = "🎤";
    var headphones = "🎧";
    var radio = "📻";
    var saxophone = "🎷";
    var accordion = "🪗";
    var guitar = "🎸";
    var musical_keyboard = "🎹";
    var trumpet = "🎺";
    var violin = "🎻";
    var banjo = "🪕";
    var drum = "🥁";
    var long_drum = "🪘";
    var iphone = "📱";
    var calling = "📲";
    var phone$1 = "☎️";
    var telephone = "☎️";
    var telephone_receiver = "📞";
    var pager = "📟";
    var fax = "📠";
    var battery = "🔋";
    var electric_plug = "🔌";
    var computer = "💻";
    var desktop_computer = "🖥️";
    var printer = "🖨️";
    var keyboard = "⌨️";
    var computer_mouse = "🖱️";
    var trackball = "🖲️";
    var minidisc = "💽";
    var floppy_disk = "💾";
    var cd = "💿";
    var dvd = "📀";
    var abacus = "🧮";
    var movie_camera = "🎥";
    var film_strip = "🎞️";
    var film_projector = "📽️";
    var clapper = "🎬";
    var tv = "📺";
    var camera = "📷";
    var camera_flash = "📸";
    var video_camera = "📹";
    var vhs = "📼";
    var mag = "🔍";
    var mag_right = "🔎";
    var candle = "🕯️";
    var bulb = "💡";
    var flashlight = "🔦";
    var izakaya_lantern = "🏮";
    var lantern = "🏮";
    var diya_lamp = "🪔";
    var notebook_with_decorative_cover = "📔";
    var closed_book = "📕";
    var book = "📖";
    var open_book = "📖";
    var green_book = "📗";
    var blue_book = "📘";
    var orange_book = "📙";
    var books = "📚";
    var notebook = "📓";
    var ledger = "📒";
    var page_with_curl = "📃";
    var scroll = "📜";
    var page_facing_up = "📄";
    var newspaper = "📰";
    var newspaper_roll = "🗞️";
    var bookmark_tabs = "📑";
    var bookmark = "🔖";
    var label = "🏷️";
    var moneybag = "💰";
    var coin = "🪙";
    var yen$2 = "💴";
    var dollar$1 = "💵";
    var euro$1 = "💶";
    var pound$2 = "💷";
    var money_with_wings = "💸";
    var credit_card = "💳";
    var receipt = "🧾";
    var chart = "💹";
    var envelope = "✉️";
    var email = "📧";
    var incoming_envelope = "📨";
    var envelope_with_arrow = "📩";
    var outbox_tray = "📤";
    var inbox_tray = "📥";
    var mailbox = "📫";
    var mailbox_closed = "📪";
    var mailbox_with_mail = "📬";
    var mailbox_with_no_mail = "📭";
    var postbox = "📮";
    var ballot_box = "🗳️";
    var pencil2 = "✏️";
    var black_nib = "✒️";
    var fountain_pen = "🖋️";
    var pen = "🖊️";
    var paintbrush = "🖌️";
    var crayon = "🖍️";
    var memo = "📝";
    var pencil = "📝";
    var briefcase = "💼";
    var file_folder = "📁";
    var open_file_folder = "📂";
    var card_index_dividers = "🗂️";
    var date = "📅";
    var calendar = "📆";
    var spiral_notepad = "🗒️";
    var spiral_calendar = "🗓️";
    var card_index = "📇";
    var chart_with_upwards_trend = "📈";
    var chart_with_downwards_trend = "📉";
    var bar_chart = "📊";
    var clipboard = "📋";
    var pushpin = "📌";
    var round_pushpin = "📍";
    var paperclip = "📎";
    var paperclips = "🖇️";
    var straight_ruler = "📏";
    var triangular_ruler = "📐";
    var scissors = "✂️";
    var card_file_box = "🗃️";
    var file_cabinet = "🗄️";
    var wastebasket = "🗑️";
    var lock = "🔒";
    var unlock = "🔓";
    var lock_with_ink_pen = "🔏";
    var closed_lock_with_key = "🔐";
    var key$1 = "🔑";
    var old_key = "🗝️";
    var hammer = "🔨";
    var axe = "🪓";
    var pick = "⛏️";
    var hammer_and_pick = "⚒️";
    var hammer_and_wrench = "🛠️";
    var dagger$1 = "🗡️";
    var crossed_swords = "⚔️";
    var gun = "🔫";
    var boomerang = "🪃";
    var bow_and_arrow = "🏹";
    var shield = "🛡️";
    var carpentry_saw = "🪚";
    var wrench = "🔧";
    var screwdriver = "🪛";
    var nut_and_bolt = "🔩";
    var gear = "⚙️";
    var clamp = "🗜️";
    var balance_scale = "⚖️";
    var probing_cane = "🦯";
    var link$1 = "🔗";
    var chains = "⛓️";
    var hook = "🪝";
    var toolbox = "🧰";
    var magnet = "🧲";
    var ladder = "🪜";
    var alembic = "⚗️";
    var test_tube = "🧪";
    var petri_dish = "🧫";
    var dna = "🧬";
    var microscope = "🔬";
    var telescope = "🔭";
    var satellite = "📡";
    var syringe = "💉";
    var drop_of_blood = "🩸";
    var pill = "💊";
    var adhesive_bandage = "🩹";
    var stethoscope = "🩺";
    var door = "🚪";
    var elevator = "🛗";
    var mirror = "🪞";
    var window$1 = "🪟";
    var bed = "🛏️";
    var couch_and_lamp = "🛋️";
    var chair = "🪑";
    var toilet = "🚽";
    var plunger = "🪠";
    var shower = "🚿";
    var bathtub = "🛁";
    var mouse_trap = "🪤";
    var razor = "🪒";
    var lotion_bottle = "🧴";
    var safety_pin = "🧷";
    var broom = "🧹";
    var basket = "🧺";
    var roll_of_paper = "🧻";
    var bucket = "🪣";
    var soap = "🧼";
    var toothbrush = "🪥";
    var sponge = "🧽";
    var fire_extinguisher = "🧯";
    var shopping_cart = "🛒";
    var smoking = "🚬";
    var coffin = "⚰️";
    var headstone = "🪦";
    var funeral_urn = "⚱️";
    var moyai = "🗿";
    var placard = "🪧";
    var atm = "🏧";
    var put_litter_in_its_place = "🚮";
    var potable_water = "🚰";
    var wheelchair = "♿";
    var mens = "🚹";
    var womens = "🚺";
    var restroom = "🚻";
    var baby_symbol = "🚼";
    var wc = "🚾";
    var passport_control = "🛂";
    var customs = "🛃";
    var baggage_claim = "🛄";
    var left_luggage = "🛅";
    var warning = "⚠️";
    var children_crossing = "🚸";
    var no_entry = "⛔";
    var no_entry_sign = "🚫";
    var no_bicycles = "🚳";
    var no_smoking = "🚭";
    var do_not_litter = "🚯";
    var no_pedestrians = "🚷";
    var no_mobile_phones = "📵";
    var underage = "🔞";
    var radioactive = "☢️";
    var biohazard = "☣️";
    var arrow_up = "⬆️";
    var arrow_upper_right = "↗️";
    var arrow_right = "➡️";
    var arrow_lower_right = "↘️";
    var arrow_down = "⬇️";
    var arrow_lower_left = "↙️";
    var arrow_left = "⬅️";
    var arrow_upper_left = "↖️";
    var arrow_up_down = "↕️";
    var left_right_arrow = "↔️";
    var leftwards_arrow_with_hook = "↩️";
    var arrow_right_hook = "↪️";
    var arrow_heading_up = "⤴️";
    var arrow_heading_down = "⤵️";
    var arrows_clockwise = "🔃";
    var arrows_counterclockwise = "🔄";
    var back = "🔙";
    var end = "🔚";
    var on$1 = "🔛";
    var soon = "🔜";
    var top$1 = "🔝";
    var place_of_worship = "🛐";
    var atom_symbol = "⚛️";
    var om = "🕉️";
    var star_of_david = "✡️";
    var wheel_of_dharma = "☸️";
    var yin_yang = "☯️";
    var latin_cross = "✝️";
    var orthodox_cross = "☦️";
    var star_and_crescent = "☪️";
    var peace_symbol = "☮️";
    var menorah = "🕎";
    var six_pointed_star = "🔯";
    var aries = "♈";
    var taurus = "♉";
    var gemini = "♊";
    var cancer = "♋";
    var leo = "♌";
    var virgo = "♍";
    var libra = "♎";
    var scorpius = "♏";
    var sagittarius = "♐";
    var capricorn = "♑";
    var aquarius = "♒";
    var pisces = "♓";
    var ophiuchus = "⛎";
    var twisted_rightwards_arrows = "🔀";
    var repeat$2 = "🔁";
    var repeat_one = "🔂";
    var arrow_forward = "▶️";
    var fast_forward = "⏩";
    var next_track_button = "⏭️";
    var play_or_pause_button = "⏯️";
    var arrow_backward = "◀️";
    var rewind = "⏪";
    var previous_track_button = "⏮️";
    var arrow_up_small = "🔼";
    var arrow_double_up = "⏫";
    var arrow_down_small = "🔽";
    var arrow_double_down = "⏬";
    var pause_button = "⏸️";
    var stop_button = "⏹️";
    var record_button = "⏺️";
    var eject_button = "⏏️";
    var cinema = "🎦";
    var low_brightness = "🔅";
    var high_brightness = "🔆";
    var signal_strength = "📶";
    var vibration_mode = "📳";
    var mobile_phone_off = "📴";
    var female_sign = "♀️";
    var male_sign = "♂️";
    var transgender_symbol = "⚧️";
    var heavy_multiplication_x = "✖️";
    var heavy_plus_sign = "➕";
    var heavy_minus_sign = "➖";
    var heavy_division_sign = "➗";
    var infinity = "♾️";
    var bangbang = "‼️";
    var interrobang = "⁉️";
    var question = "❓";
    var grey_question = "❔";
    var grey_exclamation = "❕";
    var exclamation = "❗";
    var heavy_exclamation_mark = "❗";
    var wavy_dash = "〰️";
    var currency_exchange = "💱";
    var heavy_dollar_sign = "💲";
    var medical_symbol = "⚕️";
    var recycle = "♻️";
    var fleur_de_lis = "⚜️";
    var trident = "🔱";
    var name_badge = "📛";
    var beginner = "🔰";
    var o = "⭕";
    var white_check_mark = "✅";
    var ballot_box_with_check = "☑️";
    var heavy_check_mark = "✔️";
    var x = "❌";
    var negative_squared_cross_mark = "❎";
    var curly_loop = "➰";
    var loop = "➿";
    var part_alternation_mark = "〽️";
    var eight_spoked_asterisk = "✳️";
    var eight_pointed_black_star = "✴️";
    var sparkle = "❇️";
    var copyright = "©️";
    var registered = "®️";
    var tm = "™️";
    var hash = "#️⃣";
    var asterisk = "*️⃣";
    var zero = "0️⃣";
    var one = "1️⃣";
    var two = "2️⃣";
    var three = "3️⃣";
    var four = "4️⃣";
    var five = "5️⃣";
    var six = "6️⃣";
    var seven = "7️⃣";
    var eight = "8️⃣";
    var nine = "9️⃣";
    var keycap_ten = "🔟";
    var capital_abcd = "🔠";
    var abcd = "🔡";
    var symbols = "🔣";
    var abc = "🔤";
    var a = "🅰️";
    var ab = "🆎";
    var b = "🅱️";
    var cl = "🆑";
    var cool = "🆒";
    var free = "🆓";
    var information_source = "ℹ️";
    var id = "🆔";
    var m = "Ⓜ️";
    var ng = "🆖";
    var o2 = "🅾️";
    var ok = "🆗";
    var parking = "🅿️";
    var sos = "🆘";
    var up = "🆙";
    var vs = "🆚";
    var koko = "🈁";
    var sa = "🈂️";
    var ideograph_advantage = "🉐";
    var accept = "🉑";
    var congratulations = "㊗️";
    var secret = "㊙️";
    var u6e80 = "🈵";
    var red_circle = "🔴";
    var orange_circle = "🟠";
    var yellow_circle = "🟡";
    var green_circle = "🟢";
    var large_blue_circle = "🔵";
    var purple_circle = "🟣";
    var brown_circle = "🟤";
    var black_circle = "⚫";
    var white_circle = "⚪";
    var red_square = "🟥";
    var orange_square = "🟧";
    var yellow_square = "🟨";
    var green_square = "🟩";
    var blue_square = "🟦";
    var purple_square = "🟪";
    var brown_square = "🟫";
    var black_large_square = "⬛";
    var white_large_square = "⬜";
    var black_medium_square = "◼️";
    var white_medium_square = "◻️";
    var black_medium_small_square = "◾";
    var white_medium_small_square = "◽";
    var black_small_square = "▪️";
    var white_small_square = "▫️";
    var large_orange_diamond = "🔶";
    var large_blue_diamond = "🔷";
    var small_orange_diamond = "🔸";
    var small_blue_diamond = "🔹";
    var small_red_triangle = "🔺";
    var small_red_triangle_down = "🔻";
    var diamond_shape_with_a_dot_inside = "💠";
    var radio_button = "🔘";
    var white_square_button = "🔳";
    var black_square_button = "🔲";
    var checkered_flag = "🏁";
    var triangular_flag_on_post = "🚩";
    var crossed_flags = "🎌";
    var black_flag = "🏴";
    var white_flag = "🏳️";
    var rainbow_flag = "🏳️‍🌈";
    var transgender_flag = "🏳️‍⚧️";
    var pirate_flag = "🏴‍☠️";
    var ascension_island = "🇦🇨";
    var andorra = "🇦🇩";
    var united_arab_emirates = "🇦🇪";
    var afghanistan = "🇦🇫";
    var antigua_barbuda = "🇦🇬";
    var anguilla = "🇦🇮";
    var albania = "🇦🇱";
    var armenia = "🇦🇲";
    var angola = "🇦🇴";
    var antarctica = "🇦🇶";
    var argentina = "🇦🇷";
    var american_samoa = "🇦🇸";
    var austria = "🇦🇹";
    var australia = "🇦🇺";
    var aruba = "🇦🇼";
    var aland_islands = "🇦🇽";
    var azerbaijan = "🇦🇿";
    var bosnia_herzegovina = "🇧🇦";
    var barbados = "🇧🇧";
    var bangladesh = "🇧🇩";
    var belgium = "🇧🇪";
    var burkina_faso = "🇧🇫";
    var bulgaria = "🇧🇬";
    var bahrain = "🇧🇭";
    var burundi = "🇧🇮";
    var benin = "🇧🇯";
    var st_barthelemy = "🇧🇱";
    var bermuda = "🇧🇲";
    var brunei = "🇧🇳";
    var bolivia = "🇧🇴";
    var caribbean_netherlands = "🇧🇶";
    var brazil = "🇧🇷";
    var bahamas = "🇧🇸";
    var bhutan = "🇧🇹";
    var bouvet_island = "🇧🇻";
    var botswana = "🇧🇼";
    var belarus = "🇧🇾";
    var belize = "🇧🇿";
    var canada = "🇨🇦";
    var cocos_islands = "🇨🇨";
    var congo_kinshasa = "🇨🇩";
    var central_african_republic = "🇨🇫";
    var congo_brazzaville = "🇨🇬";
    var switzerland = "🇨🇭";
    var cote_divoire = "🇨🇮";
    var cook_islands = "🇨🇰";
    var chile = "🇨🇱";
    var cameroon = "🇨🇲";
    var cn = "🇨🇳";
    var colombia = "🇨🇴";
    var clipperton_island = "🇨🇵";
    var costa_rica = "🇨🇷";
    var cuba = "🇨🇺";
    var cape_verde = "🇨🇻";
    var curacao = "🇨🇼";
    var christmas_island = "🇨🇽";
    var cyprus = "🇨🇾";
    var czech_republic = "🇨🇿";
    var de = "🇩🇪";
    var diego_garcia = "🇩🇬";
    var djibouti = "🇩🇯";
    var denmark = "🇩🇰";
    var dominica = "🇩🇲";
    var dominican_republic = "🇩🇴";
    var algeria = "🇩🇿";
    var ceuta_melilla = "🇪🇦";
    var ecuador = "🇪🇨";
    var estonia = "🇪🇪";
    var egypt = "🇪🇬";
    var western_sahara = "🇪🇭";
    var eritrea = "🇪🇷";
    var es = "🇪🇸";
    var ethiopia = "🇪🇹";
    var eu = "🇪🇺";
    var european_union = "🇪🇺";
    var finland = "🇫🇮";
    var fiji = "🇫🇯";
    var falkland_islands = "🇫🇰";
    var micronesia = "🇫🇲";
    var faroe_islands = "🇫🇴";
    var fr = "🇫🇷";
    var gabon = "🇬🇦";
    var gb = "🇬🇧";
    var uk = "🇬🇧";
    var grenada = "🇬🇩";
    var georgia = "🇬🇪";
    var french_guiana = "🇬🇫";
    var guernsey = "🇬🇬";
    var ghana = "🇬🇭";
    var gibraltar = "🇬🇮";
    var greenland = "🇬🇱";
    var gambia = "🇬🇲";
    var guinea = "🇬🇳";
    var guadeloupe = "🇬🇵";
    var equatorial_guinea = "🇬🇶";
    var greece = "🇬🇷";
    var south_georgia_south_sandwich_islands = "🇬🇸";
    var guatemala = "🇬🇹";
    var guam = "🇬🇺";
    var guinea_bissau = "🇬🇼";
    var guyana = "🇬🇾";
    var hong_kong = "🇭🇰";
    var heard_mcdonald_islands = "🇭🇲";
    var honduras = "🇭🇳";
    var croatia = "🇭🇷";
    var haiti = "🇭🇹";
    var hungary = "🇭🇺";
    var canary_islands = "🇮🇨";
    var indonesia = "🇮🇩";
    var ireland = "🇮🇪";
    var israel = "🇮🇱";
    var isle_of_man = "🇮🇲";
    var india = "🇮🇳";
    var british_indian_ocean_territory = "🇮🇴";
    var iraq = "🇮🇶";
    var iran = "🇮🇷";
    var iceland = "🇮🇸";
    var it$1 = "🇮🇹";
    var jersey = "🇯🇪";
    var jamaica = "🇯🇲";
    var jordan = "🇯🇴";
    var jp = "🇯🇵";
    var kenya = "🇰🇪";
    var kyrgyzstan = "🇰🇬";
    var cambodia = "🇰🇭";
    var kiribati = "🇰🇮";
    var comoros = "🇰🇲";
    var st_kitts_nevis = "🇰🇳";
    var north_korea = "🇰🇵";
    var kr = "🇰🇷";
    var kuwait = "🇰🇼";
    var cayman_islands = "🇰🇾";
    var kazakhstan = "🇰🇿";
    var laos = "🇱🇦";
    var lebanon = "🇱🇧";
    var st_lucia = "🇱🇨";
    var liechtenstein = "🇱🇮";
    var sri_lanka = "🇱🇰";
    var liberia = "🇱🇷";
    var lesotho = "🇱🇸";
    var lithuania = "🇱🇹";
    var luxembourg = "🇱🇺";
    var latvia = "🇱🇻";
    var libya = "🇱🇾";
    var morocco = "🇲🇦";
    var monaco = "🇲🇨";
    var moldova = "🇲🇩";
    var montenegro = "🇲🇪";
    var st_martin = "🇲🇫";
    var madagascar = "🇲🇬";
    var marshall_islands = "🇲🇭";
    var macedonia = "🇲🇰";
    var mali = "🇲🇱";
    var myanmar = "🇲🇲";
    var mongolia = "🇲🇳";
    var macau = "🇲🇴";
    var northern_mariana_islands = "🇲🇵";
    var martinique = "🇲🇶";
    var mauritania = "🇲🇷";
    var montserrat = "🇲🇸";
    var malta = "🇲🇹";
    var mauritius = "🇲🇺";
    var maldives = "🇲🇻";
    var malawi = "🇲🇼";
    var mexico = "🇲🇽";
    var malaysia = "🇲🇾";
    var mozambique = "🇲🇿";
    var namibia = "🇳🇦";
    var new_caledonia = "🇳🇨";
    var niger = "🇳🇪";
    var norfolk_island = "🇳🇫";
    var nigeria = "🇳🇬";
    var nicaragua = "🇳🇮";
    var netherlands = "🇳🇱";
    var norway = "🇳🇴";
    var nepal = "🇳🇵";
    var nauru = "🇳🇷";
    var niue = "🇳🇺";
    var new_zealand = "🇳🇿";
    var oman = "🇴🇲";
    var panama = "🇵🇦";
    var peru = "🇵🇪";
    var french_polynesia = "🇵🇫";
    var papua_new_guinea = "🇵🇬";
    var philippines = "🇵🇭";
    var pakistan = "🇵🇰";
    var poland = "🇵🇱";
    var st_pierre_miquelon = "🇵🇲";
    var pitcairn_islands = "🇵🇳";
    var puerto_rico = "🇵🇷";
    var palestinian_territories = "🇵🇸";
    var portugal = "🇵🇹";
    var palau = "🇵🇼";
    var paraguay = "🇵🇾";
    var qatar = "🇶🇦";
    var reunion = "🇷🇪";
    var romania = "🇷🇴";
    var serbia = "🇷🇸";
    var ru = "🇷🇺";
    var rwanda = "🇷🇼";
    var saudi_arabia = "🇸🇦";
    var solomon_islands = "🇸🇧";
    var seychelles = "🇸🇨";
    var sudan = "🇸🇩";
    var sweden = "🇸🇪";
    var singapore = "🇸🇬";
    var st_helena = "🇸🇭";
    var slovenia = "🇸🇮";
    var svalbard_jan_mayen = "🇸🇯";
    var slovakia = "🇸🇰";
    var sierra_leone = "🇸🇱";
    var san_marino = "🇸🇲";
    var senegal = "🇸🇳";
    var somalia = "🇸🇴";
    var suriname = "🇸🇷";
    var south_sudan = "🇸🇸";
    var sao_tome_principe = "🇸🇹";
    var el_salvador = "🇸🇻";
    var sint_maarten = "🇸🇽";
    var syria = "🇸🇾";
    var swaziland = "🇸🇿";
    var tristan_da_cunha = "🇹🇦";
    var turks_caicos_islands = "🇹🇨";
    var chad = "🇹🇩";
    var french_southern_territories = "🇹🇫";
    var togo = "🇹🇬";
    var thailand = "🇹🇭";
    var tajikistan = "🇹🇯";
    var tokelau = "🇹🇰";
    var timor_leste = "🇹🇱";
    var turkmenistan = "🇹🇲";
    var tunisia = "🇹🇳";
    var tonga = "🇹🇴";
    var tr = "🇹🇷";
    var trinidad_tobago = "🇹🇹";
    var tuvalu = "🇹🇻";
    var taiwan = "🇹🇼";
    var tanzania = "🇹🇿";
    var ukraine = "🇺🇦";
    var uganda = "🇺🇬";
    var us_outlying_islands = "🇺🇲";
    var united_nations = "🇺🇳";
    var us = "🇺🇸";
    var uruguay = "🇺🇾";
    var uzbekistan = "🇺🇿";
    var vatican_city = "🇻🇦";
    var st_vincent_grenadines = "🇻🇨";
    var venezuela = "🇻🇪";
    var british_virgin_islands = "🇻🇬";
    var us_virgin_islands = "🇻🇮";
    var vietnam = "🇻🇳";
    var vanuatu = "🇻🇺";
    var wallis_futuna = "🇼🇫";
    var samoa = "🇼🇸";
    var kosovo = "🇽🇰";
    var yemen = "🇾🇪";
    var mayotte = "🇾🇹";
    var south_africa = "🇿🇦";
    var zambia = "🇿🇲";
    var zimbabwe = "🇿🇼";
    var england = "🏴󠁧󠁢󠁥󠁮󠁧󠁿";
    var scotland = "🏴󠁧󠁢󠁳󠁣󠁴󠁿";
    var wales = "🏴󠁧󠁢󠁷󠁬󠁳󠁿";
    var emojies_defs = {
    	"100": "💯",
    	"1234": "🔢",
    	grinning: grinning,
    	smiley: smiley,
    	smile: smile$1,
    	grin: grin,
    	laughing: laughing,
    	satisfied: satisfied,
    	sweat_smile: sweat_smile,
    	rofl: rofl,
    	joy: joy,
    	slightly_smiling_face: slightly_smiling_face,
    	upside_down_face: upside_down_face,
    	wink: wink,
    	blush: blush,
    	innocent: innocent,
    	smiling_face_with_three_hearts: smiling_face_with_three_hearts,
    	heart_eyes: heart_eyes,
    	star_struck: star_struck,
    	kissing_heart: kissing_heart,
    	kissing: kissing,
    	relaxed: relaxed,
    	kissing_closed_eyes: kissing_closed_eyes,
    	kissing_smiling_eyes: kissing_smiling_eyes,
    	smiling_face_with_tear: smiling_face_with_tear,
    	yum: yum,
    	stuck_out_tongue: stuck_out_tongue,
    	stuck_out_tongue_winking_eye: stuck_out_tongue_winking_eye,
    	zany_face: zany_face,
    	stuck_out_tongue_closed_eyes: stuck_out_tongue_closed_eyes,
    	money_mouth_face: money_mouth_face,
    	hugs: hugs,
    	hand_over_mouth: hand_over_mouth,
    	shushing_face: shushing_face,
    	thinking: thinking,
    	zipper_mouth_face: zipper_mouth_face,
    	raised_eyebrow: raised_eyebrow,
    	neutral_face: neutral_face,
    	expressionless: expressionless,
    	no_mouth: no_mouth,
    	smirk: smirk,
    	unamused: unamused,
    	roll_eyes: roll_eyes,
    	grimacing: grimacing,
    	lying_face: lying_face,
    	relieved: relieved,
    	pensive: pensive,
    	sleepy: sleepy,
    	drooling_face: drooling_face,
    	sleeping: sleeping,
    	mask: mask,
    	face_with_thermometer: face_with_thermometer,
    	face_with_head_bandage: face_with_head_bandage,
    	nauseated_face: nauseated_face,
    	vomiting_face: vomiting_face,
    	sneezing_face: sneezing_face,
    	hot_face: hot_face,
    	cold_face: cold_face,
    	woozy_face: woozy_face,
    	dizzy_face: dizzy_face,
    	exploding_head: exploding_head,
    	cowboy_hat_face: cowboy_hat_face,
    	partying_face: partying_face,
    	disguised_face: disguised_face,
    	sunglasses: sunglasses,
    	nerd_face: nerd_face,
    	monocle_face: monocle_face,
    	confused: confused,
    	worried: worried,
    	slightly_frowning_face: slightly_frowning_face,
    	frowning_face: frowning_face,
    	open_mouth: open_mouth,
    	hushed: hushed,
    	astonished: astonished,
    	flushed: flushed,
    	pleading_face: pleading_face,
    	frowning: frowning,
    	anguished: anguished,
    	fearful: fearful,
    	cold_sweat: cold_sweat,
    	disappointed_relieved: disappointed_relieved,
    	cry: cry,
    	sob: sob,
    	scream: scream,
    	confounded: confounded,
    	persevere: persevere,
    	disappointed: disappointed,
    	sweat: sweat,
    	weary: weary,
    	tired_face: tired_face,
    	yawning_face: yawning_face,
    	triumph: triumph,
    	rage: rage,
    	pout: pout,
    	angry: angry,
    	cursing_face: cursing_face,
    	smiling_imp: smiling_imp,
    	imp: imp,
    	skull: skull,
    	skull_and_crossbones: skull_and_crossbones,
    	hankey: hankey,
    	poop: poop,
    	shit: shit,
    	clown_face: clown_face,
    	japanese_ogre: japanese_ogre,
    	japanese_goblin: japanese_goblin,
    	ghost: ghost,
    	alien: alien,
    	space_invader: space_invader,
    	robot: robot,
    	smiley_cat: smiley_cat,
    	smile_cat: smile_cat,
    	joy_cat: joy_cat,
    	heart_eyes_cat: heart_eyes_cat,
    	smirk_cat: smirk_cat,
    	kissing_cat: kissing_cat,
    	scream_cat: scream_cat,
    	crying_cat_face: crying_cat_face,
    	pouting_cat: pouting_cat,
    	see_no_evil: see_no_evil,
    	hear_no_evil: hear_no_evil,
    	speak_no_evil: speak_no_evil,
    	kiss: kiss,
    	love_letter: love_letter,
    	cupid: cupid,
    	gift_heart: gift_heart,
    	sparkling_heart: sparkling_heart,
    	heartpulse: heartpulse,
    	heartbeat: heartbeat,
    	revolving_hearts: revolving_hearts,
    	two_hearts: two_hearts,
    	heart_decoration: heart_decoration,
    	heavy_heart_exclamation: heavy_heart_exclamation,
    	broken_heart: broken_heart,
    	heart: heart,
    	orange_heart: orange_heart,
    	yellow_heart: yellow_heart,
    	green_heart: green_heart,
    	blue_heart: blue_heart,
    	purple_heart: purple_heart,
    	brown_heart: brown_heart,
    	black_heart: black_heart,
    	white_heart: white_heart,
    	anger: anger,
    	boom: boom,
    	collision: collision,
    	dizzy: dizzy,
    	sweat_drops: sweat_drops,
    	dash: dash$1,
    	hole: hole,
    	bomb: bomb,
    	speech_balloon: speech_balloon,
    	eye_speech_bubble: eye_speech_bubble,
    	left_speech_bubble: left_speech_bubble,
    	right_anger_bubble: right_anger_bubble,
    	thought_balloon: thought_balloon,
    	zzz: zzz,
    	wave: wave,
    	raised_back_of_hand: raised_back_of_hand,
    	raised_hand_with_fingers_splayed: raised_hand_with_fingers_splayed,
    	hand: hand,
    	raised_hand: raised_hand,
    	vulcan_salute: vulcan_salute,
    	ok_hand: ok_hand,
    	pinched_fingers: pinched_fingers,
    	pinching_hand: pinching_hand,
    	v: v,
    	crossed_fingers: crossed_fingers,
    	love_you_gesture: love_you_gesture,
    	metal: metal,
    	call_me_hand: call_me_hand,
    	point_left: point_left,
    	point_right: point_right,
    	point_up_2: point_up_2,
    	middle_finger: middle_finger,
    	fu: fu,
    	point_down: point_down,
    	point_up: point_up,
    	"+1": "👍",
    	thumbsup: thumbsup,
    	"-1": "👎",
    	thumbsdown: thumbsdown,
    	fist_raised: fist_raised,
    	fist: fist,
    	fist_oncoming: fist_oncoming,
    	facepunch: facepunch,
    	punch: punch,
    	fist_left: fist_left,
    	fist_right: fist_right,
    	clap: clap,
    	raised_hands: raised_hands,
    	open_hands: open_hands,
    	palms_up_together: palms_up_together,
    	handshake: handshake,
    	pray: pray,
    	writing_hand: writing_hand,
    	nail_care: nail_care,
    	selfie: selfie,
    	muscle: muscle,
    	mechanical_arm: mechanical_arm,
    	mechanical_leg: mechanical_leg,
    	leg: leg$1,
    	foot: foot,
    	ear: ear,
    	ear_with_hearing_aid: ear_with_hearing_aid,
    	nose: nose,
    	brain: brain,
    	anatomical_heart: anatomical_heart,
    	lungs: lungs,
    	tooth: tooth,
    	bone: bone,
    	eyes: eyes,
    	eye: eye,
    	tongue: tongue,
    	lips: lips,
    	baby: baby,
    	child: child,
    	boy: boy,
    	girl: girl,
    	adult: adult,
    	blond_haired_person: blond_haired_person,
    	man: man,
    	bearded_person: bearded_person,
    	red_haired_man: red_haired_man,
    	curly_haired_man: curly_haired_man,
    	white_haired_man: white_haired_man,
    	bald_man: bald_man,
    	woman: woman,
    	red_haired_woman: red_haired_woman,
    	person_red_hair: person_red_hair,
    	curly_haired_woman: curly_haired_woman,
    	person_curly_hair: person_curly_hair,
    	white_haired_woman: white_haired_woman,
    	person_white_hair: person_white_hair,
    	bald_woman: bald_woman,
    	person_bald: person_bald,
    	blond_haired_woman: blond_haired_woman,
    	blonde_woman: blonde_woman,
    	blond_haired_man: blond_haired_man,
    	older_adult: older_adult,
    	older_man: older_man,
    	older_woman: older_woman,
    	frowning_person: frowning_person,
    	frowning_man: frowning_man,
    	frowning_woman: frowning_woman,
    	pouting_face: pouting_face,
    	pouting_man: pouting_man,
    	pouting_woman: pouting_woman,
    	no_good: no_good,
    	no_good_man: no_good_man,
    	ng_man: ng_man,
    	no_good_woman: no_good_woman,
    	ng_woman: ng_woman,
    	ok_person: ok_person,
    	ok_man: ok_man,
    	ok_woman: ok_woman,
    	tipping_hand_person: tipping_hand_person,
    	information_desk_person: information_desk_person,
    	tipping_hand_man: tipping_hand_man,
    	sassy_man: sassy_man,
    	tipping_hand_woman: tipping_hand_woman,
    	sassy_woman: sassy_woman,
    	raising_hand: raising_hand,
    	raising_hand_man: raising_hand_man,
    	raising_hand_woman: raising_hand_woman,
    	deaf_person: deaf_person,
    	deaf_man: deaf_man,
    	deaf_woman: deaf_woman,
    	bow: bow,
    	bowing_man: bowing_man,
    	bowing_woman: bowing_woman,
    	facepalm: facepalm,
    	man_facepalming: man_facepalming,
    	woman_facepalming: woman_facepalming,
    	shrug: shrug,
    	man_shrugging: man_shrugging,
    	woman_shrugging: woman_shrugging,
    	health_worker: health_worker,
    	man_health_worker: man_health_worker,
    	woman_health_worker: woman_health_worker,
    	student: student,
    	man_student: man_student,
    	woman_student: woman_student,
    	teacher: teacher,
    	man_teacher: man_teacher,
    	woman_teacher: woman_teacher,
    	judge: judge,
    	man_judge: man_judge,
    	woman_judge: woman_judge,
    	farmer: farmer,
    	man_farmer: man_farmer,
    	woman_farmer: woman_farmer,
    	cook: cook,
    	man_cook: man_cook,
    	woman_cook: woman_cook,
    	mechanic: mechanic,
    	man_mechanic: man_mechanic,
    	woman_mechanic: woman_mechanic,
    	factory_worker: factory_worker,
    	man_factory_worker: man_factory_worker,
    	woman_factory_worker: woman_factory_worker,
    	office_worker: office_worker,
    	man_office_worker: man_office_worker,
    	woman_office_worker: woman_office_worker,
    	scientist: scientist,
    	man_scientist: man_scientist,
    	woman_scientist: woman_scientist,
    	technologist: technologist,
    	man_technologist: man_technologist,
    	woman_technologist: woman_technologist,
    	singer: singer,
    	man_singer: man_singer,
    	woman_singer: woman_singer,
    	artist: artist,
    	man_artist: man_artist,
    	woman_artist: woman_artist,
    	pilot: pilot,
    	man_pilot: man_pilot,
    	woman_pilot: woman_pilot,
    	astronaut: astronaut,
    	man_astronaut: man_astronaut,
    	woman_astronaut: woman_astronaut,
    	firefighter: firefighter,
    	man_firefighter: man_firefighter,
    	woman_firefighter: woman_firefighter,
    	police_officer: police_officer,
    	cop: cop,
    	policeman: policeman,
    	policewoman: policewoman,
    	detective: detective,
    	male_detective: male_detective,
    	female_detective: female_detective,
    	guard: guard,
    	guardsman: guardsman,
    	guardswoman: guardswoman,
    	ninja: ninja,
    	construction_worker: construction_worker,
    	construction_worker_man: construction_worker_man,
    	construction_worker_woman: construction_worker_woman,
    	prince: prince,
    	princess: princess,
    	person_with_turban: person_with_turban,
    	man_with_turban: man_with_turban,
    	woman_with_turban: woman_with_turban,
    	man_with_gua_pi_mao: man_with_gua_pi_mao,
    	woman_with_headscarf: woman_with_headscarf,
    	person_in_tuxedo: person_in_tuxedo,
    	man_in_tuxedo: man_in_tuxedo,
    	woman_in_tuxedo: woman_in_tuxedo,
    	person_with_veil: person_with_veil,
    	man_with_veil: man_with_veil,
    	woman_with_veil: woman_with_veil,
    	bride_with_veil: bride_with_veil,
    	pregnant_woman: pregnant_woman,
    	breast_feeding: breast_feeding,
    	woman_feeding_baby: woman_feeding_baby,
    	man_feeding_baby: man_feeding_baby,
    	person_feeding_baby: person_feeding_baby,
    	angel: angel,
    	santa: santa,
    	mrs_claus: mrs_claus,
    	mx_claus: mx_claus,
    	superhero: superhero,
    	superhero_man: superhero_man,
    	superhero_woman: superhero_woman,
    	supervillain: supervillain,
    	supervillain_man: supervillain_man,
    	supervillain_woman: supervillain_woman,
    	mage: mage,
    	mage_man: mage_man,
    	mage_woman: mage_woman,
    	fairy: fairy,
    	fairy_man: fairy_man,
    	fairy_woman: fairy_woman,
    	vampire: vampire,
    	vampire_man: vampire_man,
    	vampire_woman: vampire_woman,
    	merperson: merperson,
    	merman: merman,
    	mermaid: mermaid,
    	elf: elf,
    	elf_man: elf_man,
    	elf_woman: elf_woman,
    	genie: genie,
    	genie_man: genie_man,
    	genie_woman: genie_woman,
    	zombie: zombie,
    	zombie_man: zombie_man,
    	zombie_woman: zombie_woman,
    	massage: massage,
    	massage_man: massage_man,
    	massage_woman: massage_woman,
    	haircut: haircut,
    	haircut_man: haircut_man,
    	haircut_woman: haircut_woman,
    	walking: walking,
    	walking_man: walking_man,
    	walking_woman: walking_woman,
    	standing_person: standing_person,
    	standing_man: standing_man,
    	standing_woman: standing_woman,
    	kneeling_person: kneeling_person,
    	kneeling_man: kneeling_man,
    	kneeling_woman: kneeling_woman,
    	person_with_probing_cane: person_with_probing_cane,
    	man_with_probing_cane: man_with_probing_cane,
    	woman_with_probing_cane: woman_with_probing_cane,
    	person_in_motorized_wheelchair: person_in_motorized_wheelchair,
    	man_in_motorized_wheelchair: man_in_motorized_wheelchair,
    	woman_in_motorized_wheelchair: woman_in_motorized_wheelchair,
    	person_in_manual_wheelchair: person_in_manual_wheelchair,
    	man_in_manual_wheelchair: man_in_manual_wheelchair,
    	woman_in_manual_wheelchair: woman_in_manual_wheelchair,
    	runner: runner,
    	running: running,
    	running_man: running_man,
    	running_woman: running_woman,
    	woman_dancing: woman_dancing,
    	dancer: dancer,
    	man_dancing: man_dancing,
    	business_suit_levitating: business_suit_levitating,
    	dancers: dancers,
    	dancing_men: dancing_men,
    	dancing_women: dancing_women,
    	sauna_person: sauna_person,
    	sauna_man: sauna_man,
    	sauna_woman: sauna_woman,
    	climbing: climbing,
    	climbing_man: climbing_man,
    	climbing_woman: climbing_woman,
    	person_fencing: person_fencing,
    	horse_racing: horse_racing,
    	skier: skier,
    	snowboarder: snowboarder,
    	golfing: golfing,
    	golfing_man: golfing_man,
    	golfing_woman: golfing_woman,
    	surfer: surfer,
    	surfing_man: surfing_man,
    	surfing_woman: surfing_woman,
    	rowboat: rowboat,
    	rowing_man: rowing_man,
    	rowing_woman: rowing_woman,
    	swimmer: swimmer,
    	swimming_man: swimming_man,
    	swimming_woman: swimming_woman,
    	bouncing_ball_person: bouncing_ball_person,
    	bouncing_ball_man: bouncing_ball_man,
    	basketball_man: basketball_man,
    	bouncing_ball_woman: bouncing_ball_woman,
    	basketball_woman: basketball_woman,
    	weight_lifting: weight_lifting,
    	weight_lifting_man: weight_lifting_man,
    	weight_lifting_woman: weight_lifting_woman,
    	bicyclist: bicyclist,
    	biking_man: biking_man,
    	biking_woman: biking_woman,
    	mountain_bicyclist: mountain_bicyclist,
    	mountain_biking_man: mountain_biking_man,
    	mountain_biking_woman: mountain_biking_woman,
    	cartwheeling: cartwheeling,
    	man_cartwheeling: man_cartwheeling,
    	woman_cartwheeling: woman_cartwheeling,
    	wrestling: wrestling,
    	men_wrestling: men_wrestling,
    	women_wrestling: women_wrestling,
    	water_polo: water_polo,
    	man_playing_water_polo: man_playing_water_polo,
    	woman_playing_water_polo: woman_playing_water_polo,
    	handball_person: handball_person,
    	man_playing_handball: man_playing_handball,
    	woman_playing_handball: woman_playing_handball,
    	juggling_person: juggling_person,
    	man_juggling: man_juggling,
    	woman_juggling: woman_juggling,
    	lotus_position: lotus_position,
    	lotus_position_man: lotus_position_man,
    	lotus_position_woman: lotus_position_woman,
    	bath: bath,
    	sleeping_bed: sleeping_bed,
    	people_holding_hands: people_holding_hands,
    	two_women_holding_hands: two_women_holding_hands,
    	couple: couple,
    	two_men_holding_hands: two_men_holding_hands,
    	couplekiss: couplekiss,
    	couplekiss_man_woman: couplekiss_man_woman,
    	couplekiss_man_man: couplekiss_man_man,
    	couplekiss_woman_woman: couplekiss_woman_woman,
    	couple_with_heart: couple_with_heart,
    	couple_with_heart_woman_man: couple_with_heart_woman_man,
    	couple_with_heart_man_man: couple_with_heart_man_man,
    	couple_with_heart_woman_woman: couple_with_heart_woman_woman,
    	family: family,
    	family_man_woman_boy: family_man_woman_boy,
    	family_man_woman_girl: family_man_woman_girl,
    	family_man_woman_girl_boy: family_man_woman_girl_boy,
    	family_man_woman_boy_boy: family_man_woman_boy_boy,
    	family_man_woman_girl_girl: family_man_woman_girl_girl,
    	family_man_man_boy: family_man_man_boy,
    	family_man_man_girl: family_man_man_girl,
    	family_man_man_girl_boy: family_man_man_girl_boy,
    	family_man_man_boy_boy: family_man_man_boy_boy,
    	family_man_man_girl_girl: family_man_man_girl_girl,
    	family_woman_woman_boy: family_woman_woman_boy,
    	family_woman_woman_girl: family_woman_woman_girl,
    	family_woman_woman_girl_boy: family_woman_woman_girl_boy,
    	family_woman_woman_boy_boy: family_woman_woman_boy_boy,
    	family_woman_woman_girl_girl: family_woman_woman_girl_girl,
    	family_man_boy: family_man_boy,
    	family_man_boy_boy: family_man_boy_boy,
    	family_man_girl: family_man_girl,
    	family_man_girl_boy: family_man_girl_boy,
    	family_man_girl_girl: family_man_girl_girl,
    	family_woman_boy: family_woman_boy,
    	family_woman_boy_boy: family_woman_boy_boy,
    	family_woman_girl: family_woman_girl,
    	family_woman_girl_boy: family_woman_girl_boy,
    	family_woman_girl_girl: family_woman_girl_girl,
    	speaking_head: speaking_head,
    	bust_in_silhouette: bust_in_silhouette,
    	busts_in_silhouette: busts_in_silhouette,
    	people_hugging: people_hugging,
    	footprints: footprints,
    	monkey_face: monkey_face,
    	monkey: monkey,
    	gorilla: gorilla,
    	orangutan: orangutan,
    	dog: dog,
    	dog2: dog2,
    	guide_dog: guide_dog,
    	service_dog: service_dog,
    	poodle: poodle,
    	wolf: wolf,
    	fox_face: fox_face,
    	raccoon: raccoon,
    	cat: cat,
    	cat2: cat2,
    	black_cat: black_cat,
    	lion: lion,
    	tiger: tiger,
    	tiger2: tiger2,
    	leopard: leopard,
    	horse: horse,
    	racehorse: racehorse,
    	unicorn: unicorn,
    	zebra: zebra,
    	deer: deer,
    	bison: bison,
    	cow: cow,
    	ox: ox,
    	water_buffalo: water_buffalo,
    	cow2: cow2,
    	pig: pig,
    	pig2: pig2,
    	boar: boar,
    	pig_nose: pig_nose,
    	ram: ram,
    	sheep: sheep,
    	goat: goat,
    	dromedary_camel: dromedary_camel,
    	camel: camel,
    	llama: llama,
    	giraffe: giraffe,
    	elephant: elephant,
    	mammoth: mammoth,
    	rhinoceros: rhinoceros,
    	hippopotamus: hippopotamus,
    	mouse: mouse,
    	mouse2: mouse2,
    	rat: rat,
    	hamster: hamster,
    	rabbit: rabbit,
    	rabbit2: rabbit2,
    	chipmunk: chipmunk,
    	beaver: beaver,
    	hedgehog: hedgehog,
    	bat: bat,
    	bear: bear,
    	polar_bear: polar_bear,
    	koala: koala,
    	panda_face: panda_face,
    	sloth: sloth,
    	otter: otter,
    	skunk: skunk,
    	kangaroo: kangaroo,
    	badger: badger,
    	feet: feet,
    	paw_prints: paw_prints,
    	turkey: turkey,
    	chicken: chicken,
    	rooster: rooster,
    	hatching_chick: hatching_chick,
    	baby_chick: baby_chick,
    	hatched_chick: hatched_chick,
    	bird: bird,
    	penguin: penguin,
    	dove: dove,
    	eagle: eagle,
    	duck: duck,
    	swan: swan,
    	owl: owl,
    	dodo: dodo,
    	feather: feather,
    	flamingo: flamingo,
    	peacock: peacock,
    	parrot: parrot,
    	frog: frog,
    	crocodile: crocodile,
    	turtle: turtle,
    	lizard: lizard,
    	snake: snake,
    	dragon_face: dragon_face,
    	dragon: dragon,
    	sauropod: sauropod,
    	"t-rex": "🦖",
    	whale: whale,
    	whale2: whale2,
    	dolphin: dolphin,
    	flipper: flipper,
    	seal: seal,
    	fish: fish,
    	tropical_fish: tropical_fish,
    	blowfish: blowfish,
    	shark: shark,
    	octopus: octopus,
    	shell: shell,
    	snail: snail,
    	butterfly: butterfly,
    	bug: bug,
    	ant: ant,
    	bee: bee,
    	honeybee: honeybee,
    	beetle: beetle,
    	lady_beetle: lady_beetle,
    	cricket: cricket,
    	cockroach: cockroach,
    	spider: spider,
    	spider_web: spider_web,
    	scorpion: scorpion,
    	mosquito: mosquito,
    	fly: fly,
    	worm: worm,
    	microbe: microbe,
    	bouquet: bouquet,
    	cherry_blossom: cherry_blossom,
    	white_flower: white_flower,
    	rosette: rosette,
    	rose: rose,
    	wilted_flower: wilted_flower,
    	hibiscus: hibiscus,
    	sunflower: sunflower,
    	blossom: blossom,
    	tulip: tulip,
    	seedling: seedling,
    	potted_plant: potted_plant,
    	evergreen_tree: evergreen_tree,
    	deciduous_tree: deciduous_tree,
    	palm_tree: palm_tree,
    	cactus: cactus,
    	ear_of_rice: ear_of_rice,
    	herb: herb,
    	shamrock: shamrock,
    	four_leaf_clover: four_leaf_clover,
    	maple_leaf: maple_leaf,
    	fallen_leaf: fallen_leaf,
    	leaves: leaves,
    	grapes: grapes,
    	melon: melon,
    	watermelon: watermelon,
    	tangerine: tangerine,
    	orange: orange,
    	mandarin: mandarin,
    	lemon: lemon,
    	banana: banana,
    	pineapple: pineapple,
    	mango: mango,
    	apple: apple,
    	green_apple: green_apple,
    	pear: pear,
    	peach: peach,
    	cherries: cherries,
    	strawberry: strawberry,
    	blueberries: blueberries,
    	kiwi_fruit: kiwi_fruit,
    	tomato: tomato,
    	olive: olive,
    	coconut: coconut,
    	avocado: avocado,
    	eggplant: eggplant,
    	potato: potato,
    	carrot: carrot,
    	corn: corn,
    	hot_pepper: hot_pepper,
    	bell_pepper: bell_pepper,
    	cucumber: cucumber,
    	leafy_green: leafy_green,
    	broccoli: broccoli,
    	garlic: garlic,
    	onion: onion,
    	mushroom: mushroom,
    	peanuts: peanuts,
    	chestnut: chestnut,
    	bread: bread,
    	croissant: croissant,
    	baguette_bread: baguette_bread,
    	flatbread: flatbread,
    	pretzel: pretzel,
    	bagel: bagel,
    	pancakes: pancakes,
    	waffle: waffle,
    	cheese: cheese,
    	meat_on_bone: meat_on_bone,
    	poultry_leg: poultry_leg,
    	cut_of_meat: cut_of_meat,
    	bacon: bacon,
    	hamburger: hamburger,
    	fries: fries,
    	pizza: pizza,
    	hotdog: hotdog,
    	sandwich: sandwich,
    	taco: taco,
    	burrito: burrito,
    	tamale: tamale,
    	stuffed_flatbread: stuffed_flatbread,
    	falafel: falafel,
    	egg: egg,
    	fried_egg: fried_egg,
    	shallow_pan_of_food: shallow_pan_of_food,
    	stew: stew,
    	fondue: fondue,
    	bowl_with_spoon: bowl_with_spoon,
    	green_salad: green_salad,
    	popcorn: popcorn,
    	butter: butter,
    	salt: salt,
    	canned_food: canned_food,
    	bento: bento,
    	rice_cracker: rice_cracker,
    	rice_ball: rice_ball,
    	rice: rice,
    	curry: curry,
    	ramen: ramen,
    	spaghetti: spaghetti,
    	sweet_potato: sweet_potato,
    	oden: oden,
    	sushi: sushi,
    	fried_shrimp: fried_shrimp,
    	fish_cake: fish_cake,
    	moon_cake: moon_cake,
    	dango: dango,
    	dumpling: dumpling,
    	fortune_cookie: fortune_cookie,
    	takeout_box: takeout_box,
    	crab: crab,
    	lobster: lobster,
    	shrimp: shrimp,
    	squid: squid,
    	oyster: oyster,
    	icecream: icecream,
    	shaved_ice: shaved_ice,
    	ice_cream: ice_cream,
    	doughnut: doughnut,
    	cookie: cookie,
    	birthday: birthday,
    	cake: cake,
    	cupcake: cupcake,
    	pie: pie,
    	chocolate_bar: chocolate_bar,
    	candy: candy,
    	lollipop: lollipop,
    	custard: custard,
    	honey_pot: honey_pot,
    	baby_bottle: baby_bottle,
    	milk_glass: milk_glass,
    	coffee: coffee,
    	teapot: teapot,
    	tea: tea,
    	sake: sake,
    	champagne: champagne,
    	wine_glass: wine_glass,
    	cocktail: cocktail,
    	tropical_drink: tropical_drink,
    	beer: beer,
    	beers: beers,
    	clinking_glasses: clinking_glasses,
    	tumbler_glass: tumbler_glass,
    	cup_with_straw: cup_with_straw,
    	bubble_tea: bubble_tea,
    	beverage_box: beverage_box,
    	mate: mate,
    	ice_cube: ice_cube,
    	chopsticks: chopsticks,
    	plate_with_cutlery: plate_with_cutlery,
    	fork_and_knife: fork_and_knife,
    	spoon: spoon,
    	hocho: hocho,
    	knife: knife,
    	amphora: amphora,
    	earth_africa: earth_africa,
    	earth_americas: earth_americas,
    	earth_asia: earth_asia,
    	globe_with_meridians: globe_with_meridians,
    	world_map: world_map,
    	japan: japan,
    	compass: compass,
    	mountain_snow: mountain_snow,
    	mountain: mountain,
    	volcano: volcano,
    	mount_fuji: mount_fuji,
    	camping: camping,
    	beach_umbrella: beach_umbrella,
    	desert: desert,
    	desert_island: desert_island,
    	national_park: national_park,
    	stadium: stadium,
    	classical_building: classical_building,
    	building_construction: building_construction,
    	bricks: bricks,
    	rock: rock,
    	wood: wood,
    	hut: hut,
    	houses: houses,
    	derelict_house: derelict_house,
    	house: house,
    	house_with_garden: house_with_garden,
    	office: office,
    	post_office: post_office,
    	european_post_office: european_post_office,
    	hospital: hospital,
    	bank: bank,
    	hotel: hotel,
    	love_hotel: love_hotel,
    	convenience_store: convenience_store,
    	school: school,
    	department_store: department_store,
    	factory: factory,
    	japanese_castle: japanese_castle,
    	european_castle: european_castle,
    	wedding: wedding,
    	tokyo_tower: tokyo_tower,
    	statue_of_liberty: statue_of_liberty,
    	church: church,
    	mosque: mosque,
    	hindu_temple: hindu_temple,
    	synagogue: synagogue,
    	shinto_shrine: shinto_shrine,
    	kaaba: kaaba,
    	fountain: fountain,
    	tent: tent,
    	foggy: foggy,
    	night_with_stars: night_with_stars,
    	cityscape: cityscape,
    	sunrise_over_mountains: sunrise_over_mountains,
    	sunrise: sunrise,
    	city_sunset: city_sunset,
    	city_sunrise: city_sunrise,
    	bridge_at_night: bridge_at_night,
    	hotsprings: hotsprings,
    	carousel_horse: carousel_horse,
    	ferris_wheel: ferris_wheel,
    	roller_coaster: roller_coaster,
    	barber: barber,
    	circus_tent: circus_tent,
    	steam_locomotive: steam_locomotive,
    	railway_car: railway_car,
    	bullettrain_side: bullettrain_side,
    	bullettrain_front: bullettrain_front,
    	train2: train2,
    	metro: metro,
    	light_rail: light_rail,
    	station: station,
    	tram: tram,
    	monorail: monorail,
    	mountain_railway: mountain_railway,
    	train: train,
    	bus: bus,
    	oncoming_bus: oncoming_bus,
    	trolleybus: trolleybus,
    	minibus: minibus,
    	ambulance: ambulance,
    	fire_engine: fire_engine,
    	police_car: police_car,
    	oncoming_police_car: oncoming_police_car,
    	taxi: taxi,
    	oncoming_taxi: oncoming_taxi,
    	car: car,
    	red_car: red_car,
    	oncoming_automobile: oncoming_automobile,
    	blue_car: blue_car,
    	pickup_truck: pickup_truck,
    	truck: truck,
    	articulated_lorry: articulated_lorry,
    	tractor: tractor,
    	racing_car: racing_car,
    	motorcycle: motorcycle,
    	motor_scooter: motor_scooter,
    	manual_wheelchair: manual_wheelchair,
    	motorized_wheelchair: motorized_wheelchair,
    	auto_rickshaw: auto_rickshaw,
    	bike: bike,
    	kick_scooter: kick_scooter,
    	skateboard: skateboard,
    	roller_skate: roller_skate,
    	busstop: busstop,
    	motorway: motorway,
    	railway_track: railway_track,
    	oil_drum: oil_drum,
    	fuelpump: fuelpump,
    	rotating_light: rotating_light,
    	traffic_light: traffic_light,
    	vertical_traffic_light: vertical_traffic_light,
    	stop_sign: stop_sign,
    	construction: construction,
    	anchor: anchor,
    	boat: boat,
    	sailboat: sailboat,
    	canoe: canoe,
    	speedboat: speedboat,
    	passenger_ship: passenger_ship,
    	ferry: ferry,
    	motor_boat: motor_boat,
    	ship: ship,
    	airplane: airplane,
    	small_airplane: small_airplane,
    	flight_departure: flight_departure,
    	flight_arrival: flight_arrival,
    	parachute: parachute,
    	seat: seat,
    	helicopter: helicopter,
    	suspension_railway: suspension_railway,
    	mountain_cableway: mountain_cableway,
    	aerial_tramway: aerial_tramway,
    	artificial_satellite: artificial_satellite,
    	rocket: rocket,
    	flying_saucer: flying_saucer,
    	bellhop_bell: bellhop_bell,
    	luggage: luggage,
    	hourglass: hourglass,
    	hourglass_flowing_sand: hourglass_flowing_sand,
    	watch: watch,
    	alarm_clock: alarm_clock,
    	stopwatch: stopwatch,
    	timer_clock: timer_clock,
    	mantelpiece_clock: mantelpiece_clock,
    	clock12: clock12,
    	clock1230: clock1230,
    	clock1: clock1,
    	clock130: clock130,
    	clock2: clock2,
    	clock230: clock230,
    	clock3: clock3,
    	clock330: clock330,
    	clock4: clock4,
    	clock430: clock430,
    	clock5: clock5,
    	clock530: clock530,
    	clock6: clock6,
    	clock630: clock630,
    	clock7: clock7,
    	clock730: clock730,
    	clock8: clock8,
    	clock830: clock830,
    	clock9: clock9,
    	clock930: clock930,
    	clock10: clock10,
    	clock1030: clock1030,
    	clock11: clock11,
    	clock1130: clock1130,
    	new_moon: new_moon,
    	waxing_crescent_moon: waxing_crescent_moon,
    	first_quarter_moon: first_quarter_moon,
    	moon: moon,
    	waxing_gibbous_moon: waxing_gibbous_moon,
    	full_moon: full_moon,
    	waning_gibbous_moon: waning_gibbous_moon,
    	last_quarter_moon: last_quarter_moon,
    	waning_crescent_moon: waning_crescent_moon,
    	crescent_moon: crescent_moon,
    	new_moon_with_face: new_moon_with_face,
    	first_quarter_moon_with_face: first_quarter_moon_with_face,
    	last_quarter_moon_with_face: last_quarter_moon_with_face,
    	thermometer: thermometer,
    	sunny: sunny,
    	full_moon_with_face: full_moon_with_face,
    	sun_with_face: sun_with_face,
    	ringed_planet: ringed_planet,
    	star: star$1,
    	star2: star2,
    	stars: stars,
    	milky_way: milky_way,
    	cloud: cloud,
    	partly_sunny: partly_sunny,
    	cloud_with_lightning_and_rain: cloud_with_lightning_and_rain,
    	sun_behind_small_cloud: sun_behind_small_cloud,
    	sun_behind_large_cloud: sun_behind_large_cloud,
    	sun_behind_rain_cloud: sun_behind_rain_cloud,
    	cloud_with_rain: cloud_with_rain,
    	cloud_with_snow: cloud_with_snow,
    	cloud_with_lightning: cloud_with_lightning,
    	tornado: tornado,
    	fog: fog,
    	wind_face: wind_face,
    	cyclone: cyclone,
    	rainbow: rainbow,
    	closed_umbrella: closed_umbrella,
    	open_umbrella: open_umbrella,
    	umbrella: umbrella,
    	parasol_on_ground: parasol_on_ground,
    	zap: zap,
    	snowflake: snowflake,
    	snowman_with_snow: snowman_with_snow,
    	snowman: snowman,
    	comet: comet,
    	fire: fire,
    	droplet: droplet,
    	ocean: ocean,
    	jack_o_lantern: jack_o_lantern,
    	christmas_tree: christmas_tree,
    	fireworks: fireworks,
    	sparkler: sparkler,
    	firecracker: firecracker,
    	sparkles: sparkles,
    	balloon: balloon,
    	tada: tada,
    	confetti_ball: confetti_ball,
    	tanabata_tree: tanabata_tree,
    	bamboo: bamboo,
    	dolls: dolls,
    	flags: flags,
    	wind_chime: wind_chime,
    	rice_scene: rice_scene,
    	red_envelope: red_envelope,
    	ribbon: ribbon,
    	gift: gift,
    	reminder_ribbon: reminder_ribbon,
    	tickets: tickets,
    	ticket: ticket,
    	medal_military: medal_military,
    	trophy: trophy,
    	medal_sports: medal_sports,
    	"1st_place_medal": "🥇",
    	"2nd_place_medal": "🥈",
    	"3rd_place_medal": "🥉",
    	soccer: soccer,
    	baseball: baseball,
    	softball: softball,
    	basketball: basketball,
    	volleyball: volleyball,
    	football: football,
    	rugby_football: rugby_football,
    	tennis: tennis,
    	flying_disc: flying_disc,
    	bowling: bowling,
    	cricket_game: cricket_game,
    	field_hockey: field_hockey,
    	ice_hockey: ice_hockey,
    	lacrosse: lacrosse,
    	ping_pong: ping_pong,
    	badminton: badminton,
    	boxing_glove: boxing_glove,
    	martial_arts_uniform: martial_arts_uniform,
    	goal_net: goal_net,
    	golf: golf,
    	ice_skate: ice_skate,
    	fishing_pole_and_fish: fishing_pole_and_fish,
    	diving_mask: diving_mask,
    	running_shirt_with_sash: running_shirt_with_sash,
    	ski: ski,
    	sled: sled,
    	curling_stone: curling_stone,
    	dart: dart,
    	yo_yo: yo_yo,
    	kite: kite,
    	"8ball": "🎱",
    	crystal_ball: crystal_ball,
    	magic_wand: magic_wand,
    	nazar_amulet: nazar_amulet,
    	video_game: video_game,
    	joystick: joystick,
    	slot_machine: slot_machine,
    	game_die: game_die,
    	jigsaw: jigsaw,
    	teddy_bear: teddy_bear,
    	pinata: pinata,
    	nesting_dolls: nesting_dolls,
    	spades: spades$1,
    	hearts: hearts$1,
    	diamonds: diamonds,
    	clubs: clubs$1,
    	chess_pawn: chess_pawn,
    	black_joker: black_joker,
    	mahjong: mahjong,
    	flower_playing_cards: flower_playing_cards,
    	performing_arts: performing_arts,
    	framed_picture: framed_picture,
    	art: art,
    	thread: thread,
    	sewing_needle: sewing_needle,
    	yarn: yarn,
    	knot: knot,
    	eyeglasses: eyeglasses,
    	dark_sunglasses: dark_sunglasses,
    	goggles: goggles,
    	lab_coat: lab_coat,
    	safety_vest: safety_vest,
    	necktie: necktie,
    	shirt: shirt,
    	tshirt: tshirt,
    	jeans: jeans,
    	scarf: scarf,
    	gloves: gloves,
    	coat: coat,
    	socks: socks,
    	dress: dress,
    	kimono: kimono,
    	sari: sari,
    	one_piece_swimsuit: one_piece_swimsuit,
    	swim_brief: swim_brief,
    	shorts: shorts,
    	bikini: bikini,
    	womans_clothes: womans_clothes,
    	purse: purse,
    	handbag: handbag,
    	pouch: pouch,
    	shopping: shopping,
    	school_satchel: school_satchel,
    	thong_sandal: thong_sandal,
    	mans_shoe: mans_shoe,
    	shoe: shoe,
    	athletic_shoe: athletic_shoe,
    	hiking_boot: hiking_boot,
    	flat_shoe: flat_shoe,
    	high_heel: high_heel,
    	sandal: sandal,
    	ballet_shoes: ballet_shoes,
    	boot: boot,
    	crown: crown,
    	womans_hat: womans_hat,
    	tophat: tophat,
    	mortar_board: mortar_board,
    	billed_cap: billed_cap,
    	military_helmet: military_helmet,
    	rescue_worker_helmet: rescue_worker_helmet,
    	prayer_beads: prayer_beads,
    	lipstick: lipstick,
    	ring: ring$1,
    	gem: gem,
    	mute: mute,
    	speaker: speaker,
    	sound: sound,
    	loud_sound: loud_sound,
    	loudspeaker: loudspeaker,
    	mega: mega,
    	postal_horn: postal_horn,
    	bell: bell,
    	no_bell: no_bell,
    	musical_score: musical_score,
    	musical_note: musical_note,
    	notes: notes,
    	studio_microphone: studio_microphone,
    	level_slider: level_slider,
    	control_knobs: control_knobs,
    	microphone: microphone,
    	headphones: headphones,
    	radio: radio,
    	saxophone: saxophone,
    	accordion: accordion,
    	guitar: guitar,
    	musical_keyboard: musical_keyboard,
    	trumpet: trumpet,
    	violin: violin,
    	banjo: banjo,
    	drum: drum,
    	long_drum: long_drum,
    	iphone: iphone,
    	calling: calling,
    	phone: phone$1,
    	telephone: telephone,
    	telephone_receiver: telephone_receiver,
    	pager: pager,
    	fax: fax,
    	battery: battery,
    	electric_plug: electric_plug,
    	computer: computer,
    	desktop_computer: desktop_computer,
    	printer: printer,
    	keyboard: keyboard,
    	computer_mouse: computer_mouse,
    	trackball: trackball,
    	minidisc: minidisc,
    	floppy_disk: floppy_disk,
    	cd: cd,
    	dvd: dvd,
    	abacus: abacus,
    	movie_camera: movie_camera,
    	film_strip: film_strip,
    	film_projector: film_projector,
    	clapper: clapper,
    	tv: tv,
    	camera: camera,
    	camera_flash: camera_flash,
    	video_camera: video_camera,
    	vhs: vhs,
    	mag: mag,
    	mag_right: mag_right,
    	candle: candle,
    	bulb: bulb,
    	flashlight: flashlight,
    	izakaya_lantern: izakaya_lantern,
    	lantern: lantern,
    	diya_lamp: diya_lamp,
    	notebook_with_decorative_cover: notebook_with_decorative_cover,
    	closed_book: closed_book,
    	book: book,
    	open_book: open_book,
    	green_book: green_book,
    	blue_book: blue_book,
    	orange_book: orange_book,
    	books: books,
    	notebook: notebook,
    	ledger: ledger,
    	page_with_curl: page_with_curl,
    	scroll: scroll,
    	page_facing_up: page_facing_up,
    	newspaper: newspaper,
    	newspaper_roll: newspaper_roll,
    	bookmark_tabs: bookmark_tabs,
    	bookmark: bookmark,
    	label: label,
    	moneybag: moneybag,
    	coin: coin,
    	yen: yen$2,
    	dollar: dollar$1,
    	euro: euro$1,
    	pound: pound$2,
    	money_with_wings: money_with_wings,
    	credit_card: credit_card,
    	receipt: receipt,
    	chart: chart,
    	envelope: envelope,
    	email: email,
    	"e-mail": "📧",
    	incoming_envelope: incoming_envelope,
    	envelope_with_arrow: envelope_with_arrow,
    	outbox_tray: outbox_tray,
    	inbox_tray: inbox_tray,
    	"package": "📦",
    	mailbox: mailbox,
    	mailbox_closed: mailbox_closed,
    	mailbox_with_mail: mailbox_with_mail,
    	mailbox_with_no_mail: mailbox_with_no_mail,
    	postbox: postbox,
    	ballot_box: ballot_box,
    	pencil2: pencil2,
    	black_nib: black_nib,
    	fountain_pen: fountain_pen,
    	pen: pen,
    	paintbrush: paintbrush,
    	crayon: crayon,
    	memo: memo,
    	pencil: pencil,
    	briefcase: briefcase,
    	file_folder: file_folder,
    	open_file_folder: open_file_folder,
    	card_index_dividers: card_index_dividers,
    	date: date,
    	calendar: calendar,
    	spiral_notepad: spiral_notepad,
    	spiral_calendar: spiral_calendar,
    	card_index: card_index,
    	chart_with_upwards_trend: chart_with_upwards_trend,
    	chart_with_downwards_trend: chart_with_downwards_trend,
    	bar_chart: bar_chart,
    	clipboard: clipboard,
    	pushpin: pushpin,
    	round_pushpin: round_pushpin,
    	paperclip: paperclip,
    	paperclips: paperclips,
    	straight_ruler: straight_ruler,
    	triangular_ruler: triangular_ruler,
    	scissors: scissors,
    	card_file_box: card_file_box,
    	file_cabinet: file_cabinet,
    	wastebasket: wastebasket,
    	lock: lock,
    	unlock: unlock,
    	lock_with_ink_pen: lock_with_ink_pen,
    	closed_lock_with_key: closed_lock_with_key,
    	key: key$1,
    	old_key: old_key,
    	hammer: hammer,
    	axe: axe,
    	pick: pick,
    	hammer_and_pick: hammer_and_pick,
    	hammer_and_wrench: hammer_and_wrench,
    	dagger: dagger$1,
    	crossed_swords: crossed_swords,
    	gun: gun,
    	boomerang: boomerang,
    	bow_and_arrow: bow_and_arrow,
    	shield: shield,
    	carpentry_saw: carpentry_saw,
    	wrench: wrench,
    	screwdriver: screwdriver,
    	nut_and_bolt: nut_and_bolt,
    	gear: gear,
    	clamp: clamp,
    	balance_scale: balance_scale,
    	probing_cane: probing_cane,
    	link: link$1,
    	chains: chains,
    	hook: hook,
    	toolbox: toolbox,
    	magnet: magnet,
    	ladder: ladder,
    	alembic: alembic,
    	test_tube: test_tube,
    	petri_dish: petri_dish,
    	dna: dna,
    	microscope: microscope,
    	telescope: telescope,
    	satellite: satellite,
    	syringe: syringe,
    	drop_of_blood: drop_of_blood,
    	pill: pill,
    	adhesive_bandage: adhesive_bandage,
    	stethoscope: stethoscope,
    	door: door,
    	elevator: elevator,
    	mirror: mirror,
    	window: window$1,
    	bed: bed,
    	couch_and_lamp: couch_and_lamp,
    	chair: chair,
    	toilet: toilet,
    	plunger: plunger,
    	shower: shower,
    	bathtub: bathtub,
    	mouse_trap: mouse_trap,
    	razor: razor,
    	lotion_bottle: lotion_bottle,
    	safety_pin: safety_pin,
    	broom: broom,
    	basket: basket,
    	roll_of_paper: roll_of_paper,
    	bucket: bucket,
    	soap: soap,
    	toothbrush: toothbrush,
    	sponge: sponge,
    	fire_extinguisher: fire_extinguisher,
    	shopping_cart: shopping_cart,
    	smoking: smoking,
    	coffin: coffin,
    	headstone: headstone,
    	funeral_urn: funeral_urn,
    	moyai: moyai,
    	placard: placard,
    	atm: atm,
    	put_litter_in_its_place: put_litter_in_its_place,
    	potable_water: potable_water,
    	wheelchair: wheelchair,
    	mens: mens,
    	womens: womens,
    	restroom: restroom,
    	baby_symbol: baby_symbol,
    	wc: wc,
    	passport_control: passport_control,
    	customs: customs,
    	baggage_claim: baggage_claim,
    	left_luggage: left_luggage,
    	warning: warning,
    	children_crossing: children_crossing,
    	no_entry: no_entry,
    	no_entry_sign: no_entry_sign,
    	no_bicycles: no_bicycles,
    	no_smoking: no_smoking,
    	do_not_litter: do_not_litter,
    	"non-potable_water": "🚱",
    	no_pedestrians: no_pedestrians,
    	no_mobile_phones: no_mobile_phones,
    	underage: underage,
    	radioactive: radioactive,
    	biohazard: biohazard,
    	arrow_up: arrow_up,
    	arrow_upper_right: arrow_upper_right,
    	arrow_right: arrow_right,
    	arrow_lower_right: arrow_lower_right,
    	arrow_down: arrow_down,
    	arrow_lower_left: arrow_lower_left,
    	arrow_left: arrow_left,
    	arrow_upper_left: arrow_upper_left,
    	arrow_up_down: arrow_up_down,
    	left_right_arrow: left_right_arrow,
    	leftwards_arrow_with_hook: leftwards_arrow_with_hook,
    	arrow_right_hook: arrow_right_hook,
    	arrow_heading_up: arrow_heading_up,
    	arrow_heading_down: arrow_heading_down,
    	arrows_clockwise: arrows_clockwise,
    	arrows_counterclockwise: arrows_counterclockwise,
    	back: back,
    	end: end,
    	on: on$1,
    	soon: soon,
    	top: top$1,
    	place_of_worship: place_of_worship,
    	atom_symbol: atom_symbol,
    	om: om,
    	star_of_david: star_of_david,
    	wheel_of_dharma: wheel_of_dharma,
    	yin_yang: yin_yang,
    	latin_cross: latin_cross,
    	orthodox_cross: orthodox_cross,
    	star_and_crescent: star_and_crescent,
    	peace_symbol: peace_symbol,
    	menorah: menorah,
    	six_pointed_star: six_pointed_star,
    	aries: aries,
    	taurus: taurus,
    	gemini: gemini,
    	cancer: cancer,
    	leo: leo,
    	virgo: virgo,
    	libra: libra,
    	scorpius: scorpius,
    	sagittarius: sagittarius,
    	capricorn: capricorn,
    	aquarius: aquarius,
    	pisces: pisces,
    	ophiuchus: ophiuchus,
    	twisted_rightwards_arrows: twisted_rightwards_arrows,
    	repeat: repeat$2,
    	repeat_one: repeat_one,
    	arrow_forward: arrow_forward,
    	fast_forward: fast_forward,
    	next_track_button: next_track_button,
    	play_or_pause_button: play_or_pause_button,
    	arrow_backward: arrow_backward,
    	rewind: rewind,
    	previous_track_button: previous_track_button,
    	arrow_up_small: arrow_up_small,
    	arrow_double_up: arrow_double_up,
    	arrow_down_small: arrow_down_small,
    	arrow_double_down: arrow_double_down,
    	pause_button: pause_button,
    	stop_button: stop_button,
    	record_button: record_button,
    	eject_button: eject_button,
    	cinema: cinema,
    	low_brightness: low_brightness,
    	high_brightness: high_brightness,
    	signal_strength: signal_strength,
    	vibration_mode: vibration_mode,
    	mobile_phone_off: mobile_phone_off,
    	female_sign: female_sign,
    	male_sign: male_sign,
    	transgender_symbol: transgender_symbol,
    	heavy_multiplication_x: heavy_multiplication_x,
    	heavy_plus_sign: heavy_plus_sign,
    	heavy_minus_sign: heavy_minus_sign,
    	heavy_division_sign: heavy_division_sign,
    	infinity: infinity,
    	bangbang: bangbang,
    	interrobang: interrobang,
    	question: question,
    	grey_question: grey_question,
    	grey_exclamation: grey_exclamation,
    	exclamation: exclamation,
    	heavy_exclamation_mark: heavy_exclamation_mark,
    	wavy_dash: wavy_dash,
    	currency_exchange: currency_exchange,
    	heavy_dollar_sign: heavy_dollar_sign,
    	medical_symbol: medical_symbol,
    	recycle: recycle,
    	fleur_de_lis: fleur_de_lis,
    	trident: trident,
    	name_badge: name_badge,
    	beginner: beginner,
    	o: o,
    	white_check_mark: white_check_mark,
    	ballot_box_with_check: ballot_box_with_check,
    	heavy_check_mark: heavy_check_mark,
    	x: x,
    	negative_squared_cross_mark: negative_squared_cross_mark,
    	curly_loop: curly_loop,
    	loop: loop,
    	part_alternation_mark: part_alternation_mark,
    	eight_spoked_asterisk: eight_spoked_asterisk,
    	eight_pointed_black_star: eight_pointed_black_star,
    	sparkle: sparkle,
    	copyright: copyright,
    	registered: registered,
    	tm: tm,
    	hash: hash,
    	asterisk: asterisk,
    	zero: zero,
    	one: one,
    	two: two,
    	three: three,
    	four: four,
    	five: five,
    	six: six,
    	seven: seven,
    	eight: eight,
    	nine: nine,
    	keycap_ten: keycap_ten,
    	capital_abcd: capital_abcd,
    	abcd: abcd,
    	symbols: symbols,
    	abc: abc,
    	a: a,
    	ab: ab,
    	b: b,
    	cl: cl,
    	cool: cool,
    	free: free,
    	information_source: information_source,
    	id: id,
    	m: m,
    	"new": "🆕",
    	ng: ng,
    	o2: o2,
    	ok: ok,
    	parking: parking,
    	sos: sos,
    	up: up,
    	vs: vs,
    	koko: koko,
    	sa: sa,
    	ideograph_advantage: ideograph_advantage,
    	accept: accept,
    	congratulations: congratulations,
    	secret: secret,
    	u6e80: u6e80,
    	red_circle: red_circle,
    	orange_circle: orange_circle,
    	yellow_circle: yellow_circle,
    	green_circle: green_circle,
    	large_blue_circle: large_blue_circle,
    	purple_circle: purple_circle,
    	brown_circle: brown_circle,
    	black_circle: black_circle,
    	white_circle: white_circle,
    	red_square: red_square,
    	orange_square: orange_square,
    	yellow_square: yellow_square,
    	green_square: green_square,
    	blue_square: blue_square,
    	purple_square: purple_square,
    	brown_square: brown_square,
    	black_large_square: black_large_square,
    	white_large_square: white_large_square,
    	black_medium_square: black_medium_square,
    	white_medium_square: white_medium_square,
    	black_medium_small_square: black_medium_small_square,
    	white_medium_small_square: white_medium_small_square,
    	black_small_square: black_small_square,
    	white_small_square: white_small_square,
    	large_orange_diamond: large_orange_diamond,
    	large_blue_diamond: large_blue_diamond,
    	small_orange_diamond: small_orange_diamond,
    	small_blue_diamond: small_blue_diamond,
    	small_red_triangle: small_red_triangle,
    	small_red_triangle_down: small_red_triangle_down,
    	diamond_shape_with_a_dot_inside: diamond_shape_with_a_dot_inside,
    	radio_button: radio_button,
    	white_square_button: white_square_button,
    	black_square_button: black_square_button,
    	checkered_flag: checkered_flag,
    	triangular_flag_on_post: triangular_flag_on_post,
    	crossed_flags: crossed_flags,
    	black_flag: black_flag,
    	white_flag: white_flag,
    	rainbow_flag: rainbow_flag,
    	transgender_flag: transgender_flag,
    	pirate_flag: pirate_flag,
    	ascension_island: ascension_island,
    	andorra: andorra,
    	united_arab_emirates: united_arab_emirates,
    	afghanistan: afghanistan,
    	antigua_barbuda: antigua_barbuda,
    	anguilla: anguilla,
    	albania: albania,
    	armenia: armenia,
    	angola: angola,
    	antarctica: antarctica,
    	argentina: argentina,
    	american_samoa: american_samoa,
    	austria: austria,
    	australia: australia,
    	aruba: aruba,
    	aland_islands: aland_islands,
    	azerbaijan: azerbaijan,
    	bosnia_herzegovina: bosnia_herzegovina,
    	barbados: barbados,
    	bangladesh: bangladesh,
    	belgium: belgium,
    	burkina_faso: burkina_faso,
    	bulgaria: bulgaria,
    	bahrain: bahrain,
    	burundi: burundi,
    	benin: benin,
    	st_barthelemy: st_barthelemy,
    	bermuda: bermuda,
    	brunei: brunei,
    	bolivia: bolivia,
    	caribbean_netherlands: caribbean_netherlands,
    	brazil: brazil,
    	bahamas: bahamas,
    	bhutan: bhutan,
    	bouvet_island: bouvet_island,
    	botswana: botswana,
    	belarus: belarus,
    	belize: belize,
    	canada: canada,
    	cocos_islands: cocos_islands,
    	congo_kinshasa: congo_kinshasa,
    	central_african_republic: central_african_republic,
    	congo_brazzaville: congo_brazzaville,
    	switzerland: switzerland,
    	cote_divoire: cote_divoire,
    	cook_islands: cook_islands,
    	chile: chile,
    	cameroon: cameroon,
    	cn: cn,
    	colombia: colombia,
    	clipperton_island: clipperton_island,
    	costa_rica: costa_rica,
    	cuba: cuba,
    	cape_verde: cape_verde,
    	curacao: curacao,
    	christmas_island: christmas_island,
    	cyprus: cyprus,
    	czech_republic: czech_republic,
    	de: de,
    	diego_garcia: diego_garcia,
    	djibouti: djibouti,
    	denmark: denmark,
    	dominica: dominica,
    	dominican_republic: dominican_republic,
    	algeria: algeria,
    	ceuta_melilla: ceuta_melilla,
    	ecuador: ecuador,
    	estonia: estonia,
    	egypt: egypt,
    	western_sahara: western_sahara,
    	eritrea: eritrea,
    	es: es,
    	ethiopia: ethiopia,
    	eu: eu,
    	european_union: european_union,
    	finland: finland,
    	fiji: fiji,
    	falkland_islands: falkland_islands,
    	micronesia: micronesia,
    	faroe_islands: faroe_islands,
    	fr: fr,
    	gabon: gabon,
    	gb: gb,
    	uk: uk,
    	grenada: grenada,
    	georgia: georgia,
    	french_guiana: french_guiana,
    	guernsey: guernsey,
    	ghana: ghana,
    	gibraltar: gibraltar,
    	greenland: greenland,
    	gambia: gambia,
    	guinea: guinea,
    	guadeloupe: guadeloupe,
    	equatorial_guinea: equatorial_guinea,
    	greece: greece,
    	south_georgia_south_sandwich_islands: south_georgia_south_sandwich_islands,
    	guatemala: guatemala,
    	guam: guam,
    	guinea_bissau: guinea_bissau,
    	guyana: guyana,
    	hong_kong: hong_kong,
    	heard_mcdonald_islands: heard_mcdonald_islands,
    	honduras: honduras,
    	croatia: croatia,
    	haiti: haiti,
    	hungary: hungary,
    	canary_islands: canary_islands,
    	indonesia: indonesia,
    	ireland: ireland,
    	israel: israel,
    	isle_of_man: isle_of_man,
    	india: india,
    	british_indian_ocean_territory: british_indian_ocean_territory,
    	iraq: iraq,
    	iran: iran,
    	iceland: iceland,
    	it: it$1,
    	jersey: jersey,
    	jamaica: jamaica,
    	jordan: jordan,
    	jp: jp,
    	kenya: kenya,
    	kyrgyzstan: kyrgyzstan,
    	cambodia: cambodia,
    	kiribati: kiribati,
    	comoros: comoros,
    	st_kitts_nevis: st_kitts_nevis,
    	north_korea: north_korea,
    	kr: kr,
    	kuwait: kuwait,
    	cayman_islands: cayman_islands,
    	kazakhstan: kazakhstan,
    	laos: laos,
    	lebanon: lebanon,
    	st_lucia: st_lucia,
    	liechtenstein: liechtenstein,
    	sri_lanka: sri_lanka,
    	liberia: liberia,
    	lesotho: lesotho,
    	lithuania: lithuania,
    	luxembourg: luxembourg,
    	latvia: latvia,
    	libya: libya,
    	morocco: morocco,
    	monaco: monaco,
    	moldova: moldova,
    	montenegro: montenegro,
    	st_martin: st_martin,
    	madagascar: madagascar,
    	marshall_islands: marshall_islands,
    	macedonia: macedonia,
    	mali: mali,
    	myanmar: myanmar,
    	mongolia: mongolia,
    	macau: macau,
    	northern_mariana_islands: northern_mariana_islands,
    	martinique: martinique,
    	mauritania: mauritania,
    	montserrat: montserrat,
    	malta: malta,
    	mauritius: mauritius,
    	maldives: maldives,
    	malawi: malawi,
    	mexico: mexico,
    	malaysia: malaysia,
    	mozambique: mozambique,
    	namibia: namibia,
    	new_caledonia: new_caledonia,
    	niger: niger,
    	norfolk_island: norfolk_island,
    	nigeria: nigeria,
    	nicaragua: nicaragua,
    	netherlands: netherlands,
    	norway: norway,
    	nepal: nepal,
    	nauru: nauru,
    	niue: niue,
    	new_zealand: new_zealand,
    	oman: oman,
    	panama: panama,
    	peru: peru,
    	french_polynesia: french_polynesia,
    	papua_new_guinea: papua_new_guinea,
    	philippines: philippines,
    	pakistan: pakistan,
    	poland: poland,
    	st_pierre_miquelon: st_pierre_miquelon,
    	pitcairn_islands: pitcairn_islands,
    	puerto_rico: puerto_rico,
    	palestinian_territories: palestinian_territories,
    	portugal: portugal,
    	palau: palau,
    	paraguay: paraguay,
    	qatar: qatar,
    	reunion: reunion,
    	romania: romania,
    	serbia: serbia,
    	ru: ru,
    	rwanda: rwanda,
    	saudi_arabia: saudi_arabia,
    	solomon_islands: solomon_islands,
    	seychelles: seychelles,
    	sudan: sudan,
    	sweden: sweden,
    	singapore: singapore,
    	st_helena: st_helena,
    	slovenia: slovenia,
    	svalbard_jan_mayen: svalbard_jan_mayen,
    	slovakia: slovakia,
    	sierra_leone: sierra_leone,
    	san_marino: san_marino,
    	senegal: senegal,
    	somalia: somalia,
    	suriname: suriname,
    	south_sudan: south_sudan,
    	sao_tome_principe: sao_tome_principe,
    	el_salvador: el_salvador,
    	sint_maarten: sint_maarten,
    	syria: syria,
    	swaziland: swaziland,
    	tristan_da_cunha: tristan_da_cunha,
    	turks_caicos_islands: turks_caicos_islands,
    	chad: chad,
    	french_southern_territories: french_southern_territories,
    	togo: togo,
    	thailand: thailand,
    	tajikistan: tajikistan,
    	tokelau: tokelau,
    	timor_leste: timor_leste,
    	turkmenistan: turkmenistan,
    	tunisia: tunisia,
    	tonga: tonga,
    	tr: tr,
    	trinidad_tobago: trinidad_tobago,
    	tuvalu: tuvalu,
    	taiwan: taiwan,
    	tanzania: tanzania,
    	ukraine: ukraine,
    	uganda: uganda,
    	us_outlying_islands: us_outlying_islands,
    	united_nations: united_nations,
    	us: us,
    	uruguay: uruguay,
    	uzbekistan: uzbekistan,
    	vatican_city: vatican_city,
    	st_vincent_grenadines: st_vincent_grenadines,
    	venezuela: venezuela,
    	british_virgin_islands: british_virgin_islands,
    	us_virgin_islands: us_virgin_islands,
    	vietnam: vietnam,
    	vanuatu: vanuatu,
    	wallis_futuna: wallis_futuna,
    	samoa: samoa,
    	kosovo: kosovo,
    	yemen: yemen,
    	mayotte: mayotte,
    	south_africa: south_africa,
    	zambia: zambia,
    	zimbabwe: zimbabwe,
    	england: england,
    	scotland: scotland,
    	wales: wales
    };

    // Emoticons -> Emoji mapping.

    var shortcuts = {
      angry:            [ '>:(', '>:-(' ],
      blush:            [ ':")', ':-")' ],
      broken_heart:     [ '</3', '<\\3' ],
      // :\ and :-\ not used because of conflict with markdown escaping
      confused:         [ ':/', ':-/' ], // twemoji shows question
      cry:              [ ":'(", ":'-(", ':,(', ':,-(' ],
      frowning:         [ ':(', ':-(' ],
      heart:            [ '<3' ],
      imp:              [ ']:(', ']:-(' ],
      innocent:         [ 'o:)', 'O:)', 'o:-)', 'O:-)', '0:)', '0:-)' ],
      joy:              [ ":')", ":'-)", ':,)', ':,-)', ":'D", ":'-D", ':,D', ':,-D' ],
      kissing:          [ ':*', ':-*' ],
      laughing:         [ 'x-)', 'X-)' ],
      neutral_face:     [ ':|', ':-|' ],
      open_mouth:       [ ':o', ':-o', ':O', ':-O' ],
      rage:             [ ':@', ':-@' ],
      smile:            [ ':D', ':-D' ],
      smiley:           [ ':)', ':-)' ],
      smiling_imp:      [ ']:)', ']:-)' ],
      sob:              [ ":,'(", ":,'-(", ';(', ';-(' ],
      stuck_out_tongue: [ ':P', ':-P' ],
      sunglasses:       [ '8-)', 'B-)' ],
      sweat:            [ ',:(', ',:-(' ],
      sweat_smile:      [ ',:)', ',:-)' ],
      unamused:         [ ':s', ':-S', ':z', ':-Z', ':$', ':-$' ],
      wink:             [ ';)', ';-)' ]
    };

    var render$1 = function emoji_html(tokens, idx /*, options, env */) {
      return tokens[idx].content;
    };

    // Emojies & shortcuts replacement logic.


    var replace$1 = function create_rule(md, emojies, shortcuts, scanRE, replaceRE) {
      var arrayReplaceAt = md.utils.arrayReplaceAt,
          ucm = md.utils.lib.ucmicro,
          ZPCc = new RegExp([ ucm.Z.source, ucm.P.source, ucm.Cc.source ].join('|'));

      function splitTextToken(text, level, Token) {
        var token, last_pos = 0, nodes = [];

        text.replace(replaceRE, function (match, offset, src) {
          var emoji_name;
          // Validate emoji name
          if (shortcuts.hasOwnProperty(match)) {
            // replace shortcut with full name
            emoji_name = shortcuts[match];

            // Don't allow letters before any shortcut (as in no ":/" in http://)
            if (offset > 0 && !ZPCc.test(src[offset - 1])) {
              return;
            }

            // Don't allow letters after any shortcut
            if (offset + match.length < src.length && !ZPCc.test(src[offset + match.length])) {
              return;
            }
          } else {
            emoji_name = match.slice(1, -1);
          }

          // Add new tokens to pending list
          if (offset > last_pos) {
            token         = new Token('text', '', 0);
            token.content = text.slice(last_pos, offset);
            nodes.push(token);
          }

          token         = new Token('emoji', '', 0);
          token.markup  = emoji_name;
          token.content = emojies[emoji_name];
          nodes.push(token);

          last_pos = offset + match.length;
        });

        if (last_pos < text.length) {
          token         = new Token('text', '', 0);
          token.content = text.slice(last_pos);
          nodes.push(token);
        }

        return nodes;
      }

      return function emoji_replace(state) {
        var i, j, l, tokens, token,
            blockTokens = state.tokens,
            autolinkLevel = 0;

        for (j = 0, l = blockTokens.length; j < l; j++) {
          if (blockTokens[j].type !== 'inline') { continue; }
          tokens = blockTokens[j].children;

          // We scan from the end, to keep position when new tags added.
          // Use reversed logic in links start/end match
          for (i = tokens.length - 1; i >= 0; i--) {
            token = tokens[i];

            if (token.type === 'link_open' || token.type === 'link_close') {
              if (token.info === 'auto') { autolinkLevel -= token.nesting; }
            }

            if (token.type === 'text' && autolinkLevel === 0 && scanRE.test(token.content)) {
              // replace current node
              blockTokens[j].children = tokens = arrayReplaceAt(
                tokens, i, splitTextToken(token.content, token.level, state.Token)
              );
            }
          }
        }
      };
    };

    // Convert input options to more useable format


    function quoteRE(str) {
      return str.replace(/[.?*+^$[\]\\(){}|-]/g, '\\$&');
    }


    var normalize_opts = function normalize_opts(options) {
      var emojies = options.defs,
          shortcuts;

      // Filter emojies by whitelist, if needed
      if (options.enabled.length) {
        emojies = Object.keys(emojies).reduce(function (acc, key) {
          if (options.enabled.indexOf(key) >= 0) {
            acc[key] = emojies[key];
          }
          return acc;
        }, {});
      }

      // Flatten shortcuts to simple object: { alias: emoji_name }
      shortcuts = Object.keys(options.shortcuts).reduce(function (acc, key) {
        // Skip aliases for filtered emojies, to reduce regexp
        if (!emojies[key]) { return acc; }

        if (Array.isArray(options.shortcuts[key])) {
          options.shortcuts[key].forEach(function (alias) {
            acc[alias] = key;
          });
          return acc;
        }

        acc[options.shortcuts[key]] = key;
        return acc;
      }, {});

      var keys = Object.keys(emojies),
          names;

      // If no definitions are given, return empty regex to avoid replacements with 'undefined'.
      if (keys.length === 0) {
        names = '^$';
      } else {
        // Compile regexp
        names = keys
          .map(function (name) { return ':' + name + ':'; })
          .concat(Object.keys(shortcuts))
          .sort()
          .reverse()
          .map(function (name) { return quoteRE(name); })
          .join('|');
      }
      var scanRE = RegExp(names);
      var replaceRE = RegExp(names, 'g');

      return {
        defs: emojies,
        shortcuts: shortcuts,
        scanRE: scanRE,
        replaceRE: replaceRE
      };
    };

    var bare = function emoji_plugin(md, options) {
      var defaults = {
        defs: {},
        shortcuts: {},
        enabled: []
      };

      var opts = normalize_opts(md.utils.assign({}, defaults, options || {}));

      md.renderer.rules.emoji = render$1;

      md.core.ruler.push('emoji', replace$1(md, opts.defs, opts.shortcuts, opts.scanRE, opts.replaceRE));
    };

    var markdownItEmoji = function emoji_plugin(md, options) {
      var defaults = {
        defs: emojies_defs,
        shortcuts: shortcuts,
        enabled: []
      };

      var opts = md.utils.assign({}, defaults, options || {});

      bare(md, opts);
    };

    // Unique ID creation requires a high quality random # generator. In the browser we therefore
    // require the crypto API and do not support built-in fallback to lower quality random number
    // generators (like Math.random()).
    var getRandomValues;
    var rnds8 = new Uint8Array(16);
    function rng() {
      // lazy load so that environments that need to polyfill have a chance to do so
      if (!getRandomValues) {
        // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation. Also,
        // find the complete implementation of crypto (msCrypto) on IE11.
        getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);

        if (!getRandomValues) {
          throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
        }
      }

      return getRandomValues(rnds8);
    }

    var REGEX = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;

    function validate(uuid) {
      return typeof uuid === 'string' && REGEX.test(uuid);
    }

    /**
     * Convert array of 16 byte values to UUID string format of the form:
     * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
     */

    var byteToHex = [];

    for (var i$1 = 0; i$1 < 256; ++i$1) {
      byteToHex.push((i$1 + 0x100).toString(16).substr(1));
    }

    function stringify(arr) {
      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      // Note: Be careful editing this code!  It's been tuned for performance
      // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
      var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
      // of the following:
      // - One or more input array values don't map to a hex octet (leading to
      // "undefined" in the uuid)
      // - Invalid input values for the RFC `version` or `variant` fields

      if (!validate(uuid)) {
        throw TypeError('Stringified UUID is invalid');
      }

      return uuid;
    }

    function v4(options, buf, offset) {
      options = options || {};
      var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

      rnds[6] = rnds[6] & 0x0f | 0x40;
      rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

      if (buf) {
        offset = offset || 0;

        for (var i = 0; i < 16; ++i) {
          buf[offset + i] = rnds[i];
        }

        return buf;
      }

      return stringify(rnds);
    }

    var jsonUrlSingle = createCommonjsModule(function (module, exports) {
    !function(t,e){module.exports=e();}(window,(function(){return function(t){function e(e){for(var r,n,o=e[0],a=e[1],u=0,f=[];u<o.length;u++)n=o[u],Object.prototype.hasOwnProperty.call(i,n)&&i[n]&&f.push(i[n][0]),i[n]=0;for(r in a)Object.prototype.hasOwnProperty.call(a,r)&&(t[r]=a[r]);for(s&&s(e);f.length;)f.shift()();}function r(e){if(n[e])return n[e].exports;var i=n[e]={i:e,l:!1,exports:{}};return t[e].call(i.exports,i,i.exports,r),i.l=!0,i.exports}var n={},i={0:0};r.e=function(){return Promise.resolve()},r.m=t,r.c=n,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n});},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0});},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)r.d(n,i,function(e){return t[e]}.bind(null,i));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r.oe=function(t){throw console.error(t),t};var o=window.webpackJsonpJsonUrl=window.webpackJsonpJsonUrl||[],a=o.push.bind(o);o.push=e,o=o.slice();for(var u=0;u<o.length;u++)e(o[u]);var s=a;return r(r.s=60)}([function(t,e,r){t.exports=r(34);},function(t,e){function r(t,e,r,n,i,o,a){try{var u=t[o](a),s=u.value;}catch(t){return void r(t)}u.done?e(s):Promise.resolve(s).then(n,i);}t.exports=function(t){return function(){var e=this,n=arguments;return new Promise((function(i,o){function a(t){r(s,i,o,a,u,"next",t);}function u(t){r(s,i,o,a,u,"throw",t);}var s=t.apply(e,n);a(void 0);}))}};},function(t,e,r){var n=r(0),i=r.n(n),o=r(1),a=r.n(o);e.a={msgpack:function(){return a()(i.a.mark((function t(){var e,n;return i.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,Promise.resolve().then(r.t.bind(null,37,7));case 2:return e=t.sent,n=e.default||e,t.abrupt("return",n());case 5:case"end":return t.stop()}}),t)})))()},safe64:function(){return a()(i.a.mark((function t(){return i.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,Promise.resolve().then(r.t.bind(null,55,7));case 2:return t.abrupt("return",t.sent);case 3:case"end":return t.stop()}}),t)})))()},lzma:function(){return a()(i.a.mark((function t(){var e;return i.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,Promise.resolve().then(r.t.bind(null,57,7));case 2:return e=t.sent,t.abrupt("return",e.compress?e:e.LZMA);case 4:case"end":return t.stop()}}),t)})))()},lzstring:function(){return a()(i.a.mark((function t(){return i.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,Promise.resolve().then(r.t.bind(null,58,7));case 2:return t.abrupt("return",t.sent);case 3:case"end":return t.stop()}}),t)})))()},lzw:function(){return a()(i.a.mark((function t(){var e,n;return i.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,Promise.resolve().then(r.t.bind(null,59,7));case 2:return e=t.sent,n=e.default||e,t.abrupt("return",n);case 5:case"end":return t.stop()}}),t)})))()}};},function(t,e){"function"==typeof Object.create?t.exports=function(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}});}:t.exports=function(t,e){t.super_=e;var r=function(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t;};},function(t,e,r){(function(t){function r(t){return Object.prototype.toString.call(t)}e.isArray=function(t){return Array.isArray?Array.isArray(t):"[object Array]"===r(t)},e.isBoolean=function(t){return "boolean"==typeof t},e.isNull=function(t){return null===t},e.isNullOrUndefined=function(t){return null==t},e.isNumber=function(t){return "number"==typeof t},e.isString=function(t){return "string"==typeof t},e.isSymbol=function(t){return "symbol"==typeof t},e.isUndefined=function(t){return void 0===t},e.isRegExp=function(t){return "[object RegExp]"===r(t)},e.isObject=function(t){return "object"==typeof t&&null!==t},e.isDate=function(t){return "[object Date]"===r(t)},e.isError=function(t){return "[object Error]"===r(t)||t instanceof Error},e.isFunction=function(t){return "function"==typeof t},e.isPrimitive=function(t){return null===t||"boolean"==typeof t||"number"==typeof t||"string"==typeof t||"symbol"==typeof t||void 0===t},e.isBuffer=t.isBuffer;}).call(this,r(5).Buffer);},function(t,e,r){function n(){return o.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function i(t,e){if(n()<e)throw new RangeError("Invalid typed array length");return o.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=o.prototype:(null===t&&(t=new o(e)),t.length=e),t}function o(t,e,r){if(!(o.TYPED_ARRAY_SUPPORT||this instanceof o))return new o(t,e,r);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return s(this,t)}return a(this,t,e,r)}function a(t,e,r,n){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return "undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,r,n){if(e.byteLength,r<0||e.byteLength<r)throw new RangeError("'offset' is out of bounds");if(e.byteLength<r+(n||0))throw new RangeError("'length' is out of bounds");return e=void 0===r&&void 0===n?new Uint8Array(e):void 0===n?new Uint8Array(e,r):new Uint8Array(e,r,n),o.TYPED_ARRAY_SUPPORT?(t=e).__proto__=o.prototype:t=f(t,e),t}(t,e,r,n):"string"==typeof e?function(t,e,r){if("string"==typeof r&&""!==r||(r="utf8"),!o.isEncoding(r))throw new TypeError('"encoding" must be a valid string encoding');var n=0|l(e,r),a=(t=i(t,n)).write(e,r);return a!==n&&(t=t.slice(0,a)),t}(t,e,r):function(t,e){if(o.isBuffer(e)){var r=0|c(e.length);return 0===(t=i(t,r)).length||e.copy(t,0,0,r),t}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return "number"!=typeof e.length||function(t){return t!=t}(e.length)?i(t,0):f(t,e);if("Buffer"===e.type&&F(e.data))return f(t,e.data)}throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function u(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function s(t,e){if(u(e),t=i(t,e<0?0:0|c(e)),!o.TYPED_ARRAY_SUPPORT)for(var r=0;r<e;++r)t[r]=0;return t}function f(t,e){var r=e.length<0?0:0|c(e.length);t=i(t,r);for(var n=0;n<r;n+=1)t[n]=255&e[n];return t}function c(t){if(t>=n())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+n().toString(16)+" bytes");return 0|t}function l(t,e){if(o.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var r=t.length;if(0===r)return 0;for(var n=!1;;)switch(e){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return I(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return P(t).length;default:if(n)return I(t).length;e=(""+e).toLowerCase(),n=!0;}}function h(t,e,r){var n=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return "";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return "";if((r>>>=0)<=(e>>>=0))return "";for(t||(t="utf8");;)switch(t){case"hex":return j(this,e,r);case"utf8":case"utf-8":return x(this,e,r);case"ascii":return S(this,e,r);case"latin1":case"binary":return k(this,e,r);case"base64":return E(this,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return T(this,e,r);default:if(n)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),n=!0;}}function d(t,e,r){var n=t[e];t[e]=t[r],t[r]=n;}function p(t,e,r,n,i){if(0===t.length)return -1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=i?0:t.length-1),r<0&&(r=t.length+r),r>=t.length){if(i)return -1;r=t.length-1;}else if(r<0){if(!i)return -1;r=0;}if("string"==typeof e&&(e=o.from(e,n)),o.isBuffer(e))return 0===e.length?-1:b(t,e,r,n,i);if("number"==typeof e)return e&=255,o.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(t,e,r):Uint8Array.prototype.lastIndexOf.call(t,e,r):b(t,[e],r,n,i);throw new TypeError("val must be string, number or Buffer")}function b(t,e,r,n,i){function o(t,e){return 1===u?t[e]:t.readUInt16BE(e*u)}var a,u=1,s=t.length,f=e.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(t.length<2||e.length<2)return -1;u=2,s/=2,f/=2,r/=2;}if(i){var c=-1;for(a=r;a<s;a++)if(o(t,a)===o(e,-1===c?0:a-c)){if(-1===c&&(c=a),a-c+1===f)return c*u}else -1!==c&&(a-=a-c),c=-1;}else for(r+f>s&&(r=s-f),a=r;a>=0;a--){for(var l=!0,h=0;h<f;h++)if(o(t,a+h)!==o(e,h)){l=!1;break}if(l)return a}return -1}function g(t,e,r,n){r=Number(r)||0;var i=t.length-r;n?(n=Number(n))>i&&(n=i):n=i;var o=e.length;if(o%2!=0)throw new TypeError("Invalid hex string");n>o/2&&(n=o/2);for(var a=0;a<n;++a){var u=parseInt(e.substr(2*a,2),16);if(isNaN(u))return a;t[r+a]=u;}return a}function y(t,e,r,n){return D(I(e,t.length-r),t,r,n)}function v(t,e,r,n){return D(function(t){for(var e=[],r=0;r<t.length;++r)e.push(255&t.charCodeAt(r));return e}(e),t,r,n)}function w(t,e,r,n){return v(t,e,r,n)}function m(t,e,r,n){return D(P(e),t,r,n)}function _(t,e,r,n){return D(function(t,e){for(var r,n,i,o=[],a=0;a<t.length&&!((e-=2)<0);++a)r=t.charCodeAt(a),n=r>>8,i=r%256,o.push(i),o.push(n);return o}(e,t.length-r),t,r,n)}function E(t,e,r){return 0===e&&r===t.length?N.fromByteArray(t):N.fromByteArray(t.slice(e,r))}function x(t,e,r){r=Math.min(t.length,r);for(var n=[],i=e;i<r;){var o,a,u,s,f=t[i],c=null,l=f>239?4:f>223?3:f>191?2:1;if(i+l<=r)switch(l){case 1:f<128&&(c=f);break;case 2:128==(192&(o=t[i+1]))&&(s=(31&f)<<6|63&o)>127&&(c=s);break;case 3:o=t[i+1],a=t[i+2],128==(192&o)&&128==(192&a)&&(s=(15&f)<<12|(63&o)<<6|63&a)>2047&&(s<55296||s>57343)&&(c=s);break;case 4:o=t[i+1],a=t[i+2],u=t[i+3],128==(192&o)&&128==(192&a)&&128==(192&u)&&(s=(15&f)<<18|(63&o)<<12|(63&a)<<6|63&u)>65535&&s<1114112&&(c=s);}null===c?(c=65533,l=1):c>65535&&(c-=65536,n.push(c>>>10&1023|55296),c=56320|1023&c),n.push(c),i+=l;}return function(t){var e=t.length;if(e<=z)return String.fromCharCode.apply(String,t);for(var r="",n=0;n<e;)r+=String.fromCharCode.apply(String,t.slice(n,n+=z));return r}(n)}function S(t,e,r){var n="";r=Math.min(t.length,r);for(var i=e;i<r;++i)n+=String.fromCharCode(127&t[i]);return n}function k(t,e,r){var n="";r=Math.min(t.length,r);for(var i=e;i<r;++i)n+=String.fromCharCode(t[i]);return n}function j(t,e,r){var n=t.length;(!e||e<0)&&(e=0),(!r||r<0||r>n)&&(r=n);for(var i="",o=e;o<r;++o)i+=C(t[o]);return i}function T(t,e,r){for(var n=t.slice(e,r),i="",o=0;o<n.length;o+=2)i+=String.fromCharCode(n[o]+256*n[o+1]);return i}function M(t,e,r){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>r)throw new RangeError("Trying to access beyond buffer length")}function O(t,e,r,n,i,a){if(!o.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>i||e<a)throw new RangeError('"value" argument is out of bounds');if(r+n>t.length)throw new RangeError("Index out of range")}function A(t,e,r,n){e<0&&(e=65535+e+1);for(var i=0,o=Math.min(t.length-r,2);i<o;++i)t[r+i]=(e&255<<8*(n?i:1-i))>>>8*(n?i:1-i);}function R(t,e,r,n){e<0&&(e=4294967295+e+1);for(var i=0,o=Math.min(t.length-r,4);i<o;++i)t[r+i]=e>>>8*(n?i:3-i)&255;}function B(t,e,r,n,i,o){if(r+n>t.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function U(t,e,r,n,i){return i||B(t,0,r,4),q.write(t,e,r,n,23,4),r+4}function L(t,e,r,n,i){return i||B(t,0,r,8),q.write(t,e,r,n,52,8),r+8}function C(t){return t<16?"0"+t.toString(16):t.toString(16)}function I(t,e){e=e||1/0;for(var r,n=t.length,i=null,o=[],a=0;a<n;++a){if((r=t.charCodeAt(a))>55295&&r<57344){if(!i){if(r>56319){(e-=3)>-1&&o.push(239,191,189);continue}if(a+1===n){(e-=3)>-1&&o.push(239,191,189);continue}i=r;continue}if(r<56320){(e-=3)>-1&&o.push(239,191,189),i=r;continue}r=65536+(i-55296<<10|r-56320);}else i&&(e-=3)>-1&&o.push(239,191,189);if(i=null,r<128){if((e-=1)<0)break;o.push(r);}else if(r<2048){if((e-=2)<0)break;o.push(r>>6|192,63&r|128);}else if(r<65536){if((e-=3)<0)break;o.push(r>>12|224,r>>6&63|128,63&r|128);}else {if(!(r<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;o.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128);}}return o}function P(t){return N.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(W,"")).length<2)return "";for(;t.length%4!=0;)t+="=";return t}(t))}function D(t,e,r,n){for(var i=0;i<n&&!(i+r>=e.length||i>=t.length);++i)e[i+r]=t[i];return i}var N=r(35),q=r(36),F=r(15);e.Buffer=o,e.SlowBuffer=function(t){return +t!=t&&(t=0),o.alloc(+t)},e.INSPECT_MAX_BYTES=50,o.TYPED_ARRAY_SUPPORT=void 0!==window.TYPED_ARRAY_SUPPORT?window.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return !1}}(),e.kMaxLength=n(),o.poolSize=8192,o._augment=function(t){return t.__proto__=o.prototype,t},o.from=function(t,e,r){return a(null,t,e,r)},o.TYPED_ARRAY_SUPPORT&&(o.prototype.__proto__=Uint8Array.prototype,o.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&o[Symbol.species]===o&&Object.defineProperty(o,Symbol.species,{value:null,configurable:!0})),o.alloc=function(t,e,r){return function(t,e,r,n){return u(e),e<=0?i(t,e):void 0!==r?"string"==typeof n?i(t,e).fill(r,n):i(t,e).fill(r):i(t,e)}(null,t,e,r)},o.allocUnsafe=function(t){return s(null,t)},o.allocUnsafeSlow=function(t){return s(null,t)},o.isBuffer=function(t){return !(null==t||!t._isBuffer)},o.compare=function(t,e){if(!o.isBuffer(t)||!o.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var r=t.length,n=e.length,i=0,a=Math.min(r,n);i<a;++i)if(t[i]!==e[i]){r=t[i],n=e[i];break}return r<n?-1:n<r?1:0},o.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return !0;default:return !1}},o.concat=function(t,e){if(!F(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return o.alloc(0);var r;if(void 0===e)for(e=0,r=0;r<t.length;++r)e+=t[r].length;var n=o.allocUnsafe(e),i=0;for(r=0;r<t.length;++r){var a=t[r];if(!o.isBuffer(a))throw new TypeError('"list" argument must be an Array of Buffers');a.copy(n,i),i+=a.length;}return n},o.byteLength=l,o.prototype._isBuffer=!0,o.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)d(this,e,e+1);return this},o.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)d(this,e,e+3),d(this,e+1,e+2);return this},o.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)d(this,e,e+7),d(this,e+1,e+6),d(this,e+2,e+5),d(this,e+3,e+4);return this},o.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?x(this,0,t):h.apply(this,arguments)},o.prototype.equals=function(t){if(!o.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===o.compare(this,t)},o.prototype.inspect=function(){var t="",r=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,r).match(/.{2}/g).join(" "),this.length>r&&(t+=" ... ")),"<Buffer "+t+">"},o.prototype.compare=function(t,e,r,n,i){if(!o.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===r&&(r=t?t.length:0),void 0===n&&(n=0),void 0===i&&(i=this.length),e<0||r>t.length||n<0||i>this.length)throw new RangeError("out of range index");if(n>=i&&e>=r)return 0;if(n>=i)return -1;if(e>=r)return 1;if(this===t)return 0;for(var a=(i>>>=0)-(n>>>=0),u=(r>>>=0)-(e>>>=0),s=Math.min(a,u),f=this.slice(n,i),c=t.slice(e,r),l=0;l<s;++l)if(f[l]!==c[l]){a=f[l],u=c[l];break}return a<u?-1:u<a?1:0},o.prototype.includes=function(t,e,r){return -1!==this.indexOf(t,e,r)},o.prototype.indexOf=function(t,e,r){return p(this,t,e,r,!0)},o.prototype.lastIndexOf=function(t,e,r){return p(this,t,e,r,!1)},o.prototype.write=function(t,e,r,n){if(void 0===e)n="utf8",r=this.length,e=0;else if(void 0===r&&"string"==typeof e)n=e,r=this.length,e=0;else {if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(r)?(r|=0,void 0===n&&(n="utf8")):(n=r,r=void 0);}var i=this.length-e;if((void 0===r||r>i)&&(r=i),t.length>0&&(r<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var o=!1;;)switch(n){case"hex":return g(this,t,e,r);case"utf8":case"utf-8":return y(this,t,e,r);case"ascii":return v(this,t,e,r);case"latin1":case"binary":return w(this,t,e,r);case"base64":return m(this,t,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return _(this,t,e,r);default:if(o)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),o=!0;}},o.prototype.toJSON=function(){return {type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var z=4096;o.prototype.slice=function(t,e){var r,n=this.length;if((t=~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),(e=void 0===e?n:~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),e<t&&(e=t),o.TYPED_ARRAY_SUPPORT)(r=this.subarray(t,e)).__proto__=o.prototype;else {var i=e-t;r=new o(i,void 0);for(var a=0;a<i;++a)r[a]=this[a+t];}return r},o.prototype.readUIntLE=function(t,e,r){t|=0,e|=0,r||M(t,e,this.length);for(var n=this[t],i=1,o=0;++o<e&&(i*=256);)n+=this[t+o]*i;return n},o.prototype.readUIntBE=function(t,e,r){t|=0,e|=0,r||M(t,e,this.length);for(var n=this[t+--e],i=1;e>0&&(i*=256);)n+=this[t+--e]*i;return n},o.prototype.readUInt8=function(t,e){return e||M(t,1,this.length),this[t]},o.prototype.readUInt16LE=function(t,e){return e||M(t,2,this.length),this[t]|this[t+1]<<8},o.prototype.readUInt16BE=function(t,e){return e||M(t,2,this.length),this[t]<<8|this[t+1]},o.prototype.readUInt32LE=function(t,e){return e||M(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},o.prototype.readUInt32BE=function(t,e){return e||M(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},o.prototype.readIntLE=function(t,e,r){t|=0,e|=0,r||M(t,e,this.length);for(var n=this[t],i=1,o=0;++o<e&&(i*=256);)n+=this[t+o]*i;return n>=(i*=128)&&(n-=Math.pow(2,8*e)),n},o.prototype.readIntBE=function(t,e,r){t|=0,e|=0,r||M(t,e,this.length);for(var n=e,i=1,o=this[t+--n];n>0&&(i*=256);)o+=this[t+--n]*i;return o>=(i*=128)&&(o-=Math.pow(2,8*e)),o},o.prototype.readInt8=function(t,e){return e||M(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},o.prototype.readInt16LE=function(t,e){e||M(t,2,this.length);var r=this[t]|this[t+1]<<8;return 32768&r?4294901760|r:r},o.prototype.readInt16BE=function(t,e){e||M(t,2,this.length);var r=this[t+1]|this[t]<<8;return 32768&r?4294901760|r:r},o.prototype.readInt32LE=function(t,e){return e||M(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},o.prototype.readInt32BE=function(t,e){return e||M(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},o.prototype.readFloatLE=function(t,e){return e||M(t,4,this.length),q.read(this,t,!0,23,4)},o.prototype.readFloatBE=function(t,e){return e||M(t,4,this.length),q.read(this,t,!1,23,4)},o.prototype.readDoubleLE=function(t,e){return e||M(t,8,this.length),q.read(this,t,!0,52,8)},o.prototype.readDoubleBE=function(t,e){return e||M(t,8,this.length),q.read(this,t,!1,52,8)},o.prototype.writeUIntLE=function(t,e,r,n){t=+t,e|=0,r|=0,n||O(this,t,e,r,Math.pow(2,8*r)-1,0);var i=1,o=0;for(this[e]=255&t;++o<r&&(i*=256);)this[e+o]=t/i&255;return e+r},o.prototype.writeUIntBE=function(t,e,r,n){t=+t,e|=0,r|=0,n||O(this,t,e,r,Math.pow(2,8*r)-1,0);var i=r-1,o=1;for(this[e+i]=255&t;--i>=0&&(o*=256);)this[e+i]=t/o&255;return e+r},o.prototype.writeUInt8=function(t,e,r){return t=+t,e|=0,r||O(this,t,e,1,255,0),o.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},o.prototype.writeUInt16LE=function(t,e,r){return t=+t,e|=0,r||O(this,t,e,2,65535,0),o.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):A(this,t,e,!0),e+2},o.prototype.writeUInt16BE=function(t,e,r){return t=+t,e|=0,r||O(this,t,e,2,65535,0),o.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):A(this,t,e,!1),e+2},o.prototype.writeUInt32LE=function(t,e,r){return t=+t,e|=0,r||O(this,t,e,4,4294967295,0),o.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):R(this,t,e,!0),e+4},o.prototype.writeUInt32BE=function(t,e,r){return t=+t,e|=0,r||O(this,t,e,4,4294967295,0),o.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):R(this,t,e,!1),e+4},o.prototype.writeIntLE=function(t,e,r,n){if(t=+t,e|=0,!n){var i=Math.pow(2,8*r-1);O(this,t,e,r,i-1,-i);}var o=0,a=1,u=0;for(this[e]=255&t;++o<r&&(a*=256);)t<0&&0===u&&0!==this[e+o-1]&&(u=1),this[e+o]=(t/a>>0)-u&255;return e+r},o.prototype.writeIntBE=function(t,e,r,n){if(t=+t,e|=0,!n){var i=Math.pow(2,8*r-1);O(this,t,e,r,i-1,-i);}var o=r-1,a=1,u=0;for(this[e+o]=255&t;--o>=0&&(a*=256);)t<0&&0===u&&0!==this[e+o+1]&&(u=1),this[e+o]=(t/a>>0)-u&255;return e+r},o.prototype.writeInt8=function(t,e,r){return t=+t,e|=0,r||O(this,t,e,1,127,-128),o.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},o.prototype.writeInt16LE=function(t,e,r){return t=+t,e|=0,r||O(this,t,e,2,32767,-32768),o.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):A(this,t,e,!0),e+2},o.prototype.writeInt16BE=function(t,e,r){return t=+t,e|=0,r||O(this,t,e,2,32767,-32768),o.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):A(this,t,e,!1),e+2},o.prototype.writeInt32LE=function(t,e,r){return t=+t,e|=0,r||O(this,t,e,4,2147483647,-2147483648),o.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):R(this,t,e,!0),e+4},o.prototype.writeInt32BE=function(t,e,r){return t=+t,e|=0,r||O(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),o.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):R(this,t,e,!1),e+4},o.prototype.writeFloatLE=function(t,e,r){return U(this,t,e,!0,r)},o.prototype.writeFloatBE=function(t,e,r){return U(this,t,e,!1,r)},o.prototype.writeDoubleLE=function(t,e,r){return L(this,t,e,!0,r)},o.prototype.writeDoubleBE=function(t,e,r){return L(this,t,e,!1,r)},o.prototype.copy=function(t,e,r,n){if(r||(r=0),n||0===n||(n=this.length),e>=t.length&&(e=t.length),e||(e=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),t.length-e<n-r&&(n=t.length-e+r);var i,a=n-r;if(this===t&&r<e&&e<n)for(i=a-1;i>=0;--i)t[i+e]=this[i+r];else if(a<1e3||!o.TYPED_ARRAY_SUPPORT)for(i=0;i<a;++i)t[i+e]=this[i+r];else Uint8Array.prototype.set.call(t,this.subarray(r,r+a),e);return a},o.prototype.fill=function(t,e,r,n){if("string"==typeof t){if("string"==typeof e?(n=e,e=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),1===t.length){var i=t.charCodeAt(0);i<256&&(t=i);}if(void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!o.isEncoding(n))throw new TypeError("Unknown encoding: "+n)}else "number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<r)throw new RangeError("Out of range index");if(r<=e)return this;var a;if(e>>>=0,r=void 0===r?this.length:r>>>0,t||(t=0),"number"==typeof t)for(a=e;a<r;++a)this[a]=t;else {var u=o.isBuffer(t)?t:I(new o(t,n).toString()),s=u.length;for(a=0;a<r-e;++a)this[a+e]=u[a%s];}return this};var W=/[^+\/0-9A-Za-z-_]/g;},function(t,e){function r(){throw new Error("setTimeout has not been defined")}function n(){throw new Error("clearTimeout has not been defined")}function i(t){if(f===setTimeout)return setTimeout(t,0);if((f===r||!f)&&setTimeout)return f=setTimeout,setTimeout(t,0);try{return f(t,0)}catch(e){try{return f.call(null,t,0)}catch(e){return f.call(this,t,0)}}}function o(){p&&h&&(p=!1,h.length?d=h.concat(d):b=-1,d.length&&a());}function a(){if(!p){var t=i(o);p=!0;for(var e=d.length;e;){for(h=d,d=[];++b<e;)h&&h[b].run();b=-1,e=d.length;}h=null,p=!1,function(t){if(c===clearTimeout)return clearTimeout(t);if((c===n||!c)&&clearTimeout)return c=clearTimeout,clearTimeout(t);try{c(t);}catch(e){try{return c.call(null,t)}catch(e){return c.call(this,t)}}}(t);}}function u(t,e){this.fun=t,this.array=e;}function s(){}var f,c,l=t.exports={};!function(){try{f="function"==typeof setTimeout?setTimeout:r;}catch(t){f=r;}try{c="function"==typeof clearTimeout?clearTimeout:n;}catch(t){c=n;}}();var h,d=[],p=!1,b=-1;l.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)e[r-1]=arguments[r];d.push(new u(t,e)),1!==d.length||p||i(a);},u.prototype.run=function(){this.fun.apply(null,this.array);},l.title="browser",l.browser=!0,l.env={},l.argv=[],l.version="",l.versions={},l.on=s,l.addListener=s,l.once=s,l.off=s,l.removeListener=s,l.removeAllListeners=s,l.emit=s,l.prependListener=s,l.prependOnceListener=s,l.listeners=function(t){return []},l.binding=function(t){throw new Error("process.binding is not supported")},l.cwd=function(){return "/"},l.chdir=function(t){throw new Error("process.chdir is not supported")},l.umask=function(){return 0};},function(t,e,r){function n(t){if(!(this instanceof n))return new n(t);f.call(this,t),c.call(this,t),t&&!1===t.readable&&(this.readable=!1),t&&!1===t.writable&&(this.writable=!1),this.allowHalfOpen=!0,t&&!1===t.allowHalfOpen&&(this.allowHalfOpen=!1),this.once("end",i);}function i(){this.allowHalfOpen||this._writableState.ended||a.nextTick(o,this);}function o(t){t.end();}var a=r(11),u=Object.keys||function(t){var e=[];for(var r in t)e.push(r);return e};t.exports=n;var s=Object.create(r(4));s.inherits=r(3);var f=r(20),c=r(23);s.inherits(n,f);for(var l=u(c.prototype),h=0;h<l.length;h++){var d=l[h];n.prototype[d]||(n.prototype[d]=c.prototype[d]);}Object.defineProperty(n.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(n.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&this._readableState.destroyed&&this._writableState.destroyed},set:function(t){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=t,this._writableState.destroyed=t);}}),n.prototype._destroy=function(t,e){this.push(null),this.end(),a.nextTick(e,t);};},function(t,e,r){function n(t){if(!(this instanceof n))return new n(t);f.call(this,t),c.call(this,t),t&&!1===t.readable&&(this.readable=!1),t&&!1===t.writable&&(this.writable=!1),this.allowHalfOpen=!0,t&&!1===t.allowHalfOpen&&(this.allowHalfOpen=!1),this.once("end",i);}function i(){this.allowHalfOpen||this._writableState.ended||a.nextTick(o,this);}function o(t){t.end();}var a=r(14),u=Object.keys||function(t){var e=[];for(var r in t)e.push(r);return e};t.exports=n;var s=Object.create(r(4));s.inherits=r(3);var f=r(26),c=r(29);s.inherits(n,f);for(var l=u(c.prototype),h=0;h<l.length;h++){var d=l[h];n.prototype[d]||(n.prototype[d]=c.prototype[d]);}Object.defineProperty(n.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(n.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&this._readableState.destroyed&&this._writableState.destroyed},set:function(t){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=t,this._writableState.destroyed=t);}}),n.prototype._destroy=function(t,e){this.push(null),this.end(),a.nextTick(e,t);};},function(t,e,r){function n(t,e){for(var r in t)e[r]=t[r];}function i(t,e,r){return a(t,e,r)}var o=r(5),a=o.Buffer;a.from&&a.alloc&&a.allocUnsafe&&a.allocUnsafeSlow?t.exports=o:(n(o,e),e.Buffer=i),n(a,i),i.from=function(t,e,r){if("number"==typeof t)throw new TypeError("Argument must not be a number");return a(t,e,r)},i.alloc=function(t,e,r){if("number"!=typeof t)throw new TypeError("Argument must be a number");var n=a(t);return void 0!==e?"string"==typeof r?n.fill(e,r):n.fill(e):n.fill(0),n},i.allocUnsafe=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return a(t)},i.allocUnsafeSlow=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return o.SlowBuffer(t)};},function(t,e,r){function n(t){if(!(this instanceof n))return new n(t);if(this._bufs=[],this.length=0,"function"==typeof t){this._callback=t;var e=function(t){this._callback&&(this._callback(t),this._callback=null);}.bind(this);this.on("pipe",(function(t){t.on("error",e);})),this.on("unpipe",(function(t){t.removeListener("error",e);}));}else this.append(t);i.call(this);}var i=r(41).Duplex,o=r(16),a=r(9).Buffer;o.inherits(n,i),n.prototype._offset=function(t){var e,r=0,n=0;if(0===t)return [0,0];for(;n<this._bufs.length;n++){if(t<(e=r+this._bufs[n].length)||n==this._bufs.length-1)return [n,t-r];r=e;}},n.prototype._reverseOffset=function(t){for(var e=t[0],r=t[1],n=0;n<e;n++)r+=this._bufs[n].length;return r},n.prototype.append=function(t){var e=0;if(a.isBuffer(t))this._appendBuffer(t);else if(Array.isArray(t))for(;e<t.length;e++)this.append(t[e]);else if(t instanceof n)for(;e<t._bufs.length;e++)this.append(t._bufs[e]);else null!=t&&("number"==typeof t&&(t=t.toString()),this._appendBuffer(a.from(t)));return this},n.prototype._appendBuffer=function(t){this._bufs.push(t),this.length+=t.length;},n.prototype._write=function(t,e,r){this._appendBuffer(t),"function"==typeof r&&r();},n.prototype._read=function(t){if(!this.length)return this.push(null);t=Math.min(t,this.length),this.push(this.slice(0,t)),this.consume(t);},n.prototype.end=function(t){i.prototype.end.call(this,t),this._callback&&(this._callback(null,this.slice()),this._callback=null);},n.prototype.get=function(t){if(!(t>this.length||t<0)){var e=this._offset(t);return this._bufs[e[0]][e[1]]}},n.prototype.slice=function(t,e){return "number"==typeof t&&t<0&&(t+=this.length),"number"==typeof e&&e<0&&(e+=this.length),this.copy(null,0,t,e)},n.prototype.copy=function(t,e,r,n){if(("number"!=typeof r||r<0)&&(r=0),("number"!=typeof n||n>this.length)&&(n=this.length),r>=this.length)return t||a.alloc(0);if(n<=0)return t||a.alloc(0);var i,o,u=!!t,s=this._offset(r),f=n-r,c=f,l=u&&e||0,h=s[1];if(0===r&&n==this.length){if(!u)return 1===this._bufs.length?this._bufs[0]:a.concat(this._bufs,this.length);for(o=0;o<this._bufs.length;o++)this._bufs[o].copy(t,l),l+=this._bufs[o].length;return t}if(c<=this._bufs[s[0]].length-h)return u?this._bufs[s[0]].copy(t,e,h,h+c):this._bufs[s[0]].slice(h,h+c);for(u||(t=a.allocUnsafe(f)),o=s[0];o<this._bufs.length;o++){if(!(c>(i=this._bufs[o].length-h))){this._bufs[o].copy(t,l,h,h+c),l+=i;break}this._bufs[o].copy(t,l,h),l+=i,c-=i,h&&(h=0);}return t.length>l?t.slice(0,l):t},n.prototype.shallowSlice=function(t,e){if(t=t||0,e="number"!=typeof e?this.length:e,t<0&&(t+=this.length),e<0&&(e+=this.length),t===e)return new n;var r=this._offset(t),i=this._offset(e),o=this._bufs.slice(r[0],i[0]+1);return 0==i[1]?o.pop():o[o.length-1]=o[o.length-1].slice(0,i[1]),0!=r[1]&&(o[0]=o[0].slice(r[1])),new n(o)},n.prototype.toString=function(t,e,r){return this.slice(e,r).toString(t)},n.prototype.consume=function(t){if(t=Math.trunc(t),Number.isNaN(t)||t<=0)return this;for(;this._bufs.length;){if(!(t>=this._bufs[0].length)){this._bufs[0]=this._bufs[0].slice(t),this.length-=t;break}t-=this._bufs[0].length,this.length-=this._bufs[0].length,this._bufs.shift();}return this},n.prototype.duplicate=function(){for(var t=0,e=new n;t<this._bufs.length;t++)e.append(this._bufs[t]);return e},n.prototype.destroy=function(){this._bufs.length=0,this.length=0,this.push(null);},n.prototype.indexOf=function(t,e,r){if(void 0===r&&"string"==typeof e&&(r=e,e=void 0),"function"==typeof t||Array.isArray(t))throw new TypeError('The "value" argument must be one of type string, Buffer, BufferList, or Uint8Array.');if("number"==typeof t?t=a.from([t]):"string"==typeof t?t=a.from(t,r):t instanceof n?t=t.slice():a.isBuffer(t)||(t=a.from(t)),e=Number(e||0),isNaN(e)&&(e=0),e<0&&(e=this.length+e),e<0&&(e=0),0===t.length)return e>this.length?this.length:e;for(var i=this._offset(e),o=i[0],u=i[1];o<this._bufs.length;o++){for(var s=this._bufs[o];u<s.length;)if(s.length-u>=t.length){var f=s.indexOf(t,u);if(-1!==f)return this._reverseOffset([o,f]);u=s.length-t.length+1;}else {var c=this._reverseOffset([o,u]);if(this._match(c,t))return c;u++;}u=0;}return -1},n.prototype._match=function(t,e){if(this.length-t<e.length)return !1;for(var r=0;r<e.length;r++)if(this.get(t+r)!==e[r])return !1;return !0},function(){var t={readDoubleBE:8,readDoubleLE:8,readFloatBE:4,readFloatLE:4,readInt32BE:4,readInt32LE:4,readUInt32BE:4,readUInt32LE:4,readInt16BE:2,readInt16LE:2,readUInt16BE:2,readUInt16LE:2,readInt8:1,readUInt8:1,readIntBE:null,readIntLE:null,readUIntBE:null,readUIntLE:null};for(var e in t)!function(e){n.prototype[e]=null===t[e]?function(t,r){return this.slice(t,t+r)[e](0,r)}:function(r){return this.slice(r,r+t[e])[e](0)};}(e);}(),t.exports=n;},function(t,e,r){(function(e){void 0===e||!e.version||0===e.version.indexOf("v0.")||0===e.version.indexOf("v1.")&&0!==e.version.indexOf("v1.8.")?t.exports={nextTick:function(t,r,n,i){if("function"!=typeof t)throw new TypeError('"callback" argument must be a function');var o,a,u=arguments.length;switch(u){case 0:case 1:return e.nextTick(t);case 2:return e.nextTick((function(){t.call(null,r);}));case 3:return e.nextTick((function(){t.call(null,r,n);}));case 4:return e.nextTick((function(){t.call(null,r,n,i);}));default:for(o=new Array(u-1),a=0;a<o.length;)o[a++]=arguments[a];return e.nextTick((function(){t.apply(null,o);}))}}}:t.exports=e;}).call(this,r(6));},function(t,e,r){function n(){n.init.call(this);}function i(t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t)}function o(t){return void 0===t._maxListeners?n.defaultMaxListeners:t._maxListeners}function a(t,e,r,n){var a,u,s;if(i(r),void 0===(u=t._events)?(u=t._events=Object.create(null),t._eventsCount=0):(void 0!==u.newListener&&(t.emit("newListener",e,r.listener?r.listener:r),u=t._events),s=u[e]),void 0===s)s=u[e]=r,++t._eventsCount;else if("function"==typeof s?s=u[e]=n?[r,s]:[s,r]:n?s.unshift(r):s.push(r),(a=o(t))>0&&s.length>a&&!s.warned){s.warned=!0;var f=new Error("Possible EventEmitter memory leak detected. "+s.length+" "+String(e)+" listeners added. Use emitter.setMaxListeners() to increase limit");f.name="MaxListenersExceededWarning",f.emitter=t,f.type=e,f.count=s.length,function(t){console&&console.warn&&console.warn(t);}(f);}return t}function u(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function s(t,e,r){var n={fired:!1,wrapFn:void 0,target:t,type:e,listener:r},i=u.bind(n);return i.listener=r,n.wrapFn=i,i}function f(t,e,r){var n=t._events;if(void 0===n)return [];var i=n[e];return void 0===i?[]:"function"==typeof i?r?[i.listener||i]:[i]:r?function(t){for(var e=new Array(t.length),r=0;r<e.length;++r)e[r]=t[r].listener||t[r];return e}(i):l(i,i.length)}function c(t){var e=this._events;if(void 0!==e){var r=e[t];if("function"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function l(t,e){for(var r=new Array(e),n=0;n<e;++n)r[n]=t[n];return r}var h,d="object"==typeof Reflect?Reflect:null,p=d&&"function"==typeof d.apply?d.apply:function(t,e,r){return Function.prototype.apply.call(t,e,r)};h=d&&"function"==typeof d.ownKeys?d.ownKeys:Object.getOwnPropertySymbols?function(t){return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t))}:function(t){return Object.getOwnPropertyNames(t)};var b=Number.isNaN||function(t){return t!=t};t.exports=n,n.EventEmitter=n,n.prototype._events=void 0,n.prototype._eventsCount=0,n.prototype._maxListeners=void 0;var g=10;Object.defineProperty(n,"defaultMaxListeners",{enumerable:!0,get:function(){return g},set:function(t){if("number"!=typeof t||t<0||b(t))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+t+".");g=t;}}),n.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0;},n.prototype.setMaxListeners=function(t){if("number"!=typeof t||t<0||b(t))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+t+".");return this._maxListeners=t,this},n.prototype.getMaxListeners=function(){return o(this)},n.prototype.emit=function(t){for(var e=[],r=1;r<arguments.length;r++)e.push(arguments[r]);var n="error"===t,i=this._events;if(void 0!==i)n=n&&void 0===i.error;else if(!n)return !1;if(n){var o;if(e.length>0&&(o=e[0]),o instanceof Error)throw o;var a=new Error("Unhandled error."+(o?" ("+o.message+")":""));throw a.context=o,a}var u=i[t];if(void 0===u)return !1;if("function"==typeof u)p(u,this,e);else {var s=u.length,f=l(u,s);for(r=0;r<s;++r)p(f[r],this,e);}return !0},n.prototype.addListener=function(t,e){return a(this,t,e,!1)},n.prototype.on=n.prototype.addListener,n.prototype.prependListener=function(t,e){return a(this,t,e,!0)},n.prototype.once=function(t,e){return i(e),this.on(t,s(this,t,e)),this},n.prototype.prependOnceListener=function(t,e){return i(e),this.prependListener(t,s(this,t,e)),this},n.prototype.removeListener=function(t,e){var r,n,o,a,u;if(i(e),void 0===(n=this._events))return this;if(void 0===(r=n[t]))return this;if(r===e||r.listener===e)0==--this._eventsCount?this._events=Object.create(null):(delete n[t],n.removeListener&&this.emit("removeListener",t,r.listener||e));else if("function"!=typeof r){for(o=-1,a=r.length-1;a>=0;a--)if(r[a]===e||r[a].listener===e){u=r[a].listener,o=a;break}if(o<0)return this;0===o?r.shift():function(t,e){for(;e+1<t.length;e++)t[e]=t[e+1];t.pop();}(r,o),1===r.length&&(n[t]=r[0]),void 0!==n.removeListener&&this.emit("removeListener",t,u||e);}return this},n.prototype.off=n.prototype.removeListener,n.prototype.removeAllListeners=function(t){var e,r,n;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[t]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[t]),this;if(0===arguments.length){var i,o=Object.keys(r);for(n=0;n<o.length;++n)"removeListener"!==(i=o[n])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(e=r[t]))this.removeListener(t,e);else if(void 0!==e)for(n=e.length-1;n>=0;n--)this.removeListener(t,e[n]);return this},n.prototype.listeners=function(t){return f(this,t,!0)},n.prototype.rawListeners=function(t){return f(this,t,!1)},n.listenerCount=function(t,e){return "function"==typeof t.listenerCount?t.listenerCount(e):c.call(t,e)},n.prototype.listenerCount=c,n.prototype.eventNames=function(){return this._eventsCount>0?h(this._events):[]};},function(t,e,r){function n(t){var e;switch(this.encoding=function(t){var e=function(t){if(!t)return "utf8";for(var e;;)switch(t){case"utf8":case"utf-8":return "utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return "utf16le";case"latin1":case"binary":return "latin1";case"base64":case"ascii":case"hex":return t;default:if(e)return;t=(""+t).toLowerCase(),e=!0;}}(t);if("string"!=typeof e&&(h.isEncoding===d||!d(t)))throw new Error("Unknown encoding: "+t);return e||t}(t),this.encoding){case"utf16le":this.text=a,this.end=u,e=4;break;case"utf8":this.fillLast=o,e=4;break;case"base64":this.text=s,this.end=f,e=3;break;default:return this.write=c,void(this.end=l)}this.lastNeed=0,this.lastTotal=0,this.lastChar=h.allocUnsafe(e);}function i(t){return t<=127?0:t>>5==6?2:t>>4==14?3:t>>3==30?4:-1}function o(t){var e=this.lastTotal-this.lastNeed,r=function(t,e,r){if(128!=(192&e[0]))return t.lastNeed=0,"�".repeat(r);if(t.lastNeed>1&&e.length>1){if(128!=(192&e[1]))return t.lastNeed=1,"�".repeat(r+1);if(t.lastNeed>2&&e.length>2&&128!=(192&e[2]))return t.lastNeed=2,"�".repeat(r+2)}}(this,t,e);return void 0!==r?r:this.lastNeed<=t.length?(t.copy(this.lastChar,e,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(t.copy(this.lastChar,e,0,t.length),void(this.lastNeed-=t.length))}function a(t,e){if((t.length-e)%2==0){var r=t.toString("utf16le",e);if(r){var n=r.charCodeAt(r.length-1);if(n>=55296&&n<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1],r.slice(0,-1)}return r}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=t[t.length-1],t.toString("utf16le",e,t.length-1)}function u(t){var e=t&&t.length?this.write(t):"";if(this.lastNeed){var r=this.lastTotal-this.lastNeed;return e+this.lastChar.toString("utf16le",0,r)}return e}function s(t,e){var r=(t.length-e)%3;return 0===r?t.toString("base64",e):(this.lastNeed=3-r,this.lastTotal=3,1===r?this.lastChar[0]=t[t.length-1]:(this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1]),t.toString("base64",e,t.length-r))}function f(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+this.lastChar.toString("base64",0,3-this.lastNeed):e}function c(t){return t.toString(this.encoding)}function l(t){return t&&t.length?this.write(t):""}var h=r(9).Buffer,d=h.isEncoding||function(t){switch((t=""+t)&&t.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return !0;default:return !1}};e.StringDecoder=n,n.prototype.write=function(t){if(0===t.length)return "";var e,r;if(this.lastNeed){if(void 0===(e=this.fillLast(t)))return "";r=this.lastNeed,this.lastNeed=0;}else r=0;return r<t.length?e?e+this.text(t,r):this.text(t,r):e||""},n.prototype.end=function(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+"�".repeat(this.lastTotal-this.lastNeed):e},n.prototype.text=function(t,e){var r=function(t,e,r){var n=e.length-1;if(n<r)return 0;var o=i(e[n]);return o>=0?(o>0&&(t.lastNeed=o-1),o):--n<r?0:(o=i(e[n]))>=0?(o>0&&(t.lastNeed=o-2),o):--n<r?0:(o=i(e[n]))>=0?(o>0&&(2===o?o=0:t.lastNeed=o-3),o):0}(this,t,e);if(!this.lastNeed)return t.toString("utf8",e);this.lastTotal=r;var n=t.length-(r-this.lastNeed);return t.copy(this.lastChar,0,n),t.toString("utf8",e,n)},n.prototype.fillLast=function(t){if(this.lastNeed<=t.length)return t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,t.length),this.lastNeed-=t.length;};},function(t,e,r){(function(e){void 0===e||!e.version||0===e.version.indexOf("v0.")||0===e.version.indexOf("v1.")&&0!==e.version.indexOf("v1.8.")?t.exports={nextTick:function(t,r,n,i){if("function"!=typeof t)throw new TypeError('"callback" argument must be a function');var o,a,u=arguments.length;switch(u){case 0:case 1:return e.nextTick(t);case 2:return e.nextTick((function(){t.call(null,r);}));case 3:return e.nextTick((function(){t.call(null,r,n);}));case 4:return e.nextTick((function(){t.call(null,r,n,i);}));default:for(o=new Array(u-1),a=0;a<o.length;)o[a++]=arguments[a];return e.nextTick((function(){t.apply(null,o);}))}}}:t.exports=e;}).call(this,r(6));},function(t,e){var r={}.toString;t.exports=Array.isArray||function(t){return "[object Array]"==r.call(t)};},function(t,e,r){(function(t){function n(t,r){var n={seen:[],stylize:o};return arguments.length>=3&&(n.depth=arguments[2]),arguments.length>=4&&(n.colors=arguments[3]),l(r)?n.showHidden=r:r&&e._extend(n,r),b(n.showHidden)&&(n.showHidden=!1),b(n.depth)&&(n.depth=2),b(n.colors)&&(n.colors=!1),b(n.customInspect)&&(n.customInspect=!0),n.colors&&(n.stylize=i),a(n,t,n.depth)}function i(t,e){var r=n.styles[e];return r?"["+n.colors[r][0]+"m"+t+"["+n.colors[r][1]+"m":t}function o(t,e){return t}function a(t,r,n){if(t.customInspect&&r&&m(r.inspect)&&r.inspect!==e.inspect&&(!r.constructor||r.constructor.prototype!==r)){var i=r.inspect(n,t);return p(i)||(i=a(t,i,n)),i}var o=u(t,r);if(o)return o;var l=Object.keys(r),h=function(t){var e={};return t.forEach((function(t,r){e[t]=!0;})),e}(l);if(t.showHidden&&(l=Object.getOwnPropertyNames(r)),w(r)&&(l.indexOf("message")>=0||l.indexOf("description")>=0))return s(r);if(0===l.length){if(m(r)){var d=r.name?": "+r.name:"";return t.stylize("[Function"+d+"]","special")}if(g(r))return t.stylize(RegExp.prototype.toString.call(r),"regexp");if(v(r))return t.stylize(Date.prototype.toString.call(r),"date");if(w(r))return s(r)}var b,y="",_=!1,E=["{","}"];return c(r)&&(_=!0,E=["[","]"]),m(r)&&(y=" [Function"+(r.name?": "+r.name:"")+"]"),g(r)&&(y=" "+RegExp.prototype.toString.call(r)),v(r)&&(y=" "+Date.prototype.toUTCString.call(r)),w(r)&&(y=" "+s(r)),0!==l.length||_&&0!=r.length?n<0?g(r)?t.stylize(RegExp.prototype.toString.call(r),"regexp"):t.stylize("[Object]","special"):(t.seen.push(r),b=_?function(t,e,r,n,i){for(var o=[],a=0,u=e.length;a<u;++a)S(e,String(a))?o.push(f(t,e,r,n,String(a),!0)):o.push("");return i.forEach((function(i){i.match(/^\d+$/)||o.push(f(t,e,r,n,i,!0));})),o}(t,r,n,h,l):l.map((function(e){return f(t,r,n,h,e,_)})),t.seen.pop(),function(t,e,r){return t.reduce((function(t,e){return e.indexOf("\n")>=0&&0,t+e.replace(/\u001b\[\d\d?m/g,"").length+1}),0)>60?r[0]+(""===e?"":e+"\n ")+" "+t.join(",\n  ")+" "+r[1]:r[0]+e+" "+t.join(", ")+" "+r[1]}(b,y,E)):E[0]+y+E[1]}function u(t,e){if(b(e))return t.stylize("undefined","undefined");if(p(e)){var r="'"+JSON.stringify(e).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return t.stylize(r,"string")}return d(e)?t.stylize(""+e,"number"):l(e)?t.stylize(""+e,"boolean"):h(e)?t.stylize("null","null"):void 0}function s(t){return "["+Error.prototype.toString.call(t)+"]"}function f(t,e,r,n,i,o){var u,s,f;if((f=Object.getOwnPropertyDescriptor(e,i)||{value:e[i]}).get?s=f.set?t.stylize("[Getter/Setter]","special"):t.stylize("[Getter]","special"):f.set&&(s=t.stylize("[Setter]","special")),S(n,i)||(u="["+i+"]"),s||(t.seen.indexOf(f.value)<0?(s=h(r)?a(t,f.value,null):a(t,f.value,r-1)).indexOf("\n")>-1&&(s=o?s.split("\n").map((function(t){return "  "+t})).join("\n").substr(2):"\n"+s.split("\n").map((function(t){return "   "+t})).join("\n")):s=t.stylize("[Circular]","special")),b(u)){if(o&&i.match(/^\d+$/))return s;(u=JSON.stringify(""+i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(u=u.substr(1,u.length-2),u=t.stylize(u,"name")):(u=u.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),u=t.stylize(u,"string"));}return u+": "+s}function c(t){return Array.isArray(t)}function l(t){return "boolean"==typeof t}function h(t){return null===t}function d(t){return "number"==typeof t}function p(t){return "string"==typeof t}function b(t){return void 0===t}function g(t){return y(t)&&"[object RegExp]"===_(t)}function y(t){return "object"==typeof t&&null!==t}function v(t){return y(t)&&"[object Date]"===_(t)}function w(t){return y(t)&&("[object Error]"===_(t)||t instanceof Error)}function m(t){return "function"==typeof t}function _(t){return Object.prototype.toString.call(t)}function E(t){return t<10?"0"+t.toString(10):t.toString(10)}function x(){var t=new Date,e=[E(t.getHours()),E(t.getMinutes()),E(t.getSeconds())].join(":");return [t.getDate(),A[t.getMonth()],e].join(" ")}function S(t,e){return Object.prototype.hasOwnProperty.call(t,e)}function k(t,e){if(!t){var r=new Error("Promise was rejected with a falsy value");r.reason=t,t=r;}return e(t)}var j=Object.getOwnPropertyDescriptors||function(t){for(var e=Object.keys(t),r={},n=0;n<e.length;n++)r[e[n]]=Object.getOwnPropertyDescriptor(t,e[n]);return r},T=/%[sdj%]/g;e.format=function(t){if(!p(t)){for(var e=[],r=0;r<arguments.length;r++)e.push(n(arguments[r]));return e.join(" ")}r=1;for(var i=arguments,o=i.length,a=String(t).replace(T,(function(t){if("%%"===t)return "%";if(r>=o)return t;switch(t){case"%s":return String(i[r++]);case"%d":return Number(i[r++]);case"%j":try{return JSON.stringify(i[r++])}catch(t){return "[Circular]"}default:return t}})),u=i[r];r<o;u=i[++r])h(u)||!y(u)?a+=" "+u:a+=" "+n(u);return a},e.deprecate=function(r,n){if(void 0!==t&&!0===t.noDeprecation)return r;if(void 0===t)return function(){return e.deprecate(r,n).apply(this,arguments)};var i=!1;return function(){if(!i){if(t.throwDeprecation)throw new Error(n);t.traceDeprecation?console.trace(n):console.error(n),i=!0;}return r.apply(this,arguments)}};var M,O={};e.debuglog=function(r){if(b(M)&&(M=t.env.NODE_DEBUG||""),r=r.toUpperCase(),!O[r])if(new RegExp("\\b"+r+"\\b","i").test(M)){var n=t.pid;O[r]=function(){var t=e.format.apply(e,arguments);console.error("%s %d: %s",r,n,t);};}else O[r]=function(){};return O[r]},e.inspect=n,n.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},n.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},e.isArray=c,e.isBoolean=l,e.isNull=h,e.isNullOrUndefined=function(t){return null==t},e.isNumber=d,e.isString=p,e.isSymbol=function(t){return "symbol"==typeof t},e.isUndefined=b,e.isRegExp=g,e.isObject=y,e.isDate=v,e.isError=w,e.isFunction=m,e.isPrimitive=function(t){return null===t||"boolean"==typeof t||"number"==typeof t||"string"==typeof t||"symbol"==typeof t||void 0===t},e.isBuffer=r(40);var A=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];e.log=function(){console.log("%s - %s",x(),e.format.apply(e,arguments));},e.inherits=r(3),e._extend=function(t,e){if(!e||!y(e))return t;for(var r=Object.keys(e),n=r.length;n--;)t[r[n]]=e[r[n]];return t};var R="undefined"!=typeof Symbol?Symbol("util.promisify.custom"):void 0;e.promisify=function(t){function e(){for(var e,r,n=new Promise((function(t,n){e=t,r=n;})),i=[],o=0;o<arguments.length;o++)i.push(arguments[o]);i.push((function(t,n){t?r(t):e(n);}));try{t.apply(this,i);}catch(t){r(t);}return n}if("function"!=typeof t)throw new TypeError('The "original" argument must be of type Function');if(R&&t[R]){var e;if("function"!=typeof(e=t[R]))throw new TypeError('The "util.promisify.custom" argument must be of type Function');return Object.defineProperty(e,R,{value:e,enumerable:!1,writable:!1,configurable:!0}),e}return Object.setPrototypeOf(e,Object.getPrototypeOf(t)),R&&Object.defineProperty(e,R,{value:e,enumerable:!1,writable:!1,configurable:!0}),Object.defineProperties(e,j(t))},e.promisify.custom=R,e.callbackify=function(e){function r(){for(var r=[],n=0;n<arguments.length;n++)r.push(arguments[n]);var i=r.pop();if("function"!=typeof i)throw new TypeError("The last argument must be of type Function");var o=this,a=function(){return i.apply(o,arguments)};e.apply(this,r).then((function(e){t.nextTick(a,null,e);}),(function(e){t.nextTick(k,e,a);}));}if("function"!=typeof e)throw new TypeError('The "original" argument must be of type Function');return Object.setPrototypeOf(r,Object.getPrototypeOf(e)),Object.defineProperties(r,j(e)),r};}).call(this,r(6));},function(t,e,r){function n(t,e){this._id=t,this._clearFn=e;}var i="undefined"!=typeof window&&window||"undefined"!=typeof self&&self||window,o=Function.prototype.apply;e.setTimeout=function(){return new n(o.call(setTimeout,i,arguments),clearTimeout)},e.setInterval=function(){return new n(o.call(setInterval,i,arguments),clearInterval)},e.clearTimeout=e.clearInterval=function(t){t&&t.close();},n.prototype.unref=n.prototype.ref=function(){},n.prototype.close=function(){this._clearFn.call(i,this._id);},e.enroll=function(t,e){clearTimeout(t._idleTimeoutId),t._idleTimeout=e;},e.unenroll=function(t){clearTimeout(t._idleTimeoutId),t._idleTimeout=-1;},e._unrefActive=e.active=function(t){clearTimeout(t._idleTimeoutId);var e=t._idleTimeout;e>=0&&(t._idleTimeoutId=setTimeout((function(){t._onTimeout&&t._onTimeout();}),e));},r(45),e.setImmediate="undefined"!=typeof self&&self.setImmediate||"undefined"!=typeof window&&window.setImmediate||this&&this.setImmediate,e.clearImmediate="undefined"!=typeof self&&self.clearImmediate||"undefined"!=typeof window&&window.clearImmediate||this&&this.clearImmediate;},function(t,e,r){function n(t,e){for(var r in t)e[r]=t[r];}function i(t,e,r){return a(t,e,r)}var o=r(5),a=o.Buffer;a.from&&a.alloc&&a.allocUnsafe&&a.allocUnsafeSlow?t.exports=o:(n(o,e),e.Buffer=i),n(a,i),i.from=function(t,e,r){if("number"==typeof t)throw new TypeError("Argument must not be a number");return a(t,e,r)},i.alloc=function(t,e,r){if("number"!=typeof t)throw new TypeError("Argument must be a number");var n=a(t);return void 0!==e?"string"==typeof r?n.fill(e,r):n.fill(e):n.fill(0),n},i.allocUnsafe=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return a(t)},i.allocUnsafeSlow=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return o.SlowBuffer(t)};},function(t,e,r){function n(t,e){for(var r in t)e[r]=t[r];}function i(t,e,r){return a(t,e,r)}var o=r(5),a=o.Buffer;a.from&&a.alloc&&a.allocUnsafe&&a.allocUnsafeSlow?t.exports=o:(n(o,e),e.Buffer=i),i.prototype=Object.create(a.prototype),n(a,i),i.from=function(t,e,r){if("number"==typeof t)throw new TypeError("Argument must not be a number");return a(t,e,r)},i.alloc=function(t,e,r){if("number"!=typeof t)throw new TypeError("Argument must be a number");var n=a(t);return void 0!==e?"string"==typeof r?n.fill(e,r):n.fill(e):n.fill(0),n},i.allocUnsafe=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return a(t)},i.allocUnsafeSlow=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return o.SlowBuffer(t)};},function(t,e,r){(function(e){function n(t,e){t=t||{};var n=e instanceof(_=_||r(7));this.objectMode=!!t.objectMode,n&&(this.objectMode=this.objectMode||!!t.readableObjectMode);var i=t.highWaterMark,o=t.readableHighWaterMark,a=this.objectMode?16:16384;this.highWaterMark=i||0===i?i:n&&(o||0===o)?o:a,this.highWaterMark=Math.floor(this.highWaterMark),this.buffer=new R,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.destroyed=!1,this.defaultEncoding=t.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,t.encoding&&(A||(A=r(13).StringDecoder),this.decoder=new A(t.encoding),this.encoding=t.encoding);}function i(t){if(_=_||r(7),!(this instanceof i))return new i(t);this._readableState=new n(t,this),this.readable=!0,t&&("function"==typeof t.read&&(this._read=t.read),"function"==typeof t.destroy&&(this._destroy=t.destroy)),S.call(this);}function o(t,e,r,n,i){var o,s=t._readableState;null===e?(s.reading=!1,function(t,e){if(!e.ended){if(e.decoder){var r=e.decoder.end();r&&r.length&&(e.buffer.push(r),e.length+=e.objectMode?1:r.length);}e.ended=!0,f(t);}}(t,s)):(i||(o=u(s,e)),o?t.emit("error",o):s.objectMode||e&&e.length>0?("string"==typeof e||s.objectMode||Object.getPrototypeOf(e)===k.prototype||(e=function(t){return k.from(t)}(e)),n?s.endEmitted?t.emit("error",new Error("stream.unshift() after end event")):a(t,s,e,!0):s.ended?t.emit("error",new Error("stream.push() after EOF")):(s.reading=!1,s.decoder&&!r?(e=s.decoder.write(e),s.objectMode||0!==e.length?a(t,s,e,!1):l(t,s)):a(t,s,e,!1))):n||(s.reading=!1));return function(t){return !t.ended&&(t.needReadable||t.length<t.highWaterMark||0===t.length)}(s)}function a(t,e,r,n){e.flowing&&0===e.length&&!e.sync?(t.emit("data",r),t.read(0)):(e.length+=e.objectMode?1:r.length,n?e.buffer.unshift(r):e.buffer.push(r),e.needReadable&&f(t)),l(t,e);}function u(t,e){var r;return function(t){return k.isBuffer(t)||t instanceof j}(e)||"string"==typeof e||void 0===e||t.objectMode||(r=new TypeError("Invalid non-string/buffer chunk")),r}function s(t,e){return t<=0||0===e.length&&e.ended?0:e.objectMode?1:t!=t?e.flowing&&e.length?e.buffer.head.data.length:e.length:(t>e.highWaterMark&&(e.highWaterMark=function(t){return t>=L?t=L:(t--,t|=t>>>1,t|=t>>>2,t|=t>>>4,t|=t>>>8,t|=t>>>16,t++),t}(t)),t<=e.length?t:e.ended?e.length:(e.needReadable=!0,0))}function f(t){var e=t._readableState;e.needReadable=!1,e.emittedReadable||(O("emitReadable",e.flowing),e.emittedReadable=!0,e.sync?m.nextTick(c,t):c(t));}function c(t){O("emit readable"),t.emit("readable"),b(t);}function l(t,e){e.readingMore||(e.readingMore=!0,m.nextTick(h,t,e));}function h(t,e){for(var r=e.length;!e.reading&&!e.flowing&&!e.ended&&e.length<e.highWaterMark&&(O("maybeReadMore read 0"),t.read(0),r!==e.length);)r=e.length;e.readingMore=!1;}function d(t){O("readable nexttick read 0"),t.read(0);}function p(t,e){e.reading||(O("resume read 0"),t.read(0)),e.resumeScheduled=!1,e.awaitDrain=0,t.emit("resume"),b(t),e.flowing&&!e.reading&&t.read(0);}function b(t){var e=t._readableState;for(O("flow",e.flowing);e.flowing&&null!==t.read(););}function g(t,e){return 0===e.length?null:(e.objectMode?r=e.buffer.shift():!t||t>=e.length?(r=e.decoder?e.buffer.join(""):1===e.buffer.length?e.buffer.head.data:e.buffer.concat(e.length),e.buffer.clear()):r=function(t,e,r){var n;return t<e.head.data.length?(n=e.head.data.slice(0,t),e.head.data=e.head.data.slice(t)):n=t===e.head.data.length?e.shift():r?function(t,e){var r=e.head,n=1,i=r.data;for(t-=i.length;r=r.next;){var o=r.data,a=t>o.length?o.length:t;if(a===o.length?i+=o:i+=o.slice(0,t),0==(t-=a)){a===o.length?(++n,r.next?e.head=r.next:e.head=e.tail=null):(e.head=r,r.data=o.slice(a));break}++n;}return e.length-=n,i}(t,e):function(t,e){var r=k.allocUnsafe(t),n=e.head,i=1;for(n.data.copy(r),t-=n.data.length;n=n.next;){var o=n.data,a=t>o.length?o.length:t;if(o.copy(r,r.length-t,0,a),0==(t-=a)){a===o.length?(++i,n.next?e.head=n.next:e.head=e.tail=null):(e.head=n,n.data=o.slice(a));break}++i;}return e.length-=i,r}(t,e),n}(t,e.buffer,e.decoder),r);var r;}function y(t){var e=t._readableState;if(e.length>0)throw new Error('"endReadable()" called on non-empty stream');e.endEmitted||(e.ended=!0,m.nextTick(v,e,t));}function v(t,e){t.endEmitted||0!==t.length||(t.endEmitted=!0,e.readable=!1,e.emit("end"));}function w(t,e){for(var r=0,n=t.length;r<n;r++)if(t[r]===e)return r;return -1}var m=r(11);t.exports=i;var _,E=r(15);i.ReadableState=n;var x=(r(12).EventEmitter,function(t,e){return t.listeners(e).length}),S=r(21),k=r(9).Buffer,j=window.Uint8Array||function(){},T=Object.create(r(4));T.inherits=r(3);var M=r(42),O=void 0;O=M&&M.debuglog?M.debuglog("stream"):function(){};var A,R=r(43),B=r(22);T.inherits(i,S);var U=["error","close","destroy","pause","resume"];Object.defineProperty(i.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(t){this._readableState&&(this._readableState.destroyed=t);}}),i.prototype.destroy=B.destroy,i.prototype._undestroy=B.undestroy,i.prototype._destroy=function(t,e){this.push(null),e(t);},i.prototype.push=function(t,e){var r,n=this._readableState;return n.objectMode?r=!0:"string"==typeof t&&((e=e||n.defaultEncoding)!==n.encoding&&(t=k.from(t,e),e=""),r=!0),o(this,t,e,!1,r)},i.prototype.unshift=function(t){return o(this,t,null,!0,!1)},i.prototype.isPaused=function(){return !1===this._readableState.flowing},i.prototype.setEncoding=function(t){return A||(A=r(13).StringDecoder),this._readableState.decoder=new A(t),this._readableState.encoding=t,this};var L=8388608;i.prototype.read=function(t){O("read",t),t=parseInt(t,10);var e=this._readableState,r=t;if(0!==t&&(e.emittedReadable=!1),0===t&&e.needReadable&&(e.length>=e.highWaterMark||e.ended))return O("read: emitReadable",e.length,e.ended),0===e.length&&e.ended?y(this):f(this),null;if(0===(t=s(t,e))&&e.ended)return 0===e.length&&y(this),null;var n,i=e.needReadable;return O("need readable",i),(0===e.length||e.length-t<e.highWaterMark)&&O("length less than watermark",i=!0),e.ended||e.reading?O("reading or ended",i=!1):i&&(O("do read"),e.reading=!0,e.sync=!0,0===e.length&&(e.needReadable=!0),this._read(e.highWaterMark),e.sync=!1,e.reading||(t=s(r,e))),null===(n=t>0?g(t,e):null)?(e.needReadable=!0,t=0):e.length-=t,0===e.length&&(e.ended||(e.needReadable=!0),r!==t&&e.ended&&y(this)),null!==n&&this.emit("data",n),n},i.prototype._read=function(t){this.emit("error",new Error("_read() is not implemented"));},i.prototype.pipe=function(t,r){function n(t,e){O("onunpipe"),t===l&&e&&!1===e.hasUnpiped&&(e.hasUnpiped=!0,o());}function i(){O("onend"),t.end();}function o(){O("cleanup"),t.removeListener("close",s),t.removeListener("finish",f),t.removeListener("drain",p),t.removeListener("error",u),t.removeListener("unpipe",n),l.removeListener("end",i),l.removeListener("end",c),l.removeListener("data",a),g=!0,!h.awaitDrain||t._writableState&&!t._writableState.needDrain||p();}function a(e){O("ondata"),y=!1,!1!==t.write(e)||y||((1===h.pipesCount&&h.pipes===t||h.pipesCount>1&&-1!==w(h.pipes,t))&&!g&&(O("false write response, pause",l._readableState.awaitDrain),l._readableState.awaitDrain++,y=!0),l.pause());}function u(e){O("onerror",e),c(),t.removeListener("error",u),0===x(t,"error")&&t.emit("error",e);}function s(){t.removeListener("finish",f),c();}function f(){O("onfinish"),t.removeListener("close",s),c();}function c(){O("unpipe"),l.unpipe(t);}var l=this,h=this._readableState;switch(h.pipesCount){case 0:h.pipes=t;break;case 1:h.pipes=[h.pipes,t];break;default:h.pipes.push(t);}h.pipesCount+=1,O("pipe count=%d opts=%j",h.pipesCount,r);var d=(!r||!1!==r.end)&&t!==e.stdout&&t!==e.stderr?i:c;h.endEmitted?m.nextTick(d):l.once("end",d),t.on("unpipe",n);var p=function(t){return function(){var e=t._readableState;O("pipeOnDrain",e.awaitDrain),e.awaitDrain&&e.awaitDrain--,0===e.awaitDrain&&x(t,"data")&&(e.flowing=!0,b(t));}}(l);t.on("drain",p);var g=!1,y=!1;return l.on("data",a),function(t,e,r){if("function"==typeof t.prependListener)return t.prependListener(e,r);t._events&&t._events[e]?E(t._events[e])?t._events[e].unshift(r):t._events[e]=[r,t._events[e]]:t.on(e,r);}(t,"error",u),t.once("close",s),t.once("finish",f),t.emit("pipe",l),h.flowing||(O("pipe resume"),l.resume()),t},i.prototype.unpipe=function(t){var e=this._readableState,r={hasUnpiped:!1};if(0===e.pipesCount)return this;if(1===e.pipesCount)return t&&t!==e.pipes||(t||(t=e.pipes),e.pipes=null,e.pipesCount=0,e.flowing=!1,t&&t.emit("unpipe",this,r)),this;if(!t){var n=e.pipes,i=e.pipesCount;e.pipes=null,e.pipesCount=0,e.flowing=!1;for(var o=0;o<i;o++)n[o].emit("unpipe",this,r);return this}var a=w(e.pipes,t);return -1===a||(e.pipes.splice(a,1),e.pipesCount-=1,1===e.pipesCount&&(e.pipes=e.pipes[0]),t.emit("unpipe",this,r)),this},i.prototype.on=function(t,e){var r=S.prototype.on.call(this,t,e);if("data"===t)!1!==this._readableState.flowing&&this.resume();else if("readable"===t){var n=this._readableState;n.endEmitted||n.readableListening||(n.readableListening=n.needReadable=!0,n.emittedReadable=!1,n.reading?n.length&&f(this):m.nextTick(d,this));}return r},i.prototype.addListener=i.prototype.on,i.prototype.resume=function(){var t=this._readableState;return t.flowing||(O("resume"),t.flowing=!0,function(t,e){e.resumeScheduled||(e.resumeScheduled=!0,m.nextTick(p,t,e));}(this,t)),this},i.prototype.pause=function(){return O("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(O("pause"),this._readableState.flowing=!1,this.emit("pause")),this},i.prototype.wrap=function(t){var e=this,r=this._readableState,n=!1;for(var i in t.on("end",(function(){if(O("wrapped end"),r.decoder&&!r.ended){var t=r.decoder.end();t&&t.length&&e.push(t);}e.push(null);})),t.on("data",(function(i){O("wrapped data"),r.decoder&&(i=r.decoder.write(i)),r.objectMode&&null==i||!(r.objectMode||i&&i.length)||e.push(i)||(n=!0,t.pause());})),t)void 0===this[i]&&"function"==typeof t[i]&&(this[i]=function(e){return function(){return t[e].apply(t,arguments)}}(i));for(var o=0;o<U.length;o++)t.on(U[o],this.emit.bind(this,U[o]));return this._read=function(e){O("wrapped _read",e),n&&(n=!1,t.resume());},this},Object.defineProperty(i.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),i._fromList=g;}).call(this,r(6));},function(t,e,r){t.exports=r(12).EventEmitter;},function(t,e,r){function n(t,e){t.emit("error",e);}var i=r(11);t.exports={destroy:function(t,e){var r=this,o=this._readableState&&this._readableState.destroyed,a=this._writableState&&this._writableState.destroyed;return o||a?(e?e(t):!t||this._writableState&&this._writableState.errorEmitted||i.nextTick(n,this,t),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(t||null,(function(t){!e&&t?(i.nextTick(n,r,t),r._writableState&&(r._writableState.errorEmitted=!0)):e&&e(t);})),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1);}};},function(t,e,r){(function(e,n){function i(t){var e=this;this.next=null,this.entry=null,this.finish=function(){!function(t,e,r){var n=t.entry;for(t.entry=null;n;){var i=n.callback;e.pendingcb--,i(r),n=n.next;}e.corkedRequestsFree?e.corkedRequestsFree.next=t:e.corkedRequestsFree=t;}(e,t);};}function o(){}function a(t,e){g=g||r(7),t=t||{};var n=e instanceof g;this.objectMode=!!t.objectMode,n&&(this.objectMode=this.objectMode||!!t.writableObjectMode);var o=t.highWaterMark,a=t.writableHighWaterMark,u=this.objectMode?16:16384;this.highWaterMark=o||0===o?o:n&&(a||0===a)?a:u,this.highWaterMark=Math.floor(this.highWaterMark),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var s=!1===t.decodeStrings;this.decodeStrings=!s,this.defaultEncoding=t.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(t){!function(t,e){var r=t._writableState,n=r.sync,i=r.writecb;if(function(t){t.writing=!1,t.writecb=null,t.length-=t.writelen,t.writelen=0;}(r),e)!function(t,e,r,n,i){--e.pendingcb,r?(b.nextTick(i,n),b.nextTick(p,t,e),t._writableState.errorEmitted=!0,t.emit("error",n)):(i(n),t._writableState.errorEmitted=!0,t.emit("error",n),p(t,e));}(t,r,n,e,i);else {var o=h(r);o||r.corked||r.bufferProcessing||!r.bufferedRequest||l(t,r),n?y(c,t,r,o,i):c(t,r,o,i);}}(e,t);},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.bufferedRequestCount=0,this.corkedRequestsFree=new i(this);}function u(t){if(g=g||r(7),!(w.call(u,this)||this instanceof g))return new u(t);this._writableState=new a(t,this),this.writable=!0,t&&("function"==typeof t.write&&(this._write=t.write),"function"==typeof t.writev&&(this._writev=t.writev),"function"==typeof t.destroy&&(this._destroy=t.destroy),"function"==typeof t.final&&(this._final=t.final)),_.call(this);}function s(t,e,r,n,i,o){if(!r){var a=function(t,e,r){return t.objectMode||!1===t.decodeStrings||"string"!=typeof e||(e=E.from(e,r)),e}(e,n,i);n!==a&&(r=!0,i="buffer",n=a);}var u=e.objectMode?1:n.length;e.length+=u;var s=e.length<e.highWaterMark;if(s||(e.needDrain=!0),e.writing||e.corked){var c=e.lastBufferedRequest;e.lastBufferedRequest={chunk:n,encoding:i,isBuf:r,callback:o,next:null},c?c.next=e.lastBufferedRequest:e.bufferedRequest=e.lastBufferedRequest,e.bufferedRequestCount+=1;}else f(t,e,!1,u,n,i,o);return s}function f(t,e,r,n,i,o,a){e.writelen=n,e.writecb=a,e.writing=!0,e.sync=!0,r?t._writev(i,e.onwrite):t._write(i,o,e.onwrite),e.sync=!1;}function c(t,e,r,n){r||function(t,e){0===e.length&&e.needDrain&&(e.needDrain=!1,t.emit("drain"));}(t,e),e.pendingcb--,n(),p(t,e);}function l(t,e){e.bufferProcessing=!0;var r=e.bufferedRequest;if(t._writev&&r&&r.next){var n=e.bufferedRequestCount,o=new Array(n),a=e.corkedRequestsFree;a.entry=r;for(var u=0,s=!0;r;)o[u]=r,r.isBuf||(s=!1),r=r.next,u+=1;o.allBuffers=s,f(t,e,!0,e.length,o,"",a.finish),e.pendingcb++,e.lastBufferedRequest=null,a.next?(e.corkedRequestsFree=a.next,a.next=null):e.corkedRequestsFree=new i(e),e.bufferedRequestCount=0;}else {for(;r;){var c=r.chunk,l=r.encoding,h=r.callback;if(f(t,e,!1,e.objectMode?1:c.length,c,l,h),r=r.next,e.bufferedRequestCount--,e.writing)break}null===r&&(e.lastBufferedRequest=null);}e.bufferedRequest=r,e.bufferProcessing=!1;}function h(t){return t.ending&&0===t.length&&null===t.bufferedRequest&&!t.finished&&!t.writing}function d(t,e){t._final((function(r){e.pendingcb--,r&&t.emit("error",r),e.prefinished=!0,t.emit("prefinish"),p(t,e);}));}function p(t,e){var r=h(e);return r&&(function(t,e){e.prefinished||e.finalCalled||("function"==typeof t._final?(e.pendingcb++,e.finalCalled=!0,b.nextTick(d,t,e)):(e.prefinished=!0,t.emit("prefinish")));}(t,e),0===e.pendingcb&&(e.finished=!0,t.emit("finish"))),r}var b=r(11);t.exports=u;var g,y=!e.browser&&["v0.10","v0.9."].indexOf(e.version.slice(0,5))>-1?n:b.nextTick;u.WritableState=a;var v=Object.create(r(4));v.inherits=r(3);var w,m={deprecate:r(24)},_=r(21),E=r(9).Buffer,x=window.Uint8Array||function(){},S=r(22);v.inherits(u,_),a.prototype.getBuffer=function(){for(var t=this.bufferedRequest,e=[];t;)e.push(t),t=t.next;return e},function(){try{Object.defineProperty(a.prototype,"buffer",{get:m.deprecate((function(){return this.getBuffer()}),"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")});}catch(t){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(w=Function.prototype[Symbol.hasInstance],Object.defineProperty(u,Symbol.hasInstance,{value:function(t){return !!w.call(this,t)||this===u&&t&&t._writableState instanceof a}})):w=function(t){return t instanceof this},u.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe, not readable"));},u.prototype.write=function(t,e,r){var n=this._writableState,i=!1,a=!n.objectMode&&function(t){return E.isBuffer(t)||t instanceof x}(t);return a&&!E.isBuffer(t)&&(t=function(t){return E.from(t)}(t)),"function"==typeof e&&(r=e,e=null),a?e="buffer":e||(e=n.defaultEncoding),"function"!=typeof r&&(r=o),n.ended?function(t,e){var r=new Error("write after end");t.emit("error",r),b.nextTick(e,r);}(this,r):(a||function(t,e,r,n){var i=!0,o=!1;return null===r?o=new TypeError("May not write null values to stream"):"string"==typeof r||void 0===r||e.objectMode||(o=new TypeError("Invalid non-string/buffer chunk")),o&&(t.emit("error",o),b.nextTick(n,o),i=!1),i}(this,n,t,r))&&(n.pendingcb++,i=s(this,n,a,t,e,r)),i},u.prototype.cork=function(){this._writableState.corked++;},u.prototype.uncork=function(){var t=this._writableState;t.corked&&(t.corked--,t.writing||t.corked||t.finished||t.bufferProcessing||!t.bufferedRequest||l(this,t));},u.prototype.setDefaultEncoding=function(t){if("string"==typeof t&&(t=t.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((t+"").toLowerCase())>-1))throw new TypeError("Unknown encoding: "+t);return this._writableState.defaultEncoding=t,this},Object.defineProperty(u.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),u.prototype._write=function(t,e,r){r(new Error("_write() is not implemented"));},u.prototype._writev=null,u.prototype.end=function(t,e,r){var n=this._writableState;"function"==typeof t?(r=t,t=null,e=null):"function"==typeof e&&(r=e,e=null),null!=t&&this.write(t,e),n.corked&&(n.corked=1,this.uncork()),n.ending||n.finished||function(t,e,r){e.ending=!0,p(t,e),r&&(e.finished?b.nextTick(r):t.once("finish",r)),e.ended=!0,t.writable=!1;}(this,n,r);},Object.defineProperty(u.prototype,"destroyed",{get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(t){this._writableState&&(this._writableState.destroyed=t);}}),u.prototype.destroy=S.destroy,u.prototype._undestroy=S.undestroy,u.prototype._destroy=function(t,e){this.end(),e(t);};}).call(this,r(6),r(17).setImmediate);},function(t,e){function r(t){try{if(!window.localStorage)return !1}catch(t){return !1}var e=window.localStorage[t];return null!=e&&"true"===String(e).toLowerCase()}t.exports=function(t,e){if(r("noDeprecation"))return t;var n=!1;return function(){if(!n){if(r("throwDeprecation"))throw new Error(e);r("traceDeprecation")?console.trace(e):console.warn(e),n=!0;}return t.apply(this,arguments)}};},function(t,e,r){function n(t,e){var r=this._transformState;r.transforming=!1;var n=r.writecb;if(!n)return this.emit("error",new Error("write callback called multiple times"));r.writechunk=null,r.writecb=null,null!=e&&this.push(e),n(t);var i=this._readableState;i.reading=!1,(i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark);}function i(t){if(!(this instanceof i))return new i(t);u.call(this,t),this._transformState={afterTransform:n.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,t&&("function"==typeof t.transform&&(this._transform=t.transform),"function"==typeof t.flush&&(this._flush=t.flush)),this.on("prefinish",o);}function o(){var t=this;"function"==typeof this._flush?this._flush((function(e,r){a(t,e,r);})):a(this,null,null);}function a(t,e,r){if(e)return t.emit("error",e);if(null!=r&&t.push(r),t._writableState.length)throw new Error("Calling transform done when ws.length != 0");if(t._transformState.transforming)throw new Error("Calling transform done when still transforming");return t.push(null)}t.exports=i;var u=r(7),s=Object.create(r(4));s.inherits=r(3),s.inherits(i,u),i.prototype.push=function(t,e){return this._transformState.needTransform=!1,u.prototype.push.call(this,t,e)},i.prototype._transform=function(t,e,r){throw new Error("_transform() is not implemented")},i.prototype._write=function(t,e,r){var n=this._transformState;if(n.writecb=r,n.writechunk=t,n.writeencoding=e,!n.transforming){var i=this._readableState;(n.needTransform||i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark);}},i.prototype._read=function(t){var e=this._transformState;null!==e.writechunk&&e.writecb&&!e.transforming?(e.transforming=!0,this._transform(e.writechunk,e.writeencoding,e.afterTransform)):e.needTransform=!0;},i.prototype._destroy=function(t,e){var r=this;u.prototype._destroy.call(this,t,(function(t){e(t),r.emit("close");}));};},function(t,e,r){(function(e){function n(t,e){t=t||{};var n=e instanceof(_=_||r(8));this.objectMode=!!t.objectMode,n&&(this.objectMode=this.objectMode||!!t.readableObjectMode);var i=t.highWaterMark,o=t.readableHighWaterMark,a=this.objectMode?16:16384;this.highWaterMark=i||0===i?i:n&&(o||0===o)?o:a,this.highWaterMark=Math.floor(this.highWaterMark),this.buffer=new R,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.destroyed=!1,this.defaultEncoding=t.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,t.encoding&&(A||(A=r(13).StringDecoder),this.decoder=new A(t.encoding),this.encoding=t.encoding);}function i(t){if(_=_||r(8),!(this instanceof i))return new i(t);this._readableState=new n(t,this),this.readable=!0,t&&("function"==typeof t.read&&(this._read=t.read),"function"==typeof t.destroy&&(this._destroy=t.destroy)),S.call(this);}function o(t,e,r,n,i){var o,s=t._readableState;null===e?(s.reading=!1,function(t,e){if(!e.ended){if(e.decoder){var r=e.decoder.end();r&&r.length&&(e.buffer.push(r),e.length+=e.objectMode?1:r.length);}e.ended=!0,f(t);}}(t,s)):(i||(o=u(s,e)),o?t.emit("error",o):s.objectMode||e&&e.length>0?("string"==typeof e||s.objectMode||Object.getPrototypeOf(e)===k.prototype||(e=function(t){return k.from(t)}(e)),n?s.endEmitted?t.emit("error",new Error("stream.unshift() after end event")):a(t,s,e,!0):s.ended?t.emit("error",new Error("stream.push() after EOF")):(s.reading=!1,s.decoder&&!r?(e=s.decoder.write(e),s.objectMode||0!==e.length?a(t,s,e,!1):l(t,s)):a(t,s,e,!1))):n||(s.reading=!1));return function(t){return !t.ended&&(t.needReadable||t.length<t.highWaterMark||0===t.length)}(s)}function a(t,e,r,n){e.flowing&&0===e.length&&!e.sync?(t.emit("data",r),t.read(0)):(e.length+=e.objectMode?1:r.length,n?e.buffer.unshift(r):e.buffer.push(r),e.needReadable&&f(t)),l(t,e);}function u(t,e){var r;return function(t){return k.isBuffer(t)||t instanceof j}(e)||"string"==typeof e||void 0===e||t.objectMode||(r=new TypeError("Invalid non-string/buffer chunk")),r}function s(t,e){return t<=0||0===e.length&&e.ended?0:e.objectMode?1:t!=t?e.flowing&&e.length?e.buffer.head.data.length:e.length:(t>e.highWaterMark&&(e.highWaterMark=function(t){return t>=L?t=L:(t--,t|=t>>>1,t|=t>>>2,t|=t>>>4,t|=t>>>8,t|=t>>>16,t++),t}(t)),t<=e.length?t:e.ended?e.length:(e.needReadable=!0,0))}function f(t){var e=t._readableState;e.needReadable=!1,e.emittedReadable||(O("emitReadable",e.flowing),e.emittedReadable=!0,e.sync?m.nextTick(c,t):c(t));}function c(t){O("emit readable"),t.emit("readable"),b(t);}function l(t,e){e.readingMore||(e.readingMore=!0,m.nextTick(h,t,e));}function h(t,e){for(var r=e.length;!e.reading&&!e.flowing&&!e.ended&&e.length<e.highWaterMark&&(O("maybeReadMore read 0"),t.read(0),r!==e.length);)r=e.length;e.readingMore=!1;}function d(t){O("readable nexttick read 0"),t.read(0);}function p(t,e){e.reading||(O("resume read 0"),t.read(0)),e.resumeScheduled=!1,e.awaitDrain=0,t.emit("resume"),b(t),e.flowing&&!e.reading&&t.read(0);}function b(t){var e=t._readableState;for(O("flow",e.flowing);e.flowing&&null!==t.read(););}function g(t,e){return 0===e.length?null:(e.objectMode?r=e.buffer.shift():!t||t>=e.length?(r=e.decoder?e.buffer.join(""):1===e.buffer.length?e.buffer.head.data:e.buffer.concat(e.length),e.buffer.clear()):r=function(t,e,r){var n;return t<e.head.data.length?(n=e.head.data.slice(0,t),e.head.data=e.head.data.slice(t)):n=t===e.head.data.length?e.shift():r?function(t,e){var r=e.head,n=1,i=r.data;for(t-=i.length;r=r.next;){var o=r.data,a=t>o.length?o.length:t;if(a===o.length?i+=o:i+=o.slice(0,t),0==(t-=a)){a===o.length?(++n,r.next?e.head=r.next:e.head=e.tail=null):(e.head=r,r.data=o.slice(a));break}++n;}return e.length-=n,i}(t,e):function(t,e){var r=k.allocUnsafe(t),n=e.head,i=1;for(n.data.copy(r),t-=n.data.length;n=n.next;){var o=n.data,a=t>o.length?o.length:t;if(o.copy(r,r.length-t,0,a),0==(t-=a)){a===o.length?(++i,n.next?e.head=n.next:e.head=e.tail=null):(e.head=n,n.data=o.slice(a));break}++i;}return e.length-=i,r}(t,e),n}(t,e.buffer,e.decoder),r);var r;}function y(t){var e=t._readableState;if(e.length>0)throw new Error('"endReadable()" called on non-empty stream');e.endEmitted||(e.ended=!0,m.nextTick(v,e,t));}function v(t,e){t.endEmitted||0!==t.length||(t.endEmitted=!0,e.readable=!1,e.emit("end"));}function w(t,e){for(var r=0,n=t.length;r<n;r++)if(t[r]===e)return r;return -1}var m=r(14);t.exports=i;var _,E=r(15);i.ReadableState=n;var x=(r(12).EventEmitter,function(t,e){return t.listeners(e).length}),S=r(27),k=r(18).Buffer,j=window.Uint8Array||function(){},T=Object.create(r(4));T.inherits=r(3);var M=r(49),O=void 0;O=M&&M.debuglog?M.debuglog("stream"):function(){};var A,R=r(50),B=r(28);T.inherits(i,S);var U=["error","close","destroy","pause","resume"];Object.defineProperty(i.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(t){this._readableState&&(this._readableState.destroyed=t);}}),i.prototype.destroy=B.destroy,i.prototype._undestroy=B.undestroy,i.prototype._destroy=function(t,e){this.push(null),e(t);},i.prototype.push=function(t,e){var r,n=this._readableState;return n.objectMode?r=!0:"string"==typeof t&&((e=e||n.defaultEncoding)!==n.encoding&&(t=k.from(t,e),e=""),r=!0),o(this,t,e,!1,r)},i.prototype.unshift=function(t){return o(this,t,null,!0,!1)},i.prototype.isPaused=function(){return !1===this._readableState.flowing},i.prototype.setEncoding=function(t){return A||(A=r(13).StringDecoder),this._readableState.decoder=new A(t),this._readableState.encoding=t,this};var L=8388608;i.prototype.read=function(t){O("read",t),t=parseInt(t,10);var e=this._readableState,r=t;if(0!==t&&(e.emittedReadable=!1),0===t&&e.needReadable&&(e.length>=e.highWaterMark||e.ended))return O("read: emitReadable",e.length,e.ended),0===e.length&&e.ended?y(this):f(this),null;if(0===(t=s(t,e))&&e.ended)return 0===e.length&&y(this),null;var n,i=e.needReadable;return O("need readable",i),(0===e.length||e.length-t<e.highWaterMark)&&O("length less than watermark",i=!0),e.ended||e.reading?O("reading or ended",i=!1):i&&(O("do read"),e.reading=!0,e.sync=!0,0===e.length&&(e.needReadable=!0),this._read(e.highWaterMark),e.sync=!1,e.reading||(t=s(r,e))),null===(n=t>0?g(t,e):null)?(e.needReadable=!0,t=0):e.length-=t,0===e.length&&(e.ended||(e.needReadable=!0),r!==t&&e.ended&&y(this)),null!==n&&this.emit("data",n),n},i.prototype._read=function(t){this.emit("error",new Error("_read() is not implemented"));},i.prototype.pipe=function(t,r){function n(t,e){O("onunpipe"),t===l&&e&&!1===e.hasUnpiped&&(e.hasUnpiped=!0,o());}function i(){O("onend"),t.end();}function o(){O("cleanup"),t.removeListener("close",s),t.removeListener("finish",f),t.removeListener("drain",p),t.removeListener("error",u),t.removeListener("unpipe",n),l.removeListener("end",i),l.removeListener("end",c),l.removeListener("data",a),g=!0,!h.awaitDrain||t._writableState&&!t._writableState.needDrain||p();}function a(e){O("ondata"),y=!1,!1!==t.write(e)||y||((1===h.pipesCount&&h.pipes===t||h.pipesCount>1&&-1!==w(h.pipes,t))&&!g&&(O("false write response, pause",l._readableState.awaitDrain),l._readableState.awaitDrain++,y=!0),l.pause());}function u(e){O("onerror",e),c(),t.removeListener("error",u),0===x(t,"error")&&t.emit("error",e);}function s(){t.removeListener("finish",f),c();}function f(){O("onfinish"),t.removeListener("close",s),c();}function c(){O("unpipe"),l.unpipe(t);}var l=this,h=this._readableState;switch(h.pipesCount){case 0:h.pipes=t;break;case 1:h.pipes=[h.pipes,t];break;default:h.pipes.push(t);}h.pipesCount+=1,O("pipe count=%d opts=%j",h.pipesCount,r);var d=(!r||!1!==r.end)&&t!==e.stdout&&t!==e.stderr?i:c;h.endEmitted?m.nextTick(d):l.once("end",d),t.on("unpipe",n);var p=function(t){return function(){var e=t._readableState;O("pipeOnDrain",e.awaitDrain),e.awaitDrain&&e.awaitDrain--,0===e.awaitDrain&&x(t,"data")&&(e.flowing=!0,b(t));}}(l);t.on("drain",p);var g=!1,y=!1;return l.on("data",a),function(t,e,r){if("function"==typeof t.prependListener)return t.prependListener(e,r);t._events&&t._events[e]?E(t._events[e])?t._events[e].unshift(r):t._events[e]=[r,t._events[e]]:t.on(e,r);}(t,"error",u),t.once("close",s),t.once("finish",f),t.emit("pipe",l),h.flowing||(O("pipe resume"),l.resume()),t},i.prototype.unpipe=function(t){var e=this._readableState,r={hasUnpiped:!1};if(0===e.pipesCount)return this;if(1===e.pipesCount)return t&&t!==e.pipes||(t||(t=e.pipes),e.pipes=null,e.pipesCount=0,e.flowing=!1,t&&t.emit("unpipe",this,r)),this;if(!t){var n=e.pipes,i=e.pipesCount;e.pipes=null,e.pipesCount=0,e.flowing=!1;for(var o=0;o<i;o++)n[o].emit("unpipe",this,r);return this}var a=w(e.pipes,t);return -1===a||(e.pipes.splice(a,1),e.pipesCount-=1,1===e.pipesCount&&(e.pipes=e.pipes[0]),t.emit("unpipe",this,r)),this},i.prototype.on=function(t,e){var r=S.prototype.on.call(this,t,e);if("data"===t)!1!==this._readableState.flowing&&this.resume();else if("readable"===t){var n=this._readableState;n.endEmitted||n.readableListening||(n.readableListening=n.needReadable=!0,n.emittedReadable=!1,n.reading?n.length&&f(this):m.nextTick(d,this));}return r},i.prototype.addListener=i.prototype.on,i.prototype.resume=function(){var t=this._readableState;return t.flowing||(O("resume"),t.flowing=!0,function(t,e){e.resumeScheduled||(e.resumeScheduled=!0,m.nextTick(p,t,e));}(this,t)),this},i.prototype.pause=function(){return O("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(O("pause"),this._readableState.flowing=!1,this.emit("pause")),this},i.prototype.wrap=function(t){var e=this,r=this._readableState,n=!1;for(var i in t.on("end",(function(){if(O("wrapped end"),r.decoder&&!r.ended){var t=r.decoder.end();t&&t.length&&e.push(t);}e.push(null);})),t.on("data",(function(i){O("wrapped data"),r.decoder&&(i=r.decoder.write(i)),r.objectMode&&null==i||!(r.objectMode||i&&i.length)||e.push(i)||(n=!0,t.pause());})),t)void 0===this[i]&&"function"==typeof t[i]&&(this[i]=function(e){return function(){return t[e].apply(t,arguments)}}(i));for(var o=0;o<U.length;o++)t.on(U[o],this.emit.bind(this,U[o]));return this._read=function(e){O("wrapped _read",e),n&&(n=!1,t.resume());},this},Object.defineProperty(i.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),i._fromList=g;}).call(this,r(6));},function(t,e,r){t.exports=r(12).EventEmitter;},function(t,e,r){function n(t,e){t.emit("error",e);}var i=r(14);t.exports={destroy:function(t,e){var r=this,o=this._readableState&&this._readableState.destroyed,a=this._writableState&&this._writableState.destroyed;return o||a?(e?e(t):!t||this._writableState&&this._writableState.errorEmitted||i.nextTick(n,this,t),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(t||null,(function(t){!e&&t?(i.nextTick(n,r,t),r._writableState&&(r._writableState.errorEmitted=!0)):e&&e(t);})),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1);}};},function(t,e,r){(function(e,n){function i(t){var e=this;this.next=null,this.entry=null,this.finish=function(){!function(t,e,r){var n=t.entry;for(t.entry=null;n;){var i=n.callback;e.pendingcb--,i(r),n=n.next;}e.corkedRequestsFree?e.corkedRequestsFree.next=t:e.corkedRequestsFree=t;}(e,t);};}function o(){}function a(t,e){g=g||r(8),t=t||{};var n=e instanceof g;this.objectMode=!!t.objectMode,n&&(this.objectMode=this.objectMode||!!t.writableObjectMode);var o=t.highWaterMark,a=t.writableHighWaterMark,u=this.objectMode?16:16384;this.highWaterMark=o||0===o?o:n&&(a||0===a)?a:u,this.highWaterMark=Math.floor(this.highWaterMark),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var s=!1===t.decodeStrings;this.decodeStrings=!s,this.defaultEncoding=t.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(t){!function(t,e){var r=t._writableState,n=r.sync,i=r.writecb;if(function(t){t.writing=!1,t.writecb=null,t.length-=t.writelen,t.writelen=0;}(r),e)!function(t,e,r,n,i){--e.pendingcb,r?(b.nextTick(i,n),b.nextTick(p,t,e),t._writableState.errorEmitted=!0,t.emit("error",n)):(i(n),t._writableState.errorEmitted=!0,t.emit("error",n),p(t,e));}(t,r,n,e,i);else {var o=h(r);o||r.corked||r.bufferProcessing||!r.bufferedRequest||l(t,r),n?y(c,t,r,o,i):c(t,r,o,i);}}(e,t);},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.bufferedRequestCount=0,this.corkedRequestsFree=new i(this);}function u(t){if(g=g||r(8),!(w.call(u,this)||this instanceof g))return new u(t);this._writableState=new a(t,this),this.writable=!0,t&&("function"==typeof t.write&&(this._write=t.write),"function"==typeof t.writev&&(this._writev=t.writev),"function"==typeof t.destroy&&(this._destroy=t.destroy),"function"==typeof t.final&&(this._final=t.final)),_.call(this);}function s(t,e,r,n,i,o){if(!r){var a=function(t,e,r){return t.objectMode||!1===t.decodeStrings||"string"!=typeof e||(e=E.from(e,r)),e}(e,n,i);n!==a&&(r=!0,i="buffer",n=a);}var u=e.objectMode?1:n.length;e.length+=u;var s=e.length<e.highWaterMark;if(s||(e.needDrain=!0),e.writing||e.corked){var c=e.lastBufferedRequest;e.lastBufferedRequest={chunk:n,encoding:i,isBuf:r,callback:o,next:null},c?c.next=e.lastBufferedRequest:e.bufferedRequest=e.lastBufferedRequest,e.bufferedRequestCount+=1;}else f(t,e,!1,u,n,i,o);return s}function f(t,e,r,n,i,o,a){e.writelen=n,e.writecb=a,e.writing=!0,e.sync=!0,r?t._writev(i,e.onwrite):t._write(i,o,e.onwrite),e.sync=!1;}function c(t,e,r,n){r||function(t,e){0===e.length&&e.needDrain&&(e.needDrain=!1,t.emit("drain"));}(t,e),e.pendingcb--,n(),p(t,e);}function l(t,e){e.bufferProcessing=!0;var r=e.bufferedRequest;if(t._writev&&r&&r.next){var n=e.bufferedRequestCount,o=new Array(n),a=e.corkedRequestsFree;a.entry=r;for(var u=0,s=!0;r;)o[u]=r,r.isBuf||(s=!1),r=r.next,u+=1;o.allBuffers=s,f(t,e,!0,e.length,o,"",a.finish),e.pendingcb++,e.lastBufferedRequest=null,a.next?(e.corkedRequestsFree=a.next,a.next=null):e.corkedRequestsFree=new i(e),e.bufferedRequestCount=0;}else {for(;r;){var c=r.chunk,l=r.encoding,h=r.callback;if(f(t,e,!1,e.objectMode?1:c.length,c,l,h),r=r.next,e.bufferedRequestCount--,e.writing)break}null===r&&(e.lastBufferedRequest=null);}e.bufferedRequest=r,e.bufferProcessing=!1;}function h(t){return t.ending&&0===t.length&&null===t.bufferedRequest&&!t.finished&&!t.writing}function d(t,e){t._final((function(r){e.pendingcb--,r&&t.emit("error",r),e.prefinished=!0,t.emit("prefinish"),p(t,e);}));}function p(t,e){var r=h(e);return r&&(function(t,e){e.prefinished||e.finalCalled||("function"==typeof t._final?(e.pendingcb++,e.finalCalled=!0,b.nextTick(d,t,e)):(e.prefinished=!0,t.emit("prefinish")));}(t,e),0===e.pendingcb&&(e.finished=!0,t.emit("finish"))),r}var b=r(14);t.exports=u;var g,y=!e.browser&&["v0.10","v0.9."].indexOf(e.version.slice(0,5))>-1?n:b.nextTick;u.WritableState=a;var v=Object.create(r(4));v.inherits=r(3);var w,m={deprecate:r(24)},_=r(27),E=r(18).Buffer,x=window.Uint8Array||function(){},S=r(28);v.inherits(u,_),a.prototype.getBuffer=function(){for(var t=this.bufferedRequest,e=[];t;)e.push(t),t=t.next;return e},function(){try{Object.defineProperty(a.prototype,"buffer",{get:m.deprecate((function(){return this.getBuffer()}),"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")});}catch(t){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(w=Function.prototype[Symbol.hasInstance],Object.defineProperty(u,Symbol.hasInstance,{value:function(t){return !!w.call(this,t)||this===u&&t&&t._writableState instanceof a}})):w=function(t){return t instanceof this},u.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe, not readable"));},u.prototype.write=function(t,e,r){var n=this._writableState,i=!1,a=!n.objectMode&&function(t){return E.isBuffer(t)||t instanceof x}(t);return a&&!E.isBuffer(t)&&(t=function(t){return E.from(t)}(t)),"function"==typeof e&&(r=e,e=null),a?e="buffer":e||(e=n.defaultEncoding),"function"!=typeof r&&(r=o),n.ended?function(t,e){var r=new Error("write after end");t.emit("error",r),b.nextTick(e,r);}(this,r):(a||function(t,e,r,n){var i=!0,o=!1;return null===r?o=new TypeError("May not write null values to stream"):"string"==typeof r||void 0===r||e.objectMode||(o=new TypeError("Invalid non-string/buffer chunk")),o&&(t.emit("error",o),b.nextTick(n,o),i=!1),i}(this,n,t,r))&&(n.pendingcb++,i=s(this,n,a,t,e,r)),i},u.prototype.cork=function(){this._writableState.corked++;},u.prototype.uncork=function(){var t=this._writableState;t.corked&&(t.corked--,t.writing||t.corked||t.finished||t.bufferProcessing||!t.bufferedRequest||l(this,t));},u.prototype.setDefaultEncoding=function(t){if("string"==typeof t&&(t=t.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((t+"").toLowerCase())>-1))throw new TypeError("Unknown encoding: "+t);return this._writableState.defaultEncoding=t,this},Object.defineProperty(u.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),u.prototype._write=function(t,e,r){r(new Error("_write() is not implemented"));},u.prototype._writev=null,u.prototype.end=function(t,e,r){var n=this._writableState;"function"==typeof t?(r=t,t=null,e=null):"function"==typeof e&&(r=e,e=null),null!=t&&this.write(t,e),n.corked&&(n.corked=1,this.uncork()),n.ending||n.finished||function(t,e,r){e.ending=!0,p(t,e),r&&(e.finished?b.nextTick(r):t.once("finish",r)),e.ended=!0,t.writable=!1;}(this,n,r);},Object.defineProperty(u.prototype,"destroyed",{get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(t){this._writableState&&(this._writableState.destroyed=t);}}),u.prototype.destroy=S.destroy,u.prototype._undestroy=S.undestroy,u.prototype._destroy=function(t,e){this.end(),e(t);};}).call(this,r(6),r(17).setImmediate);},function(t,e,r){function n(t,e){var r=this._transformState;r.transforming=!1;var n=r.writecb;if(!n)return this.emit("error",new Error("write callback called multiple times"));r.writechunk=null,r.writecb=null,null!=e&&this.push(e),n(t);var i=this._readableState;i.reading=!1,(i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark);}function i(t){if(!(this instanceof i))return new i(t);u.call(this,t),this._transformState={afterTransform:n.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,t&&("function"==typeof t.transform&&(this._transform=t.transform),"function"==typeof t.flush&&(this._flush=t.flush)),this.on("prefinish",o);}function o(){var t=this;"function"==typeof this._flush?this._flush((function(e,r){a(t,e,r);})):a(this,null,null);}function a(t,e,r){if(e)return t.emit("error",e);if(null!=r&&t.push(r),t._writableState.length)throw new Error("Calling transform done when ws.length != 0");if(t._transformState.transforming)throw new Error("Calling transform done when still transforming");return t.push(null)}t.exports=i;var u=r(8),s=Object.create(r(4));s.inherits=r(3),s.inherits(i,u),i.prototype.push=function(t,e){return this._transformState.needTransform=!1,u.prototype.push.call(this,t,e)},i.prototype._transform=function(t,e,r){throw new Error("_transform() is not implemented")},i.prototype._write=function(t,e,r){var n=this._transformState;if(n.writecb=r,n.writechunk=t,n.writeencoding=e,!n.transforming){var i=this._readableState;(n.needTransform||i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark);}},i.prototype._read=function(t){var e=this._transformState;null!==e.writechunk&&e.writecb&&!e.transforming?(e.transforming=!0,this._transform(e.writechunk,e.writeencoding,e.afterTransform)):e.needTransform=!0;},i.prototype._destroy=function(t,e){var r=this;u.prototype._destroy.call(this,t,(function(t){e(t),r.emit("close");}));};},function(t,e,r){(function(t){var n=r(0),i=r.n(n),o=r(1),a=r.n(o),u=r(2);e.a={pack:!0,encode:!0,compress:function(){var e=a()(i.a.mark((function e(r){var n;return i.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,u.a.lzma();case 2:return n=e.sent,e.abrupt("return",new Promise((function(e,i){return n.compress(r,9,(function(r,n){return n?i(n):e(t.from(r))}))})));case 4:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),decompress:function(){var e=a()(i.a.mark((function e(r){var n;return i.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,u.a.lzma();case 2:return n=e.sent,e.abrupt("return",new Promise((function(e,i){return n.decompress(r,(function(r,n){return n?i(n):e(t.from(r))}))})));case 4:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()};}).call(this,r(5).Buffer);},function(t,e,r){(function(t){var n=r(0),i=r.n(n),o=r(1),a=r.n(o),u=r(2);e.a={pack:!1,encode:!0,compress:function(){var e=a()(i.a.mark((function e(r){return i.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.t0=t,e.next=3,u.a.lzstring();case 3:return e.t1=e.sent.compressToUint8Array(r),e.abrupt("return",e.t0.from.call(e.t0,e.t1));case 5:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),decompress:function(){var t=a()(i.a.mark((function t(e){return i.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,u.a.lzstring();case 2:return t.abrupt("return",t.sent.decompressFromUint8Array(e));case 3:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}()};}).call(this,r(5).Buffer);},function(t,e,r){(function(t){var n=r(0),i=r.n(n),o=r(1),a=r.n(o),u=r(2);e.a={pack:!0,encode:!0,compress:function(){var e=a()(i.a.mark((function e(r){return i.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.t0=t,e.next=3,u.a.lzw();case 3:return e.t1=e.sent.encode(r.toString("binary")),e.abrupt("return",e.t0.from.call(e.t0,e.t1));case 5:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),decompress:function(){var e=a()(i.a.mark((function e(r){return i.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.t0=t,e.next=3,u.a.lzw();case 3:return e.t1=e.sent.decode(r),e.abrupt("return",e.t0.from.call(e.t0,e.t1,"binary"));case 5:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()};}).call(this,r(5).Buffer);},function(t,e,r){var n=function(t){function e(t,e,r,i){var o=e&&e.prototype instanceof n?e:n,a=Object.create(o.prototype),u=new h(i||[]);return a._invoke=s(t,r,u),a}function r(t,e,r){try{return {type:"normal",arg:t.call(e,r)}}catch(t){return {type:"throw",arg:t}}}function n(){}function i(){}function o(){}function a(t){["next","throw","return"].forEach((function(e){t[e]=function(t){return this._invoke(e,t)};}));}function u(t){function e(n,i,o,a){var u=r(t[n],t,i);if("throw"!==u.type){var s=u.arg,f=s.value;return f&&"object"==typeof f&&y.call(f,"__await")?Promise.resolve(f.__await).then((function(t){e("next",t,o,a);}),(function(t){e("throw",t,o,a);})):Promise.resolve(f).then((function(t){s.value=t,o(s);}),(function(t){return e("throw",t,o,a)}))}a(u.arg);}var n;this._invoke=function(t,r){function i(){return new Promise((function(n,i){e(t,r,n,i);}))}return n=n?n.then(i,i):i()};}function s(t,e,n){var i=E;return function(o,a){if(i===S)throw new Error("Generator is already running");if(i===k){if("throw"===o)throw a;return p()}for(n.method=o,n.arg=a;;){var u=n.delegate;if(u){var s=f(u,n);if(s){if(s===j)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(i===E)throw i=k,n.arg;n.dispatchException(n.arg);}else "return"===n.method&&n.abrupt("return",n.arg);i=S;var c=r(t,e,n);if("normal"===c.type){if(i=n.done?k:x,c.arg===j)continue;return {value:c.arg,done:n.done}}"throw"===c.type&&(i=k,n.method="throw",n.arg=c.arg);}}}function f(t,e){var n=t.iterator[e.method];if(n===b){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=b,f(t,e),"throw"===e.method))return j;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method");}return j}var i=r(n,t.iterator,e.arg);if("throw"===i.type)return e.method="throw",e.arg=i.arg,e.delegate=null,j;var o=i.arg;return o?o.done?(e[t.resultName]=o.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=b),e.delegate=null,j):o:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,j)}function c(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e);}function l(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e;}function h(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(c,this),this.reset(!0);}function d(t){if(t){var e=t[w];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var r=-1,n=function e(){for(;++r<t.length;)if(y.call(t,r))return e.value=t[r],e.done=!1,e;return e.value=b,e.done=!0,e};return n.next=n}}return {next:p}}function p(){return {value:b,done:!0}}var b,g=Object.prototype,y=g.hasOwnProperty,v="function"==typeof Symbol?Symbol:{},w=v.iterator||"@@iterator",m=v.asyncIterator||"@@asyncIterator",_=v.toStringTag||"@@toStringTag";t.wrap=e;var E="suspendedStart",x="suspendedYield",S="executing",k="completed",j={},T={};T[w]=function(){return this};var M=Object.getPrototypeOf,O=M&&M(M(d([])));O&&O!==g&&y.call(O,w)&&(T=O);var A=o.prototype=n.prototype=Object.create(T);return i.prototype=A.constructor=o,o.constructor=i,o[_]=i.displayName="GeneratorFunction",t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return !!e&&(e===i||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,o):(t.__proto__=o,_ in t||(t[_]="GeneratorFunction")),t.prototype=Object.create(A),t},t.awrap=function(t){return {__await:t}},a(u.prototype),u.prototype[m]=function(){return this},t.AsyncIterator=u,t.async=function(r,n,i,o){var a=new u(e(r,n,i,o));return t.isGeneratorFunction(n)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},a(A),A[_]="Generator",A[w]=function(){return this},A.toString=function(){return "[object Generator]"},t.keys=function(t){var e=[];for(var r in t)e.push(r);return e.reverse(),function r(){for(;e.length;){var n=e.pop();if(n in t)return r.value=n,r.done=!1,r}return r.done=!0,r}},t.values=d,h.prototype={constructor:h,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=b,this.done=!1,this.delegate=null,this.method="next",this.arg=b,this.tryEntries.forEach(l),!t)for(var e in this)"t"===e.charAt(0)&&y.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=b);},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){function e(e,n){return o.type="throw",o.arg=t,r.next=e,n&&(r.method="next",r.arg=b),!!n}if(this.done)throw t;for(var r=this,n=this.tryEntries.length-1;n>=0;--n){var i=this.tryEntries[n],o=i.completion;if("root"===i.tryLoc)return e("end");if(i.tryLoc<=this.prev){var a=y.call(i,"catchLoc"),u=y.call(i,"finallyLoc");if(a&&u){if(this.prev<i.catchLoc)return e(i.catchLoc,!0);if(this.prev<i.finallyLoc)return e(i.finallyLoc)}else if(a){if(this.prev<i.catchLoc)return e(i.catchLoc,!0)}else {if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return e(i.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var n=this.tryEntries[r];if(n.tryLoc<=this.prev&&y.call(n,"finallyLoc")&&this.prev<n.finallyLoc){var i=n;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var o=i?i.completion:{};return o.type=t,o.arg=e,i?(this.method="next",this.next=i.finallyLoc,j):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return "break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),j},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),l(r),j}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;l(r);}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:d(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=b),j}},t}(t.exports);try{regeneratorRuntime=n;}catch(t){Function("r","regeneratorRuntime = r")(n);}},function(t,e,r){function n(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=t.indexOf("=");return -1===r&&(r=e),[r,r===e?0:4-r%4]}function i(t){return a[t>>18&63]+a[t>>12&63]+a[t>>6&63]+a[63&t]}function o(t,e,r){for(var n,o=[],a=e;a<r;a+=3)n=(t[a]<<16&16711680)+(t[a+1]<<8&65280)+(255&t[a+2]),o.push(i(n));return o.join("")}e.byteLength=function(t){var e=n(t),r=e[0],i=e[1];return 3*(r+i)/4-i},e.toByteArray=function(t){var e,r,i=n(t),o=i[0],a=i[1],f=new s(function(t,e,r){return 3*(e+r)/4-r}(0,o,a)),c=0,l=a>0?o-4:o;for(r=0;r<l;r+=4)e=u[t.charCodeAt(r)]<<18|u[t.charCodeAt(r+1)]<<12|u[t.charCodeAt(r+2)]<<6|u[t.charCodeAt(r+3)],f[c++]=e>>16&255,f[c++]=e>>8&255,f[c++]=255&e;return 2===a&&(e=u[t.charCodeAt(r)]<<2|u[t.charCodeAt(r+1)]>>4,f[c++]=255&e),1===a&&(e=u[t.charCodeAt(r)]<<10|u[t.charCodeAt(r+1)]<<4|u[t.charCodeAt(r+2)]>>2,f[c++]=e>>8&255,f[c++]=255&e),f},e.fromByteArray=function(t){for(var e,r=t.length,n=r%3,i=[],u=0,s=r-n;u<s;u+=16383)i.push(o(t,u,u+16383>s?s:u+16383));return 1===n?(e=t[r-1],i.push(a[e>>2]+a[e<<4&63]+"==")):2===n&&(e=(t[r-2]<<8)+t[r-1],i.push(a[e>>10]+a[e>>4&63]+a[e<<2&63]+"=")),i.join("")};for(var a=[],u=[],s="undefined"!=typeof Uint8Array?Uint8Array:Array,f="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",c=0,l=f.length;c<l;++c)a[c]=f[c],u[f.charCodeAt(c)]=c;u["-".charCodeAt(0)]=62,u["_".charCodeAt(0)]=63;},function(t,e){e.read=function(t,e,r,n,i){var o,a,u=8*i-n-1,s=(1<<u)-1,f=s>>1,c=-7,l=r?i-1:0,h=r?-1:1,d=t[e+l];for(l+=h,o=d&(1<<-c)-1,d>>=-c,c+=u;c>0;o=256*o+t[e+l],l+=h,c-=8);for(a=o&(1<<-c)-1,o>>=-c,c+=n;c>0;a=256*a+t[e+l],l+=h,c-=8);if(0===o)o=1-f;else {if(o===s)return a?NaN:1/0*(d?-1:1);a+=Math.pow(2,n),o-=f;}return (d?-1:1)*a*Math.pow(2,o-n)},e.write=function(t,e,r,n,i,o){var a,u,s,f=8*o-i-1,c=(1<<f)-1,l=c>>1,h=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,d=n?0:o-1,p=n?1:-1,b=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(u=isNaN(e)?1:0,a=c):(a=Math.floor(Math.log(e)/Math.LN2),e*(s=Math.pow(2,-a))<1&&(a--,s*=2),(e+=a+l>=1?h/s:h*Math.pow(2,1-l))*s>=2&&(a++,s/=2),a+l>=c?(u=0,a=c):a+l>=1?(u=(e*s-1)*Math.pow(2,i),a+=l):(u=e*Math.pow(2,l-1)*Math.pow(2,i),a=0));i>=8;t[r+d]=255&u,d+=p,u/=256,i-=8);for(a=a<<i|u,f+=i;f>0;t[r+d]=255&a,d+=p,a/=256,f-=8);t[r+d-p]|=128*b;};},function(t,e,r){var n=r(19).Buffer,i=r(38),o=r(10),a=r(47),u=r(53),s=r(54);t.exports=function(t){var e=[],r=[];return {encode:s(e,(t=t||{forceFloat64:!1,compatibilityMode:!1,disableTimestampEncoding:!1,protoAction:"error"}).forceFloat64,t.compatibilityMode,t.disableTimestampEncoding),decode:u(r,t),register:function(t,e,r,a){return i(e,"must have a constructor"),i(r,"must have an encode function"),i(t>=0,"must have a non-negative type"),i(a,"must have a decode function"),this.registerEncoder((function(t){return t instanceof e}),(function(e){var i=o(),a=n.allocUnsafe(1);return a.writeInt8(t,0),i.append(a),i.append(r(e)),i})),this.registerDecoder(t,a),this},registerEncoder:function(t,r){return i(t,"must have an encode function"),i(r,"must have an encode function"),e.push({check:t,encode:r}),this},registerDecoder:function(t,e){return i(t>=0,"must have a non-negative type"),i(e,"must have a decode function"),r.push({type:t,decode:e}),this},encoder:a.encoder,decoder:a.decoder,buffer:!0,type:"msgpack5",IncompleteBufferError:u.IncompleteBufferError}};},function(t,e,r){function n(t,e){if(t===e)return 0;for(var r=t.length,n=e.length,i=0,o=Math.min(r,n);i<o;++i)if(t[i]!==e[i]){r=t[i],n=e[i];break}return r<n?-1:n<r?1:0}function i(t){return window.Buffer&&"function"==typeof window.Buffer.isBuffer?window.Buffer.isBuffer(t):!(null==t||!t._isBuffer)}function o(t){return Object.prototype.toString.call(t)}function a(t){return !i(t)&&"function"==typeof window.ArrayBuffer&&("function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(t):!!t&&(t instanceof DataView||!!(t.buffer&&t.buffer instanceof ArrayBuffer)))}function u(t){if(y.isFunction(t)){if(m)return t.name;var e=t.toString().match(E);return e&&e[1]}}function s(t,e){return "string"==typeof t?t.length<e?t:t.slice(0,e):t}function f(t){if(m||!y.isFunction(t))return y.inspect(t);var e=u(t);return "[Function"+(e?": "+e:"")+"]"}function c(t,e,r,n,i){throw new _.AssertionError({message:r,actual:t,expected:e,operator:n,stackStartFunction:i})}function l(t,e){t||c(t,!0,e,"==",_.ok);}function h(t,e,r,u){if(t===e)return !0;if(i(t)&&i(e))return 0===n(t,e);if(y.isDate(t)&&y.isDate(e))return t.getTime()===e.getTime();if(y.isRegExp(t)&&y.isRegExp(e))return t.source===e.source&&t.global===e.global&&t.multiline===e.multiline&&t.lastIndex===e.lastIndex&&t.ignoreCase===e.ignoreCase;if(null!==t&&"object"==typeof t||null!==e&&"object"==typeof e){if(a(t)&&a(e)&&o(t)===o(e)&&!(t instanceof Float32Array||t instanceof Float64Array))return 0===n(new Uint8Array(t.buffer),new Uint8Array(e.buffer));if(i(t)!==i(e))return !1;var s=(u=u||{actual:[],expected:[]}).actual.indexOf(t);return -1!==s&&s===u.expected.indexOf(e)||(u.actual.push(t),u.expected.push(e),function(t,e,r,n){if(null==t||null==e)return !1;if(y.isPrimitive(t)||y.isPrimitive(e))return t===e;if(r&&Object.getPrototypeOf(t)!==Object.getPrototypeOf(e))return !1;var i=d(t),o=d(e);if(i&&!o||!i&&o)return !1;if(i)return t=w.call(t),e=w.call(e),h(t,e,r);var a,u,s=x(t),f=x(e);if(s.length!==f.length)return !1;for(s.sort(),f.sort(),u=s.length-1;u>=0;u--)if(s[u]!==f[u])return !1;for(u=s.length-1;u>=0;u--)if(a=s[u],!h(t[a],e[a],r,n))return !1;return !0}(t,e,r,u))}return r?t===e:t==e}function d(t){return "[object Arguments]"==Object.prototype.toString.call(t)}function p(t,e){if(!t||!e)return !1;if("[object RegExp]"==Object.prototype.toString.call(e))return e.test(t);try{if(t instanceof e)return !0}catch(t){}return !Error.isPrototypeOf(e)&&!0===e.call({},t)}function b(t,e,r,n){var i;if("function"!=typeof e)throw new TypeError('"block" argument must be a function');"string"==typeof r&&(n=r,r=null),i=function(t){var e;try{t();}catch(t){e=t;}return e}(e),n=(r&&r.name?" ("+r.name+").":".")+(n?" "+n:"."),t&&!i&&c(i,r,"Missing expected exception"+n);var o="string"==typeof n,a=!t&&i&&!r;if((!t&&y.isError(i)&&o&&p(i,r)||a)&&c(i,r,"Got unwanted exception"+n),t&&i&&r&&!p(i,r)||!t&&i)throw i}var g=r(39),y=r(16),v=Object.prototype.hasOwnProperty,w=Array.prototype.slice,m="foo"===function(){}.name,_=t.exports=l,E=/\s*function\s+([^\(\s]*)\s*/;_.AssertionError=function(t){this.name="AssertionError",this.actual=t.actual,this.expected=t.expected,this.operator=t.operator,t.message?(this.message=t.message,this.generatedMessage=!1):(this.message=function(t){return s(f(t.actual),128)+" "+t.operator+" "+s(f(t.expected),128)}(this),this.generatedMessage=!0);var e=t.stackStartFunction||c;if(Error.captureStackTrace)Error.captureStackTrace(this,e);else {var r=new Error;if(r.stack){var n=r.stack,i=u(e),o=n.indexOf("\n"+i);if(o>=0){var a=n.indexOf("\n",o+1);n=n.substring(a+1);}this.stack=n;}}},y.inherits(_.AssertionError,Error),_.fail=c,_.ok=l,_.equal=function(t,e,r){t!=e&&c(t,e,r,"==",_.equal);},_.notEqual=function(t,e,r){t==e&&c(t,e,r,"!=",_.notEqual);},_.deepEqual=function(t,e,r){h(t,e,!1)||c(t,e,r,"deepEqual",_.deepEqual);},_.deepStrictEqual=function(t,e,r){h(t,e,!0)||c(t,e,r,"deepStrictEqual",_.deepStrictEqual);},_.notDeepEqual=function(t,e,r){h(t,e,!1)&&c(t,e,r,"notDeepEqual",_.notDeepEqual);},_.notDeepStrictEqual=function t(e,r,n){h(e,r,!0)&&c(e,r,n,"notDeepStrictEqual",t);},_.strictEqual=function(t,e,r){t!==e&&c(t,e,r,"===",_.strictEqual);},_.notStrictEqual=function(t,e,r){t===e&&c(t,e,r,"!==",_.notStrictEqual);},_.throws=function(t,e,r){b(!0,t,e,r);},_.doesNotThrow=function(t,e,r){b(!1,t,e,r);},_.ifError=function(t){if(t)throw t},_.strict=g((function t(e,r){e||c(e,!0,r,"==",t);}),_,{equal:_.strictEqual,deepEqual:_.deepStrictEqual,notEqual:_.notStrictEqual,notDeepEqual:_.notDeepStrictEqual}),_.strict.strict=_.strict;var x=Object.keys||function(t){var e=[];for(var r in t)v.call(t,r)&&e.push(r);return e};},function(t,e,r){function n(t){if(null==t)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(t)}var i=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;t.exports=function(){try{if(!Object.assign)return !1;var t=new String("abc");if(t[5]="de","5"===Object.getOwnPropertyNames(t)[0])return !1;for(var e={},r=0;r<10;r++)e["_"+String.fromCharCode(r)]=r;if("0123456789"!==Object.getOwnPropertyNames(e).map((function(t){return e[t]})).join(""))return !1;var n={};return "abcdefghijklmnopqrst".split("").forEach((function(t){n[t]=t;})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},n)).join("")}catch(t){return !1}}()?Object.assign:function(t,e){for(var r,u,s=n(t),f=1;f<arguments.length;f++){for(var c in r=Object(arguments[f]))o.call(r,c)&&(s[c]=r[c]);if(i){u=i(r);for(var l=0;l<u.length;l++)a.call(r,u[l])&&(s[u[l]]=r[u[l]]);}}return s};},function(t,e){t.exports=function(t){return t&&"object"==typeof t&&"function"==typeof t.copy&&"function"==typeof t.fill&&"function"==typeof t.readUInt8};},function(t,e,r){(e=t.exports=r(20)).Stream=e,e.Readable=e,e.Writable=r(23),e.Duplex=r(7),e.Transform=r(25),e.PassThrough=r(46);},function(t,e){},function(t,e,r){function n(t,e,r){t.copy(e,r);}var i=r(9).Buffer,o=r(44);t.exports=function(){function t(){((function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}))(this,t),this.head=null,this.tail=null,this.length=0;}return t.prototype.push=function(t){var e={data:t,next:null};this.length>0?this.tail.next=e:this.head=e,this.tail=e,++this.length;},t.prototype.unshift=function(t){var e={data:t,next:this.head};0===this.length&&(this.tail=e),this.head=e,++this.length;},t.prototype.shift=function(){if(0!==this.length){var t=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,t}},t.prototype.clear=function(){this.head=this.tail=null,this.length=0;},t.prototype.join=function(t){if(0===this.length)return "";for(var e=this.head,r=""+e.data;e=e.next;)r+=t+e.data;return r},t.prototype.concat=function(t){if(0===this.length)return i.alloc(0);if(1===this.length)return this.head.data;for(var e=i.allocUnsafe(t>>>0),r=this.head,o=0;r;)n(r.data,e,o),o+=r.data.length,r=r.next;return e},t}(),o&&o.inspect&&o.inspect.custom&&(t.exports.prototype[o.inspect.custom]=function(){var t=o.inspect({length:this.length});return this.constructor.name+" "+t});},function(t,e){},function(t,e,r){(function(t){!function(e,r){function n(t){delete u[t];}function i(t){if(s)setTimeout(i,0,t);else {var e=u[t];if(e){s=!0;try{!function(t){var e=t.callback,r=t.args;switch(r.length){case 0:e();break;case 1:e(r[0]);break;case 2:e(r[0],r[1]);break;case 3:e(r[0],r[1],r[2]);break;default:e.apply(void 0,r);}}(e);}finally{n(t),s=!1;}}}}if(!e.setImmediate){var o,a=1,u={},s=!1,f=e.document,c=Object.getPrototypeOf&&Object.getPrototypeOf(e);c=c&&c.setTimeout?c:e,"[object process]"==={}.toString.call(e.process)?o=function(e){t.nextTick((function(){i(e);}));}:function(){if(e.postMessage&&!e.importScripts){var t=!0,r=e.onmessage;return e.onmessage=function(){t=!1;},e.postMessage("","*"),e.onmessage=r,t}}()?function(){var t="setImmediate$"+Math.random()+"$",r=function(r){r.source===e&&"string"==typeof r.data&&0===r.data.indexOf(t)&&i(+r.data.slice(t.length));};e.addEventListener?e.addEventListener("message",r,!1):e.attachEvent("onmessage",r),o=function(r){e.postMessage(t+r,"*");};}():e.MessageChannel?function(){var t=new MessageChannel;t.port1.onmessage=function(t){i(t.data);},o=function(e){t.port2.postMessage(e);};}():f&&"onreadystatechange"in f.createElement("script")?function(){var t=f.documentElement;o=function(e){var r=f.createElement("script");r.onreadystatechange=function(){i(e),r.onreadystatechange=null,t.removeChild(r),r=null;},t.appendChild(r);};}():o=function(t){setTimeout(i,0,t);},c.setImmediate=function(t){"function"!=typeof t&&(t=new Function(""+t));for(var e=new Array(arguments.length-1),r=0;r<e.length;r++)e[r]=arguments[r+1];var n={callback:t,args:e};return u[a]=n,o(a),a++},c.clearImmediate=n;}}("undefined"==typeof self?"undefined"==typeof window?this:window:self);}).call(this,r(6));},function(t,e,r){function n(t){if(!(this instanceof n))return new n(t);i.call(this,t);}t.exports=n;var i=r(25),o=Object.create(r(4));o.inherits=r(3),o.inherits(n,i),n.prototype._transform=function(t,e,r){r(null,t);};},function(t,e,r){function n(t){(t=t||{}).objectMode=!0,t.highWaterMark=16,a.call(this,t),this._msgpack=t.msgpack;}function i(t){if(!(this instanceof i))return (t=t||{}).msgpack=this,new i(t);n.call(this,t),this._wrap="wrap"in t&&t.wrap;}function o(t){if(!(this instanceof o))return (t=t||{}).msgpack=this,new o(t);n.call(this,t),this._chunks=s(),this._wrap="wrap"in t&&t.wrap;}var a=r(48).Transform,u=r(3),s=r(10);u(n,a),u(i,n),i.prototype._transform=function(t,e,r){var n=null;try{n=this._msgpack.encode(this._wrap?t.value:t).slice(0);}catch(t){return this.emit("error",t),r()}this.push(n),r();},u(o,n),o.prototype._transform=function(t,e,r){t&&this._chunks.append(t);try{var n=this._msgpack.decode(this._chunks);this._wrap&&(n={value:n}),this.push(n);}catch(t){return void(t instanceof this._msgpack.IncompleteBufferError?r():this.emit("error",t))}this._chunks.length>0?this._transform(null,e,r):r();},t.exports.decoder=o,t.exports.encoder=i;},function(t,e,r){(e=t.exports=r(26)).Stream=e,e.Readable=e,e.Writable=r(29),e.Duplex=r(8),e.Transform=r(30),e.PassThrough=r(52);},function(t,e){},function(t,e,r){function n(t,e,r){t.copy(e,r);}var i=r(18).Buffer,o=r(51);t.exports=function(){function t(){((function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}))(this,t),this.head=null,this.tail=null,this.length=0;}return t.prototype.push=function(t){var e={data:t,next:null};this.length>0?this.tail.next=e:this.head=e,this.tail=e,++this.length;},t.prototype.unshift=function(t){var e={data:t,next:this.head};0===this.length&&(this.tail=e),this.head=e,++this.length;},t.prototype.shift=function(){if(0!==this.length){var t=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,t}},t.prototype.clear=function(){this.head=this.tail=null,this.length=0;},t.prototype.join=function(t){if(0===this.length)return "";for(var e=this.head,r=""+e.data;e=e.next;)r+=t+e.data;return r},t.prototype.concat=function(t){if(0===this.length)return i.alloc(0);if(1===this.length)return this.head.data;for(var e=i.allocUnsafe(t>>>0),r=this.head,o=0;r;)n(r.data,e,o),o+=r.data.length,r=r.next;return e},t}(),o&&o.inspect&&o.inspect.custom&&(t.exports.prototype[o.inspect.custom]=function(){var t=o.inspect({length:this.length});return this.constructor.name+" "+t});},function(t,e){},function(t,e,r){function n(t){if(!(this instanceof n))return new n(t);i.call(this,t);}t.exports=n;var i=r(30),o=Object.create(r(4));o.inherits=r(3),o.inherits(n,i),n.prototype._transform=function(t,e,r){r(null,t);};},function(t,e,r){function n(t){Error.call(this),Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor),this.name=this.constructor.name,this.message=t||"unable to decode";}var i=r(10);r(16).inherits(n,Error),t.exports=function(t,e){function r(t,e){var r=function(t){switch(t){case 196:return 2;case 197:return 3;case 198:return 5;case 199:return 3;case 200:return 4;case 201:return 6;case 202:return 5;case 203:return 9;case 204:return 2;case 205:return 3;case 206:return 5;case 207:return 9;case 208:return 2;case 209:return 3;case 210:return 5;case 211:return 9;case 212:return 3;case 213:return 4;case 214:return 6;case 215:return 10;case 216:return 18;case 217:return 2;case 218:return 3;case 219:return 5;case 222:return 3;default:return -1}}(t);return !(-1!==r&&e<r)}function o(t,e,r){return e>=r+t}function a(t,e){return {value:t,bytesConsumed:e}}function u(t,e){e=void 0===e?0:e;var n=t.length-e;if(n<=0)return null;var i,u,h,d=t.readUInt8(e),p=0;if(!r(d,n))return null;switch(d){case 192:return a(null,1);case 194:return a(!1,1);case 195:return a(!0,1);case 204:return a(p=t.readUInt8(e+1),2);case 205:return a(p=t.readUInt16BE(e+1),3);case 206:return a(p=t.readUInt32BE(e+1),5);case 207:for(h=7;h>=0;h--)p+=t.readUInt8(e+h+1)*Math.pow(2,8*(7-h));return a(p,9);case 208:return a(p=t.readInt8(e+1),2);case 209:return a(p=t.readInt16BE(e+1),3);case 210:return a(p=t.readInt32BE(e+1),5);case 211:return a(p=function(t,e){var r=128==(128&t[e]);if(r)for(var n=1,i=e+7;i>=e;i--){var o=(255^t[i])+n;t[i]=255&o,n=o>>8;}return (4294967296*t.readUInt32BE(e+0)+t.readUInt32BE(e+4))*(r?-1:1)}(t.slice(e+1,e+9),0),9);case 202:return a(p=t.readFloatBE(e+1),5);case 203:return a(p=t.readDoubleBE(e+1),9);case 217:return o(i=t.readUInt8(e+1),n,2)?a(p=t.toString("utf8",e+2,e+2+i),2+i):null;case 218:return o(i=t.readUInt16BE(e+1),n,3)?a(p=t.toString("utf8",e+3,e+3+i),3+i):null;case 219:return o(i=t.readUInt32BE(e+1),n,5)?a(p=t.toString("utf8",e+5,e+5+i),5+i):null;case 196:return o(i=t.readUInt8(e+1),n,2)?a(p=t.slice(e+2,e+2+i),2+i):null;case 197:return o(i=t.readUInt16BE(e+1),n,3)?a(p=t.slice(e+3,e+3+i),3+i):null;case 198:return o(i=t.readUInt32BE(e+1),n,5)?a(p=t.slice(e+5,e+5+i),5+i):null;case 220:return n<3?null:(i=t.readUInt16BE(e+1),s(t,e,i,3));case 221:return n<5?null:(i=t.readUInt32BE(e+1),s(t,e,i,5));case 222:return i=t.readUInt16BE(e+1),f(t,e,i,3);case 223:return i=t.readUInt32BE(e+1),f(t,e,i,5);case 212:return c(t,e,1);case 213:return c(t,e,2);case 214:return c(t,e,4);case 215:return c(t,e,8);case 216:return c(t,e,16);case 199:return i=t.readUInt8(e+1),u=t.readUInt8(e+2),o(i,n,3)?l(t,e,u,i,3):null;case 200:return i=t.readUInt16BE(e+1),u=t.readUInt8(e+3),o(i,n,4)?l(t,e,u,i,4):null;case 201:return i=t.readUInt32BE(e+1),u=t.readUInt8(e+5),o(i,n,6)?l(t,e,u,i,6):null}if(144==(240&d))return s(t,e,i=15&d,1);if(128==(240&d))return f(t,e,i=15&d,1);if(160==(224&d))return o(i=31&d,n,1)?a(p=t.toString("utf8",e+1,e+i+1),i+1):null;if(d>=224)return a(p=d-256,1);if(d<128)return a(d,1);throw new Error("not implemented yet")}function s(t,e,r,n){var i,o=[],s=0;for(e+=n,i=0;i<r;i++){var f=u(t,e);if(!f)return null;o.push(f.value),e+=f.bytesConsumed,s+=f.bytesConsumed;}return a(o,n+s)}function f(t,r,n,i){var o,s,f={},c=0;for(r+=i,s=0;s<n;s++){var l=u(t,r);if(!l)return null;var h=u(t,r+=l.bytesConsumed);if(!h)return null;if("__proto__"===(o=l.value)){if("error"===e.protoAction)throw new SyntaxError("Object contains forbidden prototype property");if("remove"===e.protoAction)continue}f[o]=h.value,r+=h.bytesConsumed,c+=l.bytesConsumed+h.bytesConsumed;}return a(f,i+c)}function c(t,e,r){return l(t,e,t.readInt8(e+1),r,2)}function l(e,r,n,i,o){var u,s;if(r+=o,n<0)switch(n){case-1:return function(t,e,r){var n,i=0;switch(e){case 4:n=t.readUInt32BE(0);break;case 8:var o=t.readUInt32BE(0),u=t.readUInt32BE(4);i=o/4,n=(3&o)*Math.pow(2,32)+u;break;case 12:throw new Error("timestamp 96 is not yet implemented")}var s=1e3*n+Math.round(i/1e6);return a(new Date(s),e+r)}(s=e.slice(r,r+i),i,o)}for(u=0;u<t.length;u++)if(n===t[u].type){return s=e.slice(r,r+i),a(t[u].decode(s),o+i)}throw new Error("unable to find ext type "+n)}return function(t){t instanceof i||(t=i().append(t));var e=u(t);if(e)return t.consume(e.bytesConsumed),e.value;throw new n}},t.exports.IncompleteBufferError=n;},function(t,e,r){function n(t,e){var r,n=!0;return Math.fround&&(n=Math.fround(t)!==t),e&&(n=!0),n?((r=i.allocUnsafe(9))[0]=203,r.writeDoubleBE(t,1)):((r=i.allocUnsafe(5))[0]=202,r.writeFloatBE(t,1)),r}var i=r(19).Buffer,o=r(10);t.exports=function(t,e,r,a){function u(t,f){var c,l;if(void 0===t)throw new Error("undefined is not encodable in msgpack!");if(function(t){return t!=t&&"number"==typeof t}(t))throw new Error("NaN is not encodable in msgpack!");if(null===t)(c=i.allocUnsafe(1))[0]=192;else if(!0===t)(c=i.allocUnsafe(1))[0]=195;else if(!1===t)(c=i.allocUnsafe(1))[0]=194;else if("string"==typeof t)(l=i.byteLength(t))<32?((c=i.allocUnsafe(1+l))[0]=160|l,l>0&&c.write(t,1)):l<=255&&!r?((c=i.allocUnsafe(2+l))[0]=217,c[1]=l,c.write(t,2)):l<=65535?((c=i.allocUnsafe(3+l))[0]=218,c.writeUInt16BE(l,1),c.write(t,3)):((c=i.allocUnsafe(5+l))[0]=219,c.writeUInt32BE(l,1),c.write(t,5));else if(t&&(t.readUInt32LE||t instanceof Uint8Array))t instanceof Uint8Array&&(t=i.from(t)),t.length<=255?((c=i.allocUnsafe(2))[0]=196,c[1]=t.length):t.length<=65535?((c=i.allocUnsafe(3))[0]=197,c.writeUInt16BE(t.length,1)):((c=i.allocUnsafe(5))[0]=198,c.writeUInt32BE(t.length,1)),c=o([c,t]);else if(Array.isArray(t))t.length<16?(c=i.allocUnsafe(1))[0]=144|t.length:t.length<65536?((c=i.allocUnsafe(3))[0]=220,c.writeUInt16BE(t.length,1)):((c=i.allocUnsafe(5))[0]=221,c.writeUInt32BE(t.length,1)),c=t.reduce((function(t,e){return t.append(u(e,!0)),t}),o().append(c));else {if(!a&&"function"==typeof t.getDate)return function(t){var e,r=1*t,n=Math.floor(r/1e3),a=1e6*(r-1e3*n);if(a||n>4294967295){(e=i.allocUnsafe(10))[0]=215,e[1]=-1;var u=4*a,s=n/Math.pow(2,32),f=u+s&4294967295,c=4294967295&n;e.writeInt32BE(f,2),e.writeInt32BE(c,6);}else (e=i.allocUnsafe(6))[0]=214,e[1]=-1,e.writeUInt32BE(Math.floor(r/1e3),2);return o().append(e)}(t);if("object"==typeof t)c=s(t)||function(t){var e,r,n=[],a=0;for(e in t)t.hasOwnProperty(e)&&void 0!==t[e]&&"function"!=typeof t[e]&&(++a,n.push(u(e,!0)),n.push(u(t[e],!0)));return a<16?(r=i.allocUnsafe(1))[0]=128|a:a<65535?((r=i.allocUnsafe(3))[0]=222,r.writeUInt16BE(a,1)):((r=i.allocUnsafe(5))[0]=223,r.writeUInt32BE(a,1)),n.unshift(r),n.reduce((function(t,e){return t.append(e)}),o())}(t);else if("number"==typeof t){if(function(t){return t%1!=0}(t))return n(t,e);if(t>=0)if(t<128)(c=i.allocUnsafe(1))[0]=t;else if(t<256)(c=i.allocUnsafe(2))[0]=204,c[1]=t;else if(t<65536)(c=i.allocUnsafe(3))[0]=205,c.writeUInt16BE(t,1);else if(t<=4294967295)(c=i.allocUnsafe(5))[0]=206,c.writeUInt32BE(t,1);else {if(!(t<=9007199254740991))return n(t,!0);(c=i.allocUnsafe(9))[0]=207,function(t,e){for(var r=7;r>=0;r--)t[r+1]=255&e,e/=256;}(c,t);}else if(t>=-32)(c=i.allocUnsafe(1))[0]=256+t;else if(t>=-128)(c=i.allocUnsafe(2))[0]=208,c.writeInt8(t,1);else if(t>=-32768)(c=i.allocUnsafe(3))[0]=209,c.writeInt16BE(t,1);else if(t>-214748365)(c=i.allocUnsafe(5))[0]=210,c.writeInt32BE(t,1);else {if(!(t>=-9007199254740991))return n(t,!0);(c=i.allocUnsafe(9))[0]=211,function(t,e,r){var n=r<0;n&&(r=Math.abs(r));var i=r%4294967296,o=r/4294967296;if(t.writeUInt32BE(Math.floor(o),e+0),t.writeUInt32BE(i,e+4),n)for(var a=1,u=e+7;u>=e;u--){var s=(255^t[u])+a;t[u]=255&s,a=s>>8;}}(c,1,t);}}}if(!c)throw new Error("not implemented yet");return f?c:c.slice()}function s(e){var r,n,a=-1,u=[];for(r=0;r<t.length;r++)if(t[r].check(e)){n=t[r].encode(e);break}return n?(1===(a=n.length-1)?u.push(212):2===a?u.push(213):4===a?u.push(214):8===a?u.push(215):16===a?u.push(216):a<256?(u.push(199),u.push(a)):a<65536?(u.push(200),u.push(a>>8),u.push(255&a)):(u.push(201),u.push(a>>24),u.push(a>>16&255),u.push(a>>8&255),u.push(255&a)),o().append(i.from(u)).append(n)):null}return u};},function(t,e,r){t.exports=r(56);},function(t,e,r){(function(t){e.version="1.0.0",e.encode=function(t){return t.toString("base64").replace(/\+/g,"-").replace(/\//g,"_").replace(/=+$/,"")},e.decode=function(e){return e=(e+=Array(5-e.length%4).join("=")).replace(/\-/g,"+").replace(/\_/g,"/"),new t(e,"base64")},e.validate=function(t){return /^[A-Za-z0-9\-_]+$/.test(t)};}).call(this,r(5).Buffer);},function(t,e,r){(function(t){var e=function(){function r(t,e){postMessage({action:Ft,cbn:e,result:t});}function n(t){var e=[];return e[t-1]=void 0,e}function i(t,e){return u(t[0]+e[0],t[1]+e[1])}function o(t,e){return function(t,e){var r;return r=e,0>e&&(r+=Wt),[r,t*Wt]}(~~Math.max(Math.min(t[1]/Wt,2147483647),-2147483648)&~~Math.max(Math.min(e[1]/Wt,2147483647),-2147483648),c(t)&c(e))}function a(t,e){var r,n;return t[0]==e[0]&&t[1]==e[1]?0:(r=0>t[1],n=0>e[1],r&&!n?-1:!r&&n?1:p(t,e)[1]<0?-1:1)}function u(t,e){var r,n;for(t%=0x10000000000000000,e=(e%=0x10000000000000000)-(r=e%Wt)+(n=Math.floor(t/Wt)*Wt),t=t-n+r;0>t;)t+=Wt,e-=Wt;for(;t>4294967295;)t-=Wt,e+=Wt;for(e%=0x10000000000000000;e>0x7fffffff00000000;)e-=0x10000000000000000;for(;-0x8000000000000000>e;)e+=0x10000000000000000;return [t,e]}function s(t,e){return t[0]==e[0]&&t[1]==e[1]}function f(t){return t>=0?[t,0]:[t+Wt,-Wt]}function c(t){return t[0]>=2147483648?~~Math.max(Math.min(t[0]-Wt,2147483647),-2147483648):~~Math.max(Math.min(t[0],2147483647),-2147483648)}function l(t){return 30>=t?1<<t:l(30)*l(t-30)}function h(t,e){var r,n,i,o;if(e&=63,s(t,Gt))return e?Ht:t;if(0>t[1])throw Error("Neg");return o=l(e),n=t[1]*o%0x10000000000000000,(n+=r=(i=t[0]*o)-i%Wt)>=0x8000000000000000&&(n-=0x10000000000000000),[i-=r,n]}function d(t,e){var r;return r=l(e&=63),u(Math.floor(t[0]/r),t[1]/r)}function p(t,e){return u(t[0]-e[0],t[1]-e[1])}function b(t,e){return t.Mc=e,t.Lc=0,t.Yb=e.length,t}function g(t){return t.Lc>=t.Yb?-1:255&t.Mc[t.Lc++]}function y(t,e,r,n){return t.Lc>=t.Yb?-1:(n=Math.min(n,t.Yb-t.Lc),E(t.Mc,t.Lc,e,r,n),t.Lc+=n,n)}function v(t){return t.Mc=n(32),t.Yb=0,t}function w(t){var e=t.Mc;return e.length=t.Yb,e}function m(t,e){t.Mc[t.Yb++]=e<<24>>24;}function _(t,e,r,n){E(e,r,t.Mc,t.Yb,n),t.Yb+=n;}function E(t,e,r,n,i){for(var o=0;i>o;++o)r[n+o]=t[e+o];}function x(t,r,n,i,o){var u,s;if(a(i,Yt)<0)throw Error("invalid length "+i);for(t.Tb=i,function(t,e){((function(t,e){t.ab=e;for(var r=0;e>1<<r;++r);t.$b=2*r;}))(e,1<<t.s),e.n=t.f,function(t,e){var r=t.X;t.X=e,t.b&&r!=t.X&&(t.wb=-1,t.b=null);}(e,t.m),e.eb=0,e.fb=3,e.Y=2,e.y=3;}(o,u=$({})),u.Gc=void 0===e.disableEndMark,function(t,e){t.fc[0]=9*(5*t.Y+t.eb)+t.fb<<24>>24;for(var r=0;4>r;++r)t.fc[1+r]=t.ab>>8*r<<24>>24;_(e,t.fc,0,5);}(u,n),s=0;64>s;s+=8)m(n,255&c(d(i,s)));t.yb=(u.W=0,u.oc=r,u.pc=0,function(t){var e,r;t.b||(e={},r=4,t.X||(r=2),function(t,e){t.qb=e>2,t.qb?(t.w=0,t.xb=4,t.R=66560):(t.w=2,t.xb=3,t.R=0);}(e,r),t.b=e),dt(t.A,t.eb,t.fb),(t.ab!=t.wb||t.Hb!=t.n)&&(B(t.b,t.ab,4096,t.n,274),t.wb=t.ab,t.Hb=t.n);}(u),u.d.Ab=n,function(t){((function(t){t.l=0,t.J=0;for(var e=0;4>e;++e)t.v[e]=0;}))(t),function(t){t.mc=Ht,t.xc=Ht,t.E=-1,t.Jb=1,t.Oc=0;}(t.d),At(t.C),At(t._),At(t.bb),At(t.hb),At(t.Ub),At(t.vc),At(t.Sb),function(t){var e,r=1<<t.u+t.I;for(e=0;r>e;++e)At(t.V[e].tb);}(t.A);for(var e=0;4>e;++e)At(t.K[e].G);ut(t.$,1<<t.Y),ut(t.i,1<<t.Y),At(t.S.G),t.N=0,t.jb=0,t.q=0,t.s=0;}(u),K(u),Q(u),u.$.rb=u.n+1-2,ht(u.$,1<<u.Y),u.i.rb=u.n+1-2,ht(u.i,1<<u.Y),u.g=Ht,function(t,e){return t.cb=e,t.Z=null,t.zc=1,t}({},u));}function S(t,e,r){return t.Nb=v({}),x(t,b({},e),t.Nb,f(e.length),r),t}function k(t,e,r){var n,i,o,a,u="",s=[];for(i=0;5>i;++i){if(-1==(o=g(e)))throw Error("truncated input");s[i]=o<<24>>24;}if(!function(t,e){var r,n,i,o,a,u,s;if(5>e.length)return 0;for(s=255&e[0],i=s%9,o=(u=~~(s/9))%5,a=~~(u/5),r=0,n=0;4>n;++n)r+=(255&e[1+n])<<8*n;return r>99999999||!function(t,e,r,n){if(e>8||r>4||n>4)return 0;J(t.gb,r,e);var i=1<<n;return W(t.Rb,i),W(t.sb,i),t.Dc=i-1,1}(t,i,o,a)?0:function(t,e){return 0>e?0:(t.Ob!=e&&(t.Ob=e,t.nb=Math.max(t.Ob,1),C(t.B,Math.max(t.nb,4096))),1)}(t,r)}(n=z({}),s))throw Error("corrupted input");for(i=0;64>i;i+=8){if(-1==(o=g(e)))throw Error("truncated input");1==(o=o.toString(16)).length&&(o="0"+o),u=o+""+u;}/^0+$|^f+$/i.test(u)?t.Tb=Yt:(a=parseInt(u,16),t.Tb=a>4294967295?Yt:f(a)),t.yb=function(t,e,r,n){return t.e.Ab=e,D(t.B),t.B.cc=r,function(t){t.B.h=0,t.B.o=0,At(t.Gb),At(t.pb),At(t.Zb),At(t.Cb),At(t.Db),At(t.Eb),At(t.kc),function(t){var e,r;for(r=1<<t.u+t.I,e=0;r>e;++e)At(t.V[e].Ib);}(t.gb);for(var e=0;4>e;++e)At(t.kb[e].G);H(t.Rb),H(t.sb),At(t.Fb.G),function(t){t.Bb=0,t.E=-1;for(var e=0;5>e;++e)t.Bb=t.Bb<<8|g(t.Ab);}(t.e);}(t),t.U=0,t.ib=0,t.Jc=0,t.Ic=0,t.Qc=0,t.Nc=n,t.g=Ht,t.jc=0,function(t,e){return t.Z=e,t.cb=null,t.zc=1,t}({},t)}(n,e,r,t.Tb);}function j(t,e){return t.Nb=v({}),k(t,b({},e),t.Nb),t}function T(t,e){return t.c[t.f+t.o+e]}function M(t,e,r,n){var i,o;for(t.T&&t.o+e+n>t.h&&(n=t.h-(t.o+e)),++r,o=t.f+t.o+e,i=0;n>i&&t.c[o+i]==t.c[o+i-r];++i);return i}function O(t){return t.h-t.o}function A(t){var e,r;if(!t.T)for(;;){if(!(r=-t.f+t.Kb-t.h))return;if(-1==(e=y(t.cc,t.c,t.f+t.h,r)))return t.zb=t.h,t.f+t.zb>t.H&&(t.zb=t.H-t.f),void(t.T=1);t.h+=e,t.h>=t.o+t._b&&(t.zb=t.h-t._b);}}function R(t,e){t.f+=e,t.zb-=e,t.o-=e,t.h-=e;}function B(t,e,r,i,o){var a,u;1073741567>e&&(t.Fc=16+(i>>1),function(t,e,r,i){var o;t.Bc=e,t._b=r,o=e+r+i,(null==t.c||t.Kb!=o)&&(t.c=null,t.Kb=o,t.c=n(t.Kb)),t.H=t.Kb-r;}(t,e+r,i+o,256+~~((e+r+i+o)/2)),t.ob=i,a=e+1,t.p!=a&&(t.L=n(2*(t.p=a))),u=65536,t.qb&&(u=e-1,u|=u>>1,u|=u>>2,u|=u>>4,u|=u>>8,u>>=1,(u|=65535)>16777216&&(u>>=1),t.Ec=u,++u,u+=t.R),u!=t.rc&&(t.ub=n(t.rc=u)));}function U(t){var e;++t.k>=t.p&&(t.k=0),function(t){++t.o>t.zb&&(t.f+t.o>t.H&&function(t){var e,r,n;for((n=t.f+t.o-t.Bc)>0&&--n,r=t.f+t.h-n,e=0;r>e;++e)t.c[e]=t.c[n+e];t.f-=n;}(t),A(t));}(t),1073741823==t.o&&(e=t.o-t.p,L(t.L,2*t.p,e),L(t.ub,t.rc,e),R(t,e));}function L(t,e,r){var n,i;for(n=0;e>n;++n)r>=(i=t[n]||0)?i=0:i-=r,t[n]=i;}function C(t,e){(null==t.Lb||t.M!=e)&&(t.Lb=n(e)),t.M=e,t.o=0,t.h=0;}function I(t){var e=t.o-t.h;e&&(_(t.cc,t.Lb,t.h,e),t.o>=t.M&&(t.o=0),t.h=t.o);}function P(t,e){var r=t.o-e-1;return 0>r&&(r+=t.M),t.Lb[r]}function D(t){I(t),t.cc=null;}function N(t){return 4>(t-=2)?t:3}function q(t){return 4>t?0:10>t?t-3:t-6}function F(t){if(!t.zc)throw Error("bad state");return t.cb?function(t){((function(t,e,r,n){var o,u,l,h,d,b,g,y,v,w,m,_,E,x,S;if(e[0]=Ht,r[0]=Ht,n[0]=1,t.oc&&(t.b.cc=t.oc,function(t){t.f=0,t.o=0,t.h=0,t.T=0,A(t),t.k=0,R(t,-1);}(t.b),t.W=1,t.oc=null),!t.pc){if(t.pc=1,x=t.g,s(t.g,Ht)){if(!O(t.b))return void X(t,c(t.g));it(t),E=c(t.g)&t.y,Rt(t.d,t.C,(t.l<<4)+E,0),t.l=q(t.l),l=T(t.b,-t.s),bt(pt(t.A,c(t.g),t.J),t.d,l),t.J=l,--t.s,t.g=i(t.g,Jt);}if(!O(t.b))return void X(t,c(t.g));for(;;){if(g=tt(t,c(t.g)),w=t.mb,E=c(t.g)&t.y,u=(t.l<<4)+E,1==g&&-1==w)Rt(t.d,t.C,u,0),l=T(t.b,-t.s),S=pt(t.A,c(t.g),t.J),7>t.l?bt(S,t.d,l):(v=T(t.b,-t.v[0]-1-t.s),gt(S,t.d,v,l)),t.J=l,t.l=q(t.l);else {if(Rt(t.d,t.C,u,1),4>w){if(Rt(t.d,t.bb,t.l,1),w?(Rt(t.d,t.hb,t.l,1),1==w?Rt(t.d,t.Ub,t.l,0):(Rt(t.d,t.Ub,t.l,1),Rt(t.d,t.vc,t.l,w-2))):(Rt(t.d,t.hb,t.l,0),Rt(t.d,t._,u,1==g?0:1)),1==g?t.l=7>t.l?9:11:(ft(t.i,t.d,g-2,E),t.l=7>t.l?8:11),h=t.v[w],0!=w){for(b=w;b>=1;--b)t.v[b]=t.v[b-1];t.v[0]=h;}}else {for(Rt(t.d,t.bb,t.l,0),t.l=7>t.l?7:10,ft(t.$,t.d,g-2,E),_=at(w-=4),y=N(g),xt(t.K[y],t.d,_),_>=4&&(m=w-(o=(2|1&_)<<(d=(_>>1)-1)),14>_?Tt(t.Sb,o-_-1,t.d,d,m):(Bt(t.d,m>>4,d-4),kt(t.S,t.d,15&m),++t.Qb)),h=w,b=3;b>=1;--b)t.v[b]=t.v[b-1];t.v[0]=h,++t.Mb;}t.J=T(t.b,g-1-t.s);}if(t.s-=g,t.g=i(t.g,f(g)),!t.s){if(t.Mb>=128&&K(t),t.Qb>=16&&Q(t),e[0]=t.g,r[0]=Ut(t.d),!O(t.b))return void X(t,c(t.g));if(a(p(t.g,x),[4096,0])>=0)return t.pc=0,void(n[0]=0)}}}}))(t.cb,t.cb.Xb,t.cb.uc,t.cb.Kc),t.Pb=t.cb.Xb[0],t.cb.Kc[0]&&(function(t){ot(t),t.d.Ab=null;}(t.cb),t.zc=0);}(t):function(t){var e=function(t){var e,r,n,o,u,s;if(s=c(t.g)&t.Dc,Ot(t.e,t.Gb,(t.U<<4)+s)){if(Ot(t.e,t.Zb,t.U))n=0,Ot(t.e,t.Cb,t.U)?(Ot(t.e,t.Db,t.U)?(Ot(t.e,t.Eb,t.U)?(r=t.Qc,t.Qc=t.Ic):r=t.Ic,t.Ic=t.Jc):r=t.Jc,t.Jc=t.ib,t.ib=r):Ot(t.e,t.pb,(t.U<<4)+s)||(t.U=7>t.U?9:11,n=1),n||(n=Y(t.sb,t.e,s)+2,t.U=7>t.U?8:11);else if(t.Qc=t.Ic,t.Ic=t.Jc,t.Jc=t.ib,n=2+Y(t.Rb,t.e,s),t.U=7>t.U?7:10,(u=_t(t.kb[N(n)],t.e))>=4){if(o=(u>>1)-1,t.ib=(2|1&u)<<o,14>u)t.ib+=function(t,e,r,n){var i,o,a=1,u=0;for(o=0;n>o;++o)i=Ot(r,t,e+a),a<<=1,a+=i,u|=i<<o;return u}(t.kc,t.ib-u-1,t.e,o);else if(t.ib+=function(t,e){var r,n,i=0;for(r=e;0!=r;--r)t.E>>>=1,n=t.Bb-t.E>>>31,t.Bb-=t.E&n-1,i=i<<1|1-n,-16777216&t.E||(t.Bb=t.Bb<<8|g(t.Ab),t.E<<=8);return i}(t.e,o-4)<<4,t.ib+=function(t,e){var r,n,i=1,o=0;for(n=0;t.F>n;++n)r=Ot(e,t.G,i),i<<=1,i+=r,o|=r<<n;return o}(t.Fb,t.e),0>t.ib)return -1==t.ib?1:-1}else t.ib=u;if(a(f(t.ib),t.g)>=0||t.ib>=t.nb)return -1;((function(t,e,r){var n=t.o-e-1;for(0>n&&(n+=t.M);0!=r;--r)n>=t.M&&(n=0),t.Lb[t.o++]=t.Lb[n++],t.o>=t.M&&I(t);}))(t.B,t.ib,n),t.g=i(t.g,f(n)),t.jc=P(t.B,0);}else e=function(t,e,r){return t.V[((e&t.qc)<<t.u)+((255&r)>>>8-t.u)]}(t.gb,c(t.g),t.jc),t.jc=7>t.U?function(t,e){var r=1;do{r=r<<1|Ot(e,t.Ib,r);}while(256>r);return r<<24>>24}(e,t.e):function(t,e,r){var n,i,o=1;do{if(i=r>>7&1,r<<=1,n=Ot(e,t.Ib,(1+i<<8)+o),o=o<<1|n,i!=n){for(;256>o;)o=o<<1|Ot(e,t.Ib,o);break}}while(256>o);return o<<24>>24}(e,t.e,P(t.B,t.ib)),function(t,e){t.Lb[t.o++]=e,t.o>=t.M&&I(t);}(t.B,t.jc),t.U=q(t.U),t.g=i(t.g,Jt);return 0}(t.Z);if(-1==e)throw Error("corrupted input");t.Pb=Yt,t.Pc=t.Z.g,(e||a(t.Z.Nc,Ht)>=0&&a(t.Z.g,t.Z.Nc)>=0)&&(I(t.Z.B),D(t.Z.B),t.Z.e.Ab=null,t.zc=0);}(t),t.zc}function z(t){t.B={},t.e={},t.Gb=n(192),t.Zb=n(12),t.Cb=n(12),t.Db=n(12),t.Eb=n(12),t.pb=n(192),t.kb=n(4),t.kc=n(114),t.Fb=mt({},4),t.Rb=G({}),t.sb=G({}),t.gb={};for(var e=0;4>e;++e)t.kb[e]=mt({},6);return t}function W(t,e){for(;e>t.O;++t.O)t.ec[t.O]=mt({},3),t.hc[t.O]=mt({},3);}function Y(t,e,r){return Ot(e,t.wc,0)?8+(Ot(e,t.wc,1)?8+_t(t.tc,e):_t(t.hc[r],e)):_t(t.ec[r],e)}function G(t){return t.wc=n(2),t.ec=n(16),t.hc=n(16),t.tc=mt({},8),t.O=0,t}function H(t){At(t.wc);for(var e=0;t.O>e;++e)At(t.ec[e].G),At(t.hc[e].G);At(t.tc.G);}function J(t,e,r){var i,o;if(null==t.V||t.u!=r||t.I!=e)for(t.I=e,t.qc=(1<<e)-1,t.u=r,o=1<<t.u+t.I,t.V=n(o),i=0;o>i;++i)t.V[i]=Z({});}function Z(t){return t.Ib=n(768),t}function V(t,e){var r,n,i,o;t.jb=e,i=t.a[e].r,n=t.a[e].j;do{t.a[e].t&&(wt(t.a[i]),t.a[i].r=i-1,t.a[e].Ac&&(t.a[i-1].t=0,t.a[i-1].r=t.a[e].r2,t.a[i-1].j=t.a[e].j2)),o=i,r=n,n=t.a[o].j,i=t.a[o].r,t.a[o].j=r,t.a[o].r=e,e=o;}while(e>0);return t.mb=t.a[0].j,t.q=t.a[0].r}function $(t){var e;for(t.v=n(4),t.a=[],t.d={},t.C=n(192),t.bb=n(12),t.hb=n(12),t.Ub=n(12),t.vc=n(12),t._=n(192),t.K=[],t.Sb=n(114),t.S=Et({},4),t.$=ct({}),t.i=ct({}),t.A={},t.m=[],t.P=[],t.lb=[],t.nc=n(16),t.x=n(4),t.Q=n(4),t.Xb=[Ht],t.uc=[Ht],t.Kc=[0],t.fc=n(5),t.yc=n(128),t.vb=0,t.X=1,t.D=0,t.Hb=-1,t.mb=0,e=0;4096>e;++e)t.a[e]={};for(e=0;4>e;++e)t.K[e]=Et({},6);return t}function Q(t){for(var e=0;16>e;++e)t.nc[e]=jt(t.S,e);t.Qb=0;}function K(t){var e,r,n,i,o,a,u,s;for(i=4;128>i;++i)e=(2|1&(a=at(i)))<<(n=(a>>1)-1),t.yc[i]=Mt(t.Sb,e-a-1,n,i-e);for(o=0;4>o;++o){for(r=t.K[o],u=o<<6,a=0;t.$b>a;++a)t.P[u+a]=St(r,a);for(a=14;t.$b>a;++a)t.P[u+a]+=(a>>1)-1-4<<6;for(s=128*o,i=0;4>i;++i)t.lb[s+i]=t.P[u+i];for(;128>i;++i)t.lb[s+i]=t.P[u+at(i)]+t.yc[i];}t.Mb=0;}function X(t,e){ot(t),function(t,e){if(t.Gc){Rt(t.d,t.C,(t.l<<4)+e,1),Rt(t.d,t.bb,t.l,0),t.l=7>t.l?7:10,ft(t.$,t.d,0,e);var r=N(2);xt(t.K[r],t.d,63),Bt(t.d,67108863,26),kt(t.S,t.d,15);}}(t,e&t.y);for(var r=0;5>r;++r)Lt(t.d);}function tt(t,e){var r,n,i,o,a,u,s,f,c,l,h,d,p,b,g,y,v,w,m,_,E,x,S,k,j,A,R,B,U,L,C,I,P,D,N,F,z,W,Y,G,H,J,Z,$;if(t.jb!=t.q)return p=t.a[t.q].r-t.q,t.mb=t.a[t.q].j,t.q=t.a[t.q].r,p;if(t.q=t.jb=0,t.N?(d=t.vb,t.N=0):d=it(t),A=t.D,2>(k=O(t.b)+1))return t.mb=-1,1;for(k>273&&(k=273),Y=0,c=0;4>c;++c)t.x[c]=t.v[c],t.Q[c]=M(t.b,-1,t.x[c],273),t.Q[c]>t.Q[Y]&&(Y=c);if(t.Q[Y]>=t.n)return t.mb=Y,nt(t,(p=t.Q[Y])-1),p;if(d>=t.n)return t.mb=t.m[A-1]+4,nt(t,d-1),d;if(s=T(t.b,-1),v=T(t.b,-t.v[0]-1-1),2>d&&s!=v&&2>t.Q[Y])return t.mb=-1,1;if(t.a[0].Hc=t.l,P=e&t.y,t.a[1].z=$t[t.C[(t.l<<4)+P]>>>2]+vt(pt(t.A,e,t.J),t.l>=7,v,s),wt(t.a[1]),W=(w=$t[2048-t.C[(t.l<<4)+P]>>>2])+$t[2048-t.bb[t.l]>>>2],v==s&&(G=W+function(t,e,r){return $t[t.hb[e]>>>2]+$t[t._[(e<<4)+r]>>>2]}(t,t.l,P),t.a[1].z>G&&(t.a[1].z=G,function(t){t.j=0,t.t=0;}(t.a[1]))),2>(h=d>=t.Q[Y]?d:t.Q[Y]))return t.mb=t.a[1].j,1;t.a[1].r=0,t.a[0].bc=t.x[0],t.a[0].ac=t.x[1],t.a[0].dc=t.x[2],t.a[0].lc=t.x[3],l=h;do{t.a[l--].z=268435455;}while(l>=2);for(c=0;4>c;++c)if(!(2>(z=t.Q[c]))){N=W+rt(t,c,t.l,P);do{o=N+lt(t.i,z-2,P),(L=t.a[z]).z>o&&(L.z=o,L.r=0,L.j=c,L.t=0);}while(--z>=2)}if(S=w+$t[t.bb[t.l]>>>2],d>=(l=t.Q[0]>=2?t.Q[0]+1:2)){for(R=0;l>t.m[R];)R+=2;for(;o=S+et(t,f=t.m[R+1],l,P),(L=t.a[l]).z>o&&(L.z=o,L.r=0,L.j=f+4,L.t=0),l!=t.m[R]||(R+=2)!=A;++l);}for(r=0;;){if(++r==h)return V(t,r);if(m=it(t),A=t.D,m>=t.n)return t.vb=m,t.N=1,V(t,r);if(++e,I=t.a[r].r,t.a[r].t?(--I,t.a[r].Ac?(J=t.a[t.a[r].r2].Hc,J=4>t.a[r].j2?7>J?8:11:7>J?7:10):J=t.a[I].Hc,J=q(J)):J=t.a[I].Hc,I==r-1?J=t.a[r].j?q(J):7>J?9:11:(t.a[r].t&&t.a[r].Ac?(I=t.a[r].r2,C=t.a[r].j2,J=7>J?8:11):J=4>(C=t.a[r].j)?7>J?8:11:7>J?7:10,U=t.a[I],4>C?C?1==C?(t.x[0]=U.ac,t.x[1]=U.bc,t.x[2]=U.dc,t.x[3]=U.lc):2==C?(t.x[0]=U.dc,t.x[1]=U.bc,t.x[2]=U.ac,t.x[3]=U.lc):(t.x[0]=U.lc,t.x[1]=U.bc,t.x[2]=U.ac,t.x[3]=U.dc):(t.x[0]=U.bc,t.x[1]=U.ac,t.x[2]=U.dc,t.x[3]=U.lc):(t.x[0]=C-4,t.x[1]=U.bc,t.x[2]=U.ac,t.x[3]=U.dc)),t.a[r].Hc=J,t.a[r].bc=t.x[0],t.a[r].ac=t.x[1],t.a[r].dc=t.x[2],t.a[r].lc=t.x[3],u=t.a[r].z,s=T(t.b,-1),v=T(t.b,-t.x[0]-1-1),P=e&t.y,n=u+$t[t.C[(J<<4)+P]>>>2]+vt(pt(t.A,e,T(t.b,-2)),J>=7,v,s),_=0,(E=t.a[r+1]).z>n&&(E.z=n,E.r=r,E.j=-1,E.t=0,_=1),W=(w=u+$t[2048-t.C[(J<<4)+P]>>>2])+$t[2048-t.bb[J]>>>2],v!=s||r>E.r&&!E.j||(G=W+($t[t.hb[J]>>>2]+$t[t._[(J<<4)+P]>>>2]),E.z>=G&&(E.z=G,E.r=r,E.j=0,E.t=0,_=1)),!(2>(k=j=(j=O(t.b)+1)>4095-r?4095-r:j))){if(k>t.n&&(k=t.n),!_&&v!=s&&($=Math.min(j-1,t.n),(g=M(t.b,0,t.x[0],$))>=2)){for(Z=q(J),D=e+1&t.y,x=n+$t[2048-t.C[(Z<<4)+D]>>>2]+$t[2048-t.bb[Z]>>>2],B=r+1+g;B>h;)t.a[++h].z=268435455;o=x+(lt(t.i,g-2,D)+rt(t,0,Z,D)),(L=t.a[B]).z>o&&(L.z=o,L.r=r+1,L.j=0,L.t=1,L.Ac=0);}for(H=2,F=0;4>F;++F)if(!(2>(b=M(t.b,-1,t.x[F],k)))){y=b;do{for(;r+b>h;)t.a[++h].z=268435455;o=W+(lt(t.i,b-2,P)+rt(t,F,J,P)),(L=t.a[r+b]).z>o&&(L.z=o,L.r=r,L.j=F,L.t=0);}while(--b>=2);if(b=y,F||(H=b+1),j>b&&($=Math.min(j-1-b,t.n),(g=M(t.b,b,t.x[F],$))>=2)){for(Z=7>J?8:11,D=e+b&t.y,i=W+(lt(t.i,b-2,P)+rt(t,F,J,P))+$t[t.C[(Z<<4)+D]>>>2]+vt(pt(t.A,e+b,T(t.b,b-1-1)),1,T(t.b,b-1-(t.x[F]+1)),T(t.b,b-1)),Z=q(Z),D=e+b+1&t.y,x=i+$t[2048-t.C[(Z<<4)+D]>>>2]+$t[2048-t.bb[Z]>>>2],B=b+1+g;r+B>h;)t.a[++h].z=268435455;o=x+(lt(t.i,g-2,D)+rt(t,0,Z,D)),(L=t.a[r+B]).z>o&&(L.z=o,L.r=r+b+1,L.j=0,L.t=1,L.Ac=1,L.r2=r,L.j2=F);}}if(m>k){for(m=k,A=0;m>t.m[A];A+=2);t.m[A]=m,A+=2;}if(m>=H){for(S=w+$t[t.bb[J]>>>2];r+m>h;)t.a[++h].z=268435455;for(R=0;H>t.m[R];)R+=2;for(b=H;;++b)if(o=S+et(t,a=t.m[R+1],b,P),(L=t.a[r+b]).z>o&&(L.z=o,L.r=r,L.j=a+4,L.t=0),b==t.m[R]){if(j>b&&($=Math.min(j-1-b,t.n),(g=M(t.b,b,a,$))>=2)){for(Z=7>J?7:10,D=e+b&t.y,i=o+$t[t.C[(Z<<4)+D]>>>2]+vt(pt(t.A,e+b,T(t.b,b-1-1)),1,T(t.b,b-(a+1)-1),T(t.b,b-1)),Z=q(Z),D=e+b+1&t.y,x=i+$t[2048-t.C[(Z<<4)+D]>>>2]+$t[2048-t.bb[Z]>>>2],B=b+1+g;r+B>h;)t.a[++h].z=268435455;o=x+(lt(t.i,g-2,D)+rt(t,0,Z,D)),(L=t.a[r+B]).z>o&&(L.z=o,L.r=r+b+1,L.j=0,L.t=1,L.Ac=1,L.r2=r,L.j2=a+4);}if((R+=2)==A)break}}}}}function et(t,e,r,n){var i=N(r);return (128>e?t.lb[128*i+e]:t.P[(i<<6)+function(t){return 131072>t?Vt[t>>6]+12:134217728>t?Vt[t>>16]+32:Vt[t>>26]+52}(e)]+t.nc[15&e])+lt(t.$,r-2,n)}function rt(t,e,r,n){var i;return e?(i=$t[2048-t.hb[r]>>>2],1==e?i+=$t[t.Ub[r]>>>2]:(i+=$t[2048-t.Ub[r]>>>2],i+=Ct(t.vc[r],e-2))):(i=$t[t.hb[r]>>>2],i+=$t[2048-t._[(r<<4)+n]>>>2]),i}function nt(t,e){e>0&&(function(t,e){var r,n,i,o,a,u,s,f,c,l,h,d,p,b,g,y,v;do{if(t.h>=t.o+t.ob)d=t.ob;else if(d=t.h-t.o,t.xb>d){U(t);continue}for(p=t.o>t.p?t.o-t.p:0,n=t.f+t.o,t.qb?(u=1023&(v=Zt[255&t.c[n]]^255&t.c[n+1]),t.ub[u]=t.o,s=65535&(v^=(255&t.c[n+2])<<8),t.ub[1024+s]=t.o,f=(v^Zt[255&t.c[n+3]]<<5)&t.Ec):f=255&t.c[n]^(255&t.c[n+1])<<8,i=t.ub[t.R+f],t.ub[t.R+f]=t.o,g=1+(t.k<<1),y=t.k<<1,l=h=t.w,r=t.Fc;;){if(p>=i||0==r--){t.L[g]=t.L[y]=0;break}if(a=t.o-i,o=(t.k>=a?t.k-a:t.k-a+t.p)<<1,b=t.f+i,c=h>l?l:h,t.c[b+c]==t.c[n+c]){for(;++c!=d&&t.c[b+c]==t.c[n+c];);if(c==d){t.L[y]=t.L[o],t.L[g]=t.L[o+1];break}}(255&t.c[n+c])>(255&t.c[b+c])?(t.L[y]=i,y=o+1,i=t.L[y],h=c):(t.L[g]=i,g=o,i=t.L[g],l=c);}U(t);}while(0!=--e)}(t.b,e),t.s+=e);}function it(t){var e=0;return t.D=function(t,e){var r,n,i,o,a,u,s,f,c,l,h,d,p,b,g,y,v,w,m,_,E;if(t.h>=t.o+t.ob)b=t.ob;else if(b=t.h-t.o,t.xb>b)return U(t),0;for(v=0,g=t.o>t.p?t.o-t.p:0,n=t.f+t.o,y=1,f=0,c=0,t.qb?(f=1023&(E=Zt[255&t.c[n]]^255&t.c[n+1]),c=65535&(E^=(255&t.c[n+2])<<8),l=(E^Zt[255&t.c[n+3]]<<5)&t.Ec):l=255&t.c[n]^(255&t.c[n+1])<<8,i=t.ub[t.R+l]||0,t.qb&&(o=t.ub[f]||0,a=t.ub[1024+c]||0,t.ub[f]=t.o,t.ub[1024+c]=t.o,o>g&&t.c[t.f+o]==t.c[n]&&(e[v++]=y=2,e[v++]=t.o-o-1),a>g&&t.c[t.f+a]==t.c[n]&&(a==o&&(v-=2),e[v++]=y=3,e[v++]=t.o-a-1,o=a),0!=v&&o==i&&(v-=2,y=1)),t.ub[t.R+l]=t.o,m=1+(t.k<<1),_=t.k<<1,d=p=t.w,0!=t.w&&i>g&&t.c[t.f+i+t.w]!=t.c[n+t.w]&&(e[v++]=y=t.w,e[v++]=t.o-i-1),r=t.Fc;;){if(g>=i||0==r--){t.L[m]=t.L[_]=0;break}if(s=t.o-i,u=(t.k>=s?t.k-s:t.k-s+t.p)<<1,w=t.f+i,h=p>d?d:p,t.c[w+h]==t.c[n+h]){for(;++h!=b&&t.c[w+h]==t.c[n+h];);if(h>y&&(e[v++]=y=h,e[v++]=s-1,h==b)){t.L[_]=t.L[u],t.L[m]=t.L[u+1];break}}(255&t.c[n+h])>(255&t.c[w+h])?(t.L[_]=i,_=u+1,i=t.L[_],p=h):(t.L[m]=i,m=u,i=t.L[m],d=h);}return U(t),v}(t.b,t.m),t.D>0&&(e=t.m[t.D-2])==t.n&&(e+=M(t.b,e-1,t.m[t.D-1],273-e)),++t.s,e}function ot(t){t.b&&t.W&&(t.b.cc=null,t.W=0);}function at(t){return 2048>t?Vt[t]:2097152>t?Vt[t>>10]+20:Vt[t>>20]+40}function ut(t,e){At(t.db);for(var r=0;e>r;++r)At(t.Vb[r].G),At(t.Wb[r].G);At(t.ic.G);}function st(t,e,r,n,i){var o,a,u,s,f;for(o=$t[t.db[0]>>>2],u=(a=$t[2048-t.db[0]>>>2])+$t[t.db[1]>>>2],s=a+$t[2048-t.db[1]>>>2],f=0,f=0;8>f;++f){if(f>=r)return;n[i+f]=o+St(t.Vb[e],f);}for(;16>f;++f){if(f>=r)return;n[i+f]=u+St(t.Wb[e],f-8);}for(;r>f;++f)n[i+f]=s+St(t.ic,f-8-8);}function ft(t,e,r,n){((function(t,e,r,n){8>r?(Rt(e,t.db,0,0),xt(t.Vb[n],e,r)):(r-=8,Rt(e,t.db,0,1),8>r?(Rt(e,t.db,1,0),xt(t.Wb[n],e,r)):(Rt(e,t.db,1,1),xt(t.ic,e,r-8)));}))(t,e,r,n),0==--t.sc[n]&&(st(t,n,t.rb,t.Cc,272*n),t.sc[n]=t.rb);}function ct(t){return function(t){t.db=n(2),t.Vb=n(16),t.Wb=n(16),t.ic=Et({},8);for(var e=0;16>e;++e)t.Vb[e]=Et({},3),t.Wb[e]=Et({},3);}(t),t.Cc=[],t.sc=[],t}function lt(t,e,r){return t.Cc[272*r+e]}function ht(t,e){for(var r=0;e>r;++r)st(t,r,t.rb,t.Cc,272*r),t.sc[r]=t.rb;}function dt(t,e,r){var i,o;if(null==t.V||t.u!=r||t.I!=e)for(t.I=e,t.qc=(1<<e)-1,t.u=r,o=1<<t.u+t.I,t.V=n(o),i=0;o>i;++i)t.V[i]=yt({});}function pt(t,e,r){return t.V[((e&t.qc)<<t.u)+((255&r)>>>8-t.u)]}function bt(t,e,r){var n,i,o=1;for(i=7;i>=0;--i)n=r>>i&1,Rt(e,t.tb,o,n),o=o<<1|n;}function gt(t,e,r,n){var i,o,a,u,s=1,f=1;for(o=7;o>=0;--o)i=n>>o&1,u=f,s&&(u+=1+(a=r>>o&1)<<8,s=a==i),Rt(e,t.tb,u,i),f=f<<1|i;}function yt(t){return t.tb=n(768),t}function vt(t,e,r,n){var i,o,a=1,u=7,s=0;if(e)for(;u>=0;--u)if(o=r>>u&1,i=n>>u&1,s+=Ct(t.tb[(1+o<<8)+a],i),a=a<<1|i,o!=i){--u;break}for(;u>=0;--u)i=n>>u&1,s+=Ct(t.tb[a],i),a=a<<1|i;return s}function wt(t){t.j=-1,t.t=0;}function mt(t,e){return t.F=e,t.G=n(1<<e),t}function _t(t,e){var r,n=1;for(r=t.F;0!=r;--r)n=(n<<1)+Ot(e,t.G,n);return n-(1<<t.F)}function Et(t,e){return t.F=e,t.G=n(1<<e),t}function xt(t,e,r){var n,i,o=1;for(i=t.F;0!=i;)n=r>>>--i&1,Rt(e,t.G,o,n),o=o<<1|n;}function St(t,e){var r,n,i=1,o=0;for(n=t.F;0!=n;)r=e>>>--n&1,o+=Ct(t.G[i],r),i=(i<<1)+r;return o}function kt(t,e,r){var n,i,o=1;for(i=0;t.F>i;++i)n=1&r,Rt(e,t.G,o,n),o=o<<1|n,r>>=1;}function jt(t,e){var r,n,i=1,o=0;for(n=t.F;0!=n;--n)r=1&e,e>>>=1,o+=Ct(t.G[i],r),i=i<<1|r;return o}function Tt(t,e,r,n,i){var o,a,u=1;for(a=0;n>a;++a)Rt(r,t,e+u,o=1&i),u=u<<1|o,i>>=1;}function Mt(t,e,r,n){var i,o,a=1,u=0;for(o=r;0!=o;--o)i=1&n,n>>>=1,u+=$t[(2047&(t[e+a]-i^-i))>>>2],a=a<<1|i;return u}function Ot(t,e,r){var n,i=e[r];return (-2147483648^(n=(t.E>>>11)*i))>(-2147483648^t.Bb)?(t.E=n,e[r]=i+(2048-i>>>5)<<16>>16,-16777216&t.E||(t.Bb=t.Bb<<8|g(t.Ab),t.E<<=8),0):(t.E-=n,t.Bb-=n,e[r]=i-(i>>>5)<<16>>16,-16777216&t.E||(t.Bb=t.Bb<<8|g(t.Ab),t.E<<=8),1)}function At(t){for(var e=t.length-1;e>=0;--e)t[e]=1024;}function Rt(t,e,r,n){var a,u=e[r];a=(t.E>>>11)*u,n?(t.xc=i(t.xc,o(f(a),[4294967295,0])),t.E-=a,e[r]=u-(u>>>5)<<16>>16):(t.E=a,e[r]=u+(2048-u>>>5)<<16>>16),-16777216&t.E||(t.E<<=8,Lt(t));}function Bt(t,e,r){for(var n=r-1;n>=0;--n)t.E>>>=1,1==(e>>>n&1)&&(t.xc=i(t.xc,f(t.E))),-16777216&t.E||(t.E<<=8,Lt(t));}function Ut(t){return i(i(f(t.Jb),t.mc),[4,0])}function Lt(t){var e,r=c(function(t,e){var r;return r=d(t,e&=63),0>t[1]&&(r=i(r,h([2,0],63-e))),r}(t.xc,32));if(0!=r||a(t.xc,[4278190080,0])<0){t.mc=i(t.mc,f(t.Jb)),e=t.Oc;do{m(t.Ab,e+r),e=255;}while(0!=--t.Jb);t.Oc=c(t.xc)>>>24;}++t.Jb,t.xc=h(o(t.xc,[16777215,0]),8);}function Ct(t,e){return $t[(2047&(t-e^-e))>>>2]}function It(t){for(var e,r,n,i=0,o=0,a=t.length,u=[],s=[];a>i;++i,++o){if(128&(e=255&t[i]))if(192==(224&e)){if(i+1>=a)return t;if(128!=(192&(r=255&t[++i])))return t;s[o]=(31&e)<<6|63&r;}else {if(224!=(240&e))return t;if(i+2>=a)return t;if(128!=(192&(r=255&t[++i])))return t;if(128!=(192&(n=255&t[++i])))return t;s[o]=(15&e)<<12|(63&r)<<6|63&n;}else {if(!e)return t;s[o]=e;}16383==o&&(u.push(String.fromCharCode.apply(String,s)),o=-1);}return o>0&&(s.length=o,u.push(String.fromCharCode.apply(String,s))),u.join("")}function Pt(t){var e,r,n,i=[],o=0,a=t.length;if("object"==typeof t)return t;for(function(t,e,r,n,i){var o;for(o=e;r>o;++o)n[i++]=t.charCodeAt(o);}(t,0,a,i,0),n=0;a>n;++n)(e=i[n])>=1&&127>=e?++o:o+=!e||e>=128&&2047>=e?2:3;for(r=[],o=0,n=0;a>n;++n)(e=i[n])>=1&&127>=e?r[o++]=e<<24>>24:!e||e>=128&&2047>=e?(r[o++]=(192|e>>6&31)<<24>>24,r[o++]=(128|63&e)<<24>>24):(r[o++]=(224|e>>12&15)<<24>>24,r[o++]=(128|e>>6&63)<<24>>24,r[o++]=(128|63&e)<<24>>24);return r}function Dt(t){return t[1]+t[0]}var Nt=1,qt=2,Ft=3,zt="function"==typeof t?t:setTimeout,Wt=4294967296,Yt=[4294967295,-Wt],Gt=[0,-0x8000000000000000],Ht=[0,0],Jt=[1,0],Zt=function(){var t,e,r,n=[];for(t=0;256>t;++t){for(r=t,e=0;8>e;++e)0!=(1&r)?r=r>>>1^-306674912:r>>>=1;n[t]=r;}return n}(),Vt=function(){var t,e,r,n=2,i=[0,1];for(r=2;22>r;++r)for(e=1<<(r>>1)-1,t=0;e>t;++t,++n)i[n]=r<<24>>24;return i}(),$t=function(){var t,e,r,n=[];for(e=8;e>=0;--e)for(t=1<<9-e,r=1<<9-e-1;t>r;++r)n[r]=(e<<6)+(t-r<<6>>>9-e-1);return n}(),Qt=function(){var t=[{s:16,f:64,m:0},{s:20,f:64,m:0},{s:19,f:64,m:1},{s:20,f:64,m:1},{s:21,f:128,m:1},{s:22,f:128,m:1},{s:23,f:128,m:1},{s:24,f:255,m:1},{s:25,f:255,m:1}];return function(e){return t[e-1]||t[6]}}();return "undefined"==typeof onmessage||"undefined"!=typeof window&&void 0!==window.document||(onmessage=function(t){t&&t.gc&&(t.gc.action==qt?e.decompress(t.gc.gc,t.gc.cbn):t.gc.action==Nt&&e.compress(t.gc.gc,t.gc.Rc,t.gc.cbn));}),{compress:function(t,e,n,i){var o,a,u={},s=void 0===n&&void 0===i;if("function"!=typeof n&&(a=n,n=i=0),i=i||function(t){return void 0!==a?r(t,a):void 0},n=n||function(t,e){return void 0!==a?postMessage({action:Nt,cbn:a,result:t,error:e}):void 0},s){for(u.c=S({},Pt(t),Qt(e));F(u.c.yb););return w(u.c.Nb)}try{u.c=S({},Pt(t),Qt(e)),i(0);}catch(t){return n(null,t)}zt((function t(){try{for(var e,r=(new Date).getTime();F(u.c.yb);)if(o=Dt(u.c.yb.Pb)/Dt(u.c.Tb),(new Date).getTime()-r>200)return i(o),zt(t,0),0;i(1),e=w(u.c.Nb),zt(n.bind(null,e),0);}catch(e){n(null,e);}}),0);},decompress:function(t,e,n){var i,o,a,u,s={},f=void 0===e&&void 0===n;if("function"!=typeof e&&(o=e,e=n=0),n=n||function(t){return void 0!==o?r(a?t:-1,o):void 0},e=e||function(t,e){return void 0!==o?postMessage({action:qt,cbn:o,result:t,error:e}):void 0},f){for(s.d=j({},t);F(s.d.yb););return It(w(s.d.Nb))}try{s.d=j({},t),u=Dt(s.d.Tb),a=u>-1,n(0);}catch(t){return e(null,t)}zt((function t(){try{for(var r,o=0,f=(new Date).getTime();F(s.d.yb);)if(++o%1e3==0&&(new Date).getTime()-f>200)return a&&(i=Dt(s.d.yb.Z.g)/u,n(i)),zt(t,0),0;n(1),r=It(w(s.d.Nb)),zt(e.bind(null,r),0);}catch(r){e(null,r);}}),0);}}}();this.LZMA=this.LZMA_WORKER=e;}).call(this,r(17).setImmediate);},function(t,e,r){var n,i=function(){function t(t,e){if(!i[t]){i[t]={};for(var r=0;r<t.length;r++)i[t][t.charAt(r)]=r;}return i[t][e]}var e=String.fromCharCode,r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$",i={},o={compressToBase64:function(t){if(null==t)return "";var e=o._compress(t,6,(function(t){return r.charAt(t)}));switch(e.length%4){default:case 0:return e;case 1:return e+"===";case 2:return e+"==";case 3:return e+"="}},decompressFromBase64:function(e){return null==e?"":""==e?null:o._decompress(e.length,32,(function(n){return t(r,e.charAt(n))}))},compressToUTF16:function(t){return null==t?"":o._compress(t,15,(function(t){return e(t+32)}))+" "},decompressFromUTF16:function(t){return null==t?"":""==t?null:o._decompress(t.length,16384,(function(e){return t.charCodeAt(e)-32}))},compressToUint8Array:function(t){for(var e=o.compress(t),r=new Uint8Array(2*e.length),n=0,i=e.length;n<i;n++){var a=e.charCodeAt(n);r[2*n]=a>>>8,r[2*n+1]=a%256;}return r},decompressFromUint8Array:function(t){if(null==t)return o.decompress(t);for(var r=new Array(t.length/2),n=0,i=r.length;n<i;n++)r[n]=256*t[2*n]+t[2*n+1];var a=[];return r.forEach((function(t){a.push(e(t));})),o.decompress(a.join(""))},compressToEncodedURIComponent:function(t){return null==t?"":o._compress(t,6,(function(t){return n.charAt(t)}))},decompressFromEncodedURIComponent:function(e){return null==e?"":""==e?null:(e=e.replace(/ /g,"+"),o._decompress(e.length,32,(function(r){return t(n,e.charAt(r))})))},compress:function(t){return o._compress(t,16,(function(t){return e(t)}))},_compress:function(t,e,r){if(null==t)return "";var n,i,o,a={},u={},s="",f="",c="",l=2,h=3,d=2,p=[],b=0,g=0;for(o=0;o<t.length;o+=1)if(s=t.charAt(o),Object.prototype.hasOwnProperty.call(a,s)||(a[s]=h++,u[s]=!0),f=c+s,Object.prototype.hasOwnProperty.call(a,f))c=f;else {if(Object.prototype.hasOwnProperty.call(u,c)){if(c.charCodeAt(0)<256){for(n=0;n<d;n++)b<<=1,g==e-1?(g=0,p.push(r(b)),b=0):g++;for(i=c.charCodeAt(0),n=0;n<8;n++)b=b<<1|1&i,g==e-1?(g=0,p.push(r(b)),b=0):g++,i>>=1;}else {for(i=1,n=0;n<d;n++)b=b<<1|i,g==e-1?(g=0,p.push(r(b)),b=0):g++,i=0;for(i=c.charCodeAt(0),n=0;n<16;n++)b=b<<1|1&i,g==e-1?(g=0,p.push(r(b)),b=0):g++,i>>=1;}0==--l&&(l=Math.pow(2,d),d++),delete u[c];}else for(i=a[c],n=0;n<d;n++)b=b<<1|1&i,g==e-1?(g=0,p.push(r(b)),b=0):g++,i>>=1;0==--l&&(l=Math.pow(2,d),d++),a[f]=h++,c=String(s);}if(""!==c){if(Object.prototype.hasOwnProperty.call(u,c)){if(c.charCodeAt(0)<256){for(n=0;n<d;n++)b<<=1,g==e-1?(g=0,p.push(r(b)),b=0):g++;for(i=c.charCodeAt(0),n=0;n<8;n++)b=b<<1|1&i,g==e-1?(g=0,p.push(r(b)),b=0):g++,i>>=1;}else {for(i=1,n=0;n<d;n++)b=b<<1|i,g==e-1?(g=0,p.push(r(b)),b=0):g++,i=0;for(i=c.charCodeAt(0),n=0;n<16;n++)b=b<<1|1&i,g==e-1?(g=0,p.push(r(b)),b=0):g++,i>>=1;}0==--l&&(l=Math.pow(2,d),d++),delete u[c];}else for(i=a[c],n=0;n<d;n++)b=b<<1|1&i,g==e-1?(g=0,p.push(r(b)),b=0):g++,i>>=1;0==--l&&(l=Math.pow(2,d),d++);}for(i=2,n=0;n<d;n++)b=b<<1|1&i,g==e-1?(g=0,p.push(r(b)),b=0):g++,i>>=1;for(;;){if(b<<=1,g==e-1){p.push(r(b));break}g++;}return p.join("")},decompress:function(t){return null==t?"":""==t?null:o._decompress(t.length,32768,(function(e){return t.charCodeAt(e)}))},_decompress:function(t,r,n){var i,o,a,u,s,f,c,l=[],h=4,d=4,p=3,b="",g=[],y={val:n(0),position:r,index:1};for(i=0;i<3;i+=1)l[i]=i;for(a=0,s=Math.pow(2,2),f=1;f!=s;)u=y.val&y.position,y.position>>=1,0==y.position&&(y.position=r,y.val=n(y.index++)),a|=(u>0?1:0)*f,f<<=1;switch(a){case 0:for(a=0,s=Math.pow(2,8),f=1;f!=s;)u=y.val&y.position,y.position>>=1,0==y.position&&(y.position=r,y.val=n(y.index++)),a|=(u>0?1:0)*f,f<<=1;c=e(a);break;case 1:for(a=0,s=Math.pow(2,16),f=1;f!=s;)u=y.val&y.position,y.position>>=1,0==y.position&&(y.position=r,y.val=n(y.index++)),a|=(u>0?1:0)*f,f<<=1;c=e(a);break;case 2:return ""}for(l[3]=c,o=c,g.push(c);;){if(y.index>t)return "";for(a=0,s=Math.pow(2,p),f=1;f!=s;)u=y.val&y.position,y.position>>=1,0==y.position&&(y.position=r,y.val=n(y.index++)),a|=(u>0?1:0)*f,f<<=1;switch(c=a){case 0:for(a=0,s=Math.pow(2,8),f=1;f!=s;)u=y.val&y.position,y.position>>=1,0==y.position&&(y.position=r,y.val=n(y.index++)),a|=(u>0?1:0)*f,f<<=1;l[d++]=e(a),c=d-1,h--;break;case 1:for(a=0,s=Math.pow(2,16),f=1;f!=s;)u=y.val&y.position,y.position>>=1,0==y.position&&(y.position=r,y.val=n(y.index++)),a|=(u>0?1:0)*f,f<<=1;l[d++]=e(a),c=d-1,h--;break;case 2:return g.join("")}if(0==h&&(h=Math.pow(2,p),p++),l[c])b=l[c];else {if(c!==d)return null;b=o+o.charAt(0);}g.push(b),l[d++]=o+b.charAt(0),o=b,0==--h&&(h=Math.pow(2,p),p++);}}};return o}();void 0!==(n=function(){return i}.call(e,r,e,t))&&(t.exports=n);},function(t,e,r){var n=function(){};n.prototype.encode=function(t){for(var e,r={},n=(t+"").split(""),i=[],o=n[0],a=256,u=1;u<n.length;u++)null!=r[o+(e=n[u])]?o+=e:(i.push(o.length>1?r[o]:o.charCodeAt(0)),r[o+e]=a,a++,o=e);i.push(o.length>1?r[o]:o.charCodeAt(0));for(u=0;u<i.length;u++)i[u]=String.fromCharCode(i[u]);return i.join("")},n.prototype.decode=function(t){for(var e,r={},n=(t+"").split(""),i=n[0],o=i,a=[i],u=256,s=1;s<n.length;s++){var f=n[s].charCodeAt(0);e=f<256?n[s]:r[f]?r[f]:o+i,a.push(e),i=e.charAt(0),r[u]=o+i,u++,o=e;}return a.join("")},t.exports=new n;},function(t,e,r){r.r(e);var n=r(0),i=r.n(n),o=r(1),a=r.n(o),u=r(31),s=r(32),f=r(33),c={pack:!0,encode:!0,compress:function(){var t=a()(i.a.mark((function t(e){return i.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",e);case 1:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),decompress:function(){var t=a()(i.a.mark((function t(e){return i.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",e);case 1:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}()},l={lzma:u.a,lzstring:s.a,lzw:f.a,pack:c},h=r(2),d=function(t){return Math.floor(1e4*t)/1e4};r.p=function(t){return t.substring(0,t.lastIndexOf("/"))}(function(){if(document.currentScript)return document.currentScript.src;var t=document.getElementsByTagName("script");return t[t.length-1].src}())+"/",e.default=function(t){function e(t){return r.apply(this,arguments)}function r(){return (r=a()(i.a.mark((function e(r){var n,o,a;return i.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!s){e.next=6;break}return e.next=3,h.a.msgpack();case 3:e.t0=e.sent.encode(r),e.next=7;break;case 6:e.t0=JSON.stringify(r);case 7:return n=e.t0,e.next=10,l[t].compress(n);case 10:if(o=e.sent,!f){e.next=17;break}return e.next=14,h.a.safe64();case 14:e.t1=e.sent.encode(o),e.next=18;break;case 17:e.t1=o;case 18:return a=e.t1,e.abrupt("return",a);case 20:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function n(){return (n=a()(i.a.mark((function e(r){var n,o,a;return i.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!f){e.next=6;break}return e.next=3,h.a.safe64();case 3:e.t0=e.sent.decode(r),e.next=7;break;case 6:e.t0=r;case 7:return n=e.t0,e.next=10,l[t].decompress(n);case 10:if(o=e.sent,!s){e.next=17;break}return e.next=14,h.a.msgpack();case 14:e.t1=e.sent.decode(o),e.next=18;break;case 17:e.t1=JSON.parse(o);case 18:return a=e.t1,e.abrupt("return",a);case 20:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function o(){return (o=a()(i.a.mark((function t(r){var n,o,a;return i.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=JSON.stringify(r),o=encodeURIComponent(n),t.next=4,e(r);case 4:return a=t.sent,t.abrupt("return",{raw:n.length,rawencoded:o.length,compressedencoded:a.length,compression:d(o.length/a.length)});case 6:case"end":return t.stop()}}),t)})))).apply(this,arguments)}if(!Object.prototype.hasOwnProperty.call(l,t))throw new Error("No such algorithm ".concat(t));var u=l[t],s=u.pack,f=u.encode;return {compress:e,decompress:function(t){return n.apply(this,arguments)},stats:function(t){return o.apply(this,arguments)}}};}]).default}));
    });

    var JSONURL = /*@__PURE__*/getDefaultExportFromCjs(jsonUrlSingle);

    /* src\components\CompCard.svelte generated by Svelte v3.41.0 */
    const file$m = "src\\components\\CompCard.svelte";

    function get_each_context$d(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[20] = list[i];
    	return child_ctx;
    }

    // (66:2) {:else}
    function create_else_block_1$6(ctx) {
    	let i0;
    	let t0;
    	let i1;
    	let t1;
    	let i2;
    	let t2;
    	let i3;
    	let t3;
    	let i4;

    	const block = {
    		c: function create() {
    			i0 = element("i");
    			t0 = space();
    			i1 = element("i");
    			t1 = space();
    			i2 = element("i");
    			t2 = space();
    			i3 = element("i");
    			t3 = space();
    			i4 = element("i");
    			attr_dev(i0, "class", "emptyCardSlot svelte-pbdne4");
    			add_location(i0, file$m, 66, 3, 2574);
    			attr_dev(i1, "class", "emptyCardSlot svelte-pbdne4");
    			add_location(i1, file$m, 67, 3, 2608);
    			attr_dev(i2, "class", "emptyCardSlot svelte-pbdne4");
    			add_location(i2, file$m, 68, 3, 2642);
    			attr_dev(i3, "class", "emptyCardSlot svelte-pbdne4");
    			add_location(i3, file$m, 69, 3, 2676);
    			attr_dev(i4, "class", "emptyCardSlot svelte-pbdne4");
    			add_location(i4, file$m, 70, 3, 2710);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, i0, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, i1, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, i2, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, i3, anchor);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, i4, anchor);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(i0);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(i1);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(i2);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(i3);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(i4);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$6.name,
    		type: "else",
    		source: "(66:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (58:2) {#if comp.lines.length > 0}
    function create_if_block$f(ctx) {
    	let each_1_anchor;
    	let each_value = /*comp*/ ctx[0].lines[0].heroes;
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$d(get_each_context$d(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty$3();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$HeroData, comp, $AppData*/ 25) {
    				each_value = /*comp*/ ctx[0].lines[0].heroes;
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$d(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$d(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$f.name,
    		type: "if",
    		source: "(58:2) {#if comp.lines.length > 0}",
    		ctx
    	});

    	return block;
    }

    // (62:4) {:else}
    function create_else_block$b(ctx) {
    	let i;

    	const block = {
    		c: function create() {
    			i = element("i");
    			attr_dev(i, "class", "emptyCardSlot svelte-pbdne4");
    			add_location(i, file$m, 62, 5, 2506);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, i, anchor);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(i);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$b.name,
    		type: "else",
    		source: "(62:4) {:else}",
    		ctx
    	});

    	return block;
    }

    // (60:4) {#if $HeroData.some(e => e.id === hero)}
    function create_if_block_1$8(ctx) {
    	let img;
    	let img_src_value;
    	let img_alt_value;

    	function func_1(...args) {
    		return /*func_1*/ ctx[17](/*hero*/ ctx[20], ...args);
    	}

    	function func_2(...args) {
    		return /*func_2*/ ctx[18](/*hero*/ ctx[20], ...args);
    	}

    	const block = {
    		c: function create() {
    			img = element("img");
    			attr_dev(img, "draggable", "false");
    			attr_dev(img, "class", "compCardImg svelte-pbdne4");
    			if (!src_url_equal(img.src, img_src_value = /*$HeroData*/ ctx[4].find(func_1).portrait)) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", img_alt_value = /*$HeroData*/ ctx[4].find(func_2).name);
    			toggle_class(img, "claimed", /*$AppData*/ ctx[3].MH.List[/*hero*/ ctx[20]].claimed);
    			add_location(img, file$m, 60, 5, 2300);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*$HeroData, comp*/ 17 && !src_url_equal(img.src, img_src_value = /*$HeroData*/ ctx[4].find(func_1).portrait)) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if (dirty & /*$HeroData, comp*/ 17 && img_alt_value !== (img_alt_value = /*$HeroData*/ ctx[4].find(func_2).name)) {
    				attr_dev(img, "alt", img_alt_value);
    			}

    			if (dirty & /*$AppData, comp*/ 9) {
    				toggle_class(img, "claimed", /*$AppData*/ ctx[3].MH.List[/*hero*/ ctx[20]].claimed);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$8.name,
    		type: "if",
    		source: "(60:4) {#if $HeroData.some(e => e.id === hero)}",
    		ctx
    	});

    	return block;
    }

    // (59:3) {#each comp.lines[0].heroes as hero}
    function create_each_block$d(ctx) {
    	let show_if;
    	let if_block_anchor;

    	function func(...args) {
    		return /*func*/ ctx[13](/*hero*/ ctx[20], ...args);
    	}

    	function select_block_type_1(ctx, dirty) {
    		if (show_if == null || dirty & /*$HeroData, comp*/ 17) show_if = !!/*$HeroData*/ ctx[4].some(func);
    		if (show_if) return create_if_block_1$8;
    		return create_else_block$b;
    	}

    	let current_block_type = select_block_type_1(ctx, -1);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty$3();
    		},
    		m: function mount(target, anchor) {
    			if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (current_block_type === (current_block_type = select_block_type_1(ctx, dirty)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$d.name,
    		type: "each",
    		source: "(59:3) {#each comp.lines[0].heroes as hero}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$p(ctx) {
    	let div13;
    	let div11;
    	let div2;
    	let div0;
    	let span0;
    	let t0_value = /*comp*/ ctx[0].name + "";
    	let t0;
    	let t1;
    	let div1;
    	let span1;
    	let t2_value = /*comp*/ ctx[0].author + "";
    	let t2;
    	let t3;
    	let div10;
    	let div7;
    	let div4;
    	let button0;
    	let img0;
    	let img0_src_value;
    	let t4;
    	let div3;
    	let span2;
    	let t6;
    	let div6;
    	let button1;
    	let img1;
    	let img1_src_value;
    	let t7;
    	let div5;
    	let span3;
    	let t9;
    	let i;
    	let t10;
    	let div9;
    	let div8;
    	let span4;
    	let t12;
    	let div12;
    	let div13_id_value;
    	let mounted;
    	let dispose;

    	function select_block_type(ctx, dirty) {
    		if (/*comp*/ ctx[0].lines.length > 0) return create_if_block$f;
    		return create_else_block_1$6;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			div13 = element("div");
    			div11 = element("div");
    			div2 = element("div");
    			div0 = element("div");
    			span0 = element("span");
    			t0 = text$2(t0_value);
    			t1 = space();
    			div1 = element("div");
    			span1 = element("span");
    			t2 = text$2(t2_value);
    			t3 = space();
    			div10 = element("div");
    			div7 = element("div");
    			div4 = element("div");
    			button0 = element("button");
    			img0 = element("img");
    			t4 = space();
    			div3 = element("div");
    			span2 = element("span");
    			span2.textContent = "Delete";
    			t6 = space();
    			div6 = element("div");
    			button1 = element("button");
    			img1 = element("img");
    			t7 = space();
    			div5 = element("div");
    			span3 = element("span");
    			span3.textContent = "Export";
    			t9 = space();
    			i = element("i");
    			t10 = space();
    			div9 = element("div");
    			div8 = element("div");
    			span4 = element("span");
    			span4.textContent = "draft";
    			t12 = space();
    			div12 = element("div");
    			if_block.c();
    			attr_dev(span0, "class", "compCardTitle svelte-pbdne4");
    			add_location(span0, file$m, 33, 4, 966);
    			attr_dev(div0, "class", "compCardTitleContainer svelte-pbdne4");
    			add_location(div0, file$m, 32, 3, 924);
    			attr_dev(span1, "class", "author svelte-pbdne4");
    			add_location(span1, file$m, 36, 4, 1063);
    			attr_dev(div1, "class", "authorContainer");
    			add_location(div1, file$m, 35, 3, 1028);
    			attr_dev(div2, "class", "titleAuthorContainer svelte-pbdne4");
    			add_location(div2, file$m, 31, 2, 885);
    			attr_dev(img0, "draggable", "false");
    			attr_dev(img0, "class", "deleteIcon svelte-pbdne4");
    			if (!src_url_equal(img0.src, img0_src_value = "./img/utility/trashcan.png")) attr_dev(img0, "src", img0_src_value);
    			attr_dev(img0, "alt", "Delete");
    			add_location(img0, file$m, 42, 125, 1354);
    			attr_dev(button0, "type", "button");
    			attr_dev(button0, "class", "cardDeleteButton svelte-pbdne4");
    			add_location(button0, file$m, 42, 5, 1234);
    			attr_dev(span2, "class", "tooltipText svelte-pbdne4");
    			add_location(span2, file$m, 43, 40, 1493);
    			attr_dev(div3, "class", "tooltip deleteTooltip svelte-pbdne4");
    			add_location(div3, file$m, 43, 5, 1458);
    			attr_dev(div4, "class", "buttonArea svelte-pbdne4");
    			add_location(div4, file$m, 41, 4, 1203);
    			attr_dev(img1, "draggable", "false");
    			attr_dev(img1, "class", "exportIcon svelte-pbdne4");
    			if (!src_url_equal(img1.src, img1_src_value = "./img/utility/export.png")) attr_dev(img1, "src", img1_src_value);
    			attr_dev(img1, "alt", "Export");
    			add_location(img1, file$m, 46, 125, 1707);
    			attr_dev(button1, "type", "button");
    			attr_dev(button1, "class", "cardExportButton svelte-pbdne4");
    			add_location(button1, file$m, 46, 5, 1587);
    			attr_dev(span3, "class", "tooltipText svelte-pbdne4");
    			add_location(span3, file$m, 47, 40, 1844);
    			attr_dev(div5, "class", "tooltip exportTooltip svelte-pbdne4");
    			add_location(div5, file$m, 47, 5, 1809);
    			attr_dev(div6, "class", "buttonArea svelte-pbdne4");
    			add_location(div6, file$m, 45, 4, 1556);
    			attr_dev(i, "class", "star svelte-pbdne4");
    			toggle_class(i, "active", /*comp*/ ctx[0].starred);
    			add_location(i, file$m, 49, 4, 1907);
    			attr_dev(div7, "class", "cardButtonsContainer svelte-pbdne4");
    			add_location(div7, file$m, 40, 3, 1163);
    			add_location(span4, file$m, 52, 52, 2096);
    			attr_dev(div8, "class", "draftLabel svelte-pbdne4");
    			toggle_class(div8, "open", /*comp*/ ctx[0].draft);
    			add_location(div8, file$m, 52, 4, 2048);
    			attr_dev(div9, "class", "draftContainer svelte-pbdne4");
    			add_location(div9, file$m, 51, 3, 2014);
    			attr_dev(div10, "class", "buttonDraftArea svelte-pbdne4");
    			add_location(div10, file$m, 39, 2, 1129);
    			attr_dev(div11, "class", "compCardHead svelte-pbdne4");
    			add_location(div11, file$m, 30, 1, 855);
    			attr_dev(div12, "class", "compImgs svelte-pbdne4");
    			add_location(div12, file$m, 56, 1, 2153);
    			attr_dev(div13, "id", div13_id_value = "comp" + /*idx*/ ctx[1]);
    			attr_dev(div13, "class", "compCard svelte-pbdne4");
    			toggle_class(div13, "highlight", /*highlightComp*/ ctx[2] !== null && /*highlightComp*/ ctx[2] === /*idx*/ ctx[1]);
    			toggle_class(div13, "active", /*idx*/ ctx[1] === /*$AppData*/ ctx[3].selectedComp);
    			add_location(div13, file$m, 29, 0, 661);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div13, anchor);
    			append_dev(div13, div11);
    			append_dev(div11, div2);
    			append_dev(div2, div0);
    			append_dev(div0, span0);
    			append_dev(span0, t0);
    			append_dev(div2, t1);
    			append_dev(div2, div1);
    			append_dev(div1, span1);
    			append_dev(span1, t2);
    			append_dev(div11, t3);
    			append_dev(div11, div10);
    			append_dev(div10, div7);
    			append_dev(div7, div4);
    			append_dev(div4, button0);
    			append_dev(button0, img0);
    			append_dev(div4, t4);
    			append_dev(div4, div3);
    			append_dev(div3, span2);
    			append_dev(div7, t6);
    			append_dev(div7, div6);
    			append_dev(div6, button1);
    			append_dev(button1, img1);
    			append_dev(div6, t7);
    			append_dev(div6, div5);
    			append_dev(div5, span3);
    			append_dev(div7, t9);
    			append_dev(div7, i);
    			append_dev(div10, t10);
    			append_dev(div10, div9);
    			append_dev(div9, div8);
    			append_dev(div8, span4);
    			append_dev(div13, t12);
    			append_dev(div13, div12);
    			if_block.m(div12, null);

    			if (!mounted) {
    				dispose = [
    					listen_dev(button0, "click", /*click_handler*/ ctx[14], false, false, false),
    					listen_dev(button1, "click", /*click_handler_1*/ ctx[15], false, false, false),
    					listen_dev(i, "click", /*click_handler_2*/ ctx[16], false, false, false),
    					listen_dev(div13, "click", /*click_handler_3*/ ctx[19], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*comp*/ 1 && t0_value !== (t0_value = /*comp*/ ctx[0].name + "")) set_data_dev(t0, t0_value);
    			if (dirty & /*comp*/ 1 && t2_value !== (t2_value = /*comp*/ ctx[0].author + "")) set_data_dev(t2, t2_value);

    			if (dirty & /*comp*/ 1) {
    				toggle_class(i, "active", /*comp*/ ctx[0].starred);
    			}

    			if (dirty & /*comp*/ 1) {
    				toggle_class(div8, "open", /*comp*/ ctx[0].draft);
    			}

    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(div12, null);
    				}
    			}

    			if (dirty & /*idx*/ 2 && div13_id_value !== (div13_id_value = "comp" + /*idx*/ ctx[1])) {
    				attr_dev(div13, "id", div13_id_value);
    			}

    			if (dirty & /*highlightComp, idx*/ 6) {
    				toggle_class(div13, "highlight", /*highlightComp*/ ctx[2] !== null && /*highlightComp*/ ctx[2] === /*idx*/ ctx[1]);
    			}

    			if (dirty & /*idx, $AppData*/ 10) {
    				toggle_class(div13, "active", /*idx*/ ctx[1] === /*$AppData*/ ctx[3].selectedComp);
    			}
    		},
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div13);
    			if_block.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$p.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$p($$self, $$props, $$invalidate) {
    	let $AppData;
    	let $HeroData;
    	validate_store(AppData$1, 'AppData');
    	component_subscribe($$self, AppData$1, $$value => $$invalidate(3, $AppData = $$value));
    	validate_store(HeroData, 'HeroData');
    	component_subscribe($$self, HeroData, $$value => $$invalidate(4, $HeroData = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('CompCard', slots, []);
    	let { comp = {} } = $$props;
    	let { idx = {} } = $$props;
    	let { highlightComp = null } = $$props;

    	let { delCallback = () => {
    		
    	} } = $$props;

    	let { cardClickCallback = () => {
    		
    	} } = $$props;

    	let { exportCallback = () => {
    		
    	} } = $$props;

    	let { starCallback = () => {
    		
    	} } = $$props;

    	function handleDeleteButtonClick(index) {
    		delCallback(index);
    	}

    	function handleCompCardClick(index) {
    		cardClickCallback(index);
    	}

    	function handleExportButtonClick(index) {
    		exportCallback(index);
    	}

    	function handleStarClick(event, comp) {
    		starCallback(event, comp);
    	}

    	const writable_props = [
    		'comp',
    		'idx',
    		'highlightComp',
    		'delCallback',
    		'cardClickCallback',
    		'exportCallback',
    		'starCallback'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<CompCard> was created with unknown prop '${key}'`);
    	});

    	const func = (hero, e) => e.id === hero;

    	const click_handler = e => {
    		handleDeleteButtonClick(idx);
    		e.stopPropagation();
    	};

    	const click_handler_1 = e => {
    		handleExportButtonClick(idx);
    		e.stopPropagation();
    	};

    	const click_handler_2 = e => handleStarClick(e, comp);
    	const func_1 = (hero, e) => e.id === hero;
    	const func_2 = (hero, e) => e.id === hero;
    	const click_handler_3 = () => handleCompCardClick(idx);

    	$$self.$$set = $$props => {
    		if ('comp' in $$props) $$invalidate(0, comp = $$props.comp);
    		if ('idx' in $$props) $$invalidate(1, idx = $$props.idx);
    		if ('highlightComp' in $$props) $$invalidate(2, highlightComp = $$props.highlightComp);
    		if ('delCallback' in $$props) $$invalidate(9, delCallback = $$props.delCallback);
    		if ('cardClickCallback' in $$props) $$invalidate(10, cardClickCallback = $$props.cardClickCallback);
    		if ('exportCallback' in $$props) $$invalidate(11, exportCallback = $$props.exportCallback);
    		if ('starCallback' in $$props) $$invalidate(12, starCallback = $$props.starCallback);
    	};

    	$$self.$capture_state = () => ({
    		AppData: AppData$1,
    		HeroData,
    		comp,
    		idx,
    		highlightComp,
    		delCallback,
    		cardClickCallback,
    		exportCallback,
    		starCallback,
    		handleDeleteButtonClick,
    		handleCompCardClick,
    		handleExportButtonClick,
    		handleStarClick,
    		$AppData,
    		$HeroData
    	});

    	$$self.$inject_state = $$props => {
    		if ('comp' in $$props) $$invalidate(0, comp = $$props.comp);
    		if ('idx' in $$props) $$invalidate(1, idx = $$props.idx);
    		if ('highlightComp' in $$props) $$invalidate(2, highlightComp = $$props.highlightComp);
    		if ('delCallback' in $$props) $$invalidate(9, delCallback = $$props.delCallback);
    		if ('cardClickCallback' in $$props) $$invalidate(10, cardClickCallback = $$props.cardClickCallback);
    		if ('exportCallback' in $$props) $$invalidate(11, exportCallback = $$props.exportCallback);
    		if ('starCallback' in $$props) $$invalidate(12, starCallback = $$props.starCallback);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		comp,
    		idx,
    		highlightComp,
    		$AppData,
    		$HeroData,
    		handleDeleteButtonClick,
    		handleCompCardClick,
    		handleExportButtonClick,
    		handleStarClick,
    		delCallback,
    		cardClickCallback,
    		exportCallback,
    		starCallback,
    		func,
    		click_handler,
    		click_handler_1,
    		click_handler_2,
    		func_1,
    		func_2,
    		click_handler_3
    	];
    }

    class CompCard extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$p, create_fragment$p, safe_not_equal, {
    			comp: 0,
    			idx: 1,
    			highlightComp: 2,
    			delCallback: 9,
    			cardClickCallback: 10,
    			exportCallback: 11,
    			starCallback: 12
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "CompCard",
    			options,
    			id: create_fragment$p.name
    		});
    	}

    	get comp() {
    		throw new Error("<CompCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set comp(value) {
    		throw new Error("<CompCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get idx() {
    		throw new Error("<CompCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set idx(value) {
    		throw new Error("<CompCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get highlightComp() {
    		throw new Error("<CompCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set highlightComp(value) {
    		throw new Error("<CompCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get delCallback() {
    		throw new Error("<CompCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set delCallback(value) {
    		throw new Error("<CompCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get cardClickCallback() {
    		throw new Error("<CompCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set cardClickCallback(value) {
    		throw new Error("<CompCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get exportCallback() {
    		throw new Error("<CompCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set exportCallback(value) {
    		throw new Error("<CompCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get starCallback() {
    		throw new Error("<CompCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set starCallback(value) {
    		throw new Error("<CompCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const Artifacts = readable({
    	barricade: {
    		name: 'The Barricade',
    		image: './img/artifacts/barricade.jpg',
    		upgrades: [
    			{ unlock: 0,
    				desc: 'When the ally with the highest Combat Rating (excluding oneself) suffers fatal damage, the damage shall be ignored and the hero equiping the artifact loses <em>40%</em> of their current health, which is then converted into a shield that protects the ally for <em>12</em> seconds. This ability can be activated once every <em>30</em> seconds.',
    			},
    			{ unlock: 3,
    				desc: 'Ability can be activated once every <em>15</em> seconds.',
    			},
    		],
    		attributes: ['CR', 'HP'],
    		class: 'Tank',
    	},
    	blade: {
    		name: 'Dura\'s Blade',
    		image: './img/artifacts/blade.jpg',
    		upgrades: [
    			{ unlock: 0,
    				desc: 'Once the battle begins, Attack Rating increases <em>1%</em> every <em>3</em> seconds.',
    			},
    			{ unlock: 3,
    				desc: 'Increases Attack Rating by <em>1%</em> and ACC by <em>2</em> every <em>3</em> seconds.',
    			},
    			{ unlock: 5,
    				desc: 'Increases Attack Rating by <em>1.5%</em> and ACC by <em>3</em> every <em>3</em> seconds.',
    			},
    		],
    		attributes: ['ACC', 'ATK'],
    		class: 'Any',
    	},
    	call: {
    		name: 'Dura\'s Call',
    		image: './img/artifacts/call.jpg',
    		upgrades: [
    			{ unlock: 0,
    				desc: 'Restores <em>10</em> energy points per second. Effects of this ability are reduced by <em>15%</em> for every other ally currently within the same formation that equips this artifact.',
    			},
    			{ unlock: 3,
    				desc: 'Restores <em>14</em> energy points per second.',
    			},
    			{ unlock: 5,
    				desc: 'Restores <em>16</em> energy points per second. If slain, all remaining energy is shared amongst allied heroes.',
    			},
    		],
    		attributes: ['HASTE', 'MR'],
    		class: 'Any',
    	},
    	carnage: {
    		name: 'Carnage',
    		image: './img/artifacts/carnage.jpg',
    		upgrades: [
    			{ unlock: 0,
    				desc: 'Once the wielder\'s health falls below <em>50%</em> they are granted <em>15</em> Haste points and <em>32</em> Life Leech points for <em>8</em> seconds. These effects can be triggered once every <em>18</em> seconds.',
    			},
    			{ unlock: 3,
    				desc: 'Once the wielder\'s health falls below <em>50%</em> they are granted <em>20</em> Haste points and <em>40</em> Life Leech points for <em>8</em> seconds. These effects can be triggered once every <em>18</em> seconds.',
    			},
    		],
    		attributes: ['AS', 'ATK'],
    		class: 'Warrior',
    	},
    	chalice: {
    		name: 'Dura\'s Chalice of Vitality',
    		image: './img/artifacts/chalice.jpg',
    		upgrades: [
    			{ unlock: 0,
    				desc: 'Restores <em>1%</em> health per second for the first <em>30</em> seconds of a battle.',
    			},
    			{ unlock: 3,
    				desc: 'Restores <em>1%</em> health per second for the first <em>45</em> seconds of a battle.',
    			},
    			{ unlock: 5,
    				desc: 'Restores <em>1.5%</em> health per second for the first <em>30</em> seconds of a battle.',
    			},
    		],
    		attributes: ['HP', 'DEF'],
    		class: 'Any',
    	},
    	chaos: {
    		name: 'Chaos Bringer',
    		image: './img/artifacts/chaos.jpg',
    		upgrades: [
    			{ unlock: 0,
    				desc: 'The first <em>2</em> times the hero\'s Ultimate ability is used deals <em>180%</em> AoE damage to enemies ahead and permanently raises the hero\'s Haste by <em>10</em> points and Life Leech by <em>8</em> points.',
    			},
    			{ unlock: 3,
    				desc: 'The first <em>2</em> times the hero\'s Ultimate ability is used deals <em>220%</em> AoE damage to enemies ahead and permanently raises the hero\'s Haste by <em>15</em> points and Life Leech by <em>12</em> points.',
    			},
    		],
    		attributes: ['ACC', 'ATK'],
    		class: 'Warrior',
    	},
    	conviction: {
    		name: 'Dura\'s Conviction',
    		image: './img/artifacts/conviction.jpg',
    		upgrades: [
    			{ unlock: 0,
    				desc: 'Increases the wearer\'s Attack Rating by <em>5%</em> when there are no nearby enemies.',
    			},
    			{ unlock: 3,
    				desc: 'Attack Rating is increased by <em>7%</em>.',
    			},
    			{ unlock: 5,
    				desc: 'Unleashes a shockwave every <em>15</em> seconds that knocks back any nearby enemies.',
    			},
    		],
    		attributes: ['CRIT', 'ACC'],
    		class: 'Any',
    	},
    	drape: {
    		name: 'Dura\'s Drape',
    		image: './img/artifacts/drape.jpg',
    		upgrades: [
    			{ unlock: 0,
    				desc: 'Health Recovery Rate <em>+10%</em>.',
    			},
    			{ unlock: 3,
    				desc: 'Health Recovery Rate <em>+15%</em>.',
    			},
    			{ unlock: 5,
    				desc: 'Health Recovery Rate increases the more the wearer\'s health falls. Health Recovery Rate may be increased up to <em>+30%</em>.',
    			},
    		],
    		attributes: ['DEF'],
    		class: 'Any',
    	},
    	eye: {
    		name: 'Dura\'s Eye',
    		image: './img/artifacts/eye.jpg',
    		upgrades: [
    			{ unlock: 0,
    				desc: 'Grants <em>15</em> Haste points for 3 seconds when a Critical Strike occurs.',
    			},
    			{ unlock: 3,
    				desc: 'Grants <em>20</em> Haste Points.',
    			},
    			{ unlock: 5,
    				desc: 'Grants <em>25</em> Haste points and Critical Strikes deal <em>30%</em> more damage.',
    			},
    		],
    		attributes: ['CRIT', 'PR'],
    		class: 'Any',
    	},
    	grace: {
    		name: 'Dura\'s Grace',
    		image: './img/artifacts/grace.jpg',
    		upgrades: [
    			{ unlock: 0,
    				desc: 'Activates a divine shield that offsets up to <em>120%</em> damage over <em>5</em> seconds when wearer\'s ultimate ability is used.',
    			},
    			{ unlock: 3,
    				desc: 'Divine shield offsets up to <em>170%</em> damage.',
    			},
    			{ unlock: 5,
    				desc: 'Divine shield offsets up to <em>220%</em> damage and prevents any mind control effects for <em>3</em> seconds.',
    			},
    		],
    		attributes: ['DODGE', 'HP'],
    		class: 'Any',
    	},
    	limit: {
    		name: 'Life\'s Limit',
    		image: './img/artifacts/limit.jpg',
    		upgrades: [
    			{ unlock: 0,
    				desc: 'When the wielder receives damage from an enemy that is positioned relatively far away, the source of the attack shall be regarded as the central target, and the nearby enemies shall be dealt <em>150%</em> AoE damage which ignores Defense Ratings and reduces Haste by <em>12</em> points for <em>5</em> seconds. This effect may only be used once every <em>7</em> seconds.',
    			},
    			{ unlock: 3,
    				desc: 'When the wielder receives damage from an enemy that is positioned relatively far away, the source of the attack shall be regarded as the central target, and the nearby enemies shall be dealt <em>180%</em> AoE damage which ignores Defense Ratings and reduces Haste by <em>15</em> points for <em>5</em> seconds. This effect may only be used once every <em>5</em> seconds.',
    			},
    		],
    		attributes: ['RH', 'HP'],
    		class: 'Tank',
    	},
    	longbow: {
    		name: 'Verdant Longbow',
    		image: './img/artifacts/longbow.jpg',
    		upgrades: [
    			{ unlock: 0,
    				desc: 'Deals <em>230%</em> damage to a target, ignoring their Defense Ratings every <em>4</em> Normal Attacks.',
    			},
    			{ unlock: 3,
    				desc: 'Effect is triggered every <em>3</em> Normal Attacks.',
    			},
    		],
    		attributes: ['ACC', 'ATK'],
    		class: 'Ranger',
    	},
    	pauldron: {
    		name: 'Pauldron of Burning Fury',
    		image: './img/artifacts/pauldron.jpg',
    		upgrades: [
    			{ unlock: 0,
    				desc: 'After being dealt damage by an enemy, the wielder immediately deals damage to the attacker that has a value equal to <em>8%</em> of the health already lost by the wielder. This effect can only be triggered up to one time every <em>5</em> seconds.',
    			},
    			{ unlock: 3,
    				desc: 'After being dealt damage by an enemy, the wielder immediately deals damage to the attacker that has a value equal to <em>12%</em> of the health already lost by the wielder. This effect can only be triggered up to one time every <em>3</em> seconds.',
    			},
    		],
    		attributes: ['HP', 'ATK'],
    		class: 'Warrior',
    	},
    	seraphic: {
    		name: 'Seraphic Tide',
    		image: './img/artifacts/seraphic.jpg',
    		upgrades: [
    			{ unlock: 0,
    				desc: 'Generates water orbs the first <em>2</em> times that the wielder\'s Ultimate ability is used. Water orbs can bounce between both non-summoned enemies and allies up to <em>3</em> times. Allied heroes struck by an orb recover health equal to <em>180%</em> of the wielder\'s Attack Rating and gain <em>10</em> Haste points over <em>6</em> seconds. Enemy heroes struck by an orb are dealt <em>150%</em> damage and lose <em>10</em> haste points over <em>6</em> seconds.',
    			},
    			{ unlock: 3,
    				desc: 'Water orbs are generated the first <em>3</em> times the wielder\'s Ultimate ability is used.',
    			},
    		],
    		attributes: ['HR', 'ATK'],
    		class: 'Support',
    	},
    	shroud: {
    		name: 'Shroud of Verdure',
    		image: './img/artifacts/shroud.jpg',
    		upgrades: [
    			{ unlock: 0,
    				desc: 'Grants a shield at the beginning of battles with a value equal to <em>60%</em> of the wearer\'s max health that lasts <em>8</em> seconds. Wearer\'s Attack Rating is increased by <em>20%</em> while the shield exists.',
    			},
    			{ unlock: 3,
    				desc: 'Grants a shield at the beginning of battles with a value equal to <em>60%</em> of the wearer\'s max health that lasts <em>8</em> seconds. Wearer\'s Attack Rating is increased by <em>25%</em> while the shield exists.',
    			},
    		],
    		attributes: ['CRIT', 'HP'],
    		class: 'Ranger',
    	},
    	tidebearer: {
    		name: 'Tidebearer',
    		image: './img/artifacts/tidebearer.jpg',
    		upgrades: [
    			{ unlock: 0,
    				desc: 'During battles the wielder shall gain a shield every <em>15</em> seconds that has a value equal to <em>30%</em> of their max health, which exists for <em>5</em> seconds. If the shield still exists after its timer has elapsed, every <em>2%</em> of the shield\'s value will be converted into <em>12</em> Energy points but shall not exceed <em>120</em> Energy points.',
    			},
    			{ unlock: 3,
    				desc: 'During battles the wielder shall gain a shield every <em>15</em> seconds that has a value equal to <em>40%</em> of their max health, which exists for <em>5</em> seconds. If the shield still exists after its timer has elapsed, every <em>2%</em> of the shield\'s value will be converted into <em>12</em> Energy points but shall not exceed <em>120</em> Energy points.',
    			},
    		],
    		attributes: ['CR', 'HP'],
    		class: 'Support',
    	},
    	waistband: {
    		name: 'Waistband of Resistance',
    		image: './img/artifacts/waistband.jpg',
    		upgrades: [
    			{ unlock: 0,
    				desc: 'Deals <em>130%</em> damage to a non-summoned enemy when they are under the effects of a control ability, and also grants the wearer a shield equal to <em>10%</em> of their max health, which exists for <em>9</em> seconds. This ability can target the same enemy once every <em>12</em> seconds.',
    			},
    			{ unlock: 3,
    				desc: 'Shield\'s value is equal to <em>15%</em> of the wearer\'s max health.',
    			},
    		],
    		attributes: ['HP', 'DEF'],
    		class: 'Tank',
    	},
    	warden: {
    		name: 'Warden of the Arcane',
    		image: './img/artifacts/warden.jpg',
    		upgrades: [
    			{ unlock: 0,
    				desc: 'When damage is dealt to enemies, an additional <em>160%</em> damage is also dealt to them. Can be used against the same enemy once every <em>12</em> seconds.',
    			},
    			{ unlock: 3,
    				desc: 'Deals <em>190%</em> additional damage.',
    			},
    		],
    		attributes: ['HASTE', 'DEF', 'ATK'],
    		class: 'Mage',
    	},
    	windbinder: {
    		name: 'Windbinder',
    		image: './img/artifacts/windbinder.jpg',
    		upgrades: [
    			{ unlock: 0,
    				desc: 'Wielder immediately gains <em>250</em> Energy points at the start of battles. Wielder loses <em>40</em> Energy points per second for <em>5</em> seconds after using their Ultimate ability for the first time.',
    			},
    			{ unlock: 3,
    				desc: 'Wielder immediately gains <em>300</em> Energy points at the start of battles. Wielder loses <em>40</em> Energy points per second for <em>5</em> seconds after using their Ultimate ability for the first time.',
    			},
    		],
    		attributes: ['CA', 'ATK', 'HP'],
    		class: 'Mage',
    	},
    	wingwarden: {
    		name: 'Winged Warden',
    		image: './img/artifacts/wingwarden.jpg',
    		upgrades: [
    			{ unlock: 0,
    				desc: 'When the wielder receives damage from an enemy hero for the first time, the wielder shall steal Health Regeneration and Energy Recovery from the attacker for the following <em>5</em> seconds.',
    			},
    			{ unlock: 3,
    				desc: 'When the wielder receives damage from an enemy hero for the first time, the wielder shall steal Health Regeneration and Energy Recovery from the attacker for the following <em>7</em> seconds.',
    			},
    		],
    		attributes: ['HASTE', 'ATK', 'HP'],
    		class: 'Mage',
    	},
    });

    /* src\modals\Confirm.svelte generated by Svelte v3.41.0 */
    const file$l = "src\\modals\\Confirm.svelte";

    function create_fragment$o(ctx) {
    	let div2;
    	let div0;
    	let span;
    	let t0;
    	let t1;
    	let div1;
    	let button0;
    	let t3;
    	let button1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div0 = element("div");
    			span = element("span");
    			t0 = text$2(/*message*/ ctx[0]);
    			t1 = space();
    			div1 = element("div");
    			button0 = element("button");
    			button0.textContent = "Yes";
    			t3 = space();
    			button1 = element("button");
    			button1.textContent = "Cancel";
    			add_location(span, file$l, 33, 19, 742);
    			attr_dev(div0, "class", "text svelte-1fxchds");
    			add_location(div0, file$l, 33, 1, 724);
    			attr_dev(button0, "type", "button");
    			attr_dev(button0, "class", "optionButton confirmButton svelte-1fxchds");
    			add_location(button0, file$l, 35, 2, 802);
    			attr_dev(button1, "type", "button");
    			attr_dev(button1, "class", "optionButton cancelButton svelte-1fxchds");
    			add_location(button1, file$l, 36, 2, 900);
    			attr_dev(div1, "class", "optionsArea svelte-1fxchds");
    			add_location(div1, file$l, 34, 1, 773);
    			attr_dev(div2, "class", "confirmContainer");
    			add_location(div2, file$l, 32, 0, 691);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			append_dev(div0, span);
    			append_dev(span, t0);
    			append_dev(div2, t1);
    			append_dev(div2, div1);
    			append_dev(div1, button0);
    			append_dev(div1, t3);
    			append_dev(div1, button1);

    			if (!mounted) {
    				dispose = [
    					listen_dev(window, "popstate", /*handlePopState*/ ctx[3], false, false, false),
    					listen_dev(button0, "click", /*handleConfirm*/ ctx[2], false, false, false),
    					listen_dev(button1, "click", /*handleCancel*/ ctx[1], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*message*/ 1) set_data_dev(t0, /*message*/ ctx[0]);
    		},
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$o.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$o($$self, $$props, $$invalidate) {
    	let $AppData;
    	validate_store(AppData$1, 'AppData');
    	component_subscribe($$self, AppData$1, $$value => $$invalidate(7, $AppData = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Confirm', slots, []);
    	let { message = "Are you sure?" } = $$props;

    	let { onCancel = () => {
    		
    	} } = $$props;

    	let { onConfirm = () => {
    		
    	} } = $$props;

    	let { confirmData = 0 } = $$props;
    	const { close } = getContext('simple-modal');

    	onMount(async () => {
    		history.pushState({ view: $AppData.activeView, modal: true }, "Confirm", `?view=${$AppData.activeView}&modal=true`);
    	});

    	function handleCancel() {
    		onCancel();
    		close();
    	}

    	function handleConfirm() {
    		onConfirm(confirmData);
    		close();
    	}

    	function handlePopState() {
    		close();
    	}

    	const writable_props = ['message', 'onCancel', 'onConfirm', 'confirmData'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Confirm> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('message' in $$props) $$invalidate(0, message = $$props.message);
    		if ('onCancel' in $$props) $$invalidate(4, onCancel = $$props.onCancel);
    		if ('onConfirm' in $$props) $$invalidate(5, onConfirm = $$props.onConfirm);
    		if ('confirmData' in $$props) $$invalidate(6, confirmData = $$props.confirmData);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		getContext,
    		AppData: AppData$1,
    		message,
    		onCancel,
    		onConfirm,
    		confirmData,
    		close,
    		handleCancel,
    		handleConfirm,
    		handlePopState,
    		$AppData
    	});

    	$$self.$inject_state = $$props => {
    		if ('message' in $$props) $$invalidate(0, message = $$props.message);
    		if ('onCancel' in $$props) $$invalidate(4, onCancel = $$props.onCancel);
    		if ('onConfirm' in $$props) $$invalidate(5, onConfirm = $$props.onConfirm);
    		if ('confirmData' in $$props) $$invalidate(6, confirmData = $$props.confirmData);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		message,
    		handleCancel,
    		handleConfirm,
    		handlePopState,
    		onCancel,
    		onConfirm,
    		confirmData
    	];
    }

    class Confirm extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$o, create_fragment$o, safe_not_equal, {
    			message: 0,
    			onCancel: 4,
    			onConfirm: 5,
    			confirmData: 6
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Confirm",
    			options,
    			id: create_fragment$o.name
    		});
    	}

    	get message() {
    		throw new Error("<Confirm>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set message(value) {
    		throw new Error("<Confirm>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onCancel() {
    		throw new Error("<Confirm>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onCancel(value) {
    		throw new Error("<Confirm>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onConfirm() {
    		throw new Error("<Confirm>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onConfirm(value) {
    		throw new Error("<Confirm>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get confirmData() {
    		throw new Error("<Confirm>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set confirmData(value) {
    		throw new Error("<Confirm>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\shared\TutorialBox.svelte generated by Svelte v3.41.0 */

    const file$k = "src\\shared\\TutorialBox.svelte";

    // (18:1) {:else}
    function create_else_block$a(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "i";
    			attr_dev(span, "class", "infoIcon svelte-wyxpqg");
    			add_location(span, file$k, 18, 2, 494);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$a.name,
    		type: "else",
    		source: "(18:1) {:else}",
    		ctx
    	});

    	return block;
    }

    // (16:19) 
    function create_if_block_1$7(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			attr_dev(span, "class", "warningIcon svelte-wyxpqg");
    			add_location(span, file$k, 16, 2, 447);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$7.name,
    		type: "if",
    		source: "(16:19) ",
    		ctx
    	});

    	return block;
    }

    // (14:1) {#if error}
    function create_if_block$e(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "!";
    			attr_dev(span, "class", "errorIcon svelte-wyxpqg");
    			add_location(span, file$k, 14, 2, 390);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$e.name,
    		type: "if",
    		source: "(14:1) {#if error}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$n(ctx) {
    	let div1;
    	let t;
    	let div0;
    	let span;
    	let current;
    	let mounted;
    	let dispose;

    	function select_block_type(ctx, dirty) {
    		if (/*error*/ ctx[2]) return create_if_block$e;
    		if (/*warning*/ ctx[1]) return create_if_block_1$7;
    		return create_else_block$a;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);
    	const default_slot_template = /*#slots*/ ctx[7].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], null);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			if_block.c();
    			t = space();
    			div0 = element("div");
    			span = element("span");
    			if (default_slot) default_slot.c();
    			attr_dev(span, "class", "infoText svelte-wyxpqg");
    			add_location(span, file$k, 21, 2, 562);
    			attr_dev(div0, "class", "textArea svelte-wyxpqg");
    			add_location(div0, file$k, 20, 1, 536);
    			attr_dev(div1, "class", "infoBox svelte-wyxpqg");
    			toggle_class(div1, "warning", /*warning*/ ctx[1]);
    			toggle_class(div1, "error", /*error*/ ctx[2]);
    			toggle_class(div1, "noMargin", /*noMargin*/ ctx[0]);
    			toggle_class(div1, "clickable", /*clickable*/ ctx[3]);
    			add_location(div1, file$k, 12, 0, 227);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			if_block.m(div1, null);
    			append_dev(div1, t);
    			append_dev(div1, div0);
    			append_dev(div0, span);

    			if (default_slot) {
    				default_slot.m(span, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(div1, "click", /*handleBoxClick*/ ctx[4], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (current_block_type !== (current_block_type = select_block_type(ctx))) {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(div1, t);
    				}
    			}

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 64)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[6],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[6])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[6], dirty, null),
    						null
    					);
    				}
    			}

    			if (dirty & /*warning*/ 2) {
    				toggle_class(div1, "warning", /*warning*/ ctx[1]);
    			}

    			if (dirty & /*error*/ 4) {
    				toggle_class(div1, "error", /*error*/ ctx[2]);
    			}

    			if (dirty & /*noMargin*/ 1) {
    				toggle_class(div1, "noMargin", /*noMargin*/ ctx[0]);
    			}

    			if (dirty & /*clickable*/ 8) {
    				toggle_class(div1, "clickable", /*clickable*/ ctx[3]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if_block.d();
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$n.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$n($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('TutorialBox', slots, ['default']);
    	let { noMargin = false } = $$props;
    	let { warning = false } = $$props;
    	let { error = false } = $$props;
    	let { clickable = false } = $$props;

    	let { onClick = () => {
    		
    	} } = $$props;

    	function handleBoxClick() {
    		onClick();
    	}

    	const writable_props = ['noMargin', 'warning', 'error', 'clickable', 'onClick'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<TutorialBox> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('noMargin' in $$props) $$invalidate(0, noMargin = $$props.noMargin);
    		if ('warning' in $$props) $$invalidate(1, warning = $$props.warning);
    		if ('error' in $$props) $$invalidate(2, error = $$props.error);
    		if ('clickable' in $$props) $$invalidate(3, clickable = $$props.clickable);
    		if ('onClick' in $$props) $$invalidate(5, onClick = $$props.onClick);
    		if ('$$scope' in $$props) $$invalidate(6, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		noMargin,
    		warning,
    		error,
    		clickable,
    		onClick,
    		handleBoxClick
    	});

    	$$self.$inject_state = $$props => {
    		if ('noMargin' in $$props) $$invalidate(0, noMargin = $$props.noMargin);
    		if ('warning' in $$props) $$invalidate(1, warning = $$props.warning);
    		if ('error' in $$props) $$invalidate(2, error = $$props.error);
    		if ('clickable' in $$props) $$invalidate(3, clickable = $$props.clickable);
    		if ('onClick' in $$props) $$invalidate(5, onClick = $$props.onClick);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [noMargin, warning, error, clickable, handleBoxClick, onClick, $$scope, slots];
    }

    class TutorialBox extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$n, create_fragment$n, safe_not_equal, {
    			noMargin: 0,
    			warning: 1,
    			error: 2,
    			clickable: 3,
    			onClick: 5
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "TutorialBox",
    			options,
    			id: create_fragment$n.name
    		});
    	}

    	get noMargin() {
    		throw new Error("<TutorialBox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set noMargin(value) {
    		throw new Error("<TutorialBox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get warning() {
    		throw new Error("<TutorialBox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set warning(value) {
    		throw new Error("<TutorialBox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get error() {
    		throw new Error("<TutorialBox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set error(value) {
    		throw new Error("<TutorialBox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get clickable() {
    		throw new Error("<TutorialBox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set clickable(value) {
    		throw new Error("<TutorialBox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onClick() {
    		throw new Error("<TutorialBox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onClick(value) {
    		throw new Error("<TutorialBox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\modals\ImportData.svelte generated by Svelte v3.41.0 */
    const file$j = "src\\modals\\ImportData.svelte";

    // (51:1) {#if !$AppData.dismissImportWarn}
    function create_if_block$d(ctx) {
    	let tutorialbox;
    	let current;

    	tutorialbox = new TutorialBox({
    			props: {
    				warning: true,
    				onClick: /*dismissWarn*/ ctx[6],
    				clickable: true,
    				$$slots: { default: [create_default_slot$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(tutorialbox.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(tutorialbox, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const tutorialbox_changes = {};

    			if (dirty & /*$$scope*/ 4096) {
    				tutorialbox_changes.$$scope = { dirty, ctx };
    			}

    			tutorialbox.$set(tutorialbox_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(tutorialbox.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(tutorialbox.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(tutorialbox, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$d.name,
    		type: "if",
    		source: "(51:1) {#if !$AppData.dismissImportWarn}",
    		ctx
    	});

    	return block;
    }

    // (52:2) <TutorialBox warning={true} onClick={dismissWarn} clickable={true}>
    function create_default_slot$5(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text$2("Warning: Importing bad data may introduce corruption, make the app unusable, or introduce unwanted information. Make sure you are importing data from a trusted source and you have a current backup of your data.");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$5.name,
    		type: "slot",
    		source: "(52:2) <TutorialBox warning={true} onClick={dismissWarn} clickable={true}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$m(ctx) {
    	let div5;
    	let t0;
    	let div0;
    	let h3;
    	let t1;
    	let t2;
    	let textarea;
    	let t3;
    	let div4;
    	let div2;
    	let div1;
    	let span;
    	let t4;
    	let t5;
    	let div3;
    	let button;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block = !/*$AppData*/ ctx[4].dismissImportWarn && create_if_block$d(ctx);

    	const block = {
    		c: function create() {
    			div5 = element("div");
    			if (if_block) if_block.c();
    			t0 = space();
    			div0 = element("div");
    			h3 = element("h3");
    			t1 = text$2(/*title*/ ctx[0]);
    			t2 = space();
    			textarea = element("textarea");
    			t3 = space();
    			div4 = element("div");
    			div2 = element("div");
    			div1 = element("div");
    			span = element("span");
    			t4 = text$2(/*statusMsg*/ ctx[3]);
    			t5 = space();
    			div3 = element("div");
    			button = element("button");
    			button.textContent = "Import";
    			attr_dev(h3, "class", "title svelte-1nxz2ja");
    			add_location(h3, file$j, 56, 2, 1649);
    			attr_dev(div0, "class", "titleContainer svelte-1nxz2ja");
    			add_location(div0, file$j, 55, 1, 1617);
    			attr_dev(textarea, "class", "dataInput svelte-1nxz2ja");
    			add_location(textarea, file$j, 58, 1, 1691);
    			add_location(span, file$j, 61, 80, 1877);
    			attr_dev(div1, "class", "statusText svelte-1nxz2ja");
    			toggle_class(div1, "error", /*status*/ ctx[2] > 0);
    			toggle_class(div1, "visible", /*status*/ ctx[2] >= 0);
    			add_location(div1, file$j, 61, 3, 1800);
    			attr_dev(div2, "class", "status svelte-1nxz2ja");
    			add_location(div2, file$j, 60, 2, 1775);
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "submitButton svelte-1nxz2ja");
    			add_location(button, file$j, 64, 3, 1950);
    			attr_dev(div3, "class", "submitArea svelte-1nxz2ja");
    			add_location(div3, file$j, 63, 2, 1921);
    			attr_dev(div4, "class", "footer svelte-1nxz2ja");
    			add_location(div4, file$j, 59, 1, 1751);
    			attr_dev(div5, "class", "container svelte-1nxz2ja");
    			add_location(div5, file$j, 49, 0, 1207);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div5, anchor);
    			if (if_block) if_block.m(div5, null);
    			append_dev(div5, t0);
    			append_dev(div5, div0);
    			append_dev(div0, h3);
    			append_dev(h3, t1);
    			append_dev(div5, t2);
    			append_dev(div5, textarea);
    			set_input_value(textarea, /*data*/ ctx[1]);
    			append_dev(div5, t3);
    			append_dev(div5, div4);
    			append_dev(div4, div2);
    			append_dev(div2, div1);
    			append_dev(div1, span);
    			append_dev(span, t4);
    			append_dev(div4, t5);
    			append_dev(div4, div3);
    			append_dev(div3, button);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(window, "popstate", /*handlePopState*/ ctx[7], false, false, false),
    					listen_dev(textarea, "input", /*textarea_input_handler*/ ctx[10]),
    					listen_dev(button, "click", /*handleImport*/ ctx[5], false, false, false),
    					listen_dev(div5, "keyup", keyup_handler, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (!/*$AppData*/ ctx[4].dismissImportWarn) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*$AppData*/ 16) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$d(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div5, t0);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			if (!current || dirty & /*title*/ 1) set_data_dev(t1, /*title*/ ctx[0]);

    			if (dirty & /*data*/ 2) {
    				set_input_value(textarea, /*data*/ ctx[1]);
    			}

    			if (!current || dirty & /*statusMsg*/ 8) set_data_dev(t4, /*statusMsg*/ ctx[3]);

    			if (dirty & /*status*/ 4) {
    				toggle_class(div1, "error", /*status*/ ctx[2] > 0);
    			}

    			if (dirty & /*status*/ 4) {
    				toggle_class(div1, "visible", /*status*/ ctx[2] >= 0);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div5);
    			if (if_block) if_block.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$m.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const keyup_handler = e => e.stopPropagation();

    function instance$m($$self, $$props, $$invalidate) {
    	let $AppData;
    	validate_store(AppData$1, 'AppData');
    	component_subscribe($$self, AppData$1, $$value => $$invalidate(4, $AppData = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ImportData', slots, []);

    	let { dataHandler = () => {
    		
    	} } = $$props;

    	let { saveAppData = () => {
    		
    	} } = $$props;

    	let { title = "Paste Data:" } = $$props;
    	const { close } = getContext('simple-modal');
    	let data;
    	let status = -1;
    	let statusMsg = 'Awaiting data import';

    	onMount(async () => {
    		history.pushState({ view: $AppData.activeView, modal: true }, "Import Data", `?view=${$AppData.activeView}&modal=true`);
    	});

    	async function handleImport() {
    		if (!data) {
    			$$invalidate(2, status = 1);
    			$$invalidate(3, statusMsg = "Import data cannot be empty");
    			return;
    		}

    		const returnObj = await dataHandler(data.trim());

    		if (returnObj.retCode !== 0) {
    			// data import error occurred
    			$$invalidate(2, status = returnObj.retCode);

    			$$invalidate(3, statusMsg = returnObj.message);
    		} else {
    			// data import successful
    			$$invalidate(2, status = 0);

    			$$invalidate(3, statusMsg = returnObj.message);
    			setTimeout(() => close(), 400);
    		}
    	}

    	function dismissWarn() {
    		set_store_value(AppData$1, $AppData.dismissImportWarn = true, $AppData);
    		saveAppData();
    	}

    	function handlePopState() {
    		close();
    	}

    	const writable_props = ['dataHandler', 'saveAppData', 'title'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ImportData> was created with unknown prop '${key}'`);
    	});

    	function textarea_input_handler() {
    		data = this.value;
    		$$invalidate(1, data);
    	}

    	$$self.$$set = $$props => {
    		if ('dataHandler' in $$props) $$invalidate(8, dataHandler = $$props.dataHandler);
    		if ('saveAppData' in $$props) $$invalidate(9, saveAppData = $$props.saveAppData);
    		if ('title' in $$props) $$invalidate(0, title = $$props.title);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		getContext,
    		TutorialBox,
    		AppData: AppData$1,
    		dataHandler,
    		saveAppData,
    		title,
    		close,
    		data,
    		status,
    		statusMsg,
    		handleImport,
    		dismissWarn,
    		handlePopState,
    		$AppData
    	});

    	$$self.$inject_state = $$props => {
    		if ('dataHandler' in $$props) $$invalidate(8, dataHandler = $$props.dataHandler);
    		if ('saveAppData' in $$props) $$invalidate(9, saveAppData = $$props.saveAppData);
    		if ('title' in $$props) $$invalidate(0, title = $$props.title);
    		if ('data' in $$props) $$invalidate(1, data = $$props.data);
    		if ('status' in $$props) $$invalidate(2, status = $$props.status);
    		if ('statusMsg' in $$props) $$invalidate(3, statusMsg = $$props.statusMsg);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		title,
    		data,
    		status,
    		statusMsg,
    		$AppData,
    		handleImport,
    		dismissWarn,
    		handlePopState,
    		dataHandler,
    		saveAppData,
    		textarea_input_handler
    	];
    }

    class ImportData extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$m, create_fragment$m, safe_not_equal, { dataHandler: 8, saveAppData: 9, title: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ImportData",
    			options,
    			id: create_fragment$m.name
    		});
    	}

    	get dataHandler() {
    		throw new Error("<ImportData>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set dataHandler(value) {
    		throw new Error("<ImportData>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get saveAppData() {
    		throw new Error("<ImportData>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set saveAppData(value) {
    		throw new Error("<ImportData>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get title() {
    		throw new Error("<ImportData>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set title(value) {
    		throw new Error("<ImportData>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\shared\SIFurnBox.svelte generated by Svelte v3.41.0 */

    const { Error: Error_1$7 } = globals;
    const file$i = "src\\shared\\SIFurnBox.svelte";

    // (52:1) {:else}
    function create_else_block_2$4(ctx) {
    	let p;
    	let t0;
    	let t1;

    	const block = {
    		c: function create() {
    			p = element("p");
    			t0 = text$2(/*num*/ ctx[0]);
    			t1 = text$2("f");
    			attr_dev(p, "class", "num svelte-fa0944");
    			add_location(p, file$i, 52, 2, 1300);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t0);
    			append_dev(p, t1);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*num*/ 1) set_data_dev(t0, /*num*/ ctx[0]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_2$4.name,
    		type: "else",
    		source: "(52:1) {:else}",
    		ctx
    	});

    	return block;
    }

    // (38:1) {#if type === 'si'}
    function create_if_block$c(ctx) {
    	let if_block_anchor;

    	function select_block_type_1(ctx, dirty) {
    		if (/*fullName*/ ctx[4]) return create_if_block_1$6;
    		if (/*num*/ ctx[0] < 0) return create_if_block_3$6;
    		return create_else_block_1$5;
    	}

    	let current_block_type = select_block_type_1(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty$3();
    		},
    		m: function mount(target, anchor) {
    			if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$c.name,
    		type: "if",
    		source: "(38:1) {#if type === 'si'}",
    		ctx
    	});

    	return block;
    }

    // (48:3) {:else}
    function create_else_block_1$5(ctx) {
    	let p;
    	let t0;
    	let t1;

    	const block = {
    		c: function create() {
    			p = element("p");
    			t0 = text$2("+");
    			t1 = text$2(/*num*/ ctx[0]);
    			attr_dev(p, "class", "num svelte-fa0944");
    			add_location(p, file$i, 48, 3, 1242);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t0);
    			append_dev(p, t1);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*num*/ 1) set_data_dev(t1, /*num*/ ctx[0]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$5.name,
    		type: "else",
    		source: "(48:3) {:else}",
    		ctx
    	});

    	return block;
    }

    // (46:3) {#if num < 0}
    function create_if_block_3$6(ctx) {
    	let p;

    	const block = {
    		c: function create() {
    			p = element("p");
    			p.textContent = "OFF";
    			attr_dev(p, "class", "num svelte-fa0944");
    			add_location(p, file$i, 46, 4, 1203);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$6.name,
    		type: "if",
    		source: "(46:3) {#if num < 0}",
    		ctx
    	});

    	return block;
    }

    // (39:2) {#if fullName}
    function create_if_block_1$6(ctx) {
    	let if_block_anchor;

    	function select_block_type_2(ctx, dirty) {
    		if (/*num*/ ctx[0] < 0) return create_if_block_2$6;
    		return create_else_block$9;
    	}

    	let current_block_type = select_block_type_2(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty$3();
    		},
    		m: function mount(target, anchor) {
    			if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type_2(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$6.name,
    		type: "if",
    		source: "(39:2) {#if fullName}",
    		ctx
    	});

    	return block;
    }

    // (42:3) {:else}
    function create_else_block$9(ctx) {
    	let p;
    	let t0;
    	let t1;

    	const block = {
    		c: function create() {
    			p = element("p");
    			t0 = text$2("SI +");
    			t1 = text$2(/*num*/ ctx[0]);
    			attr_dev(p, "class", "num svelte-fa0944");
    			add_location(p, file$i, 42, 4, 1130);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t0);
    			append_dev(p, t1);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*num*/ 1) set_data_dev(t1, /*num*/ ctx[0]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$9.name,
    		type: "else",
    		source: "(42:3) {:else}",
    		ctx
    	});

    	return block;
    }

    // (40:3) {#if num < 0}
    function create_if_block_2$6(ctx) {
    	let p;

    	const block = {
    		c: function create() {
    			p = element("p");
    			p.textContent = "SI OFF";
    			attr_dev(p, "class", "num svelte-fa0944");
    			add_location(p, file$i, 40, 4, 1087);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$6.name,
    		type: "if",
    		source: "(40:3) {#if num < 0}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$l(ctx) {
    	let div;
    	let div_class_value;

    	function select_block_type(ctx, dirty) {
    		if (/*type*/ ctx[1] === 'si') return create_if_block$c;
    		return create_else_block_2$4;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if_block.c();
    			attr_dev(div, "class", div_class_value = "box " + (/*type*/ ctx[1] === 'si' ? 'si' : 'furn') + " lv-" + /*num*/ ctx[0] + " svelte-fa0944");
    			set_style(div, "max-width", /*maxWidth*/ ctx[2]);
    			set_style(div, "font-size", /*fontSize*/ ctx[3]);
    			set_style(div, "width", /*maxWidth*/ ctx[2]);
    			add_location(div, file$i, 36, 0, 892);
    		},
    		l: function claim(nodes) {
    			throw new Error_1$7("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if_block.m(div, null);
    		},
    		p: function update(ctx, [dirty]) {
    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(div, null);
    				}
    			}

    			if (dirty & /*type, num*/ 3 && div_class_value !== (div_class_value = "box " + (/*type*/ ctx[1] === 'si' ? 'si' : 'furn') + " lv-" + /*num*/ ctx[0] + " svelte-fa0944")) {
    				attr_dev(div, "class", div_class_value);
    			}

    			if (dirty & /*maxWidth*/ 4) {
    				set_style(div, "max-width", /*maxWidth*/ ctx[2]);
    			}

    			if (dirty & /*fontSize*/ 8) {
    				set_style(div, "font-size", /*fontSize*/ ctx[3]);
    			}

    			if (dirty & /*maxWidth*/ 4) {
    				set_style(div, "width", /*maxWidth*/ ctx[2]);
    			}
    		},
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$l.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$l($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('SIFurnBox', slots, []);
    	let { num = 0 } = $$props;
    	let { type = "si" } = $$props;
    	let { maxWidth = '60px' } = $$props;
    	let { fontSize = '1.5rem' } = $$props;
    	let { fullName = false } = $$props;

    	switch (type.toLowerCase()) {
    		case 'si':
    			switch (num) {
    				case -1:
    					break;
    				case 0:
    					break;
    				case 5:
    					break;
    				case 10:
    					break;
    				case 15:
    					break;
    				case 20:
    					break;
    				case 25:
    					break;
    				case 30:
    					break;
    				default:
    					throw new Error(`Invalid num specfified for SIFurnBox of si type: ${num}. Must be -1, 0, 5, 10, 15, 20, 25, or 30`);
    			}
    			break;
    		case 'furn':
    			switch (num) {
    				case 0:
    					break;
    				case 3:
    					break;
    				case 9:
    					break;
    				default:
    					throw new Error(`Invalid num specfified for SIFurnBox of furn type: ${num}. Must be 0, 3, or 9`);
    			}
    			break;
    		default:
    			throw new Error(`Invalid type specified for SIFurnBox: ${type}. Must be 'si' or 'furn'`);
    	}

    	const writable_props = ['num', 'type', 'maxWidth', 'fontSize', 'fullName'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<SIFurnBox> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('num' in $$props) $$invalidate(0, num = $$props.num);
    		if ('type' in $$props) $$invalidate(1, type = $$props.type);
    		if ('maxWidth' in $$props) $$invalidate(2, maxWidth = $$props.maxWidth);
    		if ('fontSize' in $$props) $$invalidate(3, fontSize = $$props.fontSize);
    		if ('fullName' in $$props) $$invalidate(4, fullName = $$props.fullName);
    	};

    	$$self.$capture_state = () => ({ num, type, maxWidth, fontSize, fullName });

    	$$self.$inject_state = $$props => {
    		if ('num' in $$props) $$invalidate(0, num = $$props.num);
    		if ('type' in $$props) $$invalidate(1, type = $$props.type);
    		if ('maxWidth' in $$props) $$invalidate(2, maxWidth = $$props.maxWidth);
    		if ('fontSize' in $$props) $$invalidate(3, fontSize = $$props.fontSize);
    		if ('fullName' in $$props) $$invalidate(4, fullName = $$props.fullName);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [num, type, maxWidth, fontSize, fullName];
    }

    class SIFurnBox extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$l, create_fragment$l, safe_not_equal, {
    			num: 0,
    			type: 1,
    			maxWidth: 2,
    			fontSize: 3,
    			fullName: 4
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SIFurnBox",
    			options,
    			id: create_fragment$l.name
    		});
    	}

    	get num() {
    		throw new Error_1$7("<SIFurnBox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set num(value) {
    		throw new Error_1$7("<SIFurnBox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get type() {
    		throw new Error_1$7("<SIFurnBox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set type(value) {
    		throw new Error_1$7("<SIFurnBox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get maxWidth() {
    		throw new Error_1$7("<SIFurnBox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set maxWidth(value) {
    		throw new Error_1$7("<SIFurnBox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fontSize() {
    		throw new Error_1$7("<SIFurnBox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fontSize(value) {
    		throw new Error_1$7("<SIFurnBox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fullName() {
    		throw new Error_1$7("<SIFurnBox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fullName(value) {
    		throw new Error_1$7("<SIFurnBox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\modals\HeroDetail.svelte generated by Svelte v3.41.0 */
    const file$h = "src\\modals\\HeroDetail.svelte";

    function get_each_context$c(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[14] = list[i];
    	return child_ctx;
    }

    function get_each_context_1$7(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[14] = list[i];
    	return child_ctx;
    }

    function get_each_context_2$5(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[19] = list[i];
    	child_ctx[21] = i;
    	return child_ctx;
    }

    function get_each_context_3$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[14] = list[i];
    	return child_ctx;
    }

    function get_each_context_4$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[19] = list[i];
    	child_ctx[21] = i;
    	return child_ctx;
    }

    // (69:5) {#each hero.skills as skill, i}
    function create_each_block_4$3(ctx) {
    	let img;
    	let img_class_value;
    	let img_src_value;
    	let mounted;
    	let dispose;

    	function click_handler_1() {
    		return /*click_handler_1*/ ctx[8](/*i*/ ctx[21]);
    	}

    	const block = {
    		c: function create() {
    			img = element("img");
    			attr_dev(img, "draggable", "false");

    			attr_dev(img, "class", img_class_value = "" + (null_to_empty(/*skillShown*/ ctx[3] === /*i*/ ctx[21]
    			? 'activeSkill'
    			: '') + " svelte-12rj2a7"));

    			if (!src_url_equal(img.src, img_src_value = /*skill*/ ctx[19].image)) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", /*skill*/ ctx[19].name);
    			add_location(img, file$h, 69, 5, 2552);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);

    			if (!mounted) {
    				dispose = listen_dev(img, "click", click_handler_1, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*skillShown*/ 8 && img_class_value !== (img_class_value = "" + (null_to_empty(/*skillShown*/ ctx[3] === /*i*/ ctx[21]
    			? 'activeSkill'
    			: '') + " svelte-12rj2a7"))) {
    				attr_dev(img, "class", img_class_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_4$3.name,
    		type: "each",
    		source: "(69:5) {#each hero.skills as skill, i}",
    		ctx
    	});

    	return block;
    }

    // (79:6) {#each skill.upgrades as upgrade}
    function create_each_block_3$3(ctx) {
    	let p0;
    	let t0;
    	let t1_value = /*upgrade*/ ctx[14].unlock + "";
    	let t1;
    	let t2;
    	let t3;
    	let p1;
    	let raw_value = /*upgrade*/ ctx[14].desc + "";

    	const block = {
    		c: function create() {
    			p0 = element("p");
    			t0 = text$2("lv ");
    			t1 = text$2(t1_value);
    			t2 = text$2(":");
    			t3 = space();
    			p1 = element("p");
    			attr_dev(p0, "class", "skillUnlock svelte-12rj2a7");
    			add_location(p0, file$h, 79, 7, 3055);
    			attr_dev(p1, "class", "skillDesc svelte-12rj2a7");
    			add_location(p1, file$h, 80, 7, 3111);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p0, anchor);
    			append_dev(p0, t0);
    			append_dev(p0, t1);
    			append_dev(p0, t2);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, p1, anchor);
    			p1.innerHTML = raw_value;
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p0);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(p1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_3$3.name,
    		type: "each",
    		source: "(79:6) {#each skill.upgrades as upgrade}",
    		ctx
    	});

    	return block;
    }

    // (74:5) {#each hero.skills as skill, i}
    function create_each_block_2$5(ctx) {
    	let div;
    	let h5;
    	let t0_value = /*skill*/ ctx[19].name + "";
    	let t0;
    	let t1;
    	let p0;
    	let t2;
    	let t3_value = /*skill*/ ctx[19].unlock + "";
    	let t3;
    	let t4;
    	let t5;
    	let p1;
    	let raw_value = /*skill*/ ctx[19].desc + "";
    	let t6;
    	let t7;
    	let div_class_value;
    	let each_value_3 = /*skill*/ ctx[19].upgrades;
    	validate_each_argument(each_value_3);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_3.length; i += 1) {
    		each_blocks[i] = create_each_block_3$3(get_each_context_3$3(ctx, each_value_3, i));
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			h5 = element("h5");
    			t0 = text$2(t0_value);
    			t1 = space();
    			p0 = element("p");
    			t2 = text$2("lv ");
    			t3 = text$2(t3_value);
    			t4 = text$2(":");
    			t5 = space();
    			p1 = element("p");
    			t6 = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t7 = space();
    			attr_dev(h5, "class", "skillName svelte-12rj2a7");
    			add_location(h5, file$h, 75, 6, 2862);
    			attr_dev(p0, "class", "skillUnlock svelte-12rj2a7");
    			add_location(p0, file$h, 76, 6, 2909);
    			attr_dev(p1, "class", "skillDesc svelte-12rj2a7");
    			add_location(p1, file$h, 77, 6, 2962);

    			attr_dev(div, "class", div_class_value = "skill " + (/*skillShown*/ ctx[3] === /*i*/ ctx[21]
    			? 'skillVisible'
    			: '') + " svelte-12rj2a7");

    			add_location(div, file$h, 74, 5, 2793);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, h5);
    			append_dev(h5, t0);
    			append_dev(div, t1);
    			append_dev(div, p0);
    			append_dev(p0, t2);
    			append_dev(p0, t3);
    			append_dev(p0, t4);
    			append_dev(div, t5);
    			append_dev(div, p1);
    			p1.innerHTML = raw_value;
    			append_dev(div, t6);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}

    			append_dev(div, t7);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*hero*/ 16) {
    				each_value_3 = /*skill*/ ctx[19].upgrades;
    				validate_each_argument(each_value_3);
    				let i;

    				for (i = 0; i < each_value_3.length; i += 1) {
    					const child_ctx = get_each_context_3$3(ctx, each_value_3, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_3$3(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div, t7);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_3.length;
    			}

    			if (dirty & /*skillShown*/ 8 && div_class_value !== (div_class_value = "skill " + (/*skillShown*/ ctx[3] === /*i*/ ctx[21]
    			? 'skillVisible'
    			: '') + " svelte-12rj2a7")) {
    				attr_dev(div, "class", div_class_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_2$5.name,
    		type: "each",
    		source: "(74:5) {#each hero.skills as skill, i}",
    		ctx
    	});

    	return block;
    }

    // (102:5) {#each hero.sig_item.upgrades as upgrade}
    function create_each_block_1$7(ctx) {
    	let p0;
    	let t0;
    	let t1_value = /*upgrade*/ ctx[14].unlock + "";
    	let t1;
    	let t2;
    	let t3;
    	let p1;
    	let raw_value = /*upgrade*/ ctx[14].desc + "";

    	const block = {
    		c: function create() {
    			p0 = element("p");
    			t0 = text$2("Unlocked at +");
    			t1 = text$2(t1_value);
    			t2 = text$2(":");
    			t3 = space();
    			p1 = element("p");
    			attr_dev(p0, "class", "siFurnUnlock svelte-12rj2a7");
    			add_location(p0, file$h, 102, 6, 3944);
    			attr_dev(p1, "class", "siFurnDesc svelte-12rj2a7");
    			add_location(p1, file$h, 103, 6, 4010);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p0, anchor);
    			append_dev(p0, t0);
    			append_dev(p0, t1);
    			append_dev(p0, t2);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, p1, anchor);
    			p1.innerHTML = raw_value;
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p0);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(p1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$7.name,
    		type: "each",
    		source: "(102:5) {#each hero.sig_item.upgrades as upgrade}",
    		ctx
    	});

    	return block;
    }

    // (121:5) {#each hero.furniture.upgrades as upgrade}
    function create_each_block$c(ctx) {
    	let p0;
    	let t0;
    	let t1_value = /*upgrade*/ ctx[14].unlock + "";
    	let t1;
    	let t2;
    	let t3;
    	let p1;
    	let raw_value = /*upgrade*/ ctx[14].desc + "";

    	const block = {
    		c: function create() {
    			p0 = element("p");
    			t0 = text$2("Unlocked at ");
    			t1 = text$2(t1_value);
    			t2 = text$2(":");
    			t3 = space();
    			p1 = element("p");
    			attr_dev(p0, "class", "siFurnUnlock svelte-12rj2a7");
    			add_location(p0, file$h, 121, 6, 4724);
    			attr_dev(p1, "class", "siFurnDesc svelte-12rj2a7");
    			add_location(p1, file$h, 122, 6, 4789);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p0, anchor);
    			append_dev(p0, t0);
    			append_dev(p0, t1);
    			append_dev(p0, t2);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, p1, anchor);
    			p1.innerHTML = raw_value;
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p0);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(p1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$c.name,
    		type: "each",
    		source: "(121:5) {#each hero.furniture.upgrades as upgrade}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$k(ctx) {
    	let div27;
    	let section0;
    	let h3;
    	let t1;
    	let div9;
    	let div2;
    	let div1;
    	let img0;
    	let img0_src_value;
    	let t2;
    	let div0;
    	let span0;
    	let t4;
    	let div3;
    	let img1;
    	let img1_src_value;
    	let t5;
    	let div8;
    	let div5;
    	let img2;
    	let img2_src_value;
    	let t6;
    	let div4;
    	let span1;
    	let t8;
    	let div7;
    	let img3;
    	let img3_src_value;
    	let t9;
    	let div6;
    	let span2;
    	let t11;
    	let section1;
    	let div10;
    	let h40;
    	let t13;
    	let sifurnbox0;
    	let t14;
    	let div11;
    	let h41;
    	let t16;
    	let sifurnbox1;
    	let t17;
    	let section2;
    	let div12;
    	let button0;
    	let i0;
    	let i0_class_value;
    	let t18;
    	let t19;
    	let div16;
    	let div15;
    	let div13;
    	let t20;
    	let div14;
    	let div16_class_value;
    	let t21;
    	let section3;
    	let div17;
    	let button1;
    	let i1;
    	let i1_class_value;
    	let t22;
    	let t23;
    	let div21;
    	let div20;
    	let div18;
    	let img4;
    	let img4_src_value;
    	let t24;
    	let h50;
    	let t26;
    	let p0;
    	let t28;
    	let p1;
    	let raw0_value = /*hero*/ ctx[4].sig_item.desc + "";
    	let t29;
    	let div19;
    	let div21_class_value;
    	let t30;
    	let section4;
    	let div22;
    	let button2;
    	let i2;
    	let i2_class_value;
    	let t31;
    	let t32;
    	let div26;
    	let div25;
    	let div23;
    	let img5;
    	let img5_src_value;
    	let t33;
    	let h51;
    	let raw1_value = /*hero*/ ctx[4].furniture.name + "";
    	let t34;
    	let div24;
    	let div26_class_value;
    	let current;
    	let mounted;
    	let dispose;

    	sifurnbox0 = new SIFurnBox({
    			props: {
    				type: "si",
    				num: /*hero*/ ctx[4].si_benchmark,
    				maxWidth: "50px"
    			},
    			$$inline: true
    		});

    	sifurnbox1 = new SIFurnBox({
    			props: {
    				type: "furn",
    				num: /*hero*/ ctx[4].furn_benchmark,
    				maxWidth: "50px"
    			},
    			$$inline: true
    		});

    	let each_value_4 = /*hero*/ ctx[4].skills;
    	validate_each_argument(each_value_4);
    	let each_blocks_3 = [];

    	for (let i = 0; i < each_value_4.length; i += 1) {
    		each_blocks_3[i] = create_each_block_4$3(get_each_context_4$3(ctx, each_value_4, i));
    	}

    	let each_value_2 = /*hero*/ ctx[4].skills;
    	validate_each_argument(each_value_2);
    	let each_blocks_2 = [];

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		each_blocks_2[i] = create_each_block_2$5(get_each_context_2$5(ctx, each_value_2, i));
    	}

    	let each_value_1 = /*hero*/ ctx[4].sig_item.upgrades;
    	validate_each_argument(each_value_1);
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks_1[i] = create_each_block_1$7(get_each_context_1$7(ctx, each_value_1, i));
    	}

    	let each_value = /*hero*/ ctx[4].furniture.upgrades;
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$c(get_each_context$c(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div27 = element("div");
    			section0 = element("section");
    			h3 = element("h3");
    			h3.textContent = `${/*hero*/ ctx[4].name}`;
    			t1 = space();
    			div9 = element("div");
    			div2 = element("div");
    			div1 = element("div");
    			img0 = element("img");
    			t2 = space();
    			div0 = element("div");
    			span0 = element("span");
    			span0.textContent = `${/*hero*/ ctx[4].faction}`;
    			t4 = space();
    			div3 = element("div");
    			img1 = element("img");
    			t5 = space();
    			div8 = element("div");
    			div5 = element("div");
    			img2 = element("img");
    			t6 = space();
    			div4 = element("div");
    			span1 = element("span");
    			span1.textContent = `${/*hero*/ ctx[4].type}`;
    			t8 = space();
    			div7 = element("div");
    			img3 = element("img");
    			t9 = space();
    			div6 = element("div");
    			span2 = element("span");
    			span2.textContent = `${/*hero*/ ctx[4].class}`;
    			t11 = space();
    			section1 = element("section");
    			div10 = element("div");
    			h40 = element("h4");
    			h40.textContent = "SI Benchmark";
    			t13 = space();
    			create_component(sifurnbox0.$$.fragment);
    			t14 = space();
    			div11 = element("div");
    			h41 = element("h4");
    			h41.textContent = "Furn Benchmark";
    			t16 = space();
    			create_component(sifurnbox1.$$.fragment);
    			t17 = space();
    			section2 = element("section");
    			div12 = element("div");
    			button0 = element("button");
    			i0 = element("i");
    			t18 = text$2("Skills");
    			t19 = space();
    			div16 = element("div");
    			div15 = element("div");
    			div13 = element("div");

    			for (let i = 0; i < each_blocks_3.length; i += 1) {
    				each_blocks_3[i].c();
    			}

    			t20 = space();
    			div14 = element("div");

    			for (let i = 0; i < each_blocks_2.length; i += 1) {
    				each_blocks_2[i].c();
    			}

    			t21 = space();
    			section3 = element("section");
    			div17 = element("div");
    			button1 = element("button");
    			i1 = element("i");
    			t22 = text$2("Signature Item");
    			t23 = space();
    			div21 = element("div");
    			div20 = element("div");
    			div18 = element("div");
    			img4 = element("img");
    			t24 = space();
    			h50 = element("h5");
    			h50.textContent = `${/*hero*/ ctx[4].sig_item.name}`;
    			t26 = space();
    			p0 = element("p");
    			p0.textContent = "Unlocked at +0:";
    			t28 = space();
    			p1 = element("p");
    			t29 = space();
    			div19 = element("div");

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t30 = space();
    			section4 = element("section");
    			div22 = element("div");
    			button2 = element("button");
    			i2 = element("i");
    			t31 = text$2("Furniture");
    			t32 = space();
    			div26 = element("div");
    			div25 = element("div");
    			div23 = element("div");
    			img5 = element("img");
    			t33 = space();
    			h51 = element("h5");
    			t34 = space();
    			div24 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(h3, "class", "heroName svelte-12rj2a7");
    			add_location(h3, file$h, 28, 2, 751);
    			attr_dev(img0, "draggable", "false");
    			attr_dev(img0, "class", "attrImg svelte-12rj2a7");
    			if (!src_url_equal(img0.src, img0_src_value = "./img/factions/" + /*hero*/ ctx[4].faction.toLowerCase() + ".png")) attr_dev(img0, "src", img0_src_value);
    			attr_dev(img0, "alt", /*hero*/ ctx[4].faction);
    			add_location(img0, file$h, 32, 5, 898);
    			attr_dev(span0, "class", "tooltipText svelte-12rj2a7");
    			add_location(span0, file$h, 33, 41, 1055);
    			attr_dev(div0, "class", "tooltip factionTooltip svelte-12rj2a7");
    			add_location(div0, file$h, 33, 5, 1019);
    			attr_dev(div1, "class", "attrImgContainer svelte-12rj2a7");
    			add_location(div1, file$h, 31, 4, 861);
    			attr_dev(div2, "class", "factionContainer svelte-12rj2a7");
    			add_location(div2, file$h, 30, 3, 825);
    			attr_dev(img1, "draggable", "false");
    			attr_dev(img1, "class", "portrait svelte-12rj2a7");
    			if (!src_url_equal(img1.src, img1_src_value = /*hero*/ ctx[4].portrait)) attr_dev(img1, "src", img1_src_value);
    			attr_dev(img1, "alt", /*hero*/ ctx[4].name);
    			add_location(img1, file$h, 37, 4, 1173);
    			attr_dev(div3, "class", "portraitContainer svelte-12rj2a7");
    			add_location(div3, file$h, 36, 3, 1136);
    			attr_dev(img2, "draggable", "false");
    			attr_dev(img2, "class", "attrImg svelte-12rj2a7");
    			if (!src_url_equal(img2.src, img2_src_value = "./img/types/" + /*hero*/ ctx[4].type.toLowerCase() + ".png")) attr_dev(img2, "src", img2_src_value);
    			attr_dev(img2, "alt", /*hero*/ ctx[4].type);
    			add_location(img2, file$h, 41, 5, 1340);
    			attr_dev(span1, "class", "tooltipText svelte-12rj2a7");
    			add_location(span1, file$h, 42, 26, 1473);
    			attr_dev(div4, "class", "tooltip svelte-12rj2a7");
    			add_location(div4, file$h, 42, 5, 1452);
    			attr_dev(div5, "class", "attrImgContainer svelte-12rj2a7");
    			add_location(div5, file$h, 40, 4, 1303);
    			attr_dev(img3, "draggable", "false");
    			attr_dev(img3, "class", "attrImg svelte-12rj2a7");
    			if (!src_url_equal(img3.src, img3_src_value = "./img/classes/" + /*hero*/ ctx[4].class.toLowerCase() + ".png")) attr_dev(img3, "src", img3_src_value);
    			attr_dev(img3, "alt", /*hero*/ ctx[4].class);
    			add_location(img3, file$h, 45, 5, 1578);
    			attr_dev(span2, "class", "tooltipText svelte-12rj2a7");
    			add_location(span2, file$h, 46, 26, 1715);
    			attr_dev(div6, "class", "tooltip svelte-12rj2a7");
    			add_location(div6, file$h, 46, 5, 1694);
    			attr_dev(div7, "class", "attrImgContainer svelte-12rj2a7");
    			add_location(div7, file$h, 44, 4, 1541);
    			attr_dev(div8, "class", "typeClassContainer svelte-12rj2a7");
    			add_location(div8, file$h, 39, 3, 1265);
    			attr_dev(div9, "class", "imageContainer svelte-12rj2a7");
    			add_location(div9, file$h, 29, 2, 792);
    			attr_dev(section0, "class", "headerSection");
    			add_location(section0, file$h, 27, 1, 716);
    			attr_dev(h40, "class", "svelte-12rj2a7");
    			add_location(h40, file$h, 53, 3, 1885);
    			attr_dev(div10, "class", "benchmarkSection svelte-12rj2a7");
    			add_location(div10, file$h, 52, 2, 1850);
    			attr_dev(h41, "class", "svelte-12rj2a7");
    			add_location(h41, file$h, 57, 3, 2023);
    			attr_dev(div11, "class", "benchmarkSection svelte-12rj2a7");
    			add_location(div11, file$h, 56, 2, 1988);
    			attr_dev(section1, "class", "siFurnSection svelte-12rj2a7");
    			add_location(section1, file$h, 51, 1, 1815);
    			attr_dev(i0, "class", i0_class_value = "arrow " + (/*openSkills*/ ctx[0] ? 'down' : 'right') + " svelte-12rj2a7");
    			add_location(i0, file$h, 63, 90, 2304);
    			attr_dev(button0, "type", "button");
    			attr_dev(button0, "class", "expanderButton svelte-12rj2a7");
    			add_location(button0, file$h, 63, 3, 2217);
    			attr_dev(div12, "class", "mobileExpanderTitle");
    			add_location(div12, file$h, 62, 2, 2179);
    			attr_dev(div13, "class", "skillPicker svelte-12rj2a7");
    			add_location(div13, file$h, 67, 4, 2482);
    			attr_dev(div14, "class", "skillDetails");
    			add_location(div14, file$h, 72, 4, 2722);
    			attr_dev(div15, "class", "skillDisplay");
    			add_location(div15, file$h, 66, 3, 2450);
    			attr_dev(div16, "class", div16_class_value = "mobileExpander " + (/*openSkills*/ ctx[0] ? 'isOpen' : '') + " svelte-12rj2a7");
    			add_location(div16, file$h, 65, 2, 2387);
    			attr_dev(section2, "class", "skillsSection svelte-12rj2a7");
    			add_location(section2, file$h, 61, 1, 2144);
    			attr_dev(i1, "class", i1_class_value = "arrow " + (/*openSI*/ ctx[1] ? 'down' : 'right') + " svelte-12rj2a7");
    			add_location(i1, file$h, 90, 82, 3400);
    			attr_dev(button1, "type", "button");
    			attr_dev(button1, "class", "expanderButton svelte-12rj2a7");
    			add_location(button1, file$h, 90, 3, 3321);
    			attr_dev(div17, "class", "mobileExpanderTitle");
    			add_location(div17, file$h, 89, 2, 3283);
    			attr_dev(img4, "draggable", "false");
    			if (!src_url_equal(img4.src, img4_src_value = /*hero*/ ctx[4].sig_item.image)) attr_dev(img4, "src", img4_src_value);
    			attr_dev(img4, "alt", /*hero*/ ctx[4].sig_item.name);
    			attr_dev(img4, "class", "svelte-12rj2a7");
    			add_location(img4, file$h, 95, 5, 3606);
    			attr_dev(h50, "class", "siFurnName svelte-12rj2a7");
    			add_location(h50, file$h, 96, 5, 3687);
    			attr_dev(div18, "class", "imageArea svelte-12rj2a7");
    			add_location(div18, file$h, 94, 4, 3576);
    			attr_dev(p0, "class", "siFurnUnlock svelte-12rj2a7");
    			add_location(p0, file$h, 98, 4, 3753);
    			attr_dev(p1, "class", "siFurnDesc svelte-12rj2a7");
    			add_location(p1, file$h, 99, 4, 3802);
    			attr_dev(div19, "class", "siFurnUpgrades");
    			add_location(div19, file$h, 100, 4, 3860);
    			attr_dev(div20, "class", "siFurnArea svelte-12rj2a7");
    			add_location(div20, file$h, 93, 3, 3546);
    			attr_dev(div21, "class", div21_class_value = "mobileExpander " + (/*openSI*/ ctx[1] ? 'isOpen' : '') + " svelte-12rj2a7");
    			add_location(div21, file$h, 92, 2, 3487);
    			attr_dev(section3, "class", "sigItemSection");
    			add_location(section3, file$h, 88, 1, 3247);
    			attr_dev(i2, "class", i2_class_value = "arrow " + (/*openFurn*/ ctx[2] ? 'down' : 'right') + " svelte-12rj2a7");
    			add_location(i2, file$h, 111, 86, 4278);
    			attr_dev(button2, "type", "button");
    			attr_dev(button2, "class", "expanderButton svelte-12rj2a7");
    			add_location(button2, file$h, 111, 3, 4195);
    			attr_dev(div22, "class", "mobileExpanderTitle");
    			add_location(div22, file$h, 110, 2, 4157);
    			attr_dev(img5, "draggable", "false");
    			if (!src_url_equal(img5.src, img5_src_value = /*hero*/ ctx[4].furniture.image)) attr_dev(img5, "src", img5_src_value);
    			attr_dev(img5, "alt", /*hero*/ ctx[4].furniture.name);
    			attr_dev(img5, "class", "svelte-12rj2a7");
    			add_location(img5, file$h, 116, 5, 4483);
    			attr_dev(h51, "class", "siFurnName svelte-12rj2a7");
    			add_location(h51, file$h, 117, 5, 4566);
    			attr_dev(div23, "class", "imageArea svelte-12rj2a7");
    			add_location(div23, file$h, 115, 4, 4453);
    			attr_dev(div24, "class", "siFurnUpgrades");
    			add_location(div24, file$h, 119, 4, 4639);
    			attr_dev(div25, "class", "siFurnArea svelte-12rj2a7");
    			add_location(div25, file$h, 114, 3, 4423);
    			attr_dev(div26, "class", div26_class_value = "mobileExpander " + (/*openFurn*/ ctx[2] ? 'isOpen' : '') + " svelte-12rj2a7");
    			add_location(div26, file$h, 113, 2, 4362);
    			attr_dev(section4, "class", "furnitureSection");
    			add_location(section4, file$h, 109, 1, 4119);
    			attr_dev(div27, "class", "container svelte-12rj2a7");
    			add_location(div27, file$h, 26, 0, 690);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div27, anchor);
    			append_dev(div27, section0);
    			append_dev(section0, h3);
    			append_dev(section0, t1);
    			append_dev(section0, div9);
    			append_dev(div9, div2);
    			append_dev(div2, div1);
    			append_dev(div1, img0);
    			append_dev(div1, t2);
    			append_dev(div1, div0);
    			append_dev(div0, span0);
    			append_dev(div9, t4);
    			append_dev(div9, div3);
    			append_dev(div3, img1);
    			append_dev(div9, t5);
    			append_dev(div9, div8);
    			append_dev(div8, div5);
    			append_dev(div5, img2);
    			append_dev(div5, t6);
    			append_dev(div5, div4);
    			append_dev(div4, span1);
    			append_dev(div8, t8);
    			append_dev(div8, div7);
    			append_dev(div7, img3);
    			append_dev(div7, t9);
    			append_dev(div7, div6);
    			append_dev(div6, span2);
    			append_dev(div27, t11);
    			append_dev(div27, section1);
    			append_dev(section1, div10);
    			append_dev(div10, h40);
    			append_dev(div10, t13);
    			mount_component(sifurnbox0, div10, null);
    			append_dev(section1, t14);
    			append_dev(section1, div11);
    			append_dev(div11, h41);
    			append_dev(div11, t16);
    			mount_component(sifurnbox1, div11, null);
    			append_dev(div27, t17);
    			append_dev(div27, section2);
    			append_dev(section2, div12);
    			append_dev(div12, button0);
    			append_dev(button0, i0);
    			append_dev(button0, t18);
    			append_dev(section2, t19);
    			append_dev(section2, div16);
    			append_dev(div16, div15);
    			append_dev(div15, div13);

    			for (let i = 0; i < each_blocks_3.length; i += 1) {
    				each_blocks_3[i].m(div13, null);
    			}

    			append_dev(div15, t20);
    			append_dev(div15, div14);

    			for (let i = 0; i < each_blocks_2.length; i += 1) {
    				each_blocks_2[i].m(div14, null);
    			}

    			append_dev(div27, t21);
    			append_dev(div27, section3);
    			append_dev(section3, div17);
    			append_dev(div17, button1);
    			append_dev(button1, i1);
    			append_dev(button1, t22);
    			append_dev(section3, t23);
    			append_dev(section3, div21);
    			append_dev(div21, div20);
    			append_dev(div20, div18);
    			append_dev(div18, img4);
    			append_dev(div18, t24);
    			append_dev(div18, h50);
    			append_dev(div20, t26);
    			append_dev(div20, p0);
    			append_dev(div20, t28);
    			append_dev(div20, p1);
    			p1.innerHTML = raw0_value;
    			append_dev(div20, t29);
    			append_dev(div20, div19);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].m(div19, null);
    			}

    			append_dev(div27, t30);
    			append_dev(div27, section4);
    			append_dev(section4, div22);
    			append_dev(div22, button2);
    			append_dev(button2, i2);
    			append_dev(button2, t31);
    			append_dev(section4, t32);
    			append_dev(section4, div26);
    			append_dev(div26, div25);
    			append_dev(div25, div23);
    			append_dev(div23, img5);
    			append_dev(div23, t33);
    			append_dev(div23, h51);
    			h51.innerHTML = raw1_value;
    			append_dev(div25, t34);
    			append_dev(div25, div24);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div24, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(window, "popstate", /*handlePopState*/ ctx[5], false, false, false),
    					listen_dev(button0, "click", /*click_handler*/ ctx[7], false, false, false),
    					listen_dev(button1, "click", /*click_handler_2*/ ctx[9], false, false, false),
    					listen_dev(button2, "click", /*click_handler_3*/ ctx[10], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (!current || dirty & /*openSkills*/ 1 && i0_class_value !== (i0_class_value = "arrow " + (/*openSkills*/ ctx[0] ? 'down' : 'right') + " svelte-12rj2a7")) {
    				attr_dev(i0, "class", i0_class_value);
    			}

    			if (dirty & /*skillShown, hero*/ 24) {
    				each_value_4 = /*hero*/ ctx[4].skills;
    				validate_each_argument(each_value_4);
    				let i;

    				for (i = 0; i < each_value_4.length; i += 1) {
    					const child_ctx = get_each_context_4$3(ctx, each_value_4, i);

    					if (each_blocks_3[i]) {
    						each_blocks_3[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_3[i] = create_each_block_4$3(child_ctx);
    						each_blocks_3[i].c();
    						each_blocks_3[i].m(div13, null);
    					}
    				}

    				for (; i < each_blocks_3.length; i += 1) {
    					each_blocks_3[i].d(1);
    				}

    				each_blocks_3.length = each_value_4.length;
    			}

    			if (dirty & /*skillShown, hero*/ 24) {
    				each_value_2 = /*hero*/ ctx[4].skills;
    				validate_each_argument(each_value_2);
    				let i;

    				for (i = 0; i < each_value_2.length; i += 1) {
    					const child_ctx = get_each_context_2$5(ctx, each_value_2, i);

    					if (each_blocks_2[i]) {
    						each_blocks_2[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_2[i] = create_each_block_2$5(child_ctx);
    						each_blocks_2[i].c();
    						each_blocks_2[i].m(div14, null);
    					}
    				}

    				for (; i < each_blocks_2.length; i += 1) {
    					each_blocks_2[i].d(1);
    				}

    				each_blocks_2.length = each_value_2.length;
    			}

    			if (!current || dirty & /*openSkills*/ 1 && div16_class_value !== (div16_class_value = "mobileExpander " + (/*openSkills*/ ctx[0] ? 'isOpen' : '') + " svelte-12rj2a7")) {
    				attr_dev(div16, "class", div16_class_value);
    			}

    			if (!current || dirty & /*openSI*/ 2 && i1_class_value !== (i1_class_value = "arrow " + (/*openSI*/ ctx[1] ? 'down' : 'right') + " svelte-12rj2a7")) {
    				attr_dev(i1, "class", i1_class_value);
    			}

    			if (dirty & /*hero*/ 16) {
    				each_value_1 = /*hero*/ ctx[4].sig_item.upgrades;
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$7(ctx, each_value_1, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_1[i] = create_each_block_1$7(child_ctx);
    						each_blocks_1[i].c();
    						each_blocks_1[i].m(div19, null);
    					}
    				}

    				for (; i < each_blocks_1.length; i += 1) {
    					each_blocks_1[i].d(1);
    				}

    				each_blocks_1.length = each_value_1.length;
    			}

    			if (!current || dirty & /*openSI*/ 2 && div21_class_value !== (div21_class_value = "mobileExpander " + (/*openSI*/ ctx[1] ? 'isOpen' : '') + " svelte-12rj2a7")) {
    				attr_dev(div21, "class", div21_class_value);
    			}

    			if (!current || dirty & /*openFurn*/ 4 && i2_class_value !== (i2_class_value = "arrow " + (/*openFurn*/ ctx[2] ? 'down' : 'right') + " svelte-12rj2a7")) {
    				attr_dev(i2, "class", i2_class_value);
    			}

    			if (dirty & /*hero*/ 16) {
    				each_value = /*hero*/ ctx[4].furniture.upgrades;
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$c(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$c(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div24, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (!current || dirty & /*openFurn*/ 4 && div26_class_value !== (div26_class_value = "mobileExpander " + (/*openFurn*/ ctx[2] ? 'isOpen' : '') + " svelte-12rj2a7")) {
    				attr_dev(div26, "class", div26_class_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(sifurnbox0.$$.fragment, local);
    			transition_in(sifurnbox1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(sifurnbox0.$$.fragment, local);
    			transition_out(sifurnbox1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div27);
    			destroy_component(sifurnbox0);
    			destroy_component(sifurnbox1);
    			destroy_each(each_blocks_3, detaching);
    			destroy_each(each_blocks_2, detaching);
    			destroy_each(each_blocks_1, detaching);
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$k.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$k($$self, $$props, $$invalidate) {
    	let skillShown;
    	let $AppData;
    	let $HeroData;
    	validate_store(AppData$1, 'AppData');
    	component_subscribe($$self, AppData$1, $$value => $$invalidate(11, $AppData = $$value));
    	validate_store(HeroData, 'HeroData');
    	component_subscribe($$self, HeroData, $$value => $$invalidate(12, $HeroData = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('HeroDetail', slots, []);
    	const { close } = getContext('simple-modal');
    	let { heroID } = $$props;
    	const hero = $HeroData.find(e => e.id === heroID);
    	let openSkills = true;
    	let openSI = false;
    	let openFurn = false;

    	onMount(async () => {
    		history.pushState({ view: $AppData.activeView, modal: true }, "Hero Detail", `?view=${$AppData.activeView}&modal=true`);
    	});

    	function handlePopState() {
    		close();
    	}

    	const writable_props = ['heroID'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<HeroDetail> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => $$invalidate(0, openSkills = !openSkills);
    	const click_handler_1 = i => $$invalidate(3, skillShown = i);
    	const click_handler_2 = () => $$invalidate(1, openSI = !openSI);
    	const click_handler_3 = () => $$invalidate(2, openFurn = !openFurn);

    	$$self.$$set = $$props => {
    		if ('heroID' in $$props) $$invalidate(6, heroID = $$props.heroID);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		getContext,
    		HeroData,
    		AppData: AppData$1,
    		SIFurnBox,
    		close,
    		heroID,
    		hero,
    		openSkills,
    		openSI,
    		openFurn,
    		handlePopState,
    		skillShown,
    		$AppData,
    		$HeroData
    	});

    	$$self.$inject_state = $$props => {
    		if ('heroID' in $$props) $$invalidate(6, heroID = $$props.heroID);
    		if ('openSkills' in $$props) $$invalidate(0, openSkills = $$props.openSkills);
    		if ('openSI' in $$props) $$invalidate(1, openSI = $$props.openSI);
    		if ('openFurn' in $$props) $$invalidate(2, openFurn = $$props.openFurn);
    		if ('skillShown' in $$props) $$invalidate(3, skillShown = $$props.skillShown);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$invalidate(3, skillShown = 0);

    	return [
    		openSkills,
    		openSI,
    		openFurn,
    		skillShown,
    		hero,
    		handlePopState,
    		heroID,
    		click_handler,
    		click_handler_1,
    		click_handler_2,
    		click_handler_3
    	];
    }

    class HeroDetail extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$k, create_fragment$k, safe_not_equal, { heroID: 6 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "HeroDetail",
    			options,
    			id: create_fragment$k.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*heroID*/ ctx[6] === undefined && !('heroID' in props)) {
    			console.warn("<HeroDetail> was created without expected prop 'heroID'");
    		}
    	}

    	get heroID() {
    		throw new Error("<HeroDetail>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set heroID(value) {
    		throw new Error("<HeroDetail>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\modals\ModalCloseButton.svelte generated by Svelte v3.41.0 */

    const file$g = "src\\modals\\ModalCloseButton.svelte";

    function create_fragment$j(ctx) {
    	let div2;
    	let div1;
    	let div0;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			div0.textContent = "Close";
    			attr_dev(div0, "class", "label svelte-1hrmmjo");
    			add_location(div0, file$g, 7, 2, 185);
    			attr_dev(div1, "class", "inner svelte-1hrmmjo");
    			add_location(div1, file$g, 6, 1, 162);
    			attr_dev(div2, "class", "outer svelte-1hrmmjo");
    			add_location(div2, file$g, 5, 0, 121);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div1);
    			append_dev(div1, div0);

    			if (!mounted) {
    				dispose = listen_dev(
    					div2,
    					"click",
    					function () {
    						if (is_function(/*onClose*/ ctx[0])) /*onClose*/ ctx[0].apply(this, arguments);
    					},
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;
    		},
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$j.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$j($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ModalCloseButton', slots, []);
    	let { onClose } = $$props;
    	const writable_props = ['onClose'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ModalCloseButton> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('onClose' in $$props) $$invalidate(0, onClose = $$props.onClose);
    	};

    	$$self.$capture_state = () => ({ onClose });

    	$$self.$inject_state = $$props => {
    		if ('onClose' in $$props) $$invalidate(0, onClose = $$props.onClose);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [onClose];
    }

    class ModalCloseButton extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$j, create_fragment$j, safe_not_equal, { onClose: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ModalCloseButton",
    			options,
    			id: create_fragment$j.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*onClose*/ ctx[0] === undefined && !('onClose' in props)) {
    			console.warn("<ModalCloseButton> was created without expected prop 'onClose'");
    		}
    	}

    	get onClose() {
    		throw new Error("<ModalCloseButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onClose(value) {
    		throw new Error("<ModalCloseButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    // ::- Persistent data structure representing an ordered mapping from
    // strings to values, with some convenient update methods.
    function OrderedMap(content) {
      this.content = content;
    }

    OrderedMap.prototype = {
      constructor: OrderedMap,

      find: function(key) {
        for (var i = 0; i < this.content.length; i += 2)
          if (this.content[i] === key) return i
        return -1
      },

      // :: (string) → ?any
      // Retrieve the value stored under `key`, or return undefined when
      // no such key exists.
      get: function(key) {
        var found = this.find(key);
        return found == -1 ? undefined : this.content[found + 1]
      },

      // :: (string, any, ?string) → OrderedMap
      // Create a new map by replacing the value of `key` with a new
      // value, or adding a binding to the end of the map. If `newKey` is
      // given, the key of the binding will be replaced with that key.
      update: function(key, value, newKey) {
        var self = newKey && newKey != key ? this.remove(newKey) : this;
        var found = self.find(key), content = self.content.slice();
        if (found == -1) {
          content.push(newKey || key, value);
        } else {
          content[found + 1] = value;
          if (newKey) content[found] = newKey;
        }
        return new OrderedMap(content)
      },

      // :: (string) → OrderedMap
      // Return a map with the given key removed, if it existed.
      remove: function(key) {
        var found = this.find(key);
        if (found == -1) return this
        var content = this.content.slice();
        content.splice(found, 2);
        return new OrderedMap(content)
      },

      // :: (string, any) → OrderedMap
      // Add a new key to the start of the map.
      addToStart: function(key, value) {
        return new OrderedMap([key, value].concat(this.remove(key).content))
      },

      // :: (string, any) → OrderedMap
      // Add a new key to the end of the map.
      addToEnd: function(key, value) {
        var content = this.remove(key).content.slice();
        content.push(key, value);
        return new OrderedMap(content)
      },

      // :: (string, string, any) → OrderedMap
      // Add a key after the given key. If `place` is not found, the new
      // key is added to the end.
      addBefore: function(place, key, value) {
        var without = this.remove(key), content = without.content.slice();
        var found = without.find(place);
        content.splice(found == -1 ? content.length : found, 0, key, value);
        return new OrderedMap(content)
      },

      // :: ((key: string, value: any))
      // Call the given function for each key/value pair in the map, in
      // order.
      forEach: function(f) {
        for (var i = 0; i < this.content.length; i += 2)
          f(this.content[i], this.content[i + 1]);
      },

      // :: (union<Object, OrderedMap>) → OrderedMap
      // Create a new map by prepending the keys in this map that don't
      // appear in `map` before the keys in `map`.
      prepend: function(map) {
        map = OrderedMap.from(map);
        if (!map.size) return this
        return new OrderedMap(map.content.concat(this.subtract(map).content))
      },

      // :: (union<Object, OrderedMap>) → OrderedMap
      // Create a new map by appending the keys in this map that don't
      // appear in `map` after the keys in `map`.
      append: function(map) {
        map = OrderedMap.from(map);
        if (!map.size) return this
        return new OrderedMap(this.subtract(map).content.concat(map.content))
      },

      // :: (union<Object, OrderedMap>) → OrderedMap
      // Create a map containing all the keys in this map that don't
      // appear in `map`.
      subtract: function(map) {
        var result = this;
        map = OrderedMap.from(map);
        for (var i = 0; i < map.content.length; i += 2)
          result = result.remove(map.content[i]);
        return result
      },

      // :: number
      // The amount of keys in this map.
      get size() {
        return this.content.length >> 1
      }
    };

    // :: (?union<Object, OrderedMap>) → OrderedMap
    // Return a map with the given content. If null, create an empty
    // map. If given an ordered map, return that map itself. If given an
    // object, create a map from the object's properties.
    OrderedMap.from = function(value) {
      if (value instanceof OrderedMap) return value
      var content = [];
      if (value) for (var prop in value) content.push(prop, value[prop]);
      return new OrderedMap(content)
    };

    var orderedmap = OrderedMap;

    function findDiffStart(a, b, pos) {
      for (var i = 0;; i++) {
        if (i == a.childCount || i == b.childCount)
          { return a.childCount == b.childCount ? null : pos }

        var childA = a.child(i), childB = b.child(i);
        if (childA == childB) { pos += childA.nodeSize; continue }

        if (!childA.sameMarkup(childB)) { return pos }

        if (childA.isText && childA.text != childB.text) {
          for (var j = 0; childA.text[j] == childB.text[j]; j++)
            { pos++; }
          return pos
        }
        if (childA.content.size || childB.content.size) {
          var inner = findDiffStart(childA.content, childB.content, pos + 1);
          if (inner != null) { return inner }
        }
        pos += childA.nodeSize;
      }
    }

    function findDiffEnd(a, b, posA, posB) {
      for (var iA = a.childCount, iB = b.childCount;;) {
        if (iA == 0 || iB == 0)
          { return iA == iB ? null : {a: posA, b: posB} }

        var childA = a.child(--iA), childB = b.child(--iB), size = childA.nodeSize;
        if (childA == childB) {
          posA -= size; posB -= size;
          continue
        }

        if (!childA.sameMarkup(childB)) { return {a: posA, b: posB} }

        if (childA.isText && childA.text != childB.text) {
          var same = 0, minSize = Math.min(childA.text.length, childB.text.length);
          while (same < minSize && childA.text[childA.text.length - same - 1] == childB.text[childB.text.length - same - 1]) {
            same++; posA--; posB--;
          }
          return {a: posA, b: posB}
        }
        if (childA.content.size || childB.content.size) {
          var inner = findDiffEnd(childA.content, childB.content, posA - 1, posB - 1);
          if (inner) { return inner }
        }
        posA -= size; posB -= size;
      }
    }

    // ::- A fragment represents a node's collection of child nodes.
    //
    // Like nodes, fragments are persistent data structures, and you
    // should not mutate them or their content. Rather, you create new
    // instances whenever needed. The API tries to make this easy.
    var Fragment = function Fragment(content, size) {
      this.content = content;
      // :: number
      // The size of the fragment, which is the total of the size of its
      // content nodes.
      this.size = size || 0;
      if (size == null) { for (var i = 0; i < content.length; i++)
        { this.size += content[i].nodeSize; } }
    };

    var prototypeAccessors$5 = { firstChild: { configurable: true },lastChild: { configurable: true },childCount: { configurable: true } };

    // :: (number, number, (node: Node, start: number, parent: Node, index: number) → ?bool, ?number)
    // Invoke a callback for all descendant nodes between the given two
    // positions (relative to start of this fragment). Doesn't descend
    // into a node when the callback returns `false`.
    Fragment.prototype.nodesBetween = function nodesBetween (from, to, f, nodeStart, parent) {
        if ( nodeStart === void 0 ) nodeStart = 0;

      for (var i = 0, pos = 0; pos < to; i++) {
        var child = this.content[i], end = pos + child.nodeSize;
        if (end > from && f(child, nodeStart + pos, parent, i) !== false && child.content.size) {
          var start = pos + 1;
          child.nodesBetween(Math.max(0, from - start),
                             Math.min(child.content.size, to - start),
                             f, nodeStart + start);
        }
        pos = end;
      }
    };

    // :: ((node: Node, pos: number, parent: Node) → ?bool)
    // Call the given callback for every descendant node. The callback
    // may return `false` to prevent traversal of a given node's children.
    Fragment.prototype.descendants = function descendants (f) {
      this.nodesBetween(0, this.size, f);
    };

    // :: (number, number, ?string, ?string) → string
    // Extract the text between `from` and `to`. See the same method on
    // [`Node`](#model.Node.textBetween).
    Fragment.prototype.textBetween = function textBetween (from, to, blockSeparator, leafText) {
      var text = "", separated = true;
      this.nodesBetween(from, to, function (node, pos) {
        if (node.isText) {
          text += node.text.slice(Math.max(from, pos) - pos, to - pos);
          separated = !blockSeparator;
        } else if (node.isLeaf && leafText) {
          text += leafText;
          separated = !blockSeparator;
        } else if (!separated && node.isBlock) {
          text += blockSeparator;
          separated = true;
        }
      }, 0);
      return text
    };

    // :: (Fragment) → Fragment
    // Create a new fragment containing the combined content of this
    // fragment and the other.
    Fragment.prototype.append = function append (other) {
      if (!other.size) { return this }
      if (!this.size) { return other }
      var last = this.lastChild, first = other.firstChild, content = this.content.slice(), i = 0;
      if (last.isText && last.sameMarkup(first)) {
        content[content.length - 1] = last.withText(last.text + first.text);
        i = 1;
      }
      for (; i < other.content.length; i++) { content.push(other.content[i]); }
      return new Fragment(content, this.size + other.size)
    };

    // :: (number, ?number) → Fragment
    // Cut out the sub-fragment between the two given positions.
    Fragment.prototype.cut = function cut (from, to) {
      if (to == null) { to = this.size; }
      if (from == 0 && to == this.size) { return this }
      var result = [], size = 0;
      if (to > from) { for (var i = 0, pos = 0; pos < to; i++) {
        var child = this.content[i], end = pos + child.nodeSize;
        if (end > from) {
          if (pos < from || end > to) {
            if (child.isText)
              { child = child.cut(Math.max(0, from - pos), Math.min(child.text.length, to - pos)); }
            else
              { child = child.cut(Math.max(0, from - pos - 1), Math.min(child.content.size, to - pos - 1)); }
          }
          result.push(child);
          size += child.nodeSize;
        }
        pos = end;
      } }
      return new Fragment(result, size)
    };

    Fragment.prototype.cutByIndex = function cutByIndex (from, to) {
      if (from == to) { return Fragment.empty }
      if (from == 0 && to == this.content.length) { return this }
      return new Fragment(this.content.slice(from, to))
    };

    // :: (number, Node) → Fragment
    // Create a new fragment in which the node at the given index is
    // replaced by the given node.
    Fragment.prototype.replaceChild = function replaceChild (index, node) {
      var current = this.content[index];
      if (current == node) { return this }
      var copy = this.content.slice();
      var size = this.size + node.nodeSize - current.nodeSize;
      copy[index] = node;
      return new Fragment(copy, size)
    };

    // : (Node) → Fragment
    // Create a new fragment by prepending the given node to this
    // fragment.
    Fragment.prototype.addToStart = function addToStart (node) {
      return new Fragment([node].concat(this.content), this.size + node.nodeSize)
    };

    // : (Node) → Fragment
    // Create a new fragment by appending the given node to this
    // fragment.
    Fragment.prototype.addToEnd = function addToEnd (node) {
      return new Fragment(this.content.concat(node), this.size + node.nodeSize)
    };

    // :: (Fragment) → bool
    // Compare this fragment to another one.
    Fragment.prototype.eq = function eq (other) {
      if (this.content.length != other.content.length) { return false }
      for (var i = 0; i < this.content.length; i++)
        { if (!this.content[i].eq(other.content[i])) { return false } }
      return true
    };

    // :: ?Node
    // The first child of the fragment, or `null` if it is empty.
    prototypeAccessors$5.firstChild.get = function () { return this.content.length ? this.content[0] : null };

    // :: ?Node
    // The last child of the fragment, or `null` if it is empty.
    prototypeAccessors$5.lastChild.get = function () { return this.content.length ? this.content[this.content.length - 1] : null };

    // :: number
    // The number of child nodes in this fragment.
    prototypeAccessors$5.childCount.get = function () { return this.content.length };

    // :: (number) → Node
    // Get the child node at the given index. Raise an error when the
    // index is out of range.
    Fragment.prototype.child = function child (index) {
      var found = this.content[index];
      if (!found) { throw new RangeError("Index " + index + " out of range for " + this) }
      return found
    };

    // :: (number) → ?Node
    // Get the child node at the given index, if it exists.
    Fragment.prototype.maybeChild = function maybeChild (index) {
      return this.content[index]
    };

    // :: ((node: Node, offset: number, index: number))
    // Call `f` for every child node, passing the node, its offset
    // into this parent node, and its index.
    Fragment.prototype.forEach = function forEach (f) {
      for (var i = 0, p = 0; i < this.content.length; i++) {
        var child = this.content[i];
        f(child, p, i);
        p += child.nodeSize;
      }
    };

    // :: (Fragment) → ?number
    // Find the first position at which this fragment and another
    // fragment differ, or `null` if they are the same.
    Fragment.prototype.findDiffStart = function findDiffStart$1 (other, pos) {
        if ( pos === void 0 ) pos = 0;

      return findDiffStart(this, other, pos)
    };

    // :: (Fragment) → ?{a: number, b: number}
    // Find the first position, searching from the end, at which this
    // fragment and the given fragment differ, or `null` if they are the
    // same. Since this position will not be the same in both nodes, an
    // object with two separate positions is returned.
    Fragment.prototype.findDiffEnd = function findDiffEnd$1 (other, pos, otherPos) {
        if ( pos === void 0 ) pos = this.size;
        if ( otherPos === void 0 ) otherPos = other.size;

      return findDiffEnd(this, other, pos, otherPos)
    };

    // : (number, ?number) → {index: number, offset: number}
    // Find the index and inner offset corresponding to a given relative
    // position in this fragment. The result object will be reused
    // (overwritten) the next time the function is called. (Not public.)
    Fragment.prototype.findIndex = function findIndex (pos, round) {
        if ( round === void 0 ) round = -1;

      if (pos == 0) { return retIndex(0, pos) }
      if (pos == this.size) { return retIndex(this.content.length, pos) }
      if (pos > this.size || pos < 0) { throw new RangeError(("Position " + pos + " outside of fragment (" + (this) + ")")) }
      for (var i = 0, curPos = 0;; i++) {
        var cur = this.child(i), end = curPos + cur.nodeSize;
        if (end >= pos) {
          if (end == pos || round > 0) { return retIndex(i + 1, end) }
          return retIndex(i, curPos)
        }
        curPos = end;
      }
    };

    // :: () → string
    // Return a debugging string that describes this fragment.
    Fragment.prototype.toString = function toString () { return "<" + this.toStringInner() + ">" };

    Fragment.prototype.toStringInner = function toStringInner () { return this.content.join(", ") };

    // :: () → ?Object
    // Create a JSON-serializeable representation of this fragment.
    Fragment.prototype.toJSON = function toJSON () {
      return this.content.length ? this.content.map(function (n) { return n.toJSON(); }) : null
    };

    // :: (Schema, ?Object) → Fragment
    // Deserialize a fragment from its JSON representation.
    Fragment.fromJSON = function fromJSON (schema, value) {
      if (!value) { return Fragment.empty }
      if (!Array.isArray(value)) { throw new RangeError("Invalid input for Fragment.fromJSON") }
      return new Fragment(value.map(schema.nodeFromJSON))
    };

    // :: ([Node]) → Fragment
    // Build a fragment from an array of nodes. Ensures that adjacent
    // text nodes with the same marks are joined together.
    Fragment.fromArray = function fromArray (array) {
      if (!array.length) { return Fragment.empty }
      var joined, size = 0;
      for (var i = 0; i < array.length; i++) {
        var node = array[i];
        size += node.nodeSize;
        if (i && node.isText && array[i - 1].sameMarkup(node)) {
          if (!joined) { joined = array.slice(0, i); }
          joined[joined.length - 1] = node.withText(joined[joined.length - 1].text + node.text);
        } else if (joined) {
          joined.push(node);
        }
      }
      return new Fragment(joined || array, size)
    };

    // :: (?union<Fragment, Node, [Node]>) → Fragment
    // Create a fragment from something that can be interpreted as a set
    // of nodes. For `null`, it returns the empty fragment. For a
    // fragment, the fragment itself. For a node or array of nodes, a
    // fragment containing those nodes.
    Fragment.from = function from (nodes) {
      if (!nodes) { return Fragment.empty }
      if (nodes instanceof Fragment) { return nodes }
      if (Array.isArray(nodes)) { return this.fromArray(nodes) }
      if (nodes.attrs) { return new Fragment([nodes], nodes.nodeSize) }
      throw new RangeError("Can not convert " + nodes + " to a Fragment" +
                           (nodes.nodesBetween ? " (looks like multiple versions of prosemirror-model were loaded)" : ""))
    };

    Object.defineProperties( Fragment.prototype, prototypeAccessors$5 );

    var found = {index: 0, offset: 0};
    function retIndex(index, offset) {
      found.index = index;
      found.offset = offset;
      return found
    }

    // :: Fragment
    // An empty fragment. Intended to be reused whenever a node doesn't
    // contain anything (rather than allocating a new empty fragment for
    // each leaf node).
    Fragment.empty = new Fragment([], 0);

    function compareDeep(a, b) {
      if (a === b) { return true }
      if (!(a && typeof a == "object") ||
          !(b && typeof b == "object")) { return false }
      var array = Array.isArray(a);
      if (Array.isArray(b) != array) { return false }
      if (array) {
        if (a.length != b.length) { return false }
        for (var i = 0; i < a.length; i++) { if (!compareDeep(a[i], b[i])) { return false } }
      } else {
        for (var p in a) { if (!(p in b) || !compareDeep(a[p], b[p])) { return false } }
        for (var p$1 in b) { if (!(p$1 in a)) { return false } }
      }
      return true
    }

    // ::- A mark is a piece of information that can be attached to a node,
    // such as it being emphasized, in code font, or a link. It has a type
    // and optionally a set of attributes that provide further information
    // (such as the target of the link). Marks are created through a
    // `Schema`, which controls which types exist and which
    // attributes they have.
    var Mark$1 = function Mark(type, attrs) {
      // :: MarkType
      // The type of this mark.
      this.type = type;
      // :: Object
      // The attributes associated with this mark.
      this.attrs = attrs;
    };

    // :: ([Mark]) → [Mark]
    // Given a set of marks, create a new set which contains this one as
    // well, in the right position. If this mark is already in the set,
    // the set itself is returned. If any marks that are set to be
    // [exclusive](#model.MarkSpec.excludes) with this mark are present,
    // those are replaced by this one.
    Mark$1.prototype.addToSet = function addToSet (set) {
      var copy, placed = false;
      for (var i = 0; i < set.length; i++) {
        var other = set[i];
        if (this.eq(other)) { return set }
        if (this.type.excludes(other.type)) {
          if (!copy) { copy = set.slice(0, i); }
        } else if (other.type.excludes(this.type)) {
          return set
        } else {
          if (!placed && other.type.rank > this.type.rank) {
            if (!copy) { copy = set.slice(0, i); }
            copy.push(this);
            placed = true;
          }
          if (copy) { copy.push(other); }
        }
      }
      if (!copy) { copy = set.slice(); }
      if (!placed) { copy.push(this); }
      return copy
    };

    // :: ([Mark]) → [Mark]
    // Remove this mark from the given set, returning a new set. If this
    // mark is not in the set, the set itself is returned.
    Mark$1.prototype.removeFromSet = function removeFromSet (set) {
      for (var i = 0; i < set.length; i++)
        { if (this.eq(set[i]))
          { return set.slice(0, i).concat(set.slice(i + 1)) } }
      return set
    };

    // :: ([Mark]) → bool
    // Test whether this mark is in the given set of marks.
    Mark$1.prototype.isInSet = function isInSet (set) {
      for (var i = 0; i < set.length; i++)
        { if (this.eq(set[i])) { return true } }
      return false
    };

    // :: (Mark) → bool
    // Test whether this mark has the same type and attributes as
    // another mark.
    Mark$1.prototype.eq = function eq (other) {
      return this == other ||
        (this.type == other.type && compareDeep(this.attrs, other.attrs))
    };

    // :: () → Object
    // Convert this mark to a JSON-serializeable representation.
    Mark$1.prototype.toJSON = function toJSON () {
      var obj = {type: this.type.name};
      for (var _ in this.attrs) {
        obj.attrs = this.attrs;
        break
      }
      return obj
    };

    // :: (Schema, Object) → Mark
    Mark$1.fromJSON = function fromJSON (schema, json) {
      if (!json) { throw new RangeError("Invalid input for Mark.fromJSON") }
      var type = schema.marks[json.type];
      if (!type) { throw new RangeError(("There is no mark type " + (json.type) + " in this schema")) }
      return type.create(json.attrs)
    };

    // :: ([Mark], [Mark]) → bool
    // Test whether two sets of marks are identical.
    Mark$1.sameSet = function sameSet (a, b) {
      if (a == b) { return true }
      if (a.length != b.length) { return false }
      for (var i = 0; i < a.length; i++)
        { if (!a[i].eq(b[i])) { return false } }
      return true
    };

    // :: (?union<Mark, [Mark]>) → [Mark]
    // Create a properly sorted mark set from null, a single mark, or an
    // unsorted array of marks.
    Mark$1.setFrom = function setFrom (marks) {
      if (!marks || marks.length == 0) { return Mark$1.none }
      if (marks instanceof Mark$1) { return [marks] }
      var copy = marks.slice();
      copy.sort(function (a, b) { return a.type.rank - b.type.rank; });
      return copy
    };

    // :: [Mark] The empty set of marks.
    Mark$1.none = [];

    // ReplaceError:: class extends Error
    // Error type raised by [`Node.replace`](#model.Node.replace) when
    // given an invalid replacement.

    function ReplaceError(message) {
      var err = Error.call(this, message);
      err.__proto__ = ReplaceError.prototype;
      return err
    }

    ReplaceError.prototype = Object.create(Error.prototype);
    ReplaceError.prototype.constructor = ReplaceError;
    ReplaceError.prototype.name = "ReplaceError";

    // ::- A slice represents a piece cut out of a larger document. It
    // stores not only a fragment, but also the depth up to which nodes on
    // both side are ‘open’ (cut through).
    var Slice = function Slice(content, openStart, openEnd) {
      // :: Fragment The slice's content.
      this.content = content;
      // :: number The open depth at the start.
      this.openStart = openStart;
      // :: number The open depth at the end.
      this.openEnd = openEnd;
    };

    var prototypeAccessors$1$3 = { size: { configurable: true } };

    // :: number
    // The size this slice would add when inserted into a document.
    prototypeAccessors$1$3.size.get = function () {
      return this.content.size - this.openStart - this.openEnd
    };

    Slice.prototype.insertAt = function insertAt (pos, fragment) {
      var content = insertInto(this.content, pos + this.openStart, fragment, null);
      return content && new Slice(content, this.openStart, this.openEnd)
    };

    Slice.prototype.removeBetween = function removeBetween (from, to) {
      return new Slice(removeRange(this.content, from + this.openStart, to + this.openStart), this.openStart, this.openEnd)
    };

    // :: (Slice) → bool
    // Tests whether this slice is equal to another slice.
    Slice.prototype.eq = function eq (other) {
      return this.content.eq(other.content) && this.openStart == other.openStart && this.openEnd == other.openEnd
    };

    Slice.prototype.toString = function toString () {
      return this.content + "(" + this.openStart + "," + this.openEnd + ")"
    };

    // :: () → ?Object
    // Convert a slice to a JSON-serializable representation.
    Slice.prototype.toJSON = function toJSON () {
      if (!this.content.size) { return null }
      var json = {content: this.content.toJSON()};
      if (this.openStart > 0) { json.openStart = this.openStart; }
      if (this.openEnd > 0) { json.openEnd = this.openEnd; }
      return json
    };

    // :: (Schema, ?Object) → Slice
    // Deserialize a slice from its JSON representation.
    Slice.fromJSON = function fromJSON (schema, json) {
      if (!json) { return Slice.empty }
      var openStart = json.openStart || 0, openEnd = json.openEnd || 0;
      if (typeof openStart != "number" || typeof openEnd != "number")
        { throw new RangeError("Invalid input for Slice.fromJSON") }
      return new Slice(Fragment.fromJSON(schema, json.content), openStart, openEnd)
    };

    // :: (Fragment, ?bool) → Slice
    // Create a slice from a fragment by taking the maximum possible
    // open value on both side of the fragment.
    Slice.maxOpen = function maxOpen (fragment, openIsolating) {
        if ( openIsolating === void 0 ) openIsolating=true;

      var openStart = 0, openEnd = 0;
      for (var n = fragment.firstChild; n && !n.isLeaf && (openIsolating || !n.type.spec.isolating); n = n.firstChild) { openStart++; }
      for (var n$1 = fragment.lastChild; n$1 && !n$1.isLeaf && (openIsolating || !n$1.type.spec.isolating); n$1 = n$1.lastChild) { openEnd++; }
      return new Slice(fragment, openStart, openEnd)
    };

    Object.defineProperties( Slice.prototype, prototypeAccessors$1$3 );

    function removeRange(content, from, to) {
      var ref = content.findIndex(from);
      var index = ref.index;
      var offset = ref.offset;
      var child = content.maybeChild(index);
      var ref$1 = content.findIndex(to);
      var indexTo = ref$1.index;
      var offsetTo = ref$1.offset;
      if (offset == from || child.isText) {
        if (offsetTo != to && !content.child(indexTo).isText) { throw new RangeError("Removing non-flat range") }
        return content.cut(0, from).append(content.cut(to))
      }
      if (index != indexTo) { throw new RangeError("Removing non-flat range") }
      return content.replaceChild(index, child.copy(removeRange(child.content, from - offset - 1, to - offset - 1)))
    }

    function insertInto(content, dist, insert, parent) {
      var ref = content.findIndex(dist);
      var index = ref.index;
      var offset = ref.offset;
      var child = content.maybeChild(index);
      if (offset == dist || child.isText) {
        if (parent && !parent.canReplace(index, index, insert)) { return null }
        return content.cut(0, dist).append(insert).append(content.cut(dist))
      }
      var inner = insertInto(child.content, dist - offset - 1, insert);
      return inner && content.replaceChild(index, child.copy(inner))
    }

    // :: Slice
    // The empty slice.
    Slice.empty = new Slice(Fragment.empty, 0, 0);

    function replace($from, $to, slice) {
      if (slice.openStart > $from.depth)
        { throw new ReplaceError("Inserted content deeper than insertion position") }
      if ($from.depth - slice.openStart != $to.depth - slice.openEnd)
        { throw new ReplaceError("Inconsistent open depths") }
      return replaceOuter($from, $to, slice, 0)
    }

    function replaceOuter($from, $to, slice, depth) {
      var index = $from.index(depth), node = $from.node(depth);
      if (index == $to.index(depth) && depth < $from.depth - slice.openStart) {
        var inner = replaceOuter($from, $to, slice, depth + 1);
        return node.copy(node.content.replaceChild(index, inner))
      } else if (!slice.content.size) {
        return close(node, replaceTwoWay($from, $to, depth))
      } else if (!slice.openStart && !slice.openEnd && $from.depth == depth && $to.depth == depth) { // Simple, flat case
        var parent = $from.parent, content = parent.content;
        return close(parent, content.cut(0, $from.parentOffset).append(slice.content).append(content.cut($to.parentOffset)))
      } else {
        var ref = prepareSliceForReplace(slice, $from);
        var start = ref.start;
        var end = ref.end;
        return close(node, replaceThreeWay($from, start, end, $to, depth))
      }
    }

    function checkJoin(main, sub) {
      if (!sub.type.compatibleContent(main.type))
        { throw new ReplaceError("Cannot join " + sub.type.name + " onto " + main.type.name) }
    }

    function joinable$1($before, $after, depth) {
      var node = $before.node(depth);
      checkJoin(node, $after.node(depth));
      return node
    }

    function addNode(child, target) {
      var last = target.length - 1;
      if (last >= 0 && child.isText && child.sameMarkup(target[last]))
        { target[last] = child.withText(target[last].text + child.text); }
      else
        { target.push(child); }
    }

    function addRange($start, $end, depth, target) {
      var node = ($end || $start).node(depth);
      var startIndex = 0, endIndex = $end ? $end.index(depth) : node.childCount;
      if ($start) {
        startIndex = $start.index(depth);
        if ($start.depth > depth) {
          startIndex++;
        } else if ($start.textOffset) {
          addNode($start.nodeAfter, target);
          startIndex++;
        }
      }
      for (var i = startIndex; i < endIndex; i++) { addNode(node.child(i), target); }
      if ($end && $end.depth == depth && $end.textOffset)
        { addNode($end.nodeBefore, target); }
    }

    function close(node, content) {
      if (!node.type.validContent(content))
        { throw new ReplaceError("Invalid content for node " + node.type.name) }
      return node.copy(content)
    }

    function replaceThreeWay($from, $start, $end, $to, depth) {
      var openStart = $from.depth > depth && joinable$1($from, $start, depth + 1);
      var openEnd = $to.depth > depth && joinable$1($end, $to, depth + 1);

      var content = [];
      addRange(null, $from, depth, content);
      if (openStart && openEnd && $start.index(depth) == $end.index(depth)) {
        checkJoin(openStart, openEnd);
        addNode(close(openStart, replaceThreeWay($from, $start, $end, $to, depth + 1)), content);
      } else {
        if (openStart)
          { addNode(close(openStart, replaceTwoWay($from, $start, depth + 1)), content); }
        addRange($start, $end, depth, content);
        if (openEnd)
          { addNode(close(openEnd, replaceTwoWay($end, $to, depth + 1)), content); }
      }
      addRange($to, null, depth, content);
      return new Fragment(content)
    }

    function replaceTwoWay($from, $to, depth) {
      var content = [];
      addRange(null, $from, depth, content);
      if ($from.depth > depth) {
        var type = joinable$1($from, $to, depth + 1);
        addNode(close(type, replaceTwoWay($from, $to, depth + 1)), content);
      }
      addRange($to, null, depth, content);
      return new Fragment(content)
    }

    function prepareSliceForReplace(slice, $along) {
      var extra = $along.depth - slice.openStart, parent = $along.node(extra);
      var node = parent.copy(slice.content);
      for (var i = extra - 1; i >= 0; i--)
        { node = $along.node(i).copy(Fragment.from(node)); }
      return {start: node.resolveNoCache(slice.openStart + extra),
              end: node.resolveNoCache(node.content.size - slice.openEnd - extra)}
    }

    // ::- You can [_resolve_](#model.Node.resolve) a position to get more
    // information about it. Objects of this class represent such a
    // resolved position, providing various pieces of context information,
    // and some helper methods.
    //
    // Throughout this interface, methods that take an optional `depth`
    // parameter will interpret undefined as `this.depth` and negative
    // numbers as `this.depth + value`.
    var ResolvedPos = function ResolvedPos(pos, path, parentOffset) {
      // :: number The position that was resolved.
      this.pos = pos;
      this.path = path;
      // :: number
      // The number of levels the parent node is from the root. If this
      // position points directly into the root node, it is 0. If it
      // points into a top-level paragraph, 1, and so on.
      this.depth = path.length / 3 - 1;
      // :: number The offset this position has into its parent node.
      this.parentOffset = parentOffset;
    };

    var prototypeAccessors$2$1 = { parent: { configurable: true },doc: { configurable: true },textOffset: { configurable: true },nodeAfter: { configurable: true },nodeBefore: { configurable: true } };

    ResolvedPos.prototype.resolveDepth = function resolveDepth (val) {
      if (val == null) { return this.depth }
      if (val < 0) { return this.depth + val }
      return val
    };

    // :: Node
    // The parent node that the position points into. Note that even if
    // a position points into a text node, that node is not considered
    // the parent—text nodes are ‘flat’ in this model, and have no content.
    prototypeAccessors$2$1.parent.get = function () { return this.node(this.depth) };

    // :: Node
    // The root node in which the position was resolved.
    prototypeAccessors$2$1.doc.get = function () { return this.node(0) };

    // :: (?number) → Node
    // The ancestor node at the given level. `p.node(p.depth)` is the
    // same as `p.parent`.
    ResolvedPos.prototype.node = function node (depth) { return this.path[this.resolveDepth(depth) * 3] };

    // :: (?number) → number
    // The index into the ancestor at the given level. If this points at
    // the 3rd node in the 2nd paragraph on the top level, for example,
    // `p.index(0)` is 1 and `p.index(1)` is 2.
    ResolvedPos.prototype.index = function index (depth) { return this.path[this.resolveDepth(depth) * 3 + 1] };

    // :: (?number) → number
    // The index pointing after this position into the ancestor at the
    // given level.
    ResolvedPos.prototype.indexAfter = function indexAfter (depth) {
      depth = this.resolveDepth(depth);
      return this.index(depth) + (depth == this.depth && !this.textOffset ? 0 : 1)
    };

    // :: (?number) → number
    // The (absolute) position at the start of the node at the given
    // level.
    ResolvedPos.prototype.start = function start (depth) {
      depth = this.resolveDepth(depth);
      return depth == 0 ? 0 : this.path[depth * 3 - 1] + 1
    };

    // :: (?number) → number
    // The (absolute) position at the end of the node at the given
    // level.
    ResolvedPos.prototype.end = function end (depth) {
      depth = this.resolveDepth(depth);
      return this.start(depth) + this.node(depth).content.size
    };

    // :: (?number) → number
    // The (absolute) position directly before the wrapping node at the
    // given level, or, when `depth` is `this.depth + 1`, the original
    // position.
    ResolvedPos.prototype.before = function before (depth) {
      depth = this.resolveDepth(depth);
      if (!depth) { throw new RangeError("There is no position before the top-level node") }
      return depth == this.depth + 1 ? this.pos : this.path[depth * 3 - 1]
    };

    // :: (?number) → number
    // The (absolute) position directly after the wrapping node at the
    // given level, or the original position when `depth` is `this.depth + 1`.
    ResolvedPos.prototype.after = function after (depth) {
      depth = this.resolveDepth(depth);
      if (!depth) { throw new RangeError("There is no position after the top-level node") }
      return depth == this.depth + 1 ? this.pos : this.path[depth * 3 - 1] + this.path[depth * 3].nodeSize
    };

    // :: number
    // When this position points into a text node, this returns the
    // distance between the position and the start of the text node.
    // Will be zero for positions that point between nodes.
    prototypeAccessors$2$1.textOffset.get = function () { return this.pos - this.path[this.path.length - 1] };

    // :: ?Node
    // Get the node directly after the position, if any. If the position
    // points into a text node, only the part of that node after the
    // position is returned.
    prototypeAccessors$2$1.nodeAfter.get = function () {
      var parent = this.parent, index = this.index(this.depth);
      if (index == parent.childCount) { return null }
      var dOff = this.pos - this.path[this.path.length - 1], child = parent.child(index);
      return dOff ? parent.child(index).cut(dOff) : child
    };

    // :: ?Node
    // Get the node directly before the position, if any. If the
    // position points into a text node, only the part of that node
    // before the position is returned.
    prototypeAccessors$2$1.nodeBefore.get = function () {
      var index = this.index(this.depth);
      var dOff = this.pos - this.path[this.path.length - 1];
      if (dOff) { return this.parent.child(index).cut(0, dOff) }
      return index == 0 ? null : this.parent.child(index - 1)
    };

    // :: (number, ?number) → number
    // Get the position at the given index in the parent node at the
    // given depth (which defaults to `this.depth`).
    ResolvedPos.prototype.posAtIndex = function posAtIndex (index, depth) {
      depth = this.resolveDepth(depth);
      var node = this.path[depth * 3], pos = depth == 0 ? 0 : this.path[depth * 3 - 1] + 1;
      for (var i = 0; i < index; i++) { pos += node.child(i).nodeSize; }
      return pos
    };

    // :: () → [Mark]
    // Get the marks at this position, factoring in the surrounding
    // marks' [`inclusive`](#model.MarkSpec.inclusive) property. If the
    // position is at the start of a non-empty node, the marks of the
    // node after it (if any) are returned.
    ResolvedPos.prototype.marks = function marks () {
      var parent = this.parent, index = this.index();

      // In an empty parent, return the empty array
      if (parent.content.size == 0) { return Mark$1.none }

      // When inside a text node, just return the text node's marks
      if (this.textOffset) { return parent.child(index).marks }

      var main = parent.maybeChild(index - 1), other = parent.maybeChild(index);
      // If the `after` flag is true of there is no node before, make
      // the node after this position the main reference.
      if (!main) { var tmp = main; main = other; other = tmp; }

      // Use all marks in the main node, except those that have
      // `inclusive` set to false and are not present in the other node.
      var marks = main.marks;
      for (var i = 0; i < marks.length; i++)
        { if (marks[i].type.spec.inclusive === false && (!other || !marks[i].isInSet(other.marks)))
          { marks = marks[i--].removeFromSet(marks); } }

      return marks
    };

    // :: (ResolvedPos) → ?[Mark]
    // Get the marks after the current position, if any, except those
    // that are non-inclusive and not present at position `$end`. This
    // is mostly useful for getting the set of marks to preserve after a
    // deletion. Will return `null` if this position is at the end of
    // its parent node or its parent node isn't a textblock (in which
    // case no marks should be preserved).
    ResolvedPos.prototype.marksAcross = function marksAcross ($end) {
      var after = this.parent.maybeChild(this.index());
      if (!after || !after.isInline) { return null }

      var marks = after.marks, next = $end.parent.maybeChild($end.index());
      for (var i = 0; i < marks.length; i++)
        { if (marks[i].type.spec.inclusive === false && (!next || !marks[i].isInSet(next.marks)))
          { marks = marks[i--].removeFromSet(marks); } }
      return marks
    };

    // :: (number) → number
    // The depth up to which this position and the given (non-resolved)
    // position share the same parent nodes.
    ResolvedPos.prototype.sharedDepth = function sharedDepth (pos) {
      for (var depth = this.depth; depth > 0; depth--)
        { if (this.start(depth) <= pos && this.end(depth) >= pos) { return depth } }
      return 0
    };

    // :: (?ResolvedPos, ?(Node) → bool) → ?NodeRange
    // Returns a range based on the place where this position and the
    // given position diverge around block content. If both point into
    // the same textblock, for example, a range around that textblock
    // will be returned. If they point into different blocks, the range
    // around those blocks in their shared ancestor is returned. You can
    // pass in an optional predicate that will be called with a parent
    // node to see if a range into that parent is acceptable.
    ResolvedPos.prototype.blockRange = function blockRange (other, pred) {
        if ( other === void 0 ) other = this;

      if (other.pos < this.pos) { return other.blockRange(this) }
      for (var d = this.depth - (this.parent.inlineContent || this.pos == other.pos ? 1 : 0); d >= 0; d--)
        { if (other.pos <= this.end(d) && (!pred || pred(this.node(d))))
          { return new NodeRange(this, other, d) } }
    };

    // :: (ResolvedPos) → bool
    // Query whether the given position shares the same parent node.
    ResolvedPos.prototype.sameParent = function sameParent (other) {
      return this.pos - this.parentOffset == other.pos - other.parentOffset
    };

    // :: (ResolvedPos) → ResolvedPos
    // Return the greater of this and the given position.
    ResolvedPos.prototype.max = function max (other) {
      return other.pos > this.pos ? other : this
    };

    // :: (ResolvedPos) → ResolvedPos
    // Return the smaller of this and the given position.
    ResolvedPos.prototype.min = function min (other) {
      return other.pos < this.pos ? other : this
    };

    ResolvedPos.prototype.toString = function toString () {
      var str = "";
      for (var i = 1; i <= this.depth; i++)
        { str += (str ? "/" : "") + this.node(i).type.name + "_" + this.index(i - 1); }
      return str + ":" + this.parentOffset
    };

    ResolvedPos.resolve = function resolve (doc, pos) {
      if (!(pos >= 0 && pos <= doc.content.size)) { throw new RangeError("Position " + pos + " out of range") }
      var path = [];
      var start = 0, parentOffset = pos;
      for (var node = doc;;) {
        var ref = node.content.findIndex(parentOffset);
          var index = ref.index;
          var offset = ref.offset;
        var rem = parentOffset - offset;
        path.push(node, index, start + offset);
        if (!rem) { break }
        node = node.child(index);
        if (node.isText) { break }
        parentOffset = rem - 1;
        start += offset + 1;
      }
      return new ResolvedPos(pos, path, parentOffset)
    };

    ResolvedPos.resolveCached = function resolveCached (doc, pos) {
      for (var i = 0; i < resolveCache.length; i++) {
        var cached = resolveCache[i];
        if (cached.pos == pos && cached.doc == doc) { return cached }
      }
      var result = resolveCache[resolveCachePos] = ResolvedPos.resolve(doc, pos);
      resolveCachePos = (resolveCachePos + 1) % resolveCacheSize;
      return result
    };

    Object.defineProperties( ResolvedPos.prototype, prototypeAccessors$2$1 );

    var resolveCache = [], resolveCachePos = 0, resolveCacheSize = 12;

    // ::- Represents a flat range of content, i.e. one that starts and
    // ends in the same node.
    var NodeRange = function NodeRange($from, $to, depth) {
      // :: ResolvedPos A resolved position along the start of the
      // content. May have a `depth` greater than this object's `depth`
      // property, since these are the positions that were used to
      // compute the range, not re-resolved positions directly at its
      // boundaries.
      this.$from = $from;
      // :: ResolvedPos A position along the end of the content. See
      // caveat for [`$from`](#model.NodeRange.$from).
      this.$to = $to;
      // :: number The depth of the node that this range points into.
      this.depth = depth;
    };

    var prototypeAccessors$1$1$1 = { start: { configurable: true },end: { configurable: true },parent: { configurable: true },startIndex: { configurable: true },endIndex: { configurable: true } };

    // :: number The position at the start of the range.
    prototypeAccessors$1$1$1.start.get = function () { return this.$from.before(this.depth + 1) };
    // :: number The position at the end of the range.
    prototypeAccessors$1$1$1.end.get = function () { return this.$to.after(this.depth + 1) };

    // :: Node The parent node that the range points into.
    prototypeAccessors$1$1$1.parent.get = function () { return this.$from.node(this.depth) };
    // :: number The start index of the range in the parent node.
    prototypeAccessors$1$1$1.startIndex.get = function () { return this.$from.index(this.depth) };
    // :: number The end index of the range in the parent node.
    prototypeAccessors$1$1$1.endIndex.get = function () { return this.$to.indexAfter(this.depth) };

    Object.defineProperties( NodeRange.prototype, prototypeAccessors$1$1$1 );

    var emptyAttrs = Object.create(null);

    // ::- This class represents a node in the tree that makes up a
    // ProseMirror document. So a document is an instance of `Node`, with
    // children that are also instances of `Node`.
    //
    // Nodes are persistent data structures. Instead of changing them, you
    // create new ones with the content you want. Old ones keep pointing
    // at the old document shape. This is made cheaper by sharing
    // structure between the old and new data as much as possible, which a
    // tree shape like this (without back pointers) makes easy.
    //
    // **Do not** directly mutate the properties of a `Node` object. See
    // [the guide](/docs/guide/#doc) for more information.
    var Node$3 = function Node(type, attrs, content, marks) {
      // :: NodeType
      // The type of node that this is.
      this.type = type;

      // :: Object
      // An object mapping attribute names to values. The kind of
      // attributes allowed and required are
      // [determined](#model.NodeSpec.attrs) by the node type.
      this.attrs = attrs;

      // :: Fragment
      // A container holding the node's children.
      this.content = content || Fragment.empty;

      // :: [Mark]
      // The marks (things like whether it is emphasized or part of a
      // link) applied to this node.
      this.marks = marks || Mark$1.none;
    };

    var prototypeAccessors$3$1 = { nodeSize: { configurable: true },childCount: { configurable: true },textContent: { configurable: true },firstChild: { configurable: true },lastChild: { configurable: true },isBlock: { configurable: true },isTextblock: { configurable: true },inlineContent: { configurable: true },isInline: { configurable: true },isText: { configurable: true },isLeaf: { configurable: true },isAtom: { configurable: true } };

    // text:: ?string
    // For text nodes, this contains the node's text content.

    // :: number
    // The size of this node, as defined by the integer-based [indexing
    // scheme](/docs/guide/#doc.indexing). For text nodes, this is the
    // amount of characters. For other leaf nodes, it is one. For
    // non-leaf nodes, it is the size of the content plus two (the start
    // and end token).
    prototypeAccessors$3$1.nodeSize.get = function () { return this.isLeaf ? 1 : 2 + this.content.size };

    // :: number
    // The number of children that the node has.
    prototypeAccessors$3$1.childCount.get = function () { return this.content.childCount };

    // :: (number) → Node
    // Get the child node at the given index. Raises an error when the
    // index is out of range.
    Node$3.prototype.child = function child (index) { return this.content.child(index) };

    // :: (number) → ?Node
    // Get the child node at the given index, if it exists.
    Node$3.prototype.maybeChild = function maybeChild (index) { return this.content.maybeChild(index) };

    // :: ((node: Node, offset: number, index: number))
    // Call `f` for every child node, passing the node, its offset
    // into this parent node, and its index.
    Node$3.prototype.forEach = function forEach (f) { this.content.forEach(f); };

    // :: (number, number, (node: Node, pos: number, parent: Node, index: number) → ?bool, ?number)
    // Invoke a callback for all descendant nodes recursively between
    // the given two positions that are relative to start of this node's
    // content. The callback is invoked with the node, its
    // parent-relative position, its parent node, and its child index.
    // When the callback returns false for a given node, that node's
    // children will not be recursed over. The last parameter can be
    // used to specify a starting position to count from.
    Node$3.prototype.nodesBetween = function nodesBetween (from, to, f, startPos) {
        if ( startPos === void 0 ) startPos = 0;

      this.content.nodesBetween(from, to, f, startPos, this);
    };

    // :: ((node: Node, pos: number, parent: Node) → ?bool)
    // Call the given callback for every descendant node. Doesn't
    // descend into a node when the callback returns `false`.
    Node$3.prototype.descendants = function descendants (f) {
      this.nodesBetween(0, this.content.size, f);
    };

    // :: string
    // Concatenates all the text nodes found in this fragment and its
    // children.
    prototypeAccessors$3$1.textContent.get = function () { return this.textBetween(0, this.content.size, "") };

    // :: (number, number, ?string, ?string) → string
    // Get all text between positions `from` and `to`. When
    // `blockSeparator` is given, it will be inserted whenever a new
    // block node is started. When `leafText` is given, it'll be
    // inserted for every non-text leaf node encountered.
    Node$3.prototype.textBetween = function textBetween (from, to, blockSeparator, leafText) {
      return this.content.textBetween(from, to, blockSeparator, leafText)
    };

    // :: ?Node
    // Returns this node's first child, or `null` if there are no
    // children.
    prototypeAccessors$3$1.firstChild.get = function () { return this.content.firstChild };

    // :: ?Node
    // Returns this node's last child, or `null` if there are no
    // children.
    prototypeAccessors$3$1.lastChild.get = function () { return this.content.lastChild };

    // :: (Node) → bool
    // Test whether two nodes represent the same piece of document.
    Node$3.prototype.eq = function eq (other) {
      return this == other || (this.sameMarkup(other) && this.content.eq(other.content))
    };

    // :: (Node) → bool
    // Compare the markup (type, attributes, and marks) of this node to
    // those of another. Returns `true` if both have the same markup.
    Node$3.prototype.sameMarkup = function sameMarkup (other) {
      return this.hasMarkup(other.type, other.attrs, other.marks)
    };

    // :: (NodeType, ?Object, ?[Mark]) → bool
    // Check whether this node's markup correspond to the given type,
    // attributes, and marks.
    Node$3.prototype.hasMarkup = function hasMarkup (type, attrs, marks) {
      return this.type == type &&
        compareDeep(this.attrs, attrs || type.defaultAttrs || emptyAttrs) &&
        Mark$1.sameSet(this.marks, marks || Mark$1.none)
    };

    // :: (?Fragment) → Node
    // Create a new node with the same markup as this node, containing
    // the given content (or empty, if no content is given).
    Node$3.prototype.copy = function copy (content) {
        if ( content === void 0 ) content = null;

      if (content == this.content) { return this }
      return new this.constructor(this.type, this.attrs, content, this.marks)
    };

    // :: ([Mark]) → Node
    // Create a copy of this node, with the given set of marks instead
    // of the node's own marks.
    Node$3.prototype.mark = function mark (marks) {
      return marks == this.marks ? this : new this.constructor(this.type, this.attrs, this.content, marks)
    };

    // :: (number, ?number) → Node
    // Create a copy of this node with only the content between the
    // given positions. If `to` is not given, it defaults to the end of
    // the node.
    Node$3.prototype.cut = function cut (from, to) {
      if (from == 0 && to == this.content.size) { return this }
      return this.copy(this.content.cut(from, to))
    };

    // :: (number, ?number) → Slice
    // Cut out the part of the document between the given positions, and
    // return it as a `Slice` object.
    Node$3.prototype.slice = function slice (from, to, includeParents) {
        if ( to === void 0 ) to = this.content.size;
        if ( includeParents === void 0 ) includeParents = false;

      if (from == to) { return Slice.empty }

      var $from = this.resolve(from), $to = this.resolve(to);
      var depth = includeParents ? 0 : $from.sharedDepth(to);
      var start = $from.start(depth), node = $from.node(depth);
      var content = node.content.cut($from.pos - start, $to.pos - start);
      return new Slice(content, $from.depth - depth, $to.depth - depth)
    };

    // :: (number, number, Slice) → Node
    // Replace the part of the document between the given positions with
    // the given slice. The slice must 'fit', meaning its open sides
    // must be able to connect to the surrounding content, and its
    // content nodes must be valid children for the node they are placed
    // into. If any of this is violated, an error of type
    // [`ReplaceError`](#model.ReplaceError) is thrown.
    Node$3.prototype.replace = function replace$1 (from, to, slice) {
      return replace(this.resolve(from), this.resolve(to), slice)
    };

    // :: (number) → ?Node
    // Find the node directly after the given position.
    Node$3.prototype.nodeAt = function nodeAt (pos) {
      for (var node = this;;) {
        var ref = node.content.findIndex(pos);
          var index = ref.index;
          var offset = ref.offset;
        node = node.maybeChild(index);
        if (!node) { return null }
        if (offset == pos || node.isText) { return node }
        pos -= offset + 1;
      }
    };

    // :: (number) → {node: ?Node, index: number, offset: number}
    // Find the (direct) child node after the given offset, if any,
    // and return it along with its index and offset relative to this
    // node.
    Node$3.prototype.childAfter = function childAfter (pos) {
      var ref = this.content.findIndex(pos);
        var index = ref.index;
        var offset = ref.offset;
      return {node: this.content.maybeChild(index), index: index, offset: offset}
    };

    // :: (number) → {node: ?Node, index: number, offset: number}
    // Find the (direct) child node before the given offset, if any,
    // and return it along with its index and offset relative to this
    // node.
    Node$3.prototype.childBefore = function childBefore (pos) {
      if (pos == 0) { return {node: null, index: 0, offset: 0} }
      var ref = this.content.findIndex(pos);
        var index = ref.index;
        var offset = ref.offset;
      if (offset < pos) { return {node: this.content.child(index), index: index, offset: offset} }
      var node = this.content.child(index - 1);
      return {node: node, index: index - 1, offset: offset - node.nodeSize}
    };

    // :: (number) → ResolvedPos
    // Resolve the given position in the document, returning an
    // [object](#model.ResolvedPos) with information about its context.
    Node$3.prototype.resolve = function resolve (pos) { return ResolvedPos.resolveCached(this, pos) };

    Node$3.prototype.resolveNoCache = function resolveNoCache (pos) { return ResolvedPos.resolve(this, pos) };

    // :: (number, number, union<Mark, MarkType>) → bool
    // Test whether a given mark or mark type occurs in this document
    // between the two given positions.
    Node$3.prototype.rangeHasMark = function rangeHasMark (from, to, type) {
      var found = false;
      if (to > from) { this.nodesBetween(from, to, function (node) {
        if (type.isInSet(node.marks)) { found = true; }
        return !found
      }); }
      return found
    };

    // :: bool
    // True when this is a block (non-inline node)
    prototypeAccessors$3$1.isBlock.get = function () { return this.type.isBlock };

    // :: bool
    // True when this is a textblock node, a block node with inline
    // content.
    prototypeAccessors$3$1.isTextblock.get = function () { return this.type.isTextblock };

    // :: bool
    // True when this node allows inline content.
    prototypeAccessors$3$1.inlineContent.get = function () { return this.type.inlineContent };

    // :: bool
    // True when this is an inline node (a text node or a node that can
    // appear among text).
    prototypeAccessors$3$1.isInline.get = function () { return this.type.isInline };

    // :: bool
    // True when this is a text node.
    prototypeAccessors$3$1.isText.get = function () { return this.type.isText };

    // :: bool
    // True when this is a leaf node.
    prototypeAccessors$3$1.isLeaf.get = function () { return this.type.isLeaf };

    // :: bool
    // True when this is an atom, i.e. when it does not have directly
    // editable content. This is usually the same as `isLeaf`, but can
    // be configured with the [`atom` property](#model.NodeSpec.atom) on
    // a node's spec (typically used when the node is displayed as an
    // uneditable [node view](#view.NodeView)).
    prototypeAccessors$3$1.isAtom.get = function () { return this.type.isAtom };

    // :: () → string
    // Return a string representation of this node for debugging
    // purposes.
    Node$3.prototype.toString = function toString () {
      if (this.type.spec.toDebugString) { return this.type.spec.toDebugString(this) }
      var name = this.type.name;
      if (this.content.size)
        { name += "(" + this.content.toStringInner() + ")"; }
      return wrapMarks(this.marks, name)
    };

    // :: (number) → ContentMatch
    // Get the content match in this node at the given index.
    Node$3.prototype.contentMatchAt = function contentMatchAt (index) {
      var match = this.type.contentMatch.matchFragment(this.content, 0, index);
      if (!match) { throw new Error("Called contentMatchAt on a node with invalid content") }
      return match
    };

    // :: (number, number, ?Fragment, ?number, ?number) → bool
    // Test whether replacing the range between `from` and `to` (by
    // child index) with the given replacement fragment (which defaults
    // to the empty fragment) would leave the node's content valid. You
    // can optionally pass `start` and `end` indices into the
    // replacement fragment.
    Node$3.prototype.canReplace = function canReplace (from, to, replacement, start, end) {
        if ( replacement === void 0 ) replacement = Fragment.empty;
        if ( start === void 0 ) start = 0;
        if ( end === void 0 ) end = replacement.childCount;

      var one = this.contentMatchAt(from).matchFragment(replacement, start, end);
      var two = one && one.matchFragment(this.content, to);
      if (!two || !two.validEnd) { return false }
      for (var i = start; i < end; i++) { if (!this.type.allowsMarks(replacement.child(i).marks)) { return false } }
      return true
    };

    // :: (number, number, NodeType, ?[Mark]) → bool
    // Test whether replacing the range `from` to `to` (by index) with a
    // node of the given type would leave the node's content valid.
    Node$3.prototype.canReplaceWith = function canReplaceWith (from, to, type, marks) {
      if (marks && !this.type.allowsMarks(marks)) { return false }
      var start = this.contentMatchAt(from).matchType(type);
      var end = start && start.matchFragment(this.content, to);
      return end ? end.validEnd : false
    };

    // :: (Node) → bool
    // Test whether the given node's content could be appended to this
    // node. If that node is empty, this will only return true if there
    // is at least one node type that can appear in both nodes (to avoid
    // merging completely incompatible nodes).
    Node$3.prototype.canAppend = function canAppend (other) {
      if (other.content.size) { return this.canReplace(this.childCount, this.childCount, other.content) }
      else { return this.type.compatibleContent(other.type) }
    };

    // :: ()
    // Check whether this node and its descendants conform to the
    // schema, and raise error when they do not.
    Node$3.prototype.check = function check () {
      if (!this.type.validContent(this.content))
        { throw new RangeError(("Invalid content for node " + (this.type.name) + ": " + (this.content.toString().slice(0, 50)))) }
      var copy = Mark$1.none;
      for (var i = 0; i < this.marks.length; i++) { copy = this.marks[i].addToSet(copy); }
      if (!Mark$1.sameSet(copy, this.marks))
        { throw new RangeError(("Invalid collection of marks for node " + (this.type.name) + ": " + (this.marks.map(function (m) { return m.type.name; })))) }
      this.content.forEach(function (node) { return node.check(); });
    };

    // :: () → Object
    // Return a JSON-serializeable representation of this node.
    Node$3.prototype.toJSON = function toJSON () {
      var obj = {type: this.type.name};
      for (var _ in this.attrs) {
        obj.attrs = this.attrs;
        break
      }
      if (this.content.size)
        { obj.content = this.content.toJSON(); }
      if (this.marks.length)
        { obj.marks = this.marks.map(function (n) { return n.toJSON(); }); }
      return obj
    };

    // :: (Schema, Object) → Node
    // Deserialize a node from its JSON representation.
    Node$3.fromJSON = function fromJSON (schema, json) {
      if (!json) { throw new RangeError("Invalid input for Node.fromJSON") }
      var marks = null;
      if (json.marks) {
        if (!Array.isArray(json.marks)) { throw new RangeError("Invalid mark data for Node.fromJSON") }
        marks = json.marks.map(schema.markFromJSON);
      }
      if (json.type == "text") {
        if (typeof json.text != "string") { throw new RangeError("Invalid text node in JSON") }
        return schema.text(json.text, marks)
      }
      var content = Fragment.fromJSON(schema, json.content);
      return schema.nodeType(json.type).create(json.attrs, content, marks)
    };

    Object.defineProperties( Node$3.prototype, prototypeAccessors$3$1 );

    var TextNode = /*@__PURE__*/(function (Node) {
      function TextNode(type, attrs, content, marks) {
        Node.call(this, type, attrs, null, marks);

        if (!content) { throw new RangeError("Empty text nodes are not allowed") }

        this.text = content;
      }

      if ( Node ) TextNode.__proto__ = Node;
      TextNode.prototype = Object.create( Node && Node.prototype );
      TextNode.prototype.constructor = TextNode;

      var prototypeAccessors$1 = { textContent: { configurable: true },nodeSize: { configurable: true } };

      TextNode.prototype.toString = function toString () {
        if (this.type.spec.toDebugString) { return this.type.spec.toDebugString(this) }
        return wrapMarks(this.marks, JSON.stringify(this.text))
      };

      prototypeAccessors$1.textContent.get = function () { return this.text };

      TextNode.prototype.textBetween = function textBetween (from, to) { return this.text.slice(from, to) };

      prototypeAccessors$1.nodeSize.get = function () { return this.text.length };

      TextNode.prototype.mark = function mark (marks) {
        return marks == this.marks ? this : new TextNode(this.type, this.attrs, this.text, marks)
      };

      TextNode.prototype.withText = function withText (text) {
        if (text == this.text) { return this }
        return new TextNode(this.type, this.attrs, text, this.marks)
      };

      TextNode.prototype.cut = function cut (from, to) {
        if ( from === void 0 ) from = 0;
        if ( to === void 0 ) to = this.text.length;

        if (from == 0 && to == this.text.length) { return this }
        return this.withText(this.text.slice(from, to))
      };

      TextNode.prototype.eq = function eq (other) {
        return this.sameMarkup(other) && this.text == other.text
      };

      TextNode.prototype.toJSON = function toJSON () {
        var base = Node.prototype.toJSON.call(this);
        base.text = this.text;
        return base
      };

      Object.defineProperties( TextNode.prototype, prototypeAccessors$1 );

      return TextNode;
    }(Node$3));

    function wrapMarks(marks, str) {
      for (var i = marks.length - 1; i >= 0; i--)
        { str = marks[i].type.name + "(" + str + ")"; }
      return str
    }

    // ::- Instances of this class represent a match state of a node
    // type's [content expression](#model.NodeSpec.content), and can be
    // used to find out whether further content matches here, and whether
    // a given position is a valid end of the node.
    var ContentMatch = function ContentMatch(validEnd) {
      // :: bool
      // True when this match state represents a valid end of the node.
      this.validEnd = validEnd;
      this.next = [];
      this.wrapCache = [];
    };

    var prototypeAccessors$4$1 = { inlineContent: { configurable: true },defaultType: { configurable: true },edgeCount: { configurable: true } };

    ContentMatch.parse = function parse (string, nodeTypes) {
      var stream = new TokenStream(string, nodeTypes);
      if (stream.next == null) { return ContentMatch.empty }
      var expr = parseExpr(stream);
      if (stream.next) { stream.err("Unexpected trailing text"); }
      var match = dfa(nfa(expr));
      checkForDeadEnds(match, stream);
      return match
    };

    // :: (NodeType) → ?ContentMatch
    // Match a node type, returning a match after that node if
    // successful.
    ContentMatch.prototype.matchType = function matchType (type) {
      for (var i = 0; i < this.next.length; i += 2)
        { if (this.next[i] == type) { return this.next[i + 1] } }
      return null
    };

    // :: (Fragment, ?number, ?number) → ?ContentMatch
    // Try to match a fragment. Returns the resulting match when
    // successful.
    ContentMatch.prototype.matchFragment = function matchFragment (frag, start, end) {
        if ( start === void 0 ) start = 0;
        if ( end === void 0 ) end = frag.childCount;

      var cur = this;
      for (var i = start; cur && i < end; i++)
        { cur = cur.matchType(frag.child(i).type); }
      return cur
    };

    prototypeAccessors$4$1.inlineContent.get = function () {
      var first = this.next[0];
      return first ? first.isInline : false
    };

    // :: ?NodeType
    // Get the first matching node type at this match position that can
    // be generated.
    prototypeAccessors$4$1.defaultType.get = function () {
      for (var i = 0; i < this.next.length; i += 2) {
        var type = this.next[i];
        if (!(type.isText || type.hasRequiredAttrs())) { return type }
      }
    };

    ContentMatch.prototype.compatible = function compatible (other) {
      for (var i = 0; i < this.next.length; i += 2)
        { for (var j = 0; j < other.next.length; j += 2)
          { if (this.next[i] == other.next[j]) { return true } } }
      return false
    };

    // :: (Fragment, bool, ?number) → ?Fragment
    // Try to match the given fragment, and if that fails, see if it can
    // be made to match by inserting nodes in front of it. When
    // successful, return a fragment of inserted nodes (which may be
    // empty if nothing had to be inserted). When `toEnd` is true, only
    // return a fragment if the resulting match goes to the end of the
    // content expression.
    ContentMatch.prototype.fillBefore = function fillBefore (after, toEnd, startIndex) {
        if ( toEnd === void 0 ) toEnd = false;
        if ( startIndex === void 0 ) startIndex = 0;

      var seen = [this];
      function search(match, types) {
        var finished = match.matchFragment(after, startIndex);
        if (finished && (!toEnd || finished.validEnd))
          { return Fragment.from(types.map(function (tp) { return tp.createAndFill(); })) }

        for (var i = 0; i < match.next.length; i += 2) {
          var type = match.next[i], next = match.next[i + 1];
          if (!(type.isText || type.hasRequiredAttrs()) && seen.indexOf(next) == -1) {
            seen.push(next);
            var found = search(next, types.concat(type));
            if (found) { return found }
          }
        }
      }

      return search(this, [])
    };

    // :: (NodeType) → ?[NodeType]
    // Find a set of wrapping node types that would allow a node of the
    // given type to appear at this position. The result may be empty
    // (when it fits directly) and will be null when no such wrapping
    // exists.
    ContentMatch.prototype.findWrapping = function findWrapping (target) {
      for (var i = 0; i < this.wrapCache.length; i += 2)
        { if (this.wrapCache[i] == target) { return this.wrapCache[i + 1] } }
      var computed = this.computeWrapping(target);
      this.wrapCache.push(target, computed);
      return computed
    };

    ContentMatch.prototype.computeWrapping = function computeWrapping (target) {
      var seen = Object.create(null), active = [{match: this, type: null, via: null}];
      while (active.length) {
        var current = active.shift(), match = current.match;
        if (match.matchType(target)) {
          var result = [];
          for (var obj = current; obj.type; obj = obj.via)
            { result.push(obj.type); }
          return result.reverse()
        }
        for (var i = 0; i < match.next.length; i += 2) {
          var type = match.next[i];
          if (!type.isLeaf && !type.hasRequiredAttrs() && !(type.name in seen) && (!current.type || match.next[i + 1].validEnd)) {
            active.push({match: type.contentMatch, type: type, via: current});
            seen[type.name] = true;
          }
        }
      }
    };

    // :: number
    // The number of outgoing edges this node has in the finite
    // automaton that describes the content expression.
    prototypeAccessors$4$1.edgeCount.get = function () {
      return this.next.length >> 1
    };

    // :: (number) → {type: NodeType, next: ContentMatch}
    // Get the _n_​th outgoing edge from this node in the finite
    // automaton that describes the content expression.
    ContentMatch.prototype.edge = function edge (n) {
      var i = n << 1;
      if (i >= this.next.length) { throw new RangeError(("There's no " + n + "th edge in this content match")) }
      return {type: this.next[i], next: this.next[i + 1]}
    };

    ContentMatch.prototype.toString = function toString () {
      var seen = [];
      function scan(m) {
        seen.push(m);
        for (var i = 1; i < m.next.length; i += 2)
          { if (seen.indexOf(m.next[i]) == -1) { scan(m.next[i]); } }
      }
      scan(this);
      return seen.map(function (m, i) {
        var out = i + (m.validEnd ? "*" : " ") + " ";
        for (var i$1 = 0; i$1 < m.next.length; i$1 += 2)
          { out += (i$1 ? ", " : "") + m.next[i$1].name + "->" + seen.indexOf(m.next[i$1 + 1]); }
        return out
      }).join("\n")
    };

    Object.defineProperties( ContentMatch.prototype, prototypeAccessors$4$1 );

    ContentMatch.empty = new ContentMatch(true);

    var TokenStream = function TokenStream(string, nodeTypes) {
      this.string = string;
      this.nodeTypes = nodeTypes;
      this.inline = null;
      this.pos = 0;
      this.tokens = string.split(/\s*(?=\b|\W|$)/);
      if (this.tokens[this.tokens.length - 1] == "") { this.tokens.pop(); }
      if (this.tokens[0] == "") { this.tokens.shift(); }
    };

    var prototypeAccessors$1$2$1 = { next: { configurable: true } };

    prototypeAccessors$1$2$1.next.get = function () { return this.tokens[this.pos] };

    TokenStream.prototype.eat = function eat (tok) { return this.next == tok && (this.pos++ || true) };

    TokenStream.prototype.err = function err (str) { throw new SyntaxError(str + " (in content expression '" + this.string + "')") };

    Object.defineProperties( TokenStream.prototype, prototypeAccessors$1$2$1 );

    function parseExpr(stream) {
      var exprs = [];
      do { exprs.push(parseExprSeq(stream)); }
      while (stream.eat("|"))
      return exprs.length == 1 ? exprs[0] : {type: "choice", exprs: exprs}
    }

    function parseExprSeq(stream) {
      var exprs = [];
      do { exprs.push(parseExprSubscript(stream)); }
      while (stream.next && stream.next != ")" && stream.next != "|")
      return exprs.length == 1 ? exprs[0] : {type: "seq", exprs: exprs}
    }

    function parseExprSubscript(stream) {
      var expr = parseExprAtom(stream);
      for (;;) {
        if (stream.eat("+"))
          { expr = {type: "plus", expr: expr}; }
        else if (stream.eat("*"))
          { expr = {type: "star", expr: expr}; }
        else if (stream.eat("?"))
          { expr = {type: "opt", expr: expr}; }
        else if (stream.eat("{"))
          { expr = parseExprRange(stream, expr); }
        else { break }
      }
      return expr
    }

    function parseNum(stream) {
      if (/\D/.test(stream.next)) { stream.err("Expected number, got '" + stream.next + "'"); }
      var result = Number(stream.next);
      stream.pos++;
      return result
    }

    function parseExprRange(stream, expr) {
      var min = parseNum(stream), max = min;
      if (stream.eat(",")) {
        if (stream.next != "}") { max = parseNum(stream); }
        else { max = -1; }
      }
      if (!stream.eat("}")) { stream.err("Unclosed braced range"); }
      return {type: "range", min: min, max: max, expr: expr}
    }

    function resolveName(stream, name) {
      var types = stream.nodeTypes, type = types[name];
      if (type) { return [type] }
      var result = [];
      for (var typeName in types) {
        var type$1 = types[typeName];
        if (type$1.groups.indexOf(name) > -1) { result.push(type$1); }
      }
      if (result.length == 0) { stream.err("No node type or group '" + name + "' found"); }
      return result
    }

    function parseExprAtom(stream) {
      if (stream.eat("(")) {
        var expr = parseExpr(stream);
        if (!stream.eat(")")) { stream.err("Missing closing paren"); }
        return expr
      } else if (!/\W/.test(stream.next)) {
        var exprs = resolveName(stream, stream.next).map(function (type) {
          if (stream.inline == null) { stream.inline = type.isInline; }
          else if (stream.inline != type.isInline) { stream.err("Mixing inline and block content"); }
          return {type: "name", value: type}
        });
        stream.pos++;
        return exprs.length == 1 ? exprs[0] : {type: "choice", exprs: exprs}
      } else {
        stream.err("Unexpected token '" + stream.next + "'");
      }
    }

    // The code below helps compile a regular-expression-like language
    // into a deterministic finite automaton. For a good introduction to
    // these concepts, see https://swtch.com/~rsc/regexp/regexp1.html

    // : (Object) → [[{term: ?any, to: number}]]
    // Construct an NFA from an expression as returned by the parser. The
    // NFA is represented as an array of states, which are themselves
    // arrays of edges, which are `{term, to}` objects. The first state is
    // the entry state and the last node is the success state.
    //
    // Note that unlike typical NFAs, the edge ordering in this one is
    // significant, in that it is used to contruct filler content when
    // necessary.
    function nfa(expr) {
      var nfa = [[]];
      connect(compile(expr, 0), node());
      return nfa

      function node() { return nfa.push([]) - 1 }
      function edge(from, to, term) {
        var edge = {term: term, to: to};
        nfa[from].push(edge);
        return edge
      }
      function connect(edges, to) { edges.forEach(function (edge) { return edge.to = to; }); }

      function compile(expr, from) {
        if (expr.type == "choice") {
          return expr.exprs.reduce(function (out, expr) { return out.concat(compile(expr, from)); }, [])
        } else if (expr.type == "seq") {
          for (var i = 0;; i++) {
            var next = compile(expr.exprs[i], from);
            if (i == expr.exprs.length - 1) { return next }
            connect(next, from = node());
          }
        } else if (expr.type == "star") {
          var loop = node();
          edge(from, loop);
          connect(compile(expr.expr, loop), loop);
          return [edge(loop)]
        } else if (expr.type == "plus") {
          var loop$1 = node();
          connect(compile(expr.expr, from), loop$1);
          connect(compile(expr.expr, loop$1), loop$1);
          return [edge(loop$1)]
        } else if (expr.type == "opt") {
          return [edge(from)].concat(compile(expr.expr, from))
        } else if (expr.type == "range") {
          var cur = from;
          for (var i$1 = 0; i$1 < expr.min; i$1++) {
            var next$1 = node();
            connect(compile(expr.expr, cur), next$1);
            cur = next$1;
          }
          if (expr.max == -1) {
            connect(compile(expr.expr, cur), cur);
          } else {
            for (var i$2 = expr.min; i$2 < expr.max; i$2++) {
              var next$2 = node();
              edge(cur, next$2);
              connect(compile(expr.expr, cur), next$2);
              cur = next$2;
            }
          }
          return [edge(cur)]
        } else if (expr.type == "name") {
          return [edge(from, null, expr.value)]
        }
      }
    }

    function cmp(a, b) { return b - a }

    // Get the set of nodes reachable by null edges from `node`. Omit
    // nodes with only a single null-out-edge, since they may lead to
    // needless duplicated nodes.
    function nullFrom(nfa, node) {
      var result = [];
      scan(node);
      return result.sort(cmp)

      function scan(node) {
        var edges = nfa[node];
        if (edges.length == 1 && !edges[0].term) { return scan(edges[0].to) }
        result.push(node);
        for (var i = 0; i < edges.length; i++) {
          var ref = edges[i];
          var term = ref.term;
          var to = ref.to;
          if (!term && result.indexOf(to) == -1) { scan(to); }
        }
      }
    }

    // : ([[{term: ?any, to: number}]]) → ContentMatch
    // Compiles an NFA as produced by `nfa` into a DFA, modeled as a set
    // of state objects (`ContentMatch` instances) with transitions
    // between them.
    function dfa(nfa) {
      var labeled = Object.create(null);
      return explore(nullFrom(nfa, 0))

      function explore(states) {
        var out = [];
        states.forEach(function (node) {
          nfa[node].forEach(function (ref) {
            var term = ref.term;
            var to = ref.to;

            if (!term) { return }
            var known = out.indexOf(term), set = known > -1 && out[known + 1];
            nullFrom(nfa, to).forEach(function (node) {
              if (!set) { out.push(term, set = []); }
              if (set.indexOf(node) == -1) { set.push(node); }
            });
          });
        });
        var state = labeled[states.join(",")] = new ContentMatch(states.indexOf(nfa.length - 1) > -1);
        for (var i = 0; i < out.length; i += 2) {
          var states$1 = out[i + 1].sort(cmp);
          state.next.push(out[i], labeled[states$1.join(",")] || explore(states$1));
        }
        return state
      }
    }

    function checkForDeadEnds(match, stream) {
      for (var i = 0, work = [match]; i < work.length; i++) {
        var state = work[i], dead = !state.validEnd, nodes = [];
        for (var j = 0; j < state.next.length; j += 2) {
          var node = state.next[j], next = state.next[j + 1];
          nodes.push(node.name);
          if (dead && !(node.isText || node.hasRequiredAttrs())) { dead = false; }
          if (work.indexOf(next) == -1) { work.push(next); }
        }
        if (dead) { stream.err("Only non-generatable nodes (" + nodes.join(", ") + ") in a required position (see https://prosemirror.net/docs/guide/#generatable)"); }
      }
    }

    // For node types where all attrs have a default value (or which don't
    // have any attributes), build up a single reusable default attribute
    // object, and use it for all nodes that don't specify specific
    // attributes.
    function defaultAttrs(attrs) {
      var defaults = Object.create(null);
      for (var attrName in attrs) {
        var attr = attrs[attrName];
        if (!attr.hasDefault) { return null }
        defaults[attrName] = attr.default;
      }
      return defaults
    }

    function computeAttrs(attrs, value) {
      var built = Object.create(null);
      for (var name in attrs) {
        var given = value && value[name];
        if (given === undefined) {
          var attr = attrs[name];
          if (attr.hasDefault) { given = attr.default; }
          else { throw new RangeError("No value supplied for attribute " + name) }
        }
        built[name] = given;
      }
      return built
    }

    function initAttrs(attrs) {
      var result = Object.create(null);
      if (attrs) { for (var name in attrs) { result[name] = new Attribute(attrs[name]); } }
      return result
    }

    // ::- Node types are objects allocated once per `Schema` and used to
    // [tag](#model.Node.type) `Node` instances. They contain information
    // about the node type, such as its name and what kind of node it
    // represents.
    var NodeType$1 = function NodeType(name, schema, spec) {
      // :: string
      // The name the node type has in this schema.
      this.name = name;

      // :: Schema
      // A link back to the `Schema` the node type belongs to.
      this.schema = schema;

      // :: NodeSpec
      // The spec that this type is based on
      this.spec = spec;

      this.groups = spec.group ? spec.group.split(" ") : [];
      this.attrs = initAttrs(spec.attrs);

      this.defaultAttrs = defaultAttrs(this.attrs);

      // :: ContentMatch
      // The starting match of the node type's content expression.
      this.contentMatch = null;

      // : ?[MarkType]
      // The set of marks allowed in this node. `null` means all marks
      // are allowed.
      this.markSet = null;

      // :: bool
      // True if this node type has inline content.
      this.inlineContent = null;

      // :: bool
      // True if this is a block type
      this.isBlock = !(spec.inline || name == "text");

      // :: bool
      // True if this is the text node type.
      this.isText = name == "text";
    };

    var prototypeAccessors$5$1 = { isInline: { configurable: true },isTextblock: { configurable: true },isLeaf: { configurable: true },isAtom: { configurable: true } };

    // :: bool
    // True if this is an inline type.
    prototypeAccessors$5$1.isInline.get = function () { return !this.isBlock };

    // :: bool
    // True if this is a textblock type, a block that contains inline
    // content.
    prototypeAccessors$5$1.isTextblock.get = function () { return this.isBlock && this.inlineContent };

    // :: bool
    // True for node types that allow no content.
    prototypeAccessors$5$1.isLeaf.get = function () { return this.contentMatch == ContentMatch.empty };

    // :: bool
    // True when this node is an atom, i.e. when it does not have
    // directly editable content.
    prototypeAccessors$5$1.isAtom.get = function () { return this.isLeaf || this.spec.atom };

    // :: () → bool
    // Tells you whether this node type has any required attributes.
    NodeType$1.prototype.hasRequiredAttrs = function hasRequiredAttrs () {
      for (var n in this.attrs) { if (this.attrs[n].isRequired) { return true } }
      return false
    };

    NodeType$1.prototype.compatibleContent = function compatibleContent (other) {
      return this == other || this.contentMatch.compatible(other.contentMatch)
    };

    NodeType$1.prototype.computeAttrs = function computeAttrs$1 (attrs) {
      if (!attrs && this.defaultAttrs) { return this.defaultAttrs }
      else { return computeAttrs(this.attrs, attrs) }
    };

    // :: (?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) → Node
    // Create a `Node` of this type. The given attributes are
    // checked and defaulted (you can pass `null` to use the type's
    // defaults entirely, if no required attributes exist). `content`
    // may be a `Fragment`, a node, an array of nodes, or
    // `null`. Similarly `marks` may be `null` to default to the empty
    // set of marks.
    NodeType$1.prototype.create = function create (attrs, content, marks) {
      if (this.isText) { throw new Error("NodeType.create can't construct text nodes") }
      return new Node$3(this, this.computeAttrs(attrs), Fragment.from(content), Mark$1.setFrom(marks))
    };

    // :: (?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) → Node
    // Like [`create`](#model.NodeType.create), but check the given content
    // against the node type's content restrictions, and throw an error
    // if it doesn't match.
    NodeType$1.prototype.createChecked = function createChecked (attrs, content, marks) {
      content = Fragment.from(content);
      if (!this.validContent(content))
        { throw new RangeError("Invalid content for node " + this.name) }
      return new Node$3(this, this.computeAttrs(attrs), content, Mark$1.setFrom(marks))
    };

    // :: (?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) → ?Node
    // Like [`create`](#model.NodeType.create), but see if it is necessary to
    // add nodes to the start or end of the given fragment to make it
    // fit the node. If no fitting wrapping can be found, return null.
    // Note that, due to the fact that required nodes can always be
    // created, this will always succeed if you pass null or
    // `Fragment.empty` as content.
    NodeType$1.prototype.createAndFill = function createAndFill (attrs, content, marks) {
      attrs = this.computeAttrs(attrs);
      content = Fragment.from(content);
      if (content.size) {
        var before = this.contentMatch.fillBefore(content);
        if (!before) { return null }
        content = before.append(content);
      }
      var after = this.contentMatch.matchFragment(content).fillBefore(Fragment.empty, true);
      if (!after) { return null }
      return new Node$3(this, attrs, content.append(after), Mark$1.setFrom(marks))
    };

    // :: (Fragment) → bool
    // Returns true if the given fragment is valid content for this node
    // type with the given attributes.
    NodeType$1.prototype.validContent = function validContent (content) {
      var result = this.contentMatch.matchFragment(content);
      if (!result || !result.validEnd) { return false }
      for (var i = 0; i < content.childCount; i++)
        { if (!this.allowsMarks(content.child(i).marks)) { return false } }
      return true
    };

    // :: (MarkType) → bool
    // Check whether the given mark type is allowed in this node.
    NodeType$1.prototype.allowsMarkType = function allowsMarkType (markType) {
      return this.markSet == null || this.markSet.indexOf(markType) > -1
    };

    // :: ([Mark]) → bool
    // Test whether the given set of marks are allowed in this node.
    NodeType$1.prototype.allowsMarks = function allowsMarks (marks) {
      if (this.markSet == null) { return true }
      for (var i = 0; i < marks.length; i++) { if (!this.allowsMarkType(marks[i].type)) { return false } }
      return true
    };

    // :: ([Mark]) → [Mark]
    // Removes the marks that are not allowed in this node from the given set.
    NodeType$1.prototype.allowedMarks = function allowedMarks (marks) {
      if (this.markSet == null) { return marks }
      var copy;
      for (var i = 0; i < marks.length; i++) {
        if (!this.allowsMarkType(marks[i].type)) {
          if (!copy) { copy = marks.slice(0, i); }
        } else if (copy) {
          copy.push(marks[i]);
        }
      }
      return !copy ? marks : copy.length ? copy : Mark$1.empty
    };

    NodeType$1.compile = function compile (nodes, schema) {
      var result = Object.create(null);
      nodes.forEach(function (name, spec) { return result[name] = new NodeType$1(name, schema, spec); });

      var topType = schema.spec.topNode || "doc";
      if (!result[topType]) { throw new RangeError("Schema is missing its top node type ('" + topType + "')") }
      if (!result.text) { throw new RangeError("Every schema needs a 'text' type") }
      for (var _ in result.text.attrs) { throw new RangeError("The text node type should not have attributes") }

      return result
    };

    Object.defineProperties( NodeType$1.prototype, prototypeAccessors$5$1 );

    // Attribute descriptors

    var Attribute = function Attribute(options) {
      this.hasDefault = Object.prototype.hasOwnProperty.call(options, "default");
      this.default = options.default;
    };

    var prototypeAccessors$1$3$1 = { isRequired: { configurable: true } };

    prototypeAccessors$1$3$1.isRequired.get = function () {
      return !this.hasDefault
    };

    Object.defineProperties( Attribute.prototype, prototypeAccessors$1$3$1 );

    // Marks

    // ::- Like nodes, marks (which are associated with nodes to signify
    // things like emphasis or being part of a link) are
    // [tagged](#model.Mark.type) with type objects, which are
    // instantiated once per `Schema`.
    var MarkType = function MarkType(name, rank, schema, spec) {
      // :: string
      // The name of the mark type.
      this.name = name;

      // :: Schema
      // The schema that this mark type instance is part of.
      this.schema = schema;

      // :: MarkSpec
      // The spec on which the type is based.
      this.spec = spec;

      this.attrs = initAttrs(spec.attrs);

      this.rank = rank;
      this.excluded = null;
      var defaults = defaultAttrs(this.attrs);
      this.instance = defaults && new Mark$1(this, defaults);
    };

    // :: (?Object) → Mark
    // Create a mark of this type. `attrs` may be `null` or an object
    // containing only some of the mark's attributes. The others, if
    // they have defaults, will be added.
    MarkType.prototype.create = function create (attrs) {
      if (!attrs && this.instance) { return this.instance }
      return new Mark$1(this, computeAttrs(this.attrs, attrs))
    };

    MarkType.compile = function compile (marks, schema) {
      var result = Object.create(null), rank = 0;
      marks.forEach(function (name, spec) { return result[name] = new MarkType(name, rank++, schema, spec); });
      return result
    };

    // :: ([Mark]) → [Mark]
    // When there is a mark of this type in the given set, a new set
    // without it is returned. Otherwise, the input set is returned.
    MarkType.prototype.removeFromSet = function removeFromSet (set) {
      for (var i = 0; i < set.length; i++) { if (set[i].type == this) {
        set = set.slice(0, i).concat(set.slice(i + 1));
        i--;
      } }
      return set
    };

    // :: ([Mark]) → ?Mark
    // Tests whether there is a mark of this type in the given set.
    MarkType.prototype.isInSet = function isInSet (set) {
      for (var i = 0; i < set.length; i++)
        { if (set[i].type == this) { return set[i] } }
    };

    // :: (MarkType) → bool
    // Queries whether a given mark type is
    // [excluded](#model.MarkSpec.excludes) by this one.
    MarkType.prototype.excludes = function excludes (other) {
      return this.excluded.indexOf(other) > -1
    };

    // SchemaSpec:: interface
    // An object describing a schema, as passed to the [`Schema`](#model.Schema)
    // constructor.
    //
    //   nodes:: union<Object<NodeSpec>, OrderedMap<NodeSpec>>
    //   The node types in this schema. Maps names to
    //   [`NodeSpec`](#model.NodeSpec) objects that describe the node type
    //   associated with that name. Their order is significant—it
    //   determines which [parse rules](#model.NodeSpec.parseDOM) take
    //   precedence by default, and which nodes come first in a given
    //   [group](#model.NodeSpec.group).
    //
    //   marks:: ?union<Object<MarkSpec>, OrderedMap<MarkSpec>>
    //   The mark types that exist in this schema. The order in which they
    //   are provided determines the order in which [mark
    //   sets](#model.Mark.addToSet) are sorted and in which [parse
    //   rules](#model.MarkSpec.parseDOM) are tried.
    //
    //   topNode:: ?string
    //   The name of the default top-level node for the schema. Defaults
    //   to `"doc"`.

    // NodeSpec:: interface
    //
    //   content:: ?string
    //   The content expression for this node, as described in the [schema
    //   guide](/docs/guide/#schema.content_expressions). When not given,
    //   the node does not allow any content.
    //
    //   marks:: ?string
    //   The marks that are allowed inside of this node. May be a
    //   space-separated string referring to mark names or groups, `"_"`
    //   to explicitly allow all marks, or `""` to disallow marks. When
    //   not given, nodes with inline content default to allowing all
    //   marks, other nodes default to not allowing marks.
    //
    //   group:: ?string
    //   The group or space-separated groups to which this node belongs,
    //   which can be referred to in the content expressions for the
    //   schema.
    //
    //   inline:: ?bool
    //   Should be set to true for inline nodes. (Implied for text nodes.)
    //
    //   atom:: ?bool
    //   Can be set to true to indicate that, though this isn't a [leaf
    //   node](#model.NodeType.isLeaf), it doesn't have directly editable
    //   content and should be treated as a single unit in the view.
    //
    //   attrs:: ?Object<AttributeSpec>
    //   The attributes that nodes of this type get.
    //
    //   selectable:: ?bool
    //   Controls whether nodes of this type can be selected as a [node
    //   selection](#state.NodeSelection). Defaults to true for non-text
    //   nodes.
    //
    //   draggable:: ?bool
    //   Determines whether nodes of this type can be dragged without
    //   being selected. Defaults to false.
    //
    //   code:: ?bool
    //   Can be used to indicate that this node contains code, which
    //   causes some commands to behave differently.
    //
    //   defining:: ?bool
    //   Determines whether this node is considered an important parent
    //   node during replace operations (such as paste). Non-defining (the
    //   default) nodes get dropped when their entire content is replaced,
    //   whereas defining nodes persist and wrap the inserted content.
    //   Likewise, in _inserted_ content the defining parents of the
    //   content are preserved when possible. Typically,
    //   non-default-paragraph textblock types, and possibly list items,
    //   are marked as defining.
    //
    //   isolating:: ?bool
    //   When enabled (default is false), the sides of nodes of this type
    //   count as boundaries that regular editing operations, like
    //   backspacing or lifting, won't cross. An example of a node that
    //   should probably have this enabled is a table cell.
    //
    //   toDOM:: ?(node: Node) → DOMOutputSpec
    //   Defines the default way a node of this type should be serialized
    //   to DOM/HTML (as used by
    //   [`DOMSerializer.fromSchema`](#model.DOMSerializer^fromSchema)).
    //   Should return a DOM node or an [array
    //   structure](#model.DOMOutputSpec) that describes one, with an
    //   optional number zero (“hole”) in it to indicate where the node's
    //   content should be inserted.
    //
    //   For text nodes, the default is to create a text DOM node. Though
    //   it is possible to create a serializer where text is rendered
    //   differently, this is not supported inside the editor, so you
    //   shouldn't override that in your text node spec.
    //
    //   parseDOM:: ?[ParseRule]
    //   Associates DOM parser information with this node, which can be
    //   used by [`DOMParser.fromSchema`](#model.DOMParser^fromSchema) to
    //   automatically derive a parser. The `node` field in the rules is
    //   implied (the name of this node will be filled in automatically).
    //   If you supply your own parser, you do not need to also specify
    //   parsing rules in your schema.
    //
    //   toDebugString:: ?(node: Node) -> string
    //   Defines the default way a node of this type should be serialized
    //   to a string representation for debugging (e.g. in error messages).

    // MarkSpec:: interface
    //
    //   attrs:: ?Object<AttributeSpec>
    //   The attributes that marks of this type get.
    //
    //   inclusive:: ?bool
    //   Whether this mark should be active when the cursor is positioned
    //   at its end (or at its start when that is also the start of the
    //   parent node). Defaults to true.
    //
    //   excludes:: ?string
    //   Determines which other marks this mark can coexist with. Should
    //   be a space-separated strings naming other marks or groups of marks.
    //   When a mark is [added](#model.Mark.addToSet) to a set, all marks
    //   that it excludes are removed in the process. If the set contains
    //   any mark that excludes the new mark but is not, itself, excluded
    //   by the new mark, the mark can not be added an the set. You can
    //   use the value `"_"` to indicate that the mark excludes all
    //   marks in the schema.
    //
    //   Defaults to only being exclusive with marks of the same type. You
    //   can set it to an empty string (or any string not containing the
    //   mark's own name) to allow multiple marks of a given type to
    //   coexist (as long as they have different attributes).
    //
    //   group:: ?string
    //   The group or space-separated groups to which this mark belongs.
    //
    //   spanning:: ?bool
    //   Determines whether marks of this type can span multiple adjacent
    //   nodes when serialized to DOM/HTML. Defaults to true.
    //
    //   toDOM:: ?(mark: Mark, inline: bool) → DOMOutputSpec
    //   Defines the default way marks of this type should be serialized
    //   to DOM/HTML. When the resulting spec contains a hole, that is
    //   where the marked content is placed. Otherwise, it is appended to
    //   the top node.
    //
    //   parseDOM:: ?[ParseRule]
    //   Associates DOM parser information with this mark (see the
    //   corresponding [node spec field](#model.NodeSpec.parseDOM)). The
    //   `mark` field in the rules is implied.

    // AttributeSpec:: interface
    //
    // Used to [define](#model.NodeSpec.attrs) attributes on nodes or
    // marks.
    //
    //   default:: ?any
    //   The default value for this attribute, to use when no explicit
    //   value is provided. Attributes that have no default must be
    //   provided whenever a node or mark of a type that has them is
    //   created.

    // ::- A document schema. Holds [node](#model.NodeType) and [mark
    // type](#model.MarkType) objects for the nodes and marks that may
    // occur in conforming documents, and provides functionality for
    // creating and deserializing such documents.
    var Schema = function Schema(spec) {
      // :: SchemaSpec
      // The [spec](#model.SchemaSpec) on which the schema is based,
      // with the added guarantee that its `nodes` and `marks`
      // properties are
      // [`OrderedMap`](https://github.com/marijnh/orderedmap) instances
      // (not raw objects).
      this.spec = {};
      for (var prop in spec) { this.spec[prop] = spec[prop]; }
      this.spec.nodes = orderedmap.from(spec.nodes);
      this.spec.marks = orderedmap.from(spec.marks);

      // :: Object<NodeType>
      // An object mapping the schema's node names to node type objects.
      this.nodes = NodeType$1.compile(this.spec.nodes, this);

      // :: Object<MarkType>
      // A map from mark names to mark type objects.
      this.marks = MarkType.compile(this.spec.marks, this);

      var contentExprCache = Object.create(null);
      for (var prop$1 in this.nodes) {
        if (prop$1 in this.marks)
          { throw new RangeError(prop$1 + " can not be both a node and a mark") }
        var type = this.nodes[prop$1], contentExpr = type.spec.content || "", markExpr = type.spec.marks;
        type.contentMatch = contentExprCache[contentExpr] ||
          (contentExprCache[contentExpr] = ContentMatch.parse(contentExpr, this.nodes));
        type.inlineContent = type.contentMatch.inlineContent;
        type.markSet = markExpr == "_" ? null :
          markExpr ? gatherMarks(this, markExpr.split(" ")) :
          markExpr == "" || !type.inlineContent ? [] : null;
      }
      for (var prop$2 in this.marks) {
        var type$1 = this.marks[prop$2], excl = type$1.spec.excludes;
        type$1.excluded = excl == null ? [type$1] : excl == "" ? [] : gatherMarks(this, excl.split(" "));
      }

      this.nodeFromJSON = this.nodeFromJSON.bind(this);
      this.markFromJSON = this.markFromJSON.bind(this);

      // :: NodeType
      // The type of the [default top node](#model.SchemaSpec.topNode)
      // for this schema.
      this.topNodeType = this.nodes[this.spec.topNode || "doc"];

      // :: Object
      // An object for storing whatever values modules may want to
      // compute and cache per schema. (If you want to store something
      // in it, try to use property names unlikely to clash.)
      this.cached = Object.create(null);
      this.cached.wrappings = Object.create(null);
    };

    // :: (union<string, NodeType>, ?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) → Node
    // Create a node in this schema. The `type` may be a string or a
    // `NodeType` instance. Attributes will be extended
    // with defaults, `content` may be a `Fragment`,
    // `null`, a `Node`, or an array of nodes.
    Schema.prototype.node = function node (type, attrs, content, marks) {
      if (typeof type == "string")
        { type = this.nodeType(type); }
      else if (!(type instanceof NodeType$1))
        { throw new RangeError("Invalid node type: " + type) }
      else if (type.schema != this)
        { throw new RangeError("Node type from different schema used (" + type.name + ")") }

      return type.createChecked(attrs, content, marks)
    };

    // :: (string, ?[Mark]) → Node
    // Create a text node in the schema. Empty text nodes are not
    // allowed.
    Schema.prototype.text = function text (text$1, marks) {
      var type = this.nodes.text;
      return new TextNode(type, type.defaultAttrs, text$1, Mark$1.setFrom(marks))
    };

    // :: (union<string, MarkType>, ?Object) → Mark
    // Create a mark with the given type and attributes.
    Schema.prototype.mark = function mark (type, attrs) {
      if (typeof type == "string") { type = this.marks[type]; }
      return type.create(attrs)
    };

    // :: (Object) → Node
    // Deserialize a node from its JSON representation. This method is
    // bound.
    Schema.prototype.nodeFromJSON = function nodeFromJSON (json) {
      return Node$3.fromJSON(this, json)
    };

    // :: (Object) → Mark
    // Deserialize a mark from its JSON representation. This method is
    // bound.
    Schema.prototype.markFromJSON = function markFromJSON (json) {
      return Mark$1.fromJSON(this, json)
    };

    Schema.prototype.nodeType = function nodeType (name) {
      var found = this.nodes[name];
      if (!found) { throw new RangeError("Unknown node type: " + name) }
      return found
    };

    function gatherMarks(schema, marks) {
      var found = [];
      for (var i = 0; i < marks.length; i++) {
        var name = marks[i], mark = schema.marks[name], ok = mark;
        if (mark) {
          found.push(mark);
        } else {
          for (var prop in schema.marks) {
            var mark$1 = schema.marks[prop];
            if (name == "_" || (mark$1.spec.group && mark$1.spec.group.split(" ").indexOf(name) > -1))
              { found.push(ok = mark$1); }
          }
        }
        if (!ok) { throw new SyntaxError("Unknown mark type: '" + marks[i] + "'") }
      }
      return found
    }

    // ParseOptions:: interface
    // These are the options recognized by the
    // [`parse`](#model.DOMParser.parse) and
    // [`parseSlice`](#model.DOMParser.parseSlice) methods.
    //
    //   preserveWhitespace:: ?union<bool, "full">
    //   By default, whitespace is collapsed as per HTML's rules. Pass
    //   `true` to preserve whitespace, but normalize newlines to
    //   spaces, and `"full"` to preserve whitespace entirely.
    //
    //   findPositions:: ?[{node: dom.Node, offset: number}]
    //   When given, the parser will, beside parsing the content,
    //   record the document positions of the given DOM positions. It
    //   will do so by writing to the objects, adding a `pos` property
    //   that holds the document position. DOM positions that are not
    //   in the parsed content will not be written to.
    //
    //   from:: ?number
    //   The child node index to start parsing from.
    //
    //   to:: ?number
    //   The child node index to stop parsing at.
    //
    //   topNode:: ?Node
    //   By default, the content is parsed into the schema's default
    //   [top node type](#model.Schema.topNodeType). You can pass this
    //   option to use the type and attributes from a different node
    //   as the top container.
    //
    //   topMatch:: ?ContentMatch
    //   Provide the starting content match that content parsed into the
    //   top node is matched against.
    //
    //   context:: ?ResolvedPos
    //   A set of additional nodes to count as
    //   [context](#model.ParseRule.context) when parsing, above the
    //   given [top node](#model.ParseOptions.topNode).

    // ParseRule:: interface
    // A value that describes how to parse a given DOM node or inline
    // style as a ProseMirror node or mark.
    //
    //   tag:: ?string
    //   A CSS selector describing the kind of DOM elements to match. A
    //   single rule should have _either_ a `tag` or a `style` property.
    //
    //   namespace:: ?string
    //   The namespace to match. This should be used with `tag`.
    //   Nodes are only matched when the namespace matches or this property
    //   is null.
    //
    //   style:: ?string
    //   A CSS property name to match. When given, this rule matches
    //   inline styles that list that property. May also have the form
    //   `"property=value"`, in which case the rule only matches if the
    //   property's value exactly matches the given value. (For more
    //   complicated filters, use [`getAttrs`](#model.ParseRule.getAttrs)
    //   and return false to indicate that the match failed.) Rules
    //   matching styles may only produce [marks](#model.ParseRule.mark),
    //   not nodes.
    //
    //   priority:: ?number
    //   Can be used to change the order in which the parse rules in a
    //   schema are tried. Those with higher priority come first. Rules
    //   without a priority are counted as having priority 50. This
    //   property is only meaningful in a schema—when directly
    //   constructing a parser, the order of the rule array is used.
    //
    //   consuming:: ?boolean
    //   By default, when a rule matches an element or style, no further
    //   rules get a chance to match it. By setting this to `false`, you
    //   indicate that even when this rule matches, other rules that come
    //   after it should also run.
    //
    //   context:: ?string
    //   When given, restricts this rule to only match when the current
    //   context—the parent nodes into which the content is being
    //   parsed—matches this expression. Should contain one or more node
    //   names or node group names followed by single or double slashes.
    //   For example `"paragraph/"` means the rule only matches when the
    //   parent node is a paragraph, `"blockquote/paragraph/"` restricts
    //   it to be in a paragraph that is inside a blockquote, and
    //   `"section//"` matches any position inside a section—a double
    //   slash matches any sequence of ancestor nodes. To allow multiple
    //   different contexts, they can be separated by a pipe (`|`)
    //   character, as in `"blockquote/|list_item/"`.
    //
    //   node:: ?string
    //   The name of the node type to create when this rule matches. Only
    //   valid for rules with a `tag` property, not for style rules. Each
    //   rule should have one of a `node`, `mark`, or `ignore` property
    //   (except when it appears in a [node](#model.NodeSpec.parseDOM) or
    //   [mark spec](#model.MarkSpec.parseDOM), in which case the `node`
    //   or `mark` property will be derived from its position).
    //
    //   mark:: ?string
    //   The name of the mark type to wrap the matched content in.
    //
    //   ignore:: ?bool
    //   When true, ignore content that matches this rule.
    //
    //   closeParent:: ?bool
    //   When true, finding an element that matches this rule will close
    //   the current node.
    //
    //   skip:: ?bool
    //   When true, ignore the node that matches this rule, but do parse
    //   its content.
    //
    //   attrs:: ?Object
    //   Attributes for the node or mark created by this rule. When
    //   `getAttrs` is provided, it takes precedence.
    //
    //   getAttrs:: ?(union<dom.Node, string>) → ?union<Object, false>
    //   A function used to compute the attributes for the node or mark
    //   created by this rule. Can also be used to describe further
    //   conditions the DOM element or style must match. When it returns
    //   `false`, the rule won't match. When it returns null or undefined,
    //   that is interpreted as an empty/default set of attributes.
    //
    //   Called with a DOM Element for `tag` rules, and with a string (the
    //   style's value) for `style` rules.
    //
    //   contentElement:: ?union<string, (dom.Node) → dom.Node>
    //   For `tag` rules that produce non-leaf nodes or marks, by default
    //   the content of the DOM element is parsed as content of the mark
    //   or node. If the child nodes are in a descendent node, this may be
    //   a CSS selector string that the parser must use to find the actual
    //   content element, or a function that returns the actual content
    //   element to the parser.
    //
    //   getContent:: ?(dom.Node, schema: Schema) → Fragment
    //   Can be used to override the content of a matched node. When
    //   present, instead of parsing the node's child nodes, the result of
    //   this function is used.
    //
    //   preserveWhitespace:: ?union<bool, "full">
    //   Controls whether whitespace should be preserved when parsing the
    //   content inside the matched element. `false` means whitespace may
    //   be collapsed, `true` means that whitespace should be preserved
    //   but newlines normalized to spaces, and `"full"` means that
    //   newlines should also be preserved.

    // ::- A DOM parser represents a strategy for parsing DOM content into
    // a ProseMirror document conforming to a given schema. Its behavior
    // is defined by an array of [rules](#model.ParseRule).
    var DOMParser = function DOMParser(schema, rules) {
      var this$1$1 = this;

      // :: Schema
      // The schema into which the parser parses.
      this.schema = schema;
      // :: [ParseRule]
      // The set of [parse rules](#model.ParseRule) that the parser
      // uses, in order of precedence.
      this.rules = rules;
      this.tags = [];
      this.styles = [];

      rules.forEach(function (rule) {
        if (rule.tag) { this$1$1.tags.push(rule); }
        else if (rule.style) { this$1$1.styles.push(rule); }
      });

      // Only normalize list elements when lists in the schema can't directly contain themselves
      this.normalizeLists = !this.tags.some(function (r) {
        if (!/^(ul|ol)\b/.test(r.tag) || !r.node) { return false }
        var node = schema.nodes[r.node];
        return node.contentMatch.matchType(node)
      });
    };

    // :: (dom.Node, ?ParseOptions) → Node
    // Parse a document from the content of a DOM node.
    DOMParser.prototype.parse = function parse (dom, options) {
        if ( options === void 0 ) options = {};

      var context = new ParseContext(this, options, false);
      context.addAll(dom, null, options.from, options.to);
      return context.finish()
    };

    // :: (dom.Node, ?ParseOptions) → Slice
    // Parses the content of the given DOM node, like
    // [`parse`](#model.DOMParser.parse), and takes the same set of
    // options. But unlike that method, which produces a whole node,
    // this one returns a slice that is open at the sides, meaning that
    // the schema constraints aren't applied to the start of nodes to
    // the left of the input and the end of nodes at the end.
    DOMParser.prototype.parseSlice = function parseSlice (dom, options) {
        if ( options === void 0 ) options = {};

      var context = new ParseContext(this, options, true);
      context.addAll(dom, null, options.from, options.to);
      return Slice.maxOpen(context.finish())
    };

    DOMParser.prototype.matchTag = function matchTag (dom, context, after) {
      for (var i = after ? this.tags.indexOf(after) + 1 : 0; i < this.tags.length; i++) {
        var rule = this.tags[i];
        if (matches$1(dom, rule.tag) &&
            (rule.namespace === undefined || dom.namespaceURI == rule.namespace) &&
            (!rule.context || context.matchesContext(rule.context))) {
          if (rule.getAttrs) {
            var result = rule.getAttrs(dom);
            if (result === false) { continue }
            rule.attrs = result;
          }
          return rule
        }
      }
    };

    DOMParser.prototype.matchStyle = function matchStyle (prop, value, context, after) {
      for (var i = after ? this.styles.indexOf(after) + 1 : 0; i < this.styles.length; i++) {
        var rule = this.styles[i];
        if (rule.style.indexOf(prop) != 0 ||
            rule.context && !context.matchesContext(rule.context) ||
            // Test that the style string either precisely matches the prop,
            // or has an '=' sign after the prop, followed by the given
            // value.
            rule.style.length > prop.length &&
            (rule.style.charCodeAt(prop.length) != 61 || rule.style.slice(prop.length + 1) != value))
          { continue }
        if (rule.getAttrs) {
          var result = rule.getAttrs(value);
          if (result === false) { continue }
          rule.attrs = result;
        }
        return rule
      }
    };

    // : (Schema) → [ParseRule]
    DOMParser.schemaRules = function schemaRules (schema) {
      var result = [];
      function insert(rule) {
        var priority = rule.priority == null ? 50 : rule.priority, i = 0;
        for (; i < result.length; i++) {
          var next = result[i], nextPriority = next.priority == null ? 50 : next.priority;
          if (nextPriority < priority) { break }
        }
        result.splice(i, 0, rule);
      }

      var loop = function ( name ) {
        var rules = schema.marks[name].spec.parseDOM;
        if (rules) { rules.forEach(function (rule) {
          insert(rule = copy$2(rule));
          rule.mark = name;
        }); }
      };

        for (var name in schema.marks) loop( name );
      var loop$1 = function ( name ) {
        var rules$1 = schema.nodes[name$1].spec.parseDOM;
        if (rules$1) { rules$1.forEach(function (rule) {
          insert(rule = copy$2(rule));
          rule.node = name$1;
        }); }
      };

        for (var name$1 in schema.nodes) loop$1();
      return result
    };

    // :: (Schema) → DOMParser
    // Construct a DOM parser using the parsing rules listed in a
    // schema's [node specs](#model.NodeSpec.parseDOM), reordered by
    // [priority](#model.ParseRule.priority).
    DOMParser.fromSchema = function fromSchema (schema) {
      return schema.cached.domParser ||
        (schema.cached.domParser = new DOMParser(schema, DOMParser.schemaRules(schema)))
    };

    // : Object<bool> The block-level tags in HTML5
    var blockTags = {
      address: true, article: true, aside: true, blockquote: true, canvas: true,
      dd: true, div: true, dl: true, fieldset: true, figcaption: true, figure: true,
      footer: true, form: true, h1: true, h2: true, h3: true, h4: true, h5: true,
      h6: true, header: true, hgroup: true, hr: true, li: true, noscript: true, ol: true,
      output: true, p: true, pre: true, section: true, table: true, tfoot: true, ul: true
    };

    // : Object<bool> The tags that we normally ignore.
    var ignoreTags = {
      head: true, noscript: true, object: true, script: true, style: true, title: true
    };

    // : Object<bool> List tags.
    var listTags = {ol: true, ul: true};

    // Using a bitfield for node context options
    var OPT_PRESERVE_WS = 1, OPT_PRESERVE_WS_FULL = 2, OPT_OPEN_LEFT = 4;

    function wsOptionsFor(preserveWhitespace) {
      return (preserveWhitespace ? OPT_PRESERVE_WS : 0) | (preserveWhitespace === "full" ? OPT_PRESERVE_WS_FULL : 0)
    }

    var NodeContext = function NodeContext(type, attrs, marks, pendingMarks, solid, match, options) {
      this.type = type;
      this.attrs = attrs;
      this.solid = solid;
      this.match = match || (options & OPT_OPEN_LEFT ? null : type.contentMatch);
      this.options = options;
      this.content = [];
      // Marks applied to this node itself
      this.marks = marks;
      // Marks applied to its children
      this.activeMarks = Mark$1.none;
      // Marks that can't apply here, but will be used in children if possible
      this.pendingMarks = pendingMarks;
      // Nested Marks with same type
      this.stashMarks = [];
    };

    NodeContext.prototype.findWrapping = function findWrapping (node) {
      if (!this.match) {
        if (!this.type) { return [] }
        var fill = this.type.contentMatch.fillBefore(Fragment.from(node));
        if (fill) {
          this.match = this.type.contentMatch.matchFragment(fill);
        } else {
          var start = this.type.contentMatch, wrap;
          if (wrap = start.findWrapping(node.type)) {
            this.match = start;
            return wrap
          } else {
            return null
          }
        }
      }
      return this.match.findWrapping(node.type)
    };

    NodeContext.prototype.finish = function finish (openEnd) {
      if (!(this.options & OPT_PRESERVE_WS)) { // Strip trailing whitespace
        var last = this.content[this.content.length - 1], m;
        if (last && last.isText && (m = /[ \t\r\n\u000c]+$/.exec(last.text))) {
          if (last.text.length == m[0].length) { this.content.pop(); }
          else { this.content[this.content.length - 1] = last.withText(last.text.slice(0, last.text.length - m[0].length)); }
        }
      }
      var content = Fragment.from(this.content);
      if (!openEnd && this.match)
        { content = content.append(this.match.fillBefore(Fragment.empty, true)); }
      return this.type ? this.type.create(this.attrs, content, this.marks) : content
    };

    NodeContext.prototype.popFromStashMark = function popFromStashMark (mark) {
      for (var i = this.stashMarks.length - 1; i >= 0; i--)
        { if (mark.eq(this.stashMarks[i])) { return this.stashMarks.splice(i, 1)[0] } }
    };

    NodeContext.prototype.applyPending = function applyPending (nextType) {
      for (var i = 0, pending = this.pendingMarks; i < pending.length; i++) {
        var mark = pending[i];
        if ((this.type ? this.type.allowsMarkType(mark.type) : markMayApply(mark.type, nextType)) &&
            !mark.isInSet(this.activeMarks)) {
          this.activeMarks = mark.addToSet(this.activeMarks);
          this.pendingMarks = mark.removeFromSet(this.pendingMarks);
        }
      }
    };

    NodeContext.prototype.inlineContext = function inlineContext (node) {
      if (this.type) { return this.type.inlineContent }
      if (this.content.length) { return this.content[0].isInline }
      return node.parentNode && !blockTags.hasOwnProperty(node.parentNode.nodeName.toLowerCase())
    };

    var ParseContext = function ParseContext(parser, options, open) {
      // : DOMParser The parser we are using.
      this.parser = parser;
      // : Object The options passed to this parse.
      this.options = options;
      this.isOpen = open;
      var topNode = options.topNode, topContext;
      var topOptions = wsOptionsFor(options.preserveWhitespace) | (open ? OPT_OPEN_LEFT : 0);
      if (topNode)
        { topContext = new NodeContext(topNode.type, topNode.attrs, Mark$1.none, Mark$1.none, true,
                                     options.topMatch || topNode.type.contentMatch, topOptions); }
      else if (open)
        { topContext = new NodeContext(null, null, Mark$1.none, Mark$1.none, true, null, topOptions); }
      else
        { topContext = new NodeContext(parser.schema.topNodeType, null, Mark$1.none, Mark$1.none, true, null, topOptions); }
      this.nodes = [topContext];
      // : [Mark] The current set of marks
      this.open = 0;
      this.find = options.findPositions;
      this.needsBlock = false;
    };

    var prototypeAccessors$6 = { top: { configurable: true },currentPos: { configurable: true } };

    prototypeAccessors$6.top.get = function () {
      return this.nodes[this.open]
    };

    // : (dom.Node)
    // Add a DOM node to the content. Text is inserted as text node,
    // otherwise, the node is passed to `addElement` or, if it has a
    // `style` attribute, `addElementWithStyles`.
    ParseContext.prototype.addDOM = function addDOM (dom) {
      if (dom.nodeType == 3) {
        this.addTextNode(dom);
      } else if (dom.nodeType == 1) {
        var style = dom.getAttribute("style");
        var marks = style ? this.readStyles(parseStyles(style)) : null, top = this.top;
        if (marks != null) { for (var i = 0; i < marks.length; i++) { this.addPendingMark(marks[i]); } }
        this.addElement(dom);
        if (marks != null) { for (var i$1 = 0; i$1 < marks.length; i$1++) { this.removePendingMark(marks[i$1], top); } }
      }
    };

    ParseContext.prototype.addTextNode = function addTextNode (dom) {
      var value = dom.nodeValue;
      var top = this.top;
      if (top.options & OPT_PRESERVE_WS_FULL ||
          top.inlineContext(dom) ||
          /[^ \t\r\n\u000c]/.test(value)) {
        if (!(top.options & OPT_PRESERVE_WS)) {
          value = value.replace(/[ \t\r\n\u000c]+/g, " ");
          // If this starts with whitespace, and there is no node before it, or
          // a hard break, or a text node that ends with whitespace, strip the
          // leading space.
          if (/^[ \t\r\n\u000c]/.test(value) && this.open == this.nodes.length - 1) {
            var nodeBefore = top.content[top.content.length - 1];
            var domNodeBefore = dom.previousSibling;
            if (!nodeBefore ||
                (domNodeBefore && domNodeBefore.nodeName == 'BR') ||
                (nodeBefore.isText && /[ \t\r\n\u000c]$/.test(nodeBefore.text)))
              { value = value.slice(1); }
          }
        } else if (!(top.options & OPT_PRESERVE_WS_FULL)) {
          value = value.replace(/\r?\n|\r/g, " ");
        } else {
          value = value.replace(/\r\n?/g, "\n");
        }
        if (value) { this.insertNode(this.parser.schema.text(value)); }
        this.findInText(dom);
      } else {
        this.findInside(dom);
      }
    };

    // : (dom.Element, ?ParseRule)
    // Try to find a handler for the given tag and use that to parse. If
    // none is found, the element's content nodes are added directly.
    ParseContext.prototype.addElement = function addElement (dom, matchAfter) {
      var name = dom.nodeName.toLowerCase(), ruleID;
      if (listTags.hasOwnProperty(name) && this.parser.normalizeLists) { normalizeList(dom); }
      var rule = (this.options.ruleFromNode && this.options.ruleFromNode(dom)) ||
          (ruleID = this.parser.matchTag(dom, this, matchAfter));
      if (rule ? rule.ignore : ignoreTags.hasOwnProperty(name)) {
        this.findInside(dom);
        this.ignoreFallback(dom);
      } else if (!rule || rule.skip || rule.closeParent) {
        if (rule && rule.closeParent) { this.open = Math.max(0, this.open - 1); }
        else if (rule && rule.skip.nodeType) { dom = rule.skip; }
        var sync, top = this.top, oldNeedsBlock = this.needsBlock;
        if (blockTags.hasOwnProperty(name)) {
          sync = true;
          if (!top.type) { this.needsBlock = true; }
        } else if (!dom.firstChild) {
          this.leafFallback(dom);
          return
        }
        this.addAll(dom);
        if (sync) { this.sync(top); }
        this.needsBlock = oldNeedsBlock;
      } else {
        this.addElementByRule(dom, rule, rule.consuming === false ? ruleID : null);
      }
    };

    // Called for leaf DOM nodes that would otherwise be ignored
    ParseContext.prototype.leafFallback = function leafFallback (dom) {
      if (dom.nodeName == "BR" && this.top.type && this.top.type.inlineContent)
        { this.addTextNode(dom.ownerDocument.createTextNode("\n")); }
    };

    // Called for ignored nodes
    ParseContext.prototype.ignoreFallback = function ignoreFallback (dom) {
      // Ignored BR nodes should at least create an inline context
      if (dom.nodeName == "BR" && (!this.top.type || !this.top.type.inlineContent))
        { this.findPlace(this.parser.schema.text("-")); }
    };

    // Run any style parser associated with the node's styles. Either
    // return an array of marks, or null to indicate some of the styles
    // had a rule with `ignore` set.
    ParseContext.prototype.readStyles = function readStyles (styles) {
      var marks = Mark$1.none;
      style: for (var i = 0; i < styles.length; i += 2) {
        for (var after = null;;) {
          var rule = this.parser.matchStyle(styles[i], styles[i + 1], this, after);
          if (!rule) { continue style }
          if (rule.ignore) { return null }
          marks = this.parser.schema.marks[rule.mark].create(rule.attrs).addToSet(marks);
          if (rule.consuming === false) { after = rule; }
          else { break }
        }
      }
      return marks
    };

    // : (dom.Element, ParseRule) → bool
    // Look up a handler for the given node. If none are found, return
    // false. Otherwise, apply it, use its return value to drive the way
    // the node's content is wrapped, and return true.
    ParseContext.prototype.addElementByRule = function addElementByRule (dom, rule, continueAfter) {
        var this$1$1 = this;

      var sync, nodeType, markType, mark;
      if (rule.node) {
        nodeType = this.parser.schema.nodes[rule.node];
        if (!nodeType.isLeaf) {
          sync = this.enter(nodeType, rule.attrs, rule.preserveWhitespace);
        } else if (!this.insertNode(nodeType.create(rule.attrs))) {
          this.leafFallback(dom);
        }
      } else {
        markType = this.parser.schema.marks[rule.mark];
        mark = markType.create(rule.attrs);
        this.addPendingMark(mark);
      }
      var startIn = this.top;

      if (nodeType && nodeType.isLeaf) {
        this.findInside(dom);
      } else if (continueAfter) {
        this.addElement(dom, continueAfter);
      } else if (rule.getContent) {
        this.findInside(dom);
        rule.getContent(dom, this.parser.schema).forEach(function (node) { return this$1$1.insertNode(node); });
      } else {
        var contentDOM = rule.contentElement;
        if (typeof contentDOM == "string") { contentDOM = dom.querySelector(contentDOM); }
        else if (typeof contentDOM == "function") { contentDOM = contentDOM(dom); }
        if (!contentDOM) { contentDOM = dom; }
        this.findAround(dom, contentDOM, true);
        this.addAll(contentDOM, sync);
      }
      if (sync) { this.sync(startIn); this.open--; }
      if (mark) { this.removePendingMark(mark, startIn); }
    };

    // : (dom.Node, ?NodeBuilder, ?number, ?number)
    // Add all child nodes between `startIndex` and `endIndex` (or the
    // whole node, if not given). If `sync` is passed, use it to
    // synchronize after every block element.
    ParseContext.prototype.addAll = function addAll (parent, sync, startIndex, endIndex) {
      var index = startIndex || 0;
      for (var dom = startIndex ? parent.childNodes[startIndex] : parent.firstChild,
               end = endIndex == null ? null : parent.childNodes[endIndex];
           dom != end; dom = dom.nextSibling, ++index) {
        this.findAtPoint(parent, index);
        this.addDOM(dom);
        if (sync && blockTags.hasOwnProperty(dom.nodeName.toLowerCase()))
          { this.sync(sync); }
      }
      this.findAtPoint(parent, index);
    };

    // Try to find a way to fit the given node type into the current
    // context. May add intermediate wrappers and/or leave non-solid
    // nodes that we're in.
    ParseContext.prototype.findPlace = function findPlace (node) {
      var route, sync;
      for (var depth = this.open; depth >= 0; depth--) {
        var cx = this.nodes[depth];
        var found = cx.findWrapping(node);
        if (found && (!route || route.length > found.length)) {
          route = found;
          sync = cx;
          if (!found.length) { break }
        }
        if (cx.solid) { break }
      }
      if (!route) { return false }
      this.sync(sync);
      for (var i = 0; i < route.length; i++)
        { this.enterInner(route[i], null, false); }
      return true
    };

    // : (Node) → ?Node
    // Try to insert the given node, adjusting the context when needed.
    ParseContext.prototype.insertNode = function insertNode (node) {
      if (node.isInline && this.needsBlock && !this.top.type) {
        var block = this.textblockFromContext();
        if (block) { this.enterInner(block); }
      }
      if (this.findPlace(node)) {
        this.closeExtra();
        var top = this.top;
        top.applyPending(node.type);
        if (top.match) { top.match = top.match.matchType(node.type); }
        var marks = top.activeMarks;
        for (var i = 0; i < node.marks.length; i++)
          { if (!top.type || top.type.allowsMarkType(node.marks[i].type))
            { marks = node.marks[i].addToSet(marks); } }
        top.content.push(node.mark(marks));
        return true
      }
      return false
    };

    // : (NodeType, ?Object) → bool
    // Try to start a node of the given type, adjusting the context when
    // necessary.
    ParseContext.prototype.enter = function enter (type, attrs, preserveWS) {
      var ok = this.findPlace(type.create(attrs));
      if (ok) { this.enterInner(type, attrs, true, preserveWS); }
      return ok
    };

    // Open a node of the given type
    ParseContext.prototype.enterInner = function enterInner (type, attrs, solid, preserveWS) {
      this.closeExtra();
      var top = this.top;
      top.applyPending(type);
      top.match = top.match && top.match.matchType(type, attrs);
      var options = preserveWS == null ? top.options & ~OPT_OPEN_LEFT : wsOptionsFor(preserveWS);
      if ((top.options & OPT_OPEN_LEFT) && top.content.length == 0) { options |= OPT_OPEN_LEFT; }
      this.nodes.push(new NodeContext(type, attrs, top.activeMarks, top.pendingMarks, solid, null, options));
      this.open++;
    };

    // Make sure all nodes above this.open are finished and added to
    // their parents
    ParseContext.prototype.closeExtra = function closeExtra (openEnd) {
      var i = this.nodes.length - 1;
      if (i > this.open) {
        for (; i > this.open; i--) { this.nodes[i - 1].content.push(this.nodes[i].finish(openEnd)); }
        this.nodes.length = this.open + 1;
      }
    };

    ParseContext.prototype.finish = function finish () {
      this.open = 0;
      this.closeExtra(this.isOpen);
      return this.nodes[0].finish(this.isOpen || this.options.topOpen)
    };

    ParseContext.prototype.sync = function sync (to) {
      for (var i = this.open; i >= 0; i--) { if (this.nodes[i] == to) {
        this.open = i;
        return
      } }
    };

    prototypeAccessors$6.currentPos.get = function () {
      this.closeExtra();
      var pos = 0;
      for (var i = this.open; i >= 0; i--) {
        var content = this.nodes[i].content;
        for (var j = content.length - 1; j >= 0; j--)
          { pos += content[j].nodeSize; }
        if (i) { pos++; }
      }
      return pos
    };

    ParseContext.prototype.findAtPoint = function findAtPoint (parent, offset) {
      if (this.find) { for (var i = 0; i < this.find.length; i++) {
        if (this.find[i].node == parent && this.find[i].offset == offset)
          { this.find[i].pos = this.currentPos; }
      } }
    };

    ParseContext.prototype.findInside = function findInside (parent) {
      if (this.find) { for (var i = 0; i < this.find.length; i++) {
        if (this.find[i].pos == null && parent.nodeType == 1 && parent.contains(this.find[i].node))
          { this.find[i].pos = this.currentPos; }
      } }
    };

    ParseContext.prototype.findAround = function findAround (parent, content, before) {
      if (parent != content && this.find) { for (var i = 0; i < this.find.length; i++) {
        if (this.find[i].pos == null && parent.nodeType == 1 && parent.contains(this.find[i].node)) {
          var pos = content.compareDocumentPosition(this.find[i].node);
          if (pos & (before ? 2 : 4))
            { this.find[i].pos = this.currentPos; }
        }
      } }
    };

    ParseContext.prototype.findInText = function findInText (textNode) {
      if (this.find) { for (var i = 0; i < this.find.length; i++) {
        if (this.find[i].node == textNode)
          { this.find[i].pos = this.currentPos - (textNode.nodeValue.length - this.find[i].offset); }
      } }
    };

    // : (string) → bool
    // Determines whether the given [context
    // string](#ParseRule.context) matches this context.
    ParseContext.prototype.matchesContext = function matchesContext (context) {
        var this$1$1 = this;

      if (context.indexOf("|") > -1)
        { return context.split(/\s*\|\s*/).some(this.matchesContext, this) }

      var parts = context.split("/");
      var option = this.options.context;
      var useRoot = !this.isOpen && (!option || option.parent.type == this.nodes[0].type);
      var minDepth = -(option ? option.depth + 1 : 0) + (useRoot ? 0 : 1);
      var match = function (i, depth) {
        for (; i >= 0; i--) {
          var part = parts[i];
          if (part == "") {
            if (i == parts.length - 1 || i == 0) { continue }
            for (; depth >= minDepth; depth--)
              { if (match(i - 1, depth)) { return true } }
            return false
          } else {
            var next = depth > 0 || (depth == 0 && useRoot) ? this$1$1.nodes[depth].type
                : option && depth >= minDepth ? option.node(depth - minDepth).type
                : null;
            if (!next || (next.name != part && next.groups.indexOf(part) == -1))
              { return false }
            depth--;
          }
        }
        return true
      };
      return match(parts.length - 1, this.open)
    };

    ParseContext.prototype.textblockFromContext = function textblockFromContext () {
      var $context = this.options.context;
      if ($context) { for (var d = $context.depth; d >= 0; d--) {
        var deflt = $context.node(d).contentMatchAt($context.indexAfter(d)).defaultType;
        if (deflt && deflt.isTextblock && deflt.defaultAttrs) { return deflt }
      } }
      for (var name in this.parser.schema.nodes) {
        var type = this.parser.schema.nodes[name];
        if (type.isTextblock && type.defaultAttrs) { return type }
      }
    };

    ParseContext.prototype.addPendingMark = function addPendingMark (mark) {
      var found = findSameMarkInSet(mark, this.top.pendingMarks);
      if (found) { this.top.stashMarks.push(found); }
      this.top.pendingMarks = mark.addToSet(this.top.pendingMarks);
    };

    ParseContext.prototype.removePendingMark = function removePendingMark (mark, upto) {
      for (var depth = this.open; depth >= 0; depth--) {
        var level = this.nodes[depth];
        var found = level.pendingMarks.lastIndexOf(mark);
        if (found > -1) {
          level.pendingMarks = mark.removeFromSet(level.pendingMarks);
        } else {
          level.activeMarks = mark.removeFromSet(level.activeMarks);
          var stashMark = level.popFromStashMark(mark);
          if (stashMark && level.type && level.type.allowsMarkType(stashMark.type))
            { level.activeMarks = stashMark.addToSet(level.activeMarks); }
        }
        if (level == upto) { break }
      }
    };

    Object.defineProperties( ParseContext.prototype, prototypeAccessors$6 );

    // Kludge to work around directly nested list nodes produced by some
    // tools and allowed by browsers to mean that the nested list is
    // actually part of the list item above it.
    function normalizeList(dom) {
      for (var child = dom.firstChild, prevItem = null; child; child = child.nextSibling) {
        var name = child.nodeType == 1 ? child.nodeName.toLowerCase() : null;
        if (name && listTags.hasOwnProperty(name) && prevItem) {
          prevItem.appendChild(child);
          child = prevItem;
        } else if (name == "li") {
          prevItem = child;
        } else if (name) {
          prevItem = null;
        }
      }
    }

    // Apply a CSS selector.
    function matches$1(dom, selector) {
      return (dom.matches || dom.msMatchesSelector || dom.webkitMatchesSelector || dom.mozMatchesSelector).call(dom, selector)
    }

    // : (string) → [string]
    // Tokenize a style attribute into property/value pairs.
    function parseStyles(style) {
      var re = /\s*([\w-]+)\s*:\s*([^;]+)/g, m, result = [];
      while (m = re.exec(style)) { result.push(m[1], m[2].trim()); }
      return result
    }

    function copy$2(obj) {
      var copy = {};
      for (var prop in obj) { copy[prop] = obj[prop]; }
      return copy
    }

    // Used when finding a mark at the top level of a fragment parse.
    // Checks whether it would be reasonable to apply a given mark type to
    // a given node, by looking at the way the mark occurs in the schema.
    function markMayApply(markType, nodeType) {
      var nodes = nodeType.schema.nodes;
      var loop = function ( name ) {
        var parent = nodes[name];
        if (!parent.allowsMarkType(markType)) { return }
        var seen = [], scan = function (match) {
          seen.push(match);
          for (var i = 0; i < match.edgeCount; i++) {
            var ref = match.edge(i);
            var type = ref.type;
            var next = ref.next;
            if (type == nodeType) { return true }
            if (seen.indexOf(next) < 0 && scan(next)) { return true }
          }
        };
        if (scan(parent.contentMatch)) { return { v: true } }
      };

      for (var name in nodes) {
        var returned = loop( name );

        if ( returned ) return returned.v;
      }
    }

    function findSameMarkInSet(mark, set) {
      for (var i = 0; i < set.length; i++) {
        if (mark.eq(set[i])) { return set[i] }
      }
    }

    // DOMOutputSpec:: interface
    // A description of a DOM structure. Can be either a string, which is
    // interpreted as a text node, a DOM node, which is interpreted as
    // itself, a `{dom: Node, contentDOM: ?Node}` object, or an array.
    //
    // An array describes a DOM element. The first value in the array
    // should be a string—the name of the DOM element, optionally prefixed
    // by a namespace URL and a space. If the second element is plain
    // object, it is interpreted as a set of attributes for the element.
    // Any elements after that (including the 2nd if it's not an attribute
    // object) are interpreted as children of the DOM elements, and must
    // either be valid `DOMOutputSpec` values, or the number zero.
    //
    // The number zero (pronounced “hole”) is used to indicate the place
    // where a node's child nodes should be inserted. If it occurs in an
    // output spec, it should be the only child element in its parent
    // node.

    // ::- A DOM serializer knows how to convert ProseMirror nodes and
    // marks of various types to DOM nodes.
    var DOMSerializer = function DOMSerializer(nodes, marks) {
      // :: Object<(node: Node) → DOMOutputSpec>
      // The node serialization functions.
      this.nodes = nodes || {};
      // :: Object<?(mark: Mark, inline: bool) → DOMOutputSpec>
      // The mark serialization functions.
      this.marks = marks || {};
    };

    // :: (Fragment, ?Object) → dom.DocumentFragment
    // Serialize the content of this fragment to a DOM fragment. When
    // not in the browser, the `document` option, containing a DOM
    // document, should be passed so that the serializer can create
    // nodes.
    DOMSerializer.prototype.serializeFragment = function serializeFragment (fragment, options, target) {
        var this$1$1 = this;
        if ( options === void 0 ) options = {};

      if (!target) { target = doc(options).createDocumentFragment(); }

      var top = target, active = null;
      fragment.forEach(function (node) {
        if (active || node.marks.length) {
          if (!active) { active = []; }
          var keep = 0, rendered = 0;
          while (keep < active.length && rendered < node.marks.length) {
            var next = node.marks[rendered];
            if (!this$1$1.marks[next.type.name]) { rendered++; continue }
            if (!next.eq(active[keep]) || next.type.spec.spanning === false) { break }
            keep += 2; rendered++;
          }
          while (keep < active.length) {
            top = active.pop();
            active.pop();
          }
          while (rendered < node.marks.length) {
            var add = node.marks[rendered++];
            var markDOM = this$1$1.serializeMark(add, node.isInline, options);
            if (markDOM) {
              active.push(add, top);
              top.appendChild(markDOM.dom);
              top = markDOM.contentDOM || markDOM.dom;
            }
          }
        }
        top.appendChild(this$1$1.serializeNodeInner(node, options));
      });

      return target
    };

    DOMSerializer.prototype.serializeNodeInner = function serializeNodeInner (node, options) {
        if ( options === void 0 ) options = {};

      var ref =
          DOMSerializer.renderSpec(doc(options), this.nodes[node.type.name](node));
        var dom = ref.dom;
        var contentDOM = ref.contentDOM;
      if (contentDOM) {
        if (node.isLeaf)
          { throw new RangeError("Content hole not allowed in a leaf node spec") }
        if (options.onContent)
          { options.onContent(node, contentDOM, options); }
        else
          { this.serializeFragment(node.content, options, contentDOM); }
      }
      return dom
    };

    // :: (Node, ?Object) → dom.Node
    // Serialize this node to a DOM node. This can be useful when you
    // need to serialize a part of a document, as opposed to the whole
    // document. To serialize a whole document, use
    // [`serializeFragment`](#model.DOMSerializer.serializeFragment) on
    // its [content](#model.Node.content).
    DOMSerializer.prototype.serializeNode = function serializeNode (node, options) {
        if ( options === void 0 ) options = {};

      var dom = this.serializeNodeInner(node, options);
      for (var i = node.marks.length - 1; i >= 0; i--) {
        var wrap = this.serializeMark(node.marks[i], node.isInline, options);
        if (wrap) {
    (wrap.contentDOM || wrap.dom).appendChild(dom);
          dom = wrap.dom;
        }
      }
      return dom
    };

    DOMSerializer.prototype.serializeMark = function serializeMark (mark, inline, options) {
        if ( options === void 0 ) options = {};

      var toDOM = this.marks[mark.type.name];
      return toDOM && DOMSerializer.renderSpec(doc(options), toDOM(mark, inline))
    };

    // :: (dom.Document, DOMOutputSpec) → {dom: dom.Node, contentDOM: ?dom.Node}
    // Render an [output spec](#model.DOMOutputSpec) to a DOM node. If
    // the spec has a hole (zero) in it, `contentDOM` will point at the
    // node with the hole.
    DOMSerializer.renderSpec = function renderSpec (doc, structure, xmlNS) {
        if ( xmlNS === void 0 ) xmlNS = null;

      if (typeof structure == "string")
        { return {dom: doc.createTextNode(structure)} }
      if (structure.nodeType != null)
        { return {dom: structure} }
      if (structure.dom && structure.dom.nodeType != null)
        { return structure }
      var tagName = structure[0], space = tagName.indexOf(" ");
      if (space > 0) {
        xmlNS = tagName.slice(0, space);
        tagName = tagName.slice(space + 1);
      }
      var contentDOM = null, dom = xmlNS ? doc.createElementNS(xmlNS, tagName) : doc.createElement(tagName);
      var attrs = structure[1], start = 1;
      if (attrs && typeof attrs == "object" && attrs.nodeType == null && !Array.isArray(attrs)) {
        start = 2;
        for (var name in attrs) { if (attrs[name] != null) {
          var space$1 = name.indexOf(" ");
          if (space$1 > 0) { dom.setAttributeNS(name.slice(0, space$1), name.slice(space$1 + 1), attrs[name]); }
          else { dom.setAttribute(name, attrs[name]); }
        } }
      }
      for (var i = start; i < structure.length; i++) {
        var child = structure[i];
        if (child === 0) {
          if (i < structure.length - 1 || i > start)
            { throw new RangeError("Content hole must be the only child of its parent node") }
          return {dom: dom, contentDOM: dom}
        } else {
          var ref = DOMSerializer.renderSpec(doc, child, xmlNS);
            var inner = ref.dom;
            var innerContent = ref.contentDOM;
          dom.appendChild(inner);
          if (innerContent) {
            if (contentDOM) { throw new RangeError("Multiple content holes") }
            contentDOM = innerContent;
          }
        }
      }
      return {dom: dom, contentDOM: contentDOM}
    };

    // :: (Schema) → DOMSerializer
    // Build a serializer using the [`toDOM`](#model.NodeSpec.toDOM)
    // properties in a schema's node and mark specs.
    DOMSerializer.fromSchema = function fromSchema (schema) {
      return schema.cached.domSerializer ||
        (schema.cached.domSerializer = new DOMSerializer(this.nodesFromSchema(schema), this.marksFromSchema(schema)))
    };

    // : (Schema) → Object<(node: Node) → DOMOutputSpec>
    // Gather the serializers in a schema's node specs into an object.
    // This can be useful as a base to build a custom serializer from.
    DOMSerializer.nodesFromSchema = function nodesFromSchema (schema) {
      var result = gatherToDOM(schema.nodes);
      if (!result.text) { result.text = function (node) { return node.text; }; }
      return result
    };

    // : (Schema) → Object<(mark: Mark) → DOMOutputSpec>
    // Gather the serializers in a schema's mark specs into an object.
    DOMSerializer.marksFromSchema = function marksFromSchema (schema) {
      return gatherToDOM(schema.marks)
    };

    function gatherToDOM(obj) {
      var result = {};
      for (var name in obj) {
        var toDOM = obj[name].spec.toDOM;
        if (toDOM) { result[name] = toDOM; }
      }
      return result
    }

    function doc(options) {
      // declare global: window
      return options.document || window.document
    }

    // Mappable:: interface
    // There are several things that positions can be mapped through.
    // Such objects conform to this interface.
    //
    //   map:: (pos: number, assoc: ?number) → number
    //   Map a position through this object. When given, `assoc` (should
    //   be -1 or 1, defaults to 1) determines with which side the
    //   position is associated, which determines in which direction to
    //   move when a chunk of content is inserted at the mapped position.
    //
    //   mapResult:: (pos: number, assoc: ?number) → MapResult
    //   Map a position, and return an object containing additional
    //   information about the mapping. The result's `deleted` field tells
    //   you whether the position was deleted (completely enclosed in a
    //   replaced range) during the mapping. When content on only one side
    //   is deleted, the position itself is only considered deleted when
    //   `assoc` points in the direction of the deleted content.

    // Recovery values encode a range index and an offset. They are
    // represented as numbers, because tons of them will be created when
    // mapping, for example, a large number of decorations. The number's
    // lower 16 bits provide the index, the remaining bits the offset.
    //
    // Note: We intentionally don't use bit shift operators to en- and
    // decode these, since those clip to 32 bits, which we might in rare
    // cases want to overflow. A 64-bit float can represent 48-bit
    // integers precisely.

    var lower16 = 0xffff;
    var factor16 = Math.pow(2, 16);

    function makeRecover(index, offset) { return index + offset * factor16 }
    function recoverIndex(value) { return value & lower16 }
    function recoverOffset(value) { return (value - (value & lower16)) / factor16 }

    // ::- An object representing a mapped position with extra
    // information.
    var MapResult = function MapResult(pos, deleted, recover) {
      if ( deleted === void 0 ) deleted = false;
      if ( recover === void 0 ) recover = null;

      // :: number The mapped version of the position.
      this.pos = pos;
      // :: bool Tells you whether the position was deleted, that is,
      // whether the step removed its surroundings from the document.
      this.deleted = deleted;
      this.recover = recover;
    };

    // :: class extends Mappable
    // A map describing the deletions and insertions made by a step, which
    // can be used to find the correspondence between positions in the
    // pre-step version of a document and the same position in the
    // post-step version.
    var StepMap = function StepMap(ranges, inverted) {
      if ( inverted === void 0 ) inverted = false;

      this.ranges = ranges;
      this.inverted = inverted;
    };

    StepMap.prototype.recover = function recover (value) {
      var diff = 0, index = recoverIndex(value);
      if (!this.inverted) { for (var i = 0; i < index; i++)
        { diff += this.ranges[i * 3 + 2] - this.ranges[i * 3 + 1]; } }
      return this.ranges[index * 3] + diff + recoverOffset(value)
    };

    // : (number, ?number) → MapResult
    StepMap.prototype.mapResult = function mapResult (pos, assoc) {
      if ( assoc === void 0 ) assoc = 1;
     return this._map(pos, assoc, false) };

    // : (number, ?number) → number
    StepMap.prototype.map = function map (pos, assoc) {
      if ( assoc === void 0 ) assoc = 1;
     return this._map(pos, assoc, true) };

    StepMap.prototype._map = function _map (pos, assoc, simple) {
      var diff = 0, oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2;
      for (var i = 0; i < this.ranges.length; i += 3) {
        var start = this.ranges[i] - (this.inverted ? diff : 0);
        if (start > pos) { break }
        var oldSize = this.ranges[i + oldIndex], newSize = this.ranges[i + newIndex], end = start + oldSize;
        if (pos <= end) {
          var side = !oldSize ? assoc : pos == start ? -1 : pos == end ? 1 : assoc;
          var result = start + diff + (side < 0 ? 0 : newSize);
          if (simple) { return result }
          var recover = pos == (assoc < 0 ? start : end) ? null : makeRecover(i / 3, pos - start);
          return new MapResult(result, assoc < 0 ? pos != start : pos != end, recover)
        }
        diff += newSize - oldSize;
      }
      return simple ? pos + diff : new MapResult(pos + diff)
    };

    StepMap.prototype.touches = function touches (pos, recover) {
      var diff = 0, index = recoverIndex(recover);
      var oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2;
      for (var i = 0; i < this.ranges.length; i += 3) {
        var start = this.ranges[i] - (this.inverted ? diff : 0);
        if (start > pos) { break }
        var oldSize = this.ranges[i + oldIndex], end = start + oldSize;
        if (pos <= end && i == index * 3) { return true }
        diff += this.ranges[i + newIndex] - oldSize;
      }
      return false
    };

    // :: ((oldStart: number, oldEnd: number, newStart: number, newEnd: number))
    // Calls the given function on each of the changed ranges included in
    // this map.
    StepMap.prototype.forEach = function forEach (f) {
      var oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2;
      for (var i = 0, diff = 0; i < this.ranges.length; i += 3) {
        var start = this.ranges[i], oldStart = start - (this.inverted ? diff : 0), newStart = start + (this.inverted ? 0 : diff);
        var oldSize = this.ranges[i + oldIndex], newSize = this.ranges[i + newIndex];
        f(oldStart, oldStart + oldSize, newStart, newStart + newSize);
        diff += newSize - oldSize;
      }
    };

    // :: () → StepMap
    // Create an inverted version of this map. The result can be used to
    // map positions in the post-step document to the pre-step document.
    StepMap.prototype.invert = function invert () {
      return new StepMap(this.ranges, !this.inverted)
    };

    StepMap.prototype.toString = function toString () {
      return (this.inverted ? "-" : "") + JSON.stringify(this.ranges)
    };

    // :: (n: number) → StepMap
    // Create a map that moves all positions by offset `n` (which may be
    // negative). This can be useful when applying steps meant for a
    // sub-document to a larger document, or vice-versa.
    StepMap.offset = function offset (n) {
      return n == 0 ? StepMap.empty : new StepMap(n < 0 ? [0, -n, 0] : [0, 0, n])
    };

    StepMap.empty = new StepMap([]);

    // :: class extends Mappable
    // A mapping represents a pipeline of zero or more [step
    // maps](#transform.StepMap). It has special provisions for losslessly
    // handling mapping positions through a series of steps in which some
    // steps are inverted versions of earlier steps. (This comes up when
    // ‘[rebasing](/docs/guide/#transform.rebasing)’ steps for
    // collaboration or history management.)
    var Mapping = function Mapping(maps, mirror, from, to) {
      // :: [StepMap]
      // The step maps in this mapping.
      this.maps = maps || [];
      // :: number
      // The starting position in the `maps` array, used when `map` or
      // `mapResult` is called.
      this.from = from || 0;
      // :: number
      // The end position in the `maps` array.
      this.to = to == null ? this.maps.length : to;
      this.mirror = mirror;
    };

    // :: (?number, ?number) → Mapping
    // Create a mapping that maps only through a part of this one.
    Mapping.prototype.slice = function slice (from, to) {
        if ( from === void 0 ) from = 0;
        if ( to === void 0 ) to = this.maps.length;

      return new Mapping(this.maps, this.mirror, from, to)
    };

    Mapping.prototype.copy = function copy () {
      return new Mapping(this.maps.slice(), this.mirror && this.mirror.slice(), this.from, this.to)
    };

    // :: (StepMap, ?number)
    // Add a step map to the end of this mapping. If `mirrors` is
    // given, it should be the index of the step map that is the mirror
    // image of this one.
    Mapping.prototype.appendMap = function appendMap (map, mirrors) {
      this.to = this.maps.push(map);
      if (mirrors != null) { this.setMirror(this.maps.length - 1, mirrors); }
    };

    // :: (Mapping)
    // Add all the step maps in a given mapping to this one (preserving
    // mirroring information).
    Mapping.prototype.appendMapping = function appendMapping (mapping) {
      for (var i = 0, startSize = this.maps.length; i < mapping.maps.length; i++) {
        var mirr = mapping.getMirror(i);
        this.appendMap(mapping.maps[i], mirr != null && mirr < i ? startSize + mirr : null);
      }
    };

    // :: (number) → ?number
    // Finds the offset of the step map that mirrors the map at the
    // given offset, in this mapping (as per the second argument to
    // `appendMap`).
    Mapping.prototype.getMirror = function getMirror (n) {
      if (this.mirror) { for (var i = 0; i < this.mirror.length; i++)
        { if (this.mirror[i] == n) { return this.mirror[i + (i % 2 ? -1 : 1)] } } }
    };

    Mapping.prototype.setMirror = function setMirror (n, m) {
      if (!this.mirror) { this.mirror = []; }
      this.mirror.push(n, m);
    };

    // :: (Mapping)
    // Append the inverse of the given mapping to this one.
    Mapping.prototype.appendMappingInverted = function appendMappingInverted (mapping) {
      for (var i = mapping.maps.length - 1, totalSize = this.maps.length + mapping.maps.length; i >= 0; i--) {
        var mirr = mapping.getMirror(i);
        this.appendMap(mapping.maps[i].invert(), mirr != null && mirr > i ? totalSize - mirr - 1 : null);
      }
    };

    // :: () → Mapping
    // Create an inverted version of this mapping.
    Mapping.prototype.invert = function invert () {
      var inverse = new Mapping;
      inverse.appendMappingInverted(this);
      return inverse
    };

    // : (number, ?number) → number
    // Map a position through this mapping.
    Mapping.prototype.map = function map (pos, assoc) {
        if ( assoc === void 0 ) assoc = 1;

      if (this.mirror) { return this._map(pos, assoc, true) }
      for (var i = this.from; i < this.to; i++)
        { pos = this.maps[i].map(pos, assoc); }
      return pos
    };

    // : (number, ?number) → MapResult
    // Map a position through this mapping, returning a mapping
    // result.
    Mapping.prototype.mapResult = function mapResult (pos, assoc) {
      if ( assoc === void 0 ) assoc = 1;
     return this._map(pos, assoc, false) };

    Mapping.prototype._map = function _map (pos, assoc, simple) {
      var deleted = false;

      for (var i = this.from; i < this.to; i++) {
        var map = this.maps[i], result = map.mapResult(pos, assoc);
        if (result.recover != null) {
          var corr = this.getMirror(i);
          if (corr != null && corr > i && corr < this.to) {
            i = corr;
            pos = this.maps[corr].recover(result.recover);
            continue
          }
        }

        if (result.deleted) { deleted = true; }
        pos = result.pos;
      }

      return simple ? pos : new MapResult(pos, deleted)
    };

    function TransformError(message) {
      var err = Error.call(this, message);
      err.__proto__ = TransformError.prototype;
      return err
    }

    TransformError.prototype = Object.create(Error.prototype);
    TransformError.prototype.constructor = TransformError;
    TransformError.prototype.name = "TransformError";

    // ::- Abstraction to build up and track an array of
    // [steps](#transform.Step) representing a document transformation.
    //
    // Most transforming methods return the `Transform` object itself, so
    // that they can be chained.
    var Transform = function Transform(doc) {
      // :: Node
      // The current document (the result of applying the steps in the
      // transform).
      this.doc = doc;
      // :: [Step]
      // The steps in this transform.
      this.steps = [];
      // :: [Node]
      // The documents before each of the steps.
      this.docs = [];
      // :: Mapping
      // A mapping with the maps for each of the steps in this transform.
      this.mapping = new Mapping;
    };

    var prototypeAccessors$4 = { before: { configurable: true },docChanged: { configurable: true } };

    // :: Node The starting document.
    prototypeAccessors$4.before.get = function () { return this.docs.length ? this.docs[0] : this.doc };

    // :: (step: Step) → this
    // Apply a new step in this transform, saving the result. Throws an
    // error when the step fails.
    Transform.prototype.step = function step (object) {
      var result = this.maybeStep(object);
      if (result.failed) { throw new TransformError(result.failed) }
      return this
    };

    // :: (Step) → StepResult
    // Try to apply a step in this transformation, ignoring it if it
    // fails. Returns the step result.
    Transform.prototype.maybeStep = function maybeStep (step) {
      var result = step.apply(this.doc);
      if (!result.failed) { this.addStep(step, result.doc); }
      return result
    };

    // :: bool
    // True when the document has been changed (when there are any
    // steps).
    prototypeAccessors$4.docChanged.get = function () {
      return this.steps.length > 0
    };

    Transform.prototype.addStep = function addStep (step, doc) {
      this.docs.push(this.doc);
      this.steps.push(step);
      this.mapping.appendMap(step.getMap());
      this.doc = doc;
    };

    Object.defineProperties( Transform.prototype, prototypeAccessors$4 );

    function mustOverride() { throw new Error("Override me") }

    var stepsByID = Object.create(null);

    // ::- A step object represents an atomic change. It generally applies
    // only to the document it was created for, since the positions
    // stored in it will only make sense for that document.
    //
    // New steps are defined by creating classes that extend `Step`,
    // overriding the `apply`, `invert`, `map`, `getMap` and `fromJSON`
    // methods, and registering your class with a unique
    // JSON-serialization identifier using
    // [`Step.jsonID`](#transform.Step^jsonID).
    var Step = function Step () {};

    Step.prototype.apply = function apply (_doc) { return mustOverride() };

    // :: () → StepMap
    // Get the step map that represents the changes made by this step,
    // and which can be used to transform between positions in the old
    // and the new document.
    Step.prototype.getMap = function getMap () { return StepMap.empty };

    // :: (doc: Node) → Step
    // Create an inverted version of this step. Needs the document as it
    // was before the step as argument.
    Step.prototype.invert = function invert (_doc) { return mustOverride() };

    // :: (mapping: Mappable) → ?Step
    // Map this step through a mappable thing, returning either a
    // version of that step with its positions adjusted, or `null` if
    // the step was entirely deleted by the mapping.
    Step.prototype.map = function map (_mapping) { return mustOverride() };

    // :: (other: Step) → ?Step
    // Try to merge this step with another one, to be applied directly
    // after it. Returns the merged step when possible, null if the
    // steps can't be merged.
    Step.prototype.merge = function merge (_other) { return null };

    // :: () → Object
    // Create a JSON-serializeable representation of this step. When
    // defining this for a custom subclass, make sure the result object
    // includes the step type's [JSON id](#transform.Step^jsonID) under
    // the `stepType` property.
    Step.prototype.toJSON = function toJSON () { return mustOverride() };

    // :: (Schema, Object) → Step
    // Deserialize a step from its JSON representation. Will call
    // through to the step class' own implementation of this method.
    Step.fromJSON = function fromJSON (schema, json) {
      if (!json || !json.stepType) { throw new RangeError("Invalid input for Step.fromJSON") }
      var type = stepsByID[json.stepType];
      if (!type) { throw new RangeError(("No step type " + (json.stepType) + " defined")) }
      return type.fromJSON(schema, json)
    };

    // :: (string, constructor<Step>)
    // To be able to serialize steps to JSON, each step needs a string
    // ID to attach to its JSON representation. Use this method to
    // register an ID for your step classes. Try to pick something
    // that's unlikely to clash with steps from other modules.
    Step.jsonID = function jsonID (id, stepClass) {
      if (id in stepsByID) { throw new RangeError("Duplicate use of step JSON ID " + id) }
      stepsByID[id] = stepClass;
      stepClass.prototype.jsonID = id;
      return stepClass
    };

    // ::- The result of [applying](#transform.Step.apply) a step. Contains either a
    // new document or a failure value.
    var StepResult = function StepResult(doc, failed) {
      // :: ?Node The transformed document.
      this.doc = doc;
      // :: ?string Text providing information about a failed step.
      this.failed = failed;
    };

    // :: (Node) → StepResult
    // Create a successful step result.
    StepResult.ok = function ok (doc) { return new StepResult(doc, null) };

    // :: (string) → StepResult
    // Create a failed step result.
    StepResult.fail = function fail (message) { return new StepResult(null, message) };

    // :: (Node, number, number, Slice) → StepResult
    // Call [`Node.replace`](#model.Node.replace) with the given
    // arguments. Create a successful result if it succeeds, and a
    // failed one if it throws a `ReplaceError`.
    StepResult.fromReplace = function fromReplace (doc, from, to, slice) {
      try {
        return StepResult.ok(doc.replace(from, to, slice))
      } catch (e) {
        if (e instanceof ReplaceError) { return StepResult.fail(e.message) }
        throw e
      }
    };

    // ::- Replace a part of the document with a slice of new content.
    var ReplaceStep = /*@__PURE__*/(function (Step) {
      function ReplaceStep(from, to, slice, structure) {
        Step.call(this);
        // :: number
        // The start position of the replaced range.
        this.from = from;
        // :: number
        // The end position of the replaced range.
        this.to = to;
        // :: Slice
        // The slice to insert.
        this.slice = slice;
        this.structure = !!structure;
      }

      if ( Step ) ReplaceStep.__proto__ = Step;
      ReplaceStep.prototype = Object.create( Step && Step.prototype );
      ReplaceStep.prototype.constructor = ReplaceStep;

      ReplaceStep.prototype.apply = function apply (doc) {
        if (this.structure && contentBetween(doc, this.from, this.to))
          { return StepResult.fail("Structure replace would overwrite content") }
        return StepResult.fromReplace(doc, this.from, this.to, this.slice)
      };

      ReplaceStep.prototype.getMap = function getMap () {
        return new StepMap([this.from, this.to - this.from, this.slice.size])
      };

      ReplaceStep.prototype.invert = function invert (doc) {
        return new ReplaceStep(this.from, this.from + this.slice.size, doc.slice(this.from, this.to))
      };

      ReplaceStep.prototype.map = function map (mapping) {
        var from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1);
        if (from.deleted && to.deleted) { return null }
        return new ReplaceStep(from.pos, Math.max(from.pos, to.pos), this.slice)
      };

      ReplaceStep.prototype.merge = function merge (other) {
        if (!(other instanceof ReplaceStep) || other.structure || this.structure) { return null }

        if (this.from + this.slice.size == other.from && !this.slice.openEnd && !other.slice.openStart) {
          var slice = this.slice.size + other.slice.size == 0 ? Slice.empty
              : new Slice(this.slice.content.append(other.slice.content), this.slice.openStart, other.slice.openEnd);
          return new ReplaceStep(this.from, this.to + (other.to - other.from), slice, this.structure)
        } else if (other.to == this.from && !this.slice.openStart && !other.slice.openEnd) {
          var slice$1 = this.slice.size + other.slice.size == 0 ? Slice.empty
              : new Slice(other.slice.content.append(this.slice.content), other.slice.openStart, this.slice.openEnd);
          return new ReplaceStep(other.from, this.to, slice$1, this.structure)
        } else {
          return null
        }
      };

      ReplaceStep.prototype.toJSON = function toJSON () {
        var json = {stepType: "replace", from: this.from, to: this.to};
        if (this.slice.size) { json.slice = this.slice.toJSON(); }
        if (this.structure) { json.structure = true; }
        return json
      };

      ReplaceStep.fromJSON = function fromJSON (schema, json) {
        if (typeof json.from != "number" || typeof json.to != "number")
          { throw new RangeError("Invalid input for ReplaceStep.fromJSON") }
        return new ReplaceStep(json.from, json.to, Slice.fromJSON(schema, json.slice), !!json.structure)
      };

      return ReplaceStep;
    }(Step));

    Step.jsonID("replace", ReplaceStep);

    // ::- Replace a part of the document with a slice of content, but
    // preserve a range of the replaced content by moving it into the
    // slice.
    var ReplaceAroundStep = /*@__PURE__*/(function (Step) {
      function ReplaceAroundStep(from, to, gapFrom, gapTo, slice, insert, structure) {
        Step.call(this);
        // :: number
        // The start position of the replaced range.
        this.from = from;
        // :: number
        // The end position of the replaced range.
        this.to = to;
        // :: number
        // The start of preserved range.
        this.gapFrom = gapFrom;
        // :: number
        // The end of preserved range.
        this.gapTo = gapTo;
        // :: Slice
        // The slice to insert.
        this.slice = slice;
        // :: number
        // The position in the slice where the preserved range should be
        // inserted.
        this.insert = insert;
        this.structure = !!structure;
      }

      if ( Step ) ReplaceAroundStep.__proto__ = Step;
      ReplaceAroundStep.prototype = Object.create( Step && Step.prototype );
      ReplaceAroundStep.prototype.constructor = ReplaceAroundStep;

      ReplaceAroundStep.prototype.apply = function apply (doc) {
        if (this.structure && (contentBetween(doc, this.from, this.gapFrom) ||
                               contentBetween(doc, this.gapTo, this.to)))
          { return StepResult.fail("Structure gap-replace would overwrite content") }

        var gap = doc.slice(this.gapFrom, this.gapTo);
        if (gap.openStart || gap.openEnd)
          { return StepResult.fail("Gap is not a flat range") }
        var inserted = this.slice.insertAt(this.insert, gap.content);
        if (!inserted) { return StepResult.fail("Content does not fit in gap") }
        return StepResult.fromReplace(doc, this.from, this.to, inserted)
      };

      ReplaceAroundStep.prototype.getMap = function getMap () {
        return new StepMap([this.from, this.gapFrom - this.from, this.insert,
                            this.gapTo, this.to - this.gapTo, this.slice.size - this.insert])
      };

      ReplaceAroundStep.prototype.invert = function invert (doc) {
        var gap = this.gapTo - this.gapFrom;
        return new ReplaceAroundStep(this.from, this.from + this.slice.size + gap,
                                     this.from + this.insert, this.from + this.insert + gap,
                                     doc.slice(this.from, this.to).removeBetween(this.gapFrom - this.from, this.gapTo - this.from),
                                     this.gapFrom - this.from, this.structure)
      };

      ReplaceAroundStep.prototype.map = function map (mapping) {
        var from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1);
        var gapFrom = mapping.map(this.gapFrom, -1), gapTo = mapping.map(this.gapTo, 1);
        if ((from.deleted && to.deleted) || gapFrom < from.pos || gapTo > to.pos) { return null }
        return new ReplaceAroundStep(from.pos, to.pos, gapFrom, gapTo, this.slice, this.insert, this.structure)
      };

      ReplaceAroundStep.prototype.toJSON = function toJSON () {
        var json = {stepType: "replaceAround", from: this.from, to: this.to,
                    gapFrom: this.gapFrom, gapTo: this.gapTo, insert: this.insert};
        if (this.slice.size) { json.slice = this.slice.toJSON(); }
        if (this.structure) { json.structure = true; }
        return json
      };

      ReplaceAroundStep.fromJSON = function fromJSON (schema, json) {
        if (typeof json.from != "number" || typeof json.to != "number" ||
            typeof json.gapFrom != "number" || typeof json.gapTo != "number" || typeof json.insert != "number")
          { throw new RangeError("Invalid input for ReplaceAroundStep.fromJSON") }
        return new ReplaceAroundStep(json.from, json.to, json.gapFrom, json.gapTo,
                                     Slice.fromJSON(schema, json.slice), json.insert, !!json.structure)
      };

      return ReplaceAroundStep;
    }(Step));

    Step.jsonID("replaceAround", ReplaceAroundStep);

    function contentBetween(doc, from, to) {
      var $from = doc.resolve(from), dist = to - from, depth = $from.depth;
      while (dist > 0 && depth > 0 && $from.indexAfter(depth) == $from.node(depth).childCount) {
        depth--;
        dist--;
      }
      if (dist > 0) {
        var next = $from.node(depth).maybeChild($from.indexAfter(depth));
        while (dist > 0) {
          if (!next || next.isLeaf) { return true }
          next = next.firstChild;
          dist--;
        }
      }
      return false
    }

    function canCut(node, start, end) {
      return (start == 0 || node.canReplace(start, node.childCount)) &&
        (end == node.childCount || node.canReplace(0, end))
    }

    // :: (NodeRange) → ?number
    // Try to find a target depth to which the content in the given range
    // can be lifted. Will not go across
    // [isolating](#model.NodeSpec.isolating) parent nodes.
    function liftTarget(range) {
      var parent = range.parent;
      var content = parent.content.cutByIndex(range.startIndex, range.endIndex);
      for (var depth = range.depth;; --depth) {
        var node = range.$from.node(depth);
        var index = range.$from.index(depth), endIndex = range.$to.indexAfter(depth);
        if (depth < range.depth && node.canReplace(index, endIndex, content))
          { return depth }
        if (depth == 0 || node.type.spec.isolating || !canCut(node, index, endIndex)) { break }
      }
    }

    // :: (NodeRange, number) → this
    // Split the content in the given range off from its parent, if there
    // is sibling content before or after it, and move it up the tree to
    // the depth specified by `target`. You'll probably want to use
    // [`liftTarget`](#transform.liftTarget) to compute `target`, to make
    // sure the lift is valid.
    Transform.prototype.lift = function(range, target) {
      var $from = range.$from;
      var $to = range.$to;
      var depth = range.depth;

      var gapStart = $from.before(depth + 1), gapEnd = $to.after(depth + 1);
      var start = gapStart, end = gapEnd;

      var before = Fragment.empty, openStart = 0;
      for (var d = depth, splitting = false; d > target; d--)
        { if (splitting || $from.index(d) > 0) {
          splitting = true;
          before = Fragment.from($from.node(d).copy(before));
          openStart++;
        } else {
          start--;
        } }
      var after = Fragment.empty, openEnd = 0;
      for (var d$1 = depth, splitting$1 = false; d$1 > target; d$1--)
        { if (splitting$1 || $to.after(d$1 + 1) < $to.end(d$1)) {
          splitting$1 = true;
          after = Fragment.from($to.node(d$1).copy(after));
          openEnd++;
        } else {
          end++;
        } }

      return this.step(new ReplaceAroundStep(start, end, gapStart, gapEnd,
                                             new Slice(before.append(after), openStart, openEnd),
                                             before.size - openStart, true))
    };

    // :: (NodeRange, NodeType, ?Object, ?NodeRange) → ?[{type: NodeType, attrs: ?Object}]
    // Try to find a valid way to wrap the content in the given range in a
    // node of the given type. May introduce extra nodes around and inside
    // the wrapper node, if necessary. Returns null if no valid wrapping
    // could be found. When `innerRange` is given, that range's content is
    // used as the content to fit into the wrapping, instead of the
    // content of `range`.
    function findWrapping(range, nodeType, attrs, innerRange) {
      if ( innerRange === void 0 ) innerRange = range;

      var around = findWrappingOutside$1(range, nodeType);
      var inner = around && findWrappingInside$1(innerRange, nodeType);
      if (!inner) { return null }
      return around.map(withAttrs).concat({type: nodeType, attrs: attrs}).concat(inner.map(withAttrs))
    }

    function withAttrs(type) { return {type: type, attrs: null} }

    function findWrappingOutside$1(range, type) {
      var parent = range.parent;
      var startIndex = range.startIndex;
      var endIndex = range.endIndex;
      var around = parent.contentMatchAt(startIndex).findWrapping(type);
      if (!around) { return null }
      var outer = around.length ? around[0] : type;
      return parent.canReplaceWith(startIndex, endIndex, outer) ? around : null
    }

    function findWrappingInside$1(range, type) {
      var parent = range.parent;
      var startIndex = range.startIndex;
      var endIndex = range.endIndex;
      var inner = parent.child(startIndex);
      var inside = type.contentMatch.findWrapping(inner.type);
      if (!inside) { return null }
      var lastType = inside.length ? inside[inside.length - 1] : type;
      var innerMatch = lastType.contentMatch;
      for (var i = startIndex; innerMatch && i < endIndex; i++)
        { innerMatch = innerMatch.matchType(parent.child(i).type); }
      if (!innerMatch || !innerMatch.validEnd) { return null }
      return inside
    }

    // :: (NodeRange, [{type: NodeType, attrs: ?Object}]) → this
    // Wrap the given [range](#model.NodeRange) in the given set of wrappers.
    // The wrappers are assumed to be valid in this position, and should
    // probably be computed with [`findWrapping`](#transform.findWrapping).
    Transform.prototype.wrap = function(range, wrappers) {
      var content = Fragment.empty;
      for (var i = wrappers.length - 1; i >= 0; i--)
        { content = Fragment.from(wrappers[i].type.create(wrappers[i].attrs, content)); }

      var start = range.start, end = range.end;
      return this.step(new ReplaceAroundStep(start, end, start, end, new Slice(content, 0, 0), wrappers.length, true))
    };

    // :: (number, ?number, NodeType, ?Object) → this
    // Set the type of all textblocks (partly) between `from` and `to` to
    // the given node type with the given attributes.
    Transform.prototype.setBlockType = function(from, to, type, attrs) {
      var this$1$1 = this;
      if ( to === void 0 ) to = from;

      if (!type.isTextblock) { throw new RangeError("Type given to setBlockType should be a textblock") }
      var mapFrom = this.steps.length;
      this.doc.nodesBetween(from, to, function (node, pos) {
        if (node.isTextblock && !node.hasMarkup(type, attrs) && canChangeType(this$1$1.doc, this$1$1.mapping.slice(mapFrom).map(pos), type)) {
          // Ensure all markup that isn't allowed in the new node type is cleared
          this$1$1.clearIncompatible(this$1$1.mapping.slice(mapFrom).map(pos, 1), type);
          var mapping = this$1$1.mapping.slice(mapFrom);
          var startM = mapping.map(pos, 1), endM = mapping.map(pos + node.nodeSize, 1);
          this$1$1.step(new ReplaceAroundStep(startM, endM, startM + 1, endM - 1,
                                          new Slice(Fragment.from(type.create(attrs, null, node.marks)), 0, 0), 1, true));
          return false
        }
      });
      return this
    };

    function canChangeType(doc, pos, type) {
      var $pos = doc.resolve(pos), index = $pos.index();
      return $pos.parent.canReplaceWith(index, index + 1, type)
    }

    // :: (number, ?NodeType, ?Object, ?[Mark]) → this
    // Change the type, attributes, and/or marks of the node at `pos`.
    // When `type` isn't given, the existing node type is preserved,
    Transform.prototype.setNodeMarkup = function(pos, type, attrs, marks) {
      var node = this.doc.nodeAt(pos);
      if (!node) { throw new RangeError("No node at given position") }
      if (!type) { type = node.type; }
      var newNode = type.create(attrs, null, marks || node.marks);
      if (node.isLeaf)
        { return this.replaceWith(pos, pos + node.nodeSize, newNode) }

      if (!type.validContent(node.content))
        { throw new RangeError("Invalid content for node type " + type.name) }

      return this.step(new ReplaceAroundStep(pos, pos + node.nodeSize, pos + 1, pos + node.nodeSize - 1,
                                             new Slice(Fragment.from(newNode), 0, 0), 1, true))
    };

    // :: (Node, number, number, ?[?{type: NodeType, attrs: ?Object}]) → bool
    // Check whether splitting at the given position is allowed.
    function canSplit(doc, pos, depth, typesAfter) {
      if ( depth === void 0 ) depth = 1;

      var $pos = doc.resolve(pos), base = $pos.depth - depth;
      var innerType = (typesAfter && typesAfter[typesAfter.length - 1]) || $pos.parent;
      if (base < 0 || $pos.parent.type.spec.isolating ||
          !$pos.parent.canReplace($pos.index(), $pos.parent.childCount) ||
          !innerType.type.validContent($pos.parent.content.cutByIndex($pos.index(), $pos.parent.childCount)))
        { return false }
      for (var d = $pos.depth - 1, i = depth - 2; d > base; d--, i--) {
        var node = $pos.node(d), index$1 = $pos.index(d);
        if (node.type.spec.isolating) { return false }
        var rest = node.content.cutByIndex(index$1, node.childCount);
        var after = (typesAfter && typesAfter[i]) || node;
        if (after != node) { rest = rest.replaceChild(0, after.type.create(after.attrs)); }
        if (!node.canReplace(index$1 + 1, node.childCount) || !after.type.validContent(rest))
          { return false }
      }
      var index = $pos.indexAfter(base);
      var baseType = typesAfter && typesAfter[0];
      return $pos.node(base).canReplaceWith(index, index, baseType ? baseType.type : $pos.node(base + 1).type)
    }

    // :: (number, ?number, ?[?{type: NodeType, attrs: ?Object}]) → this
    // Split the node at the given position, and optionally, if `depth` is
    // greater than one, any number of nodes above that. By default, the
    // parts split off will inherit the node type of the original node.
    // This can be changed by passing an array of types and attributes to
    // use after the split.
    Transform.prototype.split = function(pos, depth, typesAfter) {
      if ( depth === void 0 ) depth = 1;

      var $pos = this.doc.resolve(pos), before = Fragment.empty, after = Fragment.empty;
      for (var d = $pos.depth, e = $pos.depth - depth, i = depth - 1; d > e; d--, i--) {
        before = Fragment.from($pos.node(d).copy(before));
        var typeAfter = typesAfter && typesAfter[i];
        after = Fragment.from(typeAfter ? typeAfter.type.create(typeAfter.attrs, after) : $pos.node(d).copy(after));
      }
      return this.step(new ReplaceStep(pos, pos, new Slice(before.append(after), depth, depth), true))
    };

    // :: (Node, number) → bool
    // Test whether the blocks before and after a given position can be
    // joined.
    function canJoin(doc, pos) {
      var $pos = doc.resolve(pos), index = $pos.index();
      return joinable($pos.nodeBefore, $pos.nodeAfter) &&
        $pos.parent.canReplace(index, index + 1)
    }

    function joinable(a, b) {
      return a && b && !a.isLeaf && a.canAppend(b)
    }

    // :: (number, ?number) → this
    // Join the blocks around the given position. If depth is 2, their
    // last and first siblings are also joined, and so on.
    Transform.prototype.join = function(pos, depth) {
      if ( depth === void 0 ) depth = 1;

      var step = new ReplaceStep(pos - depth, pos + depth, Slice.empty, true);
      return this.step(step)
    };

    // :: (Node, number, NodeType) → ?number
    // Try to find a point where a node of the given type can be inserted
    // near `pos`, by searching up the node hierarchy when `pos` itself
    // isn't a valid place but is at the start or end of a node. Return
    // null if no position was found.
    function insertPoint(doc, pos, nodeType) {
      var $pos = doc.resolve(pos);
      if ($pos.parent.canReplaceWith($pos.index(), $pos.index(), nodeType)) { return pos }

      if ($pos.parentOffset == 0)
        { for (var d = $pos.depth - 1; d >= 0; d--) {
          var index = $pos.index(d);
          if ($pos.node(d).canReplaceWith(index, index, nodeType)) { return $pos.before(d + 1) }
          if (index > 0) { return null }
        } }
      if ($pos.parentOffset == $pos.parent.content.size)
        { for (var d$1 = $pos.depth - 1; d$1 >= 0; d$1--) {
          var index$1 = $pos.indexAfter(d$1);
          if ($pos.node(d$1).canReplaceWith(index$1, index$1, nodeType)) { return $pos.after(d$1 + 1) }
          if (index$1 < $pos.node(d$1).childCount) { return null }
        } }
    }

    // :: (Node, number, Slice) → ?number
    // Finds a position at or around the given position where the given
    // slice can be inserted. Will look at parent nodes' nearest boundary
    // and try there, even if the original position wasn't directly at the
    // start or end of that node. Returns null when no position was found.
    function dropPoint(doc, pos, slice) {
      var $pos = doc.resolve(pos);
      if (!slice.content.size) { return pos }
      var content = slice.content;
      for (var i = 0; i < slice.openStart; i++) { content = content.firstChild.content; }
      for (var pass = 1; pass <= (slice.openStart == 0 && slice.size ? 2 : 1); pass++) {
        for (var d = $pos.depth; d >= 0; d--) {
          var bias = d == $pos.depth ? 0 : $pos.pos <= ($pos.start(d + 1) + $pos.end(d + 1)) / 2 ? -1 : 1;
          var insertPos = $pos.index(d) + (bias > 0 ? 1 : 0);
          var parent = $pos.node(d), fits = false;
          if (pass == 1) {
            fits = parent.canReplace(insertPos, insertPos, content);
          } else {
            var wrapping = parent.contentMatchAt(insertPos).findWrapping(content.firstChild.type);
            fits = wrapping && parent.canReplaceWith(insertPos, insertPos, wrapping[0]);
          }
          if (fits)
            { return bias == 0 ? $pos.pos : bias < 0 ? $pos.before(d + 1) : $pos.after(d + 1) }
        }
      }
      return null
    }

    function mapFragment(fragment, f, parent) {
      var mapped = [];
      for (var i = 0; i < fragment.childCount; i++) {
        var child = fragment.child(i);
        if (child.content.size) { child = child.copy(mapFragment(child.content, f, child)); }
        if (child.isInline) { child = f(child, parent, i); }
        mapped.push(child);
      }
      return Fragment.fromArray(mapped)
    }

    // ::- Add a mark to all inline content between two positions.
    var AddMarkStep = /*@__PURE__*/(function (Step) {
      function AddMarkStep(from, to, mark) {
        Step.call(this);
        // :: number
        // The start of the marked range.
        this.from = from;
        // :: number
        // The end of the marked range.
        this.to = to;
        // :: Mark
        // The mark to add.
        this.mark = mark;
      }

      if ( Step ) AddMarkStep.__proto__ = Step;
      AddMarkStep.prototype = Object.create( Step && Step.prototype );
      AddMarkStep.prototype.constructor = AddMarkStep;

      AddMarkStep.prototype.apply = function apply (doc) {
        var this$1$1 = this;

        var oldSlice = doc.slice(this.from, this.to), $from = doc.resolve(this.from);
        var parent = $from.node($from.sharedDepth(this.to));
        var slice = new Slice(mapFragment(oldSlice.content, function (node, parent) {
          if (!node.isAtom || !parent.type.allowsMarkType(this$1$1.mark.type)) { return node }
          return node.mark(this$1$1.mark.addToSet(node.marks))
        }, parent), oldSlice.openStart, oldSlice.openEnd);
        return StepResult.fromReplace(doc, this.from, this.to, slice)
      };

      AddMarkStep.prototype.invert = function invert () {
        return new RemoveMarkStep(this.from, this.to, this.mark)
      };

      AddMarkStep.prototype.map = function map (mapping) {
        var from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1);
        if (from.deleted && to.deleted || from.pos >= to.pos) { return null }
        return new AddMarkStep(from.pos, to.pos, this.mark)
      };

      AddMarkStep.prototype.merge = function merge (other) {
        if (other instanceof AddMarkStep &&
            other.mark.eq(this.mark) &&
            this.from <= other.to && this.to >= other.from)
          { return new AddMarkStep(Math.min(this.from, other.from),
                                 Math.max(this.to, other.to), this.mark) }
      };

      AddMarkStep.prototype.toJSON = function toJSON () {
        return {stepType: "addMark", mark: this.mark.toJSON(),
                from: this.from, to: this.to}
      };

      AddMarkStep.fromJSON = function fromJSON (schema, json) {
        if (typeof json.from != "number" || typeof json.to != "number")
          { throw new RangeError("Invalid input for AddMarkStep.fromJSON") }
        return new AddMarkStep(json.from, json.to, schema.markFromJSON(json.mark))
      };

      return AddMarkStep;
    }(Step));

    Step.jsonID("addMark", AddMarkStep);

    // ::- Remove a mark from all inline content between two positions.
    var RemoveMarkStep = /*@__PURE__*/(function (Step) {
      function RemoveMarkStep(from, to, mark) {
        Step.call(this);
        // :: number
        // The start of the unmarked range.
        this.from = from;
        // :: number
        // The end of the unmarked range.
        this.to = to;
        // :: Mark
        // The mark to remove.
        this.mark = mark;
      }

      if ( Step ) RemoveMarkStep.__proto__ = Step;
      RemoveMarkStep.prototype = Object.create( Step && Step.prototype );
      RemoveMarkStep.prototype.constructor = RemoveMarkStep;

      RemoveMarkStep.prototype.apply = function apply (doc) {
        var this$1$1 = this;

        var oldSlice = doc.slice(this.from, this.to);
        var slice = new Slice(mapFragment(oldSlice.content, function (node) {
          return node.mark(this$1$1.mark.removeFromSet(node.marks))
        }), oldSlice.openStart, oldSlice.openEnd);
        return StepResult.fromReplace(doc, this.from, this.to, slice)
      };

      RemoveMarkStep.prototype.invert = function invert () {
        return new AddMarkStep(this.from, this.to, this.mark)
      };

      RemoveMarkStep.prototype.map = function map (mapping) {
        var from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1);
        if (from.deleted && to.deleted || from.pos >= to.pos) { return null }
        return new RemoveMarkStep(from.pos, to.pos, this.mark)
      };

      RemoveMarkStep.prototype.merge = function merge (other) {
        if (other instanceof RemoveMarkStep &&
            other.mark.eq(this.mark) &&
            this.from <= other.to && this.to >= other.from)
          { return new RemoveMarkStep(Math.min(this.from, other.from),
                                    Math.max(this.to, other.to), this.mark) }
      };

      RemoveMarkStep.prototype.toJSON = function toJSON () {
        return {stepType: "removeMark", mark: this.mark.toJSON(),
                from: this.from, to: this.to}
      };

      RemoveMarkStep.fromJSON = function fromJSON (schema, json) {
        if (typeof json.from != "number" || typeof json.to != "number")
          { throw new RangeError("Invalid input for RemoveMarkStep.fromJSON") }
        return new RemoveMarkStep(json.from, json.to, schema.markFromJSON(json.mark))
      };

      return RemoveMarkStep;
    }(Step));

    Step.jsonID("removeMark", RemoveMarkStep);

    // :: (number, number, Mark) → this
    // Add the given mark to the inline content between `from` and `to`.
    Transform.prototype.addMark = function(from, to, mark) {
      var this$1$1 = this;

      var removed = [], added = [], removing = null, adding = null;
      this.doc.nodesBetween(from, to, function (node, pos, parent) {
        if (!node.isInline) { return }
        var marks = node.marks;
        if (!mark.isInSet(marks) && parent.type.allowsMarkType(mark.type)) {
          var start = Math.max(pos, from), end = Math.min(pos + node.nodeSize, to);
          var newSet = mark.addToSet(marks);

          for (var i = 0; i < marks.length; i++) {
            if (!marks[i].isInSet(newSet)) {
              if (removing && removing.to == start && removing.mark.eq(marks[i]))
                { removing.to = end; }
              else
                { removed.push(removing = new RemoveMarkStep(start, end, marks[i])); }
            }
          }

          if (adding && adding.to == start)
            { adding.to = end; }
          else
            { added.push(adding = new AddMarkStep(start, end, mark)); }
        }
      });

      removed.forEach(function (s) { return this$1$1.step(s); });
      added.forEach(function (s) { return this$1$1.step(s); });
      return this
    };

    // :: (number, number, ?union<Mark, MarkType>) → this
    // Remove marks from inline nodes between `from` and `to`. When `mark`
    // is a single mark, remove precisely that mark. When it is a mark type,
    // remove all marks of that type. When it is null, remove all marks of
    // any type.
    Transform.prototype.removeMark = function(from, to, mark) {
      var this$1$1 = this;
      if ( mark === void 0 ) mark = null;

      var matched = [], step = 0;
      this.doc.nodesBetween(from, to, function (node, pos) {
        if (!node.isInline) { return }
        step++;
        var toRemove = null;
        if (mark instanceof MarkType) {
          var set = node.marks, found;
          while (found = mark.isInSet(set)) {
    (toRemove || (toRemove = [])).push(found);
            set = found.removeFromSet(set);
          }
        } else if (mark) {
          if (mark.isInSet(node.marks)) { toRemove = [mark]; }
        } else {
          toRemove = node.marks;
        }
        if (toRemove && toRemove.length) {
          var end = Math.min(pos + node.nodeSize, to);
          for (var i = 0; i < toRemove.length; i++) {
            var style = toRemove[i], found$1 = (void 0);
            for (var j = 0; j < matched.length; j++) {
              var m = matched[j];
              if (m.step == step - 1 && style.eq(matched[j].style)) { found$1 = m; }
            }
            if (found$1) {
              found$1.to = end;
              found$1.step = step;
            } else {
              matched.push({style: style, from: Math.max(pos, from), to: end, step: step});
            }
          }
        }
      });
      matched.forEach(function (m) { return this$1$1.step(new RemoveMarkStep(m.from, m.to, m.style)); });
      return this
    };

    // :: (number, NodeType, ?ContentMatch) → this
    // Removes all marks and nodes from the content of the node at `pos`
    // that don't match the given new parent node type. Accepts an
    // optional starting [content match](#model.ContentMatch) as third
    // argument.
    Transform.prototype.clearIncompatible = function(pos, parentType, match) {
      if ( match === void 0 ) match = parentType.contentMatch;

      var node = this.doc.nodeAt(pos);
      var delSteps = [], cur = pos + 1;
      for (var i = 0; i < node.childCount; i++) {
        var child = node.child(i), end = cur + child.nodeSize;
        var allowed = match.matchType(child.type, child.attrs);
        if (!allowed) {
          delSteps.push(new ReplaceStep(cur, end, Slice.empty));
        } else {
          match = allowed;
          for (var j = 0; j < child.marks.length; j++) { if (!parentType.allowsMarkType(child.marks[j].type))
            { this.step(new RemoveMarkStep(cur, end, child.marks[j])); } }
        }
        cur = end;
      }
      if (!match.validEnd) {
        var fill = match.fillBefore(Fragment.empty, true);
        this.replace(cur, cur, new Slice(fill, 0, 0));
      }
      for (var i$1 = delSteps.length - 1; i$1 >= 0; i$1--) { this.step(delSteps[i$1]); }
      return this
    };

    // :: (Node, number, ?number, ?Slice) → ?Step
    // ‘Fit’ a slice into a given position in the document, producing a
    // [step](#transform.Step) that inserts it. Will return null if
    // there's no meaningful way to insert the slice here, or inserting it
    // would be a no-op (an empty slice over an empty range).
    function replaceStep(doc, from, to, slice) {
      if ( to === void 0 ) to = from;
      if ( slice === void 0 ) slice = Slice.empty;

      if (from == to && !slice.size) { return null }

      var $from = doc.resolve(from), $to = doc.resolve(to);
      // Optimization -- avoid work if it's obvious that it's not needed.
      if (fitsTrivially($from, $to, slice)) { return new ReplaceStep(from, to, slice) }
      return new Fitter($from, $to, slice).fit()
    }

    // :: (number, ?number, ?Slice) → this
    // Replace the part of the document between `from` and `to` with the
    // given `slice`.
    Transform.prototype.replace = function(from, to, slice) {
      if ( to === void 0 ) to = from;
      if ( slice === void 0 ) slice = Slice.empty;

      var step = replaceStep(this.doc, from, to, slice);
      if (step) { this.step(step); }
      return this
    };

    // :: (number, number, union<Fragment, Node, [Node]>) → this
    // Replace the given range with the given content, which may be a
    // fragment, node, or array of nodes.
    Transform.prototype.replaceWith = function(from, to, content) {
      return this.replace(from, to, new Slice(Fragment.from(content), 0, 0))
    };

    // :: (number, number) → this
    // Delete the content between the given positions.
    Transform.prototype.delete = function(from, to) {
      return this.replace(from, to, Slice.empty)
    };

    // :: (number, union<Fragment, Node, [Node]>) → this
    // Insert the given content at the given position.
    Transform.prototype.insert = function(pos, content) {
      return this.replaceWith(pos, pos, content)
    };

    function fitsTrivially($from, $to, slice) {
      return !slice.openStart && !slice.openEnd && $from.start() == $to.start() &&
        $from.parent.canReplace($from.index(), $to.index(), slice.content)
    }

    // Algorithm for 'placing' the elements of a slice into a gap:
    //
    // We consider the content of each node that is open to the left to be
    // independently placeable. I.e. in <p("foo"), p("bar")>, when the
    // paragraph on the left is open, "foo" can be placed (somewhere on
    // the left side of the replacement gap) independently from p("bar").
    //
    // This class tracks the state of the placement progress in the
    // following properties:
    //
    //  - `frontier` holds a stack of `{type, match}` objects that
    //    represent the open side of the replacement. It starts at
    //    `$from`, then moves forward as content is placed, and is finally
    //    reconciled with `$to`.
    //
    //  - `unplaced` is a slice that represents the content that hasn't
    //    been placed yet.
    //
    //  - `placed` is a fragment of placed content. Its open-start value
    //    is implicit in `$from`, and its open-end value in `frontier`.
    var Fitter = function Fitter($from, $to, slice) {
      this.$to = $to;
      this.$from = $from;
      this.unplaced = slice;

      this.frontier = [];
      for (var i = 0; i <= $from.depth; i++) {
        var node = $from.node(i);
        this.frontier.push({
          type: node.type,
          match: node.contentMatchAt($from.indexAfter(i))
        });
      }

      this.placed = Fragment.empty;
      for (var i$1 = $from.depth; i$1 > 0; i$1--)
        { this.placed = Fragment.from($from.node(i$1).copy(this.placed)); }
    };

    var prototypeAccessors$1$2 = { depth: { configurable: true } };

    prototypeAccessors$1$2.depth.get = function () { return this.frontier.length - 1 };

    Fitter.prototype.fit = function fit () {
      // As long as there's unplaced content, try to place some of it.
      // If that fails, either increase the open score of the unplaced
      // slice, or drop nodes from it, and then try again.
      while (this.unplaced.size) {
        var fit = this.findFittable();
        if (fit) { this.placeNodes(fit); }
        else { this.openMore() || this.dropNode(); }
      }
      // When there's inline content directly after the frontier _and_
      // directly after `this.$to`, we must generate a `ReplaceAround`
      // step that pulls that content into the node after the frontier.
      // That means the fitting must be done to the end of the textblock
      // node after `this.$to`, not `this.$to` itself.
      var moveInline = this.mustMoveInline(), placedSize = this.placed.size - this.depth - this.$from.depth;
      var $from = this.$from, $to = this.close(moveInline < 0 ? this.$to : $from.doc.resolve(moveInline));
      if (!$to) { return null }

      // If closing to `$to` succeeded, create a step
      var content = this.placed, openStart = $from.depth, openEnd = $to.depth;
      while (openStart && openEnd && content.childCount == 1) { // Normalize by dropping open parent nodes
        content = content.firstChild.content;
        openStart--; openEnd--;
      }
      var slice = new Slice(content, openStart, openEnd);
      if (moveInline > -1)
        { return new ReplaceAroundStep($from.pos, moveInline, this.$to.pos, this.$to.end(), slice, placedSize) }
      if (slice.size || $from.pos != this.$to.pos) // Don't generate no-op steps
        { return new ReplaceStep($from.pos, $to.pos, slice) }
    };

    // Find a position on the start spine of `this.unplaced` that has
    // content that can be moved somewhere on the frontier. Returns two
    // depths, one for the slice and one for the frontier.
    Fitter.prototype.findFittable = function findFittable () {
      // Only try wrapping nodes (pass 2) after finding a place without
      // wrapping failed.
      for (var pass = 1; pass <= 2; pass++) {
        for (var sliceDepth = this.unplaced.openStart; sliceDepth >= 0; sliceDepth--) {
          var fragment = (void 0), parent = (void 0);
          if (sliceDepth) {
            parent = contentAt(this.unplaced.content, sliceDepth - 1).firstChild;
            fragment = parent.content;
          } else {
            fragment = this.unplaced.content;
          }
          var first = fragment.firstChild;
          for (var frontierDepth = this.depth; frontierDepth >= 0; frontierDepth--) {
            var ref = this.frontier[frontierDepth];
              var type = ref.type;
              var match = ref.match;
              var wrap = (void 0), inject = (void 0);
            // In pass 1, if the next node matches, or there is no next
            // node but the parents look compatible, we've found a
            // place.
            if (pass == 1 && (first ? match.matchType(first.type) || (inject = match.fillBefore(Fragment.from(first), false))
                              : type.compatibleContent(parent.type)))
              { return {sliceDepth: sliceDepth, frontierDepth: frontierDepth, parent: parent, inject: inject} }
            // In pass 2, look for a set of wrapping nodes that make
            // `first` fit here.
            else if (pass == 2 && first && (wrap = match.findWrapping(first.type)))
              { return {sliceDepth: sliceDepth, frontierDepth: frontierDepth, parent: parent, wrap: wrap} }
            // Don't continue looking further up if the parent node
            // would fit here.
            if (parent && match.matchType(parent.type)) { break }
          }
        }
      }
    };

    Fitter.prototype.openMore = function openMore () {
      var ref = this.unplaced;
        var content = ref.content;
        var openStart = ref.openStart;
        var openEnd = ref.openEnd;
      var inner = contentAt(content, openStart);
      if (!inner.childCount || inner.firstChild.isLeaf) { return false }
      this.unplaced = new Slice(content, openStart + 1,
                                Math.max(openEnd, inner.size + openStart >= content.size - openEnd ? openStart + 1 : 0));
      return true
    };

    Fitter.prototype.dropNode = function dropNode () {
      var ref = this.unplaced;
        var content = ref.content;
        var openStart = ref.openStart;
        var openEnd = ref.openEnd;
      var inner = contentAt(content, openStart);
      if (inner.childCount <= 1 && openStart > 0) {
        var openAtEnd = content.size - openStart <= openStart + inner.size;
        this.unplaced = new Slice(dropFromFragment(content, openStart - 1, 1), openStart - 1,
                                  openAtEnd ? openStart - 1 : openEnd);
      } else {
        this.unplaced = new Slice(dropFromFragment(content, openStart, 1), openStart, openEnd);
      }
    };

    // : ({sliceDepth: number, frontierDepth: number, parent: ?Node, wrap: ?[NodeType], inject: ?Fragment})
    // Move content from the unplaced slice at `sliceDepth` to the
    // frontier node at `frontierDepth`. Close that frontier node when
    // applicable.
    Fitter.prototype.placeNodes = function placeNodes (ref) {
        var sliceDepth = ref.sliceDepth;
        var frontierDepth = ref.frontierDepth;
        var parent = ref.parent;
        var inject = ref.inject;
        var wrap = ref.wrap;

      while (this.depth > frontierDepth) { this.closeFrontierNode(); }
      if (wrap) { for (var i = 0; i < wrap.length; i++) { this.openFrontierNode(wrap[i]); } }

      var slice = this.unplaced, fragment = parent ? parent.content : slice.content;
      var openStart = slice.openStart - sliceDepth;
      var taken = 0, add = [];
      var ref$1 = this.frontier[frontierDepth];
        var match = ref$1.match;
        var type = ref$1.type;
      if (inject) {
        for (var i$1 = 0; i$1 < inject.childCount; i$1++) { add.push(inject.child(i$1)); }
        match = match.matchFragment(inject);
      }
      // Computes the amount of (end) open nodes at the end of the
      // fragment. When 0, the parent is open, but no more. When
      // negative, nothing is open.
      var openEndCount = (fragment.size + sliceDepth) - (slice.content.size - slice.openEnd);
      // Scan over the fragment, fitting as many child nodes as
      // possible.
      while (taken < fragment.childCount) {
        var next = fragment.child(taken), matches = match.matchType(next.type);
        if (!matches) { break }
        taken++;
        if (taken > 1 || openStart == 0 || next.content.size) { // Drop empty open nodes
          match = matches;
          add.push(closeNodeStart(next.mark(type.allowedMarks(next.marks)), taken == 1 ? openStart : 0,
                                  taken == fragment.childCount ? openEndCount : -1));
        }
      }
      var toEnd = taken == fragment.childCount;
      if (!toEnd) { openEndCount = -1; }

      this.placed = addToFragment(this.placed, frontierDepth, Fragment.from(add));
      this.frontier[frontierDepth].match = match;

      // If the parent types match, and the entire node was moved, and
      // it's not open, close this frontier node right away.
      if (toEnd && openEndCount < 0 && parent && parent.type == this.frontier[this.depth].type && this.frontier.length > 1)
        { this.closeFrontierNode(); }

      // Add new frontier nodes for any open nodes at the end.
      for (var i$2 = 0, cur = fragment; i$2 < openEndCount; i$2++) {
        var node = cur.lastChild;
        this.frontier.push({type: node.type, match: node.contentMatchAt(node.childCount)});
        cur = node.content;
      }

      // Update `this.unplaced`. Drop the entire node from which we
      // placed it we got to its end, otherwise just drop the placed
      // nodes.
      this.unplaced = !toEnd ? new Slice(dropFromFragment(slice.content, sliceDepth, taken), slice.openStart, slice.openEnd)
        : sliceDepth == 0 ? Slice.empty
        : new Slice(dropFromFragment(slice.content, sliceDepth - 1, 1),
                    sliceDepth - 1, openEndCount < 0 ? slice.openEnd : sliceDepth - 1);
    };

    Fitter.prototype.mustMoveInline = function mustMoveInline () {
      if (!this.$to.parent.isTextblock || this.$to.end() == this.$to.pos) { return -1 }
      var top = this.frontier[this.depth], level;
      if (!top.type.isTextblock || !contentAfterFits(this.$to, this.$to.depth, top.type, top.match, false) ||
          (this.$to.depth == this.depth && (level = this.findCloseLevel(this.$to)) && level.depth == this.depth)) { return -1 }

      var ref = this.$to;
        var depth = ref.depth;
        var after = this.$to.after(depth);
      while (depth > 1 && after == this.$to.end(--depth)) { ++after; }
      return after
    };

    Fitter.prototype.findCloseLevel = function findCloseLevel ($to) {
      scan: for (var i = Math.min(this.depth, $to.depth); i >= 0; i--) {
        var ref = this.frontier[i];
          var match = ref.match;
          var type = ref.type;
        var dropInner = i < $to.depth && $to.end(i + 1) == $to.pos + ($to.depth - (i + 1));
        var fit = contentAfterFits($to, i, type, match, dropInner);
        if (!fit) { continue }
        for (var d = i - 1; d >= 0; d--) {
          var ref$1 = this.frontier[d];
            var match$1 = ref$1.match;
            var type$1 = ref$1.type;
          var matches = contentAfterFits($to, d, type$1, match$1, true);
          if (!matches || matches.childCount) { continue scan }
        }
        return {depth: i, fit: fit, move: dropInner ? $to.doc.resolve($to.after(i + 1)) : $to}
      }
    };

    Fitter.prototype.close = function close ($to) {
      var close = this.findCloseLevel($to);
      if (!close) { return null }

      while (this.depth > close.depth) { this.closeFrontierNode(); }
      if (close.fit.childCount) { this.placed = addToFragment(this.placed, close.depth, close.fit); }
      $to = close.move;
      for (var d = close.depth + 1; d <= $to.depth; d++) {
        var node = $to.node(d), add = node.type.contentMatch.fillBefore(node.content, true, $to.index(d));
        this.openFrontierNode(node.type, node.attrs, add);
      }
      return $to
    };

    Fitter.prototype.openFrontierNode = function openFrontierNode (type, attrs, content) {
      var top = this.frontier[this.depth];
      top.match = top.match.matchType(type);
      this.placed = addToFragment(this.placed, this.depth, Fragment.from(type.create(attrs, content)));
      this.frontier.push({type: type, match: type.contentMatch});
    };

    Fitter.prototype.closeFrontierNode = function closeFrontierNode () {
      var open = this.frontier.pop();
      var add = open.match.fillBefore(Fragment.empty, true);
      if (add.childCount) { this.placed = addToFragment(this.placed, this.frontier.length, add); }
    };

    Object.defineProperties( Fitter.prototype, prototypeAccessors$1$2 );

    function dropFromFragment(fragment, depth, count) {
      if (depth == 0) { return fragment.cutByIndex(count) }
      return fragment.replaceChild(0, fragment.firstChild.copy(dropFromFragment(fragment.firstChild.content, depth - 1, count)))
    }

    function addToFragment(fragment, depth, content) {
      if (depth == 0) { return fragment.append(content) }
      return fragment.replaceChild(fragment.childCount - 1,
                                   fragment.lastChild.copy(addToFragment(fragment.lastChild.content, depth - 1, content)))
    }

    function contentAt(fragment, depth) {
      for (var i = 0; i < depth; i++) { fragment = fragment.firstChild.content; }
      return fragment
    }

    function closeNodeStart(node, openStart, openEnd) {
      if (openStart <= 0) { return node }
      var frag = node.content;
      if (openStart > 1)
        { frag = frag.replaceChild(0, closeNodeStart(frag.firstChild, openStart - 1, frag.childCount == 1 ? openEnd - 1 : 0)); }
      if (openStart > 0) {
        frag = node.type.contentMatch.fillBefore(frag).append(frag);
        if (openEnd <= 0) { frag = frag.append(node.type.contentMatch.matchFragment(frag).fillBefore(Fragment.empty, true)); }
      }
      return node.copy(frag)
    }

    function contentAfterFits($to, depth, type, match, open) {
      var node = $to.node(depth), index = open ? $to.indexAfter(depth) : $to.index(depth);
      if (index == node.childCount && !type.compatibleContent(node.type)) { return null }
      var fit = match.fillBefore(node.content, true, index);
      return fit && !invalidMarks(type, node.content, index) ? fit : null
    }

    function invalidMarks(type, fragment, start) {
      for (var i = start; i < fragment.childCount; i++)
        { if (!type.allowsMarks(fragment.child(i).marks)) { return true } }
      return false
    }

    // :: (number, number, Slice) → this
    // Replace a range of the document with a given slice, using `from`,
    // `to`, and the slice's [`openStart`](#model.Slice.openStart) property
    // as hints, rather than fixed start and end points. This method may
    // grow the replaced area or close open nodes in the slice in order to
    // get a fit that is more in line with WYSIWYG expectations, by
    // dropping fully covered parent nodes of the replaced region when
    // they are marked [non-defining](#model.NodeSpec.defining), or
    // including an open parent node from the slice that _is_ marked as
    // [defining](#model.NodeSpec.defining).
    //
    // This is the method, for example, to handle paste. The similar
    // [`replace`](#transform.Transform.replace) method is a more
    // primitive tool which will _not_ move the start and end of its given
    // range, and is useful in situations where you need more precise
    // control over what happens.
    Transform.prototype.replaceRange = function(from, to, slice) {
      if (!slice.size) { return this.deleteRange(from, to) }

      var $from = this.doc.resolve(from), $to = this.doc.resolve(to);
      if (fitsTrivially($from, $to, slice))
        { return this.step(new ReplaceStep(from, to, slice)) }

      var targetDepths = coveredDepths($from, this.doc.resolve(to));
      // Can't replace the whole document, so remove 0 if it's present
      if (targetDepths[targetDepths.length - 1] == 0) { targetDepths.pop(); }
      // Negative numbers represent not expansion over the whole node at
      // that depth, but replacing from $from.before(-D) to $to.pos.
      var preferredTarget = -($from.depth + 1);
      targetDepths.unshift(preferredTarget);
      // This loop picks a preferred target depth, if one of the covering
      // depths is not outside of a defining node, and adds negative
      // depths for any depth that has $from at its start and does not
      // cross a defining node.
      for (var d = $from.depth, pos = $from.pos - 1; d > 0; d--, pos--) {
        var spec = $from.node(d).type.spec;
        if (spec.defining || spec.isolating) { break }
        if (targetDepths.indexOf(d) > -1) { preferredTarget = d; }
        else if ($from.before(d) == pos) { targetDepths.splice(1, 0, -d); }
      }
      // Try to fit each possible depth of the slice into each possible
      // target depth, starting with the preferred depths.
      var preferredTargetIndex = targetDepths.indexOf(preferredTarget);

      var leftNodes = [], preferredDepth = slice.openStart;
      for (var content = slice.content, i = 0;; i++) {
        var node = content.firstChild;
        leftNodes.push(node);
        if (i == slice.openStart) { break }
        content = node.content;
      }
      // Back up if the node directly above openStart, or the node above
      // that separated only by a non-defining textblock node, is defining.
      if (preferredDepth > 0 && leftNodes[preferredDepth - 1].type.spec.defining &&
          $from.node(preferredTargetIndex).type != leftNodes[preferredDepth - 1].type)
        { preferredDepth -= 1; }
      else if (preferredDepth >= 2 && leftNodes[preferredDepth - 1].isTextblock && leftNodes[preferredDepth - 2].type.spec.defining &&
               $from.node(preferredTargetIndex).type != leftNodes[preferredDepth - 2].type)
        { preferredDepth -= 2; }

      for (var j = slice.openStart; j >= 0; j--) {
        var openDepth = (j + preferredDepth + 1) % (slice.openStart + 1);
        var insert = leftNodes[openDepth];
        if (!insert) { continue }
        for (var i$1 = 0; i$1 < targetDepths.length; i$1++) {
          // Loop over possible expansion levels, starting with the
          // preferred one
          var targetDepth = targetDepths[(i$1 + preferredTargetIndex) % targetDepths.length], expand = true;
          if (targetDepth < 0) { expand = false; targetDepth = -targetDepth; }
          var parent = $from.node(targetDepth - 1), index = $from.index(targetDepth - 1);
          if (parent.canReplaceWith(index, index, insert.type, insert.marks))
            { return this.replace($from.before(targetDepth), expand ? $to.after(targetDepth) : to,
                                new Slice(closeFragment(slice.content, 0, slice.openStart, openDepth),
                                          openDepth, slice.openEnd)) }
        }
      }

      var startSteps = this.steps.length;
      for (var i$2 = targetDepths.length - 1; i$2 >= 0; i$2--) {
        this.replace(from, to, slice);
        if (this.steps.length > startSteps) { break }
        var depth = targetDepths[i$2];
        if (depth < 0) { continue }
        from = $from.before(depth); to = $to.after(depth);
      }
      return this
    };

    function closeFragment(fragment, depth, oldOpen, newOpen, parent) {
      if (depth < oldOpen) {
        var first = fragment.firstChild;
        fragment = fragment.replaceChild(0, first.copy(closeFragment(first.content, depth + 1, oldOpen, newOpen, first)));
      }
      if (depth > newOpen) {
        var match = parent.contentMatchAt(0);
        var start = match.fillBefore(fragment).append(fragment);
        fragment = start.append(match.matchFragment(start).fillBefore(Fragment.empty, true));
      }
      return fragment
    }

    // :: (number, number, Node) → this
    // Replace the given range with a node, but use `from` and `to` as
    // hints, rather than precise positions. When from and to are the same
    // and are at the start or end of a parent node in which the given
    // node doesn't fit, this method may _move_ them out towards a parent
    // that does allow the given node to be placed. When the given range
    // completely covers a parent node, this method may completely replace
    // that parent node.
    Transform.prototype.replaceRangeWith = function(from, to, node) {
      if (!node.isInline && from == to && this.doc.resolve(from).parent.content.size) {
        var point = insertPoint(this.doc, from, node.type);
        if (point != null) { from = to = point; }
      }
      return this.replaceRange(from, to, new Slice(Fragment.from(node), 0, 0))
    };

    // :: (number, number) → this
    // Delete the given range, expanding it to cover fully covered
    // parent nodes until a valid replace is found.
    Transform.prototype.deleteRange = function(from, to) {
      var $from = this.doc.resolve(from), $to = this.doc.resolve(to);
      var covered = coveredDepths($from, $to);
      for (var i = 0; i < covered.length; i++) {
        var depth = covered[i], last = i == covered.length - 1;
        if ((last && depth == 0) || $from.node(depth).type.contentMatch.validEnd)
          { return this.delete($from.start(depth), $to.end(depth)) }
        if (depth > 0 && (last || $from.node(depth - 1).canReplace($from.index(depth - 1), $to.indexAfter(depth - 1))))
          { return this.delete($from.before(depth), $to.after(depth)) }
      }
      for (var d = 1; d <= $from.depth && d <= $to.depth; d++) {
        if (from - $from.start(d) == $from.depth - d && to > $from.end(d) && $to.end(d) - to != $to.depth - d)
          { return this.delete($from.before(d), to) }
      }
      return this.delete(from, to)
    };

    // : (ResolvedPos, ResolvedPos) → [number]
    // Returns an array of all depths for which $from - $to spans the
    // whole content of the nodes at that depth.
    function coveredDepths($from, $to) {
      var result = [], minDepth = Math.min($from.depth, $to.depth);
      for (var d = minDepth; d >= 0; d--) {
        var start = $from.start(d);
        if (start < $from.pos - ($from.depth - d) ||
            $to.end(d) > $to.pos + ($to.depth - d) ||
            $from.node(d).type.spec.isolating ||
            $to.node(d).type.spec.isolating) { break }
        if (start == $to.start(d)) { result.push(d); }
      }
      return result
    }

    var classesById = Object.create(null);

    // ::- Superclass for editor selections. Every selection type should
    // extend this. Should not be instantiated directly.
    var Selection = function Selection($anchor, $head, ranges) {
      // :: [SelectionRange]
      // The ranges covered by the selection.
      this.ranges = ranges || [new SelectionRange($anchor.min($head), $anchor.max($head))];
      // :: ResolvedPos
      // The resolved anchor of the selection (the side that stays in
      // place when the selection is modified).
      this.$anchor = $anchor;
      // :: ResolvedPos
      // The resolved head of the selection (the side that moves when
      // the selection is modified).
      this.$head = $head;
    };

    var prototypeAccessors$3 = { anchor: { configurable: true },head: { configurable: true },from: { configurable: true },to: { configurable: true },$from: { configurable: true },$to: { configurable: true },empty: { configurable: true } };

    // :: number
    // The selection's anchor, as an unresolved position.
    prototypeAccessors$3.anchor.get = function () { return this.$anchor.pos };

    // :: number
    // The selection's head.
    prototypeAccessors$3.head.get = function () { return this.$head.pos };

    // :: number
    // The lower bound of the selection's main range.
    prototypeAccessors$3.from.get = function () { return this.$from.pos };

    // :: number
    // The upper bound of the selection's main range.
    prototypeAccessors$3.to.get = function () { return this.$to.pos };

    // :: ResolvedPos
    // The resolved lowerbound of the selection's main range.
    prototypeAccessors$3.$from.get = function () {
      return this.ranges[0].$from
    };

    // :: ResolvedPos
    // The resolved upper bound of the selection's main range.
    prototypeAccessors$3.$to.get = function () {
      return this.ranges[0].$to
    };

    // :: bool
    // Indicates whether the selection contains any content.
    prototypeAccessors$3.empty.get = function () {
      var ranges = this.ranges;
      for (var i = 0; i < ranges.length; i++)
        { if (ranges[i].$from.pos != ranges[i].$to.pos) { return false } }
      return true
    };

    // eq:: (Selection) → bool
    // Test whether the selection is the same as another selection.

    // map:: (doc: Node, mapping: Mappable) → Selection
    // Map this selection through a [mappable](#transform.Mappable) thing. `doc`
    // should be the new document to which we are mapping.

    // :: () → Slice
    // Get the content of this selection as a slice.
    Selection.prototype.content = function content () {
      return this.$from.node(0).slice(this.from, this.to, true)
    };

    // :: (Transaction, ?Slice)
    // Replace the selection with a slice or, if no slice is given,
    // delete the selection. Will append to the given transaction.
    Selection.prototype.replace = function replace (tr, content) {
        if ( content === void 0 ) content = Slice.empty;

      // Put the new selection at the position after the inserted
      // content. When that ended in an inline node, search backwards,
      // to get the position after that node. If not, search forward.
      var lastNode = content.content.lastChild, lastParent = null;
      for (var i = 0; i < content.openEnd; i++) {
        lastParent = lastNode;
        lastNode = lastNode.lastChild;
      }

      var mapFrom = tr.steps.length, ranges = this.ranges;
      for (var i$1 = 0; i$1 < ranges.length; i$1++) {
        var ref = ranges[i$1];
          var $from = ref.$from;
          var $to = ref.$to;
          var mapping = tr.mapping.slice(mapFrom);
        tr.replaceRange(mapping.map($from.pos), mapping.map($to.pos), i$1 ? Slice.empty : content);
        if (i$1 == 0)
          { selectionToInsertionEnd(tr, mapFrom, (lastNode ? lastNode.isInline : lastParent && lastParent.isTextblock) ? -1 : 1); }
      }
    };

    // :: (Transaction, Node)
    // Replace the selection with the given node, appending the changes
    // to the given transaction.
    Selection.prototype.replaceWith = function replaceWith (tr, node) {
      var mapFrom = tr.steps.length, ranges = this.ranges;
      for (var i = 0; i < ranges.length; i++) {
        var ref = ranges[i];
          var $from = ref.$from;
          var $to = ref.$to;
          var mapping = tr.mapping.slice(mapFrom);
        var from = mapping.map($from.pos), to = mapping.map($to.pos);
        if (i) {
          tr.deleteRange(from, to);
        } else {
          tr.replaceRangeWith(from, to, node);
          selectionToInsertionEnd(tr, mapFrom, node.isInline ? -1 : 1);
        }
      }
    };

    // toJSON:: () → Object
    // Convert the selection to a JSON representation. When implementing
    // this for a custom selection class, make sure to give the object a
    // `type` property whose value matches the ID under which you
    // [registered](#state.Selection^jsonID) your class.

    // :: (ResolvedPos, number, ?bool) → ?Selection
    // Find a valid cursor or leaf node selection starting at the given
    // position and searching back if `dir` is negative, and forward if
    // positive. When `textOnly` is true, only consider cursor
    // selections. Will return null when no valid selection position is
    // found.
    Selection.findFrom = function findFrom ($pos, dir, textOnly) {
      var inner = $pos.parent.inlineContent ? new TextSelection($pos)
          : findSelectionIn($pos.node(0), $pos.parent, $pos.pos, $pos.index(), dir, textOnly);
      if (inner) { return inner }

      for (var depth = $pos.depth - 1; depth >= 0; depth--) {
        var found = dir < 0
            ? findSelectionIn($pos.node(0), $pos.node(depth), $pos.before(depth + 1), $pos.index(depth), dir, textOnly)
            : findSelectionIn($pos.node(0), $pos.node(depth), $pos.after(depth + 1), $pos.index(depth) + 1, dir, textOnly);
        if (found) { return found }
      }
    };

    // :: (ResolvedPos, ?number) → Selection
    // Find a valid cursor or leaf node selection near the given
    // position. Searches forward first by default, but if `bias` is
    // negative, it will search backwards first.
    Selection.near = function near ($pos, bias) {
        if ( bias === void 0 ) bias = 1;

      return this.findFrom($pos, bias) || this.findFrom($pos, -bias) || new AllSelection($pos.node(0))
    };

    // :: (Node) → Selection
    // Find the cursor or leaf node selection closest to the start of
    // the given document. Will return an
    // [`AllSelection`](#state.AllSelection) if no valid position
    // exists.
    Selection.atStart = function atStart (doc) {
      return findSelectionIn(doc, doc, 0, 0, 1) || new AllSelection(doc)
    };

    // :: (Node) → Selection
    // Find the cursor or leaf node selection closest to the end of the
    // given document.
    Selection.atEnd = function atEnd (doc) {
      return findSelectionIn(doc, doc, doc.content.size, doc.childCount, -1) || new AllSelection(doc)
    };

    // :: (Node, Object) → Selection
    // Deserialize the JSON representation of a selection. Must be
    // implemented for custom classes (as a static class method).
    Selection.fromJSON = function fromJSON (doc, json) {
      if (!json || !json.type) { throw new RangeError("Invalid input for Selection.fromJSON") }
      var cls = classesById[json.type];
      if (!cls) { throw new RangeError(("No selection type " + (json.type) + " defined")) }
      return cls.fromJSON(doc, json)
    };

    // :: (string, constructor<Selection>)
    // To be able to deserialize selections from JSON, custom selection
    // classes must register themselves with an ID string, so that they
    // can be disambiguated. Try to pick something that's unlikely to
    // clash with classes from other modules.
    Selection.jsonID = function jsonID (id, selectionClass) {
      if (id in classesById) { throw new RangeError("Duplicate use of selection JSON ID " + id) }
      classesById[id] = selectionClass;
      selectionClass.prototype.jsonID = id;
      return selectionClass
    };

    // :: () → SelectionBookmark
    // Get a [bookmark](#state.SelectionBookmark) for this selection,
    // which is a value that can be mapped without having access to a
    // current document, and later resolved to a real selection for a
    // given document again. (This is used mostly by the history to
    // track and restore old selections.) The default implementation of
    // this method just converts the selection to a text selection and
    // returns the bookmark for that.
    Selection.prototype.getBookmark = function getBookmark () {
      return TextSelection.between(this.$anchor, this.$head).getBookmark()
    };

    Object.defineProperties( Selection.prototype, prototypeAccessors$3 );

    // :: bool
    // Controls whether, when a selection of this type is active in the
    // browser, the selected range should be visible to the user. Defaults
    // to `true`.
    Selection.prototype.visible = true;

    // SelectionBookmark:: interface
    // A lightweight, document-independent representation of a selection.
    // You can define a custom bookmark type for a custom selection class
    // to make the history handle it well.
    //
    //   map:: (mapping: Mapping) → SelectionBookmark
    //   Map the bookmark through a set of changes.
    //
    //   resolve:: (doc: Node) → Selection
    //   Resolve the bookmark to a real selection again. This may need to
    //   do some error checking and may fall back to a default (usually
    //   [`TextSelection.between`](#state.TextSelection^between)) if
    //   mapping made the bookmark invalid.

    // ::- Represents a selected range in a document.
    var SelectionRange = function SelectionRange($from, $to) {
      // :: ResolvedPos
      // The lower bound of the range.
      this.$from = $from;
      // :: ResolvedPos
      // The upper bound of the range.
      this.$to = $to;
    };

    // ::- A text selection represents a classical editor selection, with
    // a head (the moving side) and anchor (immobile side), both of which
    // point into textblock nodes. It can be empty (a regular cursor
    // position).
    var TextSelection = /*@__PURE__*/(function (Selection) {
      function TextSelection($anchor, $head) {
        if ( $head === void 0 ) $head = $anchor;

        Selection.call(this, $anchor, $head);
      }

      if ( Selection ) TextSelection.__proto__ = Selection;
      TextSelection.prototype = Object.create( Selection && Selection.prototype );
      TextSelection.prototype.constructor = TextSelection;

      var prototypeAccessors$1 = { $cursor: { configurable: true } };

      // :: ?ResolvedPos
      // Returns a resolved position if this is a cursor selection (an
      // empty text selection), and null otherwise.
      prototypeAccessors$1.$cursor.get = function () { return this.$anchor.pos == this.$head.pos ? this.$head : null };

      TextSelection.prototype.map = function map (doc, mapping) {
        var $head = doc.resolve(mapping.map(this.head));
        if (!$head.parent.inlineContent) { return Selection.near($head) }
        var $anchor = doc.resolve(mapping.map(this.anchor));
        return new TextSelection($anchor.parent.inlineContent ? $anchor : $head, $head)
      };

      TextSelection.prototype.replace = function replace (tr, content) {
        if ( content === void 0 ) content = Slice.empty;

        Selection.prototype.replace.call(this, tr, content);
        if (content == Slice.empty) {
          var marks = this.$from.marksAcross(this.$to);
          if (marks) { tr.ensureMarks(marks); }
        }
      };

      TextSelection.prototype.eq = function eq (other) {
        return other instanceof TextSelection && other.anchor == this.anchor && other.head == this.head
      };

      TextSelection.prototype.getBookmark = function getBookmark () {
        return new TextBookmark(this.anchor, this.head)
      };

      TextSelection.prototype.toJSON = function toJSON () {
        return {type: "text", anchor: this.anchor, head: this.head}
      };

      TextSelection.fromJSON = function fromJSON (doc, json) {
        if (typeof json.anchor != "number" || typeof json.head != "number")
          { throw new RangeError("Invalid input for TextSelection.fromJSON") }
        return new TextSelection(doc.resolve(json.anchor), doc.resolve(json.head))
      };

      // :: (Node, number, ?number) → TextSelection
      // Create a text selection from non-resolved positions.
      TextSelection.create = function create (doc, anchor, head) {
        if ( head === void 0 ) head = anchor;

        var $anchor = doc.resolve(anchor);
        return new this($anchor, head == anchor ? $anchor : doc.resolve(head))
      };

      // :: (ResolvedPos, ResolvedPos, ?number) → Selection
      // Return a text selection that spans the given positions or, if
      // they aren't text positions, find a text selection near them.
      // `bias` determines whether the method searches forward (default)
      // or backwards (negative number) first. Will fall back to calling
      // [`Selection.near`](#state.Selection^near) when the document
      // doesn't contain a valid text position.
      TextSelection.between = function between ($anchor, $head, bias) {
        var dPos = $anchor.pos - $head.pos;
        if (!bias || dPos) { bias = dPos >= 0 ? 1 : -1; }
        if (!$head.parent.inlineContent) {
          var found = Selection.findFrom($head, bias, true) || Selection.findFrom($head, -bias, true);
          if (found) { $head = found.$head; }
          else { return Selection.near($head, bias) }
        }
        if (!$anchor.parent.inlineContent) {
          if (dPos == 0) {
            $anchor = $head;
          } else {
            $anchor = (Selection.findFrom($anchor, -bias, true) || Selection.findFrom($anchor, bias, true)).$anchor;
            if (($anchor.pos < $head.pos) != (dPos < 0)) { $anchor = $head; }
          }
        }
        return new TextSelection($anchor, $head)
      };

      Object.defineProperties( TextSelection.prototype, prototypeAccessors$1 );

      return TextSelection;
    }(Selection));

    Selection.jsonID("text", TextSelection);

    var TextBookmark = function TextBookmark(anchor, head) {
      this.anchor = anchor;
      this.head = head;
    };
    TextBookmark.prototype.map = function map (mapping) {
      return new TextBookmark(mapping.map(this.anchor), mapping.map(this.head))
    };
    TextBookmark.prototype.resolve = function resolve (doc) {
      return TextSelection.between(doc.resolve(this.anchor), doc.resolve(this.head))
    };

    // ::- A node selection is a selection that points at a single node.
    // All nodes marked [selectable](#model.NodeSpec.selectable) can be
    // the target of a node selection. In such a selection, `from` and
    // `to` point directly before and after the selected node, `anchor`
    // equals `from`, and `head` equals `to`..
    var NodeSelection = /*@__PURE__*/(function (Selection) {
      function NodeSelection($pos) {
        var node = $pos.nodeAfter;
        var $end = $pos.node(0).resolve($pos.pos + node.nodeSize);
        Selection.call(this, $pos, $end);
        // :: Node The selected node.
        this.node = node;
      }

      if ( Selection ) NodeSelection.__proto__ = Selection;
      NodeSelection.prototype = Object.create( Selection && Selection.prototype );
      NodeSelection.prototype.constructor = NodeSelection;

      NodeSelection.prototype.map = function map (doc, mapping) {
        var ref = mapping.mapResult(this.anchor);
        var deleted = ref.deleted;
        var pos = ref.pos;
        var $pos = doc.resolve(pos);
        if (deleted) { return Selection.near($pos) }
        return new NodeSelection($pos)
      };

      NodeSelection.prototype.content = function content () {
        return new Slice(Fragment.from(this.node), 0, 0)
      };

      NodeSelection.prototype.eq = function eq (other) {
        return other instanceof NodeSelection && other.anchor == this.anchor
      };

      NodeSelection.prototype.toJSON = function toJSON () {
        return {type: "node", anchor: this.anchor}
      };

      NodeSelection.prototype.getBookmark = function getBookmark () { return new NodeBookmark(this.anchor) };

      NodeSelection.fromJSON = function fromJSON (doc, json) {
        if (typeof json.anchor != "number")
          { throw new RangeError("Invalid input for NodeSelection.fromJSON") }
        return new NodeSelection(doc.resolve(json.anchor))
      };

      // :: (Node, number) → NodeSelection
      // Create a node selection from non-resolved positions.
      NodeSelection.create = function create (doc, from) {
        return new this(doc.resolve(from))
      };

      // :: (Node) → bool
      // Determines whether the given node may be selected as a node
      // selection.
      NodeSelection.isSelectable = function isSelectable (node) {
        return !node.isText && node.type.spec.selectable !== false
      };

      return NodeSelection;
    }(Selection));

    NodeSelection.prototype.visible = false;

    Selection.jsonID("node", NodeSelection);

    var NodeBookmark = function NodeBookmark(anchor) {
      this.anchor = anchor;
    };
    NodeBookmark.prototype.map = function map (mapping) {
      var ref = mapping.mapResult(this.anchor);
        var deleted = ref.deleted;
        var pos = ref.pos;
      return deleted ? new TextBookmark(pos, pos) : new NodeBookmark(pos)
    };
    NodeBookmark.prototype.resolve = function resolve (doc) {
      var $pos = doc.resolve(this.anchor), node = $pos.nodeAfter;
      if (node && NodeSelection.isSelectable(node)) { return new NodeSelection($pos) }
      return Selection.near($pos)
    };

    // ::- A selection type that represents selecting the whole document
    // (which can not necessarily be expressed with a text selection, when
    // there are for example leaf block nodes at the start or end of the
    // document).
    var AllSelection = /*@__PURE__*/(function (Selection) {
      function AllSelection(doc) {
        Selection.call(this, doc.resolve(0), doc.resolve(doc.content.size));
      }

      if ( Selection ) AllSelection.__proto__ = Selection;
      AllSelection.prototype = Object.create( Selection && Selection.prototype );
      AllSelection.prototype.constructor = AllSelection;

      AllSelection.prototype.replace = function replace (tr, content) {
        if ( content === void 0 ) content = Slice.empty;

        if (content == Slice.empty) {
          tr.delete(0, tr.doc.content.size);
          var sel = Selection.atStart(tr.doc);
          if (!sel.eq(tr.selection)) { tr.setSelection(sel); }
        } else {
          Selection.prototype.replace.call(this, tr, content);
        }
      };

      AllSelection.prototype.toJSON = function toJSON () { return {type: "all"} };

      AllSelection.fromJSON = function fromJSON (doc) { return new AllSelection(doc) };

      AllSelection.prototype.map = function map (doc) { return new AllSelection(doc) };

      AllSelection.prototype.eq = function eq (other) { return other instanceof AllSelection };

      AllSelection.prototype.getBookmark = function getBookmark () { return AllBookmark };

      return AllSelection;
    }(Selection));

    Selection.jsonID("all", AllSelection);

    var AllBookmark = {
      map: function map() { return this },
      resolve: function resolve(doc) { return new AllSelection(doc) }
    };

    // FIXME we'll need some awareness of text direction when scanning for selections

    // Try to find a selection inside the given node. `pos` points at the
    // position where the search starts. When `text` is true, only return
    // text selections.
    function findSelectionIn(doc, node, pos, index, dir, text) {
      if (node.inlineContent) { return TextSelection.create(doc, pos) }
      for (var i = index - (dir > 0 ? 0 : 1); dir > 0 ? i < node.childCount : i >= 0; i += dir) {
        var child = node.child(i);
        if (!child.isAtom) {
          var inner = findSelectionIn(doc, child, pos + dir, dir < 0 ? child.childCount : 0, dir, text);
          if (inner) { return inner }
        } else if (!text && NodeSelection.isSelectable(child)) {
          return NodeSelection.create(doc, pos - (dir < 0 ? child.nodeSize : 0))
        }
        pos += child.nodeSize * dir;
      }
    }

    function selectionToInsertionEnd(tr, startLen, bias) {
      var last = tr.steps.length - 1;
      if (last < startLen) { return }
      var step = tr.steps[last];
      if (!(step instanceof ReplaceStep || step instanceof ReplaceAroundStep)) { return }
      var map = tr.mapping.maps[last], end;
      map.forEach(function (_from, _to, _newFrom, newTo) { if (end == null) { end = newTo; } });
      tr.setSelection(Selection.near(tr.doc.resolve(end), bias));
    }

    var UPDATED_SEL = 1, UPDATED_MARKS = 2, UPDATED_SCROLL = 4;

    // ::- An editor state transaction, which can be applied to a state to
    // create an updated state. Use
    // [`EditorState.tr`](#state.EditorState.tr) to create an instance.
    //
    // Transactions track changes to the document (they are a subclass of
    // [`Transform`](#transform.Transform)), but also other state changes,
    // like selection updates and adjustments of the set of [stored
    // marks](#state.EditorState.storedMarks). In addition, you can store
    // metadata properties in a transaction, which are extra pieces of
    // information that client code or plugins can use to describe what a
    // transacion represents, so that they can update their [own
    // state](#state.StateField) accordingly.
    //
    // The [editor view](#view.EditorView) uses a few metadata properties:
    // it will attach a property `"pointer"` with the value `true` to
    // selection transactions directly caused by mouse or touch input, and
    // a `"uiEvent"` property of that may be `"paste"`, `"cut"`, or `"drop"`.
    var Transaction = /*@__PURE__*/(function (Transform) {
      function Transaction(state) {
        Transform.call(this, state.doc);
        // :: number
        // The timestamp associated with this transaction, in the same
        // format as `Date.now()`.
        this.time = Date.now();
        this.curSelection = state.selection;
        // The step count for which the current selection is valid.
        this.curSelectionFor = 0;
        // :: ?[Mark]
        // The stored marks set by this transaction, if any.
        this.storedMarks = state.storedMarks;
        // Bitfield to track which aspects of the state were updated by
        // this transaction.
        this.updated = 0;
        // Object used to store metadata properties for the transaction.
        this.meta = Object.create(null);
      }

      if ( Transform ) Transaction.__proto__ = Transform;
      Transaction.prototype = Object.create( Transform && Transform.prototype );
      Transaction.prototype.constructor = Transaction;

      var prototypeAccessors = { selection: { configurable: true },selectionSet: { configurable: true },storedMarksSet: { configurable: true },isGeneric: { configurable: true },scrolledIntoView: { configurable: true } };

      // :: Selection
      // The transaction's current selection. This defaults to the editor
      // selection [mapped](#state.Selection.map) through the steps in the
      // transaction, but can be overwritten with
      // [`setSelection`](#state.Transaction.setSelection).
      prototypeAccessors.selection.get = function () {
        if (this.curSelectionFor < this.steps.length) {
          this.curSelection = this.curSelection.map(this.doc, this.mapping.slice(this.curSelectionFor));
          this.curSelectionFor = this.steps.length;
        }
        return this.curSelection
      };

      // :: (Selection) → Transaction
      // Update the transaction's current selection. Will determine the
      // selection that the editor gets when the transaction is applied.
      Transaction.prototype.setSelection = function setSelection (selection) {
        if (selection.$from.doc != this.doc)
          { throw new RangeError("Selection passed to setSelection must point at the current document") }
        this.curSelection = selection;
        this.curSelectionFor = this.steps.length;
        this.updated = (this.updated | UPDATED_SEL) & ~UPDATED_MARKS;
        this.storedMarks = null;
        return this
      };

      // :: bool
      // Whether the selection was explicitly updated by this transaction.
      prototypeAccessors.selectionSet.get = function () {
        return (this.updated & UPDATED_SEL) > 0
      };

      // :: (?[Mark]) → Transaction
      // Set the current stored marks.
      Transaction.prototype.setStoredMarks = function setStoredMarks (marks) {
        this.storedMarks = marks;
        this.updated |= UPDATED_MARKS;
        return this
      };

      // :: ([Mark]) → Transaction
      // Make sure the current stored marks or, if that is null, the marks
      // at the selection, match the given set of marks. Does nothing if
      // this is already the case.
      Transaction.prototype.ensureMarks = function ensureMarks (marks) {
        if (!Mark$1.sameSet(this.storedMarks || this.selection.$from.marks(), marks))
          { this.setStoredMarks(marks); }
        return this
      };

      // :: (Mark) → Transaction
      // Add a mark to the set of stored marks.
      Transaction.prototype.addStoredMark = function addStoredMark (mark) {
        return this.ensureMarks(mark.addToSet(this.storedMarks || this.selection.$head.marks()))
      };

      // :: (union<Mark, MarkType>) → Transaction
      // Remove a mark or mark type from the set of stored marks.
      Transaction.prototype.removeStoredMark = function removeStoredMark (mark) {
        return this.ensureMarks(mark.removeFromSet(this.storedMarks || this.selection.$head.marks()))
      };

      // :: bool
      // Whether the stored marks were explicitly set for this transaction.
      prototypeAccessors.storedMarksSet.get = function () {
        return (this.updated & UPDATED_MARKS) > 0
      };

      Transaction.prototype.addStep = function addStep (step, doc) {
        Transform.prototype.addStep.call(this, step, doc);
        this.updated = this.updated & ~UPDATED_MARKS;
        this.storedMarks = null;
      };

      // :: (number) → Transaction
      // Update the timestamp for the transaction.
      Transaction.prototype.setTime = function setTime (time) {
        this.time = time;
        return this
      };

      // :: (Slice) → Transaction
      // Replace the current selection with the given slice.
      Transaction.prototype.replaceSelection = function replaceSelection (slice) {
        this.selection.replace(this, slice);
        return this
      };

      // :: (Node, ?bool) → Transaction
      // Replace the selection with the given node. When `inheritMarks` is
      // true and the content is inline, it inherits the marks from the
      // place where it is inserted.
      Transaction.prototype.replaceSelectionWith = function replaceSelectionWith (node, inheritMarks) {
        var selection = this.selection;
        if (inheritMarks !== false)
          { node = node.mark(this.storedMarks || (selection.empty ? selection.$from.marks() : (selection.$from.marksAcross(selection.$to) || Mark$1.none))); }
        selection.replaceWith(this, node);
        return this
      };

      // :: () → Transaction
      // Delete the selection.
      Transaction.prototype.deleteSelection = function deleteSelection () {
        this.selection.replace(this);
        return this
      };

      // :: (string, from: ?number, to: ?number) → Transaction
      // Replace the given range, or the selection if no range is given,
      // with a text node containing the given string.
      Transaction.prototype.insertText = function insertText (text, from, to) {
        if ( to === void 0 ) to = from;

        var schema = this.doc.type.schema;
        if (from == null) {
          if (!text) { return this.deleteSelection() }
          return this.replaceSelectionWith(schema.text(text), true)
        } else {
          if (!text) { return this.deleteRange(from, to) }
          var marks = this.storedMarks;
          if (!marks) {
            var $from = this.doc.resolve(from);
            marks = to == from ? $from.marks() : $from.marksAcross(this.doc.resolve(to));
          }
          this.replaceRangeWith(from, to, schema.text(text, marks));
          if (!this.selection.empty) { this.setSelection(Selection.near(this.selection.$to)); }
          return this
        }
      };

      // :: (union<string, Plugin, PluginKey>, any) → Transaction
      // Store a metadata property in this transaction, keyed either by
      // name or by plugin.
      Transaction.prototype.setMeta = function setMeta (key, value) {
        this.meta[typeof key == "string" ? key : key.key] = value;
        return this
      };

      // :: (union<string, Plugin, PluginKey>) → any
      // Retrieve a metadata property for a given name or plugin.
      Transaction.prototype.getMeta = function getMeta (key) {
        return this.meta[typeof key == "string" ? key : key.key]
      };

      // :: bool
      // Returns true if this transaction doesn't contain any metadata,
      // and can thus safely be extended.
      prototypeAccessors.isGeneric.get = function () {
        for (var _ in this.meta) { return false }
        return true
      };

      // :: () → Transaction
      // Indicate that the editor should scroll the selection into view
      // when updated to the state produced by this transaction.
      Transaction.prototype.scrollIntoView = function scrollIntoView () {
        this.updated |= UPDATED_SCROLL;
        return this
      };

      prototypeAccessors.scrolledIntoView.get = function () {
        return (this.updated & UPDATED_SCROLL) > 0
      };

      Object.defineProperties( Transaction.prototype, prototypeAccessors );

      return Transaction;
    }(Transform));

    function bind(f, self) {
      return !self || !f ? f : f.bind(self)
    }

    var FieldDesc = function FieldDesc(name, desc, self) {
      this.name = name;
      this.init = bind(desc.init, self);
      this.apply = bind(desc.apply, self);
    };

    var baseFields = [
      new FieldDesc("doc", {
        init: function init(config) { return config.doc || config.schema.topNodeType.createAndFill() },
        apply: function apply(tr) { return tr.doc }
      }),

      new FieldDesc("selection", {
        init: function init(config, instance) { return config.selection || Selection.atStart(instance.doc) },
        apply: function apply(tr) { return tr.selection }
      }),

      new FieldDesc("storedMarks", {
        init: function init(config) { return config.storedMarks || null },
        apply: function apply(tr, _marks, _old, state) { return state.selection.$cursor ? tr.storedMarks : null }
      }),

      new FieldDesc("scrollToSelection", {
        init: function init() { return 0 },
        apply: function apply(tr, prev) { return tr.scrolledIntoView ? prev + 1 : prev }
      })
    ];

    // Object wrapping the part of a state object that stays the same
    // across transactions. Stored in the state's `config` property.
    var Configuration = function Configuration(schema, plugins) {
      var this$1$1 = this;

      this.schema = schema;
      this.fields = baseFields.concat();
      this.plugins = [];
      this.pluginsByKey = Object.create(null);
      if (plugins) { plugins.forEach(function (plugin) {
        if (this$1$1.pluginsByKey[plugin.key])
          { throw new RangeError("Adding different instances of a keyed plugin (" + plugin.key + ")") }
        this$1$1.plugins.push(plugin);
        this$1$1.pluginsByKey[plugin.key] = plugin;
        if (plugin.spec.state)
          { this$1$1.fields.push(new FieldDesc(plugin.key, plugin.spec.state, plugin)); }
      }); }
    };

    // ::- The state of a ProseMirror editor is represented by an object
    // of this type. A state is a persistent data structure—it isn't
    // updated, but rather a new state value is computed from an old one
    // using the [`apply`](#state.EditorState.apply) method.
    //
    // A state holds a number of built-in fields, and plugins can
    // [define](#state.PluginSpec.state) additional fields.
    var EditorState = function EditorState(config) {
      this.config = config;
    };

    var prototypeAccessors$1$1 = { schema: { configurable: true },plugins: { configurable: true },tr: { configurable: true } };

    // doc:: Node
    // The current document.

    // selection:: Selection
    // The selection.

    // storedMarks:: ?[Mark]
    // A set of marks to apply to the next input. Will be null when
    // no explicit marks have been set.

    // :: Schema
    // The schema of the state's document.
    prototypeAccessors$1$1.schema.get = function () {
      return this.config.schema
    };

    // :: [Plugin]
    // The plugins that are active in this state.
    prototypeAccessors$1$1.plugins.get = function () {
      return this.config.plugins
    };

    // :: (Transaction) → EditorState
    // Apply the given transaction to produce a new state.
    EditorState.prototype.apply = function apply (tr) {
      return this.applyTransaction(tr).state
    };

    // : (Transaction) → bool
    EditorState.prototype.filterTransaction = function filterTransaction (tr, ignore) {
        if ( ignore === void 0 ) ignore = -1;

      for (var i = 0; i < this.config.plugins.length; i++) { if (i != ignore) {
        var plugin = this.config.plugins[i];
        if (plugin.spec.filterTransaction && !plugin.spec.filterTransaction.call(plugin, tr, this))
          { return false }
      } }
      return true
    };

    // :: (Transaction) → {state: EditorState, transactions: [Transaction]}
    // Verbose variant of [`apply`](#state.EditorState.apply) that
    // returns the precise transactions that were applied (which might
    // be influenced by the [transaction
    // hooks](#state.PluginSpec.filterTransaction) of
    // plugins) along with the new state.
    EditorState.prototype.applyTransaction = function applyTransaction (rootTr) {
      if (!this.filterTransaction(rootTr)) { return {state: this, transactions: []} }

      var trs = [rootTr], newState = this.applyInner(rootTr), seen = null;
      // This loop repeatedly gives plugins a chance to respond to
      // transactions as new transactions are added, making sure to only
      // pass the transactions the plugin did not see before.
       for (;;) {
        var haveNew = false;
        for (var i = 0; i < this.config.plugins.length; i++) {
          var plugin = this.config.plugins[i];
          if (plugin.spec.appendTransaction) {
            var n = seen ? seen[i].n : 0, oldState = seen ? seen[i].state : this;
            var tr = n < trs.length &&
                plugin.spec.appendTransaction.call(plugin, n ? trs.slice(n) : trs, oldState, newState);
            if (tr && newState.filterTransaction(tr, i)) {
              tr.setMeta("appendedTransaction", rootTr);
              if (!seen) {
                seen = [];
                for (var j = 0; j < this.config.plugins.length; j++)
                  { seen.push(j < i ? {state: newState, n: trs.length} : {state: this, n: 0}); }
              }
              trs.push(tr);
              newState = newState.applyInner(tr);
              haveNew = true;
            }
            if (seen) { seen[i] = {state: newState, n: trs.length}; }
          }
        }
        if (!haveNew) { return {state: newState, transactions: trs} }
      }
    };

    // : (Transaction) → EditorState
    EditorState.prototype.applyInner = function applyInner (tr) {
      if (!tr.before.eq(this.doc)) { throw new RangeError("Applying a mismatched transaction") }
      var newInstance = new EditorState(this.config), fields = this.config.fields;
      for (var i = 0; i < fields.length; i++) {
        var field = fields[i];
        newInstance[field.name] = field.apply(tr, this[field.name], this, newInstance);
      }
      for (var i$1 = 0; i$1 < applyListeners.length; i$1++) { applyListeners[i$1](this, tr, newInstance); }
      return newInstance
    };

    // :: Transaction
    // Start a [transaction](#state.Transaction) from this state.
    prototypeAccessors$1$1.tr.get = function () { return new Transaction(this) };

    // :: (Object) → EditorState
    // Create a new state.
    //
    // config::- Configuration options. Must contain `schema` or `doc` (or both).
    //
    //    schema:: ?Schema
    //    The schema to use (only relevant if no `doc` is specified).
    //
    //    doc:: ?Node
    //    The starting document.
    //
    //    selection:: ?Selection
    //    A valid selection in the document.
    //
    //    storedMarks:: ?[Mark]
    //    The initial set of [stored marks](#state.EditorState.storedMarks).
    //
    //    plugins:: ?[Plugin]
    //    The plugins that should be active in this state.
    EditorState.create = function create (config) {
      var $config = new Configuration(config.doc ? config.doc.type.schema : config.schema, config.plugins);
      var instance = new EditorState($config);
      for (var i = 0; i < $config.fields.length; i++)
        { instance[$config.fields[i].name] = $config.fields[i].init(config, instance); }
      return instance
    };

    // :: (Object) → EditorState
    // Create a new state based on this one, but with an adjusted set of
    // active plugins. State fields that exist in both sets of plugins
    // are kept unchanged. Those that no longer exist are dropped, and
    // those that are new are initialized using their
    // [`init`](#state.StateField.init) method, passing in the new
    // configuration object..
    //
    // config::- configuration options
    //
    //   plugins:: [Plugin]
    //   New set of active plugins.
    EditorState.prototype.reconfigure = function reconfigure (config) {
      var $config = new Configuration(this.schema, config.plugins);
      var fields = $config.fields, instance = new EditorState($config);
      for (var i = 0; i < fields.length; i++) {
        var name = fields[i].name;
        instance[name] = this.hasOwnProperty(name) ? this[name] : fields[i].init(config, instance);
      }
      return instance
    };

    // :: (?union<Object<Plugin>, string, number>) → Object
    // Serialize this state to JSON. If you want to serialize the state
    // of plugins, pass an object mapping property names to use in the
    // resulting JSON object to plugin objects. The argument may also be
    // a string or number, in which case it is ignored, to support the
    // way `JSON.stringify` calls `toString` methods.
    EditorState.prototype.toJSON = function toJSON (pluginFields) {
      var result = {doc: this.doc.toJSON(), selection: this.selection.toJSON()};
      if (this.storedMarks) { result.storedMarks = this.storedMarks.map(function (m) { return m.toJSON(); }); }
      if (pluginFields && typeof pluginFields == 'object') { for (var prop in pluginFields) {
        if (prop == "doc" || prop == "selection")
          { throw new RangeError("The JSON fields `doc` and `selection` are reserved") }
        var plugin = pluginFields[prop], state = plugin.spec.state;
        if (state && state.toJSON) { result[prop] = state.toJSON.call(plugin, this[plugin.key]); }
      } }
      return result
    };

    // :: (Object, Object, ?Object<Plugin>) → EditorState
    // Deserialize a JSON representation of a state. `config` should
    // have at least a `schema` field, and should contain array of
    // plugins to initialize the state with. `pluginFields` can be used
    // to deserialize the state of plugins, by associating plugin
    // instances with the property names they use in the JSON object.
    //
    // config::- configuration options
    //
    //   schema:: Schema
    //   The schema to use.
    //
    //   plugins:: ?[Plugin]
    //   The set of active plugins.
    EditorState.fromJSON = function fromJSON (config, json, pluginFields) {
      if (!json) { throw new RangeError("Invalid input for EditorState.fromJSON") }
      if (!config.schema) { throw new RangeError("Required config field 'schema' missing") }
      var $config = new Configuration(config.schema, config.plugins);
      var instance = new EditorState($config);
      $config.fields.forEach(function (field) {
        if (field.name == "doc") {
          instance.doc = Node$3.fromJSON(config.schema, json.doc);
        } else if (field.name == "selection") {
          instance.selection = Selection.fromJSON(instance.doc, json.selection);
        } else if (field.name == "storedMarks") {
          if (json.storedMarks) { instance.storedMarks = json.storedMarks.map(config.schema.markFromJSON); }
        } else {
          if (pluginFields) { for (var prop in pluginFields) {
            var plugin = pluginFields[prop], state = plugin.spec.state;
            if (plugin.key == field.name && state && state.fromJSON &&
                Object.prototype.hasOwnProperty.call(json, prop)) {
              // This field belongs to a plugin mapped to a JSON field, read it from there.
              instance[field.name] = state.fromJSON.call(plugin, config, json[prop], instance);
              return
            }
          } }
          instance[field.name] = field.init(config, instance);
        }
      });
      return instance
    };

    // Kludge to allow the view to track mappings between different
    // instances of a state.
    //
    // FIXME this is no longer needed as of prosemirror-view 1.9.0,
    // though due to backwards-compat we should probably keep it around
    // for a while (if only as a no-op)
    EditorState.addApplyListener = function addApplyListener (f) {
      applyListeners.push(f);
    };
    EditorState.removeApplyListener = function removeApplyListener (f) {
      var found = applyListeners.indexOf(f);
      if (found > -1) { applyListeners.splice(found, 1); }
    };

    Object.defineProperties( EditorState.prototype, prototypeAccessors$1$1 );

    var applyListeners = [];

    // PluginSpec:: interface
    //
    // This is the type passed to the [`Plugin`](#state.Plugin)
    // constructor. It provides a definition for a plugin.
    //
    //   props:: ?EditorProps
    //   The [view props](#view.EditorProps) added by this plugin. Props
    //   that are functions will be bound to have the plugin instance as
    //   their `this` binding.
    //
    //   state:: ?StateField<any>
    //   Allows a plugin to define a [state field](#state.StateField), an
    //   extra slot in the state object in which it can keep its own data.
    //
    //   key:: ?PluginKey
    //   Can be used to make this a keyed plugin. You can have only one
    //   plugin with a given key in a given state, but it is possible to
    //   access the plugin's configuration and state through the key,
    //   without having access to the plugin instance object.
    //
    //   view:: ?(EditorView) → Object
    //   When the plugin needs to interact with the editor view, or
    //   set something up in the DOM, use this field. The function
    //   will be called when the plugin's state is associated with an
    //   editor view.
    //
    //     return::-
    //     Should return an object with the following optional
    //     properties:
    //
    //       update:: ?(view: EditorView, prevState: EditorState)
    //       Called whenever the view's state is updated.
    //
    //       destroy:: ?()
    //       Called when the view is destroyed or receives a state
    //       with different plugins.
    //
    //   filterTransaction:: ?(Transaction, EditorState) → bool
    //   When present, this will be called before a transaction is
    //   applied by the state, allowing the plugin to cancel it (by
    //   returning false).
    //
    //   appendTransaction:: ?(transactions: [Transaction], oldState: EditorState, newState: EditorState) → ?Transaction
    //   Allows the plugin to append another transaction to be applied
    //   after the given array of transactions. When another plugin
    //   appends a transaction after this was called, it is called again
    //   with the new state and new transactions—but only the new
    //   transactions, i.e. it won't be passed transactions that it
    //   already saw.

    function bindProps(obj, self, target) {
      for (var prop in obj) {
        var val = obj[prop];
        if (val instanceof Function) { val = val.bind(self); }
        else if (prop == "handleDOMEvents") { val = bindProps(val, self, {}); }
        target[prop] = val;
      }
      return target
    }

    // ::- Plugins bundle functionality that can be added to an editor.
    // They are part of the [editor state](#state.EditorState) and
    // may influence that state and the view that contains it.
    var Plugin = function Plugin(spec) {
      // :: EditorProps
      // The [props](#view.EditorProps) exported by this plugin.
      this.props = {};
      if (spec.props) { bindProps(spec.props, this, this.props); }
      // :: Object
      // The plugin's [spec object](#state.PluginSpec).
      this.spec = spec;
      this.key = spec.key ? spec.key.key : createKey("plugin");
    };

    // :: (EditorState) → any
    // Extract the plugin's state field from an editor state.
    Plugin.prototype.getState = function getState (state) { return state[this.key] };

    // StateField:: interface<T>
    // A plugin spec may provide a state field (under its
    // [`state`](#state.PluginSpec.state) property) of this type, which
    // describes the state it wants to keep. Functions provided here are
    // always called with the plugin instance as their `this` binding.
    //
    //   init:: (config: Object, instance: EditorState) → T
    //   Initialize the value of the field. `config` will be the object
    //   passed to [`EditorState.create`](#state.EditorState^create). Note
    //   that `instance` is a half-initialized state instance, and will
    //   not have values for plugin fields initialized after this one.
    //
    //   apply:: (tr: Transaction, value: T, oldState: EditorState, newState: EditorState) → T
    //   Apply the given transaction to this state field, producing a new
    //   field value. Note that the `newState` argument is again a partially
    //   constructed state does not yet contain the state from plugins
    //   coming after this one.
    //
    //   toJSON:: ?(value: T) → *
    //   Convert this field to JSON. Optional, can be left off to disable
    //   JSON serialization for the field.
    //
    //   fromJSON:: ?(config: Object, value: *, state: EditorState) → T
    //   Deserialize the JSON representation of this field. Note that the
    //   `state` argument is again a half-initialized state.

    var keys = Object.create(null);

    function createKey(name) {
      if (name in keys) { return name + "$" + ++keys[name] }
      keys[name] = 0;
      return name + "$"
    }

    // ::- A key is used to [tag](#state.PluginSpec.key)
    // plugins in a way that makes it possible to find them, given an
    // editor state. Assigning a key does mean only one plugin of that
    // type can be active in a state.
    var PluginKey = function PluginKey(name) {
    if ( name === void 0 ) name = "key";
     this.key = createKey(name); };

    // :: (EditorState) → ?Plugin
    // Get the active plugin with this key, if any, from an editor
    // state.
    PluginKey.prototype.get = function get (state) { return state.config.pluginsByKey[this.key] };

    // :: (EditorState) → ?any
    // Get the plugin's state from an editor state.
    PluginKey.prototype.getState = function getState (state) { return state[this.key] };

    var result = {};

    if (typeof navigator != "undefined" && typeof document != "undefined") {
      var ie_edge = /Edge\/(\d+)/.exec(navigator.userAgent);
      var ie_upto10 = /MSIE \d/.test(navigator.userAgent);
      var ie_11up = /Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);

      result.mac = /Mac/.test(navigator.platform);
      var ie$1 = result.ie = !!(ie_upto10 || ie_11up || ie_edge);
      result.ie_version = ie_upto10 ? document.documentMode || 6 : ie_11up ? +ie_11up[1] : ie_edge ? +ie_edge[1] : null;
      result.gecko = !ie$1 && /gecko\/(\d+)/i.test(navigator.userAgent);
      result.gecko_version = result.gecko && +(/Firefox\/(\d+)/.exec(navigator.userAgent) || [0, 0])[1];
      var chrome$1 = !ie$1 && /Chrome\/(\d+)/.exec(navigator.userAgent);
      result.chrome = !!chrome$1;
      result.chrome_version = chrome$1 && +chrome$1[1];
      // Is true for both iOS and iPadOS for convenience
      result.safari = !ie$1 && /Apple Computer/.test(navigator.vendor);
      result.ios = result.safari && (/Mobile\/\w+/.test(navigator.userAgent) || navigator.maxTouchPoints > 2);
      result.android = /Android \d/.test(navigator.userAgent);
      result.webkit = "webkitFontSmoothing" in document.documentElement.style;
      result.webkit_version = result.webkit && +(/\bAppleWebKit\/(\d+)/.exec(navigator.userAgent) || [0, 0])[1];
    }

    var domIndex = function(node) {
      for (var index = 0;; index++) {
        node = node.previousSibling;
        if (!node) { return index }
      }
    };

    var parentNode = function(node) {
      var parent = node.assignedSlot || node.parentNode;
      return parent && parent.nodeType == 11 ? parent.host : parent
    };

    var reusedRange = null;

    // Note that this will always return the same range, because DOM range
    // objects are every expensive, and keep slowing down subsequent DOM
    // updates, for some reason.
    var textRange = function(node, from, to) {
      var range = reusedRange || (reusedRange = document.createRange());
      range.setEnd(node, to == null ? node.nodeValue.length : to);
      range.setStart(node, from || 0);
      return range
    };

    // Scans forward and backward through DOM positions equivalent to the
    // given one to see if the two are in the same place (i.e. after a
    // text node vs at the end of that text node)
    var isEquivalentPosition = function(node, off, targetNode, targetOff) {
      return targetNode && (scanFor(node, off, targetNode, targetOff, -1) ||
                            scanFor(node, off, targetNode, targetOff, 1))
    };

    var atomElements = /^(img|br|input|textarea|hr)$/i;

    function scanFor(node, off, targetNode, targetOff, dir) {
      for (;;) {
        if (node == targetNode && off == targetOff) { return true }
        if (off == (dir < 0 ? 0 : nodeSize(node))) {
          var parent = node.parentNode;
          if (parent.nodeType != 1 || hasBlockDesc(node) || atomElements.test(node.nodeName) || node.contentEditable == "false")
            { return false }
          off = domIndex(node) + (dir < 0 ? 0 : 1);
          node = parent;
        } else if (node.nodeType == 1) {
          node = node.childNodes[off + (dir < 0 ? -1 : 0)];
          if (node.contentEditable == "false") { return false }
          off = dir < 0 ? nodeSize(node) : 0;
        } else {
          return false
        }
      }
    }

    function nodeSize(node) {
      return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length
    }

    function isOnEdge(node, offset, parent) {
      for (var atStart = offset == 0, atEnd = offset == nodeSize(node); atStart || atEnd;) {
        if (node == parent) { return true }
        var index = domIndex(node);
        node = node.parentNode;
        if (!node) { return false }
        atStart = atStart && index == 0;
        atEnd = atEnd && index == nodeSize(node);
      }
    }

    function hasBlockDesc(dom) {
      var desc;
      for (var cur = dom; cur; cur = cur.parentNode) { if (desc = cur.pmViewDesc) { break } }
      return desc && desc.node && desc.node.isBlock && (desc.dom == dom || desc.contentDOM == dom)
    }

    // Work around Chrome issue https://bugs.chromium.org/p/chromium/issues/detail?id=447523
    // (isCollapsed inappropriately returns true in shadow dom)
    var selectionCollapsed = function(domSel) {
      var collapsed = domSel.isCollapsed;
      if (collapsed && result.chrome && domSel.rangeCount && !domSel.getRangeAt(0).collapsed)
        { collapsed = false; }
      return collapsed
    };

    function keyEvent(keyCode, key) {
      var event = document.createEvent("Event");
      event.initEvent("keydown", true, true);
      event.keyCode = keyCode;
      event.key = event.code = key;
      return event
    }

    function windowRect(doc) {
      return {left: 0, right: doc.documentElement.clientWidth,
              top: 0, bottom: doc.documentElement.clientHeight}
    }

    function getSide(value, side) {
      return typeof value == "number" ? value : value[side]
    }

    function clientRect(node) {
      var rect = node.getBoundingClientRect();
      // Adjust for elements with style "transform: scale()"
      var scaleX = (rect.width / node.offsetWidth) || 1;
      var scaleY = (rect.height / node.offsetHeight) || 1;
      // Make sure scrollbar width isn't included in the rectangle
      return {left: rect.left, right: rect.left + node.clientWidth * scaleX,
              top: rect.top, bottom: rect.top + node.clientHeight * scaleY}
    }

    function scrollRectIntoView(view, rect, startDOM) {
      var scrollThreshold = view.someProp("scrollThreshold") || 0, scrollMargin = view.someProp("scrollMargin") || 5;
      var doc = view.dom.ownerDocument;
      for (var parent = startDOM || view.dom;; parent = parentNode(parent)) {
        if (!parent) { break }
        if (parent.nodeType != 1) { continue }
        var atTop = parent == doc.body || parent.nodeType != 1;
        var bounding = atTop ? windowRect(doc) : clientRect(parent);
        var moveX = 0, moveY = 0;
        if (rect.top < bounding.top + getSide(scrollThreshold, "top"))
          { moveY = -(bounding.top - rect.top + getSide(scrollMargin, "top")); }
        else if (rect.bottom > bounding.bottom - getSide(scrollThreshold, "bottom"))
          { moveY = rect.bottom - bounding.bottom + getSide(scrollMargin, "bottom"); }
        if (rect.left < bounding.left + getSide(scrollThreshold, "left"))
          { moveX = -(bounding.left - rect.left + getSide(scrollMargin, "left")); }
        else if (rect.right > bounding.right - getSide(scrollThreshold, "right"))
          { moveX = rect.right - bounding.right + getSide(scrollMargin, "right"); }
        if (moveX || moveY) {
          if (atTop) {
            doc.defaultView.scrollBy(moveX, moveY);
          } else {
            var startX = parent.scrollLeft, startY = parent.scrollTop;
            if (moveY) { parent.scrollTop += moveY; }
            if (moveX) { parent.scrollLeft += moveX; }
            var dX = parent.scrollLeft - startX, dY = parent.scrollTop - startY;
            rect = {left: rect.left - dX, top: rect.top - dY, right: rect.right - dX, bottom: rect.bottom - dY};
          }
        }
        if (atTop) { break }
      }
    }

    // Store the scroll position of the editor's parent nodes, along with
    // the top position of an element near the top of the editor, which
    // will be used to make sure the visible viewport remains stable even
    // when the size of the content above changes.
    function storeScrollPos(view) {
      var rect = view.dom.getBoundingClientRect(), startY = Math.max(0, rect.top);
      var refDOM, refTop;
      for (var x = (rect.left + rect.right) / 2, y = startY + 1;
           y < Math.min(innerHeight, rect.bottom); y += 5) {
        var dom = view.root.elementFromPoint(x, y);
        if (dom == view.dom || !view.dom.contains(dom)) { continue }
        var localRect = dom.getBoundingClientRect();
        if (localRect.top >= startY - 20) {
          refDOM = dom;
          refTop = localRect.top;
          break
        }
      }
      return {refDOM: refDOM, refTop: refTop, stack: scrollStack(view.dom)}
    }

    function scrollStack(dom) {
      var stack = [], doc = dom.ownerDocument;
      for (; dom; dom = parentNode(dom)) {
        stack.push({dom: dom, top: dom.scrollTop, left: dom.scrollLeft});
        if (dom == doc) { break }
      }
      return stack
    }

    // Reset the scroll position of the editor's parent nodes to that what
    // it was before, when storeScrollPos was called.
    function resetScrollPos(ref) {
      var refDOM = ref.refDOM;
      var refTop = ref.refTop;
      var stack = ref.stack;

      var newRefTop = refDOM ? refDOM.getBoundingClientRect().top : 0;
      restoreScrollStack(stack, newRefTop == 0 ? 0 : newRefTop - refTop);
    }

    function restoreScrollStack(stack, dTop) {
      for (var i = 0; i < stack.length; i++) {
        var ref = stack[i];
        var dom = ref.dom;
        var top = ref.top;
        var left = ref.left;
        if (dom.scrollTop != top + dTop) { dom.scrollTop = top + dTop; }
        if (dom.scrollLeft != left) { dom.scrollLeft = left; }
      }
    }

    var preventScrollSupported = null;
    // Feature-detects support for .focus({preventScroll: true}), and uses
    // a fallback kludge when not supported.
    function focusPreventScroll(dom) {
      if (dom.setActive) { return dom.setActive() } // in IE
      if (preventScrollSupported) { return dom.focus(preventScrollSupported) }

      var stored = scrollStack(dom);
      dom.focus(preventScrollSupported == null ? {
        get preventScroll() {
          preventScrollSupported = {preventScroll: true};
          return true
        }
      } : undefined);
      if (!preventScrollSupported) {
        preventScrollSupported = false;
        restoreScrollStack(stored, 0);
      }
    }

    function findOffsetInNode(node, coords) {
      var closest, dxClosest = 2e8, coordsClosest, offset = 0;
      var rowBot = coords.top, rowTop = coords.top;
      for (var child = node.firstChild, childIndex = 0; child; child = child.nextSibling, childIndex++) {
        var rects = (void 0);
        if (child.nodeType == 1) { rects = child.getClientRects(); }
        else if (child.nodeType == 3) { rects = textRange(child).getClientRects(); }
        else { continue }

        for (var i = 0; i < rects.length; i++) {
          var rect = rects[i];
          if (rect.top <= rowBot && rect.bottom >= rowTop) {
            rowBot = Math.max(rect.bottom, rowBot);
            rowTop = Math.min(rect.top, rowTop);
            var dx = rect.left > coords.left ? rect.left - coords.left
                : rect.right < coords.left ? coords.left - rect.right : 0;
            if (dx < dxClosest) {
              closest = child;
              dxClosest = dx;
              coordsClosest = dx && closest.nodeType == 3 ? {left: rect.right < coords.left ? rect.right : rect.left, top: coords.top} : coords;
              if (child.nodeType == 1 && dx)
                { offset = childIndex + (coords.left >= (rect.left + rect.right) / 2 ? 1 : 0); }
              continue
            }
          }
          if (!closest && (coords.left >= rect.right && coords.top >= rect.top ||
                           coords.left >= rect.left && coords.top >= rect.bottom))
            { offset = childIndex + 1; }
        }
      }
      if (closest && closest.nodeType == 3) { return findOffsetInText(closest, coordsClosest) }
      if (!closest || (dxClosest && closest.nodeType == 1)) { return {node: node, offset: offset} }
      return findOffsetInNode(closest, coordsClosest)
    }

    function findOffsetInText(node, coords) {
      var len = node.nodeValue.length;
      var range = document.createRange();
      for (var i = 0; i < len; i++) {
        range.setEnd(node, i + 1);
        range.setStart(node, i);
        var rect = singleRect(range, 1);
        if (rect.top == rect.bottom) { continue }
        if (inRect(coords, rect))
          { return {node: node, offset: i + (coords.left >= (rect.left + rect.right) / 2 ? 1 : 0)} }
      }
      return {node: node, offset: 0}
    }

    function inRect(coords, rect) {
      return coords.left >= rect.left - 1 && coords.left <= rect.right + 1&&
        coords.top >= rect.top - 1 && coords.top <= rect.bottom + 1
    }

    function targetKludge(dom, coords) {
      var parent = dom.parentNode;
      if (parent && /^li$/i.test(parent.nodeName) && coords.left < dom.getBoundingClientRect().left)
        { return parent }
      return dom
    }

    function posFromElement(view, elt, coords) {
      var ref = findOffsetInNode(elt, coords);
      var node = ref.node;
      var offset = ref.offset;
      var bias = -1;
      if (node.nodeType == 1 && !node.firstChild) {
        var rect = node.getBoundingClientRect();
        bias = rect.left != rect.right && coords.left > (rect.left + rect.right) / 2 ? 1 : -1;
      }
      return view.docView.posFromDOM(node, offset, bias)
    }

    function posFromCaret(view, node, offset, coords) {
      // Browser (in caretPosition/RangeFromPoint) will agressively
      // normalize towards nearby inline nodes. Since we are interested in
      // positions between block nodes too, we first walk up the hierarchy
      // of nodes to see if there are block nodes that the coordinates
      // fall outside of. If so, we take the position before/after that
      // block. If not, we call `posFromDOM` on the raw node/offset.
      var outside = -1;
      for (var cur = node;;) {
        if (cur == view.dom) { break }
        var desc = view.docView.nearestDesc(cur, true);
        if (!desc) { return null }
        if (desc.node.isBlock && desc.parent) {
          var rect = desc.dom.getBoundingClientRect();
          if (rect.left > coords.left || rect.top > coords.top) { outside = desc.posBefore; }
          else if (rect.right < coords.left || rect.bottom < coords.top) { outside = desc.posAfter; }
          else { break }
        }
        cur = desc.dom.parentNode;
      }
      return outside > -1 ? outside : view.docView.posFromDOM(node, offset)
    }

    function elementFromPoint(element, coords, box) {
      var len = element.childNodes.length;
      if (len && box.top < box.bottom) {
        for (var startI = Math.max(0, Math.min(len - 1, Math.floor(len * (coords.top - box.top) / (box.bottom - box.top)) - 2)), i = startI;;) {
          var child = element.childNodes[i];
          if (child.nodeType == 1) {
            var rects = child.getClientRects();
            for (var j = 0; j < rects.length; j++) {
              var rect = rects[j];
              if (inRect(coords, rect)) { return elementFromPoint(child, coords, rect) }
            }
          }
          if ((i = (i + 1) % len) == startI) { break }
        }
      }
      return element
    }

    // Given an x,y position on the editor, get the position in the document.
    function posAtCoords(view, coords) {
      var assign, assign$1;

      var root = view.root, node, offset;
      if (root.caretPositionFromPoint) {
        try { // Firefox throws for this call in hard-to-predict circumstances (#994)
          var pos$1 = root.caretPositionFromPoint(coords.left, coords.top);
          if (pos$1) { ((assign = pos$1, node = assign.offsetNode, offset = assign.offset)); }
        } catch (_) {}
      }
      if (!node && root.caretRangeFromPoint) {
        var range = root.caretRangeFromPoint(coords.left, coords.top);
        if (range) { ((assign$1 = range, node = assign$1.startContainer, offset = assign$1.startOffset)); }
      }

      var elt = root.elementFromPoint(coords.left, coords.top + 1), pos;
      if (!elt || !view.dom.contains(elt.nodeType != 1 ? elt.parentNode : elt)) {
        var box = view.dom.getBoundingClientRect();
        if (!inRect(coords, box)) { return null }
        elt = elementFromPoint(view.dom, coords, box);
        if (!elt) { return null }
      }
      // Safari's caretRangeFromPoint returns nonsense when on a draggable element
      if (result.safari) {
        for (var p = elt; node && p; p = parentNode(p))
          { if (p.draggable) { node = offset = null; } }
      }
      elt = targetKludge(elt, coords);
      if (node) {
        if (result.gecko && node.nodeType == 1) {
          // Firefox will sometimes return offsets into <input> nodes, which
          // have no actual children, from caretPositionFromPoint (#953)
          offset = Math.min(offset, node.childNodes.length);
          // It'll also move the returned position before image nodes,
          // even if those are behind it.
          if (offset < node.childNodes.length) {
            var next = node.childNodes[offset], box$1;
            if (next.nodeName == "IMG" && (box$1 = next.getBoundingClientRect()).right <= coords.left &&
                box$1.bottom > coords.top)
              { offset++; }
          }
        }
        // Suspiciously specific kludge to work around caret*FromPoint
        // never returning a position at the end of the document
        if (node == view.dom && offset == node.childNodes.length - 1 && node.lastChild.nodeType == 1 &&
            coords.top > node.lastChild.getBoundingClientRect().bottom)
          { pos = view.state.doc.content.size; }
        // Ignore positions directly after a BR, since caret*FromPoint
        // 'round up' positions that would be more accurately placed
        // before the BR node.
        else if (offset == 0 || node.nodeType != 1 || node.childNodes[offset - 1].nodeName != "BR")
          { pos = posFromCaret(view, node, offset, coords); }
      }
      if (pos == null) { pos = posFromElement(view, elt, coords); }

      var desc = view.docView.nearestDesc(elt, true);
      return {pos: pos, inside: desc ? desc.posAtStart - desc.border : -1}
    }

    function singleRect(object, bias) {
      var rects = object.getClientRects();
      return !rects.length ? object.getBoundingClientRect() : rects[bias < 0 ? 0 : rects.length - 1]
    }

    var BIDI = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac]/;

    // : (EditorView, number, number) → {left: number, top: number, right: number, bottom: number}
    // Given a position in the document model, get a bounding box of the
    // character at that position, relative to the window.
    function coordsAtPos(view, pos, side) {
      var ref = view.docView.domFromPos(pos, side < 0 ? -1 : 1);
      var node = ref.node;
      var offset = ref.offset;

      var supportEmptyRange = result.webkit || result.gecko;
      if (node.nodeType == 3) {
        // These browsers support querying empty text ranges. Prefer that in
        // bidi context or when at the end of a node.
        if (supportEmptyRange && (BIDI.test(node.nodeValue) || (side < 0 ? !offset : offset == node.nodeValue.length))) {
          var rect = singleRect(textRange(node, offset, offset), side);
          // Firefox returns bad results (the position before the space)
          // when querying a position directly after line-broken
          // whitespace. Detect this situation and and kludge around it
          if (result.gecko && offset && /\s/.test(node.nodeValue[offset - 1]) && offset < node.nodeValue.length) {
            var rectBefore = singleRect(textRange(node, offset - 1, offset - 1), -1);
            if (rectBefore.top == rect.top) {
              var rectAfter = singleRect(textRange(node, offset, offset + 1), -1);
              if (rectAfter.top != rect.top)
                { return flattenV(rectAfter, rectAfter.left < rectBefore.left) }
            }
          }
          return rect
        } else {
          var from = offset, to = offset, takeSide = side < 0 ? 1 : -1;
          if (side < 0 && !offset) { to++; takeSide = -1; }
          else if (side >= 0 && offset == node.nodeValue.length) { from--; takeSide = 1; }
          else if (side < 0) { from--; }
          else { to ++; }
          return flattenV(singleRect(textRange(node, from, to), takeSide), takeSide < 0)
        }
      }

      // Return a horizontal line in block context
      if (!view.state.doc.resolve(pos).parent.inlineContent) {
        if (offset && (side < 0 || offset == nodeSize(node))) {
          var before = node.childNodes[offset - 1];
          if (before.nodeType == 1) { return flattenH(before.getBoundingClientRect(), false) }
        }
        if (offset < nodeSize(node)) {
          var after = node.childNodes[offset];
          if (after.nodeType == 1) { return flattenH(after.getBoundingClientRect(), true) }
        }
        return flattenH(node.getBoundingClientRect(), side >= 0)
      }

      // Inline, not in text node (this is not Bidi-safe)
      if (offset && (side < 0 || offset == nodeSize(node))) {
        var before$1 = node.childNodes[offset - 1];
        var target = before$1.nodeType == 3 ? textRange(before$1, nodeSize(before$1) - (supportEmptyRange ? 0 : 1))
            // BR nodes tend to only return the rectangle before them.
            // Only use them if they are the last element in their parent
            : before$1.nodeType == 1 && (before$1.nodeName != "BR" || !before$1.nextSibling) ? before$1 : null;
        if (target) { return flattenV(singleRect(target, 1), false) }
      }
      if (offset < nodeSize(node)) {
        var after$1 = node.childNodes[offset];
        var target$1 = after$1.nodeType == 3 ? textRange(after$1, 0, (supportEmptyRange ? 0 : 1))
            : after$1.nodeType == 1 ? after$1 : null;
        if (target$1) { return flattenV(singleRect(target$1, -1), true) }
      }
      // All else failed, just try to get a rectangle for the target node
      return flattenV(singleRect(node.nodeType == 3 ? textRange(node) : node, -side), side >= 0)
    }

    function flattenV(rect, left) {
      if (rect.width == 0) { return rect }
      var x = left ? rect.left : rect.right;
      return {top: rect.top, bottom: rect.bottom, left: x, right: x}
    }

    function flattenH(rect, top) {
      if (rect.height == 0) { return rect }
      var y = top ? rect.top : rect.bottom;
      return {top: y, bottom: y, left: rect.left, right: rect.right}
    }

    function withFlushedState(view, state, f) {
      var viewState = view.state, active = view.root.activeElement;
      if (viewState != state) { view.updateState(state); }
      if (active != view.dom) { view.focus(); }
      try {
        return f()
      } finally {
        if (viewState != state) { view.updateState(viewState); }
        if (active != view.dom && active) { active.focus(); }
      }
    }

    // : (EditorView, number, number)
    // Whether vertical position motion in a given direction
    // from a position would leave a text block.
    function endOfTextblockVertical(view, state, dir) {
      var sel = state.selection;
      var $pos = dir == "up" ? sel.$from : sel.$to;
      return withFlushedState(view, state, function () {
        var ref = view.docView.domFromPos($pos.pos, dir == "up" ? -1 : 1);
        var dom = ref.node;
        for (;;) {
          var nearest = view.docView.nearestDesc(dom, true);
          if (!nearest) { break }
          if (nearest.node.isBlock) { dom = nearest.dom; break }
          dom = nearest.dom.parentNode;
        }
        var coords = coordsAtPos(view, $pos.pos, 1);
        for (var child = dom.firstChild; child; child = child.nextSibling) {
          var boxes = (void 0);
          if (child.nodeType == 1) { boxes = child.getClientRects(); }
          else if (child.nodeType == 3) { boxes = textRange(child, 0, child.nodeValue.length).getClientRects(); }
          else { continue }
          for (var i = 0; i < boxes.length; i++) {
            var box = boxes[i];
            if (box.bottom > box.top && (dir == "up" ? box.bottom < coords.top + 1 : box.top > coords.bottom - 1))
              { return false }
          }
        }
        return true
      })
    }

    var maybeRTL = /[\u0590-\u08ac]/;

    function endOfTextblockHorizontal(view, state, dir) {
      var ref = state.selection;
      var $head = ref.$head;
      if (!$head.parent.isTextblock) { return false }
      var offset = $head.parentOffset, atStart = !offset, atEnd = offset == $head.parent.content.size;
      var sel = getSelection();
      // If the textblock is all LTR, or the browser doesn't support
      // Selection.modify (Edge), fall back to a primitive approach
      if (!maybeRTL.test($head.parent.textContent) || !sel.modify)
        { return dir == "left" || dir == "backward" ? atStart : atEnd }

      return withFlushedState(view, state, function () {
        // This is a huge hack, but appears to be the best we can
        // currently do: use `Selection.modify` to move the selection by
        // one character, and see if that moves the cursor out of the
        // textblock (or doesn't move it at all, when at the start/end of
        // the document).
        var oldRange = sel.getRangeAt(0), oldNode = sel.focusNode, oldOff = sel.focusOffset;
        var oldBidiLevel = sel.caretBidiLevel; // Only for Firefox
        sel.modify("move", dir, "character");
        var parentDOM = $head.depth ? view.docView.domAfterPos($head.before()) : view.dom;
        var result = !parentDOM.contains(sel.focusNode.nodeType == 1 ? sel.focusNode : sel.focusNode.parentNode) ||
            (oldNode == sel.focusNode && oldOff == sel.focusOffset);
        // Restore the previous selection
        sel.removeAllRanges();
        sel.addRange(oldRange);
        if (oldBidiLevel != null) { sel.caretBidiLevel = oldBidiLevel; }
        return result
      })
    }

    var cachedState = null, cachedDir = null, cachedResult = false;
    function endOfTextblock(view, state, dir) {
      if (cachedState == state && cachedDir == dir) { return cachedResult }
      cachedState = state; cachedDir = dir;
      return cachedResult = dir == "up" || dir == "down"
        ? endOfTextblockVertical(view, state, dir)
        : endOfTextblockHorizontal(view, state, dir)
    }

    // NodeView:: interface
    //
    // By default, document nodes are rendered using the result of the
    // [`toDOM`](#model.NodeSpec.toDOM) method of their spec, and managed
    // entirely by the editor. For some use cases, such as embedded
    // node-specific editing interfaces, you want more control over
    // the behavior of a node's in-editor representation, and need to
    // [define](#view.EditorProps.nodeViews) a custom node view.
    //
    // Mark views only support `dom` and `contentDOM`, and don't support
    // any of the node view methods.
    //
    // Objects returned as node views must conform to this interface.
    //
    //   dom:: ?dom.Node
    //   The outer DOM node that represents the document node. When not
    //   given, the default strategy is used to create a DOM node.
    //
    //   contentDOM:: ?dom.Node
    //   The DOM node that should hold the node's content. Only meaningful
    //   if the node view also defines a `dom` property and if its node
    //   type is not a leaf node type. When this is present, ProseMirror
    //   will take care of rendering the node's children into it. When it
    //   is not present, the node view itself is responsible for rendering
    //   (or deciding not to render) its child nodes.
    //
    //   update:: ?(node: Node, decorations: [Decoration], innerDecorations: DecorationSource) → bool
    //   When given, this will be called when the view is updating itself.
    //   It will be given a node (possibly of a different type), an array
    //   of active decorations around the node (which are automatically
    //   drawn, and the node view may ignore if it isn't interested in
    //   them), and a [decoration source](#view.DecorationSource) that
    //   represents any decorations that apply to the content of the node
    //   (which again may be ignored). It should return true if it was
    //   able to update to that node, and false otherwise. If the node
    //   view has a `contentDOM` property (or no `dom` property), updating
    //   its child nodes will be handled by ProseMirror.
    //
    //   selectNode:: ?()
    //   Can be used to override the way the node's selected status (as a
    //   node selection) is displayed.
    //
    //   deselectNode:: ?()
    //   When defining a `selectNode` method, you should also provide a
    //   `deselectNode` method to remove the effect again.
    //
    //   setSelection:: ?(anchor: number, head: number, root: dom.Document)
    //   This will be called to handle setting the selection inside the
    //   node. The `anchor` and `head` positions are relative to the start
    //   of the node. By default, a DOM selection will be created between
    //   the DOM positions corresponding to those positions, but if you
    //   override it you can do something else.
    //
    //   stopEvent:: ?(event: dom.Event) → bool
    //   Can be used to prevent the editor view from trying to handle some
    //   or all DOM events that bubble up from the node view. Events for
    //   which this returns true are not handled by the editor.
    //
    //   ignoreMutation:: ?(dom.MutationRecord) → bool
    //   Called when a DOM
    //   [mutation](https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver)
    //   or a selection change happens within the view. When the change is
    //   a selection change, the record will have a `type` property of
    //   `"selection"` (which doesn't occur for native mutation records).
    //   Return false if the editor should re-read the selection or
    //   re-parse the range around the mutation, true if it can safely be
    //   ignored.
    //
    //   destroy:: ?()
    //   Called when the node view is removed from the editor or the whole
    //   editor is destroyed. (Not available for marks.)

    // View descriptions are data structures that describe the DOM that is
    // used to represent the editor's content. They are used for:
    //
    // - Incremental redrawing when the document changes
    //
    // - Figuring out what part of the document a given DOM position
    //   corresponds to
    //
    // - Wiring in custom implementations of the editing interface for a
    //   given node
    //
    // They form a doubly-linked mutable tree, starting at `view.docView`.

    var NOT_DIRTY = 0, CHILD_DIRTY = 1, CONTENT_DIRTY = 2, NODE_DIRTY = 3;

    // Superclass for the various kinds of descriptions. Defines their
    // basic structure and shared methods.
    var ViewDesc = function ViewDesc(parent, children, dom, contentDOM) {
      this.parent = parent;
      this.children = children;
      this.dom = dom;
      // An expando property on the DOM node provides a link back to its
      // description.
      dom.pmViewDesc = this;
      // This is the node that holds the child views. It may be null for
      // descs that don't have children.
      this.contentDOM = contentDOM;
      this.dirty = NOT_DIRTY;
    };

    var prototypeAccessors = { beforePosition: { configurable: true },size: { configurable: true },border: { configurable: true },posBefore: { configurable: true },posAtStart: { configurable: true },posAfter: { configurable: true },posAtEnd: { configurable: true },contentLost: { configurable: true },domAtom: { configurable: true } };

    // Used to check whether a given description corresponds to a
    // widget/mark/node.
    ViewDesc.prototype.matchesWidget = function matchesWidget () { return false };
    ViewDesc.prototype.matchesMark = function matchesMark () { return false };
    ViewDesc.prototype.matchesNode = function matchesNode () { return false };
    ViewDesc.prototype.matchesHack = function matchesHack (_nodeName) { return false };

    prototypeAccessors.beforePosition.get = function () { return false };

    // : () → ?ParseRule
    // When parsing in-editor content (in domchange.js), we allow
    // descriptions to determine the parse rules that should be used to
    // parse them.
    ViewDesc.prototype.parseRule = function parseRule () { return null };

    // : (dom.Event) → bool
    // Used by the editor's event handler to ignore events that come
    // from certain descs.
    ViewDesc.prototype.stopEvent = function stopEvent () { return false };

    // The size of the content represented by this desc.
    prototypeAccessors.size.get = function () {
      var size = 0;
      for (var i = 0; i < this.children.length; i++) { size += this.children[i].size; }
      return size
    };

    // For block nodes, this represents the space taken up by their
    // start/end tokens.
    prototypeAccessors.border.get = function () { return 0 };

    ViewDesc.prototype.destroy = function destroy () {
      this.parent = null;
      if (this.dom.pmViewDesc == this) { this.dom.pmViewDesc = null; }
      for (var i = 0; i < this.children.length; i++)
        { this.children[i].destroy(); }
    };

    ViewDesc.prototype.posBeforeChild = function posBeforeChild (child) {
      for (var i = 0, pos = this.posAtStart; i < this.children.length; i++) {
        var cur = this.children[i];
        if (cur == child) { return pos }
        pos += cur.size;
      }
    };

    prototypeAccessors.posBefore.get = function () {
      return this.parent.posBeforeChild(this)
    };

    prototypeAccessors.posAtStart.get = function () {
      return this.parent ? this.parent.posBeforeChild(this) + this.border : 0
    };

    prototypeAccessors.posAfter.get = function () {
      return this.posBefore + this.size
    };

    prototypeAccessors.posAtEnd.get = function () {
      return this.posAtStart + this.size - 2 * this.border
    };

    // : (dom.Node, number, ?number) → number
    ViewDesc.prototype.localPosFromDOM = function localPosFromDOM (dom, offset, bias) {
      // If the DOM position is in the content, use the child desc after
      // it to figure out a position.
      if (this.contentDOM && this.contentDOM.contains(dom.nodeType == 1 ? dom : dom.parentNode)) {
        if (bias < 0) {
          var domBefore, desc;
          if (dom == this.contentDOM) {
            domBefore = dom.childNodes[offset - 1];
          } else {
            while (dom.parentNode != this.contentDOM) { dom = dom.parentNode; }
            domBefore = dom.previousSibling;
          }
          while (domBefore && !((desc = domBefore.pmViewDesc) && desc.parent == this)) { domBefore = domBefore.previousSibling; }
          return domBefore ? this.posBeforeChild(desc) + desc.size : this.posAtStart
        } else {
          var domAfter, desc$1;
          if (dom == this.contentDOM) {
            domAfter = dom.childNodes[offset];
          } else {
            while (dom.parentNode != this.contentDOM) { dom = dom.parentNode; }
            domAfter = dom.nextSibling;
          }
          while (domAfter && !((desc$1 = domAfter.pmViewDesc) && desc$1.parent == this)) { domAfter = domAfter.nextSibling; }
          return domAfter ? this.posBeforeChild(desc$1) : this.posAtEnd
        }
      }
      // Otherwise, use various heuristics, falling back on the bias
      // parameter, to determine whether to return the position at the
      // start or at the end of this view desc.
      var atEnd;
      if (dom == this.dom && this.contentDOM) {
        atEnd = offset > domIndex(this.contentDOM);
      } else if (this.contentDOM && this.contentDOM != this.dom && this.dom.contains(this.contentDOM)) {
        atEnd = dom.compareDocumentPosition(this.contentDOM) & 2;
      } else if (this.dom.firstChild) {
        if (offset == 0) { for (var search = dom;; search = search.parentNode) {
          if (search == this.dom) { atEnd = false; break }
          if (search.parentNode.firstChild != search) { break }
        } }
        if (atEnd == null && offset == dom.childNodes.length) { for (var search$1 = dom;; search$1 = search$1.parentNode) {
          if (search$1 == this.dom) { atEnd = true; break }
          if (search$1.parentNode.lastChild != search$1) { break }
        } }
      }
      return (atEnd == null ? bias > 0 : atEnd) ? this.posAtEnd : this.posAtStart
    };

    // Scan up the dom finding the first desc that is a descendant of
    // this one.
    ViewDesc.prototype.nearestDesc = function nearestDesc (dom, onlyNodes) {
      for (var first = true, cur = dom; cur; cur = cur.parentNode) {
        var desc = this.getDesc(cur);
        if (desc && (!onlyNodes || desc.node)) {
          // If dom is outside of this desc's nodeDOM, don't count it.
          if (first && desc.nodeDOM &&
              !(desc.nodeDOM.nodeType == 1 ? desc.nodeDOM.contains(dom.nodeType == 1 ? dom : dom.parentNode) : desc.nodeDOM == dom))
            { first = false; }
          else
            { return desc }
        }
      }
    };

    ViewDesc.prototype.getDesc = function getDesc (dom) {
      var desc = dom.pmViewDesc;
      for (var cur = desc; cur; cur = cur.parent) { if (cur == this) { return desc } }
    };

    ViewDesc.prototype.posFromDOM = function posFromDOM (dom, offset, bias) {
      for (var scan = dom; scan; scan = scan.parentNode) {
        var desc = this.getDesc(scan);
        if (desc) { return desc.localPosFromDOM(dom, offset, bias) }
      }
      return -1
    };

    // : (number) → ?NodeViewDesc
    // Find the desc for the node after the given pos, if any. (When a
    // parent node overrode rendering, there might not be one.)
    ViewDesc.prototype.descAt = function descAt (pos) {
      for (var i = 0, offset = 0; i < this.children.length; i++) {
        var child = this.children[i], end = offset + child.size;
        if (offset == pos && end != offset) {
          while (!child.border && child.children.length) { child = child.children[0]; }
          return child
        }
        if (pos < end) { return child.descAt(pos - offset - child.border) }
        offset = end;
      }
    };

    // : (number, number) → {node: dom.Node, offset: number}
    ViewDesc.prototype.domFromPos = function domFromPos (pos, side) {
      if (!this.contentDOM) { return {node: this.dom, offset: 0} }
      for (var offset = 0, i = 0, first = true;; i++, first = false) {
        // Skip removed or always-before children
        while (i < this.children.length && (this.children[i].beforePosition ||
                                            this.children[i].dom.parentNode != this.contentDOM))
          { offset += this.children[i++].size; }
        var child = i == this.children.length ? null : this.children[i];
        if (offset == pos && (side == 0 || !child || !child.size || child.border || (side < 0 && first)) ||
            child && child.domAtom && pos < offset + child.size) { return {
          node: this.contentDOM,
          offset: child ? domIndex(child.dom) : this.contentDOM.childNodes.length
        } }
        if (!child) { throw new Error("Invalid position " + pos) }
        var end = offset + child.size;
        if (!child.domAtom && (side < 0 && !child.border ? end >= pos : end > pos) &&
            (end > pos || i + 1 >= this.children.length || !this.children[i + 1].beforePosition))
          { return child.domFromPos(pos - offset - child.border, side) }
        offset = end;
      }
    };

    // Used to find a DOM range in a single parent for a given changed
    // range.
    ViewDesc.prototype.parseRange = function parseRange (from, to, base) {
        if ( base === void 0 ) base = 0;

      if (this.children.length == 0)
        { return {node: this.contentDOM, from: from, to: to, fromOffset: 0, toOffset: this.contentDOM.childNodes.length} }

      var fromOffset = -1, toOffset = -1;
      for (var offset = base, i = 0;; i++) {
        var child = this.children[i], end = offset + child.size;
        if (fromOffset == -1 && from <= end) {
          var childBase = offset + child.border;
          // FIXME maybe descend mark views to parse a narrower range?
          if (from >= childBase && to <= end - child.border && child.node &&
              child.contentDOM && this.contentDOM.contains(child.contentDOM))
            { return child.parseRange(from, to, childBase) }

          from = offset;
          for (var j = i; j > 0; j--) {
            var prev = this.children[j - 1];
            if (prev.size && prev.dom.parentNode == this.contentDOM && !prev.emptyChildAt(1)) {
              fromOffset = domIndex(prev.dom) + 1;
              break
            }
            from -= prev.size;
          }
          if (fromOffset == -1) { fromOffset = 0; }
        }
        if (fromOffset > -1 && (end > to || i == this.children.length - 1)) {
          to = end;
          for (var j$1 = i + 1; j$1 < this.children.length; j$1++) {
            var next = this.children[j$1];
            if (next.size && next.dom.parentNode == this.contentDOM && !next.emptyChildAt(-1)) {
              toOffset = domIndex(next.dom);
              break
            }
            to += next.size;
          }
          if (toOffset == -1) { toOffset = this.contentDOM.childNodes.length; }
          break
        }
        offset = end;
      }
      return {node: this.contentDOM, from: from, to: to, fromOffset: fromOffset, toOffset: toOffset}
    };

    ViewDesc.prototype.emptyChildAt = function emptyChildAt (side) {
      if (this.border || !this.contentDOM || !this.children.length) { return false }
      var child = this.children[side < 0 ? 0 : this.children.length - 1];
      return child.size == 0 || child.emptyChildAt(side)
    };

    // : (number) → dom.Node
    ViewDesc.prototype.domAfterPos = function domAfterPos (pos) {
      var ref = this.domFromPos(pos, 0);
        var node = ref.node;
        var offset = ref.offset;
      if (node.nodeType != 1 || offset == node.childNodes.length)
        { throw new RangeError("No node after pos " + pos) }
      return node.childNodes[offset]
    };

    // : (number, number, dom.Document)
    // View descs are responsible for setting any selection that falls
    // entirely inside of them, so that custom implementations can do
    // custom things with the selection. Note that this falls apart when
    // a selection starts in such a node and ends in another, in which
    // case we just use whatever domFromPos produces as a best effort.
    ViewDesc.prototype.setSelection = function setSelection (anchor, head, root, force) {
      // If the selection falls entirely in a child, give it to that child
      var from = Math.min(anchor, head), to = Math.max(anchor, head);
      for (var i = 0, offset = 0; i < this.children.length; i++) {
        var child = this.children[i], end = offset + child.size;
        if (from > offset && to < end)
          { return child.setSelection(anchor - offset - child.border, head - offset - child.border, root, force) }
        offset = end;
      }

      var anchorDOM = this.domFromPos(anchor, anchor ? -1 : 1);
      var headDOM = head == anchor ? anchorDOM : this.domFromPos(head, head ? -1 : 1);
      var domSel = root.getSelection();

      var brKludge = false;
      // On Firefox, using Selection.collapse to put the cursor after a
      // BR node for some reason doesn't always work (#1073). On Safari,
      // the cursor sometimes inexplicable visually lags behind its
      // reported position in such situations (#1092).
      if ((result.gecko || result.safari) && anchor == head) {
        var node = anchorDOM.node;
          var offset$1 = anchorDOM.offset;
        if (node.nodeType == 3) {
          brKludge = offset$1 && node.nodeValue[offset$1 - 1] == "\n";
          // Issue #1128
          if (brKludge && offset$1 == node.nodeValue.length) {
            for (var scan = node, after = (void 0); scan; scan = scan.parentNode) {
              if (after = scan.nextSibling) {
                if (after.nodeName == "BR")
                  { anchorDOM = headDOM = {node: after.parentNode, offset: domIndex(after) + 1}; }
                break
              }
              var desc = scan.pmViewDesc;
              if (desc && desc.node && desc.node.isBlock) { break }
            }
          }
        } else {
          var prev = node.childNodes[offset$1 - 1];
          brKludge = prev && (prev.nodeName == "BR" || prev.contentEditable == "false");
        }
      }
      // Firefox can act strangely when the selection is in front of an
      // uneditable node. See #1163 and https://bugzilla.mozilla.org/show_bug.cgi?id=1709536
      if (result.gecko && domSel.focusNode && domSel.focusNode != headDOM.node && domSel.focusNode.nodeType == 1) {
        var after$1 = domSel.focusNode.childNodes[domSel.focusOffset];
        if (after$1 && after$1.contentEditable == "false") { force = true; }
      }

      if (!(force || brKludge && result.safari) &&
          isEquivalentPosition(anchorDOM.node, anchorDOM.offset, domSel.anchorNode, domSel.anchorOffset) &&
          isEquivalentPosition(headDOM.node, headDOM.offset, domSel.focusNode, domSel.focusOffset))
        { return }

      // Selection.extend can be used to create an 'inverted' selection
      // (one where the focus is before the anchor), but not all
      // browsers support it yet.
      var domSelExtended = false;
      if ((domSel.extend || anchor == head) && !brKludge) {
        domSel.collapse(anchorDOM.node, anchorDOM.offset);
        try {
          if (anchor != head) { domSel.extend(headDOM.node, headDOM.offset); }
          domSelExtended = true;
        } catch (err) {
          // In some cases with Chrome the selection is empty after calling
          // collapse, even when it should be valid. This appears to be a bug, but
          // it is difficult to isolate. If this happens fallback to the old path
          // without using extend.
          if (!(err instanceof DOMException)) { throw err }
          // declare global: DOMException
        }
      }
      if (!domSelExtended) {
        if (anchor > head) { var tmp = anchorDOM; anchorDOM = headDOM; headDOM = tmp; }
        var range = document.createRange();
        range.setEnd(headDOM.node, headDOM.offset);
        range.setStart(anchorDOM.node, anchorDOM.offset);
        domSel.removeAllRanges();
        domSel.addRange(range);
      }
    };

    // : (dom.MutationRecord) → bool
    ViewDesc.prototype.ignoreMutation = function ignoreMutation (mutation) {
      return !this.contentDOM && mutation.type != "selection"
    };

    prototypeAccessors.contentLost.get = function () {
      return this.contentDOM && this.contentDOM != this.dom && !this.dom.contains(this.contentDOM)
    };

    // Remove a subtree of the element tree that has been touched
    // by a DOM change, so that the next update will redraw it.
    ViewDesc.prototype.markDirty = function markDirty (from, to) {
      for (var offset = 0, i = 0; i < this.children.length; i++) {
        var child = this.children[i], end = offset + child.size;
        if (offset == end ? from <= end && to >= offset : from < end && to > offset) {
          var startInside = offset + child.border, endInside = end - child.border;
          if (from >= startInside && to <= endInside) {
            this.dirty = from == offset || to == end ? CONTENT_DIRTY : CHILD_DIRTY;
            if (from == startInside && to == endInside &&
                (child.contentLost || child.dom.parentNode != this.contentDOM)) { child.dirty = NODE_DIRTY; }
            else { child.markDirty(from - startInside, to - startInside); }
            return
          } else {
            child.dirty = child.dom == child.contentDOM && child.dom.parentNode == this.contentDOM ? CONTENT_DIRTY : NODE_DIRTY;
          }
        }
        offset = end;
      }
      this.dirty = CONTENT_DIRTY;
    };

    ViewDesc.prototype.markParentsDirty = function markParentsDirty () {
      var level = 1;
      for (var node = this.parent; node; node = node.parent, level++) {
        var dirty = level == 1 ? CONTENT_DIRTY : CHILD_DIRTY;
        if (node.dirty < dirty) { node.dirty = dirty; }
      }
    };

    prototypeAccessors.domAtom.get = function () { return false };

    Object.defineProperties( ViewDesc.prototype, prototypeAccessors );

    // Reused array to avoid allocating fresh arrays for things that will
    // stay empty anyway.
    var nothing = [];

    // A widget desc represents a widget decoration, which is a DOM node
    // drawn between the document nodes.
    var WidgetViewDesc = /*@__PURE__*/(function (ViewDesc) {
      function WidgetViewDesc(parent, widget, view, pos) {
        var self, dom = widget.type.toDOM;
        if (typeof dom == "function") { dom = dom(view, function () {
          if (!self) { return pos }
          if (self.parent) { return self.parent.posBeforeChild(self) }
        }); }
        if (!widget.type.spec.raw) {
          if (dom.nodeType != 1) {
            var wrap = document.createElement("span");
            wrap.appendChild(dom);
            dom = wrap;
          }
          dom.contentEditable = false;
          dom.classList.add("ProseMirror-widget");
        }
        ViewDesc.call(this, parent, nothing, dom, null);
        this.widget = widget;
        self = this;
      }

      if ( ViewDesc ) WidgetViewDesc.__proto__ = ViewDesc;
      WidgetViewDesc.prototype = Object.create( ViewDesc && ViewDesc.prototype );
      WidgetViewDesc.prototype.constructor = WidgetViewDesc;

      var prototypeAccessors$1 = { beforePosition: { configurable: true },domAtom: { configurable: true } };

      prototypeAccessors$1.beforePosition.get = function () {
        return this.widget.type.side < 0
      };

      WidgetViewDesc.prototype.matchesWidget = function matchesWidget (widget) {
        return this.dirty == NOT_DIRTY && widget.type.eq(this.widget.type)
      };

      WidgetViewDesc.prototype.parseRule = function parseRule () { return {ignore: true} };

      WidgetViewDesc.prototype.stopEvent = function stopEvent (event) {
        var stop = this.widget.spec.stopEvent;
        return stop ? stop(event) : false
      };

      WidgetViewDesc.prototype.ignoreMutation = function ignoreMutation (mutation) {
        return mutation.type != "selection" || this.widget.spec.ignoreSelection
      };

      prototypeAccessors$1.domAtom.get = function () { return true };

      Object.defineProperties( WidgetViewDesc.prototype, prototypeAccessors$1 );

      return WidgetViewDesc;
    }(ViewDesc));

    var CompositionViewDesc = /*@__PURE__*/(function (ViewDesc) {
      function CompositionViewDesc(parent, dom, textDOM, text) {
        ViewDesc.call(this, parent, nothing, dom, null);
        this.textDOM = textDOM;
        this.text = text;
      }

      if ( ViewDesc ) CompositionViewDesc.__proto__ = ViewDesc;
      CompositionViewDesc.prototype = Object.create( ViewDesc && ViewDesc.prototype );
      CompositionViewDesc.prototype.constructor = CompositionViewDesc;

      var prototypeAccessors$2 = { size: { configurable: true } };

      prototypeAccessors$2.size.get = function () { return this.text.length };

      CompositionViewDesc.prototype.localPosFromDOM = function localPosFromDOM (dom, offset) {
        if (dom != this.textDOM) { return this.posAtStart + (offset ? this.size : 0) }
        return this.posAtStart + offset
      };

      CompositionViewDesc.prototype.domFromPos = function domFromPos (pos) {
        return {node: this.textDOM, offset: pos}
      };

      CompositionViewDesc.prototype.ignoreMutation = function ignoreMutation (mut) {
        return mut.type === 'characterData' && mut.target.nodeValue == mut.oldValue
       };

      Object.defineProperties( CompositionViewDesc.prototype, prototypeAccessors$2 );

      return CompositionViewDesc;
    }(ViewDesc));

    // A mark desc represents a mark. May have multiple children,
    // depending on how the mark is split. Note that marks are drawn using
    // a fixed nesting order, for simplicity and predictability, so in
    // some cases they will be split more often than would appear
    // necessary.
    var MarkViewDesc = /*@__PURE__*/(function (ViewDesc) {
      function MarkViewDesc(parent, mark, dom, contentDOM) {
        ViewDesc.call(this, parent, [], dom, contentDOM);
        this.mark = mark;
      }

      if ( ViewDesc ) MarkViewDesc.__proto__ = ViewDesc;
      MarkViewDesc.prototype = Object.create( ViewDesc && ViewDesc.prototype );
      MarkViewDesc.prototype.constructor = MarkViewDesc;

      MarkViewDesc.create = function create (parent, mark, inline, view) {
        var custom = view.nodeViews[mark.type.name];
        var spec = custom && custom(mark, view, inline);
        if (!spec || !spec.dom)
          { spec = DOMSerializer.renderSpec(document, mark.type.spec.toDOM(mark, inline)); }
        return new MarkViewDesc(parent, mark, spec.dom, spec.contentDOM || spec.dom)
      };

      MarkViewDesc.prototype.parseRule = function parseRule () { return {mark: this.mark.type.name, attrs: this.mark.attrs, contentElement: this.contentDOM} };

      MarkViewDesc.prototype.matchesMark = function matchesMark (mark) { return this.dirty != NODE_DIRTY && this.mark.eq(mark) };

      MarkViewDesc.prototype.markDirty = function markDirty (from, to) {
        ViewDesc.prototype.markDirty.call(this, from, to);
        // Move dirty info to nearest node view
        if (this.dirty != NOT_DIRTY) {
          var parent = this.parent;
          while (!parent.node) { parent = parent.parent; }
          if (parent.dirty < this.dirty) { parent.dirty = this.dirty; }
          this.dirty = NOT_DIRTY;
        }
      };

      MarkViewDesc.prototype.slice = function slice (from, to, view) {
        var copy = MarkViewDesc.create(this.parent, this.mark, true, view);
        var nodes = this.children, size = this.size;
        if (to < size) { nodes = replaceNodes(nodes, to, size, view); }
        if (from > 0) { nodes = replaceNodes(nodes, 0, from, view); }
        for (var i = 0; i < nodes.length; i++) { nodes[i].parent = copy; }
        copy.children = nodes;
        return copy
      };

      return MarkViewDesc;
    }(ViewDesc));

    // Node view descs are the main, most common type of view desc, and
    // correspond to an actual node in the document. Unlike mark descs,
    // they populate their child array themselves.
    var NodeViewDesc = /*@__PURE__*/(function (ViewDesc) {
      function NodeViewDesc(parent, node, outerDeco, innerDeco, dom, contentDOM, nodeDOM, view, pos) {
        ViewDesc.call(this, parent, node.isLeaf ? nothing : [], dom, contentDOM);
        this.nodeDOM = nodeDOM;
        this.node = node;
        this.outerDeco = outerDeco;
        this.innerDeco = innerDeco;
        if (contentDOM) { this.updateChildren(view, pos); }
      }

      if ( ViewDesc ) NodeViewDesc.__proto__ = ViewDesc;
      NodeViewDesc.prototype = Object.create( ViewDesc && ViewDesc.prototype );
      NodeViewDesc.prototype.constructor = NodeViewDesc;

      var prototypeAccessors$3 = { size: { configurable: true },border: { configurable: true },domAtom: { configurable: true } };

      // By default, a node is rendered using the `toDOM` method from the
      // node type spec. But client code can use the `nodeViews` spec to
      // supply a custom node view, which can influence various aspects of
      // the way the node works.
      //
      // (Using subclassing for this was intentionally decided against,
      // since it'd require exposing a whole slew of finnicky
      // implementation details to the user code that they probably will
      // never need.)
      NodeViewDesc.create = function create (parent, node, outerDeco, innerDeco, view, pos) {
        var assign;

        var custom = view.nodeViews[node.type.name], descObj;
        var spec = custom && custom(node, view, function () {
          // (This is a function that allows the custom view to find its
          // own position)
          if (!descObj) { return pos }
          if (descObj.parent) { return descObj.parent.posBeforeChild(descObj) }
        }, outerDeco, innerDeco);

        var dom = spec && spec.dom, contentDOM = spec && spec.contentDOM;
        if (node.isText) {
          if (!dom) { dom = document.createTextNode(node.text); }
          else if (dom.nodeType != 3) { throw new RangeError("Text must be rendered as a DOM text node") }
        } else if (!dom) {
    ((assign = DOMSerializer.renderSpec(document, node.type.spec.toDOM(node)), dom = assign.dom, contentDOM = assign.contentDOM));
        }
        if (!contentDOM && !node.isText && dom.nodeName != "BR") { // Chrome gets confused by <br contenteditable=false>
          if (!dom.hasAttribute("contenteditable")) { dom.contentEditable = false; }
          if (node.type.spec.draggable) { dom.draggable = true; }
        }

        var nodeDOM = dom;
        dom = applyOuterDeco(dom, outerDeco, node);

        if (spec)
          { return descObj = new CustomNodeViewDesc(parent, node, outerDeco, innerDeco, dom, contentDOM, nodeDOM,
                                                  spec, view, pos + 1) }
        else if (node.isText)
          { return new TextViewDesc(parent, node, outerDeco, innerDeco, dom, nodeDOM, view) }
        else
          { return new NodeViewDesc(parent, node, outerDeco, innerDeco, dom, contentDOM, nodeDOM, view, pos + 1) }
      };

      NodeViewDesc.prototype.parseRule = function parseRule () {
        var this$1$1 = this;

        // Experimental kludge to allow opt-in re-parsing of nodes
        if (this.node.type.spec.reparseInView) { return null }
        // FIXME the assumption that this can always return the current
        // attrs means that if the user somehow manages to change the
        // attrs in the dom, that won't be picked up. Not entirely sure
        // whether this is a problem
        var rule = {node: this.node.type.name, attrs: this.node.attrs};
        if (this.node.type.spec.code) { rule.preserveWhitespace = "full"; }
        if (this.contentDOM && !this.contentLost) { rule.contentElement = this.contentDOM; }
        else { rule.getContent = function () { return this$1$1.contentDOM ? Fragment.empty : this$1$1.node.content; }; }
        return rule
      };

      NodeViewDesc.prototype.matchesNode = function matchesNode (node, outerDeco, innerDeco) {
        return this.dirty == NOT_DIRTY && node.eq(this.node) &&
          sameOuterDeco(outerDeco, this.outerDeco) && innerDeco.eq(this.innerDeco)
      };

      prototypeAccessors$3.size.get = function () { return this.node.nodeSize };

      prototypeAccessors$3.border.get = function () { return this.node.isLeaf ? 0 : 1 };

      // Syncs `this.children` to match `this.node.content` and the local
      // decorations, possibly introducing nesting for marks. Then, in a
      // separate step, syncs the DOM inside `this.contentDOM` to
      // `this.children`.
      NodeViewDesc.prototype.updateChildren = function updateChildren (view, pos) {
        var this$1$1 = this;

        var inline = this.node.inlineContent, off = pos;
        var composition = view.composing && this.localCompositionInfo(view, pos);
        var localComposition = composition && composition.pos > -1 ? composition : null;
        var compositionInChild = composition && composition.pos < 0;
        var updater = new ViewTreeUpdater(this, localComposition && localComposition.node);
        iterDeco(this.node, this.innerDeco, function (widget, i, insideNode) {
          if (widget.spec.marks)
            { updater.syncToMarks(widget.spec.marks, inline, view); }
          else if (widget.type.side >= 0 && !insideNode)
            { updater.syncToMarks(i == this$1$1.node.childCount ? Mark$1.none : this$1$1.node.child(i).marks, inline, view); }
          // If the next node is a desc matching this widget, reuse it,
          // otherwise insert the widget as a new view desc.
          updater.placeWidget(widget, view, off);
        }, function (child, outerDeco, innerDeco, i) {
          // Make sure the wrapping mark descs match the node's marks.
          updater.syncToMarks(child.marks, inline, view);
          // Try several strategies for drawing this node
          var compIndex;
          if (updater.findNodeMatch(child, outerDeco, innerDeco, i)) ; else if (compositionInChild && view.state.selection.from > off &&
                     view.state.selection.to < off + child.nodeSize &&
                     (compIndex = updater.findIndexWithChild(composition.node)) > -1 &&
                     updater.updateNodeAt(child, outerDeco, innerDeco, compIndex, view)) ; else if (updater.updateNextNode(child, outerDeco, innerDeco, view, i)) ; else {
            // Add it as a new view
            updater.addNode(child, outerDeco, innerDeco, view, off);
          }
          off += child.nodeSize;
        });
        // Drop all remaining descs after the current position.
        updater.syncToMarks(nothing, inline, view);
        if (this.node.isTextblock) { updater.addTextblockHacks(); }
        updater.destroyRest();

        // Sync the DOM if anything changed
        if (updater.changed || this.dirty == CONTENT_DIRTY) {
          // May have to protect focused DOM from being changed if a composition is active
          if (localComposition) { this.protectLocalComposition(view, localComposition); }
          renderDescs(this.contentDOM, this.children, view);
          if (result.ios) { iosHacks(this.dom); }
        }
      };

      NodeViewDesc.prototype.localCompositionInfo = function localCompositionInfo (view, pos) {
        // Only do something if both the selection and a focused text node
        // are inside of this node
        var ref = view.state.selection;
        var from = ref.from;
        var to = ref.to;
        if (!(view.state.selection instanceof TextSelection) || from < pos || to > pos + this.node.content.size) { return }
        var sel = view.root.getSelection();
        var textNode = nearbyTextNode(sel.focusNode, sel.focusOffset);
        if (!textNode || !this.dom.contains(textNode.parentNode)) { return }

        if (this.node.inlineContent) {
          // Find the text in the focused node in the node, stop if it's not
          // there (may have been modified through other means, in which
          // case it should overwritten)
          var text = textNode.nodeValue;
          var textPos = findTextInFragment(this.node.content, text, from - pos, to - pos);
          return textPos < 0 ? null : {node: textNode, pos: textPos, text: text}
        } else {
          return {node: textNode, pos: -1}
        }
      };

      NodeViewDesc.prototype.protectLocalComposition = function protectLocalComposition (view, ref) {
        var node = ref.node;
        var pos = ref.pos;
        var text = ref.text;

        // The node is already part of a local view desc, leave it there
        if (this.getDesc(node)) { return }

        // Create a composition view for the orphaned nodes
        var topNode = node;
        for (;; topNode = topNode.parentNode) {
          if (topNode.parentNode == this.contentDOM) { break }
          while (topNode.previousSibling) { topNode.parentNode.removeChild(topNode.previousSibling); }
          while (topNode.nextSibling) { topNode.parentNode.removeChild(topNode.nextSibling); }
          if (topNode.pmViewDesc) { topNode.pmViewDesc = null; }
        }
        var desc = new CompositionViewDesc(this, topNode, node, text);
        view.compositionNodes.push(desc);

        // Patch up this.children to contain the composition view
        this.children = replaceNodes(this.children, pos, pos + text.length, view, desc);
      };

      // : (Node, [Decoration], DecorationSource, EditorView) → bool
      // If this desc be updated to match the given node decoration,
      // do so and return true.
      NodeViewDesc.prototype.update = function update (node, outerDeco, innerDeco, view) {
        if (this.dirty == NODE_DIRTY ||
            !node.sameMarkup(this.node)) { return false }
        this.updateInner(node, outerDeco, innerDeco, view);
        return true
      };

      NodeViewDesc.prototype.updateInner = function updateInner (node, outerDeco, innerDeco, view) {
        this.updateOuterDeco(outerDeco);
        this.node = node;
        this.innerDeco = innerDeco;
        if (this.contentDOM) { this.updateChildren(view, this.posAtStart); }
        this.dirty = NOT_DIRTY;
      };

      NodeViewDesc.prototype.updateOuterDeco = function updateOuterDeco (outerDeco) {
        if (sameOuterDeco(outerDeco, this.outerDeco)) { return }
        var needsWrap = this.nodeDOM.nodeType != 1;
        var oldDOM = this.dom;
        this.dom = patchOuterDeco(this.dom, this.nodeDOM,
                                  computeOuterDeco(this.outerDeco, this.node, needsWrap),
                                  computeOuterDeco(outerDeco, this.node, needsWrap));
        if (this.dom != oldDOM) {
          oldDOM.pmViewDesc = null;
          this.dom.pmViewDesc = this;
        }
        this.outerDeco = outerDeco;
      };

      // Mark this node as being the selected node.
      NodeViewDesc.prototype.selectNode = function selectNode () {
        this.nodeDOM.classList.add("ProseMirror-selectednode");
        if (this.contentDOM || !this.node.type.spec.draggable) { this.dom.draggable = true; }
      };

      // Remove selected node marking from this node.
      NodeViewDesc.prototype.deselectNode = function deselectNode () {
        this.nodeDOM.classList.remove("ProseMirror-selectednode");
        if (this.contentDOM || !this.node.type.spec.draggable) { this.dom.removeAttribute("draggable"); }
      };

      prototypeAccessors$3.domAtom.get = function () { return this.node.isAtom };

      Object.defineProperties( NodeViewDesc.prototype, prototypeAccessors$3 );

      return NodeViewDesc;
    }(ViewDesc));

    // Create a view desc for the top-level document node, to be exported
    // and used by the view class.
    function docViewDesc(doc, outerDeco, innerDeco, dom, view) {
      applyOuterDeco(dom, outerDeco, doc);
      return new NodeViewDesc(null, doc, outerDeco, innerDeco, dom, dom, dom, view, 0)
    }

    var TextViewDesc = /*@__PURE__*/(function (NodeViewDesc) {
      function TextViewDesc(parent, node, outerDeco, innerDeco, dom, nodeDOM, view) {
        NodeViewDesc.call(this, parent, node, outerDeco, innerDeco, dom, null, nodeDOM, view);
      }

      if ( NodeViewDesc ) TextViewDesc.__proto__ = NodeViewDesc;
      TextViewDesc.prototype = Object.create( NodeViewDesc && NodeViewDesc.prototype );
      TextViewDesc.prototype.constructor = TextViewDesc;

      var prototypeAccessors$4 = { domAtom: { configurable: true } };

      TextViewDesc.prototype.parseRule = function parseRule () {
        var skip = this.nodeDOM.parentNode;
        while (skip && skip != this.dom && !skip.pmIsDeco) { skip = skip.parentNode; }
        return {skip: skip || true}
      };

      TextViewDesc.prototype.update = function update (node, outerDeco, _, view) {
        if (this.dirty == NODE_DIRTY || (this.dirty != NOT_DIRTY && !this.inParent()) ||
            !node.sameMarkup(this.node)) { return false }
        this.updateOuterDeco(outerDeco);
        if ((this.dirty != NOT_DIRTY || node.text != this.node.text) && node.text != this.nodeDOM.nodeValue) {
          this.nodeDOM.nodeValue = node.text;
          if (view.trackWrites == this.nodeDOM) { view.trackWrites = null; }
        }
        this.node = node;
        this.dirty = NOT_DIRTY;
        return true
      };

      TextViewDesc.prototype.inParent = function inParent () {
        var parentDOM = this.parent.contentDOM;
        for (var n = this.nodeDOM; n; n = n.parentNode) { if (n == parentDOM) { return true } }
        return false
      };

      TextViewDesc.prototype.domFromPos = function domFromPos (pos) {
        return {node: this.nodeDOM, offset: pos}
      };

      TextViewDesc.prototype.localPosFromDOM = function localPosFromDOM (dom, offset, bias) {
        if (dom == this.nodeDOM) { return this.posAtStart + Math.min(offset, this.node.text.length) }
        return NodeViewDesc.prototype.localPosFromDOM.call(this, dom, offset, bias)
      };

      TextViewDesc.prototype.ignoreMutation = function ignoreMutation (mutation) {
        return mutation.type != "characterData" && mutation.type != "selection"
      };

      TextViewDesc.prototype.slice = function slice (from, to, view) {
        var node = this.node.cut(from, to), dom = document.createTextNode(node.text);
        return new TextViewDesc(this.parent, node, this.outerDeco, this.innerDeco, dom, dom, view)
      };

      TextViewDesc.prototype.markDirty = function markDirty (from, to) {
        NodeViewDesc.prototype.markDirty.call(this, from, to);
        if (this.dom != this.nodeDOM && (from == 0 || to == this.nodeDOM.nodeValue.length))
          { this.dirty = NODE_DIRTY; }
      };

      prototypeAccessors$4.domAtom.get = function () { return false };

      Object.defineProperties( TextViewDesc.prototype, prototypeAccessors$4 );

      return TextViewDesc;
    }(NodeViewDesc));

    // A dummy desc used to tag trailing BR or IMG nodes created to work
    // around contentEditable terribleness.
    var TrailingHackViewDesc = /*@__PURE__*/(function (ViewDesc) {
      function TrailingHackViewDesc () {
        ViewDesc.apply(this, arguments);
      }

      if ( ViewDesc ) TrailingHackViewDesc.__proto__ = ViewDesc;
      TrailingHackViewDesc.prototype = Object.create( ViewDesc && ViewDesc.prototype );
      TrailingHackViewDesc.prototype.constructor = TrailingHackViewDesc;

      var prototypeAccessors$5 = { domAtom: { configurable: true } };

      TrailingHackViewDesc.prototype.parseRule = function parseRule () { return {ignore: true} };
      TrailingHackViewDesc.prototype.matchesHack = function matchesHack (nodeName) { return this.dirty == NOT_DIRTY && this.dom.nodeName == nodeName };
      prototypeAccessors$5.domAtom.get = function () { return true };

      Object.defineProperties( TrailingHackViewDesc.prototype, prototypeAccessors$5 );

      return TrailingHackViewDesc;
    }(ViewDesc));

    // A separate subclass is used for customized node views, so that the
    // extra checks only have to be made for nodes that are actually
    // customized.
    var CustomNodeViewDesc = /*@__PURE__*/(function (NodeViewDesc) {
      function CustomNodeViewDesc(parent, node, outerDeco, innerDeco, dom, contentDOM, nodeDOM, spec, view, pos) {
        NodeViewDesc.call(this, parent, node, outerDeco, innerDeco, dom, contentDOM, nodeDOM, view, pos);
        this.spec = spec;
      }

      if ( NodeViewDesc ) CustomNodeViewDesc.__proto__ = NodeViewDesc;
      CustomNodeViewDesc.prototype = Object.create( NodeViewDesc && NodeViewDesc.prototype );
      CustomNodeViewDesc.prototype.constructor = CustomNodeViewDesc;

      // A custom `update` method gets to decide whether the update goes
      // through. If it does, and there's a `contentDOM` node, our logic
      // updates the children.
      CustomNodeViewDesc.prototype.update = function update (node, outerDeco, innerDeco, view) {
        if (this.dirty == NODE_DIRTY) { return false }
        if (this.spec.update) {
          var result = this.spec.update(node, outerDeco, innerDeco);
          if (result) { this.updateInner(node, outerDeco, innerDeco, view); }
          return result
        } else if (!this.contentDOM && !node.isLeaf) {
          return false
        } else {
          return NodeViewDesc.prototype.update.call(this, node, outerDeco, innerDeco, view)
        }
      };

      CustomNodeViewDesc.prototype.selectNode = function selectNode () {
        this.spec.selectNode ? this.spec.selectNode() : NodeViewDesc.prototype.selectNode.call(this);
      };

      CustomNodeViewDesc.prototype.deselectNode = function deselectNode () {
        this.spec.deselectNode ? this.spec.deselectNode() : NodeViewDesc.prototype.deselectNode.call(this);
      };

      CustomNodeViewDesc.prototype.setSelection = function setSelection (anchor, head, root, force) {
        this.spec.setSelection ? this.spec.setSelection(anchor, head, root)
          : NodeViewDesc.prototype.setSelection.call(this, anchor, head, root, force);
      };

      CustomNodeViewDesc.prototype.destroy = function destroy () {
        if (this.spec.destroy) { this.spec.destroy(); }
        NodeViewDesc.prototype.destroy.call(this);
      };

      CustomNodeViewDesc.prototype.stopEvent = function stopEvent (event) {
        return this.spec.stopEvent ? this.spec.stopEvent(event) : false
      };

      CustomNodeViewDesc.prototype.ignoreMutation = function ignoreMutation (mutation) {
        return this.spec.ignoreMutation ? this.spec.ignoreMutation(mutation) : NodeViewDesc.prototype.ignoreMutation.call(this, mutation)
      };

      return CustomNodeViewDesc;
    }(NodeViewDesc));

    // : (dom.Node, [ViewDesc])
    // Sync the content of the given DOM node with the nodes associated
    // with the given array of view descs, recursing into mark descs
    // because this should sync the subtree for a whole node at a time.
    function renderDescs(parentDOM, descs, view) {
      var dom = parentDOM.firstChild, written = false;
      for (var i = 0; i < descs.length; i++) {
        var desc = descs[i], childDOM = desc.dom;
        if (childDOM.parentNode == parentDOM) {
          while (childDOM != dom) { dom = rm(dom); written = true; }
          dom = dom.nextSibling;
        } else {
          written = true;
          parentDOM.insertBefore(childDOM, dom);
        }
        if (desc instanceof MarkViewDesc) {
          var pos = dom ? dom.previousSibling : parentDOM.lastChild;
          renderDescs(desc.contentDOM, desc.children, view);
          dom = pos ? pos.nextSibling : parentDOM.firstChild;
        }
      }
      while (dom) { dom = rm(dom); written = true; }
      if (written && view.trackWrites == parentDOM) { view.trackWrites = null; }
    }

    function OuterDecoLevel(nodeName) {
      if (nodeName) { this.nodeName = nodeName; }
    }
    OuterDecoLevel.prototype = Object.create(null);

    var noDeco = [new OuterDecoLevel];

    function computeOuterDeco(outerDeco, node, needsWrap) {
      if (outerDeco.length == 0) { return noDeco }

      var top = needsWrap ? noDeco[0] : new OuterDecoLevel, result = [top];

      for (var i = 0; i < outerDeco.length; i++) {
        var attrs = outerDeco[i].type.attrs;
        if (!attrs) { continue }
        if (attrs.nodeName)
          { result.push(top = new OuterDecoLevel(attrs.nodeName)); }

        for (var name in attrs) {
          var val = attrs[name];
          if (val == null) { continue }
          if (needsWrap && result.length == 1)
            { result.push(top = new OuterDecoLevel(node.isInline ? "span" : "div")); }
          if (name == "class") { top.class = (top.class ? top.class + " " : "") + val; }
          else if (name == "style") { top.style = (top.style ? top.style + ";" : "") + val; }
          else if (name != "nodeName") { top[name] = val; }
        }
      }

      return result
    }

    function patchOuterDeco(outerDOM, nodeDOM, prevComputed, curComputed) {
      // Shortcut for trivial case
      if (prevComputed == noDeco && curComputed == noDeco) { return nodeDOM }

      var curDOM = nodeDOM;
      for (var i = 0; i < curComputed.length; i++) {
        var deco = curComputed[i], prev = prevComputed[i];
        if (i) {
          var parent = (void 0);
          if (prev && prev.nodeName == deco.nodeName && curDOM != outerDOM &&
              (parent = curDOM.parentNode) && parent.tagName.toLowerCase() == deco.nodeName) {
            curDOM = parent;
          } else {
            parent = document.createElement(deco.nodeName);
            parent.pmIsDeco = true;
            parent.appendChild(curDOM);
            prev = noDeco[0];
            curDOM = parent;
          }
        }
        patchAttributes(curDOM, prev || noDeco[0], deco);
      }
      return curDOM
    }

    function patchAttributes(dom, prev, cur) {
      for (var name in prev)
        { if (name != "class" && name != "style" && name != "nodeName" && !(name in cur))
          { dom.removeAttribute(name); } }
      for (var name$1 in cur)
        { if (name$1 != "class" && name$1 != "style" && name$1 != "nodeName" && cur[name$1] != prev[name$1])
          { dom.setAttribute(name$1, cur[name$1]); } }
      if (prev.class != cur.class) {
        var prevList = prev.class ? prev.class.split(" ").filter(Boolean) : nothing;
        var curList = cur.class ? cur.class.split(" ").filter(Boolean) : nothing;
        for (var i = 0; i < prevList.length; i++) { if (curList.indexOf(prevList[i]) == -1)
          { dom.classList.remove(prevList[i]); } }
        for (var i$1 = 0; i$1 < curList.length; i$1++) { if (prevList.indexOf(curList[i$1]) == -1)
          { dom.classList.add(curList[i$1]); } }
      }
      if (prev.style != cur.style) {
        if (prev.style) {
          var prop = /\s*([\w\-\xa1-\uffff]+)\s*:(?:"(?:\\.|[^"])*"|'(?:\\.|[^'])*'|\(.*?\)|[^;])*/g, m;
          while (m = prop.exec(prev.style))
            { dom.style.removeProperty(m[1]); }
        }
        if (cur.style)
          { dom.style.cssText += cur.style; }
      }
    }

    function applyOuterDeco(dom, deco, node) {
      return patchOuterDeco(dom, dom, noDeco, computeOuterDeco(deco, node, dom.nodeType != 1))
    }

    // : ([Decoration], [Decoration]) → bool
    function sameOuterDeco(a, b) {
      if (a.length != b.length) { return false }
      for (var i = 0; i < a.length; i++) { if (!a[i].type.eq(b[i].type)) { return false } }
      return true
    }

    // Remove a DOM node and return its next sibling.
    function rm(dom) {
      var next = dom.nextSibling;
      dom.parentNode.removeChild(dom);
      return next
    }

    // Helper class for incrementally updating a tree of mark descs and
    // the widget and node descs inside of them.
    var ViewTreeUpdater = function ViewTreeUpdater(top, lockedNode) {
      this.top = top;
      this.lock = lockedNode;
      // Index into `this.top`'s child array, represents the current
      // update position.
      this.index = 0;
      // When entering a mark, the current top and index are pushed
      // onto this.
      this.stack = [];
      // Tracks whether anything was changed
      this.changed = false;

      this.preMatch = preMatch(top.node.content, top.children);
    };

    // Destroy and remove the children between the given indices in
    // `this.top`.
    ViewTreeUpdater.prototype.destroyBetween = function destroyBetween (start, end) {
      if (start == end) { return }
      for (var i = start; i < end; i++) { this.top.children[i].destroy(); }
      this.top.children.splice(start, end - start);
      this.changed = true;
    };

    // Destroy all remaining children in `this.top`.
    ViewTreeUpdater.prototype.destroyRest = function destroyRest () {
      this.destroyBetween(this.index, this.top.children.length);
    };

    // : ([Mark], EditorView)
    // Sync the current stack of mark descs with the given array of
    // marks, reusing existing mark descs when possible.
    ViewTreeUpdater.prototype.syncToMarks = function syncToMarks (marks, inline, view) {
      var keep = 0, depth = this.stack.length >> 1;
      var maxKeep = Math.min(depth, marks.length);
      while (keep < maxKeep &&
             (keep == depth - 1 ? this.top : this.stack[(keep + 1) << 1]).matchesMark(marks[keep]) && marks[keep].type.spec.spanning !== false)
        { keep++; }

      while (keep < depth) {
        this.destroyRest();
        this.top.dirty = NOT_DIRTY;
        this.index = this.stack.pop();
        this.top = this.stack.pop();
        depth--;
      }
      while (depth < marks.length) {
        this.stack.push(this.top, this.index + 1);
        var found = -1;
        for (var i = this.index; i < Math.min(this.index + 3, this.top.children.length); i++) {
          if (this.top.children[i].matchesMark(marks[depth])) { found = i; break }
        }
        if (found > -1) {
          if (found > this.index) {
            this.changed = true;
            this.destroyBetween(this.index, found);
          }
          this.top = this.top.children[this.index];
        } else {
          var markDesc = MarkViewDesc.create(this.top, marks[depth], inline, view);
          this.top.children.splice(this.index, 0, markDesc);
          this.top = markDesc;
          this.changed = true;
        }
        this.index = 0;
        depth++;
      }
    };

    // : (Node, [Decoration], DecorationSource) → bool
    // Try to find a node desc matching the given data. Skip over it and
    // return true when successful.
    ViewTreeUpdater.prototype.findNodeMatch = function findNodeMatch (node, outerDeco, innerDeco, index) {
      var children = this.top.children, found = -1;
      if (index >= this.preMatch.index) {
        for (var i = this.index; i < children.length; i++) { if (children[i].matchesNode(node, outerDeco, innerDeco)) {
          found = i;
          break
        } }
      } else {
        for (var i$1 = this.index, e = Math.min(children.length, i$1 + 1); i$1 < e; i$1++) {
          var child = children[i$1];
          if (child.matchesNode(node, outerDeco, innerDeco) && !this.preMatch.matched.has(child)) {
            found = i$1;
            break
          }
        }
      }
      if (found < 0) { return false }
      this.destroyBetween(this.index, found);
      this.index++;
      return true
    };

    ViewTreeUpdater.prototype.updateNodeAt = function updateNodeAt (node, outerDeco, innerDeco, index, view) {
      var child = this.top.children[index];
      if (!child.update(node, outerDeco, innerDeco, view)) { return false }
      this.destroyBetween(this.index, index);
      this.index = index + 1;
      return true
    };

    ViewTreeUpdater.prototype.findIndexWithChild = function findIndexWithChild (domNode) {
      for (;;) {
        var parent = domNode.parentNode;
        if (!parent) { return -1 }
        if (parent == this.top.contentDOM) {
          var desc = domNode.pmViewDesc;
          if (desc) { for (var i = this.index; i < this.top.children.length; i++) {
            if (this.top.children[i] == desc) { return i }
          } }
          return -1
        }
        domNode = parent;
      }
    };

    // : (Node, [Decoration], DecorationSource, EditorView, Fragment, number) → bool
    // Try to update the next node, if any, to the given data. Checks
    // pre-matches to avoid overwriting nodes that could still be used.
    ViewTreeUpdater.prototype.updateNextNode = function updateNextNode (node, outerDeco, innerDeco, view, index) {
      for (var i = this.index; i < this.top.children.length; i++) {
        var next = this.top.children[i];
        if (next instanceof NodeViewDesc) {
          var preMatch = this.preMatch.matched.get(next);
          if (preMatch != null && preMatch != index) { return false }
          var nextDOM = next.dom;

          // Can't update if nextDOM is or contains this.lock, except if
          // it's a text node whose content already matches the new text
          // and whose decorations match the new ones.
          var locked = this.lock && (nextDOM == this.lock || nextDOM.nodeType == 1 && nextDOM.contains(this.lock.parentNode)) &&
              !(node.isText && next.node && next.node.isText && next.nodeDOM.nodeValue == node.text &&
                next.dirty != NODE_DIRTY && sameOuterDeco(outerDeco, next.outerDeco));
          if (!locked && next.update(node, outerDeco, innerDeco, view)) {
            this.destroyBetween(this.index, i);
            if (next.dom != nextDOM) { this.changed = true; }
            this.index++;
            return true
          }
          break
        }
      }
      return false
    };

    // : (Node, [Decoration], DecorationSource, EditorView)
    // Insert the node as a newly created node desc.
    ViewTreeUpdater.prototype.addNode = function addNode (node, outerDeco, innerDeco, view, pos) {
      this.top.children.splice(this.index++, 0, NodeViewDesc.create(this.top, node, outerDeco, innerDeco, view, pos));
      this.changed = true;
    };

    ViewTreeUpdater.prototype.placeWidget = function placeWidget (widget, view, pos) {
      var next = this.index < this.top.children.length ? this.top.children[this.index] : null;
      if (next && next.matchesWidget(widget) && (widget == next.widget || !next.widget.type.toDOM.parentNode)) {
        this.index++;
      } else {
        var desc = new WidgetViewDesc(this.top, widget, view, pos);
        this.top.children.splice(this.index++, 0, desc);
        this.changed = true;
      }
    };

    // Make sure a textblock looks and behaves correctly in
    // contentEditable.
    ViewTreeUpdater.prototype.addTextblockHacks = function addTextblockHacks () {
      var lastChild = this.top.children[this.index - 1];
      while (lastChild instanceof MarkViewDesc) { lastChild = lastChild.children[lastChild.children.length - 1]; }

      if (!lastChild || // Empty textblock
          !(lastChild instanceof TextViewDesc) ||
          /\n$/.test(lastChild.node.text)) {
        // Avoid a bug in Safari's cursor drawing (#1165)
        if (result.safari && lastChild && lastChild.dom.contentEditable == "false")
          { this.addHackNode("IMG"); }
        this.addHackNode("BR");
      }
    };

    ViewTreeUpdater.prototype.addHackNode = function addHackNode (nodeName) {
      if (this.index < this.top.children.length && this.top.children[this.index].matchesHack(nodeName)) {
        this.index++;
      } else {
        var dom = document.createElement(nodeName);
        this.top.children.splice(this.index++, 0, new TrailingHackViewDesc(this.top, nothing, dom, null));
        this.changed = true;
      }
    };

    // : (Fragment, [ViewDesc]) → {index: number, matched: Map<ViewDesc, number>}
    // Iterate from the end of the fragment and array of descs to find
    // directly matching ones, in order to avoid overeagerly reusing those
    // for other nodes. Returns the fragment index of the first node that
    // is part of the sequence of matched nodes at the end of the
    // fragment.
    function preMatch(frag, descs) {
      var fI = frag.childCount, dI = descs.length, matched = new Map;
      for (; fI > 0 && dI > 0; dI--) {
        var desc = descs[dI - 1], node = desc.node;
        if (!node) { continue }
        if (node != frag.child(fI - 1)) { break }
        --fI;
        matched.set(desc, fI);
      }
      return {index: fI, matched: matched}
    }

    function compareSide(a, b) { return a.type.side - b.type.side }

    // : (ViewDesc, DecorationSource, (Decoration, number), (Node, [Decoration], DecorationSource, number))
    // This function abstracts iterating over the nodes and decorations in
    // a fragment. Calls `onNode` for each node, with its local and child
    // decorations. Splits text nodes when there is a decoration starting
    // or ending inside of them. Calls `onWidget` for each widget.
    function iterDeco(parent, deco, onWidget, onNode) {
      var locals = deco.locals(parent), offset = 0;
      // Simple, cheap variant for when there are no local decorations
      if (locals.length == 0) {
        for (var i = 0; i < parent.childCount; i++) {
          var child = parent.child(i);
          onNode(child, locals, deco.forChild(offset, child), i);
          offset += child.nodeSize;
        }
        return
      }

      var decoIndex = 0, active = [], restNode = null;
      for (var parentIndex = 0;;) {
        if (decoIndex < locals.length && locals[decoIndex].to == offset) {
          var widget = locals[decoIndex++], widgets = (void 0);
          while (decoIndex < locals.length && locals[decoIndex].to == offset)
            { (widgets || (widgets = [widget])).push(locals[decoIndex++]); }
          if (widgets) {
            widgets.sort(compareSide);
            for (var i$1 = 0; i$1 < widgets.length; i$1++) { onWidget(widgets[i$1], parentIndex, !!restNode); }
          } else {
            onWidget(widget, parentIndex, !!restNode);
          }
        }

        var child$1 = (void 0), index = (void 0);
        if (restNode) {
          index = -1;
          child$1 = restNode;
          restNode = null;
        } else if (parentIndex < parent.childCount) {
          index = parentIndex;
          child$1 = parent.child(parentIndex++);
        } else {
          break
        }

        for (var i$2 = 0; i$2 < active.length; i$2++) { if (active[i$2].to <= offset) { active.splice(i$2--, 1); } }
        while (decoIndex < locals.length && locals[decoIndex].from <= offset && locals[decoIndex].to > offset)
          { active.push(locals[decoIndex++]); }

        var end = offset + child$1.nodeSize;
        if (child$1.isText) {
          var cutAt = end;
          if (decoIndex < locals.length && locals[decoIndex].from < cutAt) { cutAt = locals[decoIndex].from; }
          for (var i$3 = 0; i$3 < active.length; i$3++) { if (active[i$3].to < cutAt) { cutAt = active[i$3].to; } }
          if (cutAt < end) {
            restNode = child$1.cut(cutAt - offset);
            child$1 = child$1.cut(0, cutAt - offset);
            end = cutAt;
            index = -1;
          }
        }

        var outerDeco = !active.length ? nothing
            : child$1.isInline && !child$1.isLeaf ? active.filter(function (d) { return !d.inline; })
            : active.slice();
        onNode(child$1, outerDeco, deco.forChild(offset, child$1), index);
        offset = end;
      }
    }

    // List markers in Mobile Safari will mysteriously disappear
    // sometimes. This works around that.
    function iosHacks(dom) {
      if (dom.nodeName == "UL" || dom.nodeName == "OL") {
        var oldCSS = dom.style.cssText;
        dom.style.cssText = oldCSS + "; list-style: square !important";
        window.getComputedStyle(dom).listStyle;
        dom.style.cssText = oldCSS;
      }
    }

    function nearbyTextNode(node, offset) {
      for (;;) {
        if (node.nodeType == 3) { return node }
        if (node.nodeType == 1 && offset > 0) {
          if (node.childNodes.length > offset && node.childNodes[offset].nodeType == 3)
            { return node.childNodes[offset] }
          node = node.childNodes[offset - 1];
          offset = nodeSize(node);
        } else if (node.nodeType == 1 && offset < node.childNodes.length) {
          node = node.childNodes[offset];
          offset = 0;
        } else {
          return null
        }
      }
    }

    // Find a piece of text in an inline fragment, overlapping from-to
    function findTextInFragment(frag, text, from, to) {
      for (var i = 0, pos = 0; i < frag.childCount && pos <= to;) {
        var child = frag.child(i++), childStart = pos;
        pos += child.nodeSize;
        if (!child.isText) { continue }
        var str = child.text;
        while (i < frag.childCount) {
          var next = frag.child(i++);
          pos += next.nodeSize;
          if (!next.isText) { break }
          str += next.text;
        }
        if (pos >= from) {
          var found = str.lastIndexOf(text, to - childStart);
          if (found >= 0 && found + text.length + childStart >= from)
            { return childStart + found }
        }
      }
      return -1
    }

    // Replace range from-to in an array of view descs with replacement
    // (may be null to just delete). This goes very much against the grain
    // of the rest of this code, which tends to create nodes with the
    // right shape in one go, rather than messing with them after
    // creation, but is necessary in the composition hack.
    function replaceNodes(nodes, from, to, view, replacement) {
      var result = [];
      for (var i = 0, off = 0; i < nodes.length; i++) {
        var child = nodes[i], start = off, end = off += child.size;
        if (start >= to || end <= from) {
          result.push(child);
        } else {
          if (start < from) { result.push(child.slice(0, from - start, view)); }
          if (replacement) {
            result.push(replacement);
            replacement = null;
          }
          if (end > to) { result.push(child.slice(to - start, child.size, view)); }
        }
      }
      return result
    }

    function selectionFromDOM(view, origin) {
      var domSel = view.root.getSelection(), doc = view.state.doc;
      if (!domSel.focusNode) { return null }
      var nearestDesc = view.docView.nearestDesc(domSel.focusNode), inWidget = nearestDesc && nearestDesc.size == 0;
      var head = view.docView.posFromDOM(domSel.focusNode, domSel.focusOffset);
      if (head < 0) { return null }
      var $head = doc.resolve(head), $anchor, selection;
      if (selectionCollapsed(domSel)) {
        $anchor = $head;
        while (nearestDesc && !nearestDesc.node) { nearestDesc = nearestDesc.parent; }
        if (nearestDesc && nearestDesc.node.isAtom && NodeSelection.isSelectable(nearestDesc.node) && nearestDesc.parent
            && !(nearestDesc.node.isInline && isOnEdge(domSel.focusNode, domSel.focusOffset, nearestDesc.dom))) {
          var pos = nearestDesc.posBefore;
          selection = new NodeSelection(head == pos ? $head : doc.resolve(pos));
        }
      } else {
        var anchor = view.docView.posFromDOM(domSel.anchorNode, domSel.anchorOffset);
        if (anchor < 0) { return null }
        $anchor = doc.resolve(anchor);
      }

      if (!selection) {
        var bias = origin == "pointer" || (view.state.selection.head < $head.pos && !inWidget) ? 1 : -1;
        selection = selectionBetween(view, $anchor, $head, bias);
      }
      return selection
    }

    function editorOwnsSelection(view) {
      return view.editable ? view.hasFocus() :
        hasSelection(view) && document.activeElement && document.activeElement.contains(view.dom)
    }

    function selectionToDOM(view, force) {
      var sel = view.state.selection;
      syncNodeSelection(view, sel);

      if (!editorOwnsSelection(view)) { return }

      view.domObserver.disconnectSelection();

      if (view.cursorWrapper) {
        selectCursorWrapper(view);
      } else {
        var anchor = sel.anchor;
        var head = sel.head;
        var resetEditableFrom, resetEditableTo;
        if (brokenSelectBetweenUneditable && !(sel instanceof TextSelection)) {
          if (!sel.$from.parent.inlineContent)
            { resetEditableFrom = temporarilyEditableNear(view, sel.from); }
          if (!sel.empty && !sel.$from.parent.inlineContent)
            { resetEditableTo = temporarilyEditableNear(view, sel.to); }
        }
        view.docView.setSelection(anchor, head, view.root, force);
        if (brokenSelectBetweenUneditable) {
          if (resetEditableFrom) { resetEditable(resetEditableFrom); }
          if (resetEditableTo) { resetEditable(resetEditableTo); }
        }
        if (sel.visible) {
          view.dom.classList.remove("ProseMirror-hideselection");
        } else {
          view.dom.classList.add("ProseMirror-hideselection");
          if ("onselectionchange" in document) { removeClassOnSelectionChange(view); }
        }
      }

      view.domObserver.setCurSelection();
      view.domObserver.connectSelection();
    }

    // Kludge to work around Webkit not allowing a selection to start/end
    // between non-editable block nodes. We briefly make something
    // editable, set the selection, then set it uneditable again.

    var brokenSelectBetweenUneditable = result.safari || result.chrome && result.chrome_version < 63;

    function temporarilyEditableNear(view, pos) {
      var ref = view.docView.domFromPos(pos, 0);
      var node = ref.node;
      var offset = ref.offset;
      var after = offset < node.childNodes.length ? node.childNodes[offset] : null;
      var before = offset ? node.childNodes[offset - 1] : null;
      if (result.safari && after && after.contentEditable == "false") { return setEditable(after) }
      if ((!after || after.contentEditable == "false") && (!before || before.contentEditable == "false")) {
        if (after) { return setEditable(after) }
        else if (before) { return setEditable(before) }
      }
    }

    function setEditable(element) {
      element.contentEditable = "true";
      if (result.safari && element.draggable) { element.draggable = false; element.wasDraggable = true; }
      return element
    }

    function resetEditable(element) {
      element.contentEditable = "false";
      if (element.wasDraggable) { element.draggable = true; element.wasDraggable = null; }
    }

    function removeClassOnSelectionChange(view) {
      var doc = view.dom.ownerDocument;
      doc.removeEventListener("selectionchange", view.hideSelectionGuard);
      var domSel = view.root.getSelection();
      var node = domSel.anchorNode, offset = domSel.anchorOffset;
      doc.addEventListener("selectionchange", view.hideSelectionGuard = function () {
        if (domSel.anchorNode != node || domSel.anchorOffset != offset) {
          doc.removeEventListener("selectionchange", view.hideSelectionGuard);
          setTimeout(function () {
            if (!editorOwnsSelection(view) || view.state.selection.visible)
              { view.dom.classList.remove("ProseMirror-hideselection"); }
          }, 20);
        }
      });
    }

    function selectCursorWrapper(view) {
      var domSel = view.root.getSelection(), range = document.createRange();
      var node = view.cursorWrapper.dom, img = node.nodeName == "IMG";
      if (img) { range.setEnd(node.parentNode, domIndex(node) + 1); }
      else { range.setEnd(node, 0); }
      range.collapse(false);
      domSel.removeAllRanges();
      domSel.addRange(range);
      // Kludge to kill 'control selection' in IE11 when selecting an
      // invisible cursor wrapper, since that would result in those weird
      // resize handles and a selection that considers the absolutely
      // positioned wrapper, rather than the root editable node, the
      // focused element.
      if (!img && !view.state.selection.visible && result.ie && result.ie_version <= 11) {
        node.disabled = true;
        node.disabled = false;
      }
    }

    function syncNodeSelection(view, sel) {
      if (sel instanceof NodeSelection) {
        var desc = view.docView.descAt(sel.from);
        if (desc != view.lastSelectedViewDesc) {
          clearNodeSelection(view);
          if (desc) { desc.selectNode(); }
          view.lastSelectedViewDesc = desc;
        }
      } else {
        clearNodeSelection(view);
      }
    }

    // Clear all DOM statefulness of the last node selection.
    function clearNodeSelection(view) {
      if (view.lastSelectedViewDesc) {
        if (view.lastSelectedViewDesc.parent)
          { view.lastSelectedViewDesc.deselectNode(); }
        view.lastSelectedViewDesc = null;
      }
    }

    function selectionBetween(view, $anchor, $head, bias) {
      return view.someProp("createSelectionBetween", function (f) { return f(view, $anchor, $head); })
        || TextSelection.between($anchor, $head, bias)
    }

    function hasFocusAndSelection(view) {
      if (view.editable && view.root.activeElement != view.dom) { return false }
      return hasSelection(view)
    }

    function hasSelection(view) {
      var sel = view.root.getSelection();
      if (!sel.anchorNode) { return false }
      try {
        // Firefox will raise 'permission denied' errors when accessing
        // properties of `sel.anchorNode` when it's in a generated CSS
        // element.
        return view.dom.contains(sel.anchorNode.nodeType == 3 ? sel.anchorNode.parentNode : sel.anchorNode) &&
          (view.editable || view.dom.contains(sel.focusNode.nodeType == 3 ? sel.focusNode.parentNode : sel.focusNode))
      } catch(_) {
        return false
      }
    }

    function anchorInRightPlace(view) {
      var anchorDOM = view.docView.domFromPos(view.state.selection.anchor, 0);
      var domSel = view.root.getSelection();
      return isEquivalentPosition(anchorDOM.node, anchorDOM.offset, domSel.anchorNode, domSel.anchorOffset)
    }

    function moveSelectionBlock(state, dir) {
      var ref = state.selection;
      var $anchor = ref.$anchor;
      var $head = ref.$head;
      var $side = dir > 0 ? $anchor.max($head) : $anchor.min($head);
      var $start = !$side.parent.inlineContent ? $side : $side.depth ? state.doc.resolve(dir > 0 ? $side.after() : $side.before()) : null;
      return $start && Selection.findFrom($start, dir)
    }

    function apply(view, sel) {
      view.dispatch(view.state.tr.setSelection(sel).scrollIntoView());
      return true
    }

    function selectHorizontally(view, dir, mods) {
      var sel = view.state.selection;
      if (sel instanceof TextSelection) {
        if (!sel.empty || mods.indexOf("s") > -1) {
          return false
        } else if (view.endOfTextblock(dir > 0 ? "right" : "left")) {
          var next = moveSelectionBlock(view.state, dir);
          if (next && (next instanceof NodeSelection)) { return apply(view, next) }
          return false
        } else if (!(result.mac && mods.indexOf("m") > -1)) {
          var $head = sel.$head, node = $head.textOffset ? null : dir < 0 ? $head.nodeBefore : $head.nodeAfter, desc;
          if (!node || node.isText) { return false }
          var nodePos = dir < 0 ? $head.pos - node.nodeSize : $head.pos;
          if (!(node.isAtom || (desc = view.docView.descAt(nodePos)) && !desc.contentDOM)) { return false }
          if (NodeSelection.isSelectable(node)) {
            return apply(view, new NodeSelection(dir < 0 ? view.state.doc.resolve($head.pos - node.nodeSize) : $head))
          } else if (result.webkit) {
            // Chrome and Safari will introduce extra pointless cursor
            // positions around inline uneditable nodes, so we have to
            // take over and move the cursor past them (#937)
            return apply(view, new TextSelection(view.state.doc.resolve(dir < 0 ? nodePos : nodePos + node.nodeSize)))
          } else {
            return false
          }
        }
      } else if (sel instanceof NodeSelection && sel.node.isInline) {
        return apply(view, new TextSelection(dir > 0 ? sel.$to : sel.$from))
      } else {
        var next$1 = moveSelectionBlock(view.state, dir);
        if (next$1) { return apply(view, next$1) }
        return false
      }
    }

    function nodeLen(node) {
      return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length
    }

    function isIgnorable(dom) {
      var desc = dom.pmViewDesc;
      return desc && desc.size == 0 && (dom.nextSibling || dom.nodeName != "BR")
    }

    // Make sure the cursor isn't directly after one or more ignored
    // nodes, which will confuse the browser's cursor motion logic.
    function skipIgnoredNodesLeft(view) {
      var sel = view.root.getSelection();
      var node = sel.focusNode, offset = sel.focusOffset;
      if (!node) { return }
      var moveNode, moveOffset, force = false;
      // Gecko will do odd things when the selection is directly in front
      // of a non-editable node, so in that case, move it into the next
      // node if possible. Issue prosemirror/prosemirror#832.
      if (result.gecko && node.nodeType == 1 && offset < nodeLen(node) && isIgnorable(node.childNodes[offset])) { force = true; }
      for (;;) {
        if (offset > 0) {
          if (node.nodeType != 1) {
            break
          } else {
            var before = node.childNodes[offset - 1];
            if (isIgnorable(before)) {
              moveNode = node;
              moveOffset = --offset;
            } else if (before.nodeType == 3) {
              node = before;
              offset = node.nodeValue.length;
            } else { break }
          }
        } else if (isBlockNode(node)) {
          break
        } else {
          var prev = node.previousSibling;
          while (prev && isIgnorable(prev)) {
            moveNode = node.parentNode;
            moveOffset = domIndex(prev);
            prev = prev.previousSibling;
          }
          if (!prev) {
            node = node.parentNode;
            if (node == view.dom) { break }
            offset = 0;
          } else {
            node = prev;
            offset = nodeLen(node);
          }
        }
      }
      if (force) { setSelFocus(view, sel, node, offset); }
      else if (moveNode) { setSelFocus(view, sel, moveNode, moveOffset); }
    }

    // Make sure the cursor isn't directly before one or more ignored
    // nodes.
    function skipIgnoredNodesRight(view) {
      var sel = view.root.getSelection();
      var node = sel.focusNode, offset = sel.focusOffset;
      if (!node) { return }
      var len = nodeLen(node);
      var moveNode, moveOffset;
      for (;;) {
        if (offset < len) {
          if (node.nodeType != 1) { break }
          var after = node.childNodes[offset];
          if (isIgnorable(after)) {
            moveNode = node;
            moveOffset = ++offset;
          }
          else { break }
        } else if (isBlockNode(node)) {
          break
        } else {
          var next = node.nextSibling;
          while (next && isIgnorable(next)) {
            moveNode = next.parentNode;
            moveOffset = domIndex(next) + 1;
            next = next.nextSibling;
          }
          if (!next) {
            node = node.parentNode;
            if (node == view.dom) { break }
            offset = len = 0;
          } else {
            node = next;
            offset = 0;
            len = nodeLen(node);
          }
        }
      }
      if (moveNode) { setSelFocus(view, sel, moveNode, moveOffset); }
    }

    function isBlockNode(dom) {
      var desc = dom.pmViewDesc;
      return desc && desc.node && desc.node.isBlock
    }

    function setSelFocus(view, sel, node, offset) {
      if (selectionCollapsed(sel)) {
        var range = document.createRange();
        range.setEnd(node, offset);
        range.setStart(node, offset);
        sel.removeAllRanges();
        sel.addRange(range);
      } else if (sel.extend) {
        sel.extend(node, offset);
      }
      view.domObserver.setCurSelection();
      var state = view.state;
      // If no state update ends up happening, reset the selection.
      setTimeout(function () {
        if (view.state == state) { selectionToDOM(view); }
      }, 50);
    }

    // : (EditorState, number)
    // Check whether vertical selection motion would involve node
    // selections. If so, apply it (if not, the result is left to the
    // browser)
    function selectVertically(view, dir, mods) {
      var sel = view.state.selection;
      if (sel instanceof TextSelection && !sel.empty || mods.indexOf("s") > -1) { return false }
      if (result.mac && mods.indexOf("m") > -1) { return false }
      var $from = sel.$from;
      var $to = sel.$to;

      if (!$from.parent.inlineContent || view.endOfTextblock(dir < 0 ? "up" : "down")) {
        var next = moveSelectionBlock(view.state, dir);
        if (next && (next instanceof NodeSelection))
          { return apply(view, next) }
      }
      if (!$from.parent.inlineContent) {
        var side = dir < 0 ? $from : $to;
        var beyond = sel instanceof AllSelection ? Selection.near(side, dir) : Selection.findFrom(side, dir);
        return beyond ? apply(view, beyond) : false
      }
      return false
    }

    function stopNativeHorizontalDelete(view, dir) {
      if (!(view.state.selection instanceof TextSelection)) { return true }
      var ref = view.state.selection;
      var $head = ref.$head;
      var $anchor = ref.$anchor;
      var empty = ref.empty;
      if (!$head.sameParent($anchor)) { return true }
      if (!empty) { return false }
      if (view.endOfTextblock(dir > 0 ? "forward" : "backward")) { return true }
      var nextNode = !$head.textOffset && (dir < 0 ? $head.nodeBefore : $head.nodeAfter);
      if (nextNode && !nextNode.isText) {
        var tr = view.state.tr;
        if (dir < 0) { tr.delete($head.pos - nextNode.nodeSize, $head.pos); }
        else { tr.delete($head.pos, $head.pos + nextNode.nodeSize); }
        view.dispatch(tr);
        return true
      }
      return false
    }

    function switchEditable(view, node, state) {
      view.domObserver.stop();
      node.contentEditable = state;
      view.domObserver.start();
    }

    // Issue #867 / #1090 / https://bugs.chromium.org/p/chromium/issues/detail?id=903821
    // In which Safari (and at some point in the past, Chrome) does really
    // wrong things when the down arrow is pressed when the cursor is
    // directly at the start of a textblock and has an uneditable node
    // after it
    function safariDownArrowBug(view) {
      if (!result.safari || view.state.selection.$head.parentOffset > 0) { return }
      var ref = view.root.getSelection();
      var focusNode = ref.focusNode;
      var focusOffset = ref.focusOffset;
      if (focusNode && focusNode.nodeType == 1 && focusOffset == 0 &&
          focusNode.firstChild && focusNode.firstChild.contentEditable == "false") {
        var child = focusNode.firstChild;
        switchEditable(view, child, true);
        setTimeout(function () { return switchEditable(view, child, false); }, 20);
      }
    }

    // A backdrop key mapping used to make sure we always suppress keys
    // that have a dangerous default effect, even if the commands they are
    // bound to return false, and to make sure that cursor-motion keys
    // find a cursor (as opposed to a node selection) when pressed. For
    // cursor-motion keys, the code in the handlers also takes care of
    // block selections.

    function getMods(event) {
      var result = "";
      if (event.ctrlKey) { result += "c"; }
      if (event.metaKey) { result += "m"; }
      if (event.altKey) { result += "a"; }
      if (event.shiftKey) { result += "s"; }
      return result
    }

    function captureKeyDown(view, event) {
      var code = event.keyCode, mods = getMods(event);
      if (code == 8 || (result.mac && code == 72 && mods == "c")) { // Backspace, Ctrl-h on Mac
        return stopNativeHorizontalDelete(view, -1) || skipIgnoredNodesLeft(view)
      } else if (code == 46 || (result.mac && code == 68 && mods == "c")) { // Delete, Ctrl-d on Mac
        return stopNativeHorizontalDelete(view, 1) || skipIgnoredNodesRight(view)
      } else if (code == 13 || code == 27) { // Enter, Esc
        return true
      } else if (code == 37) { // Left arrow
        return selectHorizontally(view, -1, mods) || skipIgnoredNodesLeft(view)
      } else if (code == 39) { // Right arrow
        return selectHorizontally(view, 1, mods) || skipIgnoredNodesRight(view)
      } else if (code == 38) { // Up arrow
        return selectVertically(view, -1, mods) || skipIgnoredNodesLeft(view)
      } else if (code == 40) { // Down arrow
        return safariDownArrowBug(view) || selectVertically(view, 1, mods) || skipIgnoredNodesRight(view)
      } else if (mods == (result.mac ? "m" : "c") &&
                 (code == 66 || code == 73 || code == 89 || code == 90)) { // Mod-[biyz]
        return true
      }
      return false
    }

    // Note that all referencing and parsing is done with the
    // start-of-operation selection and document, since that's the one
    // that the DOM represents. If any changes came in in the meantime,
    // the modification is mapped over those before it is applied, in
    // readDOMChange.

    function parseBetween(view, from_, to_) {
      var ref = view.docView.parseRange(from_, to_);
      var parent = ref.node;
      var fromOffset = ref.fromOffset;
      var toOffset = ref.toOffset;
      var from = ref.from;
      var to = ref.to;

      var domSel = view.root.getSelection(), find = null, anchor = domSel.anchorNode;
      if (anchor && view.dom.contains(anchor.nodeType == 1 ? anchor : anchor.parentNode)) {
        find = [{node: anchor, offset: domSel.anchorOffset}];
        if (!selectionCollapsed(domSel))
          { find.push({node: domSel.focusNode, offset: domSel.focusOffset}); }
      }
      // Work around issue in Chrome where backspacing sometimes replaces
      // the deleted content with a random BR node (issues #799, #831)
      if (result.chrome && view.lastKeyCode === 8) {
        for (var off = toOffset; off > fromOffset; off--) {
          var node = parent.childNodes[off - 1], desc = node.pmViewDesc;
          if (node.nodeName == "BR" && !desc) { toOffset = off; break }
          if (!desc || desc.size) { break }
        }
      }
      var startDoc = view.state.doc;
      var parser = view.someProp("domParser") || DOMParser.fromSchema(view.state.schema);
      var $from = startDoc.resolve(from);

      var sel = null, doc = parser.parse(parent, {
        topNode: $from.parent,
        topMatch: $from.parent.contentMatchAt($from.index()),
        topOpen: true,
        from: fromOffset,
        to: toOffset,
        preserveWhitespace: $from.parent.type.spec.code ? "full" : true,
        editableContent: true,
        findPositions: find,
        ruleFromNode: ruleFromNode,
        context: $from
      });
      if (find && find[0].pos != null) {
        var anchor$1 = find[0].pos, head = find[1] && find[1].pos;
        if (head == null) { head = anchor$1; }
        sel = {anchor: anchor$1 + from, head: head + from};
      }
      return {doc: doc, sel: sel, from: from, to: to}
    }

    function ruleFromNode(dom) {
      var desc = dom.pmViewDesc;
      if (desc) {
        return desc.parseRule()
      } else if (dom.nodeName == "BR" && dom.parentNode) {
        // Safari replaces the list item or table cell with a BR
        // directly in the list node (?!) if you delete the last
        // character in a list item or table cell (#708, #862)
        if (result.safari && /^(ul|ol)$/i.test(dom.parentNode.nodeName)) {
          var skip = document.createElement("div");
          skip.appendChild(document.createElement("li"));
          return {skip: skip}
        } else if (dom.parentNode.lastChild == dom || result.safari && /^(tr|table)$/i.test(dom.parentNode.nodeName)) {
          return {ignore: true}
        }
      } else if (dom.nodeName == "IMG" && dom.getAttribute("mark-placeholder")) {
        return {ignore: true}
      }
    }

    function readDOMChange(view, from, to, typeOver, addedNodes) {
      if (from < 0) {
        var origin = view.lastSelectionTime > Date.now() - 50 ? view.lastSelectionOrigin : null;
        var newSel = selectionFromDOM(view, origin);
        if (newSel && !view.state.selection.eq(newSel)) {
          var tr$1 = view.state.tr.setSelection(newSel);
          if (origin == "pointer") { tr$1.setMeta("pointer", true); }
          else if (origin == "key") { tr$1.scrollIntoView(); }
          view.dispatch(tr$1);
        }
        return
      }

      var $before = view.state.doc.resolve(from);
      var shared = $before.sharedDepth(to);
      from = $before.before(shared + 1);
      to = view.state.doc.resolve(to).after(shared + 1);

      var sel = view.state.selection;
      var parse = parseBetween(view, from, to);
      // Chrome sometimes leaves the cursor before the inserted text when
      // composing after a cursor wrapper. This moves it forward.
      if (result.chrome && view.cursorWrapper && parse.sel && parse.sel.anchor == view.cursorWrapper.deco.from) {
        var text = view.cursorWrapper.deco.type.toDOM.nextSibling;
        var size = text && text.nodeValue ? text.nodeValue.length : 1;
        parse.sel = {anchor: parse.sel.anchor + size, head: parse.sel.anchor + size};
      }

      var doc = view.state.doc, compare = doc.slice(parse.from, parse.to);
      var preferredPos, preferredSide;
      // Prefer anchoring to end when Backspace is pressed
      if (view.lastKeyCode === 8 && Date.now() - 100 < view.lastKeyCodeTime) {
        preferredPos = view.state.selection.to;
        preferredSide = "end";
      } else {
        preferredPos = view.state.selection.from;
        preferredSide = "start";
      }
      view.lastKeyCode = null;

      var change = findDiff(compare.content, parse.doc.content, parse.from, preferredPos, preferredSide);
      if (!change) {
        if (typeOver && sel instanceof TextSelection && !sel.empty && sel.$head.sameParent(sel.$anchor) &&
            !view.composing && !(parse.sel && parse.sel.anchor != parse.sel.head)) {
          change = {start: sel.from, endA: sel.to, endB: sel.to};
        } else if ((result.ios && view.lastIOSEnter > Date.now() - 225 || result.android) &&
                   addedNodes.some(function (n) { return n.nodeName == "DIV" || n.nodeName == "P"; }) &&
                   view.someProp("handleKeyDown", function (f) { return f(view, keyEvent(13, "Enter")); })) {
          view.lastIOSEnter = 0;
          return
        } else {
          if (parse.sel) {
            var sel$1 = resolveSelection(view, view.state.doc, parse.sel);
            if (sel$1 && !sel$1.eq(view.state.selection)) { view.dispatch(view.state.tr.setSelection(sel$1)); }
          }
          return
        }
      }
      view.domChangeCount++;
      // Handle the case where overwriting a selection by typing matches
      // the start or end of the selected content, creating a change
      // that's smaller than what was actually overwritten.
      if (view.state.selection.from < view.state.selection.to &&
          change.start == change.endB &&
          view.state.selection instanceof TextSelection) {
        if (change.start > view.state.selection.from && change.start <= view.state.selection.from + 2) {
          change.start = view.state.selection.from;
        } else if (change.endA < view.state.selection.to && change.endA >= view.state.selection.to - 2) {
          change.endB += (view.state.selection.to - change.endA);
          change.endA = view.state.selection.to;
        }
      }

      // IE11 will insert a non-breaking space _ahead_ of the space after
      // the cursor space when adding a space before another space. When
      // that happened, adjust the change to cover the space instead.
      if (result.ie && result.ie_version <= 11 && change.endB == change.start + 1 &&
          change.endA == change.start && change.start > parse.from &&
          parse.doc.textBetween(change.start - parse.from - 1, change.start - parse.from + 1) == " \u00a0") {
        change.start--;
        change.endA--;
        change.endB--;
      }

      var $from = parse.doc.resolveNoCache(change.start - parse.from);
      var $to = parse.doc.resolveNoCache(change.endB - parse.from);
      var inlineChange = $from.sameParent($to) && $from.parent.inlineContent;
      var nextSel;
      // If this looks like the effect of pressing Enter (or was recorded
      // as being an iOS enter press), just dispatch an Enter key instead.
      if (((result.ios && view.lastIOSEnter > Date.now() - 225 &&
            (!inlineChange || addedNodes.some(function (n) { return n.nodeName == "DIV" || n.nodeName == "P"; }))) ||
           (!inlineChange && $from.pos < parse.doc.content.size &&
            (nextSel = Selection.findFrom(parse.doc.resolve($from.pos + 1), 1, true)) &&
            nextSel.head == $to.pos)) &&
          view.someProp("handleKeyDown", function (f) { return f(view, keyEvent(13, "Enter")); })) {
        view.lastIOSEnter = 0;
        return
      }
      // Same for backspace
      if (view.state.selection.anchor > change.start &&
          looksLikeJoin(doc, change.start, change.endA, $from, $to) &&
          view.someProp("handleKeyDown", function (f) { return f(view, keyEvent(8, "Backspace")); })) {
        if (result.android && result.chrome) { view.domObserver.suppressSelectionUpdates(); } // #820
        return
      }

      // Chrome Android will occasionally, during composition, delete the
      // entire composition and then immediately insert it again. This is
      // used to detect that situation.
      if (result.chrome && result.android && change.toB == change.from)
        { view.lastAndroidDelete = Date.now(); }

      // This tries to detect Android virtual keyboard
      // enter-and-pick-suggestion action. That sometimes (see issue
      // #1059) first fires a DOM mutation, before moving the selection to
      // the newly created block. And then, because ProseMirror cleans up
      // the DOM selection, it gives up moving the selection entirely,
      // leaving the cursor in the wrong place. When that happens, we drop
      // the new paragraph from the initial change, and fire a simulated
      // enter key afterwards.
      if (result.android && !inlineChange && $from.start() != $to.start() && $to.parentOffset == 0 && $from.depth == $to.depth &&
          parse.sel && parse.sel.anchor == parse.sel.head && parse.sel.head == change.endA) {
        change.endB -= 2;
        $to = parse.doc.resolveNoCache(change.endB - parse.from);
        setTimeout(function () {
          view.someProp("handleKeyDown", function (f) { return f(view, keyEvent(13, "Enter")); });
        }, 20);
      }

      var chFrom = change.start, chTo = change.endA;

      var tr, storedMarks, markChange, $from1;
      if (inlineChange) {
        if ($from.pos == $to.pos) { // Deletion
          // IE11 sometimes weirdly moves the DOM selection around after
          // backspacing out the first element in a textblock
          if (result.ie && result.ie_version <= 11 && $from.parentOffset == 0) {
            view.domObserver.suppressSelectionUpdates();
            setTimeout(function () { return selectionToDOM(view); }, 20);
          }
          tr = view.state.tr.delete(chFrom, chTo);
          storedMarks = doc.resolve(change.start).marksAcross(doc.resolve(change.endA));
        } else if ( // Adding or removing a mark
          change.endA == change.endB && ($from1 = doc.resolve(change.start)) &&
          (markChange = isMarkChange($from.parent.content.cut($from.parentOffset, $to.parentOffset),
                                     $from1.parent.content.cut($from1.parentOffset, change.endA - $from1.start())))
        ) {
          tr = view.state.tr;
          if (markChange.type == "add") { tr.addMark(chFrom, chTo, markChange.mark); }
          else { tr.removeMark(chFrom, chTo, markChange.mark); }
        } else if ($from.parent.child($from.index()).isText && $from.index() == $to.index() - ($to.textOffset ? 0 : 1)) {
          // Both positions in the same text node -- simply insert text
          var text$1 = $from.parent.textBetween($from.parentOffset, $to.parentOffset);
          if (view.someProp("handleTextInput", function (f) { return f(view, chFrom, chTo, text$1); })) { return }
          tr = view.state.tr.insertText(text$1, chFrom, chTo);
        }
      }

      if (!tr)
        { tr = view.state.tr.replace(chFrom, chTo, parse.doc.slice(change.start - parse.from, change.endB - parse.from)); }
      if (parse.sel) {
        var sel$2 = resolveSelection(view, tr.doc, parse.sel);
        // Chrome Android will sometimes, during composition, report the
        // selection in the wrong place. If it looks like that is
        // happening, don't update the selection.
        // Edge just doesn't move the cursor forward when you start typing
        // in an empty block or between br nodes.
        if (sel$2 && !(result.chrome && result.android && view.composing && sel$2.empty &&
                     (change.start != change.endB || view.lastAndroidDelete < Date.now() - 100) &&
                     (sel$2.head == chFrom || sel$2.head == tr.mapping.map(chTo) - 1) ||
                     result.ie && sel$2.empty && sel$2.head == chFrom))
          { tr.setSelection(sel$2); }
      }
      if (storedMarks) { tr.ensureMarks(storedMarks); }
      view.dispatch(tr.scrollIntoView());
    }

    function resolveSelection(view, doc, parsedSel) {
      if (Math.max(parsedSel.anchor, parsedSel.head) > doc.content.size) { return null }
      return selectionBetween(view, doc.resolve(parsedSel.anchor), doc.resolve(parsedSel.head))
    }

    // : (Fragment, Fragment) → ?{mark: Mark, type: string}
    // Given two same-length, non-empty fragments of inline content,
    // determine whether the first could be created from the second by
    // removing or adding a single mark type.
    function isMarkChange(cur, prev) {
      var curMarks = cur.firstChild.marks, prevMarks = prev.firstChild.marks;
      var added = curMarks, removed = prevMarks, type, mark, update;
      for (var i = 0; i < prevMarks.length; i++) { added = prevMarks[i].removeFromSet(added); }
      for (var i$1 = 0; i$1 < curMarks.length; i$1++) { removed = curMarks[i$1].removeFromSet(removed); }
      if (added.length == 1 && removed.length == 0) {
        mark = added[0];
        type = "add";
        update = function (node) { return node.mark(mark.addToSet(node.marks)); };
      } else if (added.length == 0 && removed.length == 1) {
        mark = removed[0];
        type = "remove";
        update = function (node) { return node.mark(mark.removeFromSet(node.marks)); };
      } else {
        return null
      }
      var updated = [];
      for (var i$2 = 0; i$2 < prev.childCount; i$2++) { updated.push(update(prev.child(i$2))); }
      if (Fragment.from(updated).eq(cur)) { return {mark: mark, type: type} }
    }

    function looksLikeJoin(old, start, end, $newStart, $newEnd) {
      if (!$newStart.parent.isTextblock ||
          // The content must have shrunk
          end - start <= $newEnd.pos - $newStart.pos ||
          // newEnd must point directly at or after the end of the block that newStart points into
          skipClosingAndOpening($newStart, true, false) < $newEnd.pos)
        { return false }

      var $start = old.resolve(start);
      // Start must be at the end of a block
      if ($start.parentOffset < $start.parent.content.size || !$start.parent.isTextblock)
        { return false }
      var $next = old.resolve(skipClosingAndOpening($start, true, true));
      // The next textblock must start before end and end near it
      if (!$next.parent.isTextblock || $next.pos > end ||
          skipClosingAndOpening($next, true, false) < end)
        { return false }

      // The fragments after the join point must match
      return $newStart.parent.content.cut($newStart.parentOffset).eq($next.parent.content)
    }

    function skipClosingAndOpening($pos, fromEnd, mayOpen) {
      var depth = $pos.depth, end = fromEnd ? $pos.end() : $pos.pos;
      while (depth > 0 && (fromEnd || $pos.indexAfter(depth) == $pos.node(depth).childCount)) {
        depth--;
        end++;
        fromEnd = false;
      }
      if (mayOpen) {
        var next = $pos.node(depth).maybeChild($pos.indexAfter(depth));
        while (next && !next.isLeaf) {
          next = next.firstChild;
          end++;
        }
      }
      return end
    }

    function findDiff(a, b, pos, preferredPos, preferredSide) {
      var start = a.findDiffStart(b, pos);
      if (start == null) { return null }
      var ref = a.findDiffEnd(b, pos + a.size, pos + b.size);
      var endA = ref.a;
      var endB = ref.b;
      if (preferredSide == "end") {
        var adjust = Math.max(0, start - Math.min(endA, endB));
        preferredPos -= endA + adjust - start;
      }
      if (endA < start && a.size < b.size) {
        var move = preferredPos <= start && preferredPos >= endA ? start - preferredPos : 0;
        start -= move;
        endB = start + (endB - endA);
        endA = start;
      } else if (endB < start) {
        var move$1 = preferredPos <= start && preferredPos >= endB ? start - preferredPos : 0;
        start -= move$1;
        endA = start + (endA - endB);
        endB = start;
      }
      return {start: start, endA: endA, endB: endB}
    }

    function serializeForClipboard(view, slice) {
      var context = [];
      var content = slice.content;
      var openStart = slice.openStart;
      var openEnd = slice.openEnd;
      while (openStart > 1 && openEnd > 1 && content.childCount == 1 && content.firstChild.childCount == 1) {
        openStart--;
        openEnd--;
        var node = content.firstChild;
        context.push(node.type.name, node.attrs != node.type.defaultAttrs ? node.attrs : null);
        content = node.content;
      }

      var serializer = view.someProp("clipboardSerializer") || DOMSerializer.fromSchema(view.state.schema);
      var doc = detachedDoc(), wrap = doc.createElement("div");
      wrap.appendChild(serializer.serializeFragment(content, {document: doc}));

      var firstChild = wrap.firstChild, needsWrap;
      while (firstChild && firstChild.nodeType == 1 && (needsWrap = wrapMap[firstChild.nodeName.toLowerCase()])) {
        for (var i = needsWrap.length - 1; i >= 0; i--) {
          var wrapper = doc.createElement(needsWrap[i]);
          while (wrap.firstChild) { wrapper.appendChild(wrap.firstChild); }
          wrap.appendChild(wrapper);
        }
        firstChild = wrap.firstChild;
      }

      if (firstChild && firstChild.nodeType == 1)
        { firstChild.setAttribute("data-pm-slice", (openStart + " " + openEnd + " " + (JSON.stringify(context)))); }

      var text = view.someProp("clipboardTextSerializer", function (f) { return f(slice); }) ||
          slice.content.textBetween(0, slice.content.size, "\n\n");

      return {dom: wrap, text: text}
    }

    // : (EditorView, string, string, ?bool, ResolvedPos) → ?Slice
    // Read a slice of content from the clipboard (or drop data).
    function parseFromClipboard(view, text, html, plainText, $context) {
      var dom, inCode = $context.parent.type.spec.code, slice;
      if (!html && !text) { return null }
      var asText = text && (plainText || inCode || !html);
      if (asText) {
        view.someProp("transformPastedText", function (f) { text = f(text, inCode || plainText); });
        if (inCode) { return new Slice(Fragment.from(view.state.schema.text(text.replace(/\r\n?/g, "\n"))), 0, 0) }
        var parsed = view.someProp("clipboardTextParser", function (f) { return f(text, $context, plainText); });
        if (parsed) {
          slice = parsed;
        } else {
          var marks = $context.marks();
          var ref = view.state;
          var schema = ref.schema;
          var serializer = DOMSerializer.fromSchema(schema);
          dom = document.createElement("div");
          text.trim().split(/(?:\r\n?|\n)+/).forEach(function (block) {
            dom.appendChild(document.createElement("p")).appendChild(serializer.serializeNode(schema.text(block, marks)));
          });
        }
      } else {
        view.someProp("transformPastedHTML", function (f) { html = f(html); });
        dom = readHTML(html);
        if (result.webkit) { restoreReplacedSpaces(dom); }
      }

      var contextNode = dom && dom.querySelector("[data-pm-slice]");
      var sliceData = contextNode && /^(\d+) (\d+) (.*)/.exec(contextNode.getAttribute("data-pm-slice"));
      if (!slice) {
        var parser = view.someProp("clipboardParser") || view.someProp("domParser") || DOMParser.fromSchema(view.state.schema);
        slice = parser.parseSlice(dom, {preserveWhitespace: !!(asText || sliceData), context: $context});
      }
      if (sliceData)
        { slice = addContext(closeSlice(slice, +sliceData[1], +sliceData[2]), sliceData[3]); }
      else // HTML wasn't created by ProseMirror. Make sure top-level siblings are coherent
        { slice = Slice.maxOpen(normalizeSiblings(slice.content, $context), false); }

      view.someProp("transformPasted", function (f) { slice = f(slice); });
      return slice
    }

    // Takes a slice parsed with parseSlice, which means there hasn't been
    // any content-expression checking done on the top nodes, tries to
    // find a parent node in the current context that might fit the nodes,
    // and if successful, rebuilds the slice so that it fits into that parent.
    //
    // This addresses the problem that Transform.replace expects a
    // coherent slice, and will fail to place a set of siblings that don't
    // fit anywhere in the schema.
    function normalizeSiblings(fragment, $context) {
      if (fragment.childCount < 2) { return fragment }
      var loop = function ( d ) {
        var parent = $context.node(d);
        var match = parent.contentMatchAt($context.index(d));
        var lastWrap = (void 0), result = [];
        fragment.forEach(function (node) {
          if (!result) { return }
          var wrap = match.findWrapping(node.type), inLast;
          if (!wrap) { return result = null }
          if (inLast = result.length && lastWrap.length && addToSibling(wrap, lastWrap, node, result[result.length - 1], 0)) {
            result[result.length - 1] = inLast;
          } else {
            if (result.length) { result[result.length - 1] = closeRight(result[result.length - 1], lastWrap.length); }
            var wrapped = withWrappers(node, wrap);
            result.push(wrapped);
            match = match.matchType(wrapped.type, wrapped.attrs);
            lastWrap = wrap;
          }
        });
        if (result) { return { v: Fragment.from(result) } }
      };

      for (var d = $context.depth; d >= 0; d--) {
        var returned = loop( d );

        if ( returned ) return returned.v;
      }
      return fragment
    }

    function withWrappers(node, wrap, from) {
      if ( from === void 0 ) from = 0;

      for (var i = wrap.length - 1; i >= from; i--)
        { node = wrap[i].create(null, Fragment.from(node)); }
      return node
    }

    // Used to group adjacent nodes wrapped in similar parents by
    // normalizeSiblings into the same parent node
    function addToSibling(wrap, lastWrap, node, sibling, depth) {
      if (depth < wrap.length && depth < lastWrap.length && wrap[depth] == lastWrap[depth]) {
        var inner = addToSibling(wrap, lastWrap, node, sibling.lastChild, depth + 1);
        if (inner) { return sibling.copy(sibling.content.replaceChild(sibling.childCount - 1, inner)) }
        var match = sibling.contentMatchAt(sibling.childCount);
        if (match.matchType(depth == wrap.length - 1 ? node.type : wrap[depth + 1]))
          { return sibling.copy(sibling.content.append(Fragment.from(withWrappers(node, wrap, depth + 1)))) }
      }
    }

    function closeRight(node, depth) {
      if (depth == 0) { return node }
      var fragment = node.content.replaceChild(node.childCount - 1, closeRight(node.lastChild, depth - 1));
      var fill = node.contentMatchAt(node.childCount).fillBefore(Fragment.empty, true);
      return node.copy(fragment.append(fill))
    }

    function closeRange(fragment, side, from, to, depth, openEnd) {
      var node = side < 0 ? fragment.firstChild : fragment.lastChild, inner = node.content;
      if (depth < to - 1) { inner = closeRange(inner, side, from, to, depth + 1, openEnd); }
      if (depth >= from)
        { inner = side < 0 ? node.contentMatchAt(0).fillBefore(inner, fragment.childCount > 1 || openEnd <= depth).append(inner)
          : inner.append(node.contentMatchAt(node.childCount).fillBefore(Fragment.empty, true)); }
      return fragment.replaceChild(side < 0 ? 0 : fragment.childCount - 1, node.copy(inner))
    }

    function closeSlice(slice, openStart, openEnd) {
      if (openStart < slice.openStart)
        { slice = new Slice(closeRange(slice.content, -1, openStart, slice.openStart, 0, slice.openEnd), openStart, slice.openEnd); }
      if (openEnd < slice.openEnd)
        { slice = new Slice(closeRange(slice.content, 1, openEnd, slice.openEnd, 0, 0), slice.openStart, openEnd); }
      return slice
    }

    // Trick from jQuery -- some elements must be wrapped in other
    // elements for innerHTML to work. I.e. if you do `div.innerHTML =
    // "<td>..</td>"` the table cells are ignored.
    var wrapMap = {
      thead: ["table"],
      tbody: ["table"],
      tfoot: ["table"],
      caption: ["table"],
      colgroup: ["table"],
      col: ["table", "colgroup"],
      tr: ["table", "tbody"],
      td: ["table", "tbody", "tr"],
      th: ["table", "tbody", "tr"]
    };

    var _detachedDoc = null;
    function detachedDoc() {
      return _detachedDoc || (_detachedDoc = document.implementation.createHTMLDocument("title"))
    }

    function readHTML(html) {
      var metas = /^(\s*<meta [^>]*>)*/.exec(html);
      if (metas) { html = html.slice(metas[0].length); }
      var elt = detachedDoc().createElement("div");
      var firstTag = /<([a-z][^>\s]+)/i.exec(html), wrap;
      if (wrap = firstTag && wrapMap[firstTag[1].toLowerCase()])
        { html = wrap.map(function (n) { return "<" + n + ">"; }).join("") + html + wrap.map(function (n) { return "</" + n + ">"; }).reverse().join(""); }
      elt.innerHTML = html;
      if (wrap) { for (var i = 0; i < wrap.length; i++) { elt = elt.querySelector(wrap[i]) || elt; } }
      return elt
    }

    // Webkit browsers do some hard-to-predict replacement of regular
    // spaces with non-breaking spaces when putting content on the
    // clipboard. This tries to convert such non-breaking spaces (which
    // will be wrapped in a plain span on Chrome, a span with class
    // Apple-converted-space on Safari) back to regular spaces.
    function restoreReplacedSpaces(dom) {
      var nodes = dom.querySelectorAll(result.chrome ? "span:not([class]):not([style])" : "span.Apple-converted-space");
      for (var i = 0; i < nodes.length; i++) {
        var node = nodes[i];
        if (node.childNodes.length == 1 && node.textContent == "\u00a0" && node.parentNode)
          { node.parentNode.replaceChild(dom.ownerDocument.createTextNode(" "), node); }
      }
    }

    function addContext(slice, context) {
      if (!slice.size) { return slice }
      var schema = slice.content.firstChild.type.schema, array;
      try { array = JSON.parse(context); }
      catch(e) { return slice }
      var content = slice.content;
      var openStart = slice.openStart;
      var openEnd = slice.openEnd;
      for (var i = array.length - 2; i >= 0; i -= 2) {
        var type = schema.nodes[array[i]];
        if (!type || type.hasRequiredAttrs()) { break }
        content = Fragment.from(type.create(array[i + 1], content));
        openStart++; openEnd++;
      }
      return new Slice(content, openStart, openEnd)
    }

    var observeOptions = {
      childList: true,
      characterData: true,
      characterDataOldValue: true,
      attributes: true,
      attributeOldValue: true,
      subtree: true
    };
    // IE11 has very broken mutation observers, so we also listen to DOMCharacterDataModified
    var useCharData = result.ie && result.ie_version <= 11;

    var SelectionState = function SelectionState() {
      this.anchorNode = this.anchorOffset = this.focusNode = this.focusOffset = null;
    };

    SelectionState.prototype.set = function set (sel) {
      this.anchorNode = sel.anchorNode; this.anchorOffset = sel.anchorOffset;
      this.focusNode = sel.focusNode; this.focusOffset = sel.focusOffset;
    };

    SelectionState.prototype.eq = function eq (sel) {
      return sel.anchorNode == this.anchorNode && sel.anchorOffset == this.anchorOffset &&
        sel.focusNode == this.focusNode && sel.focusOffset == this.focusOffset
    };

    var DOMObserver = function DOMObserver(view, handleDOMChange) {
      var this$1$1 = this;

      this.view = view;
      this.handleDOMChange = handleDOMChange;
      this.queue = [];
      this.flushingSoon = -1;
      this.observer = window.MutationObserver &&
        new window.MutationObserver(function (mutations) {
          for (var i = 0; i < mutations.length; i++) { this$1$1.queue.push(mutations[i]); }
          // IE11 will sometimes (on backspacing out a single character
          // text node after a BR node) call the observer callback
          // before actually updating the DOM, which will cause
          // ProseMirror to miss the change (see #930)
          if (result.ie && result.ie_version <= 11 && mutations.some(
            function (m) { return m.type == "childList" && m.removedNodes.length ||
                 m.type == "characterData" && m.oldValue.length > m.target.nodeValue.length; }))
            { this$1$1.flushSoon(); }
          else
            { this$1$1.flush(); }
        });
      this.currentSelection = new SelectionState;
      if (useCharData) {
        this.onCharData = function (e) {
          this$1$1.queue.push({target: e.target, type: "characterData", oldValue: e.prevValue});
          this$1$1.flushSoon();
        };
      }
      this.onSelectionChange = this.onSelectionChange.bind(this);
      this.suppressingSelectionUpdates = false;
    };

    DOMObserver.prototype.flushSoon = function flushSoon () {
        var this$1$1 = this;

      if (this.flushingSoon < 0)
        { this.flushingSoon = window.setTimeout(function () { this$1$1.flushingSoon = -1; this$1$1.flush(); }, 20); }
    };

    DOMObserver.prototype.forceFlush = function forceFlush () {
      if (this.flushingSoon > -1) {
        window.clearTimeout(this.flushingSoon);
        this.flushingSoon = -1;
        this.flush();
      }
    };

    DOMObserver.prototype.start = function start () {
      if (this.observer)
        { this.observer.observe(this.view.dom, observeOptions); }
      if (useCharData)
        { this.view.dom.addEventListener("DOMCharacterDataModified", this.onCharData); }
      this.connectSelection();
    };

    DOMObserver.prototype.stop = function stop () {
        var this$1$1 = this;

      if (this.observer) {
        var take = this.observer.takeRecords();
        if (take.length) {
          for (var i = 0; i < take.length; i++) { this.queue.push(take[i]); }
          window.setTimeout(function () { return this$1$1.flush(); }, 20);
        }
        this.observer.disconnect();
      }
      if (useCharData) { this.view.dom.removeEventListener("DOMCharacterDataModified", this.onCharData); }
      this.disconnectSelection();
    };

    DOMObserver.prototype.connectSelection = function connectSelection () {
      this.view.dom.ownerDocument.addEventListener("selectionchange", this.onSelectionChange);
    };

    DOMObserver.prototype.disconnectSelection = function disconnectSelection () {
      this.view.dom.ownerDocument.removeEventListener("selectionchange", this.onSelectionChange);
    };

    DOMObserver.prototype.suppressSelectionUpdates = function suppressSelectionUpdates () {
        var this$1$1 = this;

      this.suppressingSelectionUpdates = true;
      setTimeout(function () { return this$1$1.suppressingSelectionUpdates = false; }, 50);
    };

    DOMObserver.prototype.onSelectionChange = function onSelectionChange () {
      if (!hasFocusAndSelection(this.view)) { return }
      if (this.suppressingSelectionUpdates) { return selectionToDOM(this.view) }
      // Deletions on IE11 fire their events in the wrong order, giving
      // us a selection change event before the DOM changes are
      // reported.
      if (result.ie && result.ie_version <= 11 && !this.view.state.selection.empty) {
        var sel = this.view.root.getSelection();
        // Selection.isCollapsed isn't reliable on IE
        if (sel.focusNode && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset))
          { return this.flushSoon() }
      }
      this.flush();
    };

    DOMObserver.prototype.setCurSelection = function setCurSelection () {
      this.currentSelection.set(this.view.root.getSelection());
    };

    DOMObserver.prototype.ignoreSelectionChange = function ignoreSelectionChange (sel) {
      if (sel.rangeCount == 0) { return true }
      var container = sel.getRangeAt(0).commonAncestorContainer;
      var desc = this.view.docView.nearestDesc(container);
      if (desc && desc.ignoreMutation({type: "selection", target: container.nodeType == 3 ? container.parentNode : container})) {
        this.setCurSelection();
        return true
      }
    };

    DOMObserver.prototype.flush = function flush () {
      if (!this.view.docView || this.flushingSoon > -1) { return }
      var mutations = this.observer ? this.observer.takeRecords() : [];
      if (this.queue.length) {
        mutations = this.queue.concat(mutations);
        this.queue.length = 0;
      }

      var sel = this.view.root.getSelection();
      var newSel = !this.suppressingSelectionUpdates && !this.currentSelection.eq(sel) && hasSelection(this.view) && !this.ignoreSelectionChange(sel);

      var from = -1, to = -1, typeOver = false, added = [];
      if (this.view.editable) {
        for (var i = 0; i < mutations.length; i++) {
          var result$1 = this.registerMutation(mutations[i], added);
          if (result$1) {
            from = from < 0 ? result$1.from : Math.min(result$1.from, from);
            to = to < 0 ? result$1.to : Math.max(result$1.to, to);
            if (result$1.typeOver) { typeOver = true; }
          }
        }
      }

      if (result.gecko && added.length > 1) {
        var brs = added.filter(function (n) { return n.nodeName == "BR"; });
        if (brs.length == 2) {
          var a = brs[0];
            var b = brs[1];
          if (a.parentNode && a.parentNode.parentNode == b.parentNode) { b.remove(); }
          else { a.remove(); }
        }
      }

      if (from > -1 || newSel) {
        if (from > -1) {
          this.view.docView.markDirty(from, to);
          checkCSS(this.view);
        }
        this.handleDOMChange(from, to, typeOver, added);
        if (this.view.docView.dirty) { this.view.updateState(this.view.state); }
        else if (!this.currentSelection.eq(sel)) { selectionToDOM(this.view); }
        this.currentSelection.set(sel);
      }
    };

    DOMObserver.prototype.registerMutation = function registerMutation (mut, added) {
      // Ignore mutations inside nodes that were already noted as inserted
      if (added.indexOf(mut.target) > -1) { return null }
      var desc = this.view.docView.nearestDesc(mut.target);
      if (mut.type == "attributes" &&
          (desc == this.view.docView || mut.attributeName == "contenteditable" ||
           // Firefox sometimes fires spurious events for null/empty styles
           (mut.attributeName == "style" && !mut.oldValue && !mut.target.getAttribute("style"))))
        { return null }
      if (!desc || desc.ignoreMutation(mut)) { return null }

      if (mut.type == "childList") {
        for (var i = 0; i < mut.addedNodes.length; i++) { added.push(mut.addedNodes[i]); }
        if (desc.contentDOM && desc.contentDOM != desc.dom && !desc.contentDOM.contains(mut.target))
          { return {from: desc.posBefore, to: desc.posAfter} }
        var prev = mut.previousSibling, next = mut.nextSibling;
        if (result.ie && result.ie_version <= 11 && mut.addedNodes.length) {
          // IE11 gives us incorrect next/prev siblings for some
          // insertions, so if there are added nodes, recompute those
          for (var i$1 = 0; i$1 < mut.addedNodes.length; i$1++) {
            var ref = mut.addedNodes[i$1];
              var previousSibling = ref.previousSibling;
              var nextSibling = ref.nextSibling;
            if (!previousSibling || Array.prototype.indexOf.call(mut.addedNodes, previousSibling) < 0) { prev = previousSibling; }
            if (!nextSibling || Array.prototype.indexOf.call(mut.addedNodes, nextSibling) < 0) { next = nextSibling; }
          }
        }
        var fromOffset = prev && prev.parentNode == mut.target
            ? domIndex(prev) + 1 : 0;
        var from = desc.localPosFromDOM(mut.target, fromOffset, -1);
        var toOffset = next && next.parentNode == mut.target
            ? domIndex(next) : mut.target.childNodes.length;
        var to = desc.localPosFromDOM(mut.target, toOffset, 1);
        return {from: from, to: to}
      } else if (mut.type == "attributes") {
        return {from: desc.posAtStart - desc.border, to: desc.posAtEnd + desc.border}
      } else { // "characterData"
        return {
          from: desc.posAtStart,
          to: desc.posAtEnd,
          // An event was generated for a text change that didn't change
          // any text. Mark the dom change to fall back to assuming the
          // selection was typed over with an identical value if it can't
          // find another change.
          typeOver: mut.target.nodeValue == mut.oldValue
        }
      }
    };

    var cssChecked = false;

    function checkCSS(view) {
      if (cssChecked) { return }
      cssChecked = true;
      if (getComputedStyle(view.dom).whiteSpace == "normal")
        { console["warn"]("ProseMirror expects the CSS white-space property to be set, preferably to 'pre-wrap'. It is recommended to load style/prosemirror.css from the prosemirror-view package."); }
    }

    // A collection of DOM events that occur within the editor, and callback functions
    // to invoke when the event fires.
    var handlers = {}, editHandlers = {};

    function initInput(view) {
      view.shiftKey = false;
      view.mouseDown = null;
      view.lastKeyCode = null;
      view.lastKeyCodeTime = 0;
      view.lastClick = {time: 0, x: 0, y: 0, type: ""};
      view.lastSelectionOrigin = null;
      view.lastSelectionTime = 0;

      view.lastIOSEnter = 0;
      view.lastIOSEnterFallbackTimeout = null;
      view.lastAndroidDelete = 0;

      view.composing = false;
      view.composingTimeout = null;
      view.compositionNodes = [];
      view.compositionEndedAt = -2e8;

      view.domObserver = new DOMObserver(view, function (from, to, typeOver, added) { return readDOMChange(view, from, to, typeOver, added); });
      view.domObserver.start();
      // Used by hacks like the beforeinput handler to check whether anything happened in the DOM
      view.domChangeCount = 0;

      view.eventHandlers = Object.create(null);
      var loop = function ( event ) {
        var handler = handlers[event];
        view.dom.addEventListener(event, view.eventHandlers[event] = function (event) {
          if (eventBelongsToView(view, event) && !runCustomHandler(view, event) &&
              (view.editable || !(event.type in editHandlers)))
            { handler(view, event); }
        });
      };

      for (var event in handlers) loop( event );
      // On Safari, for reasons beyond my understanding, adding an input
      // event handler makes an issue where the composition vanishes when
      // you press enter go away.
      if (result.safari) { view.dom.addEventListener("input", function () { return null; }); }

      ensureListeners(view);
    }

    function setSelectionOrigin(view, origin) {
      view.lastSelectionOrigin = origin;
      view.lastSelectionTime = Date.now();
    }

    function destroyInput(view) {
      view.domObserver.stop();
      for (var type in view.eventHandlers)
        { view.dom.removeEventListener(type, view.eventHandlers[type]); }
      clearTimeout(view.composingTimeout);
      clearTimeout(view.lastIOSEnterFallbackTimeout);
    }

    function ensureListeners(view) {
      view.someProp("handleDOMEvents", function (currentHandlers) {
        for (var type in currentHandlers) { if (!view.eventHandlers[type])
          { view.dom.addEventListener(type, view.eventHandlers[type] = function (event) { return runCustomHandler(view, event); }); } }
      });
    }

    function runCustomHandler(view, event) {
      return view.someProp("handleDOMEvents", function (handlers) {
        var handler = handlers[event.type];
        return handler ? handler(view, event) || event.defaultPrevented : false
      })
    }

    function eventBelongsToView(view, event) {
      if (!event.bubbles) { return true }
      if (event.defaultPrevented) { return false }
      for (var node = event.target; node != view.dom; node = node.parentNode)
        { if (!node || node.nodeType == 11 ||
            (node.pmViewDesc && node.pmViewDesc.stopEvent(event)))
          { return false } }
      return true
    }

    function dispatchEvent(view, event) {
      if (!runCustomHandler(view, event) && handlers[event.type] &&
          (view.editable || !(event.type in editHandlers)))
        { handlers[event.type](view, event); }
    }

    editHandlers.keydown = function (view, event) {
      view.shiftKey = event.keyCode == 16 || event.shiftKey;
      if (inOrNearComposition(view, event)) { return }
      if (event.keyCode != 229) { view.domObserver.forceFlush(); }
      view.lastKeyCode = event.keyCode;
      view.lastKeyCodeTime = Date.now();
      // On iOS, if we preventDefault enter key presses, the virtual
      // keyboard gets confused. So the hack here is to set a flag that
      // makes the DOM change code recognize that what just happens should
      // be replaced by whatever the Enter key handlers do.
      if (result.ios && event.keyCode == 13 && !event.ctrlKey && !event.altKey && !event.metaKey) {
        var now = Date.now();
        view.lastIOSEnter = now;
        view.lastIOSEnterFallbackTimeout = setTimeout(function () {
          if (view.lastIOSEnter == now) {
            view.someProp("handleKeyDown", function (f) { return f(view, keyEvent(13, "Enter")); });
            view.lastIOSEnter = 0;
          }
        }, 200);
      } else if (view.someProp("handleKeyDown", function (f) { return f(view, event); }) || captureKeyDown(view, event)) {
        event.preventDefault();
      } else {
        setSelectionOrigin(view, "key");
      }
    };

    editHandlers.keyup = function (view, e) {
      if (e.keyCode == 16) { view.shiftKey = false; }
    };

    editHandlers.keypress = function (view, event) {
      if (inOrNearComposition(view, event) || !event.charCode ||
          event.ctrlKey && !event.altKey || result.mac && event.metaKey) { return }

      if (view.someProp("handleKeyPress", function (f) { return f(view, event); })) {
        event.preventDefault();
        return
      }

      var sel = view.state.selection;
      if (!(sel instanceof TextSelection) || !sel.$from.sameParent(sel.$to)) {
        var text = String.fromCharCode(event.charCode);
        if (!view.someProp("handleTextInput", function (f) { return f(view, sel.$from.pos, sel.$to.pos, text); }))
          { view.dispatch(view.state.tr.insertText(text).scrollIntoView()); }
        event.preventDefault();
      }
    };

    function eventCoords(event) { return {left: event.clientX, top: event.clientY} }

    function isNear(event, click) {
      var dx = click.x - event.clientX, dy = click.y - event.clientY;
      return dx * dx + dy * dy < 100
    }

    function runHandlerOnContext(view, propName, pos, inside, event) {
      if (inside == -1) { return false }
      var $pos = view.state.doc.resolve(inside);
      var loop = function ( i ) {
        if (view.someProp(propName, function (f) { return i > $pos.depth ? f(view, pos, $pos.nodeAfter, $pos.before(i), event, true)
                                                        : f(view, pos, $pos.node(i), $pos.before(i), event, false); }))
          { return { v: true } }
      };

      for (var i = $pos.depth + 1; i > 0; i--) {
        var returned = loop( i );

        if ( returned ) return returned.v;
      }
      return false
    }

    function updateSelection(view, selection, origin) {
      if (!view.focused) { view.focus(); }
      var tr = view.state.tr.setSelection(selection);
      if (origin == "pointer") { tr.setMeta("pointer", true); }
      view.dispatch(tr);
    }

    function selectClickedLeaf(view, inside) {
      if (inside == -1) { return false }
      var $pos = view.state.doc.resolve(inside), node = $pos.nodeAfter;
      if (node && node.isAtom && NodeSelection.isSelectable(node)) {
        updateSelection(view, new NodeSelection($pos), "pointer");
        return true
      }
      return false
    }

    function selectClickedNode(view, inside) {
      if (inside == -1) { return false }
      var sel = view.state.selection, selectedNode, selectAt;
      if (sel instanceof NodeSelection) { selectedNode = sel.node; }

      var $pos = view.state.doc.resolve(inside);
      for (var i = $pos.depth + 1; i > 0; i--) {
        var node = i > $pos.depth ? $pos.nodeAfter : $pos.node(i);
        if (NodeSelection.isSelectable(node)) {
          if (selectedNode && sel.$from.depth > 0 &&
              i >= sel.$from.depth && $pos.before(sel.$from.depth + 1) == sel.$from.pos)
            { selectAt = $pos.before(sel.$from.depth); }
          else
            { selectAt = $pos.before(i); }
          break
        }
      }

      if (selectAt != null) {
        updateSelection(view, NodeSelection.create(view.state.doc, selectAt), "pointer");
        return true
      } else {
        return false
      }
    }

    function handleSingleClick(view, pos, inside, event, selectNode) {
      return runHandlerOnContext(view, "handleClickOn", pos, inside, event) ||
        view.someProp("handleClick", function (f) { return f(view, pos, event); }) ||
        (selectNode ? selectClickedNode(view, inside) : selectClickedLeaf(view, inside))
    }

    function handleDoubleClick(view, pos, inside, event) {
      return runHandlerOnContext(view, "handleDoubleClickOn", pos, inside, event) ||
        view.someProp("handleDoubleClick", function (f) { return f(view, pos, event); })
    }

    function handleTripleClick(view, pos, inside, event) {
      return runHandlerOnContext(view, "handleTripleClickOn", pos, inside, event) ||
        view.someProp("handleTripleClick", function (f) { return f(view, pos, event); }) ||
        defaultTripleClick(view, inside, event)
    }

    function defaultTripleClick(view, inside, event) {
      if (event.button != 0) { return false }
      var doc = view.state.doc;
      if (inside == -1) {
        if (doc.inlineContent) {
          updateSelection(view, TextSelection.create(doc, 0, doc.content.size), "pointer");
          return true
        }
        return false
      }

      var $pos = doc.resolve(inside);
      for (var i = $pos.depth + 1; i > 0; i--) {
        var node = i > $pos.depth ? $pos.nodeAfter : $pos.node(i);
        var nodePos = $pos.before(i);
        if (node.inlineContent)
          { updateSelection(view, TextSelection.create(doc, nodePos + 1, nodePos + 1 + node.content.size), "pointer"); }
        else if (NodeSelection.isSelectable(node))
          { updateSelection(view, NodeSelection.create(doc, nodePos), "pointer"); }
        else
          { continue }
        return true
      }
    }

    function forceDOMFlush(view) {
      return endComposition(view)
    }

    var selectNodeModifier = result.mac ? "metaKey" : "ctrlKey";

    handlers.mousedown = function (view, event) {
      view.shiftKey = event.shiftKey;
      var flushed = forceDOMFlush(view);
      var now = Date.now(), type = "singleClick";
      if (now - view.lastClick.time < 500 && isNear(event, view.lastClick) && !event[selectNodeModifier]) {
        if (view.lastClick.type == "singleClick") { type = "doubleClick"; }
        else if (view.lastClick.type == "doubleClick") { type = "tripleClick"; }
      }
      view.lastClick = {time: now, x: event.clientX, y: event.clientY, type: type};

      var pos = view.posAtCoords(eventCoords(event));
      if (!pos) { return }

      if (type == "singleClick") {
        if (view.mouseDown) { view.mouseDown.done(); }
        view.mouseDown = new MouseDown(view, pos, event, flushed);
      } else if ((type == "doubleClick" ? handleDoubleClick : handleTripleClick)(view, pos.pos, pos.inside, event)) {
        event.preventDefault();
      } else {
        setSelectionOrigin(view, "pointer");
      }
    };

    var MouseDown = function MouseDown(view, pos, event, flushed) {
      var this$1$1 = this;

      this.view = view;
      this.startDoc = view.state.doc;
      this.pos = pos;
      this.event = event;
      this.flushed = flushed;
      this.selectNode = event[selectNodeModifier];
      this.allowDefault = event.shiftKey;

      var targetNode, targetPos;
      if (pos.inside > -1) {
        targetNode = view.state.doc.nodeAt(pos.inside);
        targetPos = pos.inside;
      } else {
        var $pos = view.state.doc.resolve(pos.pos);
        targetNode = $pos.parent;
        targetPos = $pos.depth ? $pos.before() : 0;
      }

      this.mightDrag = null;

      var target = flushed ? null : event.target;
      var targetDesc = target ? view.docView.nearestDesc(target, true) : null;
      this.target = targetDesc ? targetDesc.dom : null;

      var ref = view.state;
      var selection = ref.selection;
      if (event.button == 0 &&
          targetNode.type.spec.draggable && targetNode.type.spec.selectable !== false ||
          selection instanceof NodeSelection && selection.from <= targetPos && selection.to > targetPos)
        { this.mightDrag = {node: targetNode,
                          pos: targetPos,
                          addAttr: this.target && !this.target.draggable,
                          setUneditable: this.target && result.gecko && !this.target.hasAttribute("contentEditable")}; }

      if (this.target && this.mightDrag && (this.mightDrag.addAttr || this.mightDrag.setUneditable)) {
        this.view.domObserver.stop();
        if (this.mightDrag.addAttr) { this.target.draggable = true; }
        if (this.mightDrag.setUneditable)
          { setTimeout(function () {
            if (this$1$1.view.mouseDown == this$1$1) { this$1$1.target.setAttribute("contentEditable", "false"); }
          }, 20); }
        this.view.domObserver.start();
      }

      view.root.addEventListener("mouseup", this.up = this.up.bind(this));
      view.root.addEventListener("mousemove", this.move = this.move.bind(this));
      setSelectionOrigin(view, "pointer");
    };

    MouseDown.prototype.done = function done () {
      this.view.root.removeEventListener("mouseup", this.up);
      this.view.root.removeEventListener("mousemove", this.move);
      if (this.mightDrag && this.target) {
        this.view.domObserver.stop();
        if (this.mightDrag.addAttr) { this.target.removeAttribute("draggable"); }
        if (this.mightDrag.setUneditable) { this.target.removeAttribute("contentEditable"); }
        this.view.domObserver.start();
      }
      this.view.mouseDown = null;
    };

    MouseDown.prototype.up = function up (event) {
      this.done();

      if (!this.view.dom.contains(event.target.nodeType == 3 ? event.target.parentNode : event.target))
        { return }

      var pos = this.pos;
      if (this.view.state.doc != this.startDoc) { pos = this.view.posAtCoords(eventCoords(event)); }

      if (this.allowDefault || !pos) {
        setSelectionOrigin(this.view, "pointer");
      } else if (handleSingleClick(this.view, pos.pos, pos.inside, event, this.selectNode)) {
        event.preventDefault();
      } else if (event.button == 0 &&
                 (this.flushed ||
                  // Safari ignores clicks on draggable elements
                  (result.safari && this.mightDrag && !this.mightDrag.node.isAtom) ||
                  // Chrome will sometimes treat a node selection as a
                  // cursor, but still report that the node is selected
                  // when asked through getSelection. You'll then get a
                  // situation where clicking at the point where that
                  // (hidden) cursor is doesn't change the selection, and
                  // thus doesn't get a reaction from ProseMirror. This
                  // works around that.
                  (result.chrome && !(this.view.state.selection instanceof TextSelection) &&
                   Math.min(Math.abs(pos.pos - this.view.state.selection.from),
                            Math.abs(pos.pos - this.view.state.selection.to)) <= 2))) {
        updateSelection(this.view, Selection.near(this.view.state.doc.resolve(pos.pos)), "pointer");
        event.preventDefault();
      } else {
        setSelectionOrigin(this.view, "pointer");
      }
    };

    MouseDown.prototype.move = function move (event) {
      if (!this.allowDefault && (Math.abs(this.event.x - event.clientX) > 4 ||
                                 Math.abs(this.event.y - event.clientY) > 4))
        { this.allowDefault = true; }
      setSelectionOrigin(this.view, "pointer");
      if (event.buttons == 0) { this.done(); }
    };

    handlers.touchdown = function (view) {
      forceDOMFlush(view);
      setSelectionOrigin(view, "pointer");
    };

    handlers.contextmenu = function (view) { return forceDOMFlush(view); };

    function inOrNearComposition(view, event) {
      if (view.composing) { return true }
      // See https://www.stum.de/2016/06/24/handling-ime-events-in-javascript/.
      // On Japanese input method editors (IMEs), the Enter key is used to confirm character
      // selection. On Safari, when Enter is pressed, compositionend and keydown events are
      // emitted. The keydown event triggers newline insertion, which we don't want.
      // This method returns true if the keydown event should be ignored.
      // We only ignore it once, as pressing Enter a second time *should* insert a newline.
      // Furthermore, the keydown event timestamp must be close to the compositionEndedAt timestamp.
      // This guards against the case where compositionend is triggered without the keyboard
      // (e.g. character confirmation may be done with the mouse), and keydown is triggered
      // afterwards- we wouldn't want to ignore the keydown event in this case.
      if (result.safari && Math.abs(event.timeStamp - view.compositionEndedAt) < 500) {
        view.compositionEndedAt = -2e8;
        return true
      }
      return false
    }

    // Drop active composition after 5 seconds of inactivity on Android
    var timeoutComposition = result.android ? 5000 : -1;

    editHandlers.compositionstart = editHandlers.compositionupdate = function (view) {
      if (!view.composing) {
        view.domObserver.flush();
        var state = view.state;
        var $pos = state.selection.$from;
        if (state.selection.empty &&
            (state.storedMarks ||
             (!$pos.textOffset && $pos.parentOffset && $pos.nodeBefore.marks.some(function (m) { return m.type.spec.inclusive === false; })))) {
          // Need to wrap the cursor in mark nodes different from the ones in the DOM context
          view.markCursor = view.state.storedMarks || $pos.marks();
          endComposition(view, true);
          view.markCursor = null;
        } else {
          endComposition(view);
          // In firefox, if the cursor is after but outside a marked node,
          // the inserted text won't inherit the marks. So this moves it
          // inside if necessary.
          if (result.gecko && state.selection.empty && $pos.parentOffset && !$pos.textOffset && $pos.nodeBefore.marks.length) {
            var sel = view.root.getSelection();
            for (var node = sel.focusNode, offset = sel.focusOffset; node && node.nodeType == 1 && offset != 0;) {
              var before = offset < 0 ? node.lastChild : node.childNodes[offset - 1];
              if (!before) { break }
              if (before.nodeType == 3) {
                sel.collapse(before, before.nodeValue.length);
                break
              } else {
                node = before;
                offset = -1;
              }
            }
          }
        }
        view.composing = true;
      }
      scheduleComposeEnd(view, timeoutComposition);
    };

    editHandlers.compositionend = function (view, event) {
      if (view.composing) {
        view.composing = false;
        view.compositionEndedAt = event.timeStamp;
        scheduleComposeEnd(view, 20);
      }
    };

    function scheduleComposeEnd(view, delay) {
      clearTimeout(view.composingTimeout);
      if (delay > -1) { view.composingTimeout = setTimeout(function () { return endComposition(view); }, delay); }
    }

    function clearComposition(view) {
      view.composing = false;
      while (view.compositionNodes.length > 0) { view.compositionNodes.pop().markParentsDirty(); }
    }

    function endComposition(view, forceUpdate) {
      view.domObserver.forceFlush();
      clearComposition(view);
      if (forceUpdate || view.docView.dirty) {
        var sel = selectionFromDOM(view);
        if (sel && !sel.eq(view.state.selection)) { view.dispatch(view.state.tr.setSelection(sel)); }
        else { view.updateState(view.state); }
        return true
      }
      return false
    }

    function captureCopy(view, dom) {
      // The extra wrapper is somehow necessary on IE/Edge to prevent the
      // content from being mangled when it is put onto the clipboard
      if (!view.dom.parentNode) { return }
      var wrap = view.dom.parentNode.appendChild(document.createElement("div"));
      wrap.appendChild(dom);
      wrap.style.cssText = "position: fixed; left: -10000px; top: 10px";
      var sel = getSelection(), range = document.createRange();
      range.selectNodeContents(dom);
      // Done because IE will fire a selectionchange moving the selection
      // to its start when removeAllRanges is called and the editor still
      // has focus (which will mess up the editor's selection state).
      view.dom.blur();
      sel.removeAllRanges();
      sel.addRange(range);
      setTimeout(function () {
        if (wrap.parentNode) { wrap.parentNode.removeChild(wrap); }
        view.focus();
      }, 50);
    }

    // This is very crude, but unfortunately both these browsers _pretend_
    // that they have a clipboard API—all the objects and methods are
    // there, they just don't work, and they are hard to test.
    var brokenClipboardAPI = (result.ie && result.ie_version < 15) ||
          (result.ios && result.webkit_version < 604);

    handlers.copy = editHandlers.cut = function (view, e) {
      var sel = view.state.selection, cut = e.type == "cut";
      if (sel.empty) { return }

      // IE and Edge's clipboard interface is completely broken
      var data = brokenClipboardAPI ? null : e.clipboardData;
      var slice = sel.content();
      var ref = serializeForClipboard(view, slice);
      var dom = ref.dom;
      var text = ref.text;
      if (data) {
        e.preventDefault();
        data.clearData();
        data.setData("text/html", dom.innerHTML);
        data.setData("text/plain", text);
      } else {
        captureCopy(view, dom);
      }
      if (cut) { view.dispatch(view.state.tr.deleteSelection().scrollIntoView().setMeta("uiEvent", "cut")); }
    };

    function sliceSingleNode(slice) {
      return slice.openStart == 0 && slice.openEnd == 0 && slice.content.childCount == 1 ? slice.content.firstChild : null
    }

    function capturePaste(view, e) {
      if (!view.dom.parentNode) { return }
      var plainText = view.shiftKey || view.state.selection.$from.parent.type.spec.code;
      var target = view.dom.parentNode.appendChild(document.createElement(plainText ? "textarea" : "div"));
      if (!plainText) { target.contentEditable = "true"; }
      target.style.cssText = "position: fixed; left: -10000px; top: 10px";
      target.focus();
      setTimeout(function () {
        view.focus();
        if (target.parentNode) { target.parentNode.removeChild(target); }
        if (plainText) { doPaste(view, target.value, null, e); }
        else { doPaste(view, target.textContent, target.innerHTML, e); }
      }, 50);
    }

    function doPaste(view, text, html, e) {
      var slice = parseFromClipboard(view, text, html, view.shiftKey, view.state.selection.$from);
      if (view.someProp("handlePaste", function (f) { return f(view, e, slice || Slice.empty); })) { return true }
      if (!slice) { return false }

      var singleNode = sliceSingleNode(slice);
      var tr = singleNode ? view.state.tr.replaceSelectionWith(singleNode, view.shiftKey) : view.state.tr.replaceSelection(slice);
      view.dispatch(tr.scrollIntoView().setMeta("paste", true).setMeta("uiEvent", "paste"));
      return true
    }

    editHandlers.paste = function (view, e) {
      var data = brokenClipboardAPI ? null : e.clipboardData;
      if (data && doPaste(view, data.getData("text/plain"), data.getData("text/html"), e)) { e.preventDefault(); }
      else { capturePaste(view, e); }
    };

    var Dragging = function Dragging(slice, move) {
      this.slice = slice;
      this.move = move;
    };

    var dragCopyModifier = result.mac ? "altKey" : "ctrlKey";

    handlers.dragstart = function (view, e) {
      var mouseDown = view.mouseDown;
      if (mouseDown) { mouseDown.done(); }
      if (!e.dataTransfer) { return }

      var sel = view.state.selection;
      var pos = sel.empty ? null : view.posAtCoords(eventCoords(e));
      if (pos && pos.pos >= sel.from && pos.pos <= (sel instanceof NodeSelection ? sel.to - 1: sel.to)) ; else if (mouseDown && mouseDown.mightDrag) {
        view.dispatch(view.state.tr.setSelection(NodeSelection.create(view.state.doc, mouseDown.mightDrag.pos)));
      } else if (e.target && e.target.nodeType == 1) {
        var desc = view.docView.nearestDesc(e.target, true);
        if (desc && desc.node.type.spec.draggable && desc != view.docView)
          { view.dispatch(view.state.tr.setSelection(NodeSelection.create(view.state.doc, desc.posBefore))); }
      }
      var slice = view.state.selection.content();
      var ref = serializeForClipboard(view, slice);
      var dom = ref.dom;
      var text = ref.text;
      e.dataTransfer.clearData();
      e.dataTransfer.setData(brokenClipboardAPI ? "Text" : "text/html", dom.innerHTML);
      // See https://github.com/ProseMirror/prosemirror/issues/1156
      e.dataTransfer.effectAllowed = "copyMove";
      if (!brokenClipboardAPI) { e.dataTransfer.setData("text/plain", text); }
      view.dragging = new Dragging(slice, !e[dragCopyModifier]);
    };

    handlers.dragend = function (view) {
      var dragging = view.dragging;
      window.setTimeout(function () {
        if (view.dragging == dragging)  { view.dragging = null; }
      }, 50);
    };

    editHandlers.dragover = editHandlers.dragenter = function (_, e) { return e.preventDefault(); };

    editHandlers.drop = function (view, e) {
      var dragging = view.dragging;
      view.dragging = null;

      if (!e.dataTransfer) { return }

      var eventPos = view.posAtCoords(eventCoords(e));
      if (!eventPos) { return }
      var $mouse = view.state.doc.resolve(eventPos.pos);
      if (!$mouse) { return }
      var slice = dragging && dragging.slice;
      if (slice) {
        view.someProp("transformPasted", function (f) { slice = f(slice); });
      } else {
        slice = parseFromClipboard(view, e.dataTransfer.getData(brokenClipboardAPI ? "Text" : "text/plain"),
                                   brokenClipboardAPI ? null : e.dataTransfer.getData("text/html"), false, $mouse);
      }
      var move = dragging && !e[dragCopyModifier];
      if (view.someProp("handleDrop", function (f) { return f(view, e, slice || Slice.empty, move); })) {
        e.preventDefault();
        return
      }
      if (!slice) { return }

      e.preventDefault();
      var insertPos = slice ? dropPoint(view.state.doc, $mouse.pos, slice) : $mouse.pos;
      if (insertPos == null) { insertPos = $mouse.pos; }

      var tr = view.state.tr;
      if (move) { tr.deleteSelection(); }

      var pos = tr.mapping.map(insertPos);
      var isNode = slice.openStart == 0 && slice.openEnd == 0 && slice.content.childCount == 1;
      var beforeInsert = tr.doc;
      if (isNode)
        { tr.replaceRangeWith(pos, pos, slice.content.firstChild); }
      else
        { tr.replaceRange(pos, pos, slice); }
      if (tr.doc.eq(beforeInsert)) { return }

      var $pos = tr.doc.resolve(pos);
      if (isNode && NodeSelection.isSelectable(slice.content.firstChild) &&
          $pos.nodeAfter && $pos.nodeAfter.sameMarkup(slice.content.firstChild)) {
        tr.setSelection(new NodeSelection($pos));
      } else {
        var end = tr.mapping.map(insertPos);
        tr.mapping.maps[tr.mapping.maps.length - 1].forEach(function (_from, _to, _newFrom, newTo) { return end = newTo; });
        tr.setSelection(selectionBetween(view, $pos, tr.doc.resolve(end)));
      }
      view.focus();
      view.dispatch(tr.setMeta("uiEvent", "drop"));
    };

    handlers.focus = function (view) {
      if (!view.focused) {
        view.domObserver.stop();
        view.dom.classList.add("ProseMirror-focused");
        view.domObserver.start();
        view.focused = true;
        setTimeout(function () {
          if (view.docView && view.hasFocus() && !view.domObserver.currentSelection.eq(view.root.getSelection()))
            { selectionToDOM(view); }
        }, 20);
      }
    };

    handlers.blur = function (view) {
      if (view.focused) {
        view.domObserver.stop();
        view.dom.classList.remove("ProseMirror-focused");
        view.domObserver.start();
        view.domObserver.currentSelection.set({});
        view.focused = false;
      }
    };

    handlers.beforeinput = function (view, event) {
      // We should probably do more with beforeinput events, but support
      // is so spotty that I'm still waiting to see where they are going.

      // Very specific hack to deal with backspace sometimes failing on
      // Chrome Android when after an uneditable node.
      if (result.chrome && result.android && event.inputType == "deleteContentBackward") {
        var domChangeCount = view.domChangeCount;
        setTimeout(function () {
          if (view.domChangeCount != domChangeCount) { return } // Event already had some effect
          // This bug tends to close the virtual keyboard, so we refocus
          view.dom.blur();
          view.focus();
          if (view.someProp("handleKeyDown", function (f) { return f(view, keyEvent(8, "Backspace")); })) { return }
          var ref = view.state.selection;
          var $cursor = ref.$cursor;
          // Crude approximation of backspace behavior when no command handled it
          if ($cursor && $cursor.pos > 0) { view.dispatch(view.state.tr.delete($cursor.pos - 1, $cursor.pos).scrollIntoView()); }
        }, 50);
      }
    };

    // Make sure all handlers get registered
    for (var prop$1 in editHandlers) { handlers[prop$1] = editHandlers[prop$1]; }

    function compareObjs(a, b) {
      if (a == b) { return true }
      for (var p in a) { if (a[p] !== b[p]) { return false } }
      for (var p$1 in b) { if (!(p$1 in a)) { return false } }
      return true
    }

    var WidgetType = function WidgetType(toDOM, spec) {
      this.spec = spec || noSpec;
      this.side = this.spec.side || 0;
      this.toDOM = toDOM;
    };

    WidgetType.prototype.map = function map (mapping, span, offset, oldOffset) {
      var ref = mapping.mapResult(span.from + oldOffset, this.side < 0 ? -1 : 1);
        var pos = ref.pos;
        var deleted = ref.deleted;
      return deleted ? null : new Decoration(pos - offset, pos - offset, this)
    };

    WidgetType.prototype.valid = function valid () { return true };

    WidgetType.prototype.eq = function eq (other) {
      return this == other ||
        (other instanceof WidgetType &&
         (this.spec.key && this.spec.key == other.spec.key ||
          this.toDOM == other.toDOM && compareObjs(this.spec, other.spec)))
    };

    var InlineType = function InlineType(attrs, spec) {
      this.spec = spec || noSpec;
      this.attrs = attrs;
    };

    InlineType.prototype.map = function map (mapping, span, offset, oldOffset) {
      var from = mapping.map(span.from + oldOffset, this.spec.inclusiveStart ? -1 : 1) - offset;
      var to = mapping.map(span.to + oldOffset, this.spec.inclusiveEnd ? 1 : -1) - offset;
      return from >= to ? null : new Decoration(from, to, this)
    };

    InlineType.prototype.valid = function valid (_, span) { return span.from < span.to };

    InlineType.prototype.eq = function eq (other) {
      return this == other ||
        (other instanceof InlineType && compareObjs(this.attrs, other.attrs) &&
         compareObjs(this.spec, other.spec))
    };

    InlineType.is = function is (span) { return span.type instanceof InlineType };

    var NodeType = function NodeType(attrs, spec) {
      this.spec = spec || noSpec;
      this.attrs = attrs;
    };

    NodeType.prototype.map = function map (mapping, span, offset, oldOffset) {
      var from = mapping.mapResult(span.from + oldOffset, 1);
      if (from.deleted) { return null }
      var to = mapping.mapResult(span.to + oldOffset, -1);
      if (to.deleted || to.pos <= from.pos) { return null }
      return new Decoration(from.pos - offset, to.pos - offset, this)
    };

    NodeType.prototype.valid = function valid (node, span) {
      var ref = node.content.findIndex(span.from);
        var index = ref.index;
        var offset = ref.offset;
      return offset == span.from && offset + node.child(index).nodeSize == span.to
    };

    NodeType.prototype.eq = function eq (other) {
      return this == other ||
        (other instanceof NodeType && compareObjs(this.attrs, other.attrs) &&
         compareObjs(this.spec, other.spec))
    };

    // ::- Decoration objects can be provided to the view through the
    // [`decorations` prop](#view.EditorProps.decorations). They come in
    // several variants—see the static members of this class for details.
    var Decoration = function Decoration(from, to, type) {
      // :: number
      // The start position of the decoration.
      this.from = from;
      // :: number
      // The end position. Will be the same as `from` for [widget
      // decorations](#view.Decoration^widget).
      this.to = to;
      this.type = type;
    };

    var prototypeAccessors$1 = { spec: { configurable: true },inline: { configurable: true } };

    Decoration.prototype.copy = function copy (from, to) {
      return new Decoration(from, to, this.type)
    };

    Decoration.prototype.eq = function eq (other, offset) {
        if ( offset === void 0 ) offset = 0;

      return this.type.eq(other.type) && this.from + offset == other.from && this.to + offset == other.to
    };

    Decoration.prototype.map = function map (mapping, offset, oldOffset) {
      return this.type.map(mapping, this, offset, oldOffset)
    };

    // :: (number, union<(view: EditorView, getPos: () → number) → dom.Node, dom.Node>, ?Object) → Decoration
    // Creates a widget decoration, which is a DOM node that's shown in
    // the document at the given position. It is recommended that you
    // delay rendering the widget by passing a function that will be
    // called when the widget is actually drawn in a view, but you can
    // also directly pass a DOM node. `getPos` can be used to find the
    // widget's current document position.
    //
    // spec::- These options are supported:
    //
    //   side:: ?number
    //   Controls which side of the document position this widget is
    //   associated with. When negative, it is drawn before a cursor
    //   at its position, and content inserted at that position ends
    //   up after the widget. When zero (the default) or positive, the
    //   widget is drawn after the cursor and content inserted there
    //   ends up before the widget.
    //
    //   When there are multiple widgets at a given position, their
    //   `side` values determine the order in which they appear. Those
    //   with lower values appear first. The ordering of widgets with
    //   the same `side` value is unspecified.
    //
    //   When `marks` is null, `side` also determines the marks that
    //   the widget is wrapped in—those of the node before when
    //   negative, those of the node after when positive.
    //
    //   marks:: ?[Mark]
    //   The precise set of marks to draw around the widget.
    //
    //   stopEvent:: ?(event: dom.Event) → bool
    //   Can be used to control which DOM events, when they bubble out
    //   of this widget, the editor view should ignore.
    //
    //   ignoreSelection:: ?bool
    //   When set (defaults to false), selection changes inside the
    //   widget are ignored, and don't cause ProseMirror to try and
    //   re-sync the selection with its selection state.
    //
    //   key:: ?string
    //   When comparing decorations of this type (in order to decide
    //   whether it needs to be redrawn), ProseMirror will by default
    //   compare the widget DOM node by identity. If you pass a key,
    //   that key will be compared instead, which can be useful when
    //   you generate decorations on the fly and don't want to store
    //   and reuse DOM nodes. Make sure that any widgets with the same
    //   key are interchangeable—if widgets differ in, for example,
    //   the behavior of some event handler, they should get
    //   different keys.
    Decoration.widget = function widget (pos, toDOM, spec) {
      return new Decoration(pos, pos, new WidgetType(toDOM, spec))
    };

    // :: (number, number, DecorationAttrs, ?Object) → Decoration
    // Creates an inline decoration, which adds the given attributes to
    // each inline node between `from` and `to`.
    //
    // spec::- These options are recognized:
    //
    //   inclusiveStart:: ?bool
    //   Determines how the left side of the decoration is
    //   [mapped](#transform.Position_Mapping) when content is
    //   inserted directly at that position. By default, the decoration
    //   won't include the new content, but you can set this to `true`
    //   to make it inclusive.
    //
    //   inclusiveEnd:: ?bool
    //   Determines how the right side of the decoration is mapped.
    //   See
    //   [`inclusiveStart`](#view.Decoration^inline^spec.inclusiveStart).
    Decoration.inline = function inline (from, to, attrs, spec) {
      return new Decoration(from, to, new InlineType(attrs, spec))
    };

    // :: (number, number, DecorationAttrs, ?Object) → Decoration
    // Creates a node decoration. `from` and `to` should point precisely
    // before and after a node in the document. That node, and only that
    // node, will receive the given attributes.
    //
    // spec::-
    //
    // Optional information to store with the decoration. It
    // is also used when comparing decorators for equality.
    Decoration.node = function node (from, to, attrs, spec) {
      return new Decoration(from, to, new NodeType(attrs, spec))
    };

    // :: Object
    // The spec provided when creating this decoration. Can be useful
    // if you've stored extra information in that object.
    prototypeAccessors$1.spec.get = function () { return this.type.spec };

    prototypeAccessors$1.inline.get = function () { return this.type instanceof InlineType };

    Object.defineProperties( Decoration.prototype, prototypeAccessors$1 );

    // DecorationAttrs:: interface
    // A set of attributes to add to a decorated node. Most properties
    // simply directly correspond to DOM attributes of the same name,
    // which will be set to the property's value. These are exceptions:
    //
    //   class:: ?string
    //   A CSS class name or a space-separated set of class names to be
    //   _added_ to the classes that the node already had.
    //
    //   style:: ?string
    //   A string of CSS to be _added_ to the node's existing `style` property.
    //
    //   nodeName:: ?string
    //   When non-null, the target node is wrapped in a DOM element of
    //   this type (and the other attributes are applied to this element).

    var none = [], noSpec = {};

    // :: class extends DecorationSource
    // A collection of [decorations](#view.Decoration), organized in
    // such a way that the drawing algorithm can efficiently use and
    // compare them. This is a persistent data structure—it is not
    // modified, updates create a new value.
    var DecorationSet = function DecorationSet(local, children) {
      this.local = local && local.length ? local : none;
      this.children = children && children.length ? children : none;
    };

    // :: (Node, [Decoration]) → DecorationSet
    // Create a set of decorations, using the structure of the given
    // document.
    DecorationSet.create = function create (doc, decorations) {
      return decorations.length ? buildTree(decorations, doc, 0, noSpec) : empty$1
    };

    // :: (?number, ?number, ?(spec: Object) → bool) → [Decoration]
    // Find all decorations in this set which touch the given range
    // (including decorations that start or end directly at the
    // boundaries) and match the given predicate on their spec. When
    // `start` and `end` are omitted, all decorations in the set are
    // considered. When `predicate` isn't given, all decorations are
    // assumed to match.
    DecorationSet.prototype.find = function find (start, end, predicate) {
      var result = [];
      this.findInner(start == null ? 0 : start, end == null ? 1e9 : end, result, 0, predicate);
      return result
    };

    DecorationSet.prototype.findInner = function findInner (start, end, result, offset, predicate) {
      for (var i = 0; i < this.local.length; i++) {
        var span = this.local[i];
        if (span.from <= end && span.to >= start && (!predicate || predicate(span.spec)))
          { result.push(span.copy(span.from + offset, span.to + offset)); }
      }
      for (var i$1 = 0; i$1 < this.children.length; i$1 += 3) {
        if (this.children[i$1] < end && this.children[i$1 + 1] > start) {
          var childOff = this.children[i$1] + 1;
          this.children[i$1 + 2].findInner(start - childOff, end - childOff, result, offset + childOff, predicate);
        }
      }
    };

    // :: (Mapping, Node, ?Object) → DecorationSet
    // Map the set of decorations in response to a change in the
    // document.
    //
    // options::- An optional set of options.
    //
    //   onRemove:: ?(decorationSpec: Object)
    //   When given, this function will be called for each decoration
    //   that gets dropped as a result of the mapping, passing the
    //   spec of that decoration.
    DecorationSet.prototype.map = function map (mapping, doc, options) {
      if (this == empty$1 || mapping.maps.length == 0) { return this }
      return this.mapInner(mapping, doc, 0, 0, options || noSpec)
    };

    DecorationSet.prototype.mapInner = function mapInner (mapping, node, offset, oldOffset, options) {
      var newLocal;
      for (var i = 0; i < this.local.length; i++) {
        var mapped = this.local[i].map(mapping, offset, oldOffset);
        if (mapped && mapped.type.valid(node, mapped)) { (newLocal || (newLocal = [])).push(mapped); }
        else if (options.onRemove) { options.onRemove(this.local[i].spec); }
      }

      if (this.children.length)
        { return mapChildren(this.children, newLocal, mapping, node, offset, oldOffset, options) }
      else
        { return newLocal ? new DecorationSet(newLocal.sort(byPos)) : empty$1 }
    };

    // :: (Node, [Decoration]) → DecorationSet
    // Add the given array of decorations to the ones in the set,
    // producing a new set. Needs access to the current document to
    // create the appropriate tree structure.
    DecorationSet.prototype.add = function add (doc, decorations) {
      if (!decorations.length) { return this }
      if (this == empty$1) { return DecorationSet.create(doc, decorations) }
      return this.addInner(doc, decorations, 0)
    };

    DecorationSet.prototype.addInner = function addInner (doc, decorations, offset) {
        var this$1$1 = this;

      var children, childIndex = 0;
      doc.forEach(function (childNode, childOffset) {
        var baseOffset = childOffset + offset, found;
        if (!(found = takeSpansForNode(decorations, childNode, baseOffset))) { return }

        if (!children) { children = this$1$1.children.slice(); }
        while (childIndex < children.length && children[childIndex] < childOffset) { childIndex += 3; }
        if (children[childIndex] == childOffset)
          { children[childIndex + 2] = children[childIndex + 2].addInner(childNode, found, baseOffset + 1); }
        else
          { children.splice(childIndex, 0, childOffset, childOffset + childNode.nodeSize, buildTree(found, childNode, baseOffset + 1, noSpec)); }
        childIndex += 3;
      });

      var local = moveSpans(childIndex ? withoutNulls(decorations) : decorations, -offset);
      for (var i = 0; i < local.length; i++) { if (!local[i].type.valid(doc, local[i])) { local.splice(i--, 1); } }

      return new DecorationSet(local.length ? this.local.concat(local).sort(byPos) : this.local,
                               children || this.children)
    };

    // :: ([Decoration]) → DecorationSet
    // Create a new set that contains the decorations in this set, minus
    // the ones in the given array.
    DecorationSet.prototype.remove = function remove (decorations) {
      if (decorations.length == 0 || this == empty$1) { return this }
      return this.removeInner(decorations, 0)
    };

    DecorationSet.prototype.removeInner = function removeInner (decorations, offset) {
      var children = this.children, local = this.local;
      for (var i = 0; i < children.length; i += 3) {
        var found = (void 0), from = children[i] + offset, to = children[i + 1] + offset;
        for (var j = 0, span = (void 0); j < decorations.length; j++) { if (span = decorations[j]) {
          if (span.from > from && span.to < to) {
            decorations[j] = null
            ;(found || (found = [])).push(span);
          }
        } }
        if (!found) { continue }
        if (children == this.children) { children = this.children.slice(); }
        var removed = children[i + 2].removeInner(found, from + 1);
        if (removed != empty$1) {
          children[i + 2] = removed;
        } else {
          children.splice(i, 3);
          i -= 3;
        }
      }
      if (local.length) { for (var i$1 = 0, span$1 = (void 0); i$1 < decorations.length; i$1++) { if (span$1 = decorations[i$1]) {
        for (var j$1 = 0; j$1 < local.length; j$1++) { if (local[j$1].eq(span$1, offset)) {
          if (local == this.local) { local = this.local.slice(); }
          local.splice(j$1--, 1);
        } }
      } } }
      if (children == this.children && local == this.local) { return this }
      return local.length || children.length ? new DecorationSet(local, children) : empty$1
    };

    DecorationSet.prototype.forChild = function forChild (offset, node) {
      if (this == empty$1) { return this }
      if (node.isLeaf) { return DecorationSet.empty }

      var child, local;
      for (var i = 0; i < this.children.length; i += 3) { if (this.children[i] >= offset) {
        if (this.children[i] == offset) { child = this.children[i + 2]; }
        break
      } }
      var start = offset + 1, end = start + node.content.size;
      for (var i$1 = 0; i$1 < this.local.length; i$1++) {
        var dec = this.local[i$1];
        if (dec.from < end && dec.to > start && (dec.type instanceof InlineType)) {
          var from = Math.max(start, dec.from) - start, to = Math.min(end, dec.to) - start;
          if (from < to) { (local || (local = [])).push(dec.copy(from, to)); }
        }
      }
      if (local) {
        var localSet = new DecorationSet(local.sort(byPos));
        return child ? new DecorationGroup([localSet, child]) : localSet
      }
      return child || empty$1
    };

    DecorationSet.prototype.eq = function eq (other) {
      if (this == other) { return true }
      if (!(other instanceof DecorationSet) ||
          this.local.length != other.local.length ||
          this.children.length != other.children.length) { return false }
      for (var i = 0; i < this.local.length; i++)
        { if (!this.local[i].eq(other.local[i])) { return false } }
      for (var i$1 = 0; i$1 < this.children.length; i$1 += 3)
        { if (this.children[i$1] != other.children[i$1] ||
            this.children[i$1 + 1] != other.children[i$1 + 1] ||
            !this.children[i$1 + 2].eq(other.children[i$1 + 2])) { return false } }
      return true
    };

    DecorationSet.prototype.locals = function locals (node) {
      return removeOverlap(this.localsInner(node))
    };

    DecorationSet.prototype.localsInner = function localsInner (node) {
      if (this == empty$1) { return none }
      if (node.inlineContent || !this.local.some(InlineType.is)) { return this.local }
      var result = [];
      for (var i = 0; i < this.local.length; i++) {
        if (!(this.local[i].type instanceof InlineType))
          { result.push(this.local[i]); }
      }
      return result
    };

    // DecorationSource:: interface
    // An object that can [provide](#view.EditorProps.decorations)
    // decorations. Implemented by [`DecorationSet`](#view.DecorationSet),
    // and passed to [node views](#view.EditorProps.nodeViews).

    var empty$1 = new DecorationSet();

    // :: DecorationSet
    // The empty set of decorations.
    DecorationSet.empty = empty$1;

    DecorationSet.removeOverlap = removeOverlap;

    // :- An abstraction that allows the code dealing with decorations to
    // treat multiple DecorationSet objects as if it were a single object
    // with (a subset of) the same interface.
    var DecorationGroup = function DecorationGroup(members) {
      this.members = members;
    };

    DecorationGroup.prototype.forChild = function forChild (offset, child) {
      if (child.isLeaf) { return DecorationSet.empty }
      var found = [];
      for (var i = 0; i < this.members.length; i++) {
        var result = this.members[i].forChild(offset, child);
        if (result == empty$1) { continue }
        if (result instanceof DecorationGroup) { found = found.concat(result.members); }
        else { found.push(result); }
      }
      return DecorationGroup.from(found)
    };

    DecorationGroup.prototype.eq = function eq (other) {
      if (!(other instanceof DecorationGroup) ||
          other.members.length != this.members.length) { return false }
      for (var i = 0; i < this.members.length; i++)
        { if (!this.members[i].eq(other.members[i])) { return false } }
      return true
    };

    DecorationGroup.prototype.locals = function locals (node) {
      var result, sorted = true;
      for (var i = 0; i < this.members.length; i++) {
        var locals = this.members[i].localsInner(node);
        if (!locals.length) { continue }
        if (!result) {
          result = locals;
        } else {
          if (sorted) {
            result = result.slice();
            sorted = false;
          }
          for (var j = 0; j < locals.length; j++) { result.push(locals[j]); }
        }
      }
      return result ? removeOverlap(sorted ? result : result.sort(byPos)) : none
    };

    // : ([DecorationSet]) → union<DecorationSet, DecorationGroup>
    // Create a group for the given array of decoration sets, or return
    // a single set when possible.
    DecorationGroup.from = function from (members) {
      switch (members.length) {
        case 0: return empty$1
        case 1: return members[0]
        default: return new DecorationGroup(members)
      }
    };

    function mapChildren(oldChildren, newLocal, mapping, node, offset, oldOffset, options) {
      var children = oldChildren.slice();

      // Mark the children that are directly touched by changes, and
      // move those that are after the changes.
      var shift = function (oldStart, oldEnd, newStart, newEnd) {
        for (var i = 0; i < children.length; i += 3) {
          var end = children[i + 1], dSize = (void 0);
          if (end == -1 || oldStart > end + oldOffset) { continue }
          if (oldEnd >= children[i] + oldOffset) {
            children[i + 1] = -1;
          } else if (newStart >= offset && (dSize = (newEnd - newStart) - (oldEnd - oldStart))) {
            children[i] += dSize;
            children[i + 1] += dSize;
          }
        }
      };
      for (var i = 0; i < mapping.maps.length; i++) { mapping.maps[i].forEach(shift); }

      // Find the child nodes that still correspond to a single node,
      // recursively call mapInner on them and update their positions.
      var mustRebuild = false;
      for (var i$1 = 0; i$1 < children.length; i$1 += 3) { if (children[i$1 + 1] == -1) { // Touched nodes
        var from = mapping.map(oldChildren[i$1] + oldOffset), fromLocal = from - offset;
        if (fromLocal < 0 || fromLocal >= node.content.size) {
          mustRebuild = true;
          continue
        }
        // Must read oldChildren because children was tagged with -1
        var to = mapping.map(oldChildren[i$1 + 1] + oldOffset, -1), toLocal = to - offset;
        var ref = node.content.findIndex(fromLocal);
        var index = ref.index;
        var childOffset = ref.offset;
        var childNode = node.maybeChild(index);
        if (childNode && childOffset == fromLocal && childOffset + childNode.nodeSize == toLocal) {
          var mapped = children[i$1 + 2].mapInner(mapping, childNode, from + 1, oldChildren[i$1] + oldOffset + 1, options);
          if (mapped != empty$1) {
            children[i$1] = fromLocal;
            children[i$1 + 1] = toLocal;
            children[i$1 + 2] = mapped;
          } else {
            children[i$1 + 1] = -2;
            mustRebuild = true;
          }
        } else {
          mustRebuild = true;
        }
      } }

      // Remaining children must be collected and rebuilt into the appropriate structure
      if (mustRebuild) {
        var decorations = mapAndGatherRemainingDecorations(children, oldChildren, newLocal || [], mapping,
                                                           offset, oldOffset, options);
        var built = buildTree(decorations, node, 0, options);
        newLocal = built.local;
        for (var i$2 = 0; i$2 < children.length; i$2 += 3) { if (children[i$2 + 1] < 0) {
          children.splice(i$2, 3);
          i$2 -= 3;
        } }
        for (var i$3 = 0, j = 0; i$3 < built.children.length; i$3 += 3) {
          var from$1 = built.children[i$3];
          while (j < children.length && children[j] < from$1) { j += 3; }
          children.splice(j, 0, built.children[i$3], built.children[i$3 + 1], built.children[i$3 + 2]);
        }
      }

      return new DecorationSet(newLocal && newLocal.sort(byPos), children)
    }

    function moveSpans(spans, offset) {
      if (!offset || !spans.length) { return spans }
      var result = [];
      for (var i = 0; i < spans.length; i++) {
        var span = spans[i];
        result.push(new Decoration(span.from + offset, span.to + offset, span.type));
      }
      return result
    }

    function mapAndGatherRemainingDecorations(children, oldChildren, decorations, mapping, offset, oldOffset, options) {
      // Gather all decorations from the remaining marked children
      function gather(set, oldOffset) {
        for (var i = 0; i < set.local.length; i++) {
          var mapped = set.local[i].map(mapping, offset, oldOffset);
          if (mapped) { decorations.push(mapped); }
          else if (options.onRemove) { options.onRemove(set.local[i].spec); }
        }
        for (var i$1 = 0; i$1 < set.children.length; i$1 += 3)
          { gather(set.children[i$1 + 2], set.children[i$1] + oldOffset + 1); }
      }
      for (var i = 0; i < children.length; i += 3) { if (children[i + 1] == -1)
        { gather(children[i + 2], oldChildren[i] + oldOffset + 1); } }

      return decorations
    }

    function takeSpansForNode(spans, node, offset) {
      if (node.isLeaf) { return null }
      var end = offset + node.nodeSize, found = null;
      for (var i = 0, span = (void 0); i < spans.length; i++) {
        if ((span = spans[i]) && span.from > offset && span.to < end) {
    (found || (found = [])).push(span);
          spans[i] = null;
        }
      }
      return found
    }

    function withoutNulls(array) {
      var result = [];
      for (var i = 0; i < array.length; i++)
        { if (array[i] != null) { result.push(array[i]); } }
      return result
    }

    // : ([Decoration], Node, number) → DecorationSet
    // Build up a tree that corresponds to a set of decorations. `offset`
    // is a base offset that should be subtractet from the `from` and `to`
    // positions in the spans (so that we don't have to allocate new spans
    // for recursive calls).
    function buildTree(spans, node, offset, options) {
      var children = [], hasNulls = false;
      node.forEach(function (childNode, localStart) {
        var found = takeSpansForNode(spans, childNode, localStart + offset);
        if (found) {
          hasNulls = true;
          var subtree = buildTree(found, childNode, offset + localStart + 1, options);
          if (subtree != empty$1)
            { children.push(localStart, localStart + childNode.nodeSize, subtree); }
        }
      });
      var locals = moveSpans(hasNulls ? withoutNulls(spans) : spans, -offset).sort(byPos);
      for (var i = 0; i < locals.length; i++) { if (!locals[i].type.valid(node, locals[i])) {
        if (options.onRemove) { options.onRemove(locals[i].spec); }
        locals.splice(i--, 1);
      } }
      return locals.length || children.length ? new DecorationSet(locals, children) : empty$1
    }

    // : (Decoration, Decoration) → number
    // Used to sort decorations so that ones with a low start position
    // come first, and within a set with the same start position, those
    // with an smaller end position come first.
    function byPos(a, b) {
      return a.from - b.from || a.to - b.to
    }

    // : ([Decoration]) → [Decoration]
    // Scan a sorted array of decorations for partially overlapping spans,
    // and split those so that only fully overlapping spans are left (to
    // make subsequent rendering easier). Will return the input array if
    // no partially overlapping spans are found (the common case).
    function removeOverlap(spans) {
      var working = spans;
      for (var i = 0; i < working.length - 1; i++) {
        var span = working[i];
        if (span.from != span.to) { for (var j = i + 1; j < working.length; j++) {
          var next = working[j];
          if (next.from == span.from) {
            if (next.to != span.to) {
              if (working == spans) { working = spans.slice(); }
              // Followed by a partially overlapping larger span. Split that
              // span.
              working[j] = next.copy(next.from, span.to);
              insertAhead(working, j + 1, next.copy(span.to, next.to));
            }
            continue
          } else {
            if (next.from < span.to) {
              if (working == spans) { working = spans.slice(); }
              // The end of this one overlaps with a subsequent span. Split
              // this one.
              working[i] = span.copy(span.from, next.from);
              insertAhead(working, j, span.copy(next.from, span.to));
            }
            break
          }
        } }
      }
      return working
    }

    function insertAhead(array, i, deco) {
      while (i < array.length && byPos(deco, array[i]) > 0) { i++; }
      array.splice(i, 0, deco);
    }

    // : (EditorView) → union<DecorationSet, DecorationGroup>
    // Get the decorations associated with the current props of a view.
    function viewDecorations(view) {
      var found = [];
      view.someProp("decorations", function (f) {
        var result = f(view.state);
        if (result && result != empty$1) { found.push(result); }
      });
      if (view.cursorWrapper)
        { found.push(DecorationSet.create(view.state.doc, [view.cursorWrapper.deco])); }
      return DecorationGroup.from(found)
    }

    // ::- An editor view manages the DOM structure that represents an
    // editable document. Its state and behavior are determined by its
    // [props](#view.DirectEditorProps).
    var EditorView = function EditorView(place, props) {
      this._props = props;
      // :: EditorState
      // The view's current [state](#state.EditorState).
      this.state = props.state;

      this.dispatch = this.dispatch.bind(this);

      this._root = null;
      this.focused = false;
      // Kludge used to work around a Chrome bug
      this.trackWrites = null;

      // :: dom.Element
      // An editable DOM node containing the document. (You probably
      // should not directly interfere with its content.)
      this.dom = (place && place.mount) || document.createElement("div");
      if (place) {
        if (place.appendChild) { place.appendChild(this.dom); }
        else if (place.apply) { place(this.dom); }
        else if (place.mount) { this.mounted = true; }
      }

      // :: bool
      // Indicates whether the editor is currently [editable](#view.EditorProps.editable).
      this.editable = getEditable(this);
      this.markCursor = null;
      this.cursorWrapper = null;
      updateCursorWrapper(this);
      this.nodeViews = buildNodeViews(this);
      this.docView = docViewDesc(this.state.doc, computeDocDeco(this), viewDecorations(this), this.dom, this);

      this.lastSelectedViewDesc = null;
      // :: ?{slice: Slice, move: bool}
      // When editor content is being dragged, this object contains
      // information about the dragged slice and whether it is being
      // copied or moved. At any other time, it is null.
      this.dragging = null;

      initInput(this);

      this.pluginViews = [];
      this.updatePluginViews();
    };

    var prototypeAccessors$2 = { props: { configurable: true },root: { configurable: true } };

    // composing:: boolean
    // Holds `true` when a
    // [composition](https://developer.mozilla.org/en-US/docs/Mozilla/IME_handling_guide)
    // is active.

    // :: DirectEditorProps
    // The view's current [props](#view.EditorProps).
    prototypeAccessors$2.props.get = function () {
      if (this._props.state != this.state) {
        var prev = this._props;
        this._props = {};
        for (var name in prev) { this._props[name] = prev[name]; }
        this._props.state = this.state;
      }
      return this._props
    };

    // :: (DirectEditorProps)
    // Update the view's props. Will immediately cause an update to
    // the DOM.
    EditorView.prototype.update = function update (props) {
      if (props.handleDOMEvents != this._props.handleDOMEvents) { ensureListeners(this); }
      this._props = props;
      this.updateStateInner(props.state, true);
    };

    // :: (DirectEditorProps)
    // Update the view by updating existing props object with the object
    // given as argument. Equivalent to `view.update(Object.assign({},
    // view.props, props))`.
    EditorView.prototype.setProps = function setProps (props) {
      var updated = {};
      for (var name in this._props) { updated[name] = this._props[name]; }
      updated.state = this.state;
      for (var name$1 in props) { updated[name$1] = props[name$1]; }
      this.update(updated);
    };

    // :: (EditorState)
    // Update the editor's `state` prop, without touching any of the
    // other props.
    EditorView.prototype.updateState = function updateState (state) {
      this.updateStateInner(state, this.state.plugins != state.plugins);
    };

    EditorView.prototype.updateStateInner = function updateStateInner (state, reconfigured) {
        var this$1$1 = this;

      var prev = this.state, redraw = false, updateSel = false;
      // When stored marks are added, stop composition, so that they can
      // be displayed.
      if (state.storedMarks && this.composing) {
        clearComposition(this);
        updateSel = true;
      }
      this.state = state;
      if (reconfigured) {
        var nodeViews = buildNodeViews(this);
        if (changedNodeViews(nodeViews, this.nodeViews)) {
          this.nodeViews = nodeViews;
          redraw = true;
        }
        ensureListeners(this);
      }

      this.editable = getEditable(this);
      updateCursorWrapper(this);
      var innerDeco = viewDecorations(this), outerDeco = computeDocDeco(this);

      var scroll = reconfigured ? "reset"
          : state.scrollToSelection > prev.scrollToSelection ? "to selection" : "preserve";
      var updateDoc = redraw || !this.docView.matchesNode(state.doc, outerDeco, innerDeco);
      if (updateDoc || !state.selection.eq(prev.selection)) { updateSel = true; }
      var oldScrollPos = scroll == "preserve" && updateSel && this.dom.style.overflowAnchor == null && storeScrollPos(this);

      if (updateSel) {
        this.domObserver.stop();
        // Work around an issue in Chrome, IE, and Edge where changing
        // the DOM around an active selection puts it into a broken
        // state where the thing the user sees differs from the
        // selection reported by the Selection object (#710, #973,
        // #1011, #1013, #1035).
        var forceSelUpdate = updateDoc && (result.ie || result.chrome) && !this.composing &&
            !prev.selection.empty && !state.selection.empty && selectionContextChanged(prev.selection, state.selection);
        if (updateDoc) {
          // If the node that the selection points into is written to,
          // Chrome sometimes starts misreporting the selection, so this
          // tracks that and forces a selection reset when our update
          // did write to the node.
          var chromeKludge = result.chrome ? (this.trackWrites = this.root.getSelection().focusNode) : null;
          if (redraw || !this.docView.update(state.doc, outerDeco, innerDeco, this)) {
            this.docView.updateOuterDeco([]);
            this.docView.destroy();
            this.docView = docViewDesc(state.doc, outerDeco, innerDeco, this.dom, this);
          }
          if (chromeKludge && !this.trackWrites) { forceSelUpdate = true; }
        }
        // Work around for an issue where an update arriving right between
        // a DOM selection change and the "selectionchange" event for it
        // can cause a spurious DOM selection update, disrupting mouse
        // drag selection.
        if (forceSelUpdate ||
            !(this.mouseDown && this.domObserver.currentSelection.eq(this.root.getSelection()) && anchorInRightPlace(this))) {
          selectionToDOM(this, forceSelUpdate);
        } else {
          syncNodeSelection(this, state.selection);
          this.domObserver.setCurSelection();
        }
        this.domObserver.start();
      }

      this.updatePluginViews(prev);

      if (scroll == "reset") {
        this.dom.scrollTop = 0;
      } else if (scroll == "to selection") {
        var startDOM = this.root.getSelection().focusNode;
        if (this.someProp("handleScrollToSelection", function (f) { return f(this$1$1); }))
          ; // Handled
        else if (state.selection instanceof NodeSelection)
          { scrollRectIntoView(this, this.docView.domAfterPos(state.selection.from).getBoundingClientRect(), startDOM); }
        else
          { scrollRectIntoView(this, this.coordsAtPos(state.selection.head, 1), startDOM); }
      } else if (oldScrollPos) {
        resetScrollPos(oldScrollPos);
      }
    };

    EditorView.prototype.destroyPluginViews = function destroyPluginViews () {
      var view;
      while (view = this.pluginViews.pop()) { if (view.destroy) { view.destroy(); } }
    };

    EditorView.prototype.updatePluginViews = function updatePluginViews (prevState) {
      if (!prevState || prevState.plugins != this.state.plugins) {
        this.destroyPluginViews();
        for (var i = 0; i < this.state.plugins.length; i++) {
          var plugin = this.state.plugins[i];
          if (plugin.spec.view) { this.pluginViews.push(plugin.spec.view(this)); }
        }
      } else {
        for (var i$1 = 0; i$1 < this.pluginViews.length; i$1++) {
          var pluginView = this.pluginViews[i$1];
          if (pluginView.update) { pluginView.update(this, prevState); }
        }
      }
    };

    // :: (string, ?(prop: *) → *) → *
    // Goes over the values of a prop, first those provided directly,
    // then those from plugins (in order), and calls `f` every time a
    // non-undefined value is found. When `f` returns a truthy value,
    // that is immediately returned. When `f` isn't provided, it is
    // treated as the identity function (the prop value is returned
    // directly).
    EditorView.prototype.someProp = function someProp (propName, f) {
      var prop = this._props && this._props[propName], value;
      if (prop != null && (value = f ? f(prop) : prop)) { return value }
      var plugins = this.state.plugins;
      if (plugins) { for (var i = 0; i < plugins.length; i++) {
        var prop$1 = plugins[i].props[propName];
        if (prop$1 != null && (value = f ? f(prop$1) : prop$1)) { return value }
      } }
    };

    // :: () → bool
    // Query whether the view has focus.
    EditorView.prototype.hasFocus = function hasFocus () {
      return this.root.activeElement == this.dom
    };

    // :: ()
    // Focus the editor.
    EditorView.prototype.focus = function focus () {
      this.domObserver.stop();
      if (this.editable) { focusPreventScroll(this.dom); }
      selectionToDOM(this);
      this.domObserver.start();
    };

    // :: union<dom.Document, dom.DocumentFragment>
    // Get the document root in which the editor exists. This will
    // usually be the top-level `document`, but might be a [shadow
    // DOM](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Shadow_DOM)
    // root if the editor is inside one.
    prototypeAccessors$2.root.get = function () {
      var cached = this._root;
      if (cached == null) { for (var search = this.dom.parentNode; search; search = search.parentNode) {
        if (search.nodeType == 9 || (search.nodeType == 11 && search.host)) {
          if (!search.getSelection) { Object.getPrototypeOf(search).getSelection = function () { return document.getSelection(); }; }
          return this._root = search
        }
      } }
      return cached || document
    };

    // :: ({left: number, top: number}) → ?{pos: number, inside: number}
    // Given a pair of viewport coordinates, return the document
    // position that corresponds to them. May return null if the given
    // coordinates aren't inside of the editor. When an object is
    // returned, its `pos` property is the position nearest to the
    // coordinates, and its `inside` property holds the position of the
    // inner node that the position falls inside of, or -1 if it is at
    // the top level, not in any node.
    EditorView.prototype.posAtCoords = function posAtCoords$1 (coords) {
      return posAtCoords(this, coords)
    };

    // :: (number, number) → {left: number, right: number, top: number, bottom: number}
    // Returns the viewport rectangle at a given document position.
    // `left` and `right` will be the same number, as this returns a
    // flat cursor-ish rectangle. If the position is between two things
    // that aren't directly adjacent, `side` determines which element is
    // used. When < 0, the element before the position is used,
    // otherwise the element after.
    EditorView.prototype.coordsAtPos = function coordsAtPos$1 (pos, side) {
        if ( side === void 0 ) side = 1;

      return coordsAtPos(this, pos, side)
    };

    // :: (number, number) → {node: dom.Node, offset: number}
    // Find the DOM position that corresponds to the given document
    // position. When `side` is negative, find the position as close as
    // possible to the content before the position. When positive,
    // prefer positions close to the content after the position. When
    // zero, prefer as shallow a position as possible.
    //
    // Note that you should **not** mutate the editor's internal DOM,
    // only inspect it (and even that is usually not necessary).
    EditorView.prototype.domAtPos = function domAtPos (pos, side) {
        if ( side === void 0 ) side = 0;

      return this.docView.domFromPos(pos, side)
    };

    // :: (number) → ?dom.Node
    // Find the DOM node that represents the document node after the
    // given position. May return `null` when the position doesn't point
    // in front of a node or if the node is inside an opaque node view.
    //
    // This is intended to be able to call things like
    // `getBoundingClientRect` on that DOM node. Do **not** mutate the
    // editor DOM directly, or add styling this way, since that will be
    // immediately overriden by the editor as it redraws the node.
    EditorView.prototype.nodeDOM = function nodeDOM (pos) {
      var desc = this.docView.descAt(pos);
      return desc ? desc.nodeDOM : null
    };

    // :: (dom.Node, number, ?number) → number
    // Find the document position that corresponds to a given DOM
    // position. (Whenever possible, it is preferable to inspect the
    // document structure directly, rather than poking around in the
    // DOM, but sometimes—for example when interpreting an event
    // target—you don't have a choice.)
    //
    // The `bias` parameter can be used to influence which side of a DOM
    // node to use when the position is inside a leaf node.
    EditorView.prototype.posAtDOM = function posAtDOM (node, offset, bias) {
        if ( bias === void 0 ) bias = -1;

      var pos = this.docView.posFromDOM(node, offset, bias);
      if (pos == null) { throw new RangeError("DOM position not inside the editor") }
      return pos
    };

    // :: (union<"up", "down", "left", "right", "forward", "backward">, ?EditorState) → bool
    // Find out whether the selection is at the end of a textblock when
    // moving in a given direction. When, for example, given `"left"`,
    // it will return true if moving left from the current cursor
    // position would leave that position's parent textblock. Will apply
    // to the view's current state by default, but it is possible to
    // pass a different state.
    EditorView.prototype.endOfTextblock = function endOfTextblock$1 (dir, state) {
      return endOfTextblock(this, state || this.state, dir)
    };

    // :: ()
    // Removes the editor from the DOM and destroys all [node
    // views](#view.NodeView).
    EditorView.prototype.destroy = function destroy () {
      if (!this.docView) { return }
      destroyInput(this);
      this.destroyPluginViews();
      if (this.mounted) {
        this.docView.update(this.state.doc, [], viewDecorations(this), this);
        this.dom.textContent = "";
      } else if (this.dom.parentNode) {
        this.dom.parentNode.removeChild(this.dom);
      }
      this.docView.destroy();
      this.docView = null;
    };

    // Used for testing.
    EditorView.prototype.dispatchEvent = function dispatchEvent$1 (event) {
      return dispatchEvent(this, event)
    };

    // :: (Transaction)
    // Dispatch a transaction. Will call
    // [`dispatchTransaction`](#view.DirectEditorProps.dispatchTransaction)
    // when given, and otherwise defaults to applying the transaction to
    // the current state and calling
    // [`updateState`](#view.EditorView.updateState) with the result.
    // This method is bound to the view instance, so that it can be
    // easily passed around.
    EditorView.prototype.dispatch = function dispatch (tr) {
      var dispatchTransaction = this._props.dispatchTransaction;
      if (dispatchTransaction) { dispatchTransaction.call(this, tr); }
      else { this.updateState(this.state.apply(tr)); }
    };

    Object.defineProperties( EditorView.prototype, prototypeAccessors$2 );

    function computeDocDeco(view) {
      var attrs = Object.create(null);
      attrs.class = "ProseMirror";
      attrs.contenteditable = String(view.editable);

      view.someProp("attributes", function (value) {
        if (typeof value == "function") { value = value(view.state); }
        if (value) { for (var attr in value) {
          if (attr == "class")
            { attrs.class += " " + value[attr]; }
          else if (!attrs[attr] && attr != "contenteditable" && attr != "nodeName")
            { attrs[attr] = String(value[attr]); }
        } }
      });

      return [Decoration.node(0, view.state.doc.content.size, attrs)]
    }

    function updateCursorWrapper(view) {
      if (view.markCursor) {
        var dom = document.createElement("img");
        dom.setAttribute("mark-placeholder", "true");
        view.cursorWrapper = {dom: dom, deco: Decoration.widget(view.state.selection.head, dom, {raw: true, marks: view.markCursor})};
      } else {
        view.cursorWrapper = null;
      }
    }

    function getEditable(view) {
      return !view.someProp("editable", function (value) { return value(view.state) === false; })
    }

    function selectionContextChanged(sel1, sel2) {
      var depth = Math.min(sel1.$anchor.sharedDepth(sel1.head), sel2.$anchor.sharedDepth(sel2.head));
      return sel1.$anchor.start(depth) != sel2.$anchor.start(depth)
    }

    function buildNodeViews(view) {
      var result = {};
      view.someProp("nodeViews", function (obj) {
        for (var prop in obj) { if (!Object.prototype.hasOwnProperty.call(result, prop))
          { result[prop] = obj[prop]; } }
      });
      return result
    }

    function changedNodeViews(a, b) {
      var nA = 0, nB = 0;
      for (var prop in a) {
        if (a[prop] != b[prop]) { return true }
        nA++;
      }
      for (var _ in b) { nB++; }
      return nA != nB
    }

    var base = {
      8: "Backspace",
      9: "Tab",
      10: "Enter",
      12: "NumLock",
      13: "Enter",
      16: "Shift",
      17: "Control",
      18: "Alt",
      20: "CapsLock",
      27: "Escape",
      32: " ",
      33: "PageUp",
      34: "PageDown",
      35: "End",
      36: "Home",
      37: "ArrowLeft",
      38: "ArrowUp",
      39: "ArrowRight",
      40: "ArrowDown",
      44: "PrintScreen",
      45: "Insert",
      46: "Delete",
      59: ";",
      61: "=",
      91: "Meta",
      92: "Meta",
      106: "*",
      107: "+",
      108: ",",
      109: "-",
      110: ".",
      111: "/",
      144: "NumLock",
      145: "ScrollLock",
      160: "Shift",
      161: "Shift",
      162: "Control",
      163: "Control",
      164: "Alt",
      165: "Alt",
      173: "-",
      186: ";",
      187: "=",
      188: ",",
      189: "-",
      190: ".",
      191: "/",
      192: "`",
      219: "[",
      220: "\\",
      221: "]",
      222: "'",
      229: "q"
    };

    var shift = {
      48: ")",
      49: "!",
      50: "@",
      51: "#",
      52: "$",
      53: "%",
      54: "^",
      55: "&",
      56: "*",
      57: "(",
      59: ":",
      61: "+",
      173: "_",
      186: ":",
      187: "+",
      188: "<",
      189: "_",
      190: ">",
      191: "?",
      192: "~",
      219: "{",
      220: "|",
      221: "}",
      222: "\"",
      229: "Q"
    };

    var chrome = typeof navigator != "undefined" && /Chrome\/(\d+)/.exec(navigator.userAgent);
    var safari = typeof navigator != "undefined" && /Apple Computer/.test(navigator.vendor);
    var gecko = typeof navigator != "undefined" && /Gecko\/\d+/.test(navigator.userAgent);
    var mac$2 = typeof navigator != "undefined" && /Mac/.test(navigator.platform);
    var ie = typeof navigator != "undefined" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);
    var brokenModifierNames = chrome && (mac$2 || +chrome[1] < 57) || gecko && mac$2;

    // Fill in the digit keys
    for (var i = 0; i < 10; i++) base[48 + i] = base[96 + i] = String(i);

    // The function keys
    for (var i = 1; i <= 24; i++) base[i + 111] = "F" + i;

    // And the alphabetic keys
    for (var i = 65; i <= 90; i++) {
      base[i] = String.fromCharCode(i + 32);
      shift[i] = String.fromCharCode(i);
    }

    // For each code that doesn't have a shift-equivalent, copy the base name
    for (var code$1 in base) if (!shift.hasOwnProperty(code$1)) shift[code$1] = base[code$1];

    function keyName(event) {
      // Don't trust event.key in Chrome when there are modifiers until
      // they fix https://bugs.chromium.org/p/chromium/issues/detail?id=633838
      var ignoreKey = brokenModifierNames && (event.ctrlKey || event.altKey || event.metaKey) ||
        (safari || ie) && event.shiftKey && event.key && event.key.length == 1;
      var name = (!ignoreKey && event.key) ||
        (event.shiftKey ? shift : base)[event.keyCode] ||
        event.key || "Unidentified";
      // Edge sometimes produces wrong names (Issue #3)
      if (name == "Esc") name = "Escape";
      if (name == "Del") name = "Delete";
      // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8860571/
      if (name == "Left") name = "ArrowLeft";
      if (name == "Up") name = "ArrowUp";
      if (name == "Right") name = "ArrowRight";
      if (name == "Down") name = "ArrowDown";
      return name
    }

    // declare global: navigator

    var mac$1 = typeof navigator != "undefined" ? /Mac/.test(navigator.platform) : false;

    function normalizeKeyName(name) {
      var parts = name.split(/-(?!$)/), result = parts[parts.length - 1];
      if (result == "Space") { result = " "; }
      var alt, ctrl, shift, meta;
      for (var i = 0; i < parts.length - 1; i++) {
        var mod = parts[i];
        if (/^(cmd|meta|m)$/i.test(mod)) { meta = true; }
        else if (/^a(lt)?$/i.test(mod)) { alt = true; }
        else if (/^(c|ctrl|control)$/i.test(mod)) { ctrl = true; }
        else if (/^s(hift)?$/i.test(mod)) { shift = true; }
        else if (/^mod$/i.test(mod)) { if (mac$1) { meta = true; } else { ctrl = true; } }
        else { throw new Error("Unrecognized modifier name: " + mod) }
      }
      if (alt) { result = "Alt-" + result; }
      if (ctrl) { result = "Ctrl-" + result; }
      if (meta) { result = "Meta-" + result; }
      if (shift) { result = "Shift-" + result; }
      return result
    }

    function normalize(map) {
      var copy = Object.create(null);
      for (var prop in map) { copy[normalizeKeyName(prop)] = map[prop]; }
      return copy
    }

    function modifiers(name, event, shift) {
      if (event.altKey) { name = "Alt-" + name; }
      if (event.ctrlKey) { name = "Ctrl-" + name; }
      if (event.metaKey) { name = "Meta-" + name; }
      if (shift !== false && event.shiftKey) { name = "Shift-" + name; }
      return name
    }

    // :: (Object) → Plugin
    // Create a keymap plugin for the given set of bindings.
    //
    // Bindings should map key names to [command](#commands)-style
    // functions, which will be called with `(EditorState, dispatch,
    // EditorView)` arguments, and should return true when they've handled
    // the key. Note that the view argument isn't part of the command
    // protocol, but can be used as an escape hatch if a binding needs to
    // directly interact with the UI.
    //
    // Key names may be strings like `"Shift-Ctrl-Enter"`—a key
    // identifier prefixed with zero or more modifiers. Key identifiers
    // are based on the strings that can appear in
    // [`KeyEvent.key`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key).
    // Use lowercase letters to refer to letter keys (or uppercase letters
    // if you want shift to be held). You may use `"Space"` as an alias
    // for the `" "` name.
    //
    // Modifiers can be given in any order. `Shift-` (or `s-`), `Alt-` (or
    // `a-`), `Ctrl-` (or `c-` or `Control-`) and `Cmd-` (or `m-` or
    // `Meta-`) are recognized. For characters that are created by holding
    // shift, the `Shift-` prefix is implied, and should not be added
    // explicitly.
    //
    // You can use `Mod-` as a shorthand for `Cmd-` on Mac and `Ctrl-` on
    // other platforms.
    //
    // You can add multiple keymap plugins to an editor. The order in
    // which they appear determines their precedence (the ones early in
    // the array get to dispatch first).
    function keymap(bindings) {
      return new Plugin({props: {handleKeyDown: keydownHandler(bindings)}})
    }

    // :: (Object) → (view: EditorView, event: dom.Event) → bool
    // Given a set of bindings (using the same format as
    // [`keymap`](#keymap.keymap), return a [keydown
    // handler](#view.EditorProps.handleKeyDown) that handles them.
    function keydownHandler(bindings) {
      var map = normalize(bindings);
      return function(view, event) {
        var name = keyName(event), isChar = name.length == 1 && name != " ", baseName;
        var direct = map[modifiers(name, event, !isChar)];
        if (direct && direct(view.state, view.dispatch, view)) { return true }
        if (isChar && (event.shiftKey || event.altKey || event.metaKey || name.charCodeAt(0) > 127) &&
            (baseName = base[event.keyCode]) && baseName != name) {
          // Try falling back to the keyCode when there's a modifier
          // active or the character produced isn't ASCII, and our table
          // produces a different name from the the keyCode. See #668,
          // #1060
          var fromCode = map[modifiers(baseName, event, true)];
          if (fromCode && fromCode(view.state, view.dispatch, view)) { return true }
        } else if (isChar && event.shiftKey) {
          // Otherwise, if shift is active, also try the binding with the
          // Shift- prefix enabled. See #997
          var withShift = map[modifiers(name, event, true)];
          if (withShift && withShift(view.state, view.dispatch, view)) { return true }
        }
        return false
      }
    }

    // :: (EditorState, ?(tr: Transaction)) → bool
    // Delete the selection, if there is one.
    function deleteSelection(state, dispatch) {
      if (state.selection.empty) { return false }
      if (dispatch) { dispatch(state.tr.deleteSelection().scrollIntoView()); }
      return true
    }

    // :: (EditorState, ?(tr: Transaction), ?EditorView) → bool
    // If the selection is empty and at the start of a textblock, try to
    // reduce the distance between that block and the one before it—if
    // there's a block directly before it that can be joined, join them.
    // If not, try to move the selected block closer to the next one in
    // the document structure by lifting it out of its parent or moving it
    // into a parent of the previous block. Will use the view for accurate
    // (bidi-aware) start-of-textblock detection if given.
    function joinBackward(state, dispatch, view) {
      var ref = state.selection;
      var $cursor = ref.$cursor;
      if (!$cursor || (view ? !view.endOfTextblock("backward", state)
                            : $cursor.parentOffset > 0))
        { return false }

      var $cut = findCutBefore($cursor);

      // If there is no node before this, try to lift
      if (!$cut) {
        var range = $cursor.blockRange(), target = range && liftTarget(range);
        if (target == null) { return false }
        if (dispatch) { dispatch(state.tr.lift(range, target).scrollIntoView()); }
        return true
      }

      var before = $cut.nodeBefore;
      // Apply the joining algorithm
      if (!before.type.spec.isolating && deleteBarrier(state, $cut, dispatch))
        { return true }

      // If the node below has no content and the node above is
      // selectable, delete the node below and select the one above.
      if ($cursor.parent.content.size == 0 &&
          (textblockAt(before, "end") || NodeSelection.isSelectable(before))) {
        if (dispatch) {
          var tr = state.tr.deleteRange($cursor.before(), $cursor.after());
          tr.setSelection(textblockAt(before, "end") ? Selection.findFrom(tr.doc.resolve(tr.mapping.map($cut.pos, -1)), -1)
                          : NodeSelection.create(tr.doc, $cut.pos - before.nodeSize));
          dispatch(tr.scrollIntoView());
        }
        return true
      }

      // If the node before is an atom, delete it
      if (before.isAtom && $cut.depth == $cursor.depth - 1) {
        if (dispatch) { dispatch(state.tr.delete($cut.pos - before.nodeSize, $cut.pos).scrollIntoView()); }
        return true
      }

      return false
    }

    function textblockAt(node, side, only) {
      for (; node; node = (side == "start" ? node.firstChild : node.lastChild)) {
        if (node.isTextblock) { return true }
        if (only && node.childCount != 1) { return false }
      }
      return false
    }

    // :: (EditorState, ?(tr: Transaction), ?EditorView) → bool
    // When the selection is empty and at the start of a textblock, select
    // the node before that textblock, if possible. This is intended to be
    // bound to keys like backspace, after
    // [`joinBackward`](#commands.joinBackward) or other deleting
    // commands, as a fall-back behavior when the schema doesn't allow
    // deletion at the selected point.
    function selectNodeBackward(state, dispatch, view) {
      var ref = state.selection;
      var $head = ref.$head;
      var empty = ref.empty;
      var $cut = $head;
      if (!empty) { return false }

      if ($head.parent.isTextblock) {
        if (view ? !view.endOfTextblock("backward", state) : $head.parentOffset > 0) { return false }
        $cut = findCutBefore($head);
      }
      var node = $cut && $cut.nodeBefore;
      if (!node || !NodeSelection.isSelectable(node)) { return false }
      if (dispatch)
        { dispatch(state.tr.setSelection(NodeSelection.create(state.doc, $cut.pos - node.nodeSize)).scrollIntoView()); }
      return true
    }

    function findCutBefore($pos) {
      if (!$pos.parent.type.spec.isolating) { for (var i = $pos.depth - 1; i >= 0; i--) {
        if ($pos.index(i) > 0) { return $pos.doc.resolve($pos.before(i + 1)) }
        if ($pos.node(i).type.spec.isolating) { break }
      } }
      return null
    }

    // :: (EditorState, ?(tr: Transaction), ?EditorView) → bool
    // If the selection is empty and the cursor is at the end of a
    // textblock, try to reduce or remove the boundary between that block
    // and the one after it, either by joining them or by moving the other
    // block closer to this one in the tree structure. Will use the view
    // for accurate start-of-textblock detection if given.
    function joinForward(state, dispatch, view) {
      var ref = state.selection;
      var $cursor = ref.$cursor;
      if (!$cursor || (view ? !view.endOfTextblock("forward", state)
                            : $cursor.parentOffset < $cursor.parent.content.size))
        { return false }

      var $cut = findCutAfter($cursor);

      // If there is no node after this, there's nothing to do
      if (!$cut) { return false }

      var after = $cut.nodeAfter;
      // Try the joining algorithm
      if (deleteBarrier(state, $cut, dispatch)) { return true }

      // If the node above has no content and the node below is
      // selectable, delete the node above and select the one below.
      if ($cursor.parent.content.size == 0 &&
          (textblockAt(after, "start") || NodeSelection.isSelectable(after))) {
        if (dispatch) {
          var tr = state.tr.deleteRange($cursor.before(), $cursor.after());
          tr.setSelection(textblockAt(after, "start") ? Selection.findFrom(tr.doc.resolve(tr.mapping.map($cut.pos)), 1)
                          : NodeSelection.create(tr.doc, tr.mapping.map($cut.pos)));
          dispatch(tr.scrollIntoView());
        }
        return true
      }

      // If the next node is an atom, delete it
      if (after.isAtom && $cut.depth == $cursor.depth - 1) {
        if (dispatch) { dispatch(state.tr.delete($cut.pos, $cut.pos + after.nodeSize).scrollIntoView()); }
        return true
      }

      return false
    }

    // :: (EditorState, ?(tr: Transaction), ?EditorView) → bool
    // When the selection is empty and at the end of a textblock, select
    // the node coming after that textblock, if possible. This is intended
    // to be bound to keys like delete, after
    // [`joinForward`](#commands.joinForward) and similar deleting
    // commands, to provide a fall-back behavior when the schema doesn't
    // allow deletion at the selected point.
    function selectNodeForward(state, dispatch, view) {
      var ref = state.selection;
      var $head = ref.$head;
      var empty = ref.empty;
      var $cut = $head;
      if (!empty) { return false }
      if ($head.parent.isTextblock) {
        if (view ? !view.endOfTextblock("forward", state) : $head.parentOffset < $head.parent.content.size)
          { return false }
        $cut = findCutAfter($head);
      }
      var node = $cut && $cut.nodeAfter;
      if (!node || !NodeSelection.isSelectable(node)) { return false }
      if (dispatch)
        { dispatch(state.tr.setSelection(NodeSelection.create(state.doc, $cut.pos)).scrollIntoView()); }
      return true
    }

    function findCutAfter($pos) {
      if (!$pos.parent.type.spec.isolating) { for (var i = $pos.depth - 1; i >= 0; i--) {
        var parent = $pos.node(i);
        if ($pos.index(i) + 1 < parent.childCount) { return $pos.doc.resolve($pos.after(i + 1)) }
        if (parent.type.spec.isolating) { break }
      } }
      return null
    }

    // :: (EditorState, ?(tr: Transaction)) → bool
    // If the selection is in a node whose type has a truthy
    // [`code`](#model.NodeSpec.code) property in its spec, replace the
    // selection with a newline character.
    function newlineInCode(state, dispatch) {
      var ref = state.selection;
      var $head = ref.$head;
      var $anchor = ref.$anchor;
      if (!$head.parent.type.spec.code || !$head.sameParent($anchor)) { return false }
      if (dispatch) { dispatch(state.tr.insertText("\n").scrollIntoView()); }
      return true
    }

    function defaultBlockAt(match) {
      for (var i = 0; i < match.edgeCount; i++) {
        var ref = match.edge(i);
        var type = ref.type;
        if (type.isTextblock && !type.hasRequiredAttrs()) { return type }
      }
      return null
    }

    // :: (EditorState, ?(tr: Transaction)) → bool
    // When the selection is in a node with a truthy
    // [`code`](#model.NodeSpec.code) property in its spec, create a
    // default block after the code block, and move the cursor there.
    function exitCode(state, dispatch) {
      var ref = state.selection;
      var $head = ref.$head;
      var $anchor = ref.$anchor;
      if (!$head.parent.type.spec.code || !$head.sameParent($anchor)) { return false }
      var above = $head.node(-1), after = $head.indexAfter(-1), type = defaultBlockAt(above.contentMatchAt(after));
      if (!above.canReplaceWith(after, after, type)) { return false }
      if (dispatch) {
        var pos = $head.after(), tr = state.tr.replaceWith(pos, pos, type.createAndFill());
        tr.setSelection(Selection.near(tr.doc.resolve(pos), 1));
        dispatch(tr.scrollIntoView());
      }
      return true
    }

    // :: (EditorState, ?(tr: Transaction)) → bool
    // If a block node is selected, create an empty paragraph before (if
    // it is its parent's first child) or after it.
    function createParagraphNear(state, dispatch) {
      var sel = state.selection;
      var $from = sel.$from;
      var $to = sel.$to;
      if (sel instanceof AllSelection || $from.parent.inlineContent || $to.parent.inlineContent) { return false }
      var type = defaultBlockAt($to.parent.contentMatchAt($to.indexAfter()));
      if (!type || !type.isTextblock) { return false }
      if (dispatch) {
        var side = (!$from.parentOffset && $to.index() < $to.parent.childCount ? $from : $to).pos;
        var tr = state.tr.insert(side, type.createAndFill());
        tr.setSelection(TextSelection.create(tr.doc, side + 1));
        dispatch(tr.scrollIntoView());
      }
      return true
    }

    // :: (EditorState, ?(tr: Transaction)) → bool
    // If the cursor is in an empty textblock that can be lifted, lift the
    // block.
    function liftEmptyBlock(state, dispatch) {
      var ref = state.selection;
      var $cursor = ref.$cursor;
      if (!$cursor || $cursor.parent.content.size) { return false }
      if ($cursor.depth > 1 && $cursor.after() != $cursor.end(-1)) {
        var before = $cursor.before();
        if (canSplit(state.doc, before)) {
          if (dispatch) { dispatch(state.tr.split(before).scrollIntoView()); }
          return true
        }
      }
      var range = $cursor.blockRange(), target = range && liftTarget(range);
      if (target == null) { return false }
      if (dispatch) { dispatch(state.tr.lift(range, target).scrollIntoView()); }
      return true
    }

    // :: (EditorState, ?(tr: Transaction)) → bool
    // Split the parent block of the selection. If the selection is a text
    // selection, also delete its content.
    function splitBlock(state, dispatch) {
      var ref = state.selection;
      var $from = ref.$from;
      var $to = ref.$to;
      if (state.selection instanceof NodeSelection && state.selection.node.isBlock) {
        if (!$from.parentOffset || !canSplit(state.doc, $from.pos)) { return false }
        if (dispatch) { dispatch(state.tr.split($from.pos).scrollIntoView()); }
        return true
      }

      if (!$from.parent.isBlock) { return false }

      if (dispatch) {
        var atEnd = $to.parentOffset == $to.parent.content.size;
        var tr = state.tr;
        if (state.selection instanceof TextSelection || state.selection instanceof AllSelection) { tr.deleteSelection(); }
        var deflt = $from.depth == 0 ? null : defaultBlockAt($from.node(-1).contentMatchAt($from.indexAfter(-1)));
        var types = atEnd && deflt ? [{type: deflt}] : null;
        var can = canSplit(tr.doc, tr.mapping.map($from.pos), 1, types);
        if (!types && !can && canSplit(tr.doc, tr.mapping.map($from.pos), 1, deflt && [{type: deflt}])) {
          types = [{type: deflt}];
          can = true;
        }
        if (can) {
          tr.split(tr.mapping.map($from.pos), 1, types);
          if (!atEnd && !$from.parentOffset && $from.parent.type != deflt) {
            var first = tr.mapping.map($from.before()), $first = tr.doc.resolve(first);
            if ($from.node(-1).canReplaceWith($first.index(), $first.index() + 1, deflt))
              { tr.setNodeMarkup(tr.mapping.map($from.before()), deflt); }
          }
        }
        dispatch(tr.scrollIntoView());
      }
      return true
    }

    // :: (EditorState, ?(tr: Transaction)) → bool
    // Select the whole document.
    function selectAll(state, dispatch) {
      if (dispatch) { dispatch(state.tr.setSelection(new AllSelection(state.doc))); }
      return true
    }

    function joinMaybeClear(state, $pos, dispatch) {
      var before = $pos.nodeBefore, after = $pos.nodeAfter, index = $pos.index();
      if (!before || !after || !before.type.compatibleContent(after.type)) { return false }
      if (!before.content.size && $pos.parent.canReplace(index - 1, index)) {
        if (dispatch) { dispatch(state.tr.delete($pos.pos - before.nodeSize, $pos.pos).scrollIntoView()); }
        return true
      }
      if (!$pos.parent.canReplace(index, index + 1) || !(after.isTextblock || canJoin(state.doc, $pos.pos)))
        { return false }
      if (dispatch)
        { dispatch(state.tr
                 .clearIncompatible($pos.pos, before.type, before.contentMatchAt(before.childCount))
                 .join($pos.pos)
                 .scrollIntoView()); }
      return true
    }

    function deleteBarrier(state, $cut, dispatch) {
      var before = $cut.nodeBefore, after = $cut.nodeAfter, conn, match;
      if (before.type.spec.isolating || after.type.spec.isolating) { return false }
      if (joinMaybeClear(state, $cut, dispatch)) { return true }

      var canDelAfter = $cut.parent.canReplace($cut.index(), $cut.index() + 1);
      if (canDelAfter &&
          (conn = (match = before.contentMatchAt(before.childCount)).findWrapping(after.type)) &&
          match.matchType(conn[0] || after.type).validEnd) {
        if (dispatch) {
          var end = $cut.pos + after.nodeSize, wrap = Fragment.empty;
          for (var i = conn.length - 1; i >= 0; i--)
            { wrap = Fragment.from(conn[i].create(null, wrap)); }
          wrap = Fragment.from(before.copy(wrap));
          var tr = state.tr.step(new ReplaceAroundStep($cut.pos - 1, end, $cut.pos, end, new Slice(wrap, 1, 0), conn.length, true));
          var joinAt = end + 2 * conn.length;
          if (canJoin(tr.doc, joinAt)) { tr.join(joinAt); }
          dispatch(tr.scrollIntoView());
        }
        return true
      }

      var selAfter = Selection.findFrom($cut, 1);
      var range = selAfter && selAfter.$from.blockRange(selAfter.$to), target = range && liftTarget(range);
      if (target != null && target >= $cut.depth) {
        if (dispatch) { dispatch(state.tr.lift(range, target).scrollIntoView()); }
        return true
      }

      if (canDelAfter && textblockAt(after, "start", true) && textblockAt(before, "end")) {
        var at = before, wrap$1 = [];
        for (;;) {
          wrap$1.push(at);
          if (at.isTextblock) { break }
          at = at.lastChild;
        }
        var afterText = after, afterDepth = 1;
        for (; !afterText.isTextblock; afterText = afterText.firstChild) { afterDepth++; }
        if (at.canReplace(at.childCount, at.childCount, afterText.content)) {
          if (dispatch) {
            var end$1 = Fragment.empty;
            for (var i$1 = wrap$1.length - 1; i$1 >= 0; i$1--) { end$1 = Fragment.from(wrap$1[i$1].copy(end$1)); }
            var tr$1 = state.tr.step(new ReplaceAroundStep($cut.pos - wrap$1.length, $cut.pos + after.nodeSize,
                                                         $cut.pos + afterDepth, $cut.pos + after.nodeSize - afterDepth,
                                                         new Slice(end$1, wrap$1.length, 0), 0, true));
            dispatch(tr$1.scrollIntoView());
          }
          return true
        }
      }

      return false
    }

    // Parameterized commands

    // :: (NodeType, ?Object) → (state: EditorState, dispatch: ?(tr: Transaction)) → bool
    // Wrap the selection in a node of the given type with the given
    // attributes.
    function wrapIn(nodeType, attrs) {
      return function(state, dispatch) {
        var ref = state.selection;
        var $from = ref.$from;
        var $to = ref.$to;
        var range = $from.blockRange($to), wrapping = range && findWrapping(range, nodeType, attrs);
        if (!wrapping) { return false }
        if (dispatch) { dispatch(state.tr.wrap(range, wrapping).scrollIntoView()); }
        return true
      }
    }

    // :: (NodeType, ?Object) → (state: EditorState, dispatch: ?(tr: Transaction)) → bool
    // Returns a command that tries to set the selected textblocks to the
    // given node type with the given attributes.
    function setBlockType(nodeType, attrs) {
      return function(state, dispatch) {
        var ref = state.selection;
        var from = ref.from;
        var to = ref.to;
        var applicable = false;
        state.doc.nodesBetween(from, to, function (node, pos) {
          if (applicable) { return false }
          if (!node.isTextblock || node.hasMarkup(nodeType, attrs)) { return }
          if (node.type == nodeType) {
            applicable = true;
          } else {
            var $pos = state.doc.resolve(pos), index = $pos.index();
            applicable = $pos.parent.canReplaceWith(index, index + 1, nodeType);
          }
        });
        if (!applicable) { return false }
        if (dispatch) { dispatch(state.tr.setBlockType(from, to, nodeType, attrs).scrollIntoView()); }
        return true
      }
    }

    function markApplies(doc, ranges, type) {
      var loop = function ( i ) {
        var ref = ranges[i];
        var $from = ref.$from;
        var $to = ref.$to;
        var can = $from.depth == 0 ? doc.type.allowsMarkType(type) : false;
        doc.nodesBetween($from.pos, $to.pos, function (node) {
          if (can) { return false }
          can = node.inlineContent && node.type.allowsMarkType(type);
        });
        if (can) { return { v: true } }
      };

      for (var i = 0; i < ranges.length; i++) {
        var returned = loop( i );

        if ( returned ) return returned.v;
      }
      return false
    }

    // :: (MarkType, ?Object) → (state: EditorState, dispatch: ?(tr: Transaction)) → bool
    // Create a command function that toggles the given mark with the
    // given attributes. Will return `false` when the current selection
    // doesn't support that mark. This will remove the mark if any marks
    // of that type exist in the selection, or add it otherwise. If the
    // selection is empty, this applies to the [stored
    // marks](#state.EditorState.storedMarks) instead of a range of the
    // document.
    function toggleMark$1(markType, attrs) {
      return function(state, dispatch) {
        var ref = state.selection;
        var empty = ref.empty;
        var $cursor = ref.$cursor;
        var ranges = ref.ranges;
        if ((empty && !$cursor) || !markApplies(state.doc, ranges, markType)) { return false }
        if (dispatch) {
          if ($cursor) {
            if (markType.isInSet(state.storedMarks || $cursor.marks()))
              { dispatch(state.tr.removeStoredMark(markType)); }
            else
              { dispatch(state.tr.addStoredMark(markType.create(attrs))); }
          } else {
            var has = false, tr = state.tr;
            for (var i = 0; !has && i < ranges.length; i++) {
              var ref$1 = ranges[i];
              var $from = ref$1.$from;
              var $to = ref$1.$to;
              has = state.doc.rangeHasMark($from.pos, $to.pos, markType);
            }
            for (var i$1 = 0; i$1 < ranges.length; i$1++) {
              var ref$2 = ranges[i$1];
              var $from$1 = ref$2.$from;
              var $to$1 = ref$2.$to;
              if (has) {
                tr.removeMark($from$1.pos, $to$1.pos, markType);
              } else {
                var from = $from$1.pos, to = $to$1.pos, start = $from$1.nodeAfter, end = $to$1.nodeBefore;
                var spaceStart = start && start.isText ? /^\s*/.exec(start.text)[0].length : 0;
                var spaceEnd = end && end.isText ? /\s*$/.exec(end.text)[0].length : 0;
                if (from + spaceStart < to) { from += spaceStart; to -= spaceEnd; }
                tr.addMark(from, to, markType.create(attrs));
              }
            }
            dispatch(tr.scrollIntoView());
          }
        }
        return true
      }
    }

    // :: (...[(EditorState, ?(tr: Transaction), ?EditorView) → bool]) → (EditorState, ?(tr: Transaction), ?EditorView) → bool
    // Combine a number of command functions into a single function (which
    // calls them one by one until one returns true).
    function chainCommands() {
      var commands = [], len = arguments.length;
      while ( len-- ) commands[ len ] = arguments[ len ];

      return function(state, dispatch, view) {
        for (var i = 0; i < commands.length; i++)
          { if (commands[i](state, dispatch, view)) { return true } }
        return false
      }
    }

    var backspace = chainCommands(deleteSelection, joinBackward, selectNodeBackward);
    var del = chainCommands(deleteSelection, joinForward, selectNodeForward);

    // :: Object
    // A basic keymap containing bindings not specific to any schema.
    // Binds the following keys (when multiple commands are listed, they
    // are chained with [`chainCommands`](#commands.chainCommands)):
    //
    // * **Enter** to `newlineInCode`, `createParagraphNear`, `liftEmptyBlock`, `splitBlock`
    // * **Mod-Enter** to `exitCode`
    // * **Backspace** and **Mod-Backspace** to `deleteSelection`, `joinBackward`, `selectNodeBackward`
    // * **Delete** and **Mod-Delete** to `deleteSelection`, `joinForward`, `selectNodeForward`
    // * **Mod-Delete** to `deleteSelection`, `joinForward`, `selectNodeForward`
    // * **Mod-a** to `selectAll`
    var pcBaseKeymap = {
      "Enter": chainCommands(newlineInCode, createParagraphNear, liftEmptyBlock, splitBlock),
      "Mod-Enter": exitCode,
      "Backspace": backspace,
      "Mod-Backspace": backspace,
      "Delete": del,
      "Mod-Delete": del,
      "Mod-a": selectAll
    };

    // :: Object
    // A copy of `pcBaseKeymap` that also binds **Ctrl-h** like Backspace,
    // **Ctrl-d** like Delete, **Alt-Backspace** like Ctrl-Backspace, and
    // **Ctrl-Alt-Backspace**, **Alt-Delete**, and **Alt-d** like
    // Ctrl-Delete.
    var macBaseKeymap = {
      "Ctrl-h": pcBaseKeymap["Backspace"],
      "Alt-Backspace": pcBaseKeymap["Mod-Backspace"],
      "Ctrl-d": pcBaseKeymap["Delete"],
      "Ctrl-Alt-Backspace": pcBaseKeymap["Mod-Delete"],
      "Alt-Delete": pcBaseKeymap["Mod-Delete"],
      "Alt-d": pcBaseKeymap["Mod-Delete"]
    };
    for (var key in pcBaseKeymap) { macBaseKeymap[key] = pcBaseKeymap[key]; }

    // declare global: os, navigator
    var mac = typeof navigator != "undefined" ? /Mac/.test(navigator.platform)
              : typeof os != "undefined" ? os.platform() == "darwin" : false;

    // :: Object
    // Depending on the detected platform, this will hold
    // [`pcBasekeymap`](#commands.pcBaseKeymap) or
    // [`macBaseKeymap`](#commands.macBaseKeymap).
    var baseKeymap = mac ? macBaseKeymap : pcBaseKeymap;

    // ::- Input rules are regular expressions describing a piece of text
    // that, when typed, causes something to happen. This might be
    // changing two dashes into an emdash, wrapping a paragraph starting
    // with `"> "` into a blockquote, or something entirely different.
    var InputRule = function InputRule(match, handler) {
      this.match = match;
      this.handler = typeof handler == "string" ? stringHandler(handler) : handler;
    };

    function stringHandler(string) {
      return function(state, match, start, end) {
        var insert = string;
        if (match[1]) {
          var offset = match[0].lastIndexOf(match[1]);
          insert += match[0].slice(offset + match[1].length);
          start += offset;
          var cutOff = start - end;
          if (cutOff > 0) {
            insert = match[0].slice(offset - cutOff, offset) + insert;
            start = end;
          }
        }
        return state.tr.insertText(insert, start, end)
      }
    }

    var MAX_MATCH = 500;

    // :: (config: {rules: [InputRule]}) → Plugin
    // Create an input rules plugin. When enabled, it will cause text
    // input that matches any of the given rules to trigger the rule's
    // action.
    function inputRules(ref) {
      var rules = ref.rules;

      var plugin = new Plugin({
        state: {
          init: function init() { return null },
          apply: function apply(tr, prev) {
            var stored = tr.getMeta(this);
            if (stored) { return stored }
            return tr.selectionSet || tr.docChanged ? null : prev
          }
        },

        props: {
          handleTextInput: function handleTextInput(view, from, to, text) {
            return run$1(view, from, to, text, rules, plugin)
          },
          handleDOMEvents: {
            compositionend: function (view) {
              setTimeout(function () {
                var ref = view.state.selection;
                var $cursor = ref.$cursor;
                if ($cursor) { run$1(view, $cursor.pos, $cursor.pos, "", rules, plugin); }
              });
            }
          }
        },

        isInputRules: true
      });
      return plugin
    }

    function run$1(view, from, to, text, rules, plugin) {
      if (view.composing) { return false }
      var state = view.state, $from = state.doc.resolve(from);
      if ($from.parent.type.spec.code) { return false }
      var textBefore = $from.parent.textBetween(Math.max(0, $from.parentOffset - MAX_MATCH), $from.parentOffset,
                                                null, "\ufffc") + text;
      for (var i = 0; i < rules.length; i++) {
        var match = rules[i].match.exec(textBefore);
        var tr = match && rules[i].handler(state, match, from - (match[0].length - text.length), to);
        if (!tr) { continue }
        view.dispatch(tr.setMeta(plugin, {transform: tr, from: from, to: to, text: text}));
        return true
      }
      return false
    }

    // :: InputRule Converts double dashes to an emdash.
    new InputRule(/--$/, "—");
    // :: InputRule Converts three dots to an ellipsis character.
    new InputRule(/\.\.\.$/, "…");
    // :: InputRule “Smart” opening double quotes.
    new InputRule(/(?:^|[\s\{\[\(\<'"\u2018\u201C])(")$/, "“");
    // :: InputRule “Smart” closing double quotes.
    new InputRule(/"$/, "”");
    // :: InputRule “Smart” opening single quotes.
    new InputRule(/(?:^|[\s\{\[\(\<'"\u2018\u201C])(')$/, "‘");
    // :: InputRule “Smart” closing single quotes.
    new InputRule(/'$/, "’");

    var GOOD_LEAF_SIZE = 200;

    // :: class<T> A rope sequence is a persistent sequence data structure
    // that supports appending, prepending, and slicing without doing a
    // full copy. It is represented as a mostly-balanced tree.
    var RopeSequence = function RopeSequence () {};

    RopeSequence.prototype.append = function append (other) {
      if (!other.length) { return this }
      other = RopeSequence.from(other);

      return (!this.length && other) ||
        (other.length < GOOD_LEAF_SIZE && this.leafAppend(other)) ||
        (this.length < GOOD_LEAF_SIZE && other.leafPrepend(this)) ||
        this.appendInner(other)
    };

    // :: (union<[T], RopeSequence<T>>) → RopeSequence<T>
    // Prepend an array or other rope to this one, returning a new rope.
    RopeSequence.prototype.prepend = function prepend (other) {
      if (!other.length) { return this }
      return RopeSequence.from(other).append(this)
    };

    RopeSequence.prototype.appendInner = function appendInner (other) {
      return new Append(this, other)
    };

    // :: (?number, ?number) → RopeSequence<T>
    // Create a rope repesenting a sub-sequence of this rope.
    RopeSequence.prototype.slice = function slice (from, to) {
        if ( from === void 0 ) from = 0;
        if ( to === void 0 ) to = this.length;

      if (from >= to) { return RopeSequence.empty }
      return this.sliceInner(Math.max(0, from), Math.min(this.length, to))
    };

    // :: (number) → T
    // Retrieve the element at the given position from this rope.
    RopeSequence.prototype.get = function get (i) {
      if (i < 0 || i >= this.length) { return undefined }
      return this.getInner(i)
    };

    // :: ((element: T, index: number) → ?bool, ?number, ?number)
    // Call the given function for each element between the given
    // indices. This tends to be more efficient than looping over the
    // indices and calling `get`, because it doesn't have to descend the
    // tree for every element.
    RopeSequence.prototype.forEach = function forEach (f, from, to) {
        if ( from === void 0 ) from = 0;
        if ( to === void 0 ) to = this.length;

      if (from <= to)
        { this.forEachInner(f, from, to, 0); }
      else
        { this.forEachInvertedInner(f, from, to, 0); }
    };

    // :: ((element: T, index: number) → U, ?number, ?number) → [U]
    // Map the given functions over the elements of the rope, producing
    // a flat array.
    RopeSequence.prototype.map = function map (f, from, to) {
        if ( from === void 0 ) from = 0;
        if ( to === void 0 ) to = this.length;

      var result = [];
      this.forEach(function (elt, i) { return result.push(f(elt, i)); }, from, to);
      return result
    };

    // :: (?union<[T], RopeSequence<T>>) → RopeSequence<T>
    // Create a rope representing the given array, or return the rope
    // itself if a rope was given.
    RopeSequence.from = function from (values) {
      if (values instanceof RopeSequence) { return values }
      return values && values.length ? new Leaf(values) : RopeSequence.empty
    };

    var Leaf = /*@__PURE__*/(function (RopeSequence) {
      function Leaf(values) {
        RopeSequence.call(this);
        this.values = values;
      }

      if ( RopeSequence ) Leaf.__proto__ = RopeSequence;
      Leaf.prototype = Object.create( RopeSequence && RopeSequence.prototype );
      Leaf.prototype.constructor = Leaf;

      var prototypeAccessors = { length: { configurable: true },depth: { configurable: true } };

      Leaf.prototype.flatten = function flatten () {
        return this.values
      };

      Leaf.prototype.sliceInner = function sliceInner (from, to) {
        if (from == 0 && to == this.length) { return this }
        return new Leaf(this.values.slice(from, to))
      };

      Leaf.prototype.getInner = function getInner (i) {
        return this.values[i]
      };

      Leaf.prototype.forEachInner = function forEachInner (f, from, to, start) {
        for (var i = from; i < to; i++)
          { if (f(this.values[i], start + i) === false) { return false } }
      };

      Leaf.prototype.forEachInvertedInner = function forEachInvertedInner (f, from, to, start) {
        for (var i = from - 1; i >= to; i--)
          { if (f(this.values[i], start + i) === false) { return false } }
      };

      Leaf.prototype.leafAppend = function leafAppend (other) {
        if (this.length + other.length <= GOOD_LEAF_SIZE)
          { return new Leaf(this.values.concat(other.flatten())) }
      };

      Leaf.prototype.leafPrepend = function leafPrepend (other) {
        if (this.length + other.length <= GOOD_LEAF_SIZE)
          { return new Leaf(other.flatten().concat(this.values)) }
      };

      prototypeAccessors.length.get = function () { return this.values.length };

      prototypeAccessors.depth.get = function () { return 0 };

      Object.defineProperties( Leaf.prototype, prototypeAccessors );

      return Leaf;
    }(RopeSequence));

    // :: RopeSequence
    // The empty rope sequence.
    RopeSequence.empty = new Leaf([]);

    var Append = /*@__PURE__*/(function (RopeSequence) {
      function Append(left, right) {
        RopeSequence.call(this);
        this.left = left;
        this.right = right;
        this.length = left.length + right.length;
        this.depth = Math.max(left.depth, right.depth) + 1;
      }

      if ( RopeSequence ) Append.__proto__ = RopeSequence;
      Append.prototype = Object.create( RopeSequence && RopeSequence.prototype );
      Append.prototype.constructor = Append;

      Append.prototype.flatten = function flatten () {
        return this.left.flatten().concat(this.right.flatten())
      };

      Append.prototype.getInner = function getInner (i) {
        return i < this.left.length ? this.left.get(i) : this.right.get(i - this.left.length)
      };

      Append.prototype.forEachInner = function forEachInner (f, from, to, start) {
        var leftLen = this.left.length;
        if (from < leftLen &&
            this.left.forEachInner(f, from, Math.min(to, leftLen), start) === false)
          { return false }
        if (to > leftLen &&
            this.right.forEachInner(f, Math.max(from - leftLen, 0), Math.min(this.length, to) - leftLen, start + leftLen) === false)
          { return false }
      };

      Append.prototype.forEachInvertedInner = function forEachInvertedInner (f, from, to, start) {
        var leftLen = this.left.length;
        if (from > leftLen &&
            this.right.forEachInvertedInner(f, from - leftLen, Math.max(to, leftLen) - leftLen, start + leftLen) === false)
          { return false }
        if (to < leftLen &&
            this.left.forEachInvertedInner(f, Math.min(from, leftLen), to, start) === false)
          { return false }
      };

      Append.prototype.sliceInner = function sliceInner (from, to) {
        if (from == 0 && to == this.length) { return this }
        var leftLen = this.left.length;
        if (to <= leftLen) { return this.left.slice(from, to) }
        if (from >= leftLen) { return this.right.slice(from - leftLen, to - leftLen) }
        return this.left.slice(from, leftLen).append(this.right.slice(0, to - leftLen))
      };

      Append.prototype.leafAppend = function leafAppend (other) {
        var inner = this.right.leafAppend(other);
        if (inner) { return new Append(this.left, inner) }
      };

      Append.prototype.leafPrepend = function leafPrepend (other) {
        var inner = this.left.leafPrepend(other);
        if (inner) { return new Append(inner, this.right) }
      };

      Append.prototype.appendInner = function appendInner (other) {
        if (this.left.depth >= Math.max(this.right.depth, other.depth) + 1)
          { return new Append(this.left, new Append(this.right, other)) }
        return new Append(this, other)
      };

      return Append;
    }(RopeSequence));

    var ropeSequence = RopeSequence;

    // ProseMirror's history isn't simply a way to roll back to a previous
    // state, because ProseMirror supports applying changes without adding
    // them to the history (for example during collaboration).
    //
    // To this end, each 'Branch' (one for the undo history and one for
    // the redo history) keeps an array of 'Items', which can optionally
    // hold a step (an actual undoable change), and always hold a position
    // map (which is needed to move changes below them to apply to the
    // current document).
    //
    // An item that has both a step and a selection bookmark is the start
    // of an 'event' — a group of changes that will be undone or redone at
    // once. (It stores only the bookmark, since that way we don't have to
    // provide a document until the selection is actually applied, which
    // is useful when compressing.)

    // Used to schedule history compression
    var max_empty_items = 500;

    var Branch = function Branch(items, eventCount) {
      this.items = items;
      this.eventCount = eventCount;
    };

    // : (EditorState, bool) → ?{transform: Transform, selection: ?SelectionBookmark, remaining: Branch}
    // Pop the latest event off the branch's history and apply it
    // to a document transform.
    Branch.prototype.popEvent = function popEvent (state, preserveItems) {
        var this$1$1 = this;

      if (this.eventCount == 0) { return null }

      var end = this.items.length;
      for (;; end--) {
        var next = this.items.get(end - 1);
        if (next.selection) { --end; break }
      }

      var remap, mapFrom;
      if (preserveItems) {
        remap = this.remapping(end, this.items.length);
        mapFrom = remap.maps.length;
      }
      var transform = state.tr;
      var selection, remaining;
      var addAfter = [], addBefore = [];

      this.items.forEach(function (item, i) {
        if (!item.step) {
          if (!remap) {
            remap = this$1$1.remapping(end, i + 1);
            mapFrom = remap.maps.length;
          }
          mapFrom--;
          addBefore.push(item);
          return
        }

        if (remap) {
          addBefore.push(new Item(item.map));
          var step = item.step.map(remap.slice(mapFrom)), map;

          if (step && transform.maybeStep(step).doc) {
            map = transform.mapping.maps[transform.mapping.maps.length - 1];
            addAfter.push(new Item(map, null, null, addAfter.length + addBefore.length));
          }
          mapFrom--;
          if (map) { remap.appendMap(map, mapFrom); }
        } else {
          transform.maybeStep(item.step);
        }

        if (item.selection) {
          selection = remap ? item.selection.map(remap.slice(mapFrom)) : item.selection;
          remaining = new Branch(this$1$1.items.slice(0, end).append(addBefore.reverse().concat(addAfter)), this$1$1.eventCount - 1);
          return false
        }
      }, this.items.length, 0);

      return {remaining: remaining, transform: transform, selection: selection}
    };

    // : (Transform, ?SelectionBookmark, Object) → Branch
    // Create a new branch with the given transform added.
    Branch.prototype.addTransform = function addTransform (transform, selection, histOptions, preserveItems) {
      var newItems = [], eventCount = this.eventCount;
      var oldItems = this.items, lastItem = !preserveItems && oldItems.length ? oldItems.get(oldItems.length - 1) : null;

      for (var i = 0; i < transform.steps.length; i++) {
        var step = transform.steps[i].invert(transform.docs[i]);
        var item = new Item(transform.mapping.maps[i], step, selection), merged = (void 0);
        if (merged = lastItem && lastItem.merge(item)) {
          item = merged;
          if (i) { newItems.pop(); }
          else { oldItems = oldItems.slice(0, oldItems.length - 1); }
        }
        newItems.push(item);
        if (selection) {
          eventCount++;
          selection = null;
        }
        if (!preserveItems) { lastItem = item; }
      }
      var overflow = eventCount - histOptions.depth;
      if (overflow > DEPTH_OVERFLOW) {
        oldItems = cutOffEvents(oldItems, overflow);
        eventCount -= overflow;
      }
      return new Branch(oldItems.append(newItems), eventCount)
    };

    Branch.prototype.remapping = function remapping (from, to) {
      var maps = new Mapping;
      this.items.forEach(function (item, i) {
        var mirrorPos = item.mirrorOffset != null && i - item.mirrorOffset >= from
            ? maps.maps.length - item.mirrorOffset : null;
        maps.appendMap(item.map, mirrorPos);
      }, from, to);
      return maps
    };

    Branch.prototype.addMaps = function addMaps (array) {
      if (this.eventCount == 0) { return this }
      return new Branch(this.items.append(array.map(function (map) { return new Item(map); })), this.eventCount)
    };

    // : (Transform, number)
    // When the collab module receives remote changes, the history has
    // to know about those, so that it can adjust the steps that were
    // rebased on top of the remote changes, and include the position
    // maps for the remote changes in its array of items.
    Branch.prototype.rebased = function rebased (rebasedTransform, rebasedCount) {
      if (!this.eventCount) { return this }

      var rebasedItems = [], start = Math.max(0, this.items.length - rebasedCount);

      var mapping = rebasedTransform.mapping;
      var newUntil = rebasedTransform.steps.length;
      var eventCount = this.eventCount;
      this.items.forEach(function (item) { if (item.selection) { eventCount--; } }, start);

      var iRebased = rebasedCount;
      this.items.forEach(function (item) {
        var pos = mapping.getMirror(--iRebased);
        if (pos == null) { return }
        newUntil = Math.min(newUntil, pos);
        var map = mapping.maps[pos];
        if (item.step) {
          var step = rebasedTransform.steps[pos].invert(rebasedTransform.docs[pos]);
          var selection = item.selection && item.selection.map(mapping.slice(iRebased + 1, pos));
          if (selection) { eventCount++; }
          rebasedItems.push(new Item(map, step, selection));
        } else {
          rebasedItems.push(new Item(map));
        }
      }, start);

      var newMaps = [];
      for (var i = rebasedCount; i < newUntil; i++)
        { newMaps.push(new Item(mapping.maps[i])); }
      var items = this.items.slice(0, start).append(newMaps).append(rebasedItems);
      var branch = new Branch(items, eventCount);

      if (branch.emptyItemCount() > max_empty_items)
        { branch = branch.compress(this.items.length - rebasedItems.length); }
      return branch
    };

    Branch.prototype.emptyItemCount = function emptyItemCount () {
      var count = 0;
      this.items.forEach(function (item) { if (!item.step) { count++; } });
      return count
    };

    // Compressing a branch means rewriting it to push the air (map-only
    // items) out. During collaboration, these naturally accumulate
    // because each remote change adds one. The `upto` argument is used
    // to ensure that only the items below a given level are compressed,
    // because `rebased` relies on a clean, untouched set of items in
    // order to associate old items with rebased steps.
    Branch.prototype.compress = function compress (upto) {
        if ( upto === void 0 ) upto = this.items.length;

      var remap = this.remapping(0, upto), mapFrom = remap.maps.length;
      var items = [], events = 0;
      this.items.forEach(function (item, i) {
        if (i >= upto) {
          items.push(item);
          if (item.selection) { events++; }
        } else if (item.step) {
          var step = item.step.map(remap.slice(mapFrom)), map = step && step.getMap();
          mapFrom--;
          if (map) { remap.appendMap(map, mapFrom); }
          if (step) {
            var selection = item.selection && item.selection.map(remap.slice(mapFrom));
            if (selection) { events++; }
            var newItem = new Item(map.invert(), step, selection), merged, last = items.length - 1;
            if (merged = items.length && items[last].merge(newItem))
              { items[last] = merged; }
            else
              { items.push(newItem); }
          }
        } else if (item.map) {
          mapFrom--;
        }
      }, this.items.length, 0);
      return new Branch(ropeSequence.from(items.reverse()), events)
    };

    Branch.empty = new Branch(ropeSequence.empty, 0);

    function cutOffEvents(items, n) {
      var cutPoint;
      items.forEach(function (item, i) {
        if (item.selection && (n-- == 0)) {
          cutPoint = i;
          return false
        }
      });
      return items.slice(cutPoint)
    }

    var Item = function Item(map, step, selection, mirrorOffset) {
      // The (forward) step map for this item.
      this.map = map;
      // The inverted step
      this.step = step;
      // If this is non-null, this item is the start of a group, and
      // this selection is the starting selection for the group (the one
      // that was active before the first step was applied)
      this.selection = selection;
      // If this item is the inverse of a previous mapping on the stack,
      // this points at the inverse's offset
      this.mirrorOffset = mirrorOffset;
    };

    Item.prototype.merge = function merge (other) {
      if (this.step && other.step && !other.selection) {
        var step = other.step.merge(this.step);
        if (step) { return new Item(step.getMap().invert(), step, this.selection) }
      }
    };

    // The value of the state field that tracks undo/redo history for that
    // state. Will be stored in the plugin state when the history plugin
    // is active.
    var HistoryState = function HistoryState(done, undone, prevRanges, prevTime) {
      this.done = done;
      this.undone = undone;
      this.prevRanges = prevRanges;
      this.prevTime = prevTime;
    };

    var DEPTH_OVERFLOW = 20;

    // : (HistoryState, EditorState, Transaction, Object)
    // Record a transformation in undo history.
    function applyTransaction(history, state, tr, options) {
      var historyTr = tr.getMeta(historyKey), rebased;
      if (historyTr) { return historyTr.historyState }

      if (tr.getMeta(closeHistoryKey)) { history = new HistoryState(history.done, history.undone, null, 0); }

      var appended = tr.getMeta("appendedTransaction");

      if (tr.steps.length == 0) {
        return history
      } else if (appended && appended.getMeta(historyKey)) {
        if (appended.getMeta(historyKey).redo)
          { return new HistoryState(history.done.addTransform(tr, null, options, mustPreserveItems(state)),
                                  history.undone, rangesFor(tr.mapping.maps[tr.steps.length - 1]), history.prevTime) }
        else
          { return new HistoryState(history.done, history.undone.addTransform(tr, null, options, mustPreserveItems(state)),
                                  null, history.prevTime) }
      } else if (tr.getMeta("addToHistory") !== false && !(appended && appended.getMeta("addToHistory") === false)) {
        // Group transforms that occur in quick succession into one event.
        var newGroup = history.prevTime == 0 || !appended && (history.prevTime < (tr.time || 0) - options.newGroupDelay ||
                                                              !isAdjacentTo(tr, history.prevRanges));
        var prevRanges = appended ? mapRanges(history.prevRanges, tr.mapping) : rangesFor(tr.mapping.maps[tr.steps.length - 1]);
        return new HistoryState(history.done.addTransform(tr, newGroup ? state.selection.getBookmark() : null,
                                                          options, mustPreserveItems(state)),
                                Branch.empty, prevRanges, tr.time)
      } else if (rebased = tr.getMeta("rebased")) {
        // Used by the collab module to tell the history that some of its
        // content has been rebased.
        return new HistoryState(history.done.rebased(tr, rebased),
                                history.undone.rebased(tr, rebased),
                                mapRanges(history.prevRanges, tr.mapping), history.prevTime)
      } else {
        return new HistoryState(history.done.addMaps(tr.mapping.maps),
                                history.undone.addMaps(tr.mapping.maps),
                                mapRanges(history.prevRanges, tr.mapping), history.prevTime)
      }
    }

    function isAdjacentTo(transform, prevRanges) {
      if (!prevRanges) { return false }
      if (!transform.docChanged) { return true }
      var adjacent = false;
      transform.mapping.maps[0].forEach(function (start, end) {
        for (var i = 0; i < prevRanges.length; i += 2)
          { if (start <= prevRanges[i + 1] && end >= prevRanges[i])
            { adjacent = true; } }
      });
      return adjacent
    }

    function rangesFor(map) {
      var result = [];
      map.forEach(function (_from, _to, from, to) { return result.push(from, to); });
      return result
    }

    function mapRanges(ranges, mapping) {
      if (!ranges) { return null }
      var result = [];
      for (var i = 0; i < ranges.length; i += 2) {
        var from = mapping.map(ranges[i], 1), to = mapping.map(ranges[i + 1], -1);
        if (from <= to) { result.push(from, to); }
      }
      return result
    }

    // : (HistoryState, EditorState, (tr: Transaction), bool)
    // Apply the latest event from one branch to the document and shift the event
    // onto the other branch.
    function histTransaction(history, state, dispatch, redo) {
      var preserveItems = mustPreserveItems(state), histOptions = historyKey.get(state).spec.config;
      var pop = (redo ? history.undone : history.done).popEvent(state, preserveItems);
      if (!pop) { return }

      var selection = pop.selection.resolve(pop.transform.doc);
      var added = (redo ? history.done : history.undone).addTransform(pop.transform, state.selection.getBookmark(),
                                                                      histOptions, preserveItems);

      var newHist = new HistoryState(redo ? added : pop.remaining, redo ? pop.remaining : added, null, 0);
      dispatch(pop.transform.setSelection(selection).setMeta(historyKey, {redo: redo, historyState: newHist}).scrollIntoView());
    }

    var cachedPreserveItems = false, cachedPreserveItemsPlugins = null;
    // Check whether any plugin in the given state has a
    // `historyPreserveItems` property in its spec, in which case we must
    // preserve steps exactly as they came in, so that they can be
    // rebased.
    function mustPreserveItems(state) {
      var plugins = state.plugins;
      if (cachedPreserveItemsPlugins != plugins) {
        cachedPreserveItems = false;
        cachedPreserveItemsPlugins = plugins;
        for (var i = 0; i < plugins.length; i++) { if (plugins[i].spec.historyPreserveItems) {
          cachedPreserveItems = true;
          break
        } }
      }
      return cachedPreserveItems
    }

    var historyKey = new PluginKey("history");
    var closeHistoryKey = new PluginKey("closeHistory");

    // :: (?Object) → Plugin
    // Returns a plugin that enables the undo history for an editor. The
    // plugin will track undo and redo stacks, which can be used with the
    // [`undo`](#history.undo) and [`redo`](#history.redo) commands.
    //
    // You can set an `"addToHistory"` [metadata
    // property](#state.Transaction.setMeta) of `false` on a transaction
    // to prevent it from being rolled back by undo.
    //
    //   config::-
    //   Supports the following configuration options:
    //
    //     depth:: ?number
    //     The amount of history events that are collected before the
    //     oldest events are discarded. Defaults to 100.
    //
    //     newGroupDelay:: ?number
    //     The delay between changes after which a new group should be
    //     started. Defaults to 500 (milliseconds). Note that when changes
    //     aren't adjacent, a new group is always started.
    function history$1(config) {
      config = {depth: config && config.depth || 100,
                newGroupDelay: config && config.newGroupDelay || 500};
      return new Plugin({
        key: historyKey,

        state: {
          init: function init() {
            return new HistoryState(Branch.empty, Branch.empty, null, 0)
          },
          apply: function apply(tr, hist, state) {
            return applyTransaction(hist, state, tr, config)
          }
        },

        config: config
      })
    }

    // :: (EditorState, ?(tr: Transaction)) → bool
    // A command function that undoes the last change, if any.
    function undo(state, dispatch) {
      var hist = historyKey.getState(state);
      if (!hist || hist.done.eventCount == 0) { return false }
      if (dispatch) { histTransaction(hist, state, dispatch, false); }
      return true
    }

    // :: (EditorState, ?(tr: Transaction)) → bool
    // A command function that redoes the last undone change, if any.
    function redo(state, dispatch) {
      var hist = historyKey.getState(state);
      if (!hist || hist.undone.eventCount == 0) { return false }
      if (dispatch) { histTransaction(hist, state, dispatch, true); }
      return true
    }

    // :: (EditorState) → number
    // The amount of undoable events available in a given state.
    function undoDepth(state) {
      var hist = historyKey.getState(state);
      return hist ? hist.done.eventCount : 0
    }

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics$1 = function(d, b) {
        extendStatics$1 = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics$1(d, b);
    };

    function __extends$1(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics$1(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign$1 = function() {
        __assign$1 = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign$1.apply(this, arguments);
    };

    function __spreadArray$1(to, from) {
        for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
            to[j] = from[i];
        return to;
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    }

    /**
     * @fileoverview Execute the provided callback once for each property of object which actually exist.
     * @author NHN FE Development Lab <dl_javascript@nhn.com>
     */

    /**
     * Execute the provided callback once for each property of object which actually exist.
     * If the callback function returns false, the loop will be stopped.
     * Callback function(iteratee) is invoked with three arguments:
     *  1) The value of the property
     *  2) The name of the property
     *  3) The object being traversed
     * @param {Object} obj The object that will be traversed
     * @param {function} iteratee  Callback function
     * @param {Object} [context] Context(this) of callback function
     * @memberof module:collection
     * @example
     * var forEachOwnProperties = require('tui-code-snippet/collection/forEachOwnProperties'); // node, commonjs
     *
     * var sum = 0;
     *
     * forEachOwnProperties({a:1,b:2,c:3}, function(value){
     *     sum += value;
     * });
     * alert(sum); // 6
     */
    function forEachOwnProperties$2(obj, iteratee, context) {
      var key;

      context = context || null;

      for (key in obj) {
        if (obj.hasOwnProperty(key)) {
          if (iteratee.call(context, obj[key], key, obj) === false) {
            break;
          }
        }
      }
    }

    var forEachOwnProperties_1 = forEachOwnProperties$2;

    /**
     * @fileoverview Extend the target object from other objects.
     * @author NHN FE Development Lab <dl_javascript@nhn.com>
     */

    /**
     * @module object
     */

    /**
     * Extend the target object from other objects.
     * @param {object} target - Object that will be extended
     * @param {...object} objects - Objects as sources
     * @returns {object} Extended object
     * @memberof module:object
     */
    function extend(target, objects) { // eslint-disable-line no-unused-vars
      var hasOwnProp = Object.prototype.hasOwnProperty;
      var source, prop, i, len;

      for (i = 1, len = arguments.length; i < len; i += 1) {
        source = arguments[i];
        for (prop in source) {
          if (hasOwnProp.call(source, prop)) {
            target[prop] = source[prop];
          }
        }
      }

      return target;
    }

    var extend_1 = extend;

    /**
     * @fileoverview Check whether the given variable is a string or not.
     * @author NHN FE Development Lab <dl_javascript@nhn.com>
     */

    /**
     * Check whether the given variable is a string or not.
     * If the given variable is a string, return true.
     * @param {*} obj - Target for checking
     * @returns {boolean} Is string?
     * @memberof module:type
     */
    function isString$3(obj) {
      return typeof obj === 'string' || obj instanceof String;
    }

    var isString_1 = isString$3;

    /**
     * @fileoverview Check whether the given variable is an instance of Array or not.
     * @author NHN FE Development Lab <dl_javascript@nhn.com>
     */

    /**
     * Check whether the given variable is an instance of Array or not.
     * If the given variable is an instance of Array, return true.
     * @param {*} obj - Target for checking
     * @returns {boolean} Is array instance?
     * @memberof module:type
     */
    function isArray$3(obj) {
      return obj instanceof Array;
    }

    var isArray_1 = isArray$3;

    /**
     * @fileoverview Execute the provided callback once for each element present in the array(or Array-like object) in ascending order.
     * @author NHN FE Development Lab <dl_javascript@nhn.com>
     */

    /**
     * Execute the provided callback once for each element present
     * in the array(or Array-like object) in ascending order.
     * If the callback function returns false, the loop will be stopped.
     * Callback function(iteratee) is invoked with three arguments:
     *  1) The value of the element
     *  2) The index of the element
     *  3) The array(or Array-like object) being traversed
     * @param {Array|Arguments|NodeList} arr The array(or Array-like object) that will be traversed
     * @param {function} iteratee Callback function
     * @param {Object} [context] Context(this) of callback function
     * @memberof module:collection
     * @example
     * var forEachArray = require('tui-code-snippet/collection/forEachArray'); // node, commonjs
     *
     * var sum = 0;
     *
     * forEachArray([1,2,3], function(value){
     *     sum += value;
     * });
     * alert(sum); // 6
     */
    function forEachArray$3(arr, iteratee, context) {
      var index = 0;
      var len = arr.length;

      context = context || null;

      for (; index < len; index += 1) {
        if (iteratee.call(context, arr[index], index, arr) === false) {
          break;
        }
      }
    }

    var forEachArray_1 = forEachArray$3;

    /**
     * @fileoverview Execute the provided callback once for each property of object(or element of array) which actually exist.
     * @author NHN FE Development Lab <dl_javascript@nhn.com>
     */

    var isArray$2 = isArray_1;
    var forEachArray$2 = forEachArray_1;
    var forEachOwnProperties$1 = forEachOwnProperties_1;

    /**
     * @module collection
     */

    /**
     * Execute the provided callback once for each property of object(or element of array) which actually exist.
     * If the object is Array-like object(ex-arguments object), It needs to transform to Array.(see 'ex2' of example).
     * If the callback function returns false, the loop will be stopped.
     * Callback function(iteratee) is invoked with three arguments:
     *  1) The value of the property(or The value of the element)
     *  2) The name of the property(or The index of the element)
     *  3) The object being traversed
     * @param {Object} obj The object that will be traversed
     * @param {function} iteratee Callback function
     * @param {Object} [context] Context(this) of callback function
     * @memberof module:collection
     * @example
     * var forEach = require('tui-code-snippet/collection/forEach'); // node, commonjs
     *
     * var sum = 0;
     *
     * forEach([1,2,3], function(value){
     *     sum += value;
     * });
     * alert(sum); // 6
     *
     * // In case of Array-like object
     * var array = Array.prototype.slice.call(arrayLike); // change to array
     * forEach(array, function(value){
     *     sum += value;
     * });
     */
    function forEach$4(obj, iteratee, context) {
      if (isArray$2(obj)) {
        forEachArray$2(obj, iteratee, context);
      } else {
        forEachOwnProperties$1(obj, iteratee, context);
      }
    }

    var forEach_1 = forEach$4;

    /**
     * @fileoverview Setting element style
     * @author NHN FE Development Lab <dl_javascript@nhn.com>
     */

    var isString$2 = isString_1;
    var forEach$3 = forEach_1;

    /**
     * Setting element style
     * @param {(HTMLElement|SVGElement)} element - element to setting style
     * @param {(string|object)} key - style prop name or {prop: value} pair object
     * @param {string} [value] - style value
     * @memberof module:domUtil
     */
    function css(element, key, value) {
      var style = element.style;

      if (isString$2(key)) {
        style[key] = value;

        return;
      }

      forEach$3(key, function(v, k) {
        style[k] = v;
      });
    }

    var css_1 = css;

    /* eslint-disable complexity */

    var isArray$1 = isArray_1;

    /**
     * @module array
     */

    /**
     * Returns the first index at which a given element can be found in the array
     * from start index(default 0), or -1 if it is not present.
     * It compares searchElement to elements of the Array using strict equality
     * (the same method used by the ===, or triple-equals, operator).
     * @param {*} searchElement Element to locate in the array
     * @param {Array} array Array that will be traversed.
     * @param {number} startIndex Start index in array for searching (default 0)
     * @returns {number} the First index at which a given element, or -1 if it is not present
     * @memberof module:array
     * @example
     * var inArray = require('tui-code-snippet/array/inArray'); // node, commonjs
     *
     * var arr = ['one', 'two', 'three', 'four'];
     * var idx1 = inArray('one', arr, 3); // -1
     * var idx2 = inArray('one', arr); // 0
     */
    function inArray$4(searchElement, array, startIndex) {
      var i;
      var length;
      startIndex = startIndex || 0;

      if (!isArray$1(array)) {
        return -1;
      }

      if (Array.prototype.indexOf) {
        return Array.prototype.indexOf.call(array, searchElement, startIndex);
      }

      length = array.length;
      for (i = startIndex; startIndex >= 0 && i < length; i += 1) {
        if (array[i] === searchElement) {
          return i;
        }
      }

      return -1;
    }

    var inArray_1 = inArray$4;

    /**
     * @fileoverview Check whether the given variable is undefined or not.
     * @author NHN FE Development Lab <dl_javascript@nhn.com>
     */

    /**
     * Check whether the given variable is undefined or not.
     * If the given variable is undefined, returns true.
     * @param {*} obj - Target for checking
     * @returns {boolean} Is undefined?
     * @memberof module:type
     */
    function isUndefined$4(obj) {
      return obj === undefined; // eslint-disable-line no-undefined
    }

    var isUndefined_1 = isUndefined$4;

    /**
     * @fileoverview Get HTML element's design classes.
     * @author NHN FE Development Lab <dl_javascript@nhn.com>
     */

    var isUndefined$3 = isUndefined_1;

    /**
     * Get HTML element's design classes.
     * @param {(HTMLElement|SVGElement)} element target element
     * @returns {string} element css class name
     * @memberof module:domUtil
     */
    function getClass$3(element) {
      if (!element || !element.className) {
        return '';
      }

      if (isUndefined$3(element.className.baseVal)) {
        return element.className;
      }

      return element.className.baseVal;
    }

    var getClass_1 = getClass$3;

    /**
     * @fileoverview Set className value
     * @author NHN FE Development Lab <dl_javascript@nhn.com>
     */

    var isArray = isArray_1;
    var isUndefined$2 = isUndefined_1;

    /**
     * Set className value
     * @param {(HTMLElement|SVGElement)} element - target element
     * @param {(string|string[])} cssClass - class names
     * @private
     */
    function setClassName$2(element, cssClass) {
      cssClass = isArray(cssClass) ? cssClass.join(' ') : cssClass;

      cssClass = cssClass.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');

      if (isUndefined$2(element.className.baseVal)) {
        element.className = cssClass;

        return;
      }

      element.className.baseVal = cssClass;
    }

    var _setClassName = setClassName$2;

    /**
     * @fileoverview Add css class to element
     * @author NHN FE Development Lab <dl_javascript@nhn.com>
     */

    var forEach$2 = forEach_1;
    var inArray$3 = inArray_1;
    var getClass$2 = getClass_1;
    var setClassName$1 = _setClassName;

    /**
     * domUtil module
     * @module domUtil
     */

    /**
     * Add css class to element
     * @param {(HTMLElement|SVGElement)} element - target element
     * @param {...string} cssClass - css classes to add
     * @memberof module:domUtil
     */
    function addClass(element) {
      var cssClass = Array.prototype.slice.call(arguments, 1);
      var classList = element.classList;
      var newClass = [];
      var origin;

      if (classList) {
        forEach$2(cssClass, function(name) {
          element.classList.add(name);
        });

        return;
      }

      origin = getClass$2(element);

      if (origin) {
        cssClass = [].concat(origin.split(/\s+/), cssClass);
      }

      forEach$2(cssClass, function(cls) {
        if (inArray$3(cls, newClass) < 0) {
          newClass.push(cls);
        }
      });

      setClassName$1(element, newClass);
    }

    var addClass_1 = addClass;

    /**
     * @fileoverview Remove css class from element
     * @author NHN FE Development Lab <dl_javascript@nhn.com>
     */

    var forEachArray$1 = forEachArray_1;
    var inArray$2 = inArray_1;
    var getClass$1 = getClass_1;
    var setClassName = _setClassName;

    /**
     * Remove css class from element
     * @param {(HTMLElement|SVGElement)} element - target element
     * @param {...string} cssClass - css classes to remove
     * @memberof module:domUtil
     */
    function removeClass(element) {
      var cssClass = Array.prototype.slice.call(arguments, 1);
      var classList = element.classList;
      var origin, newClass;

      if (classList) {
        forEachArray$1(cssClass, function(name) {
          classList.remove(name);
        });

        return;
      }

      origin = getClass$1(element).split(/\s+/);
      newClass = [];
      forEachArray$1(origin, function(name) {
        if (inArray$2(name, cssClass) < 0) {
          newClass.push(name);
        }
      });

      setClassName(element, newClass);
    }

    var removeClass_1 = removeClass;

    /**
     * @fileoverview Check whether the given variable is a number or not.
     * @author NHN FE Development Lab <dl_javascript@nhn.com>
     */

    /**
     * Check whether the given variable is a number or not.
     * If the given variable is a number, return true.
     * @param {*} obj - Target for checking
     * @returns {boolean} Is number?
     * @memberof module:type
     */
    function isNumber(obj) {
      return typeof obj === 'number' || obj instanceof Number;
    }

    var isNumber_1 = isNumber;

    /**
     * @fileoverview Check whether the given variable is null or not.
     * @author NHN FE Development Lab <dl_javascript@nhn.com>
     */

    /**
     * Check whether the given variable is null or not.
     * If the given variable(arguments[0]) is null, returns true.
     * @param {*} obj - Target for checking
     * @returns {boolean} Is null?
     * @memberof module:type
     */
    function isNull$1(obj) {
      return obj === null;
    }

    var isNull_1 = isNull$1;

    /**
     * @fileoverview Request image ping.
     * @author NHN FE Development Lab <dl_javascript@nhn.com>
     */

    var forEachOwnProperties = forEachOwnProperties_1;

    /**
     * @module request
     */

    /**
     * Request image ping.
     * @param {String} url url for ping request
     * @param {Object} trackingInfo infos for make query string
     * @returns {HTMLElement}
     * @memberof module:request
     * @example
     * var imagePing = require('tui-code-snippet/request/imagePing'); // node, commonjs
     *
     * imagePing('https://www.google-analytics.com/collect', {
     *     v: 1,
     *     t: 'event',
     *     tid: 'trackingid',
     *     cid: 'cid',
     *     dp: 'dp',
     *     dh: 'dh'
     * });
     */
    function imagePing$1(url, trackingInfo) {
      var trackingElement = document.createElement('img');
      var queryString = '';
      forEachOwnProperties(trackingInfo, function(value, key) {
        queryString += '&' + key + '=' + value;
      });
      queryString = queryString.substring(1);

      trackingElement.src = url + '?' + queryString;

      trackingElement.style.display = 'none';
      document.body.appendChild(trackingElement);
      document.body.removeChild(trackingElement);

      return trackingElement;
    }

    var imagePing_1 = imagePing$1;

    /**
     * @fileoverview Send hostname on DOMContentLoaded.
     * @author NHN FE Development Lab <dl_javascript@nhn.com>
     */

    var isUndefined$1 = isUndefined_1;
    var imagePing = imagePing_1;

    var ms7days = 7 * 24 * 60 * 60 * 1000;

    /**
     * Check if the date has passed 7 days
     * @param {number} date - milliseconds
     * @returns {boolean}
     * @private
     */
    function isExpired(date) {
      var now = new Date().getTime();

      return now - date > ms7days;
    }

    /**
     * Send hostname on DOMContentLoaded.
     * To prevent hostname set tui.usageStatistics to false.
     * @param {string} appName - application name
     * @param {string} trackingId - GA tracking ID
     * @ignore
     */
    function sendHostname(appName, trackingId) {
      var url = 'https://www.google-analytics.com/collect';
      var hostname = location.hostname;
      var hitType = 'event';
      var eventCategory = 'use';
      var applicationKeyForStorage = 'TOAST UI ' + appName + ' for ' + hostname + ': Statistics';
      var date = window.localStorage.getItem(applicationKeyForStorage);

      // skip if the flag is defined and is set to false explicitly
      if (!isUndefined$1(window.tui) && window.tui.usageStatistics === false) {
        return;
      }

      // skip if not pass seven days old
      if (date && !isExpired(date)) {
        return;
      }

      window.localStorage.setItem(applicationKeyForStorage, new Date().getTime());

      setTimeout(function() {
        if (document.readyState === 'interactive' || document.readyState === 'complete') {
          imagePing(url, {
            v: 1,
            t: hitType,
            tid: trackingId,
            cid: hostname,
            dp: hostname,
            dh: appName,
            el: appName,
            ec: eventCategory
          });
        }
      }, 1000);
    }

    var sendHostname_1 = sendHostname;

    /Mac/.test(navigator.platform);
    function sendHostName() {
        sendHostname_1('editor', 'UA-129966929-1');
    }
    function includes(arr, targetItem) {
        return arr.indexOf(targetItem) !== -1;
    }
    var availableLinkAttributes = ['rel', 'target', 'hreflang', 'type'];
    function sanitizeLinkAttribute(attribute) {
        if (!attribute) {
            return null;
        }
        var linkAttributes = {};
        availableLinkAttributes.forEach(function (key) {
            if (!isUndefined_1(attribute[key])) {
                linkAttributes[key] = attribute[key];
            }
        });
        return linkAttributes;
    }
    function repeat$1(text, count) {
        var result = '';
        for (var i = 0; i < count; i += 1) {
            result += text;
        }
        return result;
    }
    function escape$1(text, startOfLine) {
        var result = text.replace(/[`*\\~[\]]/g, '\\$&');
        if (startOfLine) {
            return result.replace(/^[:#\-*+]/, '\\$&').replace(/^(\d+)\./, '$1\\.');
        }
        return result;
    }
    function quote(text) {
        var result;
        if (text.indexOf('"') === -1) {
            result = '""';
        }
        else {
            result = text.indexOf("'") === -1 ? "''" : '()';
        }
        return result[0] + text + result[1];
    }
    function isNil(value) {
        return isNull_1(value) || isUndefined_1(value);
    }
    function shallowEqual(o1, o2) {
        if (o1 === null && o1 === o2) {
            return true;
        }
        if (typeof o1 !== 'object' || typeof o2 !== 'object' || isNil(o1) || isNil(o2)) {
            return o1 === o2;
        }
        for (var key in o1) {
            if (o1[key] !== o2[key]) {
                return false;
            }
        }
        for (var key in o2) {
            if (!(key in o1)) {
                return false;
            }
        }
        return true;
    }
    function last$1(arr) {
        return arr[arr.length - 1];
    }
    function between$1(value, min, max) {
        return value >= min && value <= max;
    }
    function isObject$1(obj) {
        return typeof obj === 'object' && obj !== null;
    }
    function deepMergedCopy(targetObj, obj) {
        var resultObj = __assign$1({}, targetObj);
        if (targetObj && obj) {
            Object.keys(obj).forEach(function (prop) {
                if (isObject$1(resultObj[prop])) {
                    if (Array.isArray(obj[prop])) {
                        resultObj[prop] = deepCopyArray(obj[prop]);
                    }
                    else if (resultObj.hasOwnProperty(prop)) {
                        resultObj[prop] = deepMergedCopy(resultObj[prop], obj[prop]);
                    }
                    else {
                        resultObj[prop] = deepCopy(obj[prop]);
                    }
                }
                else {
                    resultObj[prop] = obj[prop];
                }
            });
        }
        return resultObj;
    }
    function deepCopyArray(items) {
        return items.map(function (item) {
            if (isObject$1(item)) {
                return Array.isArray(item) ? deepCopyArray(item) : deepCopy(item);
            }
            return item;
        });
    }
    function deepCopy(obj) {
        var keys = Object.keys(obj);
        if (!keys.length) {
            return obj;
        }
        return keys.reduce(function (acc, prop) {
            if (isObject$1(obj[prop])) {
                acc[prop] = Array.isArray(obj[prop]) ? deepCopyArray(obj[prop]) : deepCopy(obj[prop]);
            }
            else {
                acc[prop] = obj[prop];
            }
            return acc;
        }, {});
    }
    function assign(targetObj, obj) {
        if (obj === void 0) { obj = {}; }
        Object.keys(obj).forEach(function (prop) {
            if (targetObj.hasOwnProperty(prop) && typeof targetObj[prop] === 'object') {
                if (Array.isArray(obj[prop])) {
                    targetObj[prop] = obj[prop];
                }
                else {
                    assign(targetObj[prop], obj[prop]);
                }
            }
            else {
                targetObj[prop] = obj[prop];
            }
        });
        return targetObj;
    }
    function getSortedNumPair(valueA, valueB) {
        return valueA > valueB ? [valueB, valueA] : [valueA, valueB];
    }

    function createParagraph(schema, content) {
        var paragraph = schema.nodes.paragraph;
        if (!content) {
            return paragraph.createAndFill();
        }
        return paragraph.create(null, isString_1(content) ? schema.text(content) : content);
    }
    function createTextNode$1(schema, text, marks) {
        return schema.text(text, marks);
    }
    function createTextSelection(tr, from, to) {
        if (to === void 0) { to = from; }
        var contentSize = tr.doc.content.size;
        var size = contentSize > 0 ? contentSize - 1 : 1;
        return TextSelection.create(tr.doc, Math.min(from, size), Math.min(to, size));
    }
    function addParagraph(tr, _a, schema) {
        var pos = _a.pos;
        tr.replaceWith(pos, pos, createParagraph(schema));
        return tr.setSelection(createTextSelection(tr, pos + 1));
    }
    function replaceTextNode(_a) {
        var state = _a.state, from = _a.from, startIndex = _a.startIndex, endIndex = _a.endIndex, createText = _a.createText;
        var tr = state.tr, doc = state.doc, schema = state.schema;
        for (var i = startIndex; i <= endIndex; i += 1) {
            var _b = doc.child(i), nodeSize = _b.nodeSize, textContent = _b.textContent, content = _b.content;
            var text = createText(textContent);
            var node = text ? createTextNode$1(schema, text) : Fragment.empty;
            var mappedFrom = tr.mapping.map(from);
            var mappedTo = mappedFrom + content.size;
            tr.replaceWith(mappedFrom, mappedTo, node);
            from += nodeSize;
        }
        return tr;
    }
    function splitAndExtendBlock(tr, pos, text, node) {
        var textLen = text.length;
        tr.split(pos)
            .delete(pos - textLen, pos)
            .insert(tr.mapping.map(pos), node)
            .setSelection(createTextSelection(tr, tr.mapping.map(pos) - textLen));
    }

    function getMdStartLine(mdNode) {
        return mdNode.sourcepos[0][0];
    }
    function getMdEndLine(mdNode) {
        return mdNode.sourcepos[1][0];
    }
    function getMdStartCh(mdNode) {
        return mdNode.sourcepos[0][1];
    }
    function getMdEndCh(mdNode) {
        return mdNode.sourcepos[1][1];
    }
    function isHTMLNode(mdNode) {
        var type = mdNode.type;
        return type === 'htmlBlock' || type === 'htmlInline';
    }
    function isStyledInlineNode(mdNode) {
        var type = mdNode.type;
        return (type === 'strike' ||
            type === 'strong' ||
            type === 'emph' ||
            type === 'code' ||
            type === 'link' ||
            type === 'image');
    }
    function isCodeBlockNode(mdNode) {
        return mdNode && mdNode.type === 'codeBlock';
    }
    function isListNode$1(mdNode) {
        return mdNode && (mdNode.type === 'item' || mdNode.type === 'list');
    }
    function isOrderedListNode(mdNode) {
        return isListNode$1(mdNode) && mdNode.listData.type === 'ordered';
    }
    function isBulletListNode(mdNode) {
        return isListNode$1(mdNode) && mdNode.listData.type !== 'ordered';
    }
    function isTableCellNode(mdNode) {
        return mdNode && (mdNode.type === 'tableCell' || mdNode.type === 'tableDelimCell');
    }
    function isInlineNode$1(mdNode) {
        switch (mdNode.type) {
            case 'code':
            case 'text':
            case 'emph':
            case 'strong':
            case 'strike':
            case 'link':
            case 'image':
            case 'htmlInline':
            case 'linebreak':
            case 'softbreak':
            case 'customInline':
                return true;
            default:
                return false;
        }
    }
    function findClosestNode(mdNode, condition, includeSelf) {
        if (includeSelf === void 0) { includeSelf = true; }
        mdNode = includeSelf ? mdNode : mdNode.parent;
        while (mdNode && mdNode.type !== 'document') {
            if (condition(mdNode)) {
                return mdNode;
            }
            mdNode = mdNode.parent;
        }
        return null;
    }
    function traverseParentNodes(mdNode, iteratee, includeSelf) {
        if (includeSelf === void 0) { includeSelf = true; }
        mdNode = includeSelf ? mdNode : mdNode.parent;
        while (mdNode && mdNode.type !== 'document') {
            iteratee(mdNode);
            mdNode = mdNode.parent;
        }
    }
    function addOffsetPos(originPos, offset) {
        return [originPos[0], originPos[1] + offset];
    }
    function setOffsetPos(originPos, newOffset) {
        return [originPos[0], newOffset];
    }
    function getInlineMarkdownText(mdNode) {
        var text = mdNode.firstChild.literal;
        switch (mdNode.type) {
            case 'emph':
                return "*" + text + "*";
            case 'strong':
                return "**" + text + "**";
            case 'strike':
                return "~~" + text + "~~";
            case 'code':
                return "`" + text + "`";
            case 'link':
            case 'image':
                /* eslint-disable no-case-declarations */
                var _a = mdNode, destination = _a.destination, title = _a.title;
                var delim = mdNode.type === 'link' ? '' : '!';
                return delim + "[" + text + "](" + destination + (title ? " \"" + title + "\"" : '') + ")";
            default:
                return null;
        }
    }
    function isContainer$2(node) {
        switch (node.type) {
            case 'document':
            case 'blockQuote':
            case 'list':
            case 'item':
            case 'paragraph':
            case 'heading':
            case 'emph':
            case 'strong':
            case 'strike':
            case 'link':
            case 'image':
            case 'table':
            case 'tableHead':
            case 'tableBody':
            case 'tableRow':
            case 'tableCell':
            case 'tableDelimRow':
            case 'customInline':
                return true;
            default:
                return false;
        }
    }
    function getChildrenText$1(node) {
        var buffer = [];
        var walker = node.walker();
        var event = null;
        while ((event = walker.next())) {
            var childNode = event.node;
            if (childNode.type === 'text') {
                buffer.push(childNode.literal);
            }
        }
        return buffer.join('');
    }

    var widgetRules = [];
    var widgetRuleMap = {};
    var reWidgetPrefix = /\$\$widget\d+\s/;
    function unwrapWidgetSyntax(text) {
        var index = text.search(reWidgetPrefix);
        if (index !== -1) {
            var rest = text.substring(index);
            var replaced = rest.replace(reWidgetPrefix, '').replace('$$', '');
            text = text.substring(0, index);
            text += unwrapWidgetSyntax(replaced);
        }
        return text;
    }
    function createWidgetContent(info, text) {
        return "$$" + info + " " + text + "$$";
    }
    function widgetToDOM(info, text) {
        var _a = widgetRuleMap[info], rule = _a.rule, toDOM = _a.toDOM;
        text = unwrapWidgetSyntax(text).match(rule)[0];
        return toDOM(text);
    }
    function getWidgetRules() {
        return widgetRules;
    }
    function setWidgetRules(rules) {
        widgetRules = rules;
        widgetRules.forEach(function (rule, index) {
            widgetRuleMap["widget" + index] = rule;
        });
    }
    function mergeNodes(nodes, text, schema, ruleIndex) {
        return nodes.concat(createNodesWithWidget(text, schema, ruleIndex));
    }
    /**
     * create nodes with plain text and replace text matched to the widget rules with the widget node
     * For example, in case the text and widget rules as below
     *
     * text: $test plain text #test
     * widget rules: [{ rule: /$.+/ }, { rule: /#.+/ }]
     *
     * The creating node process is recursive and is as follows.
     *
     * in first widget rule(/$.+/)
     *  $test -> widget node
     *  plain text -> match with next widget rule
     *  #test -> match with next widget rule
     *
     * in second widget rule(/#.+/)
     *  plain text -> text node(no rule for matching)
     *  #test -> widget node
     */
    function createNodesWithWidget(text, schema, ruleIndex) {
        if (ruleIndex === void 0) { ruleIndex = 0; }
        var nodes = [];
        var rule = (widgetRules[ruleIndex] || {}).rule;
        var nextRuleIndex = ruleIndex + 1;
        text = unwrapWidgetSyntax(text);
        if (rule && rule.test(text)) {
            var index = void 0;
            while ((index = text.search(rule)) !== -1) {
                var prev = text.substring(0, index);
                // get widget node on first splitted text using next widget rule
                if (prev) {
                    nodes = mergeNodes(nodes, prev, schema, nextRuleIndex);
                }
                // build widget node using current widget rule
                text = text.substring(index);
                var literal = text.match(rule)[0];
                var info = "widget" + ruleIndex;
                nodes.push(schema.nodes.widget.create({ info: info }, schema.text(createWidgetContent(info, literal))));
                text = text.substring(literal.length);
            }
            // get widget node on last splitted text using next widget rule
            if (text) {
                nodes = mergeNodes(nodes, text, schema, nextRuleIndex);
            }
        }
        else if (text) {
            nodes =
                ruleIndex < widgetRules.length - 1
                    ? mergeNodes(nodes, text, schema, nextRuleIndex)
                    : [schema.text(text)];
        }
        return nodes;
    }
    function getWidgetContent(widgetNode) {
        var event;
        var text = '';
        var walker = widgetNode.walker();
        while ((event = walker.next())) {
            var node = event.node, entering = event.entering;
            if (entering) {
                if (node !== widgetNode && node.type !== 'text') {
                    text += getInlineMarkdownText(node);
                    // skip the children
                    walker.resumeAt(widgetNode, false);
                    walker.next();
                }
                else if (node.type === 'text') {
                    text += node.literal;
                }
            }
        }
        return text;
    }

    function getDefaultCommands() {
        return {
            deleteSelection: function () { return deleteSelection; },
            selectAll: function () { return selectAll; },
            undo: function () { return undo; },
            redo: function () { return redo; },
        };
    }

    function placeholder(options) {
        return new Plugin({
            props: {
                decorations: function (state) {
                    var doc = state.doc;
                    if (options.text &&
                        doc.childCount === 1 &&
                        doc.firstChild.isTextblock &&
                        doc.firstChild.content.size === 0) {
                        var placeHolder = document.createElement('span');
                        addClass_1(placeHolder, 'placeholder');
                        if (options.className) {
                            addClass_1(placeHolder, options.className);
                        }
                        placeHolder.textContent = options.text;
                        return DecorationSet.create(doc, [Decoration.widget(1, placeHolder)]);
                    }
                    return null;
                },
            },
        });
    }

    var pluginKey$1 = new PluginKey('widget');
    var PopupWidget = /** @class */ (function () {
        function PopupWidget(eventEmitter) {
            var _this = this;
            this.popup = null;
            this.removeWidget = function () {
                if (_this.popup) {
                    document.body.removeChild(_this.popup);
                    _this.popup = null;
                }
            };
            this.eventEmitter = eventEmitter;
            this.eventEmitter.listen('blur', this.removeWidget);
            this.eventEmitter.listen('removePopupWidget', this.removeWidget);
        }
        PopupWidget.prototype.update = function (view) {
            var widget = pluginKey$1.getState(view.state);
            this.removeWidget();
            if (widget) {
                var node = widget.node, style = widget.style;
                var _a = view.coordsAtPos(widget.pos), top_1 = _a.top, left = _a.left, bottom = _a.bottom;
                var height = bottom - top_1;
                css_1(node, { position: 'absolute', left: left + "px", opacity: '0' });
                document.body.appendChild(node);
                css_1(node, {
                    top: (style === 'bottom' ? top_1 + height : top_1 - node.clientHeight - height) + "px",
                    opacity: '1',
                });
                this.popup = node;
                view.focus();
            }
        };
        PopupWidget.prototype.destroy = function () {
            this.eventEmitter.removeEventHandler('blur', this.removeWidget);
        };
        return PopupWidget;
    }());
    function addWidget(eventEmitter) {
        return new Plugin({
            key: pluginKey$1,
            state: {
                init: function () {
                    return null;
                },
                apply: function (tr) {
                    return tr.getMeta('widget');
                },
            },
            view: function () {
                return new PopupWidget(eventEmitter);
            },
        });
    }

    /**
     * @fileoverview Transform the Array-like object to Array.
     * @author NHN FE Development Lab <dl_javascript@nhn.com>
     */

    var forEachArray = forEachArray_1;

    /**
     * Transform the Array-like object to Array.
     * In low IE (below 8), Array.prototype.slice.call is not perfect. So, try-catch statement is used.
     * @param {*} arrayLike Array-like object
     * @returns {Array} Array
     * @memberof module:collection
     * @example
     * var toArray = require('tui-code-snippet/collection/toArray'); // node, commonjs
     *
     * var arrayLike = {
     *     0: 'one',
     *     1: 'two',
     *     2: 'three',
     *     3: 'four',
     *     length: 4
     * };
     * var result = toArray(arrayLike);
     *
     * alert(result instanceof Array); // true
     * alert(result); // one,two,three,four
     */
    function toArray$1(arrayLike) {
      var arr;
      try {
        arr = Array.prototype.slice.call(arrayLike);
      } catch (e) {
        arr = [];
        forEachArray(arrayLike, function(value) {
          arr.push(value);
        });
      }

      return arr;
    }

    var toArray_1 = toArray$1;

    function addDefaultImageBlobHook(eventEmitter) {
        eventEmitter.listen('addImageBlobHook', function (blob, callback) {
            var reader = new FileReader();
            reader.onload = function (_a) {
                var target = _a.target;
                return callback(target.result);
            };
            reader.readAsDataURL(blob);
        });
    }
    function emitImageBlobHook(eventEmitter, blob, type) {
        var hook = function (imageUrl, altText) {
            eventEmitter.emit('command', 'addImage', {
                imageUrl: imageUrl,
                altText: altText || blob.name || 'image',
            });
        };
        eventEmitter.emit('addImageBlobHook', blob, hook, type);
    }
    function pasteImageOnly(items) {
        var images = toArray_1(items).filter(function (_a) {
            var type = _a.type;
            return type.indexOf('image') !== -1;
        });
        if (images.length === 1) {
            var item = images[0];
            if (item) {
                return item.getAsFile();
            }
        }
        return null;
    }

    function dropImage(_a) {
        var eventEmitter = _a.eventEmitter;
        return new Plugin({
            props: {
                handleDOMEvents: {
                    drop: function (_, ev) {
                        var _a;
                        var items = (_a = ev.dataTransfer) === null || _a === void 0 ? void 0 : _a.files;
                        if (items) {
                            forEachArray_1(items, function (item) {
                                if (item.type.indexOf('image') !== -1) {
                                    ev.preventDefault();
                                    ev.stopPropagation();
                                    emitImageBlobHook(eventEmitter, item, ev.type);
                                    return false;
                                }
                                return true;
                            });
                        }
                        return true;
                    },
                },
            },
        });
    }

    var Node$2 = /** @class */ (function () {
        function Node() {
        }
        Object.defineProperty(Node.prototype, "type", {
            get: function () {
                return 'node';
            },
            enumerable: false,
            configurable: true
        });
        Node.prototype.setContext = function (context) {
            this.context = context;
        };
        return Node;
    }());

    function widgetNodeView(pmNode) {
        var dom = document.createElement('span');
        var node = widgetToDOM(pmNode.attrs.info, pmNode.textContent);
        dom.className = 'tui-widget';
        dom.appendChild(node);
        return { dom: dom };
    }
    function isWidgetNode(pmNode) {
        return pmNode.type.name === 'widget';
    }
    var Widget = /** @class */ (function (_super) {
        __extends$1(Widget, _super);
        function Widget() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Widget.prototype, "name", {
            get: function () {
                return 'widget';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Widget.prototype, "schema", {
            get: function () {
                return {
                    attrs: {
                        info: { default: null },
                    },
                    group: 'inline',
                    inline: true,
                    content: 'text*',
                    selectable: false,
                    atom: true,
                    toDOM: function () {
                        return ['span', { class: 'tui-widget' }, 0];
                    },
                    parseDOM: [
                        {
                            tag: 'span.tui-widget',
                            getAttrs: function (dom) {
                                var text = dom.textContent;
                                var _a = text.match(/\$\$(widget\d+)/), info = _a[1];
                                return { info: info };
                            },
                        },
                    ],
                };
            },
            enumerable: false,
            configurable: true
        });
        return Widget;
    }(Node$2));

    var EditorBase = /** @class */ (function () {
        function EditorBase(eventEmitter) {
            this.el = document.createElement('div');
            this.el.className = 'toastui-editor';
            this.eventEmitter = eventEmitter;
            this.placeholder = { text: '' };
        }
        EditorBase.prototype.createState = function () {
            return EditorState.create({
                schema: this.schema,
                plugins: this.createPlugins(),
            });
        };
        EditorBase.prototype.initEvent = function () {
            var _a = this, eventEmitter = _a.eventEmitter, view = _a.view, editorType = _a.editorType;
            view.dom.addEventListener('focus', function () { return eventEmitter.emit('focus', editorType); });
            view.dom.addEventListener('blur', function () { return eventEmitter.emit('blur', editorType); });
        };
        EditorBase.prototype.emitChangeEvent = function (tr) {
            this.eventEmitter.emit('caretChange', this.editorType);
            if (tr.docChanged) {
                this.eventEmitter.emit('change', this.editorType);
            }
        };
        Object.defineProperty(EditorBase.prototype, "defaultPlugins", {
            get: function () {
                var _a = getDefaultCommands(), undo = _a.undo, redo = _a.redo;
                var rules = this.createInputRules();
                var plugins = __spreadArray$1(__spreadArray$1([], this.keymaps), [
                    keymap(__assign$1({ 'Mod-z': undo(), 'Shift-Mod-z': redo() }, baseKeymap)),
                    history$1(),
                    placeholder(this.placeholder),
                    addWidget(this.eventEmitter),
                    dropImage(this.context),
                ]);
                return rules ? plugins.concat(rules) : plugins;
            },
            enumerable: false,
            configurable: true
        });
        EditorBase.prototype.createInputRules = function () {
            var widgetRules = getWidgetRules();
            var rules = widgetRules.map(function (_a) {
                var rule = _a.rule;
                return new InputRule(rule, function (state, match, start, end) {
                    var schema = state.schema, tr = state.tr, doc = state.doc;
                    var allMatched = match.input.match(new RegExp(rule, 'g'));
                    var pos = doc.resolve(start);
                    var parent = pos.parent;
                    var count = 0;
                    if (isWidgetNode(parent)) {
                        parent = pos.node(pos.depth - 1);
                    }
                    parent.forEach(function (child) { return isWidgetNode(child) && (count += 1); });
                    // replace the content only if the count of matched rules in whole text is greater than current widget node count
                    if (allMatched.length > count) {
                        var content = last$1(allMatched);
                        var nodes = createNodesWithWidget(content, schema);
                        // adjust start position based on widget content
                        return tr.replaceWith(end - content.length + 1, end, nodes);
                    }
                    return null;
                });
            });
            return rules.length ? inputRules({ rules: rules }) : null;
        };
        EditorBase.prototype.createSchema = function () {
            return new Schema({
                nodes: this.specs.nodes,
                marks: this.specs.marks,
            });
        };
        EditorBase.prototype.createKeymaps = function (useCommandShortcut) {
            return useCommandShortcut ? this.specs.keymaps() : [];
        };
        EditorBase.prototype.createCommands = function () {
            return this.specs.commands(this.view);
        };
        EditorBase.prototype.createPluginProps = function () {
            var _this = this;
            return this.extraPlugins.map(function (plugin) { return plugin(_this.eventEmitter); });
        };
        EditorBase.prototype.focus = function () {
            var _this = this;
            // prevent the error for IE11
            setTimeout(function () {
                _this.view.focus();
                _this.view.dispatch(_this.view.state.tr.scrollIntoView());
            });
        };
        EditorBase.prototype.blur = function () {
            this.view.dom.blur();
        };
        EditorBase.prototype.destroy = function () {
            var _this = this;
            this.view.destroy();
            Object.keys(this).forEach(function (prop) {
                delete _this[prop];
            });
        };
        EditorBase.prototype.moveCursorToStart = function () {
            var tr = this.view.state.tr;
            this.view.dispatch(tr.setSelection(createTextSelection(tr, 1)).scrollIntoView());
            this.focus();
        };
        EditorBase.prototype.moveCursorToEnd = function () {
            var tr = this.view.state.tr;
            this.view.dispatch(tr.setSelection(createTextSelection(tr, tr.doc.content.size - 1)).scrollIntoView());
            this.focus();
        };
        EditorBase.prototype.setScrollTop = function (top) {
            this.view.dom.scrollTop = top;
        };
        EditorBase.prototype.getScrollTop = function () {
            return this.view.dom.scrollTop;
        };
        EditorBase.prototype.setPlaceholder = function (text) {
            this.placeholder.text = text;
            this.view.dispatch(this.view.state.tr.scrollIntoView());
        };
        EditorBase.prototype.setHeight = function (height) {
            css_1(this.el, { height: height + "px" });
        };
        EditorBase.prototype.setMinHeight = function (minHeight) {
            css_1(this.el, { minHeight: minHeight + "px" });
        };
        EditorBase.prototype.getElement = function () {
            return this.el;
        };
        return EditorBase;
    }());

    /**
     * @fileoverview Check whether the given variable is a function or not.
     * @author NHN FE Development Lab <dl_javascript@nhn.com>
     */

    /**
     * Check whether the given variable is a function or not.
     * If the given variable is a function, return true.
     * @param {*} obj - Target for checking
     * @returns {boolean} Is function?
     * @memberof module:type
     */
    function isFunction(obj) {
      return obj instanceof Function;
    }

    var isFunction_1 = isFunction;

    function execCommand(view, command, payload) {
        view.focus();
        return command(payload)(view.state, view.dispatch, view);
    }
    var SpecManager = /** @class */ (function () {
        function SpecManager(specs) {
            this.specs = specs;
        }
        Object.defineProperty(SpecManager.prototype, "nodes", {
            get: function () {
                return this.specs
                    .filter(function (spec) { return spec.type === 'node'; })
                    .reduce(function (nodes, _a) {
                    var _b;
                    var name = _a.name, schema = _a.schema;
                    return __assign$1(__assign$1({}, nodes), (_b = {}, _b[name] = schema, _b));
                }, {});
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SpecManager.prototype, "marks", {
            get: function () {
                return this.specs
                    .filter(function (spec) { return spec.type === 'mark'; })
                    .reduce(function (marks, _a) {
                    var _b;
                    var name = _a.name, schema = _a.schema;
                    return __assign$1(__assign$1({}, marks), (_b = {}, _b[name] = schema, _b));
                }, {});
            },
            enumerable: false,
            configurable: true
        });
        SpecManager.prototype.commands = function (view, addedCommands) {
            var specCommands = this.specs
                .filter(function (_a) {
                var commands = _a.commands;
                return commands;
            })
                .reduce(function (allCommands, spec) {
                var commands = {};
                var specCommand = spec.commands();
                if (isFunction_1(specCommand)) {
                    commands[spec.name] = function (payload) { return execCommand(view, specCommand, payload); };
                }
                else {
                    Object.keys(specCommand).forEach(function (name) {
                        commands[name] = function (payload) { return execCommand(view, specCommand[name], payload); };
                    });
                }
                return __assign$1(__assign$1({}, allCommands), commands);
            }, {});
            var defaultCommands = getDefaultCommands();
            Object.keys(defaultCommands).forEach(function (name) {
                specCommands[name] = function (payload) { return execCommand(view, defaultCommands[name], payload); };
            });
            if (addedCommands) {
                Object.keys(addedCommands).forEach(function (name) {
                    specCommands[name] = function (payload) { return execCommand(view, addedCommands[name], payload); };
                });
            }
            return specCommands;
        };
        SpecManager.prototype.keymaps = function () {
            var specKeymaps = this.specs.filter(function (spec) { return spec.keymaps; }).map(function (spec) { return spec.keymaps(); });
            return specKeymaps.map(function (keys) { return keymap(keys); });
        };
        SpecManager.prototype.setContext = function (context) {
            this.specs.forEach(function (spec) {
                spec.setContext(context);
            });
        };
        return SpecManager;
    }());

    /**
     * @fileoverview Check element has specific css class
     * @author NHN FE Development Lab <dl_javascript@nhn.com>
     */

    var inArray$1 = inArray_1;
    var getClass = getClass_1;

    /**
     * Check element has specific css class
     * @param {(HTMLElement|SVGElement)} element - target element
     * @param {string} cssClass - css class
     * @returns {boolean}
     * @memberof module:domUtil
     */
    function hasClass(element, cssClass) {
      var origin;

      if (element.classList) {
        return element.classList.contains(cssClass);
      }

      origin = getClass(element).split(/\s+/);

      return inArray$1(cssClass, origin) > -1;
    }

    var hasClass_1 = hasClass;

    /**
     * @fileoverview Check element match selector
     * @author NHN FE Development Lab <dl_javascript@nhn.com>
     */

    var inArray = inArray_1;
    var toArray = toArray_1;

    var elProto = Element.prototype;
    var matchSelector = elProto.matches ||
        elProto.webkitMatchesSelector ||
        elProto.mozMatchesSelector ||
        elProto.msMatchesSelector ||
        function(selector) {
          var doc = this.document || this.ownerDocument;

          return inArray(this, toArray(doc.querySelectorAll(selector))) > -1;
        };

    /**
     * Check element match selector
     * @param {HTMLElement} element - element to check
     * @param {string} selector - selector to check
     * @returns {boolean} is selector matched to element?
     * @memberof module:domUtil
     */
    function matches(element, selector) {
      return matchSelector.call(element, selector);
    }

    var matches_1 = matches;

    var TAG_NAME = '[A-Za-z][A-Za-z0-9-]*';
    var ATTRIBUTE_NAME = '[a-zA-Z_:][a-zA-Z0-9:._-]*';
    var UNQUOTED_VALUE = '[^"\'=<>`\\x00-\\x20]+';
    var SINGLE_QUOTED_VALUE = "'[^']*'";
    var DOUBLE_QUOTED_VALUE = '"[^"]*"';
    var ATTRIBUTE_VALUE = "(?:" + UNQUOTED_VALUE + "|" + SINGLE_QUOTED_VALUE + "|" + DOUBLE_QUOTED_VALUE + ")";
    var ATTRIBUTE_VALUE_SPEC = "" + '(?:\\s*=\\s*' + ATTRIBUTE_VALUE + ")";
    var ATTRIBUTE$1 = "" + '(?:\\s+' + ATTRIBUTE_NAME + ATTRIBUTE_VALUE_SPEC + "?)";
    var OPEN_TAG = "<(" + TAG_NAME + ")(" + ATTRIBUTE$1 + ")*\\s*/?>";
    var CLOSE_TAG = "</(" + TAG_NAME + ")\\s*[>]";
    var HTML_TAG = "(?:" + OPEN_TAG + "|" + CLOSE_TAG + ")";
    var reHTMLTag = new RegExp("^" + HTML_TAG, 'i');

    function isPositionInBox(style, offsetX, offsetY) {
        var left = parseInt(style.left, 10);
        var top = parseInt(style.top, 10);
        var width = parseInt(style.width, 10) + parseInt(style.paddingLeft, 10) + parseInt(style.paddingRight, 10);
        var height = parseInt(style.height, 10) + parseInt(style.paddingTop, 10) + parseInt(style.paddingBottom, 10);
        return offsetX >= left && offsetX <= left + width && offsetY >= top && offsetY <= top + height;
    }
    var CLS_PREFIX = 'toastui-editor-';
    function cls() {
        var names = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            names[_i] = arguments[_i];
        }
        var result = [];
        for (var _a = 0, names_1 = names; _a < names_1.length; _a++) {
            var name_1 = names_1[_a];
            var className = void 0;
            if (Array.isArray(name_1)) {
                className = name_1[0] ? name_1[1] : null;
            }
            else {
                className = name_1;
            }
            if (className) {
                result.push("" + CLS_PREFIX + className);
            }
        }
        return result.join(' ');
    }
    function clsWithMdPrefix() {
        var names = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            names[_i] = arguments[_i];
        }
        return names.map(function (className) { return CLS_PREFIX + "md-" + className; }).join(' ');
    }
    function isTextNode(node) {
        return (node === null || node === void 0 ? void 0 : node.nodeType) === Node.TEXT_NODE;
    }
    function isElemNode(node) {
        return node && node.nodeType === Node.ELEMENT_NODE;
    }
    function findNodes(element, selector) {
        var nodeList = toArray_1(element.querySelectorAll(selector));
        if (nodeList.length) {
            return nodeList;
        }
        return [];
    }
    function appendNodes(node, nodesToAppend) {
        nodesToAppend = isArray_1(nodesToAppend) ? toArray_1(nodesToAppend) : [nodesToAppend];
        nodesToAppend.forEach(function (nodeToAppend) {
            node.appendChild(nodeToAppend);
        });
    }
    function insertBeforeNode(insertedNode, node) {
        if (node.parentNode) {
            node.parentNode.insertBefore(insertedNode, node);
        }
    }
    function removeNode$1(node) {
        if (node.parentNode) {
            node.parentNode.removeChild(node);
        }
    }
    function unwrapNode(node) {
        var result = [];
        while (node.firstChild) {
            result.push(node.firstChild);
            if (node.parentNode) {
                node.parentNode.insertBefore(node.firstChild, node);
            }
        }
        removeNode$1(node);
        return result;
    }
    function toggleClass(element, className, state) {
        if (isUndefined_1(state)) {
            state = !hasClass_1(element, className);
        }
        var toggleFn = state ? addClass_1 : removeClass_1;
        toggleFn(element, className);
    }
    function createElementWith(contents, target) {
        var container = document.createElement('div');
        if (isString_1(contents)) {
            container.innerHTML = contents;
        }
        else {
            container.appendChild(contents);
        }
        var firstChild = container.firstChild;
        if (target) {
            target.appendChild(firstChild);
        }
        return firstChild;
    }
    function getOuterWidth(el) {
        var computed = window.getComputedStyle(el);
        return (['margin-left', 'margin-right'].reduce(function (acc, type) { return acc + parseInt(computed.getPropertyValue(type), 10); }, 0) + el.offsetWidth);
    }
    function closest(node, found) {
        var condition;
        if (isString_1(found)) {
            condition = function (target) { return matches_1(target, found); };
        }
        else {
            condition = function (target) { return target === found; };
        }
        while (node && node !== document) {
            if (isElemNode(node) && condition(node)) {
                return node;
            }
            node = node.parentNode;
        }
        return null;
    }
    function getTotalOffset(el, root) {
        var offsetTop = 0;
        var offsetLeft = 0;
        while (el && el !== root) {
            var top_1 = el.offsetTop, left = el.offsetLeft, offsetParent = el.offsetParent;
            offsetTop += top_1;
            offsetLeft += left;
            if (offsetParent === root.offsetParent) {
                break;
            }
            el = el.offsetParent;
        }
        return { offsetTop: offsetTop, offsetLeft: offsetLeft };
    }
    function finalizeHtml(html, needHtmlText) {
        var result;
        if (needHtmlText) {
            result = html.innerHTML;
        }
        else {
            var frag = document.createDocumentFragment();
            var childNodes = toArray_1(html.childNodes);
            var length_1 = childNodes.length;
            for (var i = 0; i < length_1; i += 1) {
                frag.appendChild(childNodes[i]);
            }
            result = frag;
        }
        return result;
    }
    function setAttributes(attributes, element) {
        Object.keys(attributes).forEach(function (attrName) {
            if (attributes[attrName]) {
                element.setAttribute(attrName, attributes[attrName]);
            }
            else {
                element.removeAttribute(attrName);
            }
        });
    }
    function replaceBRWithEmptyBlock(html) {
        var reBr = /<br\s*\/*>/i;
        var reHTMLTag = new RegExp(HTML_TAG, 'ig');
        var htmlTagMatched = html.match(reHTMLTag);
        htmlTagMatched === null || htmlTagMatched === void 0 ? void 0 : htmlTagMatched.forEach(function (htmlTag, index) {
            if (reBr.test(htmlTag)) {
                var alternativeTag = '';
                if (index) {
                    var prevTag = htmlTagMatched[index - 1];
                    var openTagMatched = prevTag.match(OPEN_TAG);
                    if (openTagMatched) {
                        var tagName = openTagMatched[1];
                        alternativeTag = "</" + tagName + "><" + tagName + ">";
                    }
                }
                html = html.replace(reBr, alternativeTag);
            }
        });
        return html;
    }

    function resolveSelectionPos(selection) {
        var from = selection.from, to = selection.to;
        if (selection instanceof AllSelection) {
            return [from + 1, to - 1];
        }
        return [from, to];
    }
    function getEditorToMdLine(from, to, doc) {
        var fragment = doc.content;
        var childCount = fragment.childCount;
        var startLine = Math.min(fragment.findIndex(from).index + 1, childCount);
        var endLine = from === to ? startLine : Math.min(fragment.findIndex(to).index + 1, childCount);
        return [startLine, endLine];
    }
    function getWidgetNodePos(node, chPos, direction) {
        if (direction === void 0) { direction = 1; }
        var additionalPos = 0;
        node.forEach(function (child, pos) {
            // add or subtract widget node tag
            if (isWidgetNode(child) && pos + 2 < chPos) {
                additionalPos += 2 * direction;
            }
        });
        return additionalPos;
    }
    function getEditorToMdPos(doc, from, to) {
        if (to === void 0) { to = from; }
        var collapsed = from === to;
        var startResolvedPos = doc.resolve(from);
        var lineRange = getEditorToMdLine(from, to, doc);
        var startOffset = startResolvedPos.start(1);
        var endOffset = startOffset;
        if (!collapsed) {
            // prevent the end offset from pointing to the root document position
            var endResolvedPos = doc.resolve(to === doc.content.size ? to - 1 : to);
            endOffset = endResolvedPos.start();
            // To resolve the end offset excluding document tag size
            if (endResolvedPos.pos === doc.content.size) {
                to = doc.content.size - 2;
            }
        }
        var startCh = Math.max(from - startOffset + 1, 1);
        var endCh = Math.max(to - endOffset + 1, 1);
        return [
            [lineRange[0], startCh + getWidgetNodePos(doc.child(lineRange[0] - 1), startCh, -1)],
            [lineRange[1], endCh + getWidgetNodePos(doc.child(lineRange[1] - 1), endCh, -1)],
        ];
    }
    function getStartPosListPerLine(doc, endIndex) {
        var startPosListPerLine = [];
        for (var i = 0, pos = 0; i < endIndex; i += 1) {
            var child = doc.child(i);
            startPosListPerLine[i] = pos;
            pos += child.nodeSize;
        }
        return startPosListPerLine;
    }
    function getMdToEditorPos(doc, startPos, endPos) {
        var startPosListPerLine = getStartPosListPerLine(doc, endPos[0]);
        var startIndex = startPos[0] - 1;
        var endIndex = endPos[0] - 1;
        var startNode = doc.child(startIndex);
        var endNode = doc.child(endIndex);
        // calculate the position corresponding to the line
        var from = startPosListPerLine[startIndex];
        var to = startPosListPerLine[endIndex];
        // calculate the position corresponding to the character offset of the line
        from += startPos[1] + getWidgetNodePos(startNode, startPos[1] - 1);
        to += endPos[1] + getWidgetNodePos(endNode, endPos[1] - 1);
        return [from, Math.min(to, doc.content.size)];
    }
    function getRangeInfo(selection) {
        var $from = selection.$from, $to = selection.$to;
        var from = selection.from, to = selection.to;
        var doc = $from.doc;
        if (selection instanceof AllSelection) {
            $from = doc.resolve(from + 1);
            $to = doc.resolve(to - 1);
        }
        if ($from.depth === 0) {
            $from = doc.resolve(from - 1);
            $to = $from;
        }
        return {
            startFromOffset: $from.start(1),
            endFromOffset: $to.start(1),
            startToOffset: $from.end(1),
            endToOffset: $to.end(1),
            startIndex: $from.index(0),
            endIndex: $to.index(0),
            from: $from.pos,
            to: $to.pos,
        };
    }
    function getNodeContentOffsetRange(doc, targetIndex) {
        var startOffset = 1;
        var endOffset = 1;
        for (var i = 0, offset = 0; i < doc.childCount; i += 1) {
            var nodeSize = doc.child(i).nodeSize;
            // calculate content start, end offset(not node offset)
            startOffset = offset + 1;
            endOffset = offset + nodeSize - 1;
            if (i === targetIndex) {
                break;
            }
            offset += nodeSize;
        }
        return { startOffset: startOffset, endOffset: endOffset };
    }

    var HEADING = 'heading';
    var BLOCK_QUOTE = 'blockQuote';
    var LIST_ITEM = 'listItem';
    var TABLE = 'table';
    var TABLE_CELL = 'tableCell';
    var CODE_BLOCK = 'codeBlock';
    var THEMATIC_BREAK = 'thematicBreak';
    var LINK = 'link';
    var CODE = 'code';
    var META = 'meta';
    var DELIM = 'delimiter';
    var TASK_DELIM = 'taskDelimiter';
    var TEXT = 'markedText';
    var HTML = 'html';
    var CUSTOM_BLOCK = 'customBlock';
    var delimSize = {
        strong: 2,
        emph: 1,
        strike: 2,
    };
    function markInfo(start, end, type, attrs) {
        return { start: start, end: end, spec: { type: type, attrs: attrs } };
    }
    function heading$1(_a, start, end) {
        var level = _a.level, headingType = _a.headingType;
        var marks = [markInfo(start, end, HEADING, { level: level })];
        if (headingType === 'atx') {
            marks.push(markInfo(start, addOffsetPos(start, level), DELIM));
        }
        else {
            marks.push(markInfo(setOffsetPos(end, 0), end, HEADING, { seText: true }));
        }
        return marks;
    }
    function emphasisAndStrikethrough(_a, start, end) {
        var type = _a.type;
        var startDelimPos = addOffsetPos(start, delimSize[type]);
        var endDelimPos = addOffsetPos(end, -delimSize[type]);
        return [
            markInfo(startDelimPos, endDelimPos, type),
            markInfo(start, startDelimPos, DELIM),
            markInfo(endDelimPos, end, DELIM),
        ];
    }
    function markLink(start, end, linkTextStart, lastChildCh) {
        return [
            markInfo(start, end, LINK),
            markInfo(setOffsetPos(start, linkTextStart[1] + 1), setOffsetPos(end, lastChildCh), LINK, {
                desc: true,
            }),
            markInfo(setOffsetPos(end, lastChildCh + 2), addOffsetPos(end, -1), LINK, { url: true }),
        ];
    }
    function image$1(_a, start, end) {
        var lastChild = _a.lastChild;
        var lastChildCh = lastChild ? getMdEndCh(lastChild) + 1 : 3; // 3: length of '![]'
        var linkTextEnd = addOffsetPos(start, 1);
        return __spreadArray$1([markInfo(start, linkTextEnd, META)], markLink(start, end, linkTextEnd, lastChildCh));
    }
    function link(_a, start, end) {
        var lastChild = _a.lastChild, extendedAutolink = _a.extendedAutolink;
        var lastChildCh = lastChild ? getMdEndCh(lastChild) + 1 : 2; // 2: length of '[]'
        return extendedAutolink
            ? [markInfo(start, end, LINK, { desc: true })]
            : markLink(start, end, start, lastChildCh);
    }
    function code(_a, start, end) {
        var tickCount = _a.tickCount;
        var openDelimEnd = addOffsetPos(start, tickCount);
        var closeDelimStart = addOffsetPos(end, -tickCount);
        return [
            markInfo(start, end, CODE),
            markInfo(start, openDelimEnd, CODE, { start: true }),
            markInfo(openDelimEnd, closeDelimStart, CODE, { marked: true }),
            markInfo(closeDelimStart, end, CODE, { end: true }),
        ];
    }
    function lineBackground(parent, start, end, prefix) {
        var defaultBackground = {
            start: start,
            end: end,
            spec: {
                attrs: { className: prefix + "-line-background", codeStart: start[0], codeEnd: end[0] },
            },
            lineBackground: true,
        };
        return parent.type !== 'item' && parent.type !== 'blockQuote'
            ? [
                __assign$1(__assign$1({}, defaultBackground), { end: start, spec: { attrs: { className: prefix + "-line-background start" } } }),
                __assign$1(__assign$1({}, defaultBackground), { start: [Math.min(start[0] + 1, end[0]), start[1]] }),
            ]
            : null;
    }
    function codeBlock$1(node, start, end, endLine) {
        var fenceOffset = node.fenceOffset, fenceLength = node.fenceLength, fenceChar = node.fenceChar, info = node.info, infoPadding = node.infoPadding, parent = node.parent;
        var fenceEnd = fenceOffset + fenceLength;
        var marks = [markInfo(setOffsetPos(start, 1), end, CODE_BLOCK)];
        if (fenceChar) {
            marks.push(markInfo(start, addOffsetPos(start, fenceEnd), DELIM));
        }
        if (info) {
            marks.push(markInfo(addOffsetPos(start, fenceLength), addOffsetPos(start, fenceLength + infoPadding + info.length), META));
        }
        var codeBlockEnd = "^(\\s{0,4})(" + fenceChar + "{" + fenceLength + ",})";
        var reCodeBlockEnd = new RegExp(codeBlockEnd);
        if (reCodeBlockEnd.test(endLine)) {
            marks.push(markInfo(setOffsetPos(end, 1), end, DELIM));
        }
        var lineBackgroundMarkInfo = lineBackground(parent, start, end, 'code-block');
        return lineBackgroundMarkInfo ? marks.concat(lineBackgroundMarkInfo) : marks;
    }
    function customBlock$2(node, start, end) {
        var _a = node, offset = _a.offset, syntaxLength = _a.syntaxLength, info = _a.info, parent = _a.parent;
        var syntaxEnd = offset + syntaxLength;
        var marks = [markInfo(setOffsetPos(start, 1), end, CUSTOM_BLOCK)];
        marks.push(markInfo(start, addOffsetPos(start, syntaxEnd), DELIM));
        if (info) {
            marks.push(markInfo(addOffsetPos(start, 2), addOffsetPos(start, syntaxLength + info.length), META));
        }
        marks.push(markInfo(setOffsetPos(end, 1), end, DELIM));
        var lineBackgroundMarkInfo = lineBackground(parent, start, end, 'custom-block');
        return lineBackgroundMarkInfo ? marks.concat(lineBackgroundMarkInfo) : marks;
    }
    function markListItemChildren(node, markType) {
        var marks = [];
        while (node) {
            var type = node.type;
            if (type === 'paragraph' || type === 'codeBlock') {
                marks.push(markInfo([getMdStartLine(node), getMdStartCh(node) - 1], [getMdEndLine(node), getMdEndCh(node) + 1], markType));
            }
            node = node.next;
        }
        return marks;
    }
    function markParagraphInBlockQuote(node) {
        var marks = [];
        while (node) {
            marks.push(markInfo([getMdStartLine(node), getMdStartCh(node)], [getMdEndLine(node), getMdEndCh(node) + 1], TEXT));
            node = node.next;
        }
        return marks;
    }
    function blockQuote$2(node, start, end) {
        var marks = node.parent && node.parent.type !== 'blockQuote' ? [markInfo(start, end, BLOCK_QUOTE)] : [];
        if (node.firstChild) {
            var childMarks = [];
            if (node.firstChild.type === 'paragraph') {
                childMarks = markParagraphInBlockQuote(node.firstChild.firstChild);
            }
            else if (node.firstChild.type === 'list') {
                childMarks = markListItemChildren(node.firstChild, TEXT);
            }
            marks = __spreadArray$1(__spreadArray$1([], marks), childMarks);
        }
        return marks;
    }
    function getSpecOfListItemStyle(node) {
        var depth = 0;
        while (node.parent.parent && node.parent.parent.type === 'item') {
            node = node.parent.parent;
            depth += 1;
        }
        var attrs = [{ odd: true }, { even: true }][depth % 2];
        return [LIST_ITEM, __assign$1(__assign$1({}, attrs), { listStyle: true })];
    }
    function item$1(node, start) {
        var _a = node.listData, padding = _a.padding, task = _a.task;
        var spec = getSpecOfListItemStyle(node);
        var marks = [markInfo.apply(void 0, __spreadArray$1([start, addOffsetPos(start, padding)], spec))];
        if (task) {
            marks.push(markInfo(addOffsetPos(start, padding), addOffsetPos(start, padding + 3), TASK_DELIM));
            marks.push(markInfo(addOffsetPos(start, padding + 1), addOffsetPos(start, padding + 2), META));
        }
        return marks.concat(markListItemChildren(node.firstChild, TEXT));
    }
    var markNodeFuncMap = {
        heading: heading$1,
        strong: emphasisAndStrikethrough,
        emph: emphasisAndStrikethrough,
        strike: emphasisAndStrikethrough,
        link: link,
        image: image$1,
        code: code,
        codeBlock: codeBlock$1,
        blockQuote: blockQuote$2,
        item: item$1,
        customBlock: customBlock$2,
    };
    var simpleMarkClassNameMap = {
        thematicBreak: THEMATIC_BREAK,
        table: TABLE,
        tableCell: TABLE_CELL,
        htmlInline: HTML,
    };
    function getMarkInfo(node, start, end, endLine) {
        var type = node.type;
        if (isFunction_1(markNodeFuncMap[type])) {
            // @ts-ignore
            return markNodeFuncMap[type](node, start, end, endLine);
        }
        if (simpleMarkClassNameMap[type]) {
            return [markInfo(start, end, simpleMarkClassNameMap[type])];
        }
        return null;
    }

    var removingBackgroundIndexMap = {};
    function syntaxHighlight(_a) {
        var schema = _a.schema, toastMark = _a.toastMark;
        return new Plugin({
            appendTransaction: function (transactions, _, newState) {
                var tr = transactions[0];
                var newTr = newState.tr;
                if (tr.docChanged) {
                    var markInfo_1 = [];
                    var editResult = tr.getMeta('editResult');
                    editResult.forEach(function (result) {
                        var nodes = result.nodes, removedNodeRange = result.removedNodeRange;
                        if (nodes.length) {
                            markInfo_1 = markInfo_1.concat(getMarkForRemoving(newTr, nodes));
                            for (var _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++) {
                                var parent_1 = nodes_1[_i];
                                var walker = parent_1.walker();
                                var event_1 = walker.next();
                                while (event_1) {
                                    var node = event_1.node, entering = event_1.entering;
                                    if (entering) {
                                        markInfo_1 = markInfo_1.concat(getMarkForAdding(node, toastMark));
                                    }
                                    event_1 = walker.next();
                                }
                            }
                        }
                        else if (removedNodeRange) {
                            var maxIndex = newTr.doc.childCount - 1;
                            var _a = removedNodeRange.line, startLine = _a[0], endLine = _a[1];
                            var startIndex = Math.min(startLine, maxIndex);
                            var endIndex = Math.min(endLine, maxIndex);
                            // cache the index to remove code block, custom block background when there are no adding nodes
                            for (var i = startIndex; i <= endIndex; i += 1) {
                                removingBackgroundIndexMap[i] = true;
                            }
                        }
                    });
                    appendMarkTr(newTr, schema, markInfo_1);
                }
                return newTr.setMeta('widget', tr.getMeta('widget'));
            },
        });
    }
    function isDifferentBlock(doc, index, attrs) {
        return Object.keys(attrs).some(function (name) { return attrs[name] !== doc.child(index).attrs[name]; });
    }
    function addLineBackground(tr, doc, paragraph, blockPosInfo, attrs) {
        if (attrs === void 0) { attrs = {}; }
        var startIndex = blockPosInfo.startIndex, endIndex = blockPosInfo.endIndex, from = blockPosInfo.from, to = blockPosInfo.to;
        var shouldChangeBlockType = false;
        for (var i = startIndex; i <= endIndex; i += 1) {
            // prevent to remove background of the node that need to have background
            delete removingBackgroundIndexMap[i];
            shouldChangeBlockType = isDifferentBlock(doc, i, attrs);
        }
        if (shouldChangeBlockType) {
            tr.setBlockType(from, to, paragraph, attrs);
        }
    }
    function appendMarkTr(tr, schema, marks) {
        var doc = tr.doc;
        var paragraph = schema.nodes.paragraph;
        // get start position per line for lazy calculation
        var startPosListPerLine = getStartPosListPerLine(doc, doc.childCount);
        marks.forEach(function (_a) {
            var start = _a.start, end = _a.end, spec = _a.spec, lineBackground = _a.lineBackground;
            var startIndex = Math.min(start[0], doc.childCount) - 1;
            var endIndex = Math.min(end[0], doc.childCount) - 1;
            var startNode = doc.child(startIndex);
            var endNode = doc.child(endIndex);
            // calculate the position corresponding to the line
            var from = startPosListPerLine[startIndex];
            var to = startPosListPerLine[endIndex];
            // calculate the position corresponding to the character offset of the line
            from += start[1] + getWidgetNodePos(startNode, start[1] - 1);
            to += end[1] + getWidgetNodePos(endNode, end[1] - 1);
            if (spec) {
                if (lineBackground) {
                    var posInfo = { from: from, to: to, startIndex: startIndex, endIndex: endIndex };
                    addLineBackground(tr, doc, paragraph, posInfo, spec.attrs);
                }
                else {
                    tr.addMark(from, to, schema.mark(spec.type, spec.attrs));
                }
            }
            else {
                tr.removeMark(from, to);
            }
        });
        removeBlockBackground(tr, startPosListPerLine, paragraph);
    }
    function removeBlockBackground(tr, startPosListPerLine, paragraph) {
        Object.keys(removingBackgroundIndexMap).forEach(function (index) {
            var startIndex = Number(index);
            // get the end position of the current line with the next node start position.
            var endIndex = Math.min(Number(index) + 1, tr.doc.childCount - 1);
            var from = startPosListPerLine[startIndex];
            // subtract '1' for getting end position of the line
            var to = startPosListPerLine[endIndex] - 1;
            if (startIndex === endIndex) {
                to += 2;
            }
            tr.setBlockType(from, to, paragraph);
        });
    }
    function cacheIndexToRemoveBackground(doc, start, end) {
        var skipLines = [];
        removingBackgroundIndexMap = {};
        for (var i = start[0] - 1; i < end[0]; i += 1) {
            var node = doc.child(i);
            var codeEnd = node.attrs.codeEnd;
            var codeStart = node.attrs.codeStart;
            if (codeStart && codeEnd && !includes(skipLines, codeStart)) {
                skipLines.push(codeStart);
                codeEnd = Math.min(codeEnd, doc.childCount);
                // should subtract '1' to markdown line position
                // because markdown parser has '1'(not zero) as the start number
                var startIndex = codeStart - 1;
                var endIndex = end[0];
                for (var index = startIndex; index < endIndex; index += 1) {
                    removingBackgroundIndexMap[index] = true;
                }
            }
        }
    }
    function getMarkForRemoving(_a, nodes) {
        var doc = _a.doc;
        var start = nodes[0].sourcepos[0];
        var _b = last$1(nodes).sourcepos, end = _b[1];
        var startPos = [start[0], start[1]];
        var endPos = [end[0], end[1] + 1];
        var marks = [];
        cacheIndexToRemoveBackground(doc, start, end);
        marks.push({ start: startPos, end: endPos });
        return marks;
    }
    function getMarkForAdding(node, toastMark) {
        var lineTexts = toastMark.getLineTexts();
        var startPos = [getMdStartLine(node), getMdStartCh(node)];
        var endPos = [getMdEndLine(node), getMdEndCh(node) + 1];
        var markInfo = getMarkInfo(node, startPos, endPos, lineTexts[endPos[0] - 1]);
        return markInfo !== null && markInfo !== void 0 ? markInfo : [];
    }

    function getToolbarStateType$1(mdNode) {
        if (isListNode$1(mdNode)) {
            if (mdNode.listData.task) {
                return 'taskList';
            }
            return mdNode.listData.type === 'ordered' ? 'orderedList' : 'bulletList';
        }
        if (mdNode.type.indexOf('table') !== -1) {
            return 'table';
        }
        return mdNode.type;
    }
    function getToolbarState$1(targetNode) {
        var toolbarState = {};
        var listEnabled = true;
        traverseParentNodes(targetNode, function (mdNode) {
            var type = getToolbarStateType$1(mdNode);
            if (type === 'customBlock' || type === 'image' || type === 'link') {
                return;
            }
            if (type === 'bulletList' || type === 'orderedList') {
                if (listEnabled) {
                    toolbarState[type] = true;
                    listEnabled = false;
                }
            }
            else {
                toolbarState[type] = true;
            }
        });
        return toolbarState;
    }
    function previewHighlight(_a) {
        var toastMark = _a.toastMark, eventEmitter = _a.eventEmitter;
        return new Plugin({
            view: function () {
                return {
                    update: function (view, prevState) {
                        var state = view.state;
                        var doc = state.doc, selection = state.selection;
                        if (prevState && prevState.doc.eq(doc) && prevState.selection.eq(selection)) {
                            return;
                        }
                        var from = selection.from;
                        var startChOffset = state.doc.resolve(from).start();
                        var line = state.doc.content.findIndex(from).index + 1;
                        var ch = from - startChOffset;
                        if (from === startChOffset) {
                            ch += 1;
                        }
                        var cursorPos = [line, ch];
                        var mdNode = toastMark.findNodeAtPosition(cursorPos);
                        var toolbarState = getToolbarState$1(mdNode);
                        eventEmitter.emit('changeToolbarState', {
                            cursorPos: cursorPos,
                            mdNode: mdNode,
                            toolbarState: toolbarState,
                        });
                        eventEmitter.emit('setFocusedNode', mdNode);
                    },
                };
            },
        });
    }

    var Doc$1 = /** @class */ (function (_super) {
        __extends$1(Doc, _super);
        function Doc() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Doc.prototype, "name", {
            get: function () {
                return 'doc';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Doc.prototype, "schema", {
            get: function () {
                return {
                    content: 'block+',
                };
            },
            enumerable: false,
            configurable: true
        });
        return Doc;
    }(Node$2));

    var Mark = /** @class */ (function () {
        function Mark() {
        }
        Object.defineProperty(Mark.prototype, "type", {
            get: function () {
                return 'mark';
            },
            enumerable: false,
            configurable: true
        });
        Mark.prototype.setContext = function (context) {
            this.context = context;
        };
        return Mark;
    }());

    function getTextByMdLine(doc, mdLine) {
        return getTextContent(doc, mdLine - 1);
    }
    function getTextContent(doc, index) {
        return doc.child(index).textContent;
    }

    var reBlockQuote = /^\s*> ?/;
    var BlockQuote$1 = /** @class */ (function (_super) {
        __extends$1(BlockQuote, _super);
        function BlockQuote() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(BlockQuote.prototype, "name", {
            get: function () {
                return 'blockQuote';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BlockQuote.prototype, "schema", {
            get: function () {
                return {
                    toDOM: function () {
                        return ['span', { class: clsWithMdPrefix('block-quote') }, 0];
                    },
                };
            },
            enumerable: false,
            configurable: true
        });
        BlockQuote.prototype.createBlockQuoteText = function (text, isBlockQuote) {
            return isBlockQuote ? text.replace(reBlockQuote, '').trim() : "> " + text.trim();
        };
        BlockQuote.prototype.extendBlockQuote = function () {
            var _this = this;
            return function (_a, dispatch) {
                var selection = _a.selection, doc = _a.doc, tr = _a.tr, schema = _a.schema;
                var _b = getRangeInfo(selection), endFromOffset = _b.endFromOffset, endToOffset = _b.endToOffset, endIndex = _b.endIndex, to = _b.to;
                var textContent = getTextContent(doc, endIndex);
                var isBlockQuote = reBlockQuote.test(textContent);
                if (isBlockQuote && to > endFromOffset && selection.empty) {
                    var isEmpty = !textContent.replace(reBlockQuote, '').trim();
                    if (isEmpty) {
                        tr.deleteRange(endFromOffset, endToOffset).split(tr.mapping.map(endToOffset));
                    }
                    else {
                        var slicedText = textContent.slice(to - endFromOffset).trim();
                        var node = createTextNode$1(schema, _this.createBlockQuoteText(slicedText));
                        splitAndExtendBlock(tr, endToOffset, slicedText, node);
                    }
                    dispatch(tr);
                    return true;
                }
                return false;
            };
        };
        BlockQuote.prototype.commands = function () {
            var _this = this;
            return function () { return function (state, dispatch) {
                var selection = state.selection, doc = state.doc;
                var _a = getRangeInfo(selection), startFromOffset = _a.startFromOffset, endToOffset = _a.endToOffset, startIndex = _a.startIndex, endIndex = _a.endIndex;
                var isBlockQuote = reBlockQuote.test(getTextContent(doc, startIndex));
                var tr = replaceTextNode({
                    state: state,
                    startIndex: startIndex,
                    endIndex: endIndex,
                    from: startFromOffset,
                    createText: function (textContent) { return _this.createBlockQuoteText(textContent, isBlockQuote); },
                });
                dispatch(tr.setSelection(createTextSelection(tr, tr.mapping.map(endToOffset))));
                return true;
            }; };
        };
        BlockQuote.prototype.keymaps = function () {
            var blockQuoteCommand = this.commands()();
            return {
                'alt-q': blockQuoteCommand,
                'alt-Q': blockQuoteCommand,
                Enter: this.extendBlockQuote(),
            };
        };
        return BlockQuote;
    }(Mark));

    var reList = /(^\s*)([-*+] |[\d]+\. )/;
    var reOrderedList = /(^\s*)([\d])+\.( \[[ xX]])? /;
    var reOrderedListGroup = /^(\s*)((\d+)([.)]\s(?:\[(?:x|\s)\]\s)?))(.*)/;
    var reCanBeTaskList = /(^\s*)([-*+]|[\d]+\.)( \[[ xX]])? /;
    var reBulletListGroup = /^(\s*)([-*+]+(\s(?:\[(?:x|\s)\]\s)?))(.*)/;
    var reTaskList = /(^\s*)([-*+] |[\d]+\. )(\[[ xX]] )/;
    var reBulletTaskList = /(^\s*)([-*+])( \[[ xX]]) /;
    function getListType(text) {
        return reOrderedList.test(text) ? 'ordered' : 'bullet';
    }
    function getListDepth(mdNode) {
        var depth = 0;
        while (mdNode && mdNode.type !== 'document') {
            if (mdNode.type === 'list') {
                depth += 1;
            }
            mdNode = mdNode.parent;
        }
        return depth;
    }
    function findSameDepthList(toastMark, currentLine, depth, backward) {
        var lineTexts = toastMark.getLineTexts();
        var lineLen = lineTexts.length;
        var result = [];
        var line = currentLine;
        while (backward ? line < lineLen : line > 1) {
            line = backward ? line + 1 : line - 1;
            var mdNode = toastMark.findFirstNodeAtLine(line);
            var currentListDepth = getListDepth(mdNode);
            if (currentListDepth === depth) {
                result.push({ line: line, depth: depth, mdNode: mdNode });
            }
            else if (currentListDepth < depth) {
                break;
            }
        }
        return result;
    }
    function getSameDepthItems(_a) {
        var toastMark = _a.toastMark, mdNode = _a.mdNode, line = _a.line;
        var depth = getListDepth(mdNode);
        var forwardList = findSameDepthList(toastMark, line, depth, false).reverse();
        var backwardList = findSameDepthList(toastMark, line, depth, true);
        return forwardList.concat([{ line: line, depth: depth, mdNode: mdNode }]).concat(backwardList);
    }
    function textToBullet(text) {
        if (!reList.test(text)) {
            return "* " + text;
        }
        var type = getListType(text);
        if (type === 'bullet' && reCanBeTaskList.test(text)) {
            text = text.replace(reBulletTaskList, '$1$2 ');
        }
        else if (type === 'ordered') {
            text = text.replace(reOrderedList, '$1* ');
        }
        return text;
    }
    function textToOrdered(text, ordinalNum) {
        if (!reList.test(text)) {
            return ordinalNum + ". " + text;
        }
        var type = getListType(text);
        if (type === 'bullet' || (type === 'ordered' && reCanBeTaskList.test(text))) {
            text = text.replace(reCanBeTaskList, "$1" + ordinalNum + ". ");
        }
        else if (type === 'ordered') {
            // eslint-disable-next-line prefer-destructuring
            var start = reOrderedListGroup.exec(text)[3];
            if (Number(start) !== ordinalNum) {
                text = text.replace(reOrderedList, "$1" + ordinalNum + ". ");
            }
        }
        return text;
    }
    function getChangedInfo(doc, sameDepthItems, type, start) {
        if (start === void 0) { start = 0; }
        var firstIndex = Number.MAX_VALUE;
        var lastIndex = 0;
        var changedResults = sameDepthItems.map(function (_a, index) {
            var line = _a.line;
            firstIndex = Math.min(line - 1, firstIndex);
            lastIndex = Math.max(line - 1, lastIndex);
            var text = getTextByMdLine(doc, line);
            text = type === 'bullet' ? textToBullet(text) : textToOrdered(text, index + 1 + start);
            return { text: text, line: line };
        });
        return { changedResults: changedResults, firstIndex: firstIndex, lastIndex: lastIndex };
    }
    function getBulletOrOrdered(type, context) {
        var sameDepthListInfo = getSameDepthItems(context);
        return getChangedInfo(context.doc, sameDepthListInfo, type);
    }
    var otherListToList = {
        bullet: function (context) {
            return getBulletOrOrdered('bullet', context);
        },
        ordered: function (context) {
            return getBulletOrOrdered('ordered', context);
        },
        task: function (_a) {
            var mdNode = _a.mdNode, doc = _a.doc, line = _a.line;
            var text = getTextByMdLine(doc, line);
            if (mdNode.listData.task) {
                text = text.replace(reTaskList, '$1$2');
            }
            else if (isListNode$1(mdNode)) {
                text = text.replace(reList, '$1$2[ ] ');
            }
            return { changedResults: [{ text: text, line: line }] };
        },
    };
    var otherNodeToList = {
        bullet: function (_a) {
            var doc = _a.doc, line = _a.line;
            var lineText = getTextByMdLine(doc, line);
            var changedResults = [{ text: "* " + lineText, line: line }];
            return { changedResults: changedResults };
        },
        ordered: function (_a) {
            var toastMark = _a.toastMark, doc = _a.doc, line = _a.line, startLine = _a.startLine;
            var lineText = getTextByMdLine(doc, line);
            var firstOrderedListNum = 1;
            var firstOrderedListLine = startLine;
            var skipped = 0;
            for (var i = startLine - 1; i > 0; i -= 1) {
                var mdNode = toastMark.findFirstNodeAtLine(i);
                var text = getTextByMdLine(doc, i);
                var canBeListNode = text && !!findClosestNode(mdNode, function (targetNode) { return isListNode$1(targetNode); });
                var searchResult = reOrderedListGroup.exec(getTextByMdLine(doc, i));
                if (!searchResult && !canBeListNode) {
                    break;
                }
                if (!searchResult && canBeListNode) {
                    skipped += 1;
                    continue;
                }
                var _b = searchResult, indent = _b[1], start = _b[3];
                // basis on one depth list
                if (!indent) {
                    firstOrderedListNum = Number(start);
                    firstOrderedListLine = i;
                    break;
                }
            }
            var ordinalNum = firstOrderedListNum + line - firstOrderedListLine - skipped;
            var changedResults = [{ text: ordinalNum + ". " + lineText, line: line }];
            return { changedResults: changedResults };
        },
        task: function (_a) {
            var doc = _a.doc, line = _a.line;
            var lineText = getTextByMdLine(doc, line);
            var changedResults = [{ text: "* [ ] " + lineText, line: line }];
            return { changedResults: changedResults };
        },
    };
    var extendList = {
        bullet: function (_a) {
            var line = _a.line, doc = _a.doc;
            var lineText = getTextByMdLine(doc, line);
            var _b = reBulletListGroup.exec(lineText), indent = _b[1], delimiter = _b[2];
            return { listSyntax: "" + indent + delimiter };
        },
        ordered: function (_a) {
            var toastMark = _a.toastMark, line = _a.line, mdNode = _a.mdNode, doc = _a.doc;
            var depth = getListDepth(mdNode);
            var lineText = getTextByMdLine(doc, line);
            var _b = reOrderedListGroup.exec(lineText), indent = _b[1], start = _b[3], delimiter = _b[4];
            var ordinalNum = Number(start) + 1;
            var listSyntax = "" + indent + ordinalNum + delimiter;
            var backwardList = findSameDepthList(toastMark, line, depth, true);
            var filteredList = backwardList.filter(function (info) {
                var searchResult = reOrderedListGroup.exec(getTextByMdLine(doc, info.line));
                return (searchResult &&
                    searchResult[1].length === indent.length &&
                    !!findClosestNode(info.mdNode, function (targetNode) { return isOrderedListNode(targetNode); }));
            });
            return __assign$1({ listSyntax: listSyntax }, getChangedInfo(doc, filteredList, 'ordered', ordinalNum));
        },
    };
    function getReorderedListInfo(doc, schema, line, ordinalNum, prevIndentLength) {
        var nodes = [];
        var lineText = getTextByMdLine(doc, line);
        var searchResult = reOrderedListGroup.exec(lineText);
        while (searchResult) {
            var indent = searchResult[1], delimiter = searchResult[4], text = searchResult[5];
            var indentLength = indent.length;
            if (indentLength === prevIndentLength) {
                nodes.push(createTextNode$1(schema, "" + indent + ordinalNum + delimiter + text));
                ordinalNum += 1;
                line += 1;
            }
            else if (indentLength > prevIndentLength) {
                var nestedListInfo = getReorderedListInfo(doc, schema, line, 1, indentLength);
                line = nestedListInfo.line;
                nodes = nodes.concat(nestedListInfo.nodes);
            }
            if (indentLength < prevIndentLength || line > doc.childCount) {
                break;
            }
            lineText = getTextByMdLine(doc, line);
            searchResult = reOrderedListGroup.exec(lineText);
        }
        return { nodes: nodes, line: line };
    }

    var reStartSpace = /(^\s{1,4})(.*)/;
    function isBlockUnit(from, to, text) {
        return from < to || reList.test(text) || reBlockQuote.test(text);
    }
    function isInTableCellNode(doc, schema, selection) {
        var $pos = selection.$from;
        if ($pos.depth === 0) {
            $pos = doc.resolve($pos.pos - 1);
        }
        var node = $pos.node(1);
        var startOffset = $pos.start(1);
        var contentSize = node.content.size;
        return (node.rangeHasMark(0, contentSize, schema.marks.table) &&
            $pos.pos - startOffset !== contentSize &&
            $pos.pos !== startOffset);
    }
    function createSelection(tr, posInfo) {
        var from = posInfo.from, to = posInfo.to;
        if (posInfo.type === 'indent') {
            var softTabLen = 4;
            from += softTabLen;
            to += (posInfo.lineLen + 1) * softTabLen;
        }
        else {
            var spaceLenList = posInfo.spaceLenList;
            from -= spaceLenList[0];
            for (var i = 0; i < spaceLenList.length; i += 1) {
                to -= spaceLenList[i];
            }
        }
        return createTextSelection(tr, from, to);
    }
    var Paragraph$1 = /** @class */ (function (_super) {
        __extends$1(Paragraph, _super);
        function Paragraph() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Paragraph.prototype, "name", {
            get: function () {
                return 'paragraph';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Paragraph.prototype, "schema", {
            get: function () {
                return {
                    content: 'inline*',
                    attrs: {
                        className: { default: null },
                        codeStart: { default: null },
                        codeEnd: { default: null },
                    },
                    selectable: false,
                    group: 'block',
                    parseDOM: [{ tag: 'div' }],
                    toDOM: function (_a) {
                        var attrs = _a.attrs;
                        return attrs.className
                            ? ['div', { class: clsWithMdPrefix(attrs.className) }, 0]
                            : ['div', 0];
                    },
                };
            },
            enumerable: false,
            configurable: true
        });
        Paragraph.prototype.reorderList = function (startLine, endLine) {
            var _a = this.context, view = _a.view, toastMark = _a.toastMark, schema = _a.schema;
            var _b = view.state, tr = _b.tr, selection = _b.selection, doc = _b.doc;
            var mdNode = toastMark.findFirstNodeAtLine(startLine);
            var topListNode = mdNode;
            while (mdNode && !isBulletListNode(mdNode) && mdNode.parent.type !== 'document') {
                mdNode = mdNode.parent;
                if (isOrderedListNode(mdNode)) {
                    topListNode = mdNode;
                    break;
                }
            }
            if (topListNode) {
                startLine = topListNode.sourcepos[0][0];
            }
            var _c = reOrderedListGroup.exec(getTextByMdLine(doc, startLine)), indent = _c[1], start = _c[3];
            var indentLen = indent.length;
            var _d = getReorderedListInfo(doc, schema, startLine, Number(start), indentLen), line = _d.line, nodes = _d.nodes;
            endLine = Math.max(endLine, line - 1);
            var startOffset = getNodeContentOffsetRange(doc, startLine - 1).startOffset;
            for (var i = startLine - 1; i <= endLine - 1; i += 1) {
                var _e = doc.child(i), nodeSize = _e.nodeSize, content = _e.content;
                var mappedFrom = tr.mapping.map(startOffset);
                var mappedTo = mappedFrom + content.size;
                tr.replaceWith(mappedFrom, mappedTo, nodes[i - startLine + 1]);
                startOffset += nodeSize;
            }
            var newSelection = createTextSelection(tr, selection.from, selection.to);
            view.dispatch(tr.setSelection(newSelection));
        };
        Paragraph.prototype.indent = function (tabKey) {
            var _this = this;
            if (tabKey === void 0) { tabKey = false; }
            return function () { return function (state, dispatch) {
                var schema = state.schema, selection = state.selection, doc = state.doc;
                var _a = getRangeInfo(selection), from = _a.from, to = _a.to, startFromOffset = _a.startFromOffset, startIndex = _a.startIndex, endIndex = _a.endIndex;
                if (tabKey && isInTableCellNode(doc, schema, selection)) {
                    return false;
                }
                var startLineText = getTextContent(doc, startIndex);
                if ((tabKey && isBlockUnit(from, to, startLineText)) ||
                    (!tabKey && reList.test(startLineText))) {
                    var tr = replaceTextNode({
                        state: state,
                        from: startFromOffset,
                        startIndex: startIndex,
                        endIndex: endIndex,
                        createText: function (textContent) { return "    " + textContent; },
                    });
                    var posInfo = {
                        type: 'indent',
                        from: from,
                        to: to,
                        lineLen: endIndex - startIndex,
                    };
                    dispatch(tr.setSelection(createSelection(tr, posInfo)));
                    if (reOrderedListGroup.test(startLineText)) {
                        _this.reorderList(startIndex + 1, endIndex + 1);
                    }
                }
                else if (tabKey) {
                    dispatch(state.tr.insert(to, createTextNode$1(schema, '    ')));
                }
                return true;
            }; };
        };
        Paragraph.prototype.outdent = function (tabKey) {
            var _this = this;
            if (tabKey === void 0) { tabKey = false; }
            return function () { return function (state, dispatch) {
                var selection = state.selection, doc = state.doc, schema = state.schema;
                var _a = getRangeInfo(selection), from = _a.from, to = _a.to, startFromOffset = _a.startFromOffset, startIndex = _a.startIndex, endIndex = _a.endIndex;
                if (tabKey && isInTableCellNode(doc, schema, selection)) {
                    return false;
                }
                var startLineText = getTextContent(doc, startIndex);
                if ((tabKey && isBlockUnit(from, to, startLineText)) ||
                    (!tabKey && reList.test(startLineText))) {
                    var spaceLenList_1 = [];
                    var tr = replaceTextNode({
                        state: state,
                        from: startFromOffset,
                        startIndex: startIndex,
                        endIndex: endIndex,
                        createText: function (textContent) {
                            var searchResult = reStartSpace.exec(textContent);
                            spaceLenList_1.push(searchResult ? searchResult[1].length : 0);
                            return textContent.replace(reStartSpace, '$2');
                        },
                    });
                    var posInfo = { type: 'outdent', from: from, to: to, spaceLenList: spaceLenList_1 };
                    dispatch(tr.setSelection(createSelection(tr, posInfo)));
                    if (reOrderedListGroup.test(startLineText)) {
                        _this.reorderList(startIndex + 1, endIndex + 1);
                    }
                }
                else if (tabKey) {
                    var startText = startLineText.slice(0, to - startFromOffset);
                    var startTextWithoutSpace = startText.replace(/\s{1,4}$/, '');
                    var deletStart = to - (startText.length - startTextWithoutSpace.length);
                    dispatch(state.tr.delete(deletStart, to));
                }
                return true;
            }; };
        };
        Paragraph.prototype.deleteLines = function () {
            var _this = this;
            return function (state, dispatch) {
                var view = _this.context.view;
                var _a = getRangeInfo(state.selection), startFromOffset = _a.startFromOffset, endToOffset = _a.endToOffset;
                var deleteRange = function () {
                    dispatch(state.tr.deleteRange(startFromOffset, endToOffset));
                    return true;
                };
                return chainCommands(deleteRange, joinForward)(state, dispatch, view);
            };
        };
        Paragraph.prototype.moveDown = function () {
            return function (state, dispatch) {
                var doc = state.doc, tr = state.tr, selection = state.selection, schema = state.schema;
                var _a = getRangeInfo(selection), startFromOffset = _a.startFromOffset, endToOffset = _a.endToOffset, endIndex = _a.endIndex;
                if (endIndex < doc.content.childCount - 1) {
                    var _b = doc.child(endIndex + 1), nodeSize = _b.nodeSize, textContent = _b.textContent;
                    tr.delete(endToOffset, endToOffset + nodeSize)
                        .split(startFromOffset)
                        // subtract 2(start, end tag length) to insert prev line
                        .insert(tr.mapping.map(startFromOffset) - 2, createTextNode$1(schema, textContent));
                    dispatch(tr);
                    return true;
                }
                return false;
            };
        };
        Paragraph.prototype.moveUp = function () {
            return function (state, dispatch) {
                var tr = state.tr, doc = state.doc, selection = state.selection, schema = state.schema;
                var _a = getRangeInfo(selection), startFromOffset = _a.startFromOffset, endToOffset = _a.endToOffset, startIndex = _a.startIndex;
                if (startIndex > 0) {
                    var _b = doc.child(startIndex - 1), nodeSize = _b.nodeSize, textContent = _b.textContent;
                    tr.delete(startFromOffset - nodeSize, startFromOffset)
                        .split(tr.mapping.map(endToOffset))
                        .insert(tr.mapping.map(endToOffset), createTextNode$1(schema, textContent));
                    dispatch(tr);
                    return true;
                }
                return false;
            };
        };
        Paragraph.prototype.commands = function () {
            return {
                indent: this.indent(),
                outdent: this.outdent(),
            };
        };
        Paragraph.prototype.keymaps = function () {
            return {
                Tab: this.indent(true)(),
                'Shift-Tab': this.outdent(true)(),
                'Mod-d': this.deleteLines(),
                'Mod-D': this.deleteLines(),
                'Alt-ArrowUp': this.moveUp(),
                'Alt-ArrowDown': this.moveDown(),
            };
        };
        return Paragraph;
    }(Node$2));

    var Text$1 = /** @class */ (function (_super) {
        __extends$1(Text, _super);
        function Text() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Text.prototype, "name", {
            get: function () {
                return 'text';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Text.prototype, "schema", {
            get: function () {
                return {
                    group: 'inline',
                };
            },
            enumerable: false,
            configurable: true
        });
        return Text;
    }(Node$2));

    var reHeading = /^#{1,6}\s/;
    var Heading$1 = /** @class */ (function (_super) {
        __extends$1(Heading, _super);
        function Heading() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Heading.prototype, "name", {
            get: function () {
                return 'heading';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Heading.prototype, "schema", {
            get: function () {
                return {
                    attrs: {
                        level: { default: 1 },
                        seText: { default: false },
                    },
                    toDOM: function (_a) {
                        var attrs = _a.attrs;
                        var level = attrs.level, seText = attrs.seText;
                        var classNames = "heading|heading" + level;
                        if (seText) {
                            classNames += '|delimiter|setext';
                        }
                        return ['span', { class: clsWithMdPrefix.apply(void 0, classNames.split('|')) }, 0];
                    },
                };
            },
            enumerable: false,
            configurable: true
        });
        Heading.prototype.createHeadingText = function (level, text, curHeadingSyntax) {
            var textContent = text.replace(curHeadingSyntax, '').trim();
            var headingText = '';
            while (level > 0) {
                headingText += '#';
                level -= 1;
            }
            return headingText + " " + textContent;
        };
        Heading.prototype.commands = function () {
            var _this = this;
            return function (payload) { return function (state, dispatch) {
                var level = payload.level;
                var _a = getRangeInfo(state.selection), startFromOffset = _a.startFromOffset, endToOffset = _a.endToOffset, startIndex = _a.startIndex, endIndex = _a.endIndex;
                var tr = replaceTextNode({
                    state: state,
                    from: startFromOffset,
                    startIndex: startIndex,
                    endIndex: endIndex,
                    createText: function (textContent) {
                        var matchedHeading = textContent.match(reHeading);
                        var curHeadingSyntax = matchedHeading ? matchedHeading[0] : '';
                        return _this.createHeadingText(level, textContent, curHeadingSyntax);
                    },
                });
                dispatch(tr.setSelection(createTextSelection(tr, tr.mapping.map(endToOffset))));
                return true;
            }; };
        };
        return Heading;
    }(Mark));

    var fencedCodeBlockSyntax = '```';
    var CodeBlock$1 = /** @class */ (function (_super) {
        __extends$1(CodeBlock, _super);
        function CodeBlock() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(CodeBlock.prototype, "name", {
            get: function () {
                return 'codeBlock';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CodeBlock.prototype, "schema", {
            get: function () {
                return {
                    toDOM: function () {
                        return ['span', { class: clsWithMdPrefix('code-block') }, 0];
                    },
                };
            },
            enumerable: false,
            configurable: true
        });
        CodeBlock.prototype.commands = function () {
            return function () { return function (state, dispatch) {
                var selection = state.selection, schema = state.schema, tr = state.tr;
                var _a = getRangeInfo(selection), startFromOffset = _a.startFromOffset, endToOffset = _a.endToOffset;
                var fencedNode = createTextNode$1(schema, fencedCodeBlockSyntax);
                // add fenced start block
                tr.insert(startFromOffset, fencedNode).split(startFromOffset + fencedCodeBlockSyntax.length);
                // add fenced end block
                tr.split(tr.mapping.map(endToOffset)).insert(tr.mapping.map(endToOffset), fencedNode);
                dispatch(tr.setSelection(
                // subtract fenced syntax length and open, close tag(2)
                createTextSelection(tr, tr.mapping.map(endToOffset) - (fencedCodeBlockSyntax.length + 2))));
                return true;
            }; };
        };
        CodeBlock.prototype.keepIndentation = function () {
            var _this = this;
            return function (_a, dispatch) {
                var selection = _a.selection, tr = _a.tr, doc = _a.doc, schema = _a.schema;
                var toastMark = _this.context.toastMark;
                var _b = getRangeInfo(selection), startFromOffset = _b.startFromOffset, endToOffset = _b.endToOffset, endIndex = _b.endIndex, from = _b.from, to = _b.to;
                var textContent = getTextContent(doc, endIndex);
                if (from === to && textContent.trim()) {
                    var matched = textContent.match(/^\s+/);
                    var mdNode = toastMark.findFirstNodeAtLine(endIndex + 1);
                    if (isCodeBlockNode(mdNode) && matched) {
                        var spaces = matched[0];
                        var slicedText = textContent.slice(to - startFromOffset);
                        var node = createTextNode$1(schema, spaces + slicedText);
                        splitAndExtendBlock(tr, endToOffset, slicedText, node);
                        dispatch(tr);
                        return true;
                    }
                }
                return false;
            };
        };
        CodeBlock.prototype.keymaps = function () {
            var codeBlockCommand = this.commands()();
            return {
                'Shift-Mod-p': codeBlockCommand,
                'Shift-Mod-P': codeBlockCommand,
                Enter: this.keepIndentation(),
            };
        };
        return CodeBlock;
    }(Mark));

    var reEmptyTable = /\||\s/g;
    function createTableHeader(columnCount) {
        return [createTableRow(columnCount), createTableRow(columnCount, true)];
    }
    function createTableBody$1(columnCount, rowCount) {
        var bodyRows = [];
        for (var i = 0; i < rowCount; i += 1) {
            bodyRows.push(createTableRow(columnCount));
        }
        return bodyRows;
    }
    function createTableRow(columnCount, delim) {
        var row = '|';
        for (var i = 0; i < columnCount; i += 1) {
            row += delim ? ' --- |' : '  |';
        }
        return row;
    }
    function createTargetTypes(moveNext) {
        return moveNext
            ? { type: 'next', parentType: 'tableHead', childType: 'firstChild' }
            : { type: 'prev', parentType: 'tableBody', childType: 'lastChild' };
    }
    var Table$1 = /** @class */ (function (_super) {
        __extends$1(Table, _super);
        function Table() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Table.prototype, "name", {
            get: function () {
                return 'table';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "schema", {
            get: function () {
                return {
                    toDOM: function () {
                        return ['span', { class: clsWithMdPrefix('table') }, 0];
                    },
                };
            },
            enumerable: false,
            configurable: true
        });
        Table.prototype.extendTable = function () {
            var _this = this;
            return function (_a, dispatch) {
                var selection = _a.selection, doc = _a.doc, tr = _a.tr, schema = _a.schema;
                if (!selection.empty) {
                    return false;
                }
                var _b = getRangeInfo(selection), endFromOffset = _b.endFromOffset, endToOffset = _b.endToOffset, endIndex = _b.endIndex, to = _b.to;
                var textContent = getTextContent(doc, endIndex);
                // should add `1` to line for the markdown parser
                // because markdown parser has `1`(not zero) as the start number
                var mdPos = [endIndex + 1, to - endFromOffset + 1];
                var mdNode = _this.context.toastMark.findNodeAtPosition(mdPos);
                var cellNode = findClosestNode(mdNode, function (node) {
                    return isTableCellNode(node) &&
                        (node.parent.type === 'tableDelimRow' || node.parent.parent.type === 'tableBody');
                });
                if (cellNode) {
                    var isEmpty = !textContent.replace(reEmptyTable, '').trim();
                    var parent_1 = cellNode.parent;
                    var columnCount = parent_1.parent.parent.columns.length;
                    var row = createTableRow(columnCount);
                    if (isEmpty) {
                        tr.deleteRange(endFromOffset, endToOffset).split(tr.mapping.map(endToOffset));
                    }
                    else {
                        tr
                            .split(endToOffset)
                            .insert(tr.mapping.map(endToOffset), createTextNode$1(schema, row))
                            // should subtract `2` to selection end position considering ` |` text
                            .setSelection(createTextSelection(tr, tr.mapping.map(endToOffset) - 2));
                    }
                    dispatch(tr);
                    return true;
                }
                return false;
            };
        };
        Table.prototype.moveTableCell = function (moveNext) {
            var _this = this;
            return function (_a, dispatch) {
                var selection = _a.selection, tr = _a.tr;
                var _b = getRangeInfo(selection), endFromOffset = _b.endFromOffset, endIndex = _b.endIndex, to = _b.to;
                var mdPos = [endIndex + 1, to - endFromOffset];
                var mdNode = _this.context.toastMark.findNodeAtPosition(mdPos);
                var cellNode = findClosestNode(mdNode, function (node) { return isTableCellNode(node); });
                if (cellNode) {
                    var parent_2 = cellNode.parent;
                    var _c = createTargetTypes(moveNext), type = _c.type, parentType = _c.parentType, childType = _c.childType;
                    var chOffset = getMdEndCh(cellNode);
                    if (cellNode[type]) {
                        chOffset = getMdEndCh(cellNode[type]) - 1;
                    }
                    else {
                        var row = !parent_2[type] && parent_2.parent.type === parentType
                            ? parent_2.parent[type][childType]
                            : parent_2[type];
                        if (type === 'next') {
                            // if there is next row, the base offset would be end position of the next row's first child.
                            // Otherwise, the base offset is zero.
                            var baseOffset = row ? getMdEndCh(row[childType]) : 0;
                            // calculate tag(open, close) position('2') for selection
                            chOffset += baseOffset + 2;
                        }
                        else if (type === 'prev') {
                            // if there is prev row, the target position would be '-4' for calculating ' |' characters and tag(open, close)
                            // Otherwise, the target position is zero.
                            chOffset = row ? -4 : 0;
                        }
                    }
                    dispatch(tr.setSelection(createTextSelection(tr, endFromOffset + chOffset)));
                    return true;
                }
                return false;
            };
        };
        Table.prototype.addTable = function () {
            return function (payload) { return function (_a, dispatch) {
                var selection = _a.selection, tr = _a.tr, schema = _a.schema;
                var _b = payload, columnCount = _b.columnCount, rowCount = _b.rowCount;
                var endToOffset = getRangeInfo(selection).endToOffset;
                var headerRows = createTableHeader(columnCount);
                var bodyRows = createTableBody$1(columnCount, rowCount - 1);
                var rows = __spreadArray$1(__spreadArray$1([], headerRows), bodyRows);
                rows.forEach(function (row) {
                    tr.split(tr.mapping.map(endToOffset)).insert(tr.mapping.map(endToOffset), createTextNode$1(schema, row));
                });
                // should add `4` to selection position considering `| ` text and start block tag length
                dispatch(tr.setSelection(createTextSelection(tr, endToOffset + 4)));
                return true;
            }; };
        };
        Table.prototype.commands = function () {
            return { addTable: this.addTable() };
        };
        Table.prototype.keymaps = function () {
            return {
                Enter: this.extendTable(),
                Tab: this.moveTableCell(true),
                'Shift-Tab': this.moveTableCell(false),
            };
        };
        return Table;
    }(Mark));

    var thematicBreakSyntax = '***';
    var ThematicBreak$1 = /** @class */ (function (_super) {
        __extends$1(ThematicBreak, _super);
        function ThematicBreak() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(ThematicBreak.prototype, "name", {
            get: function () {
                return 'thematicBreak';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThematicBreak.prototype, "schema", {
            get: function () {
                return {
                    toDOM: function () {
                        return ['span', { class: clsWithMdPrefix('thematic-break') }, 0];
                    },
                };
            },
            enumerable: false,
            configurable: true
        });
        ThematicBreak.prototype.hr = function () {
            return function () { return function (state, dispatch) {
                var selection = state.selection, schema = state.schema, tr = state.tr;
                var _a = getRangeInfo(selection), from = _a.from, to = _a.to, endToOffset = _a.endToOffset;
                var node = createTextNode$1(schema, thematicBreakSyntax);
                tr
                    .split(from)
                    .replaceWith(tr.mapping.map(from), tr.mapping.map(to), node)
                    .split(tr.mapping.map(to)).setSelection(createTextSelection(tr, tr.mapping.map(endToOffset)));
                dispatch(tr);
                return true;
            }; };
        };
        ThematicBreak.prototype.commands = function () {
            return { hr: this.hr() };
        };
        ThematicBreak.prototype.keymaps = function () {
            var lineCommand = this.hr()();
            return { 'Mod-l': lineCommand, 'Mod-L': lineCommand };
        };
        return ThematicBreak;
    }(Mark));

    function cannotBeListNode(_a) {
        var type = _a.type;
        return type === 'codeBlock' || type === 'heading' || type.indexOf('table') !== -1;
    }
    var ListItem$1 = /** @class */ (function (_super) {
        __extends$1(ListItem, _super);
        function ListItem() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(ListItem.prototype, "name", {
            get: function () {
                return 'listItem';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ListItem.prototype, "schema", {
            get: function () {
                return {
                    attrs: {
                        odd: { default: false },
                        even: { default: false },
                        listStyle: { default: false },
                    },
                    toDOM: function (_a) {
                        var attrs = _a.attrs;
                        var odd = attrs.odd, even = attrs.even, listStyle = attrs.listStyle;
                        var classNames = 'list-item';
                        if (listStyle) {
                            classNames += '|list-item-style';
                        }
                        if (odd) {
                            classNames += '|list-item-odd';
                        }
                        if (even) {
                            classNames += '|list-item-even';
                        }
                        return ['span', { class: clsWithMdPrefix.apply(void 0, classNames.split('|')) }, 0];
                    },
                };
            },
            enumerable: false,
            configurable: true
        });
        ListItem.prototype.extendList = function () {
            var _this = this;
            return function (_a, dispatch) {
                var selection = _a.selection, doc = _a.doc, schema = _a.schema, tr = _a.tr;
                var toastMark = _this.context.toastMark;
                var _b = getRangeInfo(selection), to = _b.to, startFromOffset = _b.startFromOffset, endFromOffset = _b.endFromOffset, endIndex = _b.endIndex, endToOffset = _b.endToOffset;
                var textContent = getTextContent(doc, endIndex);
                var isList = reList.test(textContent);
                if (!isList || selection.from === startFromOffset || !selection.empty) {
                    return false;
                }
                var isEmpty = !textContent.replace(reCanBeTaskList, '').trim();
                if (isEmpty) {
                    tr.deleteRange(endFromOffset, endToOffset).split(tr.mapping.map(endToOffset));
                }
                else {
                    var commandType = getListType(textContent);
                    // should add `1` to line for the markdown parser
                    // because markdown parser has `1`(not zero) as the start number
                    var mdNode = toastMark.findFirstNodeAtLine(endIndex + 1);
                    var slicedText = textContent.slice(to - endFromOffset);
                    var context = { toastMark: toastMark, mdNode: mdNode, doc: doc, line: endIndex + 1 };
                    var _c = extendList[commandType](context), listSyntax = _c.listSyntax, changedResults = _c.changedResults;
                    // change ordinal number of backward ordered list
                    if (changedResults === null || changedResults === void 0 ? void 0 : changedResults.length) {
                        // split the block
                        tr.split(to);
                        // set first ordered list info
                        changedResults.unshift({ text: listSyntax + slicedText, line: endIndex + 1 });
                        _this.changeToListPerLine(tr, changedResults, {
                            from: to,
                            // don't subtract 1 because the line has increased through 'split' command.
                            startLine: changedResults[0].line,
                            endLine: last$1(changedResults).line,
                        });
                        var pos = tr.mapping.map(endToOffset) - slicedText.length;
                        tr.setSelection(createTextSelection(tr, pos));
                    }
                    else {
                        var node = createTextNode$1(schema, listSyntax + slicedText);
                        splitAndExtendBlock(tr, endToOffset, slicedText, node);
                    }
                }
                dispatch(tr);
                return true;
            };
        };
        ListItem.prototype.toList = function (commandType) {
            var _this = this;
            return function () { return function (_a, dispatch) {
                var doc = _a.doc, tr = _a.tr, selection = _a.selection;
                var toastMark = _this.context.toastMark;
                var rangeInfo = getRangeInfo(selection);
                // should add `1` to line for the markdown parser
                // because markdown parser has `1`(not zero) as the start number
                var startLine = rangeInfo.startIndex + 1;
                var endLine = rangeInfo.endIndex + 1;
                var endToOffset = rangeInfo.endToOffset;
                var skipLines = [];
                for (var line = startLine; line <= endLine; line += 1) {
                    var mdNode = toastMark.findFirstNodeAtLine(line);
                    if (mdNode && cannotBeListNode(mdNode)) {
                        break;
                    }
                    // to skip unnecessary processing
                    if (skipLines.indexOf(line) !== -1) {
                        continue;
                    }
                    var context = { toastMark: toastMark, mdNode: mdNode, doc: doc, line: line, startLine: startLine };
                    var changedResults = (isListNode$1(mdNode)
                        ? otherListToList[commandType](context)
                        : otherNodeToList[commandType](context)).changedResults;
                    var endOffset = _this.changeToListPerLine(tr, changedResults, {
                        from: getNodeContentOffsetRange(doc, changedResults[0].line - 1).startOffset,
                        startLine: changedResults[0].line,
                        endLine: last$1(changedResults).line,
                        indexDiff: 1,
                    });
                    endToOffset = Math.max(endOffset, endToOffset);
                    if (changedResults) {
                        skipLines = skipLines.concat(changedResults.map(function (info) { return info.line; }));
                    }
                }
                dispatch(tr.setSelection(createTextSelection(tr, tr.mapping.map(endToOffset))));
                return true;
            }; };
        };
        ListItem.prototype.changeToListPerLine = function (tr, changedResults, _a) {
            var from = _a.from, startLine = _a.startLine, endLine = _a.endLine, _b = _a.indexDiff, indexDiff = _b === void 0 ? 0 : _b;
            var maxEndOffset = 0;
            var _loop_1 = function (i) {
                var _c = tr.doc.child(i), nodeSize = _c.nodeSize, content = _c.content;
                var mappedFrom = tr.mapping.map(from);
                var mappedTo = mappedFrom + content.size;
                var changedResult = changedResults.filter(function (result) { return result.line - indexDiff === i; })[0];
                if (changedResult) {
                    tr.replaceWith(mappedFrom, mappedTo, createTextNode$1(this_1.context.schema, changedResult.text));
                    maxEndOffset = Math.max(maxEndOffset, from + content.size);
                }
                from += nodeSize;
            };
            var this_1 = this;
            for (var i = startLine - indexDiff; i <= endLine - indexDiff; i += 1) {
                _loop_1(i);
            }
            return maxEndOffset;
        };
        ListItem.prototype.toggleTask = function () {
            var _this = this;
            return function (_a, dispatch) {
                var selection = _a.selection, tr = _a.tr, doc = _a.doc, schema = _a.schema;
                var toastMark = _this.context.toastMark;
                var _b = getRangeInfo(selection), startIndex = _b.startIndex, endIndex = _b.endIndex;
                var newTr = null;
                for (var i = startIndex; i <= endIndex; i += 1) {
                    var mdNode = toastMark.findFirstNodeAtLine(i + 1);
                    if (isListNode$1(mdNode) && mdNode.listData.task) {
                        var _c = mdNode.listData, checked = _c.checked, padding = _c.padding;
                        var stateChar = checked ? ' ' : 'x';
                        var mdPos = mdNode.sourcepos[0];
                        var startOffset = getNodeContentOffsetRange(doc, mdPos[0] - 1).startOffset;
                        startOffset += mdPos[1] + padding;
                        newTr = tr.replaceWith(startOffset, startOffset + 1, schema.text(stateChar));
                    }
                }
                if (newTr) {
                    dispatch(newTr);
                    return true;
                }
                return false;
            };
        };
        ListItem.prototype.commands = function () {
            return {
                bulletList: this.toList('bullet'),
                orderedList: this.toList('ordered'),
                taskList: this.toList('task'),
            };
        };
        ListItem.prototype.keymaps = function () {
            var bulletCommand = this.toList('bullet')();
            var orderedCommand = this.toList('ordered')();
            var taskCommand = this.toList('task')();
            var togleTaskCommand = this.toggleTask();
            return {
                'Mod-u': bulletCommand,
                'Mod-U': bulletCommand,
                'Mod-o': orderedCommand,
                'Mod-O': orderedCommand,
                'alt-t': taskCommand,
                'alt-T': taskCommand,
                'Shift-Ctrl-x': togleTaskCommand,
                'Shift-Ctrl-X': togleTaskCommand,
                Enter: this.extendList(),
            };
        };
        return ListItem;
    }(Mark));

    function toggleMark(condition, syntax) {
        return function () { return function (_a, dispatch) {
            var tr = _a.tr, selection = _a.selection;
            var conditionFn = !isFunction_1(condition)
                ? function (text) { return condition.test(text); }
                : condition;
            var syntaxLen = syntax.length;
            var doc = tr.doc;
            var _b = resolveSelectionPos(selection), from = _b[0], to = _b[1];
            var prevPos = Math.max(from - syntaxLen, 1);
            var nextPos = Math.min(to + syntaxLen, doc.content.size - 1);
            var slice = selection.content();
            var textContent = slice.content.textBetween(0, slice.content.size, '\n');
            var prevText = doc.textBetween(prevPos, from, '\n');
            var nextText = doc.textBetween(to, nextPos, '\n');
            textContent = "" + prevText + textContent + nextText;
            if (prevText && nextText && conditionFn(textContent)) {
                tr.delete(nextPos - syntaxLen, nextPos).delete(prevPos, prevPos + syntaxLen);
            }
            else {
                tr.insertText(syntax, to).insertText(syntax, from);
                var newSelection = selection.empty
                    ? createTextSelection(tr, from + syntaxLen)
                    : createTextSelection(tr, from + syntaxLen, to + syntaxLen);
                tr.setSelection(newSelection);
            }
            dispatch(tr);
            return true;
        }; };
    }

    var reStrong = /^(\*{2}|_{2}).*([\s\S]*)\1$/m;
    var strongSyntax = '**';
    var Strong$1 = /** @class */ (function (_super) {
        __extends$1(Strong, _super);
        function Strong() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Strong.prototype, "name", {
            get: function () {
                return 'strong';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Strong.prototype, "schema", {
            get: function () {
                return {
                    toDOM: function () {
                        return ['span', { class: clsWithMdPrefix('strong') }, 0];
                    },
                };
            },
            enumerable: false,
            configurable: true
        });
        Strong.prototype.bold = function () {
            return toggleMark(reStrong, strongSyntax);
        };
        Strong.prototype.commands = function () {
            return { bold: this.bold() };
        };
        Strong.prototype.keymaps = function () {
            var boldCommand = this.bold()();
            return { 'Mod-b': boldCommand, 'Mod-B': boldCommand };
        };
        return Strong;
    }(Mark));

    var reStrike = /^(~{2}).*([\s\S]*)\1$/m;
    var strikeSyntax = '~~';
    var Strike$1 = /** @class */ (function (_super) {
        __extends$1(Strike, _super);
        function Strike() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Strike.prototype, "name", {
            get: function () {
                return 'strike';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Strike.prototype, "schema", {
            get: function () {
                return {
                    toDOM: function () {
                        return ['span', { class: clsWithMdPrefix('strike') }, 0];
                    },
                };
            },
            enumerable: false,
            configurable: true
        });
        Strike.prototype.commands = function () {
            return toggleMark(reStrike, strikeSyntax);
        };
        Strike.prototype.keymaps = function () {
            var strikeCommand = this.commands()();
            return { 'Mod-s': strikeCommand, 'Mod-S': strikeCommand };
        };
        return Strike;
    }(Mark));

    var reEmph = /^(\*|_).*([\s\S]*)\1$/m;
    var emphSyntax = '*';
    var Emph$1 = /** @class */ (function (_super) {
        __extends$1(Emph, _super);
        function Emph() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Emph.prototype, "name", {
            get: function () {
                return 'emph';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Emph.prototype, "schema", {
            get: function () {
                return {
                    toDOM: function () {
                        return ['span', { class: clsWithMdPrefix('emph') }, 0];
                    },
                };
            },
            enumerable: false,
            configurable: true
        });
        Emph.prototype.italic = function () {
            return toggleMark(reEmph, emphSyntax);
        };
        Emph.prototype.commands = function () {
            return { italic: this.italic() };
        };
        Emph.prototype.keymaps = function () {
            var italicCommand = this.italic()();
            return { 'Mod-i': italicCommand, 'Mod-I': italicCommand };
        };
        return Emph;
    }(Mark));

    var reCode = /^(`).*([\s\S]*)\1$/m;
    var codeSyntax = '`';
    var Code$1 = /** @class */ (function (_super) {
        __extends$1(Code, _super);
        function Code() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Code.prototype, "name", {
            get: function () {
                return 'code';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Code.prototype, "schema", {
            get: function () {
                return {
                    attrs: {
                        start: { default: false },
                        end: { default: false },
                        marked: { default: false },
                    },
                    toDOM: function (mark) {
                        var _a = mark.attrs, start = _a.start, end = _a.end, marked = _a.marked;
                        var classNames = 'code';
                        if (start) {
                            classNames += '|delimiter|start';
                        }
                        if (end) {
                            classNames += '|delimiter|end';
                        }
                        if (marked) {
                            classNames += '|marked-text';
                        }
                        return ['span', { class: clsWithMdPrefix.apply(void 0, classNames.split('|')) }, 0];
                    },
                };
            },
            enumerable: false,
            configurable: true
        });
        Code.prototype.commands = function () {
            return toggleMark(reCode, codeSyntax);
        };
        Code.prototype.keymaps = function () {
            var codeCommand = this.commands()();
            return { 'Shift-Mod-c': codeCommand, 'Shift-Mod-C': codeCommand };
        };
        return Code;
    }(Mark));

    var encoderList = [
        {
            regExp: /\(/g,
            encoded: '%28',
            escaped: '\\(',
        },
        {
            regExp: /\)/g,
            encoded: '%29',
            escaped: '\\)',
        },
        {
            regExp: /\[/g,
            encoded: '%5B',
            escaped: '\\[',
        },
        {
            regExp: /\]/g,
            encoded: '%5D',
            escaped: '\\]',
        },
        {
            regExp: /</g,
            encoded: '%3C',
            escaped: '\\<',
        },
        {
            regExp: />/g,
            encoded: '%3E',
            escaped: '\\>',
        },
        {
            regExp: / /g,
            encoded: '%20',
            escaped: ' ',
        },
    ];
    function escapeMarkdownText(text) {
        return encoderList.reduce(function (result, _a) {
            var regExp = _a.regExp, escaped = _a.escaped;
            return result.replace(regExp, escaped);
        }, text);
    }
    function encodeMarkdownText(text) {
        return encoderList.reduce(function (result, _a) {
            var regExp = _a.regExp, encoded = _a.encoded;
            return result.replace(regExp, encoded);
        }, text);
    }

    var Link$1 = /** @class */ (function (_super) {
        __extends$1(Link, _super);
        function Link() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Link.prototype, "name", {
            get: function () {
                return 'link';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Link.prototype, "schema", {
            get: function () {
                return {
                    attrs: {
                        url: { default: false },
                        desc: { default: false },
                    },
                    toDOM: function (_a) {
                        var attrs = _a.attrs;
                        var url = attrs.url, desc = attrs.desc;
                        var classNames = 'link';
                        if (url) {
                            classNames += '|link-url|marked-text';
                        }
                        if (desc) {
                            classNames += '|link-desc|marked-text';
                        }
                        return ['span', { class: clsWithMdPrefix.apply(void 0, classNames.split('|')) }, 0];
                    },
                };
            },
            enumerable: false,
            configurable: true
        });
        Link.prototype.addLinkOrImage = function (commandType) {
            return function (payload) { return function (_a, dispatch) {
                var selection = _a.selection, tr = _a.tr, schema = _a.schema;
                var _b = resolveSelectionPos(selection), from = _b[0], to = _b[1];
                var _c = payload, linkText = _c.linkText, altText = _c.altText, linkUrl = _c.linkUrl, imageUrl = _c.imageUrl;
                var text = linkText;
                var url = linkUrl;
                var syntax = '';
                if (commandType === 'image') {
                    text = altText;
                    url = imageUrl;
                    syntax = '!';
                }
                text = escapeMarkdownText(text);
                url = encodeMarkdownText(url);
                syntax += "[" + text + "](" + url + ")";
                dispatch(tr.replaceWith(from, to, createTextNode$1(schema, syntax)));
                return true;
            }; };
        };
        Link.prototype.commands = function () {
            return {
                addImage: this.addLinkOrImage('image'),
                addLink: this.addLinkOrImage('link'),
            };
        };
        return Link;
    }(Mark));

    var TaskDelimiter = /** @class */ (function (_super) {
        __extends$1(TaskDelimiter, _super);
        function TaskDelimiter() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(TaskDelimiter.prototype, "name", {
            get: function () {
                return 'taskDelimiter';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TaskDelimiter.prototype, "schema", {
            get: function () {
                return {
                    toDOM: function () {
                        return ['span', { class: clsWithMdPrefix('delimiter', 'list-item') }, 0];
                    },
                };
            },
            enumerable: false,
            configurable: true
        });
        return TaskDelimiter;
    }(Mark));
    var Delimiter = /** @class */ (function (_super) {
        __extends$1(Delimiter, _super);
        function Delimiter() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Delimiter.prototype, "name", {
            get: function () {
                return 'delimiter';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Delimiter.prototype, "schema", {
            get: function () {
                return {
                    toDOM: function () {
                        return ['span', { class: clsWithMdPrefix('delimiter') }, 0];
                    },
                };
            },
            enumerable: false,
            configurable: true
        });
        return Delimiter;
    }(Mark));
    var Meta = /** @class */ (function (_super) {
        __extends$1(Meta, _super);
        function Meta() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Meta.prototype, "name", {
            get: function () {
                return 'meta';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Meta.prototype, "schema", {
            get: function () {
                return {
                    toDOM: function () {
                        return ['span', { class: clsWithMdPrefix('meta') }, 0];
                    },
                };
            },
            enumerable: false,
            configurable: true
        });
        return Meta;
    }(Mark));
    var MarkedText = /** @class */ (function (_super) {
        __extends$1(MarkedText, _super);
        function MarkedText() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(MarkedText.prototype, "name", {
            get: function () {
                return 'markedText';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MarkedText.prototype, "schema", {
            get: function () {
                return {
                    toDOM: function () {
                        return ['span', { class: clsWithMdPrefix('marked-text') }, 0];
                    },
                };
            },
            enumerable: false,
            configurable: true
        });
        return MarkedText;
    }(Mark));
    var TableCell = /** @class */ (function (_super) {
        __extends$1(TableCell, _super);
        function TableCell() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(TableCell.prototype, "name", {
            get: function () {
                return 'tableCell';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TableCell.prototype, "schema", {
            get: function () {
                return {
                    toDOM: function () {
                        return ['span', { class: clsWithMdPrefix('table-cell') }, 0];
                    },
                };
            },
            enumerable: false,
            configurable: true
        });
        return TableCell;
    }(Mark));

    var Html = /** @class */ (function (_super) {
        __extends$1(Html, _super);
        function Html() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Html.prototype, "name", {
            get: function () {
                return 'html';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Html.prototype, "schema", {
            get: function () {
                return {
                    toDOM: function () {
                        return ['span', { class: clsWithMdPrefix('html') }, 0];
                    },
                };
            },
            enumerable: false,
            configurable: true
        });
        return Html;
    }(Mark));

    var CustomBlock$1 = /** @class */ (function (_super) {
        __extends$1(CustomBlock, _super);
        function CustomBlock() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(CustomBlock.prototype, "name", {
            get: function () {
                return 'customBlock';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CustomBlock.prototype, "schema", {
            get: function () {
                return {
                    toDOM: function () {
                        return ['span', { class: clsWithMdPrefix('custom-block') }, 0];
                    },
                };
            },
            enumerable: false,
            configurable: true
        });
        return CustomBlock;
    }(Mark));

    var reTaskMarkerKey = /x|backspace/i;
    var reTaskMarker = /^\[(\s*)(x?)(\s*)\](?:\s+)/i;
    function smartTask(_a) {
        var schema = _a.schema, toastMark = _a.toastMark;
        return new Plugin({
            props: {
                handleDOMEvents: {
                    keyup: function (view, ev) {
                        var _a = view.state, doc = _a.doc, tr = _a.tr, selection = _a.selection;
                        if (selection.empty && reTaskMarkerKey.test(ev.key)) {
                            var _b = getRangeInfo(selection), startIndex = _b.startIndex, startFromOffset = _b.startFromOffset, from = _b.from;
                            // should add `1` to line for the markdown parser
                            // because markdown parser has `1`(not zero) as the start number
                            var mdPos = [startIndex + 1, from - startFromOffset + 1];
                            var mdNode = toastMark.findNodeAtPosition(mdPos);
                            var paraNode = findClosestNode(mdNode, function (node) { var _a; return node.type === 'paragraph' && ((_a = node.parent) === null || _a === void 0 ? void 0 : _a.type) === 'item'; });
                            if (paraNode && paraNode.firstChild) {
                                var firstChild = paraNode.firstChild;
                                var matched = firstChild.literal.match(reTaskMarker);
                                if (matched) {
                                    var startMdPos = firstChild.sourcepos[0];
                                    var startSpaces = matched[1], stateChar = matched[2], lastSpaces = matched[3];
                                    var spaces = startSpaces.length + lastSpaces.length;
                                    var startOffset = getNodeContentOffsetRange(doc, startMdPos[0] - 1).startOffset;
                                    var startPos = startMdPos[1] + startOffset;
                                    if (stateChar) {
                                        var addedPos = spaces ? spaces + 1 : 0;
                                        tr.replaceWith(startPos, addedPos + startPos, schema.text(stateChar));
                                        view.dispatch(tr);
                                    }
                                    else if (!spaces) {
                                        tr.insertText(' ', startPos);
                                        view.dispatch(tr);
                                    }
                                }
                            }
                        }
                        return false;
                    },
                },
            },
        });
    }

    var EVENT_TYPE = 'cut';
    var MdEditor = /** @class */ (function (_super) {
        __extends$1(MdEditor, _super);
        function MdEditor(eventEmitter, options) {
            var _this = _super.call(this, eventEmitter) || this;
            var toastMark = options.toastMark, _a = options.useCommandShortcut, useCommandShortcut = _a === void 0 ? true : _a, _b = options.mdPlugins, mdPlugins = _b === void 0 ? [] : _b;
            _this.editorType = 'markdown';
            _this.el.classList.add('md-mode');
            _this.toastMark = toastMark;
            _this.extraPlugins = mdPlugins;
            _this.specs = _this.createSpecs();
            _this.schema = _this.createSchema();
            _this.context = _this.createContext();
            _this.keymaps = _this.createKeymaps(useCommandShortcut);
            _this.view = _this.createView();
            _this.commands = _this.createCommands();
            _this.specs.setContext(__assign$1(__assign$1({}, _this.context), { view: _this.view }));
            _this.createClipboard();
            _this.eventEmitter.listen('changePreviewTabWrite', function () { return _this.toggleActive(true); });
            _this.eventEmitter.listen('changePreviewTabPreview', function () { return _this.toggleActive(false); });
            _this.initEvent();
            return _this;
        }
        MdEditor.prototype.toggleActive = function (active) {
            toggleClass(this.el, 'active', active);
            if (active) {
                this.focus();
            }
            else {
                this.blur();
            }
        };
        MdEditor.prototype.createClipboard = function () {
            var _this = this;
            this.clipboard = document.createElement('textarea');
            this.clipboard.className = cls('pseudo-clipboard');
            this.clipboard.addEventListener('paste', function (ev) {
                var clipboardData = ev.clipboardData || window.clipboardData;
                var items = clipboardData && clipboardData.items;
                if (items) {
                    var imageBlob = pasteImageOnly(items);
                    if (imageBlob) {
                        ev.preventDefault();
                        emitImageBlobHook(_this.eventEmitter, imageBlob, ev.type);
                    }
                }
            });
            // process the pasted data in input event for IE11
            this.clipboard.addEventListener('input', function (ev) {
                var text = ev.target.value;
                _this.replaceSelection(text);
                ev.preventDefault();
                ev.target.value = '';
            });
            this.el.insertBefore(this.clipboard, this.view.dom);
        };
        MdEditor.prototype.createContext = function () {
            return {
                toastMark: this.toastMark,
                schema: this.schema,
                eventEmitter: this.eventEmitter,
            };
        };
        MdEditor.prototype.createSpecs = function () {
            return new SpecManager([
                new Doc$1(),
                new Paragraph$1(),
                new Widget(),
                new Text$1(),
                new Heading$1(),
                new BlockQuote$1(),
                new CodeBlock$1(),
                new CustomBlock$1(),
                new Table$1(),
                new TableCell(),
                new ThematicBreak$1(),
                new ListItem$1(),
                new Strong$1(),
                new Strike$1(),
                new Emph$1(),
                new Code$1(),
                new Link$1(),
                new Delimiter(),
                new TaskDelimiter(),
                new MarkedText(),
                new Meta(),
                new Html(),
            ]);
        };
        MdEditor.prototype.createPlugins = function () {
            return this.defaultPlugins.concat(__spreadArray$1([
                syntaxHighlight(this.context),
                previewHighlight(this.context),
                smartTask(this.context)
            ], this.createPluginProps()));
        };
        MdEditor.prototype.createView = function () {
            var _this = this;
            return new EditorView(this.el, {
                state: this.createState(),
                dispatchTransaction: function (tr) {
                    _this.updateMarkdown(tr);
                    var state = _this.view.state.applyTransaction(tr).state;
                    _this.view.updateState(state);
                    _this.emitChangeEvent(tr);
                },
                handleKeyDown: function (_, ev) {
                    if ((ev.metaKey || ev.ctrlKey) && ev.key.toUpperCase() === 'V') {
                        _this.clipboard.focus();
                    }
                    _this.eventEmitter.emit('keydown', _this.editorType, ev);
                    return false;
                },
                handleDOMEvents: {
                    copy: function (_, ev) { return _this.captureCopy(ev); },
                    cut: function (_, ev) { return _this.captureCopy(ev, EVENT_TYPE); },
                    scroll: function () {
                        _this.eventEmitter.emit('scroll', 'editor');
                        return true;
                    },
                    keyup: function (_, ev) {
                        _this.eventEmitter.emit('keyup', _this.editorType, ev);
                        return false;
                    },
                },
                nodeViews: {
                    widget: widgetNodeView,
                },
            });
        };
        MdEditor.prototype.createCommands = function () {
            return this.specs.commands(this.view);
        };
        MdEditor.prototype.captureCopy = function (ev, type) {
            ev.preventDefault();
            var _a = this.view.state, selection = _a.selection, tr = _a.tr;
            if (selection.empty) {
                return true;
            }
            var text = this.getChanged(selection.content());
            if (ev.clipboardData) {
                ev.clipboardData.setData('text/plain', text);
            }
            else {
                window.clipboardData.setData('Text', text);
            }
            if (type === EVENT_TYPE) {
                this.view.dispatch(tr.deleteSelection().scrollIntoView().setMeta('uiEvent', EVENT_TYPE));
            }
            return true;
        };
        MdEditor.prototype.updateMarkdown = function (tr) {
            var _this = this;
            if (tr.docChanged) {
                tr.steps.forEach(function (step, index) {
                    if (step.slice && !(step instanceof ReplaceAroundStep)) {
                        var doc = tr.docs[index];
                        var _a = [step.from, step.to], from = _a[0], to = _a[1];
                        var _b = getEditorToMdPos(doc, from, to), startPos = _b[0], endPos = _b[1];
                        var changed = _this.getChanged(step.slice);
                        if (startPos[0] === endPos[0] && startPos[1] === endPos[1] && changed === '') {
                            changed = '\n';
                        }
                        var editResult = _this.toastMark.editMarkdown(startPos, endPos, changed);
                        _this.eventEmitter.emit('updatePreview', editResult);
                        tr.setMeta('editResult', editResult).scrollIntoView();
                    }
                });
            }
        };
        MdEditor.prototype.getChanged = function (slice) {
            var changed = '';
            var from = 0;
            var to = slice.content.size;
            slice.content.nodesBetween(from, to, function (node, pos) {
                if (node.isText) {
                    changed += node.text.slice(Math.max(from, pos) - pos, to - pos);
                }
                else if (node.isBlock && pos > 0) {
                    changed += '\n';
                }
            });
            return changed;
        };
        MdEditor.prototype.setSelection = function (start, end) {
            if (end === void 0) { end = start; }
            var tr = this.view.state.tr;
            var _a = getMdToEditorPos(tr.doc, start, end), from = _a[0], to = _a[1];
            this.view.dispatch(tr.setSelection(createTextSelection(tr, from, to)).scrollIntoView());
        };
        MdEditor.prototype.replaceSelection = function (text, start, end) {
            var newTr;
            var _a = this.view.state, tr = _a.tr, schema = _a.schema, doc = _a.doc;
            var lineTexts = text.split('\n');
            var nodes = lineTexts.map(function (lineText) {
                return createParagraph(schema, createNodesWithWidget(lineText, schema));
            });
            var slice = new Slice(Fragment.from(nodes), 1, 1);
            this.focus();
            if (start && end) {
                var _b = getMdToEditorPos(doc, start, end), from = _b[0], to = _b[1];
                newTr = tr.replaceRange(from, to, slice);
            }
            else {
                newTr = tr.replaceSelection(slice);
            }
            this.view.dispatch(newTr.scrollIntoView());
        };
        MdEditor.prototype.deleteSelection = function (start, end) {
            var newTr;
            var _a = this.view.state, tr = _a.tr, doc = _a.doc;
            if (start && end) {
                var _b = getMdToEditorPos(doc, start, end), from = _b[0], to = _b[1];
                newTr = tr.deleteRange(from, to);
            }
            else {
                newTr = tr.deleteSelection();
            }
            this.view.dispatch(newTr.scrollIntoView());
        };
        MdEditor.prototype.getSelectedText = function (start, end) {
            var _a = this.view.state, doc = _a.doc, selection = _a.selection;
            var from = selection.from, to = selection.to;
            if (start && end) {
                var pos = getMdToEditorPos(doc, start, end);
                from = pos[0];
                to = pos[1];
            }
            return doc.textBetween(from, to, '\n');
        };
        MdEditor.prototype.getSelection = function () {
            var _a = this.view.state.selection, from = _a.from, to = _a.to;
            return getEditorToMdPos(this.view.state.tr.doc, from, to);
        };
        MdEditor.prototype.setMarkdown = function (markdown, cursorToEnd) {
            if (cursorToEnd === void 0) { cursorToEnd = true; }
            var lineTexts = markdown.split('\n');
            var _a = this.view.state, tr = _a.tr, doc = _a.doc, schema = _a.schema;
            var nodes = lineTexts.map(function (lineText) {
                return createParagraph(schema, createNodesWithWidget(lineText, schema));
            });
            this.view.dispatch(tr.replaceWith(0, doc.content.size, nodes));
            if (cursorToEnd) {
                this.moveCursorToEnd();
            }
        };
        MdEditor.prototype.addWidget = function (node, style, mdPos) {
            var _a = this.view.state, tr = _a.tr, doc = _a.doc, selection = _a.selection;
            var pos = mdPos ? getMdToEditorPos(doc, mdPos, mdPos)[0] : selection.to;
            this.view.dispatch(tr.setMeta('widget', { pos: pos, node: node, style: style }));
        };
        MdEditor.prototype.replaceWithWidget = function (start, end, text) {
            var _a = this.view.state, tr = _a.tr, schema = _a.schema, doc = _a.doc;
            var pos = getMdToEditorPos(doc, start, end);
            var nodes = createNodesWithWidget(text, schema);
            this.view.dispatch(tr.replaceWith(pos[0], pos[1], nodes));
        };
        MdEditor.prototype.getRangeInfoOfNode = function (pos) {
            var _a = this.view.state, doc = _a.doc, selection = _a.selection;
            var mdPos = pos || getEditorToMdPos(doc, selection.from)[0];
            var mdNode = this.toastMark.findNodeAtPosition(mdPos);
            if (mdNode.type === 'text' && mdNode.parent.type !== 'paragraph') {
                mdNode = mdNode.parent;
            }
            // add 1 sync for prosemirror position
            mdNode.sourcepos[1][1] += 1;
            return { range: mdNode.sourcepos, type: mdNode.type };
        };
        MdEditor.prototype.getMarkdown = function () {
            return this.toastMark
                .getLineTexts()
                .map(function (lineText) { return unwrapWidgetSyntax(lineText); })
                .join('\n');
        };
        MdEditor.prototype.getToastMark = function () {
            return this.toastMark;
        };
        return MdEditor;
    }(EditorBase));

    /**
     * @fileoverview Get event collection for specific HTML element
     * @author NHN FE Development Lab <dl_javascript@nhn.com>
     */

    var EVENT_KEY = '_feEventKey';

    /**
     * Get event collection for specific HTML element
     * @param {HTMLElement} element - HTML element
     * @param {string} type - event type
     * @returns {array}
     * @private
     */
    function safeEvent$2(element, type) {
      var events = element[EVENT_KEY];
      var handlers;

      if (!events) {
        events = element[EVENT_KEY] = {};
      }

      handlers = events[type];
      if (!handlers) {
        handlers = events[type] = [];
      }

      return handlers;
    }

    var _safeEvent = safeEvent$2;

    /**
     * @fileoverview Unbind DOM events
     * @author NHN FE Development Lab <dl_javascript@nhn.com>
     */

    var isString$1 = isString_1;
    var forEach$1 = forEach_1;

    var safeEvent$1 = _safeEvent;

    /**
     * Unbind DOM events
     * If a handler function is not passed, remove all events of that type.
     * @param {HTMLElement} element - element to unbind events
     * @param {(string|object)} types - Space splitted events names or eventName:handler object
     * @param {function} [handler] - handler function
     * @memberof module:domEvent
     * @example
     * // Following the example of domEvent#on
     * 
     * // Unbind one event from an element.
     * off(div, 'click', toggle);
     * 
     * // Unbind multiple events with a same handler from multiple elements at once.
     * // Use event names splitted by a space.
     * off(element, 'mouseenter mouseleave', changeColor);
     * 
     * // Unbind multiple events with different handlers from an element at once.
     * // Use an object which of key is an event name and value is a handler function.
     * off(div, {
     *   keydown: highlight,
     *   keyup: dehighlight
     * });
     * 
     * // Unbind events without handlers.
     * off(div, 'drag');
     */
    function off(element, types, handler) {
      if (isString$1(types)) {
        forEach$1(types.split(/\s+/g), function(type) {
          unbindEvent(element, type, handler);
        });

        return;
      }

      forEach$1(types, function(func, type) {
        unbindEvent(element, type, func);
      });
    }

    /**
     * Unbind DOM events
     * If a handler function is not passed, remove all events of that type.
     * @param {HTMLElement} element - element to unbind events
     * @param {string} type - events name
     * @param {function} [handler] - handler function
     * @private
     */
    function unbindEvent(element, type, handler) {
      var events = safeEvent$1(element, type);
      var index;

      if (!handler) {
        forEach$1(events, function(item) {
          removeHandler(element, type, item.wrappedHandler);
        });
        events.splice(0, events.length);
      } else {
        forEach$1(events, function(item, idx) {
          if (handler === item.handler) {
            removeHandler(element, type, item.wrappedHandler);
            index = idx;

            return false;
          }

          return true;
        });
        events.splice(index, 1);
      }
    }

    /**
     * Remove an event handler
     * @param {HTMLElement} element - An element to remove an event
     * @param {string} type - event type
     * @param {function} handler - event handler
     * @private
     */
    function removeHandler(element, type, handler) {
      if ('removeEventListener' in element) {
        element.removeEventListener(type, handler);
      } else if ('detachEvent' in element) {
        element.detachEvent('on' + type, handler);
      }
    }

    var off_1 = off;

    /**
     * @fileoverview Bind DOM events
     * @author NHN FE Development Lab <dl_javascript@nhn.com>
     */

    var isString = isString_1;
    var forEach = forEach_1;

    var safeEvent = _safeEvent;

    /**
     * Bind DOM events.
     * @param {HTMLElement} element - element to bind events
     * @param {(string|object)} types - Space splitted events names or eventName:handler object
     * @param {(function|object)} handler - handler function or context for handler method
     * @param {object} [context] context - context for handler method.
     * @memberof module:domEvent
     * @example
     * var div = document.querySelector('div');
     * 
     * // Bind one event to an element.
     * on(div, 'click', toggle);
     * 
     * // Bind multiple events with a same handler to multiple elements at once.
     * // Use event names splitted by a space.
     * on(div, 'mouseenter mouseleave', changeColor);
     * 
     * // Bind multiple events with different handlers to an element at once.
     * // Use an object which of key is an event name and value is a handler function.
     * on(div, {
     *   keydown: highlight,
     *   keyup: dehighlight
     * });
     * 
     * // Set a context for handler method.
     * var name = 'global';
     * var repository = {name: 'CodeSnippet'};
     * on(div, 'drag', function() {
     *  console.log(this.name);
     * }, repository);
     * // Result when you drag a div: "CodeSnippet"
     */
    function on(element, types, handler, context) {
      if (isString(types)) {
        forEach(types.split(/\s+/g), function(type) {
          bindEvent(element, type, handler, context);
        });

        return;
      }

      forEach(types, function(func, type) {
        bindEvent(element, type, func, handler);
      });
    }

    /**
     * Bind DOM events
     * @param {HTMLElement} element - element to bind events
     * @param {string} type - events name
     * @param {function} handler - handler function or context for handler method
     * @param {object} [context] context - context for handler method.
     * @private
     */
    function bindEvent(element, type, handler, context) {
      /**
         * Event handler
         * @param {Event} e - event object
         */
      function eventHandler(e) {
        handler.call(context || element, e || window.event);
      }

      if ('addEventListener' in element) {
        element.addEventListener(type, eventHandler);
      } else if ('attachEvent' in element) {
        element.attachEvent('on' + type, eventHandler);
      }
      memorizeHandler(element, type, handler, eventHandler);
    }

    /**
     * Memorize DOM event handler for unbinding.
     * @param {HTMLElement} element - element to bind events
     * @param {string} type - events name
     * @param {function} handler - handler function that user passed at on() use
     * @param {function} wrappedHandler - handler function that wrapped by domevent for implementing some features
     * @private
     */
    function memorizeHandler(element, type, handler, wrappedHandler) {
      var events = safeEvent(element, type);
      var existInEvents = false;

      forEach(events, function(obj) {
        if (obj.handler === handler) {
          existInEvents = true;

          return false;
        }

        return true;
      });

      if (!existInEvents) {
        events.push({
          handler: handler,
          wrappedHandler: wrappedHandler
        });
      }
    }

    var on_1 = on;

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __spreadArray(to, from) {
        for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
            to[j] = from[i];
        return to;
    }

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    var encodeCache = {};


    // Create a lookup array where anything but characters in `chars` string
    // and alphanumeric chars is percent-encoded.
    //
    function getEncodeCache(exclude) {
      var i, ch, cache = encodeCache[exclude];
      if (cache) { return cache; }

      cache = encodeCache[exclude] = [];

      for (i = 0; i < 128; i++) {
        ch = String.fromCharCode(i);

        if (/^[0-9a-z]$/i.test(ch)) {
          // always allow unencoded alphanumeric characters
          cache.push(ch);
        } else {
          cache.push('%' + ('0' + i.toString(16).toUpperCase()).slice(-2));
        }
      }

      for (i = 0; i < exclude.length; i++) {
        cache[exclude.charCodeAt(i)] = exclude[i];
      }

      return cache;
    }


    // Encode unsafe characters with percent-encoding, skipping already
    // encoded sequences.
    //
    //  - string       - string to encode
    //  - exclude      - list of characters to ignore (in addition to a-zA-Z0-9)
    //  - keepEscaped  - don't encode '%' in a correct escape sequence (default: true)
    //
    function encode$1(string, exclude, keepEscaped) {
      var i, l, code, nextCode, cache,
          result = '';

      if (typeof exclude !== 'string') {
        // encode(string, keepEscaped)
        keepEscaped  = exclude;
        exclude = encode$1.defaultChars;
      }

      if (typeof keepEscaped === 'undefined') {
        keepEscaped = true;
      }

      cache = getEncodeCache(exclude);

      for (i = 0, l = string.length; i < l; i++) {
        code = string.charCodeAt(i);

        if (keepEscaped && code === 0x25 /* % */ && i + 2 < l) {
          if (/^[0-9a-f]{2}$/i.test(string.slice(i + 1, i + 3))) {
            result += string.slice(i, i + 3);
            i += 2;
            continue;
          }
        }

        if (code < 128) {
          result += cache[code];
          continue;
        }

        if (code >= 0xD800 && code <= 0xDFFF) {
          if (code >= 0xD800 && code <= 0xDBFF && i + 1 < l) {
            nextCode = string.charCodeAt(i + 1);
            if (nextCode >= 0xDC00 && nextCode <= 0xDFFF) {
              result += encodeURIComponent(string[i] + string[i + 1]);
              i++;
              continue;
            }
          }
          result += '%EF%BF%BD';
          continue;
        }

        result += encodeURIComponent(string[i]);
      }

      return result;
    }

    encode$1.defaultChars   = ";/?:@&=+$,-_.!~*'()#";
    encode$1.componentChars = "-_.!~*'()";


    var encode_1 = encode$1;

    var lib = {};

    var decode = {};

    var Aacute$1 = "Á";
    var aacute$1 = "á";
    var Abreve = "Ă";
    var abreve = "ă";
    var ac = "∾";
    var acd = "∿";
    var acE = "∾̳";
    var Acirc$1 = "Â";
    var acirc$1 = "â";
    var acute$1 = "´";
    var Acy = "А";
    var acy = "а";
    var AElig$1 = "Æ";
    var aelig$1 = "æ";
    var af = "⁡";
    var Afr = "𝔄";
    var afr = "𝔞";
    var Agrave$1 = "À";
    var agrave$1 = "à";
    var alefsym = "ℵ";
    var aleph = "ℵ";
    var Alpha = "Α";
    var alpha = "α";
    var Amacr = "Ā";
    var amacr = "ā";
    var amalg = "⨿";
    var amp$2 = "&";
    var AMP$1 = "&";
    var andand = "⩕";
    var And = "⩓";
    var and = "∧";
    var andd = "⩜";
    var andslope = "⩘";
    var andv = "⩚";
    var ang = "∠";
    var ange = "⦤";
    var angle = "∠";
    var angmsdaa = "⦨";
    var angmsdab = "⦩";
    var angmsdac = "⦪";
    var angmsdad = "⦫";
    var angmsdae = "⦬";
    var angmsdaf = "⦭";
    var angmsdag = "⦮";
    var angmsdah = "⦯";
    var angmsd = "∡";
    var angrt = "∟";
    var angrtvb = "⊾";
    var angrtvbd = "⦝";
    var angsph = "∢";
    var angst = "Å";
    var angzarr = "⍼";
    var Aogon = "Ą";
    var aogon = "ą";
    var Aopf = "𝔸";
    var aopf = "𝕒";
    var apacir = "⩯";
    var ap = "≈";
    var apE = "⩰";
    var ape = "≊";
    var apid = "≋";
    var apos$1 = "'";
    var ApplyFunction = "⁡";
    var approx = "≈";
    var approxeq = "≊";
    var Aring$1 = "Å";
    var aring$1 = "å";
    var Ascr = "𝒜";
    var ascr = "𝒶";
    var Assign = "≔";
    var ast = "*";
    var asymp = "≈";
    var asympeq = "≍";
    var Atilde$1 = "Ã";
    var atilde$1 = "ã";
    var Auml$1 = "Ä";
    var auml$1 = "ä";
    var awconint = "∳";
    var awint = "⨑";
    var backcong = "≌";
    var backepsilon = "϶";
    var backprime = "‵";
    var backsim = "∽";
    var backsimeq = "⋍";
    var Backslash = "∖";
    var Barv = "⫧";
    var barvee = "⊽";
    var barwed = "⌅";
    var Barwed = "⌆";
    var barwedge = "⌅";
    var bbrk = "⎵";
    var bbrktbrk = "⎶";
    var bcong = "≌";
    var Bcy = "Б";
    var bcy = "б";
    var bdquo = "„";
    var becaus = "∵";
    var because = "∵";
    var Because = "∵";
    var bemptyv = "⦰";
    var bepsi = "϶";
    var bernou = "ℬ";
    var Bernoullis = "ℬ";
    var Beta = "Β";
    var beta = "β";
    var beth = "ℶ";
    var between = "≬";
    var Bfr = "𝔅";
    var bfr = "𝔟";
    var bigcap = "⋂";
    var bigcirc = "◯";
    var bigcup = "⋃";
    var bigodot = "⨀";
    var bigoplus = "⨁";
    var bigotimes = "⨂";
    var bigsqcup = "⨆";
    var bigstar = "★";
    var bigtriangledown = "▽";
    var bigtriangleup = "△";
    var biguplus = "⨄";
    var bigvee = "⋁";
    var bigwedge = "⋀";
    var bkarow = "⤍";
    var blacklozenge = "⧫";
    var blacksquare = "▪";
    var blacktriangle = "▴";
    var blacktriangledown = "▾";
    var blacktriangleleft = "◂";
    var blacktriangleright = "▸";
    var blank = "␣";
    var blk12 = "▒";
    var blk14 = "░";
    var blk34 = "▓";
    var block = "█";
    var bne = "=⃥";
    var bnequiv = "≡⃥";
    var bNot = "⫭";
    var bnot = "⌐";
    var Bopf = "𝔹";
    var bopf = "𝕓";
    var bot = "⊥";
    var bottom = "⊥";
    var bowtie = "⋈";
    var boxbox = "⧉";
    var boxdl = "┐";
    var boxdL = "╕";
    var boxDl = "╖";
    var boxDL = "╗";
    var boxdr = "┌";
    var boxdR = "╒";
    var boxDr = "╓";
    var boxDR = "╔";
    var boxh = "─";
    var boxH = "═";
    var boxhd = "┬";
    var boxHd = "╤";
    var boxhD = "╥";
    var boxHD = "╦";
    var boxhu = "┴";
    var boxHu = "╧";
    var boxhU = "╨";
    var boxHU = "╩";
    var boxminus = "⊟";
    var boxplus = "⊞";
    var boxtimes = "⊠";
    var boxul = "┘";
    var boxuL = "╛";
    var boxUl = "╜";
    var boxUL = "╝";
    var boxur = "└";
    var boxuR = "╘";
    var boxUr = "╙";
    var boxUR = "╚";
    var boxv = "│";
    var boxV = "║";
    var boxvh = "┼";
    var boxvH = "╪";
    var boxVh = "╫";
    var boxVH = "╬";
    var boxvl = "┤";
    var boxvL = "╡";
    var boxVl = "╢";
    var boxVL = "╣";
    var boxvr = "├";
    var boxvR = "╞";
    var boxVr = "╟";
    var boxVR = "╠";
    var bprime = "‵";
    var breve = "˘";
    var Breve = "˘";
    var brvbar$1 = "¦";
    var bscr = "𝒷";
    var Bscr = "ℬ";
    var bsemi = "⁏";
    var bsim = "∽";
    var bsime = "⋍";
    var bsolb = "⧅";
    var bsol = "\\";
    var bsolhsub = "⟈";
    var bull = "•";
    var bullet = "•";
    var bump = "≎";
    var bumpE = "⪮";
    var bumpe = "≏";
    var Bumpeq = "≎";
    var bumpeq = "≏";
    var Cacute = "Ć";
    var cacute = "ć";
    var capand = "⩄";
    var capbrcup = "⩉";
    var capcap = "⩋";
    var cap = "∩";
    var Cap = "⋒";
    var capcup = "⩇";
    var capdot = "⩀";
    var CapitalDifferentialD = "ⅅ";
    var caps = "∩︀";
    var caret = "⁁";
    var caron = "ˇ";
    var Cayleys = "ℭ";
    var ccaps = "⩍";
    var Ccaron = "Č";
    var ccaron = "č";
    var Ccedil$1 = "Ç";
    var ccedil$1 = "ç";
    var Ccirc = "Ĉ";
    var ccirc = "ĉ";
    var Cconint = "∰";
    var ccups = "⩌";
    var ccupssm = "⩐";
    var Cdot = "Ċ";
    var cdot = "ċ";
    var cedil$1 = "¸";
    var Cedilla = "¸";
    var cemptyv = "⦲";
    var cent$1 = "¢";
    var centerdot = "·";
    var CenterDot = "·";
    var cfr = "𝔠";
    var Cfr = "ℭ";
    var CHcy = "Ч";
    var chcy = "ч";
    var check = "✓";
    var checkmark = "✓";
    var Chi = "Χ";
    var chi = "χ";
    var circ = "ˆ";
    var circeq = "≗";
    var circlearrowleft = "↺";
    var circlearrowright = "↻";
    var circledast = "⊛";
    var circledcirc = "⊚";
    var circleddash = "⊝";
    var CircleDot = "⊙";
    var circledR = "®";
    var circledS = "Ⓢ";
    var CircleMinus = "⊖";
    var CirclePlus = "⊕";
    var CircleTimes = "⊗";
    var cir = "○";
    var cirE = "⧃";
    var cire = "≗";
    var cirfnint = "⨐";
    var cirmid = "⫯";
    var cirscir = "⧂";
    var ClockwiseContourIntegral = "∲";
    var CloseCurlyDoubleQuote = "”";
    var CloseCurlyQuote = "’";
    var clubs = "♣";
    var clubsuit = "♣";
    var colon = ":";
    var Colon = "∷";
    var Colone = "⩴";
    var colone = "≔";
    var coloneq = "≔";
    var comma = ",";
    var commat = "@";
    var comp = "∁";
    var compfn = "∘";
    var complement = "∁";
    var complexes = "ℂ";
    var cong = "≅";
    var congdot = "⩭";
    var Congruent = "≡";
    var conint = "∮";
    var Conint = "∯";
    var ContourIntegral = "∮";
    var copf = "𝕔";
    var Copf = "ℂ";
    var coprod = "∐";
    var Coproduct = "∐";
    var copy$1 = "©";
    var COPY$1 = "©";
    var copysr = "℗";
    var CounterClockwiseContourIntegral = "∳";
    var crarr = "↵";
    var cross = "✗";
    var Cross = "⨯";
    var Cscr = "𝒞";
    var cscr = "𝒸";
    var csub = "⫏";
    var csube = "⫑";
    var csup = "⫐";
    var csupe = "⫒";
    var ctdot = "⋯";
    var cudarrl = "⤸";
    var cudarrr = "⤵";
    var cuepr = "⋞";
    var cuesc = "⋟";
    var cularr = "↶";
    var cularrp = "⤽";
    var cupbrcap = "⩈";
    var cupcap = "⩆";
    var CupCap = "≍";
    var cup = "∪";
    var Cup = "⋓";
    var cupcup = "⩊";
    var cupdot = "⊍";
    var cupor = "⩅";
    var cups = "∪︀";
    var curarr = "↷";
    var curarrm = "⤼";
    var curlyeqprec = "⋞";
    var curlyeqsucc = "⋟";
    var curlyvee = "⋎";
    var curlywedge = "⋏";
    var curren$1 = "¤";
    var curvearrowleft = "↶";
    var curvearrowright = "↷";
    var cuvee = "⋎";
    var cuwed = "⋏";
    var cwconint = "∲";
    var cwint = "∱";
    var cylcty = "⌭";
    var dagger = "†";
    var Dagger = "‡";
    var daleth = "ℸ";
    var darr = "↓";
    var Darr = "↡";
    var dArr = "⇓";
    var dash = "‐";
    var Dashv = "⫤";
    var dashv = "⊣";
    var dbkarow = "⤏";
    var dblac = "˝";
    var Dcaron = "Ď";
    var dcaron = "ď";
    var Dcy = "Д";
    var dcy = "д";
    var ddagger = "‡";
    var ddarr = "⇊";
    var DD = "ⅅ";
    var dd = "ⅆ";
    var DDotrahd = "⤑";
    var ddotseq = "⩷";
    var deg$1 = "°";
    var Del = "∇";
    var Delta = "Δ";
    var delta = "δ";
    var demptyv = "⦱";
    var dfisht = "⥿";
    var Dfr = "𝔇";
    var dfr = "𝔡";
    var dHar = "⥥";
    var dharl = "⇃";
    var dharr = "⇂";
    var DiacriticalAcute = "´";
    var DiacriticalDot = "˙";
    var DiacriticalDoubleAcute = "˝";
    var DiacriticalGrave = "`";
    var DiacriticalTilde = "˜";
    var diam = "⋄";
    var diamond = "⋄";
    var Diamond = "⋄";
    var diamondsuit = "♦";
    var diams = "♦";
    var die = "¨";
    var DifferentialD = "ⅆ";
    var digamma = "ϝ";
    var disin = "⋲";
    var div = "÷";
    var divide$1 = "÷";
    var divideontimes = "⋇";
    var divonx = "⋇";
    var DJcy = "Ђ";
    var djcy = "ђ";
    var dlcorn = "⌞";
    var dlcrop = "⌍";
    var dollar = "$";
    var Dopf = "𝔻";
    var dopf = "𝕕";
    var Dot = "¨";
    var dot = "˙";
    var DotDot = "⃜";
    var doteq = "≐";
    var doteqdot = "≑";
    var DotEqual = "≐";
    var dotminus = "∸";
    var dotplus = "∔";
    var dotsquare = "⊡";
    var doublebarwedge = "⌆";
    var DoubleContourIntegral = "∯";
    var DoubleDot = "¨";
    var DoubleDownArrow = "⇓";
    var DoubleLeftArrow = "⇐";
    var DoubleLeftRightArrow = "⇔";
    var DoubleLeftTee = "⫤";
    var DoubleLongLeftArrow = "⟸";
    var DoubleLongLeftRightArrow = "⟺";
    var DoubleLongRightArrow = "⟹";
    var DoubleRightArrow = "⇒";
    var DoubleRightTee = "⊨";
    var DoubleUpArrow = "⇑";
    var DoubleUpDownArrow = "⇕";
    var DoubleVerticalBar = "∥";
    var DownArrowBar = "⤓";
    var downarrow = "↓";
    var DownArrow = "↓";
    var Downarrow = "⇓";
    var DownArrowUpArrow = "⇵";
    var DownBreve = "̑";
    var downdownarrows = "⇊";
    var downharpoonleft = "⇃";
    var downharpoonright = "⇂";
    var DownLeftRightVector = "⥐";
    var DownLeftTeeVector = "⥞";
    var DownLeftVectorBar = "⥖";
    var DownLeftVector = "↽";
    var DownRightTeeVector = "⥟";
    var DownRightVectorBar = "⥗";
    var DownRightVector = "⇁";
    var DownTeeArrow = "↧";
    var DownTee = "⊤";
    var drbkarow = "⤐";
    var drcorn = "⌟";
    var drcrop = "⌌";
    var Dscr = "𝒟";
    var dscr = "𝒹";
    var DScy = "Ѕ";
    var dscy = "ѕ";
    var dsol = "⧶";
    var Dstrok = "Đ";
    var dstrok = "đ";
    var dtdot = "⋱";
    var dtri = "▿";
    var dtrif = "▾";
    var duarr = "⇵";
    var duhar = "⥯";
    var dwangle = "⦦";
    var DZcy = "Џ";
    var dzcy = "џ";
    var dzigrarr = "⟿";
    var Eacute$1 = "É";
    var eacute$1 = "é";
    var easter = "⩮";
    var Ecaron = "Ě";
    var ecaron = "ě";
    var Ecirc$1 = "Ê";
    var ecirc$1 = "ê";
    var ecir = "≖";
    var ecolon = "≕";
    var Ecy = "Э";
    var ecy = "э";
    var eDDot = "⩷";
    var Edot = "Ė";
    var edot = "ė";
    var eDot = "≑";
    var ee = "ⅇ";
    var efDot = "≒";
    var Efr = "𝔈";
    var efr = "𝔢";
    var eg = "⪚";
    var Egrave$1 = "È";
    var egrave$1 = "è";
    var egs = "⪖";
    var egsdot = "⪘";
    var el = "⪙";
    var Element$1 = "∈";
    var elinters = "⏧";
    var ell = "ℓ";
    var els = "⪕";
    var elsdot = "⪗";
    var Emacr = "Ē";
    var emacr = "ē";
    var empty = "∅";
    var emptyset = "∅";
    var EmptySmallSquare = "◻";
    var emptyv = "∅";
    var EmptyVerySmallSquare = "▫";
    var emsp13 = " ";
    var emsp14 = " ";
    var emsp = " ";
    var ENG = "Ŋ";
    var eng = "ŋ";
    var ensp = " ";
    var Eogon = "Ę";
    var eogon = "ę";
    var Eopf = "𝔼";
    var eopf = "𝕖";
    var epar = "⋕";
    var eparsl = "⧣";
    var eplus = "⩱";
    var epsi = "ε";
    var Epsilon = "Ε";
    var epsilon = "ε";
    var epsiv = "ϵ";
    var eqcirc = "≖";
    var eqcolon = "≕";
    var eqsim = "≂";
    var eqslantgtr = "⪖";
    var eqslantless = "⪕";
    var Equal = "⩵";
    var equals = "=";
    var EqualTilde = "≂";
    var equest = "≟";
    var Equilibrium = "⇌";
    var equiv = "≡";
    var equivDD = "⩸";
    var eqvparsl = "⧥";
    var erarr = "⥱";
    var erDot = "≓";
    var escr = "ℯ";
    var Escr = "ℰ";
    var esdot = "≐";
    var Esim = "⩳";
    var esim = "≂";
    var Eta = "Η";
    var eta = "η";
    var ETH$1 = "Ð";
    var eth$1 = "ð";
    var Euml$1 = "Ë";
    var euml$1 = "ë";
    var euro = "€";
    var excl = "!";
    var exist = "∃";
    var Exists = "∃";
    var expectation = "ℰ";
    var exponentiale = "ⅇ";
    var ExponentialE = "ⅇ";
    var fallingdotseq = "≒";
    var Fcy = "Ф";
    var fcy = "ф";
    var female = "♀";
    var ffilig = "ﬃ";
    var fflig = "ﬀ";
    var ffllig = "ﬄ";
    var Ffr = "𝔉";
    var ffr = "𝔣";
    var filig = "ﬁ";
    var FilledSmallSquare = "◼";
    var FilledVerySmallSquare = "▪";
    var fjlig = "fj";
    var flat = "♭";
    var fllig = "ﬂ";
    var fltns = "▱";
    var fnof = "ƒ";
    var Fopf = "𝔽";
    var fopf = "𝕗";
    var forall = "∀";
    var ForAll = "∀";
    var fork = "⋔";
    var forkv = "⫙";
    var Fouriertrf = "ℱ";
    var fpartint = "⨍";
    var frac12$1 = "½";
    var frac13 = "⅓";
    var frac14$1 = "¼";
    var frac15 = "⅕";
    var frac16 = "⅙";
    var frac18 = "⅛";
    var frac23 = "⅔";
    var frac25 = "⅖";
    var frac34$1 = "¾";
    var frac35 = "⅗";
    var frac38 = "⅜";
    var frac45 = "⅘";
    var frac56 = "⅚";
    var frac58 = "⅝";
    var frac78 = "⅞";
    var frasl = "⁄";
    var frown = "⌢";
    var fscr = "𝒻";
    var Fscr = "ℱ";
    var gacute = "ǵ";
    var Gamma = "Γ";
    var gamma = "γ";
    var Gammad = "Ϝ";
    var gammad = "ϝ";
    var gap = "⪆";
    var Gbreve = "Ğ";
    var gbreve = "ğ";
    var Gcedil = "Ģ";
    var Gcirc = "Ĝ";
    var gcirc = "ĝ";
    var Gcy = "Г";
    var gcy = "г";
    var Gdot = "Ġ";
    var gdot = "ġ";
    var ge = "≥";
    var gE = "≧";
    var gEl = "⪌";
    var gel = "⋛";
    var geq = "≥";
    var geqq = "≧";
    var geqslant = "⩾";
    var gescc = "⪩";
    var ges = "⩾";
    var gesdot = "⪀";
    var gesdoto = "⪂";
    var gesdotol = "⪄";
    var gesl = "⋛︀";
    var gesles = "⪔";
    var Gfr = "𝔊";
    var gfr = "𝔤";
    var gg = "≫";
    var Gg = "⋙";
    var ggg = "⋙";
    var gimel = "ℷ";
    var GJcy = "Ѓ";
    var gjcy = "ѓ";
    var gla = "⪥";
    var gl = "≷";
    var glE = "⪒";
    var glj = "⪤";
    var gnap = "⪊";
    var gnapprox = "⪊";
    var gne = "⪈";
    var gnE = "≩";
    var gneq = "⪈";
    var gneqq = "≩";
    var gnsim = "⋧";
    var Gopf = "𝔾";
    var gopf = "𝕘";
    var grave = "`";
    var GreaterEqual = "≥";
    var GreaterEqualLess = "⋛";
    var GreaterFullEqual = "≧";
    var GreaterGreater = "⪢";
    var GreaterLess = "≷";
    var GreaterSlantEqual = "⩾";
    var GreaterTilde = "≳";
    var Gscr = "𝒢";
    var gscr = "ℊ";
    var gsim = "≳";
    var gsime = "⪎";
    var gsiml = "⪐";
    var gtcc = "⪧";
    var gtcir = "⩺";
    var gt$2 = ">";
    var GT$1 = ">";
    var Gt = "≫";
    var gtdot = "⋗";
    var gtlPar = "⦕";
    var gtquest = "⩼";
    var gtrapprox = "⪆";
    var gtrarr = "⥸";
    var gtrdot = "⋗";
    var gtreqless = "⋛";
    var gtreqqless = "⪌";
    var gtrless = "≷";
    var gtrsim = "≳";
    var gvertneqq = "≩︀";
    var gvnE = "≩︀";
    var Hacek = "ˇ";
    var hairsp = " ";
    var half = "½";
    var hamilt = "ℋ";
    var HARDcy = "Ъ";
    var hardcy = "ъ";
    var harrcir = "⥈";
    var harr = "↔";
    var hArr = "⇔";
    var harrw = "↭";
    var Hat = "^";
    var hbar = "ℏ";
    var Hcirc = "Ĥ";
    var hcirc = "ĥ";
    var hearts = "♥";
    var heartsuit = "♥";
    var hellip = "…";
    var hercon = "⊹";
    var hfr = "𝔥";
    var Hfr = "ℌ";
    var HilbertSpace = "ℋ";
    var hksearow = "⤥";
    var hkswarow = "⤦";
    var hoarr = "⇿";
    var homtht = "∻";
    var hookleftarrow = "↩";
    var hookrightarrow = "↪";
    var hopf = "𝕙";
    var Hopf = "ℍ";
    var horbar = "―";
    var HorizontalLine = "─";
    var hscr = "𝒽";
    var Hscr = "ℋ";
    var hslash = "ℏ";
    var Hstrok = "Ħ";
    var hstrok = "ħ";
    var HumpDownHump = "≎";
    var HumpEqual = "≏";
    var hybull = "⁃";
    var hyphen = "‐";
    var Iacute$1 = "Í";
    var iacute$1 = "í";
    var ic = "⁣";
    var Icirc$1 = "Î";
    var icirc$1 = "î";
    var Icy = "И";
    var icy = "и";
    var Idot = "İ";
    var IEcy = "Е";
    var iecy = "е";
    var iexcl$1 = "¡";
    var iff = "⇔";
    var ifr = "𝔦";
    var Ifr = "ℑ";
    var Igrave$1 = "Ì";
    var igrave$1 = "ì";
    var ii = "ⅈ";
    var iiiint = "⨌";
    var iiint = "∭";
    var iinfin = "⧜";
    var iiota = "℩";
    var IJlig = "Ĳ";
    var ijlig = "ĳ";
    var Imacr = "Ī";
    var imacr = "ī";
    var image = "ℑ";
    var ImaginaryI = "ⅈ";
    var imagline = "ℐ";
    var imagpart = "ℑ";
    var imath = "ı";
    var Im = "ℑ";
    var imof = "⊷";
    var imped = "Ƶ";
    var Implies = "⇒";
    var incare = "℅";
    var infin = "∞";
    var infintie = "⧝";
    var inodot = "ı";
    var intcal = "⊺";
    var int = "∫";
    var Int = "∬";
    var integers = "ℤ";
    var Integral = "∫";
    var intercal = "⊺";
    var Intersection = "⋂";
    var intlarhk = "⨗";
    var intprod = "⨼";
    var InvisibleComma = "⁣";
    var InvisibleTimes = "⁢";
    var IOcy = "Ё";
    var iocy = "ё";
    var Iogon = "Į";
    var iogon = "į";
    var Iopf = "𝕀";
    var iopf = "𝕚";
    var Iota = "Ι";
    var iota = "ι";
    var iprod = "⨼";
    var iquest$1 = "¿";
    var iscr = "𝒾";
    var Iscr = "ℐ";
    var isin = "∈";
    var isindot = "⋵";
    var isinE = "⋹";
    var isins = "⋴";
    var isinsv = "⋳";
    var isinv = "∈";
    var it = "⁢";
    var Itilde = "Ĩ";
    var itilde = "ĩ";
    var Iukcy = "І";
    var iukcy = "і";
    var Iuml$1 = "Ï";
    var iuml$1 = "ï";
    var Jcirc = "Ĵ";
    var jcirc = "ĵ";
    var Jcy = "Й";
    var jcy = "й";
    var Jfr = "𝔍";
    var jfr = "𝔧";
    var jmath = "ȷ";
    var Jopf = "𝕁";
    var jopf = "𝕛";
    var Jscr = "𝒥";
    var jscr = "𝒿";
    var Jsercy = "Ј";
    var jsercy = "ј";
    var Jukcy = "Є";
    var jukcy = "є";
    var Kappa = "Κ";
    var kappa = "κ";
    var kappav = "ϰ";
    var Kcedil = "Ķ";
    var kcedil = "ķ";
    var Kcy = "К";
    var kcy = "к";
    var Kfr = "𝔎";
    var kfr = "𝔨";
    var kgreen = "ĸ";
    var KHcy = "Х";
    var khcy = "х";
    var KJcy = "Ќ";
    var kjcy = "ќ";
    var Kopf = "𝕂";
    var kopf = "𝕜";
    var Kscr = "𝒦";
    var kscr = "𝓀";
    var lAarr = "⇚";
    var Lacute = "Ĺ";
    var lacute = "ĺ";
    var laemptyv = "⦴";
    var lagran = "ℒ";
    var Lambda = "Λ";
    var lambda = "λ";
    var lang = "⟨";
    var Lang = "⟪";
    var langd = "⦑";
    var langle = "⟨";
    var lap = "⪅";
    var Laplacetrf = "ℒ";
    var laquo$1 = "«";
    var larrb = "⇤";
    var larrbfs = "⤟";
    var larr = "←";
    var Larr = "↞";
    var lArr = "⇐";
    var larrfs = "⤝";
    var larrhk = "↩";
    var larrlp = "↫";
    var larrpl = "⤹";
    var larrsim = "⥳";
    var larrtl = "↢";
    var latail = "⤙";
    var lAtail = "⤛";
    var lat = "⪫";
    var late = "⪭";
    var lates = "⪭︀";
    var lbarr = "⤌";
    var lBarr = "⤎";
    var lbbrk = "❲";
    var lbrace = "{";
    var lbrack = "[";
    var lbrke = "⦋";
    var lbrksld = "⦏";
    var lbrkslu = "⦍";
    var Lcaron = "Ľ";
    var lcaron = "ľ";
    var Lcedil = "Ļ";
    var lcedil = "ļ";
    var lceil = "⌈";
    var lcub = "{";
    var Lcy = "Л";
    var lcy = "л";
    var ldca = "⤶";
    var ldquo = "“";
    var ldquor = "„";
    var ldrdhar = "⥧";
    var ldrushar = "⥋";
    var ldsh = "↲";
    var le = "≤";
    var lE = "≦";
    var LeftAngleBracket = "⟨";
    var LeftArrowBar = "⇤";
    var leftarrow = "←";
    var LeftArrow = "←";
    var Leftarrow = "⇐";
    var LeftArrowRightArrow = "⇆";
    var leftarrowtail = "↢";
    var LeftCeiling = "⌈";
    var LeftDoubleBracket = "⟦";
    var LeftDownTeeVector = "⥡";
    var LeftDownVectorBar = "⥙";
    var LeftDownVector = "⇃";
    var LeftFloor = "⌊";
    var leftharpoondown = "↽";
    var leftharpoonup = "↼";
    var leftleftarrows = "⇇";
    var leftrightarrow = "↔";
    var LeftRightArrow = "↔";
    var Leftrightarrow = "⇔";
    var leftrightarrows = "⇆";
    var leftrightharpoons = "⇋";
    var leftrightsquigarrow = "↭";
    var LeftRightVector = "⥎";
    var LeftTeeArrow = "↤";
    var LeftTee = "⊣";
    var LeftTeeVector = "⥚";
    var leftthreetimes = "⋋";
    var LeftTriangleBar = "⧏";
    var LeftTriangle = "⊲";
    var LeftTriangleEqual = "⊴";
    var LeftUpDownVector = "⥑";
    var LeftUpTeeVector = "⥠";
    var LeftUpVectorBar = "⥘";
    var LeftUpVector = "↿";
    var LeftVectorBar = "⥒";
    var LeftVector = "↼";
    var lEg = "⪋";
    var leg = "⋚";
    var leq = "≤";
    var leqq = "≦";
    var leqslant = "⩽";
    var lescc = "⪨";
    var les = "⩽";
    var lesdot = "⩿";
    var lesdoto = "⪁";
    var lesdotor = "⪃";
    var lesg = "⋚︀";
    var lesges = "⪓";
    var lessapprox = "⪅";
    var lessdot = "⋖";
    var lesseqgtr = "⋚";
    var lesseqqgtr = "⪋";
    var LessEqualGreater = "⋚";
    var LessFullEqual = "≦";
    var LessGreater = "≶";
    var lessgtr = "≶";
    var LessLess = "⪡";
    var lesssim = "≲";
    var LessSlantEqual = "⩽";
    var LessTilde = "≲";
    var lfisht = "⥼";
    var lfloor = "⌊";
    var Lfr = "𝔏";
    var lfr = "𝔩";
    var lg = "≶";
    var lgE = "⪑";
    var lHar = "⥢";
    var lhard = "↽";
    var lharu = "↼";
    var lharul = "⥪";
    var lhblk = "▄";
    var LJcy = "Љ";
    var ljcy = "љ";
    var llarr = "⇇";
    var ll = "≪";
    var Ll = "⋘";
    var llcorner = "⌞";
    var Lleftarrow = "⇚";
    var llhard = "⥫";
    var lltri = "◺";
    var Lmidot = "Ŀ";
    var lmidot = "ŀ";
    var lmoustache = "⎰";
    var lmoust = "⎰";
    var lnap = "⪉";
    var lnapprox = "⪉";
    var lne = "⪇";
    var lnE = "≨";
    var lneq = "⪇";
    var lneqq = "≨";
    var lnsim = "⋦";
    var loang = "⟬";
    var loarr = "⇽";
    var lobrk = "⟦";
    var longleftarrow = "⟵";
    var LongLeftArrow = "⟵";
    var Longleftarrow = "⟸";
    var longleftrightarrow = "⟷";
    var LongLeftRightArrow = "⟷";
    var Longleftrightarrow = "⟺";
    var longmapsto = "⟼";
    var longrightarrow = "⟶";
    var LongRightArrow = "⟶";
    var Longrightarrow = "⟹";
    var looparrowleft = "↫";
    var looparrowright = "↬";
    var lopar = "⦅";
    var Lopf = "𝕃";
    var lopf = "𝕝";
    var loplus = "⨭";
    var lotimes = "⨴";
    var lowast = "∗";
    var lowbar = "_";
    var LowerLeftArrow = "↙";
    var LowerRightArrow = "↘";
    var loz = "◊";
    var lozenge = "◊";
    var lozf = "⧫";
    var lpar = "(";
    var lparlt = "⦓";
    var lrarr = "⇆";
    var lrcorner = "⌟";
    var lrhar = "⇋";
    var lrhard = "⥭";
    var lrm = "‎";
    var lrtri = "⊿";
    var lsaquo = "‹";
    var lscr = "𝓁";
    var Lscr = "ℒ";
    var lsh = "↰";
    var Lsh = "↰";
    var lsim = "≲";
    var lsime = "⪍";
    var lsimg = "⪏";
    var lsqb = "[";
    var lsquo = "‘";
    var lsquor = "‚";
    var Lstrok = "Ł";
    var lstrok = "ł";
    var ltcc = "⪦";
    var ltcir = "⩹";
    var lt$2 = "<";
    var LT$1 = "<";
    var Lt = "≪";
    var ltdot = "⋖";
    var lthree = "⋋";
    var ltimes = "⋉";
    var ltlarr = "⥶";
    var ltquest = "⩻";
    var ltri = "◃";
    var ltrie = "⊴";
    var ltrif = "◂";
    var ltrPar = "⦖";
    var lurdshar = "⥊";
    var luruhar = "⥦";
    var lvertneqq = "≨︀";
    var lvnE = "≨︀";
    var macr$1 = "¯";
    var male = "♂";
    var malt = "✠";
    var maltese = "✠";
    var map = "↦";
    var mapsto = "↦";
    var mapstodown = "↧";
    var mapstoleft = "↤";
    var mapstoup = "↥";
    var marker = "▮";
    var mcomma = "⨩";
    var Mcy = "М";
    var mcy = "м";
    var mdash = "—";
    var mDDot = "∺";
    var measuredangle = "∡";
    var MediumSpace = " ";
    var Mellintrf = "ℳ";
    var Mfr = "𝔐";
    var mfr = "𝔪";
    var mho = "℧";
    var micro$1 = "µ";
    var midast = "*";
    var midcir = "⫰";
    var mid = "∣";
    var middot$1 = "·";
    var minusb = "⊟";
    var minus = "−";
    var minusd = "∸";
    var minusdu = "⨪";
    var MinusPlus = "∓";
    var mlcp = "⫛";
    var mldr = "…";
    var mnplus = "∓";
    var models = "⊧";
    var Mopf = "𝕄";
    var mopf = "𝕞";
    var mp = "∓";
    var mscr = "𝓂";
    var Mscr = "ℳ";
    var mstpos = "∾";
    var Mu = "Μ";
    var mu = "μ";
    var multimap = "⊸";
    var mumap = "⊸";
    var nabla = "∇";
    var Nacute = "Ń";
    var nacute = "ń";
    var nang = "∠⃒";
    var nap = "≉";
    var napE = "⩰̸";
    var napid = "≋̸";
    var napos = "ŉ";
    var napprox = "≉";
    var natural = "♮";
    var naturals = "ℕ";
    var natur = "♮";
    var nbsp$1 = " ";
    var nbump = "≎̸";
    var nbumpe = "≏̸";
    var ncap = "⩃";
    var Ncaron = "Ň";
    var ncaron = "ň";
    var Ncedil = "Ņ";
    var ncedil = "ņ";
    var ncong = "≇";
    var ncongdot = "⩭̸";
    var ncup = "⩂";
    var Ncy = "Н";
    var ncy = "н";
    var ndash = "–";
    var nearhk = "⤤";
    var nearr = "↗";
    var neArr = "⇗";
    var nearrow = "↗";
    var ne = "≠";
    var nedot = "≐̸";
    var NegativeMediumSpace = "​";
    var NegativeThickSpace = "​";
    var NegativeThinSpace = "​";
    var NegativeVeryThinSpace = "​";
    var nequiv = "≢";
    var nesear = "⤨";
    var nesim = "≂̸";
    var NestedGreaterGreater = "≫";
    var NestedLessLess = "≪";
    var NewLine = "\n";
    var nexist = "∄";
    var nexists = "∄";
    var Nfr = "𝔑";
    var nfr = "𝔫";
    var ngE = "≧̸";
    var nge = "≱";
    var ngeq = "≱";
    var ngeqq = "≧̸";
    var ngeqslant = "⩾̸";
    var nges = "⩾̸";
    var nGg = "⋙̸";
    var ngsim = "≵";
    var nGt = "≫⃒";
    var ngt = "≯";
    var ngtr = "≯";
    var nGtv = "≫̸";
    var nharr = "↮";
    var nhArr = "⇎";
    var nhpar = "⫲";
    var ni = "∋";
    var nis = "⋼";
    var nisd = "⋺";
    var niv = "∋";
    var NJcy = "Њ";
    var njcy = "њ";
    var nlarr = "↚";
    var nlArr = "⇍";
    var nldr = "‥";
    var nlE = "≦̸";
    var nle = "≰";
    var nleftarrow = "↚";
    var nLeftarrow = "⇍";
    var nleftrightarrow = "↮";
    var nLeftrightarrow = "⇎";
    var nleq = "≰";
    var nleqq = "≦̸";
    var nleqslant = "⩽̸";
    var nles = "⩽̸";
    var nless = "≮";
    var nLl = "⋘̸";
    var nlsim = "≴";
    var nLt = "≪⃒";
    var nlt = "≮";
    var nltri = "⋪";
    var nltrie = "⋬";
    var nLtv = "≪̸";
    var nmid = "∤";
    var NoBreak = "⁠";
    var NonBreakingSpace = " ";
    var nopf = "𝕟";
    var Nopf = "ℕ";
    var Not = "⫬";
    var not$1 = "¬";
    var NotCongruent = "≢";
    var NotCupCap = "≭";
    var NotDoubleVerticalBar = "∦";
    var NotElement = "∉";
    var NotEqual = "≠";
    var NotEqualTilde = "≂̸";
    var NotExists = "∄";
    var NotGreater = "≯";
    var NotGreaterEqual = "≱";
    var NotGreaterFullEqual = "≧̸";
    var NotGreaterGreater = "≫̸";
    var NotGreaterLess = "≹";
    var NotGreaterSlantEqual = "⩾̸";
    var NotGreaterTilde = "≵";
    var NotHumpDownHump = "≎̸";
    var NotHumpEqual = "≏̸";
    var notin = "∉";
    var notindot = "⋵̸";
    var notinE = "⋹̸";
    var notinva = "∉";
    var notinvb = "⋷";
    var notinvc = "⋶";
    var NotLeftTriangleBar = "⧏̸";
    var NotLeftTriangle = "⋪";
    var NotLeftTriangleEqual = "⋬";
    var NotLess = "≮";
    var NotLessEqual = "≰";
    var NotLessGreater = "≸";
    var NotLessLess = "≪̸";
    var NotLessSlantEqual = "⩽̸";
    var NotLessTilde = "≴";
    var NotNestedGreaterGreater = "⪢̸";
    var NotNestedLessLess = "⪡̸";
    var notni = "∌";
    var notniva = "∌";
    var notnivb = "⋾";
    var notnivc = "⋽";
    var NotPrecedes = "⊀";
    var NotPrecedesEqual = "⪯̸";
    var NotPrecedesSlantEqual = "⋠";
    var NotReverseElement = "∌";
    var NotRightTriangleBar = "⧐̸";
    var NotRightTriangle = "⋫";
    var NotRightTriangleEqual = "⋭";
    var NotSquareSubset = "⊏̸";
    var NotSquareSubsetEqual = "⋢";
    var NotSquareSuperset = "⊐̸";
    var NotSquareSupersetEqual = "⋣";
    var NotSubset = "⊂⃒";
    var NotSubsetEqual = "⊈";
    var NotSucceeds = "⊁";
    var NotSucceedsEqual = "⪰̸";
    var NotSucceedsSlantEqual = "⋡";
    var NotSucceedsTilde = "≿̸";
    var NotSuperset = "⊃⃒";
    var NotSupersetEqual = "⊉";
    var NotTilde = "≁";
    var NotTildeEqual = "≄";
    var NotTildeFullEqual = "≇";
    var NotTildeTilde = "≉";
    var NotVerticalBar = "∤";
    var nparallel = "∦";
    var npar = "∦";
    var nparsl = "⫽⃥";
    var npart = "∂̸";
    var npolint = "⨔";
    var npr = "⊀";
    var nprcue = "⋠";
    var nprec = "⊀";
    var npreceq = "⪯̸";
    var npre = "⪯̸";
    var nrarrc = "⤳̸";
    var nrarr = "↛";
    var nrArr = "⇏";
    var nrarrw = "↝̸";
    var nrightarrow = "↛";
    var nRightarrow = "⇏";
    var nrtri = "⋫";
    var nrtrie = "⋭";
    var nsc = "⊁";
    var nsccue = "⋡";
    var nsce = "⪰̸";
    var Nscr = "𝒩";
    var nscr = "𝓃";
    var nshortmid = "∤";
    var nshortparallel = "∦";
    var nsim = "≁";
    var nsime = "≄";
    var nsimeq = "≄";
    var nsmid = "∤";
    var nspar = "∦";
    var nsqsube = "⋢";
    var nsqsupe = "⋣";
    var nsub = "⊄";
    var nsubE = "⫅̸";
    var nsube = "⊈";
    var nsubset = "⊂⃒";
    var nsubseteq = "⊈";
    var nsubseteqq = "⫅̸";
    var nsucc = "⊁";
    var nsucceq = "⪰̸";
    var nsup = "⊅";
    var nsupE = "⫆̸";
    var nsupe = "⊉";
    var nsupset = "⊃⃒";
    var nsupseteq = "⊉";
    var nsupseteqq = "⫆̸";
    var ntgl = "≹";
    var Ntilde$1 = "Ñ";
    var ntilde$1 = "ñ";
    var ntlg = "≸";
    var ntriangleleft = "⋪";
    var ntrianglelefteq = "⋬";
    var ntriangleright = "⋫";
    var ntrianglerighteq = "⋭";
    var Nu = "Ν";
    var nu = "ν";
    var num = "#";
    var numero = "№";
    var numsp = " ";
    var nvap = "≍⃒";
    var nvdash = "⊬";
    var nvDash = "⊭";
    var nVdash = "⊮";
    var nVDash = "⊯";
    var nvge = "≥⃒";
    var nvgt = ">⃒";
    var nvHarr = "⤄";
    var nvinfin = "⧞";
    var nvlArr = "⤂";
    var nvle = "≤⃒";
    var nvlt = "<⃒";
    var nvltrie = "⊴⃒";
    var nvrArr = "⤃";
    var nvrtrie = "⊵⃒";
    var nvsim = "∼⃒";
    var nwarhk = "⤣";
    var nwarr = "↖";
    var nwArr = "⇖";
    var nwarrow = "↖";
    var nwnear = "⤧";
    var Oacute$1 = "Ó";
    var oacute$1 = "ó";
    var oast = "⊛";
    var Ocirc$1 = "Ô";
    var ocirc$1 = "ô";
    var ocir = "⊚";
    var Ocy = "О";
    var ocy = "о";
    var odash = "⊝";
    var Odblac = "Ő";
    var odblac = "ő";
    var odiv = "⨸";
    var odot = "⊙";
    var odsold = "⦼";
    var OElig = "Œ";
    var oelig = "œ";
    var ofcir = "⦿";
    var Ofr = "𝔒";
    var ofr = "𝔬";
    var ogon = "˛";
    var Ograve$1 = "Ò";
    var ograve$1 = "ò";
    var ogt = "⧁";
    var ohbar = "⦵";
    var ohm = "Ω";
    var oint = "∮";
    var olarr = "↺";
    var olcir = "⦾";
    var olcross = "⦻";
    var oline = "‾";
    var olt = "⧀";
    var Omacr = "Ō";
    var omacr = "ō";
    var Omega = "Ω";
    var omega = "ω";
    var Omicron = "Ο";
    var omicron = "ο";
    var omid = "⦶";
    var ominus = "⊖";
    var Oopf = "𝕆";
    var oopf = "𝕠";
    var opar = "⦷";
    var OpenCurlyDoubleQuote = "“";
    var OpenCurlyQuote = "‘";
    var operp = "⦹";
    var oplus = "⊕";
    var orarr = "↻";
    var Or = "⩔";
    var or = "∨";
    var ord = "⩝";
    var order = "ℴ";
    var orderof = "ℴ";
    var ordf$1 = "ª";
    var ordm$1 = "º";
    var origof = "⊶";
    var oror = "⩖";
    var orslope = "⩗";
    var orv = "⩛";
    var oS = "Ⓢ";
    var Oscr = "𝒪";
    var oscr = "ℴ";
    var Oslash$1 = "Ø";
    var oslash$1 = "ø";
    var osol = "⊘";
    var Otilde$1 = "Õ";
    var otilde$1 = "õ";
    var otimesas = "⨶";
    var Otimes = "⨷";
    var otimes = "⊗";
    var Ouml$1 = "Ö";
    var ouml$1 = "ö";
    var ovbar = "⌽";
    var OverBar = "‾";
    var OverBrace = "⏞";
    var OverBracket = "⎴";
    var OverParenthesis = "⏜";
    var para$1 = "¶";
    var parallel = "∥";
    var par = "∥";
    var parsim = "⫳";
    var parsl = "⫽";
    var part = "∂";
    var PartialD = "∂";
    var Pcy = "П";
    var pcy = "п";
    var percnt = "%";
    var period = ".";
    var permil = "‰";
    var perp = "⊥";
    var pertenk = "‱";
    var Pfr = "𝔓";
    var pfr = "𝔭";
    var Phi = "Φ";
    var phi = "φ";
    var phiv = "ϕ";
    var phmmat = "ℳ";
    var phone = "☎";
    var Pi = "Π";
    var pi = "π";
    var pitchfork = "⋔";
    var piv = "ϖ";
    var planck = "ℏ";
    var planckh = "ℎ";
    var plankv = "ℏ";
    var plusacir = "⨣";
    var plusb = "⊞";
    var pluscir = "⨢";
    var plus = "+";
    var plusdo = "∔";
    var plusdu = "⨥";
    var pluse = "⩲";
    var PlusMinus = "±";
    var plusmn$1 = "±";
    var plussim = "⨦";
    var plustwo = "⨧";
    var pm = "±";
    var Poincareplane = "ℌ";
    var pointint = "⨕";
    var popf = "𝕡";
    var Popf = "ℙ";
    var pound$1 = "£";
    var prap = "⪷";
    var Pr = "⪻";
    var pr = "≺";
    var prcue = "≼";
    var precapprox = "⪷";
    var prec = "≺";
    var preccurlyeq = "≼";
    var Precedes = "≺";
    var PrecedesEqual = "⪯";
    var PrecedesSlantEqual = "≼";
    var PrecedesTilde = "≾";
    var preceq = "⪯";
    var precnapprox = "⪹";
    var precneqq = "⪵";
    var precnsim = "⋨";
    var pre = "⪯";
    var prE = "⪳";
    var precsim = "≾";
    var prime = "′";
    var Prime = "″";
    var primes = "ℙ";
    var prnap = "⪹";
    var prnE = "⪵";
    var prnsim = "⋨";
    var prod = "∏";
    var Product = "∏";
    var profalar = "⌮";
    var profline = "⌒";
    var profsurf = "⌓";
    var prop = "∝";
    var Proportional = "∝";
    var Proportion = "∷";
    var propto = "∝";
    var prsim = "≾";
    var prurel = "⊰";
    var Pscr = "𝒫";
    var pscr = "𝓅";
    var Psi = "Ψ";
    var psi = "ψ";
    var puncsp = " ";
    var Qfr = "𝔔";
    var qfr = "𝔮";
    var qint = "⨌";
    var qopf = "𝕢";
    var Qopf = "ℚ";
    var qprime = "⁗";
    var Qscr = "𝒬";
    var qscr = "𝓆";
    var quaternions = "ℍ";
    var quatint = "⨖";
    var quest = "?";
    var questeq = "≟";
    var quot$2 = "\"";
    var QUOT$1 = "\"";
    var rAarr = "⇛";
    var race = "∽̱";
    var Racute = "Ŕ";
    var racute = "ŕ";
    var radic = "√";
    var raemptyv = "⦳";
    var rang = "⟩";
    var Rang = "⟫";
    var rangd = "⦒";
    var range = "⦥";
    var rangle = "⟩";
    var raquo$1 = "»";
    var rarrap = "⥵";
    var rarrb = "⇥";
    var rarrbfs = "⤠";
    var rarrc = "⤳";
    var rarr = "→";
    var Rarr = "↠";
    var rArr = "⇒";
    var rarrfs = "⤞";
    var rarrhk = "↪";
    var rarrlp = "↬";
    var rarrpl = "⥅";
    var rarrsim = "⥴";
    var Rarrtl = "⤖";
    var rarrtl = "↣";
    var rarrw = "↝";
    var ratail = "⤚";
    var rAtail = "⤜";
    var ratio = "∶";
    var rationals = "ℚ";
    var rbarr = "⤍";
    var rBarr = "⤏";
    var RBarr = "⤐";
    var rbbrk = "❳";
    var rbrace = "}";
    var rbrack = "]";
    var rbrke = "⦌";
    var rbrksld = "⦎";
    var rbrkslu = "⦐";
    var Rcaron = "Ř";
    var rcaron = "ř";
    var Rcedil = "Ŗ";
    var rcedil = "ŗ";
    var rceil = "⌉";
    var rcub = "}";
    var Rcy = "Р";
    var rcy = "р";
    var rdca = "⤷";
    var rdldhar = "⥩";
    var rdquo = "”";
    var rdquor = "”";
    var rdsh = "↳";
    var real = "ℜ";
    var realine = "ℛ";
    var realpart = "ℜ";
    var reals = "ℝ";
    var Re = "ℜ";
    var rect = "▭";
    var reg$1 = "®";
    var REG$1 = "®";
    var ReverseElement = "∋";
    var ReverseEquilibrium = "⇋";
    var ReverseUpEquilibrium = "⥯";
    var rfisht = "⥽";
    var rfloor = "⌋";
    var rfr = "𝔯";
    var Rfr = "ℜ";
    var rHar = "⥤";
    var rhard = "⇁";
    var rharu = "⇀";
    var rharul = "⥬";
    var Rho = "Ρ";
    var rho = "ρ";
    var rhov = "ϱ";
    var RightAngleBracket = "⟩";
    var RightArrowBar = "⇥";
    var rightarrow = "→";
    var RightArrow = "→";
    var Rightarrow = "⇒";
    var RightArrowLeftArrow = "⇄";
    var rightarrowtail = "↣";
    var RightCeiling = "⌉";
    var RightDoubleBracket = "⟧";
    var RightDownTeeVector = "⥝";
    var RightDownVectorBar = "⥕";
    var RightDownVector = "⇂";
    var RightFloor = "⌋";
    var rightharpoondown = "⇁";
    var rightharpoonup = "⇀";
    var rightleftarrows = "⇄";
    var rightleftharpoons = "⇌";
    var rightrightarrows = "⇉";
    var rightsquigarrow = "↝";
    var RightTeeArrow = "↦";
    var RightTee = "⊢";
    var RightTeeVector = "⥛";
    var rightthreetimes = "⋌";
    var RightTriangleBar = "⧐";
    var RightTriangle = "⊳";
    var RightTriangleEqual = "⊵";
    var RightUpDownVector = "⥏";
    var RightUpTeeVector = "⥜";
    var RightUpVectorBar = "⥔";
    var RightUpVector = "↾";
    var RightVectorBar = "⥓";
    var RightVector = "⇀";
    var ring = "˚";
    var risingdotseq = "≓";
    var rlarr = "⇄";
    var rlhar = "⇌";
    var rlm = "‏";
    var rmoustache = "⎱";
    var rmoust = "⎱";
    var rnmid = "⫮";
    var roang = "⟭";
    var roarr = "⇾";
    var robrk = "⟧";
    var ropar = "⦆";
    var ropf = "𝕣";
    var Ropf = "ℝ";
    var roplus = "⨮";
    var rotimes = "⨵";
    var RoundImplies = "⥰";
    var rpar = ")";
    var rpargt = "⦔";
    var rppolint = "⨒";
    var rrarr = "⇉";
    var Rrightarrow = "⇛";
    var rsaquo = "›";
    var rscr = "𝓇";
    var Rscr = "ℛ";
    var rsh = "↱";
    var Rsh = "↱";
    var rsqb = "]";
    var rsquo = "’";
    var rsquor = "’";
    var rthree = "⋌";
    var rtimes = "⋊";
    var rtri = "▹";
    var rtrie = "⊵";
    var rtrif = "▸";
    var rtriltri = "⧎";
    var RuleDelayed = "⧴";
    var ruluhar = "⥨";
    var rx = "℞";
    var Sacute = "Ś";
    var sacute = "ś";
    var sbquo = "‚";
    var scap = "⪸";
    var Scaron = "Š";
    var scaron = "š";
    var Sc = "⪼";
    var sc = "≻";
    var sccue = "≽";
    var sce = "⪰";
    var scE = "⪴";
    var Scedil = "Ş";
    var scedil = "ş";
    var Scirc = "Ŝ";
    var scirc = "ŝ";
    var scnap = "⪺";
    var scnE = "⪶";
    var scnsim = "⋩";
    var scpolint = "⨓";
    var scsim = "≿";
    var Scy = "С";
    var scy = "с";
    var sdotb = "⊡";
    var sdot = "⋅";
    var sdote = "⩦";
    var searhk = "⤥";
    var searr = "↘";
    var seArr = "⇘";
    var searrow = "↘";
    var sect$1 = "§";
    var semi = ";";
    var seswar = "⤩";
    var setminus = "∖";
    var setmn = "∖";
    var sext = "✶";
    var Sfr = "𝔖";
    var sfr = "𝔰";
    var sfrown = "⌢";
    var sharp = "♯";
    var SHCHcy = "Щ";
    var shchcy = "щ";
    var SHcy = "Ш";
    var shcy = "ш";
    var ShortDownArrow = "↓";
    var ShortLeftArrow = "←";
    var shortmid = "∣";
    var shortparallel = "∥";
    var ShortRightArrow = "→";
    var ShortUpArrow = "↑";
    var shy$1 = "­";
    var Sigma = "Σ";
    var sigma = "σ";
    var sigmaf = "ς";
    var sigmav = "ς";
    var sim = "∼";
    var simdot = "⩪";
    var sime = "≃";
    var simeq = "≃";
    var simg = "⪞";
    var simgE = "⪠";
    var siml = "⪝";
    var simlE = "⪟";
    var simne = "≆";
    var simplus = "⨤";
    var simrarr = "⥲";
    var slarr = "←";
    var SmallCircle = "∘";
    var smallsetminus = "∖";
    var smashp = "⨳";
    var smeparsl = "⧤";
    var smid = "∣";
    var smile = "⌣";
    var smt = "⪪";
    var smte = "⪬";
    var smtes = "⪬︀";
    var SOFTcy = "Ь";
    var softcy = "ь";
    var solbar = "⌿";
    var solb = "⧄";
    var sol = "/";
    var Sopf = "𝕊";
    var sopf = "𝕤";
    var spades = "♠";
    var spadesuit = "♠";
    var spar = "∥";
    var sqcap = "⊓";
    var sqcaps = "⊓︀";
    var sqcup = "⊔";
    var sqcups = "⊔︀";
    var Sqrt = "√";
    var sqsub = "⊏";
    var sqsube = "⊑";
    var sqsubset = "⊏";
    var sqsubseteq = "⊑";
    var sqsup = "⊐";
    var sqsupe = "⊒";
    var sqsupset = "⊐";
    var sqsupseteq = "⊒";
    var square = "□";
    var Square = "□";
    var SquareIntersection = "⊓";
    var SquareSubset = "⊏";
    var SquareSubsetEqual = "⊑";
    var SquareSuperset = "⊐";
    var SquareSupersetEqual = "⊒";
    var SquareUnion = "⊔";
    var squarf = "▪";
    var squ = "□";
    var squf = "▪";
    var srarr = "→";
    var Sscr = "𝒮";
    var sscr = "𝓈";
    var ssetmn = "∖";
    var ssmile = "⌣";
    var sstarf = "⋆";
    var Star = "⋆";
    var star = "☆";
    var starf = "★";
    var straightepsilon = "ϵ";
    var straightphi = "ϕ";
    var strns = "¯";
    var sub = "⊂";
    var Sub = "⋐";
    var subdot = "⪽";
    var subE = "⫅";
    var sube = "⊆";
    var subedot = "⫃";
    var submult = "⫁";
    var subnE = "⫋";
    var subne = "⊊";
    var subplus = "⪿";
    var subrarr = "⥹";
    var subset = "⊂";
    var Subset = "⋐";
    var subseteq = "⊆";
    var subseteqq = "⫅";
    var SubsetEqual = "⊆";
    var subsetneq = "⊊";
    var subsetneqq = "⫋";
    var subsim = "⫇";
    var subsub = "⫕";
    var subsup = "⫓";
    var succapprox = "⪸";
    var succ = "≻";
    var succcurlyeq = "≽";
    var Succeeds = "≻";
    var SucceedsEqual = "⪰";
    var SucceedsSlantEqual = "≽";
    var SucceedsTilde = "≿";
    var succeq = "⪰";
    var succnapprox = "⪺";
    var succneqq = "⪶";
    var succnsim = "⋩";
    var succsim = "≿";
    var SuchThat = "∋";
    var sum = "∑";
    var Sum = "∑";
    var sung = "♪";
    var sup1$1 = "¹";
    var sup2$1 = "²";
    var sup3$1 = "³";
    var sup = "⊃";
    var Sup = "⋑";
    var supdot = "⪾";
    var supdsub = "⫘";
    var supE = "⫆";
    var supe = "⊇";
    var supedot = "⫄";
    var Superset = "⊃";
    var SupersetEqual = "⊇";
    var suphsol = "⟉";
    var suphsub = "⫗";
    var suplarr = "⥻";
    var supmult = "⫂";
    var supnE = "⫌";
    var supne = "⊋";
    var supplus = "⫀";
    var supset = "⊃";
    var Supset = "⋑";
    var supseteq = "⊇";
    var supseteqq = "⫆";
    var supsetneq = "⊋";
    var supsetneqq = "⫌";
    var supsim = "⫈";
    var supsub = "⫔";
    var supsup = "⫖";
    var swarhk = "⤦";
    var swarr = "↙";
    var swArr = "⇙";
    var swarrow = "↙";
    var swnwar = "⤪";
    var szlig$1 = "ß";
    var Tab = "\t";
    var target = "⌖";
    var Tau = "Τ";
    var tau = "τ";
    var tbrk = "⎴";
    var Tcaron = "Ť";
    var tcaron = "ť";
    var Tcedil = "Ţ";
    var tcedil = "ţ";
    var Tcy = "Т";
    var tcy = "т";
    var tdot = "⃛";
    var telrec = "⌕";
    var Tfr = "𝔗";
    var tfr = "𝔱";
    var there4 = "∴";
    var therefore = "∴";
    var Therefore = "∴";
    var Theta = "Θ";
    var theta = "θ";
    var thetasym = "ϑ";
    var thetav = "ϑ";
    var thickapprox = "≈";
    var thicksim = "∼";
    var ThickSpace = "  ";
    var ThinSpace = " ";
    var thinsp = " ";
    var thkap = "≈";
    var thksim = "∼";
    var THORN$1 = "Þ";
    var thorn$1 = "þ";
    var tilde = "˜";
    var Tilde = "∼";
    var TildeEqual = "≃";
    var TildeFullEqual = "≅";
    var TildeTilde = "≈";
    var timesbar = "⨱";
    var timesb = "⊠";
    var times$1 = "×";
    var timesd = "⨰";
    var tint = "∭";
    var toea = "⤨";
    var topbot = "⌶";
    var topcir = "⫱";
    var top = "⊤";
    var Topf = "𝕋";
    var topf = "𝕥";
    var topfork = "⫚";
    var tosa = "⤩";
    var tprime = "‴";
    var trade = "™";
    var TRADE = "™";
    var triangle = "▵";
    var triangledown = "▿";
    var triangleleft = "◃";
    var trianglelefteq = "⊴";
    var triangleq = "≜";
    var triangleright = "▹";
    var trianglerighteq = "⊵";
    var tridot = "◬";
    var trie = "≜";
    var triminus = "⨺";
    var TripleDot = "⃛";
    var triplus = "⨹";
    var trisb = "⧍";
    var tritime = "⨻";
    var trpezium = "⏢";
    var Tscr = "𝒯";
    var tscr = "𝓉";
    var TScy = "Ц";
    var tscy = "ц";
    var TSHcy = "Ћ";
    var tshcy = "ћ";
    var Tstrok = "Ŧ";
    var tstrok = "ŧ";
    var twixt = "≬";
    var twoheadleftarrow = "↞";
    var twoheadrightarrow = "↠";
    var Uacute$1 = "Ú";
    var uacute$1 = "ú";
    var uarr = "↑";
    var Uarr = "↟";
    var uArr = "⇑";
    var Uarrocir = "⥉";
    var Ubrcy = "Ў";
    var ubrcy = "ў";
    var Ubreve = "Ŭ";
    var ubreve = "ŭ";
    var Ucirc$1 = "Û";
    var ucirc$1 = "û";
    var Ucy = "У";
    var ucy = "у";
    var udarr = "⇅";
    var Udblac = "Ű";
    var udblac = "ű";
    var udhar = "⥮";
    var ufisht = "⥾";
    var Ufr = "𝔘";
    var ufr = "𝔲";
    var Ugrave$1 = "Ù";
    var ugrave$1 = "ù";
    var uHar = "⥣";
    var uharl = "↿";
    var uharr = "↾";
    var uhblk = "▀";
    var ulcorn = "⌜";
    var ulcorner = "⌜";
    var ulcrop = "⌏";
    var ultri = "◸";
    var Umacr = "Ū";
    var umacr = "ū";
    var uml$1 = "¨";
    var UnderBar = "_";
    var UnderBrace = "⏟";
    var UnderBracket = "⎵";
    var UnderParenthesis = "⏝";
    var Union = "⋃";
    var UnionPlus = "⊎";
    var Uogon = "Ų";
    var uogon = "ų";
    var Uopf = "𝕌";
    var uopf = "𝕦";
    var UpArrowBar = "⤒";
    var uparrow = "↑";
    var UpArrow = "↑";
    var Uparrow = "⇑";
    var UpArrowDownArrow = "⇅";
    var updownarrow = "↕";
    var UpDownArrow = "↕";
    var Updownarrow = "⇕";
    var UpEquilibrium = "⥮";
    var upharpoonleft = "↿";
    var upharpoonright = "↾";
    var uplus = "⊎";
    var UpperLeftArrow = "↖";
    var UpperRightArrow = "↗";
    var upsi = "υ";
    var Upsi = "ϒ";
    var upsih = "ϒ";
    var Upsilon = "Υ";
    var upsilon = "υ";
    var UpTeeArrow = "↥";
    var UpTee = "⊥";
    var upuparrows = "⇈";
    var urcorn = "⌝";
    var urcorner = "⌝";
    var urcrop = "⌎";
    var Uring = "Ů";
    var uring = "ů";
    var urtri = "◹";
    var Uscr = "𝒰";
    var uscr = "𝓊";
    var utdot = "⋰";
    var Utilde = "Ũ";
    var utilde = "ũ";
    var utri = "▵";
    var utrif = "▴";
    var uuarr = "⇈";
    var Uuml$1 = "Ü";
    var uuml$1 = "ü";
    var uwangle = "⦧";
    var vangrt = "⦜";
    var varepsilon = "ϵ";
    var varkappa = "ϰ";
    var varnothing = "∅";
    var varphi = "ϕ";
    var varpi = "ϖ";
    var varpropto = "∝";
    var varr = "↕";
    var vArr = "⇕";
    var varrho = "ϱ";
    var varsigma = "ς";
    var varsubsetneq = "⊊︀";
    var varsubsetneqq = "⫋︀";
    var varsupsetneq = "⊋︀";
    var varsupsetneqq = "⫌︀";
    var vartheta = "ϑ";
    var vartriangleleft = "⊲";
    var vartriangleright = "⊳";
    var vBar = "⫨";
    var Vbar = "⫫";
    var vBarv = "⫩";
    var Vcy = "В";
    var vcy = "в";
    var vdash = "⊢";
    var vDash = "⊨";
    var Vdash = "⊩";
    var VDash = "⊫";
    var Vdashl = "⫦";
    var veebar = "⊻";
    var vee = "∨";
    var Vee = "⋁";
    var veeeq = "≚";
    var vellip = "⋮";
    var verbar = "|";
    var Verbar = "‖";
    var vert = "|";
    var Vert = "‖";
    var VerticalBar = "∣";
    var VerticalLine = "|";
    var VerticalSeparator = "❘";
    var VerticalTilde = "≀";
    var VeryThinSpace = " ";
    var Vfr = "𝔙";
    var vfr = "𝔳";
    var vltri = "⊲";
    var vnsub = "⊂⃒";
    var vnsup = "⊃⃒";
    var Vopf = "𝕍";
    var vopf = "𝕧";
    var vprop = "∝";
    var vrtri = "⊳";
    var Vscr = "𝒱";
    var vscr = "𝓋";
    var vsubnE = "⫋︀";
    var vsubne = "⊊︀";
    var vsupnE = "⫌︀";
    var vsupne = "⊋︀";
    var Vvdash = "⊪";
    var vzigzag = "⦚";
    var Wcirc = "Ŵ";
    var wcirc = "ŵ";
    var wedbar = "⩟";
    var wedge = "∧";
    var Wedge = "⋀";
    var wedgeq = "≙";
    var weierp = "℘";
    var Wfr = "𝔚";
    var wfr = "𝔴";
    var Wopf = "𝕎";
    var wopf = "𝕨";
    var wp = "℘";
    var wr = "≀";
    var wreath = "≀";
    var Wscr = "𝒲";
    var wscr = "𝓌";
    var xcap = "⋂";
    var xcirc = "◯";
    var xcup = "⋃";
    var xdtri = "▽";
    var Xfr = "𝔛";
    var xfr = "𝔵";
    var xharr = "⟷";
    var xhArr = "⟺";
    var Xi = "Ξ";
    var xi = "ξ";
    var xlarr = "⟵";
    var xlArr = "⟸";
    var xmap = "⟼";
    var xnis = "⋻";
    var xodot = "⨀";
    var Xopf = "𝕏";
    var xopf = "𝕩";
    var xoplus = "⨁";
    var xotime = "⨂";
    var xrarr = "⟶";
    var xrArr = "⟹";
    var Xscr = "𝒳";
    var xscr = "𝓍";
    var xsqcup = "⨆";
    var xuplus = "⨄";
    var xutri = "△";
    var xvee = "⋁";
    var xwedge = "⋀";
    var Yacute$1 = "Ý";
    var yacute$1 = "ý";
    var YAcy = "Я";
    var yacy = "я";
    var Ycirc = "Ŷ";
    var ycirc = "ŷ";
    var Ycy = "Ы";
    var ycy = "ы";
    var yen$1 = "¥";
    var Yfr = "𝔜";
    var yfr = "𝔶";
    var YIcy = "Ї";
    var yicy = "ї";
    var Yopf = "𝕐";
    var yopf = "𝕪";
    var Yscr = "𝒴";
    var yscr = "𝓎";
    var YUcy = "Ю";
    var yucy = "ю";
    var yuml$1 = "ÿ";
    var Yuml = "Ÿ";
    var Zacute = "Ź";
    var zacute = "ź";
    var Zcaron = "Ž";
    var zcaron = "ž";
    var Zcy = "З";
    var zcy = "з";
    var Zdot = "Ż";
    var zdot = "ż";
    var zeetrf = "ℨ";
    var ZeroWidthSpace = "​";
    var Zeta = "Ζ";
    var zeta = "ζ";
    var zfr = "𝔷";
    var Zfr = "ℨ";
    var ZHcy = "Ж";
    var zhcy = "ж";
    var zigrarr = "⇝";
    var zopf = "𝕫";
    var Zopf = "ℤ";
    var Zscr = "𝒵";
    var zscr = "𝓏";
    var zwj = "‍";
    var zwnj = "‌";
    var require$$1$1 = {
    	Aacute: Aacute$1,
    	aacute: aacute$1,
    	Abreve: Abreve,
    	abreve: abreve,
    	ac: ac,
    	acd: acd,
    	acE: acE,
    	Acirc: Acirc$1,
    	acirc: acirc$1,
    	acute: acute$1,
    	Acy: Acy,
    	acy: acy,
    	AElig: AElig$1,
    	aelig: aelig$1,
    	af: af,
    	Afr: Afr,
    	afr: afr,
    	Agrave: Agrave$1,
    	agrave: agrave$1,
    	alefsym: alefsym,
    	aleph: aleph,
    	Alpha: Alpha,
    	alpha: alpha,
    	Amacr: Amacr,
    	amacr: amacr,
    	amalg: amalg,
    	amp: amp$2,
    	AMP: AMP$1,
    	andand: andand,
    	And: And,
    	and: and,
    	andd: andd,
    	andslope: andslope,
    	andv: andv,
    	ang: ang,
    	ange: ange,
    	angle: angle,
    	angmsdaa: angmsdaa,
    	angmsdab: angmsdab,
    	angmsdac: angmsdac,
    	angmsdad: angmsdad,
    	angmsdae: angmsdae,
    	angmsdaf: angmsdaf,
    	angmsdag: angmsdag,
    	angmsdah: angmsdah,
    	angmsd: angmsd,
    	angrt: angrt,
    	angrtvb: angrtvb,
    	angrtvbd: angrtvbd,
    	angsph: angsph,
    	angst: angst,
    	angzarr: angzarr,
    	Aogon: Aogon,
    	aogon: aogon,
    	Aopf: Aopf,
    	aopf: aopf,
    	apacir: apacir,
    	ap: ap,
    	apE: apE,
    	ape: ape,
    	apid: apid,
    	apos: apos$1,
    	ApplyFunction: ApplyFunction,
    	approx: approx,
    	approxeq: approxeq,
    	Aring: Aring$1,
    	aring: aring$1,
    	Ascr: Ascr,
    	ascr: ascr,
    	Assign: Assign,
    	ast: ast,
    	asymp: asymp,
    	asympeq: asympeq,
    	Atilde: Atilde$1,
    	atilde: atilde$1,
    	Auml: Auml$1,
    	auml: auml$1,
    	awconint: awconint,
    	awint: awint,
    	backcong: backcong,
    	backepsilon: backepsilon,
    	backprime: backprime,
    	backsim: backsim,
    	backsimeq: backsimeq,
    	Backslash: Backslash,
    	Barv: Barv,
    	barvee: barvee,
    	barwed: barwed,
    	Barwed: Barwed,
    	barwedge: barwedge,
    	bbrk: bbrk,
    	bbrktbrk: bbrktbrk,
    	bcong: bcong,
    	Bcy: Bcy,
    	bcy: bcy,
    	bdquo: bdquo,
    	becaus: becaus,
    	because: because,
    	Because: Because,
    	bemptyv: bemptyv,
    	bepsi: bepsi,
    	bernou: bernou,
    	Bernoullis: Bernoullis,
    	Beta: Beta,
    	beta: beta,
    	beth: beth,
    	between: between,
    	Bfr: Bfr,
    	bfr: bfr,
    	bigcap: bigcap,
    	bigcirc: bigcirc,
    	bigcup: bigcup,
    	bigodot: bigodot,
    	bigoplus: bigoplus,
    	bigotimes: bigotimes,
    	bigsqcup: bigsqcup,
    	bigstar: bigstar,
    	bigtriangledown: bigtriangledown,
    	bigtriangleup: bigtriangleup,
    	biguplus: biguplus,
    	bigvee: bigvee,
    	bigwedge: bigwedge,
    	bkarow: bkarow,
    	blacklozenge: blacklozenge,
    	blacksquare: blacksquare,
    	blacktriangle: blacktriangle,
    	blacktriangledown: blacktriangledown,
    	blacktriangleleft: blacktriangleleft,
    	blacktriangleright: blacktriangleright,
    	blank: blank,
    	blk12: blk12,
    	blk14: blk14,
    	blk34: blk34,
    	block: block,
    	bne: bne,
    	bnequiv: bnequiv,
    	bNot: bNot,
    	bnot: bnot,
    	Bopf: Bopf,
    	bopf: bopf,
    	bot: bot,
    	bottom: bottom,
    	bowtie: bowtie,
    	boxbox: boxbox,
    	boxdl: boxdl,
    	boxdL: boxdL,
    	boxDl: boxDl,
    	boxDL: boxDL,
    	boxdr: boxdr,
    	boxdR: boxdR,
    	boxDr: boxDr,
    	boxDR: boxDR,
    	boxh: boxh,
    	boxH: boxH,
    	boxhd: boxhd,
    	boxHd: boxHd,
    	boxhD: boxhD,
    	boxHD: boxHD,
    	boxhu: boxhu,
    	boxHu: boxHu,
    	boxhU: boxhU,
    	boxHU: boxHU,
    	boxminus: boxminus,
    	boxplus: boxplus,
    	boxtimes: boxtimes,
    	boxul: boxul,
    	boxuL: boxuL,
    	boxUl: boxUl,
    	boxUL: boxUL,
    	boxur: boxur,
    	boxuR: boxuR,
    	boxUr: boxUr,
    	boxUR: boxUR,
    	boxv: boxv,
    	boxV: boxV,
    	boxvh: boxvh,
    	boxvH: boxvH,
    	boxVh: boxVh,
    	boxVH: boxVH,
    	boxvl: boxvl,
    	boxvL: boxvL,
    	boxVl: boxVl,
    	boxVL: boxVL,
    	boxvr: boxvr,
    	boxvR: boxvR,
    	boxVr: boxVr,
    	boxVR: boxVR,
    	bprime: bprime,
    	breve: breve,
    	Breve: Breve,
    	brvbar: brvbar$1,
    	bscr: bscr,
    	Bscr: Bscr,
    	bsemi: bsemi,
    	bsim: bsim,
    	bsime: bsime,
    	bsolb: bsolb,
    	bsol: bsol,
    	bsolhsub: bsolhsub,
    	bull: bull,
    	bullet: bullet,
    	bump: bump,
    	bumpE: bumpE,
    	bumpe: bumpe,
    	Bumpeq: Bumpeq,
    	bumpeq: bumpeq,
    	Cacute: Cacute,
    	cacute: cacute,
    	capand: capand,
    	capbrcup: capbrcup,
    	capcap: capcap,
    	cap: cap,
    	Cap: Cap,
    	capcup: capcup,
    	capdot: capdot,
    	CapitalDifferentialD: CapitalDifferentialD,
    	caps: caps,
    	caret: caret,
    	caron: caron,
    	Cayleys: Cayleys,
    	ccaps: ccaps,
    	Ccaron: Ccaron,
    	ccaron: ccaron,
    	Ccedil: Ccedil$1,
    	ccedil: ccedil$1,
    	Ccirc: Ccirc,
    	ccirc: ccirc,
    	Cconint: Cconint,
    	ccups: ccups,
    	ccupssm: ccupssm,
    	Cdot: Cdot,
    	cdot: cdot,
    	cedil: cedil$1,
    	Cedilla: Cedilla,
    	cemptyv: cemptyv,
    	cent: cent$1,
    	centerdot: centerdot,
    	CenterDot: CenterDot,
    	cfr: cfr,
    	Cfr: Cfr,
    	CHcy: CHcy,
    	chcy: chcy,
    	check: check,
    	checkmark: checkmark,
    	Chi: Chi,
    	chi: chi,
    	circ: circ,
    	circeq: circeq,
    	circlearrowleft: circlearrowleft,
    	circlearrowright: circlearrowright,
    	circledast: circledast,
    	circledcirc: circledcirc,
    	circleddash: circleddash,
    	CircleDot: CircleDot,
    	circledR: circledR,
    	circledS: circledS,
    	CircleMinus: CircleMinus,
    	CirclePlus: CirclePlus,
    	CircleTimes: CircleTimes,
    	cir: cir,
    	cirE: cirE,
    	cire: cire,
    	cirfnint: cirfnint,
    	cirmid: cirmid,
    	cirscir: cirscir,
    	ClockwiseContourIntegral: ClockwiseContourIntegral,
    	CloseCurlyDoubleQuote: CloseCurlyDoubleQuote,
    	CloseCurlyQuote: CloseCurlyQuote,
    	clubs: clubs,
    	clubsuit: clubsuit,
    	colon: colon,
    	Colon: Colon,
    	Colone: Colone,
    	colone: colone,
    	coloneq: coloneq,
    	comma: comma,
    	commat: commat,
    	comp: comp,
    	compfn: compfn,
    	complement: complement,
    	complexes: complexes,
    	cong: cong,
    	congdot: congdot,
    	Congruent: Congruent,
    	conint: conint,
    	Conint: Conint,
    	ContourIntegral: ContourIntegral,
    	copf: copf,
    	Copf: Copf,
    	coprod: coprod,
    	Coproduct: Coproduct,
    	copy: copy$1,
    	COPY: COPY$1,
    	copysr: copysr,
    	CounterClockwiseContourIntegral: CounterClockwiseContourIntegral,
    	crarr: crarr,
    	cross: cross,
    	Cross: Cross,
    	Cscr: Cscr,
    	cscr: cscr,
    	csub: csub,
    	csube: csube,
    	csup: csup,
    	csupe: csupe,
    	ctdot: ctdot,
    	cudarrl: cudarrl,
    	cudarrr: cudarrr,
    	cuepr: cuepr,
    	cuesc: cuesc,
    	cularr: cularr,
    	cularrp: cularrp,
    	cupbrcap: cupbrcap,
    	cupcap: cupcap,
    	CupCap: CupCap,
    	cup: cup,
    	Cup: Cup,
    	cupcup: cupcup,
    	cupdot: cupdot,
    	cupor: cupor,
    	cups: cups,
    	curarr: curarr,
    	curarrm: curarrm,
    	curlyeqprec: curlyeqprec,
    	curlyeqsucc: curlyeqsucc,
    	curlyvee: curlyvee,
    	curlywedge: curlywedge,
    	curren: curren$1,
    	curvearrowleft: curvearrowleft,
    	curvearrowright: curvearrowright,
    	cuvee: cuvee,
    	cuwed: cuwed,
    	cwconint: cwconint,
    	cwint: cwint,
    	cylcty: cylcty,
    	dagger: dagger,
    	Dagger: Dagger,
    	daleth: daleth,
    	darr: darr,
    	Darr: Darr,
    	dArr: dArr,
    	dash: dash,
    	Dashv: Dashv,
    	dashv: dashv,
    	dbkarow: dbkarow,
    	dblac: dblac,
    	Dcaron: Dcaron,
    	dcaron: dcaron,
    	Dcy: Dcy,
    	dcy: dcy,
    	ddagger: ddagger,
    	ddarr: ddarr,
    	DD: DD,
    	dd: dd,
    	DDotrahd: DDotrahd,
    	ddotseq: ddotseq,
    	deg: deg$1,
    	Del: Del,
    	Delta: Delta,
    	delta: delta,
    	demptyv: demptyv,
    	dfisht: dfisht,
    	Dfr: Dfr,
    	dfr: dfr,
    	dHar: dHar,
    	dharl: dharl,
    	dharr: dharr,
    	DiacriticalAcute: DiacriticalAcute,
    	DiacriticalDot: DiacriticalDot,
    	DiacriticalDoubleAcute: DiacriticalDoubleAcute,
    	DiacriticalGrave: DiacriticalGrave,
    	DiacriticalTilde: DiacriticalTilde,
    	diam: diam,
    	diamond: diamond,
    	Diamond: Diamond,
    	diamondsuit: diamondsuit,
    	diams: diams,
    	die: die,
    	DifferentialD: DifferentialD,
    	digamma: digamma,
    	disin: disin,
    	div: div,
    	divide: divide$1,
    	divideontimes: divideontimes,
    	divonx: divonx,
    	DJcy: DJcy,
    	djcy: djcy,
    	dlcorn: dlcorn,
    	dlcrop: dlcrop,
    	dollar: dollar,
    	Dopf: Dopf,
    	dopf: dopf,
    	Dot: Dot,
    	dot: dot,
    	DotDot: DotDot,
    	doteq: doteq,
    	doteqdot: doteqdot,
    	DotEqual: DotEqual,
    	dotminus: dotminus,
    	dotplus: dotplus,
    	dotsquare: dotsquare,
    	doublebarwedge: doublebarwedge,
    	DoubleContourIntegral: DoubleContourIntegral,
    	DoubleDot: DoubleDot,
    	DoubleDownArrow: DoubleDownArrow,
    	DoubleLeftArrow: DoubleLeftArrow,
    	DoubleLeftRightArrow: DoubleLeftRightArrow,
    	DoubleLeftTee: DoubleLeftTee,
    	DoubleLongLeftArrow: DoubleLongLeftArrow,
    	DoubleLongLeftRightArrow: DoubleLongLeftRightArrow,
    	DoubleLongRightArrow: DoubleLongRightArrow,
    	DoubleRightArrow: DoubleRightArrow,
    	DoubleRightTee: DoubleRightTee,
    	DoubleUpArrow: DoubleUpArrow,
    	DoubleUpDownArrow: DoubleUpDownArrow,
    	DoubleVerticalBar: DoubleVerticalBar,
    	DownArrowBar: DownArrowBar,
    	downarrow: downarrow,
    	DownArrow: DownArrow,
    	Downarrow: Downarrow,
    	DownArrowUpArrow: DownArrowUpArrow,
    	DownBreve: DownBreve,
    	downdownarrows: downdownarrows,
    	downharpoonleft: downharpoonleft,
    	downharpoonright: downharpoonright,
    	DownLeftRightVector: DownLeftRightVector,
    	DownLeftTeeVector: DownLeftTeeVector,
    	DownLeftVectorBar: DownLeftVectorBar,
    	DownLeftVector: DownLeftVector,
    	DownRightTeeVector: DownRightTeeVector,
    	DownRightVectorBar: DownRightVectorBar,
    	DownRightVector: DownRightVector,
    	DownTeeArrow: DownTeeArrow,
    	DownTee: DownTee,
    	drbkarow: drbkarow,
    	drcorn: drcorn,
    	drcrop: drcrop,
    	Dscr: Dscr,
    	dscr: dscr,
    	DScy: DScy,
    	dscy: dscy,
    	dsol: dsol,
    	Dstrok: Dstrok,
    	dstrok: dstrok,
    	dtdot: dtdot,
    	dtri: dtri,
    	dtrif: dtrif,
    	duarr: duarr,
    	duhar: duhar,
    	dwangle: dwangle,
    	DZcy: DZcy,
    	dzcy: dzcy,
    	dzigrarr: dzigrarr,
    	Eacute: Eacute$1,
    	eacute: eacute$1,
    	easter: easter,
    	Ecaron: Ecaron,
    	ecaron: ecaron,
    	Ecirc: Ecirc$1,
    	ecirc: ecirc$1,
    	ecir: ecir,
    	ecolon: ecolon,
    	Ecy: Ecy,
    	ecy: ecy,
    	eDDot: eDDot,
    	Edot: Edot,
    	edot: edot,
    	eDot: eDot,
    	ee: ee,
    	efDot: efDot,
    	Efr: Efr,
    	efr: efr,
    	eg: eg,
    	Egrave: Egrave$1,
    	egrave: egrave$1,
    	egs: egs,
    	egsdot: egsdot,
    	el: el,
    	Element: Element$1,
    	elinters: elinters,
    	ell: ell,
    	els: els,
    	elsdot: elsdot,
    	Emacr: Emacr,
    	emacr: emacr,
    	empty: empty,
    	emptyset: emptyset,
    	EmptySmallSquare: EmptySmallSquare,
    	emptyv: emptyv,
    	EmptyVerySmallSquare: EmptyVerySmallSquare,
    	emsp13: emsp13,
    	emsp14: emsp14,
    	emsp: emsp,
    	ENG: ENG,
    	eng: eng,
    	ensp: ensp,
    	Eogon: Eogon,
    	eogon: eogon,
    	Eopf: Eopf,
    	eopf: eopf,
    	epar: epar,
    	eparsl: eparsl,
    	eplus: eplus,
    	epsi: epsi,
    	Epsilon: Epsilon,
    	epsilon: epsilon,
    	epsiv: epsiv,
    	eqcirc: eqcirc,
    	eqcolon: eqcolon,
    	eqsim: eqsim,
    	eqslantgtr: eqslantgtr,
    	eqslantless: eqslantless,
    	Equal: Equal,
    	equals: equals,
    	EqualTilde: EqualTilde,
    	equest: equest,
    	Equilibrium: Equilibrium,
    	equiv: equiv,
    	equivDD: equivDD,
    	eqvparsl: eqvparsl,
    	erarr: erarr,
    	erDot: erDot,
    	escr: escr,
    	Escr: Escr,
    	esdot: esdot,
    	Esim: Esim,
    	esim: esim,
    	Eta: Eta,
    	eta: eta,
    	ETH: ETH$1,
    	eth: eth$1,
    	Euml: Euml$1,
    	euml: euml$1,
    	euro: euro,
    	excl: excl,
    	exist: exist,
    	Exists: Exists,
    	expectation: expectation,
    	exponentiale: exponentiale,
    	ExponentialE: ExponentialE,
    	fallingdotseq: fallingdotseq,
    	Fcy: Fcy,
    	fcy: fcy,
    	female: female,
    	ffilig: ffilig,
    	fflig: fflig,
    	ffllig: ffllig,
    	Ffr: Ffr,
    	ffr: ffr,
    	filig: filig,
    	FilledSmallSquare: FilledSmallSquare,
    	FilledVerySmallSquare: FilledVerySmallSquare,
    	fjlig: fjlig,
    	flat: flat,
    	fllig: fllig,
    	fltns: fltns,
    	fnof: fnof,
    	Fopf: Fopf,
    	fopf: fopf,
    	forall: forall,
    	ForAll: ForAll,
    	fork: fork,
    	forkv: forkv,
    	Fouriertrf: Fouriertrf,
    	fpartint: fpartint,
    	frac12: frac12$1,
    	frac13: frac13,
    	frac14: frac14$1,
    	frac15: frac15,
    	frac16: frac16,
    	frac18: frac18,
    	frac23: frac23,
    	frac25: frac25,
    	frac34: frac34$1,
    	frac35: frac35,
    	frac38: frac38,
    	frac45: frac45,
    	frac56: frac56,
    	frac58: frac58,
    	frac78: frac78,
    	frasl: frasl,
    	frown: frown,
    	fscr: fscr,
    	Fscr: Fscr,
    	gacute: gacute,
    	Gamma: Gamma,
    	gamma: gamma,
    	Gammad: Gammad,
    	gammad: gammad,
    	gap: gap,
    	Gbreve: Gbreve,
    	gbreve: gbreve,
    	Gcedil: Gcedil,
    	Gcirc: Gcirc,
    	gcirc: gcirc,
    	Gcy: Gcy,
    	gcy: gcy,
    	Gdot: Gdot,
    	gdot: gdot,
    	ge: ge,
    	gE: gE,
    	gEl: gEl,
    	gel: gel,
    	geq: geq,
    	geqq: geqq,
    	geqslant: geqslant,
    	gescc: gescc,
    	ges: ges,
    	gesdot: gesdot,
    	gesdoto: gesdoto,
    	gesdotol: gesdotol,
    	gesl: gesl,
    	gesles: gesles,
    	Gfr: Gfr,
    	gfr: gfr,
    	gg: gg,
    	Gg: Gg,
    	ggg: ggg,
    	gimel: gimel,
    	GJcy: GJcy,
    	gjcy: gjcy,
    	gla: gla,
    	gl: gl,
    	glE: glE,
    	glj: glj,
    	gnap: gnap,
    	gnapprox: gnapprox,
    	gne: gne,
    	gnE: gnE,
    	gneq: gneq,
    	gneqq: gneqq,
    	gnsim: gnsim,
    	Gopf: Gopf,
    	gopf: gopf,
    	grave: grave,
    	GreaterEqual: GreaterEqual,
    	GreaterEqualLess: GreaterEqualLess,
    	GreaterFullEqual: GreaterFullEqual,
    	GreaterGreater: GreaterGreater,
    	GreaterLess: GreaterLess,
    	GreaterSlantEqual: GreaterSlantEqual,
    	GreaterTilde: GreaterTilde,
    	Gscr: Gscr,
    	gscr: gscr,
    	gsim: gsim,
    	gsime: gsime,
    	gsiml: gsiml,
    	gtcc: gtcc,
    	gtcir: gtcir,
    	gt: gt$2,
    	GT: GT$1,
    	Gt: Gt,
    	gtdot: gtdot,
    	gtlPar: gtlPar,
    	gtquest: gtquest,
    	gtrapprox: gtrapprox,
    	gtrarr: gtrarr,
    	gtrdot: gtrdot,
    	gtreqless: gtreqless,
    	gtreqqless: gtreqqless,
    	gtrless: gtrless,
    	gtrsim: gtrsim,
    	gvertneqq: gvertneqq,
    	gvnE: gvnE,
    	Hacek: Hacek,
    	hairsp: hairsp,
    	half: half,
    	hamilt: hamilt,
    	HARDcy: HARDcy,
    	hardcy: hardcy,
    	harrcir: harrcir,
    	harr: harr,
    	hArr: hArr,
    	harrw: harrw,
    	Hat: Hat,
    	hbar: hbar,
    	Hcirc: Hcirc,
    	hcirc: hcirc,
    	hearts: hearts,
    	heartsuit: heartsuit,
    	hellip: hellip,
    	hercon: hercon,
    	hfr: hfr,
    	Hfr: Hfr,
    	HilbertSpace: HilbertSpace,
    	hksearow: hksearow,
    	hkswarow: hkswarow,
    	hoarr: hoarr,
    	homtht: homtht,
    	hookleftarrow: hookleftarrow,
    	hookrightarrow: hookrightarrow,
    	hopf: hopf,
    	Hopf: Hopf,
    	horbar: horbar,
    	HorizontalLine: HorizontalLine,
    	hscr: hscr,
    	Hscr: Hscr,
    	hslash: hslash,
    	Hstrok: Hstrok,
    	hstrok: hstrok,
    	HumpDownHump: HumpDownHump,
    	HumpEqual: HumpEqual,
    	hybull: hybull,
    	hyphen: hyphen,
    	Iacute: Iacute$1,
    	iacute: iacute$1,
    	ic: ic,
    	Icirc: Icirc$1,
    	icirc: icirc$1,
    	Icy: Icy,
    	icy: icy,
    	Idot: Idot,
    	IEcy: IEcy,
    	iecy: iecy,
    	iexcl: iexcl$1,
    	iff: iff,
    	ifr: ifr,
    	Ifr: Ifr,
    	Igrave: Igrave$1,
    	igrave: igrave$1,
    	ii: ii,
    	iiiint: iiiint,
    	iiint: iiint,
    	iinfin: iinfin,
    	iiota: iiota,
    	IJlig: IJlig,
    	ijlig: ijlig,
    	Imacr: Imacr,
    	imacr: imacr,
    	image: image,
    	ImaginaryI: ImaginaryI,
    	imagline: imagline,
    	imagpart: imagpart,
    	imath: imath,
    	Im: Im,
    	imof: imof,
    	imped: imped,
    	Implies: Implies,
    	incare: incare,
    	"in": "∈",
    	infin: infin,
    	infintie: infintie,
    	inodot: inodot,
    	intcal: intcal,
    	int: int,
    	Int: Int,
    	integers: integers,
    	Integral: Integral,
    	intercal: intercal,
    	Intersection: Intersection,
    	intlarhk: intlarhk,
    	intprod: intprod,
    	InvisibleComma: InvisibleComma,
    	InvisibleTimes: InvisibleTimes,
    	IOcy: IOcy,
    	iocy: iocy,
    	Iogon: Iogon,
    	iogon: iogon,
    	Iopf: Iopf,
    	iopf: iopf,
    	Iota: Iota,
    	iota: iota,
    	iprod: iprod,
    	iquest: iquest$1,
    	iscr: iscr,
    	Iscr: Iscr,
    	isin: isin,
    	isindot: isindot,
    	isinE: isinE,
    	isins: isins,
    	isinsv: isinsv,
    	isinv: isinv,
    	it: it,
    	Itilde: Itilde,
    	itilde: itilde,
    	Iukcy: Iukcy,
    	iukcy: iukcy,
    	Iuml: Iuml$1,
    	iuml: iuml$1,
    	Jcirc: Jcirc,
    	jcirc: jcirc,
    	Jcy: Jcy,
    	jcy: jcy,
    	Jfr: Jfr,
    	jfr: jfr,
    	jmath: jmath,
    	Jopf: Jopf,
    	jopf: jopf,
    	Jscr: Jscr,
    	jscr: jscr,
    	Jsercy: Jsercy,
    	jsercy: jsercy,
    	Jukcy: Jukcy,
    	jukcy: jukcy,
    	Kappa: Kappa,
    	kappa: kappa,
    	kappav: kappav,
    	Kcedil: Kcedil,
    	kcedil: kcedil,
    	Kcy: Kcy,
    	kcy: kcy,
    	Kfr: Kfr,
    	kfr: kfr,
    	kgreen: kgreen,
    	KHcy: KHcy,
    	khcy: khcy,
    	KJcy: KJcy,
    	kjcy: kjcy,
    	Kopf: Kopf,
    	kopf: kopf,
    	Kscr: Kscr,
    	kscr: kscr,
    	lAarr: lAarr,
    	Lacute: Lacute,
    	lacute: lacute,
    	laemptyv: laemptyv,
    	lagran: lagran,
    	Lambda: Lambda,
    	lambda: lambda,
    	lang: lang,
    	Lang: Lang,
    	langd: langd,
    	langle: langle,
    	lap: lap,
    	Laplacetrf: Laplacetrf,
    	laquo: laquo$1,
    	larrb: larrb,
    	larrbfs: larrbfs,
    	larr: larr,
    	Larr: Larr,
    	lArr: lArr,
    	larrfs: larrfs,
    	larrhk: larrhk,
    	larrlp: larrlp,
    	larrpl: larrpl,
    	larrsim: larrsim,
    	larrtl: larrtl,
    	latail: latail,
    	lAtail: lAtail,
    	lat: lat,
    	late: late,
    	lates: lates,
    	lbarr: lbarr,
    	lBarr: lBarr,
    	lbbrk: lbbrk,
    	lbrace: lbrace,
    	lbrack: lbrack,
    	lbrke: lbrke,
    	lbrksld: lbrksld,
    	lbrkslu: lbrkslu,
    	Lcaron: Lcaron,
    	lcaron: lcaron,
    	Lcedil: Lcedil,
    	lcedil: lcedil,
    	lceil: lceil,
    	lcub: lcub,
    	Lcy: Lcy,
    	lcy: lcy,
    	ldca: ldca,
    	ldquo: ldquo,
    	ldquor: ldquor,
    	ldrdhar: ldrdhar,
    	ldrushar: ldrushar,
    	ldsh: ldsh,
    	le: le,
    	lE: lE,
    	LeftAngleBracket: LeftAngleBracket,
    	LeftArrowBar: LeftArrowBar,
    	leftarrow: leftarrow,
    	LeftArrow: LeftArrow,
    	Leftarrow: Leftarrow,
    	LeftArrowRightArrow: LeftArrowRightArrow,
    	leftarrowtail: leftarrowtail,
    	LeftCeiling: LeftCeiling,
    	LeftDoubleBracket: LeftDoubleBracket,
    	LeftDownTeeVector: LeftDownTeeVector,
    	LeftDownVectorBar: LeftDownVectorBar,
    	LeftDownVector: LeftDownVector,
    	LeftFloor: LeftFloor,
    	leftharpoondown: leftharpoondown,
    	leftharpoonup: leftharpoonup,
    	leftleftarrows: leftleftarrows,
    	leftrightarrow: leftrightarrow,
    	LeftRightArrow: LeftRightArrow,
    	Leftrightarrow: Leftrightarrow,
    	leftrightarrows: leftrightarrows,
    	leftrightharpoons: leftrightharpoons,
    	leftrightsquigarrow: leftrightsquigarrow,
    	LeftRightVector: LeftRightVector,
    	LeftTeeArrow: LeftTeeArrow,
    	LeftTee: LeftTee,
    	LeftTeeVector: LeftTeeVector,
    	leftthreetimes: leftthreetimes,
    	LeftTriangleBar: LeftTriangleBar,
    	LeftTriangle: LeftTriangle,
    	LeftTriangleEqual: LeftTriangleEqual,
    	LeftUpDownVector: LeftUpDownVector,
    	LeftUpTeeVector: LeftUpTeeVector,
    	LeftUpVectorBar: LeftUpVectorBar,
    	LeftUpVector: LeftUpVector,
    	LeftVectorBar: LeftVectorBar,
    	LeftVector: LeftVector,
    	lEg: lEg,
    	leg: leg,
    	leq: leq,
    	leqq: leqq,
    	leqslant: leqslant,
    	lescc: lescc,
    	les: les,
    	lesdot: lesdot,
    	lesdoto: lesdoto,
    	lesdotor: lesdotor,
    	lesg: lesg,
    	lesges: lesges,
    	lessapprox: lessapprox,
    	lessdot: lessdot,
    	lesseqgtr: lesseqgtr,
    	lesseqqgtr: lesseqqgtr,
    	LessEqualGreater: LessEqualGreater,
    	LessFullEqual: LessFullEqual,
    	LessGreater: LessGreater,
    	lessgtr: lessgtr,
    	LessLess: LessLess,
    	lesssim: lesssim,
    	LessSlantEqual: LessSlantEqual,
    	LessTilde: LessTilde,
    	lfisht: lfisht,
    	lfloor: lfloor,
    	Lfr: Lfr,
    	lfr: lfr,
    	lg: lg,
    	lgE: lgE,
    	lHar: lHar,
    	lhard: lhard,
    	lharu: lharu,
    	lharul: lharul,
    	lhblk: lhblk,
    	LJcy: LJcy,
    	ljcy: ljcy,
    	llarr: llarr,
    	ll: ll,
    	Ll: Ll,
    	llcorner: llcorner,
    	Lleftarrow: Lleftarrow,
    	llhard: llhard,
    	lltri: lltri,
    	Lmidot: Lmidot,
    	lmidot: lmidot,
    	lmoustache: lmoustache,
    	lmoust: lmoust,
    	lnap: lnap,
    	lnapprox: lnapprox,
    	lne: lne,
    	lnE: lnE,
    	lneq: lneq,
    	lneqq: lneqq,
    	lnsim: lnsim,
    	loang: loang,
    	loarr: loarr,
    	lobrk: lobrk,
    	longleftarrow: longleftarrow,
    	LongLeftArrow: LongLeftArrow,
    	Longleftarrow: Longleftarrow,
    	longleftrightarrow: longleftrightarrow,
    	LongLeftRightArrow: LongLeftRightArrow,
    	Longleftrightarrow: Longleftrightarrow,
    	longmapsto: longmapsto,
    	longrightarrow: longrightarrow,
    	LongRightArrow: LongRightArrow,
    	Longrightarrow: Longrightarrow,
    	looparrowleft: looparrowleft,
    	looparrowright: looparrowright,
    	lopar: lopar,
    	Lopf: Lopf,
    	lopf: lopf,
    	loplus: loplus,
    	lotimes: lotimes,
    	lowast: lowast,
    	lowbar: lowbar,
    	LowerLeftArrow: LowerLeftArrow,
    	LowerRightArrow: LowerRightArrow,
    	loz: loz,
    	lozenge: lozenge,
    	lozf: lozf,
    	lpar: lpar,
    	lparlt: lparlt,
    	lrarr: lrarr,
    	lrcorner: lrcorner,
    	lrhar: lrhar,
    	lrhard: lrhard,
    	lrm: lrm,
    	lrtri: lrtri,
    	lsaquo: lsaquo,
    	lscr: lscr,
    	Lscr: Lscr,
    	lsh: lsh,
    	Lsh: Lsh,
    	lsim: lsim,
    	lsime: lsime,
    	lsimg: lsimg,
    	lsqb: lsqb,
    	lsquo: lsquo,
    	lsquor: lsquor,
    	Lstrok: Lstrok,
    	lstrok: lstrok,
    	ltcc: ltcc,
    	ltcir: ltcir,
    	lt: lt$2,
    	LT: LT$1,
    	Lt: Lt,
    	ltdot: ltdot,
    	lthree: lthree,
    	ltimes: ltimes,
    	ltlarr: ltlarr,
    	ltquest: ltquest,
    	ltri: ltri,
    	ltrie: ltrie,
    	ltrif: ltrif,
    	ltrPar: ltrPar,
    	lurdshar: lurdshar,
    	luruhar: luruhar,
    	lvertneqq: lvertneqq,
    	lvnE: lvnE,
    	macr: macr$1,
    	male: male,
    	malt: malt,
    	maltese: maltese,
    	"Map": "⤅",
    	map: map,
    	mapsto: mapsto,
    	mapstodown: mapstodown,
    	mapstoleft: mapstoleft,
    	mapstoup: mapstoup,
    	marker: marker,
    	mcomma: mcomma,
    	Mcy: Mcy,
    	mcy: mcy,
    	mdash: mdash,
    	mDDot: mDDot,
    	measuredangle: measuredangle,
    	MediumSpace: MediumSpace,
    	Mellintrf: Mellintrf,
    	Mfr: Mfr,
    	mfr: mfr,
    	mho: mho,
    	micro: micro$1,
    	midast: midast,
    	midcir: midcir,
    	mid: mid,
    	middot: middot$1,
    	minusb: minusb,
    	minus: minus,
    	minusd: minusd,
    	minusdu: minusdu,
    	MinusPlus: MinusPlus,
    	mlcp: mlcp,
    	mldr: mldr,
    	mnplus: mnplus,
    	models: models,
    	Mopf: Mopf,
    	mopf: mopf,
    	mp: mp,
    	mscr: mscr,
    	Mscr: Mscr,
    	mstpos: mstpos,
    	Mu: Mu,
    	mu: mu,
    	multimap: multimap,
    	mumap: mumap,
    	nabla: nabla,
    	Nacute: Nacute,
    	nacute: nacute,
    	nang: nang,
    	nap: nap,
    	napE: napE,
    	napid: napid,
    	napos: napos,
    	napprox: napprox,
    	natural: natural,
    	naturals: naturals,
    	natur: natur,
    	nbsp: nbsp$1,
    	nbump: nbump,
    	nbumpe: nbumpe,
    	ncap: ncap,
    	Ncaron: Ncaron,
    	ncaron: ncaron,
    	Ncedil: Ncedil,
    	ncedil: ncedil,
    	ncong: ncong,
    	ncongdot: ncongdot,
    	ncup: ncup,
    	Ncy: Ncy,
    	ncy: ncy,
    	ndash: ndash,
    	nearhk: nearhk,
    	nearr: nearr,
    	neArr: neArr,
    	nearrow: nearrow,
    	ne: ne,
    	nedot: nedot,
    	NegativeMediumSpace: NegativeMediumSpace,
    	NegativeThickSpace: NegativeThickSpace,
    	NegativeThinSpace: NegativeThinSpace,
    	NegativeVeryThinSpace: NegativeVeryThinSpace,
    	nequiv: nequiv,
    	nesear: nesear,
    	nesim: nesim,
    	NestedGreaterGreater: NestedGreaterGreater,
    	NestedLessLess: NestedLessLess,
    	NewLine: NewLine,
    	nexist: nexist,
    	nexists: nexists,
    	Nfr: Nfr,
    	nfr: nfr,
    	ngE: ngE,
    	nge: nge,
    	ngeq: ngeq,
    	ngeqq: ngeqq,
    	ngeqslant: ngeqslant,
    	nges: nges,
    	nGg: nGg,
    	ngsim: ngsim,
    	nGt: nGt,
    	ngt: ngt,
    	ngtr: ngtr,
    	nGtv: nGtv,
    	nharr: nharr,
    	nhArr: nhArr,
    	nhpar: nhpar,
    	ni: ni,
    	nis: nis,
    	nisd: nisd,
    	niv: niv,
    	NJcy: NJcy,
    	njcy: njcy,
    	nlarr: nlarr,
    	nlArr: nlArr,
    	nldr: nldr,
    	nlE: nlE,
    	nle: nle,
    	nleftarrow: nleftarrow,
    	nLeftarrow: nLeftarrow,
    	nleftrightarrow: nleftrightarrow,
    	nLeftrightarrow: nLeftrightarrow,
    	nleq: nleq,
    	nleqq: nleqq,
    	nleqslant: nleqslant,
    	nles: nles,
    	nless: nless,
    	nLl: nLl,
    	nlsim: nlsim,
    	nLt: nLt,
    	nlt: nlt,
    	nltri: nltri,
    	nltrie: nltrie,
    	nLtv: nLtv,
    	nmid: nmid,
    	NoBreak: NoBreak,
    	NonBreakingSpace: NonBreakingSpace,
    	nopf: nopf,
    	Nopf: Nopf,
    	Not: Not,
    	not: not$1,
    	NotCongruent: NotCongruent,
    	NotCupCap: NotCupCap,
    	NotDoubleVerticalBar: NotDoubleVerticalBar,
    	NotElement: NotElement,
    	NotEqual: NotEqual,
    	NotEqualTilde: NotEqualTilde,
    	NotExists: NotExists,
    	NotGreater: NotGreater,
    	NotGreaterEqual: NotGreaterEqual,
    	NotGreaterFullEqual: NotGreaterFullEqual,
    	NotGreaterGreater: NotGreaterGreater,
    	NotGreaterLess: NotGreaterLess,
    	NotGreaterSlantEqual: NotGreaterSlantEqual,
    	NotGreaterTilde: NotGreaterTilde,
    	NotHumpDownHump: NotHumpDownHump,
    	NotHumpEqual: NotHumpEqual,
    	notin: notin,
    	notindot: notindot,
    	notinE: notinE,
    	notinva: notinva,
    	notinvb: notinvb,
    	notinvc: notinvc,
    	NotLeftTriangleBar: NotLeftTriangleBar,
    	NotLeftTriangle: NotLeftTriangle,
    	NotLeftTriangleEqual: NotLeftTriangleEqual,
    	NotLess: NotLess,
    	NotLessEqual: NotLessEqual,
    	NotLessGreater: NotLessGreater,
    	NotLessLess: NotLessLess,
    	NotLessSlantEqual: NotLessSlantEqual,
    	NotLessTilde: NotLessTilde,
    	NotNestedGreaterGreater: NotNestedGreaterGreater,
    	NotNestedLessLess: NotNestedLessLess,
    	notni: notni,
    	notniva: notniva,
    	notnivb: notnivb,
    	notnivc: notnivc,
    	NotPrecedes: NotPrecedes,
    	NotPrecedesEqual: NotPrecedesEqual,
    	NotPrecedesSlantEqual: NotPrecedesSlantEqual,
    	NotReverseElement: NotReverseElement,
    	NotRightTriangleBar: NotRightTriangleBar,
    	NotRightTriangle: NotRightTriangle,
    	NotRightTriangleEqual: NotRightTriangleEqual,
    	NotSquareSubset: NotSquareSubset,
    	NotSquareSubsetEqual: NotSquareSubsetEqual,
    	NotSquareSuperset: NotSquareSuperset,
    	NotSquareSupersetEqual: NotSquareSupersetEqual,
    	NotSubset: NotSubset,
    	NotSubsetEqual: NotSubsetEqual,
    	NotSucceeds: NotSucceeds,
    	NotSucceedsEqual: NotSucceedsEqual,
    	NotSucceedsSlantEqual: NotSucceedsSlantEqual,
    	NotSucceedsTilde: NotSucceedsTilde,
    	NotSuperset: NotSuperset,
    	NotSupersetEqual: NotSupersetEqual,
    	NotTilde: NotTilde,
    	NotTildeEqual: NotTildeEqual,
    	NotTildeFullEqual: NotTildeFullEqual,
    	NotTildeTilde: NotTildeTilde,
    	NotVerticalBar: NotVerticalBar,
    	nparallel: nparallel,
    	npar: npar,
    	nparsl: nparsl,
    	npart: npart,
    	npolint: npolint,
    	npr: npr,
    	nprcue: nprcue,
    	nprec: nprec,
    	npreceq: npreceq,
    	npre: npre,
    	nrarrc: nrarrc,
    	nrarr: nrarr,
    	nrArr: nrArr,
    	nrarrw: nrarrw,
    	nrightarrow: nrightarrow,
    	nRightarrow: nRightarrow,
    	nrtri: nrtri,
    	nrtrie: nrtrie,
    	nsc: nsc,
    	nsccue: nsccue,
    	nsce: nsce,
    	Nscr: Nscr,
    	nscr: nscr,
    	nshortmid: nshortmid,
    	nshortparallel: nshortparallel,
    	nsim: nsim,
    	nsime: nsime,
    	nsimeq: nsimeq,
    	nsmid: nsmid,
    	nspar: nspar,
    	nsqsube: nsqsube,
    	nsqsupe: nsqsupe,
    	nsub: nsub,
    	nsubE: nsubE,
    	nsube: nsube,
    	nsubset: nsubset,
    	nsubseteq: nsubseteq,
    	nsubseteqq: nsubseteqq,
    	nsucc: nsucc,
    	nsucceq: nsucceq,
    	nsup: nsup,
    	nsupE: nsupE,
    	nsupe: nsupe,
    	nsupset: nsupset,
    	nsupseteq: nsupseteq,
    	nsupseteqq: nsupseteqq,
    	ntgl: ntgl,
    	Ntilde: Ntilde$1,
    	ntilde: ntilde$1,
    	ntlg: ntlg,
    	ntriangleleft: ntriangleleft,
    	ntrianglelefteq: ntrianglelefteq,
    	ntriangleright: ntriangleright,
    	ntrianglerighteq: ntrianglerighteq,
    	Nu: Nu,
    	nu: nu,
    	num: num,
    	numero: numero,
    	numsp: numsp,
    	nvap: nvap,
    	nvdash: nvdash,
    	nvDash: nvDash,
    	nVdash: nVdash,
    	nVDash: nVDash,
    	nvge: nvge,
    	nvgt: nvgt,
    	nvHarr: nvHarr,
    	nvinfin: nvinfin,
    	nvlArr: nvlArr,
    	nvle: nvle,
    	nvlt: nvlt,
    	nvltrie: nvltrie,
    	nvrArr: nvrArr,
    	nvrtrie: nvrtrie,
    	nvsim: nvsim,
    	nwarhk: nwarhk,
    	nwarr: nwarr,
    	nwArr: nwArr,
    	nwarrow: nwarrow,
    	nwnear: nwnear,
    	Oacute: Oacute$1,
    	oacute: oacute$1,
    	oast: oast,
    	Ocirc: Ocirc$1,
    	ocirc: ocirc$1,
    	ocir: ocir,
    	Ocy: Ocy,
    	ocy: ocy,
    	odash: odash,
    	Odblac: Odblac,
    	odblac: odblac,
    	odiv: odiv,
    	odot: odot,
    	odsold: odsold,
    	OElig: OElig,
    	oelig: oelig,
    	ofcir: ofcir,
    	Ofr: Ofr,
    	ofr: ofr,
    	ogon: ogon,
    	Ograve: Ograve$1,
    	ograve: ograve$1,
    	ogt: ogt,
    	ohbar: ohbar,
    	ohm: ohm,
    	oint: oint,
    	olarr: olarr,
    	olcir: olcir,
    	olcross: olcross,
    	oline: oline,
    	olt: olt,
    	Omacr: Omacr,
    	omacr: omacr,
    	Omega: Omega,
    	omega: omega,
    	Omicron: Omicron,
    	omicron: omicron,
    	omid: omid,
    	ominus: ominus,
    	Oopf: Oopf,
    	oopf: oopf,
    	opar: opar,
    	OpenCurlyDoubleQuote: OpenCurlyDoubleQuote,
    	OpenCurlyQuote: OpenCurlyQuote,
    	operp: operp,
    	oplus: oplus,
    	orarr: orarr,
    	Or: Or,
    	or: or,
    	ord: ord,
    	order: order,
    	orderof: orderof,
    	ordf: ordf$1,
    	ordm: ordm$1,
    	origof: origof,
    	oror: oror,
    	orslope: orslope,
    	orv: orv,
    	oS: oS,
    	Oscr: Oscr,
    	oscr: oscr,
    	Oslash: Oslash$1,
    	oslash: oslash$1,
    	osol: osol,
    	Otilde: Otilde$1,
    	otilde: otilde$1,
    	otimesas: otimesas,
    	Otimes: Otimes,
    	otimes: otimes,
    	Ouml: Ouml$1,
    	ouml: ouml$1,
    	ovbar: ovbar,
    	OverBar: OverBar,
    	OverBrace: OverBrace,
    	OverBracket: OverBracket,
    	OverParenthesis: OverParenthesis,
    	para: para$1,
    	parallel: parallel,
    	par: par,
    	parsim: parsim,
    	parsl: parsl,
    	part: part,
    	PartialD: PartialD,
    	Pcy: Pcy,
    	pcy: pcy,
    	percnt: percnt,
    	period: period,
    	permil: permil,
    	perp: perp,
    	pertenk: pertenk,
    	Pfr: Pfr,
    	pfr: pfr,
    	Phi: Phi,
    	phi: phi,
    	phiv: phiv,
    	phmmat: phmmat,
    	phone: phone,
    	Pi: Pi,
    	pi: pi,
    	pitchfork: pitchfork,
    	piv: piv,
    	planck: planck,
    	planckh: planckh,
    	plankv: plankv,
    	plusacir: plusacir,
    	plusb: plusb,
    	pluscir: pluscir,
    	plus: plus,
    	plusdo: plusdo,
    	plusdu: plusdu,
    	pluse: pluse,
    	PlusMinus: PlusMinus,
    	plusmn: plusmn$1,
    	plussim: plussim,
    	plustwo: plustwo,
    	pm: pm,
    	Poincareplane: Poincareplane,
    	pointint: pointint,
    	popf: popf,
    	Popf: Popf,
    	pound: pound$1,
    	prap: prap,
    	Pr: Pr,
    	pr: pr,
    	prcue: prcue,
    	precapprox: precapprox,
    	prec: prec,
    	preccurlyeq: preccurlyeq,
    	Precedes: Precedes,
    	PrecedesEqual: PrecedesEqual,
    	PrecedesSlantEqual: PrecedesSlantEqual,
    	PrecedesTilde: PrecedesTilde,
    	preceq: preceq,
    	precnapprox: precnapprox,
    	precneqq: precneqq,
    	precnsim: precnsim,
    	pre: pre,
    	prE: prE,
    	precsim: precsim,
    	prime: prime,
    	Prime: Prime,
    	primes: primes,
    	prnap: prnap,
    	prnE: prnE,
    	prnsim: prnsim,
    	prod: prod,
    	Product: Product,
    	profalar: profalar,
    	profline: profline,
    	profsurf: profsurf,
    	prop: prop,
    	Proportional: Proportional,
    	Proportion: Proportion,
    	propto: propto,
    	prsim: prsim,
    	prurel: prurel,
    	Pscr: Pscr,
    	pscr: pscr,
    	Psi: Psi,
    	psi: psi,
    	puncsp: puncsp,
    	Qfr: Qfr,
    	qfr: qfr,
    	qint: qint,
    	qopf: qopf,
    	Qopf: Qopf,
    	qprime: qprime,
    	Qscr: Qscr,
    	qscr: qscr,
    	quaternions: quaternions,
    	quatint: quatint,
    	quest: quest,
    	questeq: questeq,
    	quot: quot$2,
    	QUOT: QUOT$1,
    	rAarr: rAarr,
    	race: race,
    	Racute: Racute,
    	racute: racute,
    	radic: radic,
    	raemptyv: raemptyv,
    	rang: rang,
    	Rang: Rang,
    	rangd: rangd,
    	range: range,
    	rangle: rangle,
    	raquo: raquo$1,
    	rarrap: rarrap,
    	rarrb: rarrb,
    	rarrbfs: rarrbfs,
    	rarrc: rarrc,
    	rarr: rarr,
    	Rarr: Rarr,
    	rArr: rArr,
    	rarrfs: rarrfs,
    	rarrhk: rarrhk,
    	rarrlp: rarrlp,
    	rarrpl: rarrpl,
    	rarrsim: rarrsim,
    	Rarrtl: Rarrtl,
    	rarrtl: rarrtl,
    	rarrw: rarrw,
    	ratail: ratail,
    	rAtail: rAtail,
    	ratio: ratio,
    	rationals: rationals,
    	rbarr: rbarr,
    	rBarr: rBarr,
    	RBarr: RBarr,
    	rbbrk: rbbrk,
    	rbrace: rbrace,
    	rbrack: rbrack,
    	rbrke: rbrke,
    	rbrksld: rbrksld,
    	rbrkslu: rbrkslu,
    	Rcaron: Rcaron,
    	rcaron: rcaron,
    	Rcedil: Rcedil,
    	rcedil: rcedil,
    	rceil: rceil,
    	rcub: rcub,
    	Rcy: Rcy,
    	rcy: rcy,
    	rdca: rdca,
    	rdldhar: rdldhar,
    	rdquo: rdquo,
    	rdquor: rdquor,
    	rdsh: rdsh,
    	real: real,
    	realine: realine,
    	realpart: realpart,
    	reals: reals,
    	Re: Re,
    	rect: rect,
    	reg: reg$1,
    	REG: REG$1,
    	ReverseElement: ReverseElement,
    	ReverseEquilibrium: ReverseEquilibrium,
    	ReverseUpEquilibrium: ReverseUpEquilibrium,
    	rfisht: rfisht,
    	rfloor: rfloor,
    	rfr: rfr,
    	Rfr: Rfr,
    	rHar: rHar,
    	rhard: rhard,
    	rharu: rharu,
    	rharul: rharul,
    	Rho: Rho,
    	rho: rho,
    	rhov: rhov,
    	RightAngleBracket: RightAngleBracket,
    	RightArrowBar: RightArrowBar,
    	rightarrow: rightarrow,
    	RightArrow: RightArrow,
    	Rightarrow: Rightarrow,
    	RightArrowLeftArrow: RightArrowLeftArrow,
    	rightarrowtail: rightarrowtail,
    	RightCeiling: RightCeiling,
    	RightDoubleBracket: RightDoubleBracket,
    	RightDownTeeVector: RightDownTeeVector,
    	RightDownVectorBar: RightDownVectorBar,
    	RightDownVector: RightDownVector,
    	RightFloor: RightFloor,
    	rightharpoondown: rightharpoondown,
    	rightharpoonup: rightharpoonup,
    	rightleftarrows: rightleftarrows,
    	rightleftharpoons: rightleftharpoons,
    	rightrightarrows: rightrightarrows,
    	rightsquigarrow: rightsquigarrow,
    	RightTeeArrow: RightTeeArrow,
    	RightTee: RightTee,
    	RightTeeVector: RightTeeVector,
    	rightthreetimes: rightthreetimes,
    	RightTriangleBar: RightTriangleBar,
    	RightTriangle: RightTriangle,
    	RightTriangleEqual: RightTriangleEqual,
    	RightUpDownVector: RightUpDownVector,
    	RightUpTeeVector: RightUpTeeVector,
    	RightUpVectorBar: RightUpVectorBar,
    	RightUpVector: RightUpVector,
    	RightVectorBar: RightVectorBar,
    	RightVector: RightVector,
    	ring: ring,
    	risingdotseq: risingdotseq,
    	rlarr: rlarr,
    	rlhar: rlhar,
    	rlm: rlm,
    	rmoustache: rmoustache,
    	rmoust: rmoust,
    	rnmid: rnmid,
    	roang: roang,
    	roarr: roarr,
    	robrk: robrk,
    	ropar: ropar,
    	ropf: ropf,
    	Ropf: Ropf,
    	roplus: roplus,
    	rotimes: rotimes,
    	RoundImplies: RoundImplies,
    	rpar: rpar,
    	rpargt: rpargt,
    	rppolint: rppolint,
    	rrarr: rrarr,
    	Rrightarrow: Rrightarrow,
    	rsaquo: rsaquo,
    	rscr: rscr,
    	Rscr: Rscr,
    	rsh: rsh,
    	Rsh: Rsh,
    	rsqb: rsqb,
    	rsquo: rsquo,
    	rsquor: rsquor,
    	rthree: rthree,
    	rtimes: rtimes,
    	rtri: rtri,
    	rtrie: rtrie,
    	rtrif: rtrif,
    	rtriltri: rtriltri,
    	RuleDelayed: RuleDelayed,
    	ruluhar: ruluhar,
    	rx: rx,
    	Sacute: Sacute,
    	sacute: sacute,
    	sbquo: sbquo,
    	scap: scap,
    	Scaron: Scaron,
    	scaron: scaron,
    	Sc: Sc,
    	sc: sc,
    	sccue: sccue,
    	sce: sce,
    	scE: scE,
    	Scedil: Scedil,
    	scedil: scedil,
    	Scirc: Scirc,
    	scirc: scirc,
    	scnap: scnap,
    	scnE: scnE,
    	scnsim: scnsim,
    	scpolint: scpolint,
    	scsim: scsim,
    	Scy: Scy,
    	scy: scy,
    	sdotb: sdotb,
    	sdot: sdot,
    	sdote: sdote,
    	searhk: searhk,
    	searr: searr,
    	seArr: seArr,
    	searrow: searrow,
    	sect: sect$1,
    	semi: semi,
    	seswar: seswar,
    	setminus: setminus,
    	setmn: setmn,
    	sext: sext,
    	Sfr: Sfr,
    	sfr: sfr,
    	sfrown: sfrown,
    	sharp: sharp,
    	SHCHcy: SHCHcy,
    	shchcy: shchcy,
    	SHcy: SHcy,
    	shcy: shcy,
    	ShortDownArrow: ShortDownArrow,
    	ShortLeftArrow: ShortLeftArrow,
    	shortmid: shortmid,
    	shortparallel: shortparallel,
    	ShortRightArrow: ShortRightArrow,
    	ShortUpArrow: ShortUpArrow,
    	shy: shy$1,
    	Sigma: Sigma,
    	sigma: sigma,
    	sigmaf: sigmaf,
    	sigmav: sigmav,
    	sim: sim,
    	simdot: simdot,
    	sime: sime,
    	simeq: simeq,
    	simg: simg,
    	simgE: simgE,
    	siml: siml,
    	simlE: simlE,
    	simne: simne,
    	simplus: simplus,
    	simrarr: simrarr,
    	slarr: slarr,
    	SmallCircle: SmallCircle,
    	smallsetminus: smallsetminus,
    	smashp: smashp,
    	smeparsl: smeparsl,
    	smid: smid,
    	smile: smile,
    	smt: smt,
    	smte: smte,
    	smtes: smtes,
    	SOFTcy: SOFTcy,
    	softcy: softcy,
    	solbar: solbar,
    	solb: solb,
    	sol: sol,
    	Sopf: Sopf,
    	sopf: sopf,
    	spades: spades,
    	spadesuit: spadesuit,
    	spar: spar,
    	sqcap: sqcap,
    	sqcaps: sqcaps,
    	sqcup: sqcup,
    	sqcups: sqcups,
    	Sqrt: Sqrt,
    	sqsub: sqsub,
    	sqsube: sqsube,
    	sqsubset: sqsubset,
    	sqsubseteq: sqsubseteq,
    	sqsup: sqsup,
    	sqsupe: sqsupe,
    	sqsupset: sqsupset,
    	sqsupseteq: sqsupseteq,
    	square: square,
    	Square: Square,
    	SquareIntersection: SquareIntersection,
    	SquareSubset: SquareSubset,
    	SquareSubsetEqual: SquareSubsetEqual,
    	SquareSuperset: SquareSuperset,
    	SquareSupersetEqual: SquareSupersetEqual,
    	SquareUnion: SquareUnion,
    	squarf: squarf,
    	squ: squ,
    	squf: squf,
    	srarr: srarr,
    	Sscr: Sscr,
    	sscr: sscr,
    	ssetmn: ssetmn,
    	ssmile: ssmile,
    	sstarf: sstarf,
    	Star: Star,
    	star: star,
    	starf: starf,
    	straightepsilon: straightepsilon,
    	straightphi: straightphi,
    	strns: strns,
    	sub: sub,
    	Sub: Sub,
    	subdot: subdot,
    	subE: subE,
    	sube: sube,
    	subedot: subedot,
    	submult: submult,
    	subnE: subnE,
    	subne: subne,
    	subplus: subplus,
    	subrarr: subrarr,
    	subset: subset,
    	Subset: Subset,
    	subseteq: subseteq,
    	subseteqq: subseteqq,
    	SubsetEqual: SubsetEqual,
    	subsetneq: subsetneq,
    	subsetneqq: subsetneqq,
    	subsim: subsim,
    	subsub: subsub,
    	subsup: subsup,
    	succapprox: succapprox,
    	succ: succ,
    	succcurlyeq: succcurlyeq,
    	Succeeds: Succeeds,
    	SucceedsEqual: SucceedsEqual,
    	SucceedsSlantEqual: SucceedsSlantEqual,
    	SucceedsTilde: SucceedsTilde,
    	succeq: succeq,
    	succnapprox: succnapprox,
    	succneqq: succneqq,
    	succnsim: succnsim,
    	succsim: succsim,
    	SuchThat: SuchThat,
    	sum: sum,
    	Sum: Sum,
    	sung: sung,
    	sup1: sup1$1,
    	sup2: sup2$1,
    	sup3: sup3$1,
    	sup: sup,
    	Sup: Sup,
    	supdot: supdot,
    	supdsub: supdsub,
    	supE: supE,
    	supe: supe,
    	supedot: supedot,
    	Superset: Superset,
    	SupersetEqual: SupersetEqual,
    	suphsol: suphsol,
    	suphsub: suphsub,
    	suplarr: suplarr,
    	supmult: supmult,
    	supnE: supnE,
    	supne: supne,
    	supplus: supplus,
    	supset: supset,
    	Supset: Supset,
    	supseteq: supseteq,
    	supseteqq: supseteqq,
    	supsetneq: supsetneq,
    	supsetneqq: supsetneqq,
    	supsim: supsim,
    	supsub: supsub,
    	supsup: supsup,
    	swarhk: swarhk,
    	swarr: swarr,
    	swArr: swArr,
    	swarrow: swarrow,
    	swnwar: swnwar,
    	szlig: szlig$1,
    	Tab: Tab,
    	target: target,
    	Tau: Tau,
    	tau: tau,
    	tbrk: tbrk,
    	Tcaron: Tcaron,
    	tcaron: tcaron,
    	Tcedil: Tcedil,
    	tcedil: tcedil,
    	Tcy: Tcy,
    	tcy: tcy,
    	tdot: tdot,
    	telrec: telrec,
    	Tfr: Tfr,
    	tfr: tfr,
    	there4: there4,
    	therefore: therefore,
    	Therefore: Therefore,
    	Theta: Theta,
    	theta: theta,
    	thetasym: thetasym,
    	thetav: thetav,
    	thickapprox: thickapprox,
    	thicksim: thicksim,
    	ThickSpace: ThickSpace,
    	ThinSpace: ThinSpace,
    	thinsp: thinsp,
    	thkap: thkap,
    	thksim: thksim,
    	THORN: THORN$1,
    	thorn: thorn$1,
    	tilde: tilde,
    	Tilde: Tilde,
    	TildeEqual: TildeEqual,
    	TildeFullEqual: TildeFullEqual,
    	TildeTilde: TildeTilde,
    	timesbar: timesbar,
    	timesb: timesb,
    	times: times$1,
    	timesd: timesd,
    	tint: tint,
    	toea: toea,
    	topbot: topbot,
    	topcir: topcir,
    	top: top,
    	Topf: Topf,
    	topf: topf,
    	topfork: topfork,
    	tosa: tosa,
    	tprime: tprime,
    	trade: trade,
    	TRADE: TRADE,
    	triangle: triangle,
    	triangledown: triangledown,
    	triangleleft: triangleleft,
    	trianglelefteq: trianglelefteq,
    	triangleq: triangleq,
    	triangleright: triangleright,
    	trianglerighteq: trianglerighteq,
    	tridot: tridot,
    	trie: trie,
    	triminus: triminus,
    	TripleDot: TripleDot,
    	triplus: triplus,
    	trisb: trisb,
    	tritime: tritime,
    	trpezium: trpezium,
    	Tscr: Tscr,
    	tscr: tscr,
    	TScy: TScy,
    	tscy: tscy,
    	TSHcy: TSHcy,
    	tshcy: tshcy,
    	Tstrok: Tstrok,
    	tstrok: tstrok,
    	twixt: twixt,
    	twoheadleftarrow: twoheadleftarrow,
    	twoheadrightarrow: twoheadrightarrow,
    	Uacute: Uacute$1,
    	uacute: uacute$1,
    	uarr: uarr,
    	Uarr: Uarr,
    	uArr: uArr,
    	Uarrocir: Uarrocir,
    	Ubrcy: Ubrcy,
    	ubrcy: ubrcy,
    	Ubreve: Ubreve,
    	ubreve: ubreve,
    	Ucirc: Ucirc$1,
    	ucirc: ucirc$1,
    	Ucy: Ucy,
    	ucy: ucy,
    	udarr: udarr,
    	Udblac: Udblac,
    	udblac: udblac,
    	udhar: udhar,
    	ufisht: ufisht,
    	Ufr: Ufr,
    	ufr: ufr,
    	Ugrave: Ugrave$1,
    	ugrave: ugrave$1,
    	uHar: uHar,
    	uharl: uharl,
    	uharr: uharr,
    	uhblk: uhblk,
    	ulcorn: ulcorn,
    	ulcorner: ulcorner,
    	ulcrop: ulcrop,
    	ultri: ultri,
    	Umacr: Umacr,
    	umacr: umacr,
    	uml: uml$1,
    	UnderBar: UnderBar,
    	UnderBrace: UnderBrace,
    	UnderBracket: UnderBracket,
    	UnderParenthesis: UnderParenthesis,
    	Union: Union,
    	UnionPlus: UnionPlus,
    	Uogon: Uogon,
    	uogon: uogon,
    	Uopf: Uopf,
    	uopf: uopf,
    	UpArrowBar: UpArrowBar,
    	uparrow: uparrow,
    	UpArrow: UpArrow,
    	Uparrow: Uparrow,
    	UpArrowDownArrow: UpArrowDownArrow,
    	updownarrow: updownarrow,
    	UpDownArrow: UpDownArrow,
    	Updownarrow: Updownarrow,
    	UpEquilibrium: UpEquilibrium,
    	upharpoonleft: upharpoonleft,
    	upharpoonright: upharpoonright,
    	uplus: uplus,
    	UpperLeftArrow: UpperLeftArrow,
    	UpperRightArrow: UpperRightArrow,
    	upsi: upsi,
    	Upsi: Upsi,
    	upsih: upsih,
    	Upsilon: Upsilon,
    	upsilon: upsilon,
    	UpTeeArrow: UpTeeArrow,
    	UpTee: UpTee,
    	upuparrows: upuparrows,
    	urcorn: urcorn,
    	urcorner: urcorner,
    	urcrop: urcrop,
    	Uring: Uring,
    	uring: uring,
    	urtri: urtri,
    	Uscr: Uscr,
    	uscr: uscr,
    	utdot: utdot,
    	Utilde: Utilde,
    	utilde: utilde,
    	utri: utri,
    	utrif: utrif,
    	uuarr: uuarr,
    	Uuml: Uuml$1,
    	uuml: uuml$1,
    	uwangle: uwangle,
    	vangrt: vangrt,
    	varepsilon: varepsilon,
    	varkappa: varkappa,
    	varnothing: varnothing,
    	varphi: varphi,
    	varpi: varpi,
    	varpropto: varpropto,
    	varr: varr,
    	vArr: vArr,
    	varrho: varrho,
    	varsigma: varsigma,
    	varsubsetneq: varsubsetneq,
    	varsubsetneqq: varsubsetneqq,
    	varsupsetneq: varsupsetneq,
    	varsupsetneqq: varsupsetneqq,
    	vartheta: vartheta,
    	vartriangleleft: vartriangleleft,
    	vartriangleright: vartriangleright,
    	vBar: vBar,
    	Vbar: Vbar,
    	vBarv: vBarv,
    	Vcy: Vcy,
    	vcy: vcy,
    	vdash: vdash,
    	vDash: vDash,
    	Vdash: Vdash,
    	VDash: VDash,
    	Vdashl: Vdashl,
    	veebar: veebar,
    	vee: vee,
    	Vee: Vee,
    	veeeq: veeeq,
    	vellip: vellip,
    	verbar: verbar,
    	Verbar: Verbar,
    	vert: vert,
    	Vert: Vert,
    	VerticalBar: VerticalBar,
    	VerticalLine: VerticalLine,
    	VerticalSeparator: VerticalSeparator,
    	VerticalTilde: VerticalTilde,
    	VeryThinSpace: VeryThinSpace,
    	Vfr: Vfr,
    	vfr: vfr,
    	vltri: vltri,
    	vnsub: vnsub,
    	vnsup: vnsup,
    	Vopf: Vopf,
    	vopf: vopf,
    	vprop: vprop,
    	vrtri: vrtri,
    	Vscr: Vscr,
    	vscr: vscr,
    	vsubnE: vsubnE,
    	vsubne: vsubne,
    	vsupnE: vsupnE,
    	vsupne: vsupne,
    	Vvdash: Vvdash,
    	vzigzag: vzigzag,
    	Wcirc: Wcirc,
    	wcirc: wcirc,
    	wedbar: wedbar,
    	wedge: wedge,
    	Wedge: Wedge,
    	wedgeq: wedgeq,
    	weierp: weierp,
    	Wfr: Wfr,
    	wfr: wfr,
    	Wopf: Wopf,
    	wopf: wopf,
    	wp: wp,
    	wr: wr,
    	wreath: wreath,
    	Wscr: Wscr,
    	wscr: wscr,
    	xcap: xcap,
    	xcirc: xcirc,
    	xcup: xcup,
    	xdtri: xdtri,
    	Xfr: Xfr,
    	xfr: xfr,
    	xharr: xharr,
    	xhArr: xhArr,
    	Xi: Xi,
    	xi: xi,
    	xlarr: xlarr,
    	xlArr: xlArr,
    	xmap: xmap,
    	xnis: xnis,
    	xodot: xodot,
    	Xopf: Xopf,
    	xopf: xopf,
    	xoplus: xoplus,
    	xotime: xotime,
    	xrarr: xrarr,
    	xrArr: xrArr,
    	Xscr: Xscr,
    	xscr: xscr,
    	xsqcup: xsqcup,
    	xuplus: xuplus,
    	xutri: xutri,
    	xvee: xvee,
    	xwedge: xwedge,
    	Yacute: Yacute$1,
    	yacute: yacute$1,
    	YAcy: YAcy,
    	yacy: yacy,
    	Ycirc: Ycirc,
    	ycirc: ycirc,
    	Ycy: Ycy,
    	ycy: ycy,
    	yen: yen$1,
    	Yfr: Yfr,
    	yfr: yfr,
    	YIcy: YIcy,
    	yicy: yicy,
    	Yopf: Yopf,
    	yopf: yopf,
    	Yscr: Yscr,
    	yscr: yscr,
    	YUcy: YUcy,
    	yucy: yucy,
    	yuml: yuml$1,
    	Yuml: Yuml,
    	Zacute: Zacute,
    	zacute: zacute,
    	Zcaron: Zcaron,
    	zcaron: zcaron,
    	Zcy: Zcy,
    	zcy: zcy,
    	Zdot: Zdot,
    	zdot: zdot,
    	zeetrf: zeetrf,
    	ZeroWidthSpace: ZeroWidthSpace,
    	Zeta: Zeta,
    	zeta: zeta,
    	zfr: zfr,
    	Zfr: Zfr,
    	ZHcy: ZHcy,
    	zhcy: zhcy,
    	zigrarr: zigrarr,
    	zopf: zopf,
    	Zopf: Zopf,
    	Zscr: Zscr,
    	zscr: zscr,
    	zwj: zwj,
    	zwnj: zwnj
    };

    var Aacute = "Á";
    var aacute = "á";
    var Acirc = "Â";
    var acirc = "â";
    var acute = "´";
    var AElig = "Æ";
    var aelig = "æ";
    var Agrave = "À";
    var agrave = "à";
    var amp$1 = "&";
    var AMP = "&";
    var Aring = "Å";
    var aring = "å";
    var Atilde = "Ã";
    var atilde = "ã";
    var Auml = "Ä";
    var auml = "ä";
    var brvbar = "¦";
    var Ccedil = "Ç";
    var ccedil = "ç";
    var cedil = "¸";
    var cent = "¢";
    var copy = "©";
    var COPY = "©";
    var curren = "¤";
    var deg = "°";
    var divide = "÷";
    var Eacute = "É";
    var eacute = "é";
    var Ecirc = "Ê";
    var ecirc = "ê";
    var Egrave = "È";
    var egrave = "è";
    var ETH = "Ð";
    var eth = "ð";
    var Euml = "Ë";
    var euml = "ë";
    var frac12 = "½";
    var frac14 = "¼";
    var frac34 = "¾";
    var gt$1 = ">";
    var GT = ">";
    var Iacute = "Í";
    var iacute = "í";
    var Icirc = "Î";
    var icirc = "î";
    var iexcl = "¡";
    var Igrave = "Ì";
    var igrave = "ì";
    var iquest = "¿";
    var Iuml = "Ï";
    var iuml = "ï";
    var laquo = "«";
    var lt$1 = "<";
    var LT = "<";
    var macr = "¯";
    var micro = "µ";
    var middot = "·";
    var nbsp = " ";
    var not = "¬";
    var Ntilde = "Ñ";
    var ntilde = "ñ";
    var Oacute = "Ó";
    var oacute = "ó";
    var Ocirc = "Ô";
    var ocirc = "ô";
    var Ograve = "Ò";
    var ograve = "ò";
    var ordf = "ª";
    var ordm = "º";
    var Oslash = "Ø";
    var oslash = "ø";
    var Otilde = "Õ";
    var otilde = "õ";
    var Ouml = "Ö";
    var ouml = "ö";
    var para = "¶";
    var plusmn = "±";
    var pound = "£";
    var quot$1 = "\"";
    var QUOT = "\"";
    var raquo = "»";
    var reg = "®";
    var REG = "®";
    var sect = "§";
    var shy = "­";
    var sup1 = "¹";
    var sup2 = "²";
    var sup3 = "³";
    var szlig = "ß";
    var THORN = "Þ";
    var thorn = "þ";
    var times = "×";
    var Uacute = "Ú";
    var uacute = "ú";
    var Ucirc = "Û";
    var ucirc = "û";
    var Ugrave = "Ù";
    var ugrave = "ù";
    var uml = "¨";
    var Uuml = "Ü";
    var uuml = "ü";
    var Yacute = "Ý";
    var yacute = "ý";
    var yen = "¥";
    var yuml = "ÿ";
    var require$$1 = {
    	Aacute: Aacute,
    	aacute: aacute,
    	Acirc: Acirc,
    	acirc: acirc,
    	acute: acute,
    	AElig: AElig,
    	aelig: aelig,
    	Agrave: Agrave,
    	agrave: agrave,
    	amp: amp$1,
    	AMP: AMP,
    	Aring: Aring,
    	aring: aring,
    	Atilde: Atilde,
    	atilde: atilde,
    	Auml: Auml,
    	auml: auml,
    	brvbar: brvbar,
    	Ccedil: Ccedil,
    	ccedil: ccedil,
    	cedil: cedil,
    	cent: cent,
    	copy: copy,
    	COPY: COPY,
    	curren: curren,
    	deg: deg,
    	divide: divide,
    	Eacute: Eacute,
    	eacute: eacute,
    	Ecirc: Ecirc,
    	ecirc: ecirc,
    	Egrave: Egrave,
    	egrave: egrave,
    	ETH: ETH,
    	eth: eth,
    	Euml: Euml,
    	euml: euml,
    	frac12: frac12,
    	frac14: frac14,
    	frac34: frac34,
    	gt: gt$1,
    	GT: GT,
    	Iacute: Iacute,
    	iacute: iacute,
    	Icirc: Icirc,
    	icirc: icirc,
    	iexcl: iexcl,
    	Igrave: Igrave,
    	igrave: igrave,
    	iquest: iquest,
    	Iuml: Iuml,
    	iuml: iuml,
    	laquo: laquo,
    	lt: lt$1,
    	LT: LT,
    	macr: macr,
    	micro: micro,
    	middot: middot,
    	nbsp: nbsp,
    	not: not,
    	Ntilde: Ntilde,
    	ntilde: ntilde,
    	Oacute: Oacute,
    	oacute: oacute,
    	Ocirc: Ocirc,
    	ocirc: ocirc,
    	Ograve: Ograve,
    	ograve: ograve,
    	ordf: ordf,
    	ordm: ordm,
    	Oslash: Oslash,
    	oslash: oslash,
    	Otilde: Otilde,
    	otilde: otilde,
    	Ouml: Ouml,
    	ouml: ouml,
    	para: para,
    	plusmn: plusmn,
    	pound: pound,
    	quot: quot$1,
    	QUOT: QUOT,
    	raquo: raquo,
    	reg: reg,
    	REG: REG,
    	sect: sect,
    	shy: shy,
    	sup1: sup1,
    	sup2: sup2,
    	sup3: sup3,
    	szlig: szlig,
    	THORN: THORN,
    	thorn: thorn,
    	times: times,
    	Uacute: Uacute,
    	uacute: uacute,
    	Ucirc: Ucirc,
    	ucirc: ucirc,
    	Ugrave: Ugrave,
    	ugrave: ugrave,
    	uml: uml,
    	Uuml: Uuml,
    	uuml: uuml,
    	Yacute: Yacute,
    	yacute: yacute,
    	yen: yen,
    	yuml: yuml
    };

    var amp = "&";
    var apos = "'";
    var gt = ">";
    var lt = "<";
    var quot = "\"";
    var require$$0$1 = {
    	amp: amp,
    	apos: apos,
    	gt: gt,
    	lt: lt,
    	quot: quot
    };

    var decode_codepoint = {};

    var require$$0 = {
    	"0": 65533,
    	"128": 8364,
    	"130": 8218,
    	"131": 402,
    	"132": 8222,
    	"133": 8230,
    	"134": 8224,
    	"135": 8225,
    	"136": 710,
    	"137": 8240,
    	"138": 352,
    	"139": 8249,
    	"140": 338,
    	"142": 381,
    	"145": 8216,
    	"146": 8217,
    	"147": 8220,
    	"148": 8221,
    	"149": 8226,
    	"150": 8211,
    	"151": 8212,
    	"152": 732,
    	"153": 8482,
    	"154": 353,
    	"155": 8250,
    	"156": 339,
    	"158": 382,
    	"159": 376
    };

    var __importDefault$2 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    Object.defineProperty(decode_codepoint, "__esModule", { value: true });
    var decode_json_1 = __importDefault$2(require$$0);
    // Adapted from https://github.com/mathiasbynens/he/blob/master/src/he.js#L94-L119
    var fromCodePoint$2 = 
    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
    String.fromCodePoint ||
        function (codePoint) {
            var output = "";
            if (codePoint > 0xffff) {
                codePoint -= 0x10000;
                output += String.fromCharCode(((codePoint >>> 10) & 0x3ff) | 0xd800);
                codePoint = 0xdc00 | (codePoint & 0x3ff);
            }
            output += String.fromCharCode(codePoint);
            return output;
        };
    function decodeCodePoint(codePoint) {
        if ((codePoint >= 0xd800 && codePoint <= 0xdfff) || codePoint > 0x10ffff) {
            return "\uFFFD";
        }
        if (codePoint in decode_json_1.default) {
            codePoint = decode_json_1.default[codePoint];
        }
        return fromCodePoint$2(codePoint);
    }
    decode_codepoint.default = decodeCodePoint;

    var __importDefault$1 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    Object.defineProperty(decode, "__esModule", { value: true });
    decode.decodeHTML = decode.decodeHTMLStrict = decode.decodeXML = void 0;
    var entities_json_1$1 = __importDefault$1(require$$1$1);
    var legacy_json_1 = __importDefault$1(require$$1);
    var xml_json_1$1 = __importDefault$1(require$$0$1);
    var decode_codepoint_1 = __importDefault$1(decode_codepoint);
    var strictEntityRe = /&(?:[a-zA-Z0-9]+|#[xX][\da-fA-F]+|#\d+);/g;
    decode.decodeXML = getStrictDecoder(xml_json_1$1.default);
    decode.decodeHTMLStrict = getStrictDecoder(entities_json_1$1.default);
    function getStrictDecoder(map) {
        var replace = getReplacer(map);
        return function (str) { return String(str).replace(strictEntityRe, replace); };
    }
    var sorter = function (a, b) { return (a < b ? 1 : -1); };
    decode.decodeHTML = (function () {
        var legacy = Object.keys(legacy_json_1.default).sort(sorter);
        var keys = Object.keys(entities_json_1$1.default).sort(sorter);
        for (var i = 0, j = 0; i < keys.length; i++) {
            if (legacy[j] === keys[i]) {
                keys[i] += ";?";
                j++;
            }
            else {
                keys[i] += ";";
            }
        }
        var re = new RegExp("&(?:" + keys.join("|") + "|#[xX][\\da-fA-F]+;?|#\\d+;?)", "g");
        var replace = getReplacer(entities_json_1$1.default);
        function replacer(str) {
            if (str.substr(-1) !== ";")
                str += ";";
            return replace(str);
        }
        // TODO consider creating a merged map
        return function (str) { return String(str).replace(re, replacer); };
    })();
    function getReplacer(map) {
        return function replace(str) {
            if (str.charAt(1) === "#") {
                var secondChar = str.charAt(2);
                if (secondChar === "X" || secondChar === "x") {
                    return decode_codepoint_1.default(parseInt(str.substr(3), 16));
                }
                return decode_codepoint_1.default(parseInt(str.substr(2), 10));
            }
            // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing
            return map[str.slice(1, -1)] || str;
        };
    }

    var encode = {};

    var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    Object.defineProperty(encode, "__esModule", { value: true });
    encode.escapeUTF8 = encode.escape = encode.encodeNonAsciiHTML = encode.encodeHTML = encode.encodeXML = void 0;
    var xml_json_1 = __importDefault(require$$0$1);
    var inverseXML = getInverseObj(xml_json_1.default);
    var xmlReplacer = getInverseReplacer(inverseXML);
    /**
     * Encodes all non-ASCII characters, as well as characters not valid in XML
     * documents using XML entities.
     *
     * If a character has no equivalent entity, a
     * numeric hexadecimal reference (eg. `&#xfc;`) will be used.
     */
    encode.encodeXML = getASCIIEncoder(inverseXML);
    var entities_json_1 = __importDefault(require$$1$1);
    var inverseHTML = getInverseObj(entities_json_1.default);
    var htmlReplacer = getInverseReplacer(inverseHTML);
    /**
     * Encodes all entities and non-ASCII characters in the input.
     *
     * This includes characters that are valid ASCII characters in HTML documents.
     * For example `#` will be encoded as `&num;`. To get a more compact output,
     * consider using the `encodeNonAsciiHTML` function.
     *
     * If a character has no equivalent entity, a
     * numeric hexadecimal reference (eg. `&#xfc;`) will be used.
     */
    encode.encodeHTML = getInverse(inverseHTML, htmlReplacer);
    /**
     * Encodes all non-ASCII characters, as well as characters not valid in HTML
     * documents using HTML entities.
     *
     * If a character has no equivalent entity, a
     * numeric hexadecimal reference (eg. `&#xfc;`) will be used.
     */
    encode.encodeNonAsciiHTML = getASCIIEncoder(inverseHTML);
    function getInverseObj(obj) {
        return Object.keys(obj)
            .sort()
            .reduce(function (inverse, name) {
            inverse[obj[name]] = "&" + name + ";";
            return inverse;
        }, {});
    }
    function getInverseReplacer(inverse) {
        var single = [];
        var multiple = [];
        for (var _i = 0, _a = Object.keys(inverse); _i < _a.length; _i++) {
            var k = _a[_i];
            if (k.length === 1) {
                // Add value to single array
                single.push("\\" + k);
            }
            else {
                // Add value to multiple array
                multiple.push(k);
            }
        }
        // Add ranges to single characters.
        single.sort();
        for (var start = 0; start < single.length - 1; start++) {
            // Find the end of a run of characters
            var end = start;
            while (end < single.length - 1 &&
                single[end].charCodeAt(1) + 1 === single[end + 1].charCodeAt(1)) {
                end += 1;
            }
            var count = 1 + end - start;
            // We want to replace at least three characters
            if (count < 3)
                continue;
            single.splice(start, count, single[start] + "-" + single[end]);
        }
        multiple.unshift("[" + single.join("") + "]");
        return new RegExp(multiple.join("|"), "g");
    }
    // /[^\0-\x7F]/gu
    var reNonASCII = /(?:[\x80-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g;
    var getCodePoint = 
    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
    String.prototype.codePointAt != null
        ? // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            function (str) { return str.codePointAt(0); }
        : // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
            function (c) {
                return (c.charCodeAt(0) - 0xd800) * 0x400 +
                    c.charCodeAt(1) -
                    0xdc00 +
                    0x10000;
            };
    function singleCharReplacer(c) {
        return "&#x" + (c.length > 1 ? getCodePoint(c) : c.charCodeAt(0))
            .toString(16)
            .toUpperCase() + ";";
    }
    function getInverse(inverse, re) {
        return function (data) {
            return data
                .replace(re, function (name) { return inverse[name]; })
                .replace(reNonASCII, singleCharReplacer);
        };
    }
    var reEscapeChars = new RegExp(xmlReplacer.source + "|" + reNonASCII.source, "g");
    /**
     * Encodes all non-ASCII characters, as well as characters not valid in XML
     * documents using numeric hexadecimal reference (eg. `&#xfc;`).
     *
     * Have a look at `escapeUTF8` if you want a more concise output at the expense
     * of reduced transportability.
     *
     * @param data String to escape.
     */
    function escape(data) {
        return data.replace(reEscapeChars, singleCharReplacer);
    }
    encode.escape = escape;
    /**
     * Encodes all characters not valid in XML documents using numeric hexadecimal
     * reference (eg. `&#xfc;`).
     *
     * Note that the output will be character-set dependent.
     *
     * @param data String to escape.
     */
    function escapeUTF8(data) {
        return data.replace(xmlReplacer, singleCharReplacer);
    }
    encode.escapeUTF8 = escapeUTF8;
    function getASCIIEncoder(obj) {
        return function (data) {
            return data.replace(reEscapeChars, function (c) { return obj[c] || singleCharReplacer(c); });
        };
    }

    (function (exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeXMLStrict = exports.decodeHTML5Strict = exports.decodeHTML4Strict = exports.decodeHTML5 = exports.decodeHTML4 = exports.decodeHTMLStrict = exports.decodeHTML = exports.decodeXML = exports.encodeHTML5 = exports.encodeHTML4 = exports.escapeUTF8 = exports.escape = exports.encodeNonAsciiHTML = exports.encodeHTML = exports.encodeXML = exports.encode = exports.decodeStrict = exports.decode = void 0;
    var decode_1 = decode;
    var encode_1 = encode;
    /**
     * Decodes a string with entities.
     *
     * @param data String to decode.
     * @param level Optional level to decode at. 0 = XML, 1 = HTML. Default is 0.
     * @deprecated Use `decodeXML` or `decodeHTML` directly.
     */
    function decode$1(data, level) {
        return (!level || level <= 0 ? decode_1.decodeXML : decode_1.decodeHTML)(data);
    }
    exports.decode = decode$1;
    /**
     * Decodes a string with entities. Does not allow missing trailing semicolons for entities.
     *
     * @param data String to decode.
     * @param level Optional level to decode at. 0 = XML, 1 = HTML. Default is 0.
     * @deprecated Use `decodeHTMLStrict` or `decodeXML` directly.
     */
    function decodeStrict(data, level) {
        return (!level || level <= 0 ? decode_1.decodeXML : decode_1.decodeHTMLStrict)(data);
    }
    exports.decodeStrict = decodeStrict;
    /**
     * Encodes a string with entities.
     *
     * @param data String to encode.
     * @param level Optional level to encode at. 0 = XML, 1 = HTML. Default is 0.
     * @deprecated Use `encodeHTML`, `encodeXML` or `encodeNonAsciiHTML` directly.
     */
    function encode$1(data, level) {
        return (!level || level <= 0 ? encode_1.encodeXML : encode_1.encodeHTML)(data);
    }
    exports.encode = encode$1;
    var encode_2 = encode;
    Object.defineProperty(exports, "encodeXML", { enumerable: true, get: function () { return encode_2.encodeXML; } });
    Object.defineProperty(exports, "encodeHTML", { enumerable: true, get: function () { return encode_2.encodeHTML; } });
    Object.defineProperty(exports, "encodeNonAsciiHTML", { enumerable: true, get: function () { return encode_2.encodeNonAsciiHTML; } });
    Object.defineProperty(exports, "escape", { enumerable: true, get: function () { return encode_2.escape; } });
    Object.defineProperty(exports, "escapeUTF8", { enumerable: true, get: function () { return encode_2.escapeUTF8; } });
    // Legacy aliases (deprecated)
    Object.defineProperty(exports, "encodeHTML4", { enumerable: true, get: function () { return encode_2.encodeHTML; } });
    Object.defineProperty(exports, "encodeHTML5", { enumerable: true, get: function () { return encode_2.encodeHTML; } });
    var decode_2 = decode;
    Object.defineProperty(exports, "decodeXML", { enumerable: true, get: function () { return decode_2.decodeXML; } });
    Object.defineProperty(exports, "decodeHTML", { enumerable: true, get: function () { return decode_2.decodeHTML; } });
    Object.defineProperty(exports, "decodeHTMLStrict", { enumerable: true, get: function () { return decode_2.decodeHTMLStrict; } });
    // Legacy aliases (deprecated)
    Object.defineProperty(exports, "decodeHTML4", { enumerable: true, get: function () { return decode_2.decodeHTML; } });
    Object.defineProperty(exports, "decodeHTML5", { enumerable: true, get: function () { return decode_2.decodeHTML; } });
    Object.defineProperty(exports, "decodeHTML4Strict", { enumerable: true, get: function () { return decode_2.decodeHTMLStrict; } });
    Object.defineProperty(exports, "decodeHTML5Strict", { enumerable: true, get: function () { return decode_2.decodeHTMLStrict; } });
    Object.defineProperty(exports, "decodeXMLStrict", { enumerable: true, get: function () { return decode_2.decodeXML; } });
    }(lib));

    var ENTITY = '&(?:#x[a-f0-9]{1,6}|#[0-9]{1,7}|[a-z][a-z0-9]{1,31});';
    var C_BACKSLASH$1 = 92;
    var reBackslashOrAmp = /[\\&]/;
    var ESCAPABLE = '[!"#$%&\'()*+,./:;<=>?@[\\\\\\]^_`{|}~-]';
    var reEntityOrEscapedChar = new RegExp("\\\\" + ESCAPABLE + "|" + ENTITY, 'gi');
    var XMLSPECIAL = '[&<>"]';
    var reXmlSpecial = new RegExp(XMLSPECIAL, 'g');
    var unescapeChar = function (s) {
        if (s.charCodeAt(0) === C_BACKSLASH$1) {
            return s.charAt(1);
        }
        return lib.decodeHTML(s);
    };
    // Replace entities and backslash escapes with literal characters.
    function unescapeString(s) {
        if (reBackslashOrAmp.test(s)) {
            return s.replace(reEntityOrEscapedChar, unescapeChar);
        }
        return s;
    }
    function normalizeURI(uri) {
        try {
            return encode_1(uri);
        }
        catch (err) {
            return uri;
        }
    }
    function replaceUnsafeChar(s) {
        switch (s) {
            case '&':
                return '&amp;';
            case '<':
                return '&lt;';
            case '>':
                return '&gt;';
            case '"':
                return '&quot;';
            default:
                return s;
        }
    }
    function escapeXml(s) {
        if (reXmlSpecial.test(s)) {
            return s.replace(reXmlSpecial, replaceUnsafeChar);
        }
        return s;
    }
    function repeat(str, count) {
        var arr = [];
        for (var i = 0; i < count; i++) {
            arr.push(str);
        }
        return arr.join('');
    }
    function isEmpty(str) {
        if (!str) {
            return true;
        }
        return !/[^ \t]+/.test(str);
    }

    var NodeWalker = /** @class */ (function () {
        function NodeWalker(root) {
            this.current = root;
            this.root = root;
            this.entering = true;
        }
        NodeWalker.prototype.next = function () {
            var cur = this.current;
            var entering = this.entering;
            if (cur === null) {
                return null;
            }
            var container = isContainer$1(cur);
            if (entering && container) {
                if (cur.firstChild) {
                    this.current = cur.firstChild;
                    this.entering = true;
                }
                else {
                    // stay on node but exit
                    this.entering = false;
                }
            }
            else if (cur === this.root) {
                this.current = null;
            }
            else if (cur.next === null) {
                this.current = cur.parent;
                this.entering = false;
            }
            else {
                this.current = cur.next;
                this.entering = true;
            }
            return { entering: entering, node: cur };
        };
        NodeWalker.prototype.resumeAt = function (node, entering) {
            this.current = node;
            this.entering = entering === true;
        };
        return NodeWalker;
    }());

    function isContainer$1(node) {
        switch (node.type) {
            case 'document':
            case 'blockQuote':
            case 'list':
            case 'item':
            case 'paragraph':
            case 'heading':
            case 'emph':
            case 'strong':
            case 'strike':
            case 'link':
            case 'image':
            case 'table':
            case 'tableHead':
            case 'tableBody':
            case 'tableRow':
            case 'tableCell':
            case 'tableDelimRow':
            case 'customInline':
                return true;
            default:
                return false;
        }
    }
    var lastNodeId = 1;
    var nodeMap = {};
    function getNodeById(id) {
        return nodeMap[id];
    }
    function removeNodeById(id) {
        delete nodeMap[id];
    }
    function removeAllNode() {
        nodeMap = {};
    }
    var Node$1 = /** @class */ (function () {
        function Node(nodeType, sourcepos) {
            this.parent = null;
            this.prev = null;
            this.next = null;
            // only for container node
            this.firstChild = null;
            this.lastChild = null;
            // only for leaf node
            this.literal = null;
            if (nodeType === 'document') {
                this.id = -1;
            }
            else {
                this.id = lastNodeId++;
            }
            this.type = nodeType;
            this.sourcepos = sourcepos;
            nodeMap[this.id] = this;
        }
        Node.prototype.isContainer = function () {
            return isContainer$1(this);
        };
        Node.prototype.unlink = function () {
            if (this.prev) {
                this.prev.next = this.next;
            }
            else if (this.parent) {
                this.parent.firstChild = this.next;
            }
            if (this.next) {
                this.next.prev = this.prev;
            }
            else if (this.parent) {
                this.parent.lastChild = this.prev;
            }
            this.parent = null;
            this.next = null;
            this.prev = null;
        };
        Node.prototype.replaceWith = function (node) {
            this.insertBefore(node);
            this.unlink();
        };
        Node.prototype.insertAfter = function (sibling) {
            sibling.unlink();
            sibling.next = this.next;
            if (sibling.next) {
                sibling.next.prev = sibling;
            }
            sibling.prev = this;
            this.next = sibling;
            if (this.parent) {
                sibling.parent = this.parent;
                if (!sibling.next) {
                    sibling.parent.lastChild = sibling;
                }
            }
        };
        Node.prototype.insertBefore = function (sibling) {
            sibling.unlink();
            sibling.prev = this.prev;
            if (sibling.prev) {
                sibling.prev.next = sibling;
            }
            sibling.next = this;
            this.prev = sibling;
            sibling.parent = this.parent;
            if (!sibling.prev) {
                sibling.parent.firstChild = sibling;
            }
        };
        Node.prototype.appendChild = function (child) {
            child.unlink();
            child.parent = this;
            if (this.lastChild) {
                this.lastChild.next = child;
                child.prev = this.lastChild;
                this.lastChild = child;
            }
            else {
                this.firstChild = child;
                this.lastChild = child;
            }
        };
        Node.prototype.prependChild = function (child) {
            child.unlink();
            child.parent = this;
            if (this.firstChild) {
                this.firstChild.prev = child;
                child.next = this.firstChild;
                this.firstChild = child;
            }
            else {
                this.firstChild = child;
                this.lastChild = child;
            }
        };
        Node.prototype.walker = function () {
            return new NodeWalker(this);
        };
        return Node;
    }());
    var BlockNode = /** @class */ (function (_super) {
        __extends(BlockNode, _super);
        function BlockNode(nodeType, sourcepos) {
            var _this = _super.call(this, nodeType, sourcepos) || this;
            // temporal data (for parsing)
            _this.open = true;
            _this.lineOffsets = null;
            _this.stringContent = null;
            _this.lastLineBlank = false;
            _this.lastLineChecked = false;
            _this.type = nodeType;
            return _this;
        }
        return BlockNode;
    }(Node$1));
    var ListNode = /** @class */ (function (_super) {
        __extends(ListNode, _super);
        function ListNode() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.listData = null;
            return _this;
        }
        return ListNode;
    }(BlockNode));
    var HeadingNode = /** @class */ (function (_super) {
        __extends(HeadingNode, _super);
        function HeadingNode() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.level = 0;
            _this.headingType = 'atx';
            return _this;
        }
        return HeadingNode;
    }(BlockNode));
    var CodeBlockNode = /** @class */ (function (_super) {
        __extends(CodeBlockNode, _super);
        function CodeBlockNode() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.isFenced = false;
            _this.fenceChar = null;
            _this.fenceLength = 0;
            _this.fenceOffset = -1;
            _this.info = null;
            _this.infoPadding = 0;
            return _this;
        }
        return CodeBlockNode;
    }(BlockNode));
    var TableNode = /** @class */ (function (_super) {
        __extends(TableNode, _super);
        function TableNode() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.columns = [];
            return _this;
        }
        return TableNode;
    }(BlockNode));
    var TableCellNode = /** @class */ (function (_super) {
        __extends(TableCellNode, _super);
        function TableCellNode() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.startIdx = 0;
            _this.endIdx = 0;
            _this.paddingLeft = 0;
            _this.paddingRight = 0;
            _this.ignored = false;
            return _this;
        }
        return TableCellNode;
    }(BlockNode));
    var RefDefNode = /** @class */ (function (_super) {
        __extends(RefDefNode, _super);
        function RefDefNode() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.title = '';
            _this.dest = '';
            _this.label = '';
            return _this;
        }
        return RefDefNode;
    }(BlockNode));
    var CustomBlockNode = /** @class */ (function (_super) {
        __extends(CustomBlockNode, _super);
        function CustomBlockNode() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.syntaxLength = 0;
            _this.offset = -1;
            _this.info = '';
            return _this;
        }
        return CustomBlockNode;
    }(BlockNode));
    var HtmlBlockNode = /** @class */ (function (_super) {
        __extends(HtmlBlockNode, _super);
        function HtmlBlockNode() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.htmlBlockType = -1;
            return _this;
        }
        return HtmlBlockNode;
    }(BlockNode));
    var LinkNode = /** @class */ (function (_super) {
        __extends(LinkNode, _super);
        function LinkNode() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.destination = null;
            _this.title = null;
            _this.extendedAutolink = false;
            return _this;
        }
        return LinkNode;
    }(Node$1));
    var CodeNode = /** @class */ (function (_super) {
        __extends(CodeNode, _super);
        function CodeNode() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.tickCount = 0;
            return _this;
        }
        return CodeNode;
    }(Node$1));
    var CustomInlineNode = /** @class */ (function (_super) {
        __extends(CustomInlineNode, _super);
        function CustomInlineNode() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.info = '';
            return _this;
        }
        return CustomInlineNode;
    }(Node$1));
    function createNode$1(type, sourcepos) {
        switch (type) {
            case 'heading':
                return new HeadingNode(type, sourcepos);
            case 'list':
            case 'item':
                return new ListNode(type, sourcepos);
            case 'link':
            case 'image':
                return new LinkNode(type, sourcepos);
            case 'codeBlock':
                return new CodeBlockNode(type, sourcepos);
            case 'htmlBlock':
                return new HtmlBlockNode(type, sourcepos);
            case 'table':
                return new TableNode(type, sourcepos);
            case 'tableCell':
                return new TableCellNode(type, sourcepos);
            case 'document':
            case 'paragraph':
            case 'blockQuote':
            case 'thematicBreak':
            case 'tableRow':
            case 'tableBody':
            case 'tableHead':
            case 'frontMatter':
                return new BlockNode(type, sourcepos);
            case 'code':
                return new CodeNode(type, sourcepos);
            case 'refDef':
                return new RefDefNode(type, sourcepos);
            case 'customBlock':
                return new CustomBlockNode(type, sourcepos);
            case 'customInline':
                return new CustomInlineNode(type, sourcepos);
            default:
                return new Node$1(type, sourcepos);
        }
    }
    function isCodeBlock(node) {
        return node.type === 'codeBlock';
    }
    function isHtmlBlock(node) {
        return node.type === 'htmlBlock';
    }
    function isHeading(node) {
        return node.type === 'heading';
    }
    function isList(node) {
        return node.type === 'list';
    }
    function isTable(node) {
        return node.type === 'table';
    }
    function isRefDef(node) {
        return node.type === 'refDef';
    }
    function isCustomBlock(node) {
        return node.type === 'customBlock';
    }
    function isCustomInline(node) {
        return node.type === 'customInline';
    }
    function text(s, sourcepos) {
        var node = createNode$1('text', sourcepos);
        node.literal = s;
        return node;
    }

    var TAGNAME = '[A-Za-z][A-Za-z0-9-]*';
    var ATTRIBUTENAME = '[a-zA-Z_:][a-zA-Z0-9:._-]*';
    var UNQUOTEDVALUE = '[^"\'=<>`\\x00-\\x20]+';
    var SINGLEQUOTEDVALUE = "'[^']*'";
    var DOUBLEQUOTEDVALUE = '"[^"]*"';
    var ATTRIBUTEVALUE = "(?:" + UNQUOTEDVALUE + "|" + SINGLEQUOTEDVALUE + "|" + DOUBLEQUOTEDVALUE + ")";
    var ATTRIBUTEVALUESPEC = "" + '(?:\\s*=\\s*' + ATTRIBUTEVALUE + ")";
    var ATTRIBUTE = "" + '(?:\\s+' + ATTRIBUTENAME + ATTRIBUTEVALUESPEC + "?)";
    var OPENTAG = "<" + TAGNAME + ATTRIBUTE + "*\\s*/?>";
    var CLOSETAG = "</" + TAGNAME + "\\s*[>]";
    var HTMLCOMMENT = '<!---->|<!--(?:-?[^>-])(?:-?[^-])*-->';
    var PROCESSINGINSTRUCTION = '[<][?].*?[?][>]';
    var DECLARATION = '<![A-Z]+\\s+[^>]*>';
    var CDATA = '<!\\[CDATA\\[[\\s\\S]*?\\]\\]>';
    var HTMLTAG = "(?:" + OPENTAG + "|" + CLOSETAG + "|" + HTMLCOMMENT + "|" + PROCESSINGINSTRUCTION + "|" + DECLARATION + "|" + CDATA + ")";
    var reHtmlTag = new RegExp("^" + HTMLTAG, 'i');

    // derived from https://github.com/mathiasbynens/String.fromCodePoint
    /*! http://mths.be/fromcodepoint v0.2.1 by @mathias */
    var fromCodePoint;
    if (String.fromCodePoint) {
        fromCodePoint = function (_) {
            try {
                return String.fromCodePoint(_);
            }
            catch (e) {
                if (e instanceof RangeError) {
                    return String.fromCharCode(0xfffd);
                }
                throw e;
            }
        };
    }
    else {
        var stringFromCharCode_1 = String.fromCharCode;
        var floor_1 = Math.floor;
        fromCodePoint = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var MAX_SIZE = 0x4000;
            var codeUnits = [];
            var highSurrogate;
            var lowSurrogate;
            var index = -1;
            var length = args.length;
            if (!length) {
                return '';
            }
            var result = '';
            while (++index < length) {
                var codePoint = Number(args[index]);
                if (!isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`
                    codePoint < 0 || // not a valid Unicode code point
                    codePoint > 0x10ffff || // not a valid Unicode code point
                    floor_1(codePoint) !== codePoint // not an integer
                ) {
                    return String.fromCharCode(0xfffd);
                }
                if (codePoint <= 0xffff) {
                    // BMP code point
                    codeUnits.push(codePoint);
                }
                else {
                    // Astral code point; split in surrogate halves
                    // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
                    codePoint -= 0x10000;
                    highSurrogate = (codePoint >> 10) + 0xd800;
                    lowSurrogate = (codePoint % 0x400) + 0xdc00;
                    codeUnits.push(highSurrogate, lowSurrogate);
                }
                if (index + 1 === length || codeUnits.length > MAX_SIZE) {
                    result += stringFromCharCode_1.apply(void 0, codeUnits);
                    codeUnits.length = 0;
                }
            }
            return result;
        };
    }
    var fromCodePoint$1 = fromCodePoint;

    var DOMAIN = '(?:[w-]+.)*[A-Za-z0-9-]+.[A-Za-z0-9-]+';
    var PATH = '[^<\\s]*[^<?!.,:*_?~\\s]';
    var EMAIL = '[\\w.+-]+@(?:[\\w-]+\\.)+[\\w-]+';
    function trimUnmatchedTrailingParens(source) {
        var trailingParen = /\)+$/.exec(source);
        if (trailingParen) {
            var count = 0;
            for (var _i = 0, source_1 = source; _i < source_1.length; _i++) {
                var ch = source_1[_i];
                if (ch === '(') {
                    if (count < 0) {
                        count = 1;
                    }
                    else {
                        count += 1;
                    }
                }
                else if (ch === ')') {
                    count -= 1;
                }
            }
            if (count < 0) {
                var trimCount = Math.min(-count, trailingParen[0].length);
                return source.substring(0, source.length - trimCount);
            }
        }
        return source;
    }
    function trimTrailingEntity(source) {
        return source.replace(/&[A-Za-z0-9]+;$/, '');
    }
    function parseEmailLink(source) {
        var reEmailLink = new RegExp(EMAIL, 'g');
        var result = [];
        var m;
        while ((m = reEmailLink.exec(source))) {
            var text_1 = m[0];
            if (!/[_-]+$/.test(text_1)) {
                result.push({
                    text: text_1,
                    range: [m.index, m.index + text_1.length - 1],
                    url: "mailto:" + text_1,
                });
            }
        }
        return result;
    }
    function parseUrlLink(source) {
        var reWwwAutolink = new RegExp("(www|https?://)." + DOMAIN + PATH, 'g');
        var result = [];
        var m;
        while ((m = reWwwAutolink.exec(source))) {
            var text_2 = trimTrailingEntity(trimUnmatchedTrailingParens(m[0]));
            var scheme = m[1] === 'www' ? 'http://' : '';
            result.push({
                text: text_2,
                range: [m.index, m.index + text_2.length - 1],
                url: "" + scheme + text_2,
            });
        }
        return result;
    }
    function baseAutolinkParser(source) {
        return __spreadArray(__spreadArray([], parseUrlLink(source)), parseEmailLink(source)).sort(function (a, b) { return a.range[0] - b.range[0]; });
    }
    function convertExtAutoLinks(walker, autolinkParser) {
        if (typeof autolinkParser === 'boolean') {
            autolinkParser = baseAutolinkParser;
        }
        var event;
        var _loop_1 = function () {
            var entering = event.entering, node = event.node;
            if (entering && node.type === 'text' && node.parent.type !== 'link') {
                var literal = node.literal;
                var linkInfos = autolinkParser(literal);
                if (!linkInfos || !linkInfos.length) {
                    return "continue";
                }
                var lastIdx = 0;
                var _a = node.sourcepos[0], lineNum_1 = _a[0], chPos_1 = _a[1];
                var sourcepos = function (startIdx, endIdx) { return [
                    [lineNum_1, chPos_1 + startIdx],
                    [lineNum_1, chPos_1 + endIdx],
                ]; };
                var newNodes = [];
                for (var _i = 0, linkInfos_1 = linkInfos; _i < linkInfos_1.length; _i++) {
                    var _b = linkInfos_1[_i], range = _b.range, url = _b.url, linkText = _b.text;
                    if (range[0] > lastIdx) {
                        newNodes.push(text(literal.substring(lastIdx, range[0]), sourcepos(lastIdx, range[0] - 1)));
                    }
                    var linkNode = createNode$1('link', sourcepos.apply(void 0, range));
                    linkNode.appendChild(text(linkText, sourcepos.apply(void 0, range)));
                    linkNode.destination = url;
                    linkNode.extendedAutolink = true;
                    newNodes.push(linkNode);
                    lastIdx = range[1] + 1;
                }
                if (lastIdx < literal.length) {
                    newNodes.push(text(literal.substring(lastIdx), sourcepos(lastIdx, literal.length - 1)));
                }
                for (var _c = 0, newNodes_1 = newNodes; _c < newNodes_1.length; _c++) {
                    var newNode = newNodes_1[_c];
                    node.insertBefore(newNode);
                }
                node.unlink();
            }
        };
        while ((event = walker.next())) {
            _loop_1();
        }
    }

    function last(arr) {
        return arr[arr.length - 1];
    }
    // normalize a reference in reference link (remove []s, trim,
    // collapse internal space, unicode case fold.
    // See commonmark/commonmark.js#168.
    function normalizeReference(str) {
        return str
            .slice(1, str.length - 1)
            .trim()
            .replace(/[ \t\r\n]+/, ' ')
            .toLowerCase()
            .toUpperCase();
    }
    function iterateObject(obj, iteratee) {
        Object.keys(obj).forEach(function (key) {
            iteratee(key, obj[key]);
        });
    }
    function omit(obj) {
        var propNames = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            propNames[_i - 1] = arguments[_i];
        }
        var resultMap = __assign({}, obj);
        propNames.forEach(function (key) {
            delete resultMap[key];
        });
        return resultMap;
    }
    function isEmptyObj(obj) {
        return !Object.keys(obj).length;
    }
    function clearObj(obj) {
        Object.keys(obj).forEach(function (key) {
            delete obj[key];
        });
    }

    var C_NEWLINE = 10;
    var C_ASTERISK = 42;
    var C_UNDERSCORE = 95;
    var C_BACKTICK = 96;
    var C_OPEN_BRACKET$1 = 91;
    var C_CLOSE_BRACKET = 93;
    var C_TILDE = 126;
    var C_LESSTHAN$1 = 60;
    var C_BANG = 33;
    var C_BACKSLASH = 92;
    var C_AMPERSAND = 38;
    var C_OPEN_PAREN = 40;
    var C_CLOSE_PAREN = 41;
    var C_COLON = 58;
    var C_SINGLEQUOTE = 39;
    var C_DOUBLEQUOTE = 34;
    var C_DOLLAR = 36;
    // Some regexps used in inline parser:
    var ESCAPED_CHAR = "\\\\" + ESCAPABLE;
    var rePunctuation = new RegExp(/[!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u0AF0\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166D\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E42\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]|\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC9\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDF3C-\uDF3E]|\uD809[\uDC70-\uDC74]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD82F\uDC9F|\uD836[\uDE87-\uDE8B]/);
    var reLinkTitle = new RegExp("^(?:\"(" + ESCAPED_CHAR + "|[^\"\\x00])*\"" +
        "|" +
        ("'(" + ESCAPED_CHAR + "|[^'\\x00])*'") +
        "|" +
        ("\\((" + ESCAPED_CHAR + "|[^()\\x00])*\\))"));
    var reLinkDestinationBraces = /^(?:<(?:[^<>\n\\\x00]|\\.)*>)/;
    var reEscapable = new RegExp("^" + ESCAPABLE);
    var reEntityHere = new RegExp("^" + ENTITY, 'i');
    var reTicks = /`+/;
    var reTicksHere = /^`+/;
    var reEllipses = /\.\.\./g;
    var reDash = /--+/g;
    var reEmailAutolink = /^<([a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)>/;
    var reAutolink = /^<[A-Za-z][A-Za-z0-9.+-]{1,31}:[^<>\x00-\x20]*>/i;
    var reSpnl = /^ *(?:\n *)?/;
    var reWhitespaceChar = /^[ \t\n\x0b\x0c\x0d]/;
    var reUnicodeWhitespaceChar = /^\s/;
    var reFinalSpace = / *$/;
    var reInitialSpace = /^ */;
    var reSpaceAtEndOfLine = /^ *(?:\n|$)/;
    var reLinkLabel = /^\[(?:[^\\\[\]]|\\.){0,1000}\]/;
    // Matches a string of non-special characters.
    var reMain = /^[^\n`\[\]\\!<&*_'"~$]+/m;
    var InlineParser = /** @class */ (function () {
        function InlineParser(options) {
            // An InlineParser keeps track of a subject (a string to be parsed)
            // and a position in that subject.
            this.subject = '';
            this.delimiters = null; // used by handleDelim method
            this.brackets = null;
            this.pos = 0;
            this.lineStartNum = 0;
            this.lineIdx = 0;
            this.lineOffsets = [0];
            this.linePosOffset = 0;
            this.refMap = {};
            this.refLinkCandidateMap = {};
            this.refDefCandidateMap = {};
            this.options = options;
        }
        InlineParser.prototype.sourcepos = function (start, end) {
            var linePosOffset = this.linePosOffset + this.lineOffsets[this.lineIdx];
            var lineNum = this.lineStartNum + this.lineIdx;
            var startpos = [lineNum, start + linePosOffset];
            if (typeof end === 'number') {
                return [startpos, [lineNum, end + linePosOffset]];
            }
            return startpos;
        };
        InlineParser.prototype.nextLine = function () {
            this.lineIdx += 1;
            this.linePosOffset = -this.pos;
        };
        // If re matches at current position in the subject, advance
        // position in subject and return the match; otherwise return null.
        InlineParser.prototype.match = function (re) {
            var m = re.exec(this.subject.slice(this.pos));
            if (m === null) {
                return null;
            }
            this.pos += m.index + m[0].length;
            return m[0];
        };
        // Returns the code for the character at the current subject position, or -1
        // there are no more characters.
        InlineParser.prototype.peek = function () {
            if (this.pos < this.subject.length) {
                return this.subject.charCodeAt(this.pos);
            }
            return -1;
        };
        // Parse zero or more space characters, including at most one newline
        InlineParser.prototype.spnl = function () {
            this.match(reSpnl);
            return true;
        };
        // All of the parsers below try to match something at the current position
        // in the subject.  If they succeed in matching anything, they
        // return the inline matched, advancing the subject.
        // Attempt to parse backticks, adding either a backtick code span or a
        // literal sequence of backticks.
        InlineParser.prototype.parseBackticks = function (block) {
            var startpos = this.pos + 1;
            var ticks = this.match(reTicksHere);
            if (ticks === null) {
                return false;
            }
            var afterOpenTicks = this.pos;
            var matched;
            while ((matched = this.match(reTicks)) !== null) {
                if (matched === ticks) {
                    var contents = this.subject.slice(afterOpenTicks, this.pos - ticks.length);
                    var sourcepos = this.sourcepos(startpos, this.pos);
                    var lines = contents.split('\n');
                    if (lines.length > 1) {
                        var lastLine = last(lines);
                        this.lineIdx += lines.length - 1;
                        this.linePosOffset = -(this.pos - lastLine.length - ticks.length);
                        sourcepos[1] = this.sourcepos(this.pos);
                        contents = lines.join(' ');
                    }
                    var node = createNode$1('code', sourcepos);
                    if (contents.length > 0 &&
                        contents.match(/[^ ]/) !== null &&
                        contents[0] == ' ' &&
                        contents[contents.length - 1] == ' ') {
                        node.literal = contents.slice(1, contents.length - 1);
                    }
                    else {
                        node.literal = contents;
                    }
                    node.tickCount = ticks.length;
                    block.appendChild(node);
                    return true;
                }
            }
            // If we got here, we didn't match a closing backtick sequence.
            this.pos = afterOpenTicks;
            block.appendChild(text(ticks, this.sourcepos(startpos, this.pos - 1)));
            return true;
        };
        // Parse a backslash-escaped special character, adding either the escaped
        // character, a hard line break (if the backslash is followed by a newline),
        // or a literal backslash to the block's children.  Assumes current character
        // is a backslash.
        InlineParser.prototype.parseBackslash = function (block) {
            var subj = this.subject;
            var node;
            this.pos += 1;
            var startpos = this.pos;
            if (this.peek() === C_NEWLINE) {
                this.pos += 1;
                node = createNode$1('linebreak', this.sourcepos(this.pos - 1, this.pos));
                block.appendChild(node);
                this.nextLine();
            }
            else if (reEscapable.test(subj.charAt(this.pos))) {
                block.appendChild(text(subj.charAt(this.pos), this.sourcepos(startpos, this.pos)));
                this.pos += 1;
            }
            else {
                block.appendChild(text('\\', this.sourcepos(startpos, startpos)));
            }
            return true;
        };
        // Attempt to parse an autolink (URL or email in pointy brackets).
        InlineParser.prototype.parseAutolink = function (block) {
            var m;
            var dest;
            var node;
            var startpos = this.pos + 1;
            if ((m = this.match(reEmailAutolink))) {
                dest = m.slice(1, m.length - 1);
                node = createNode$1('link', this.sourcepos(startpos, this.pos));
                node.destination = normalizeURI("mailto:" + dest);
                node.title = '';
                node.appendChild(text(dest, this.sourcepos(startpos + 1, this.pos - 1)));
                block.appendChild(node);
                return true;
            }
            if ((m = this.match(reAutolink))) {
                dest = m.slice(1, m.length - 1);
                node = createNode$1('link', this.sourcepos(startpos, this.pos));
                node.destination = normalizeURI(dest);
                node.title = '';
                node.appendChild(text(dest, this.sourcepos(startpos + 1, this.pos - 1)));
                block.appendChild(node);
                return true;
            }
            return false;
        };
        // Attempt to parse a raw HTML tag.
        InlineParser.prototype.parseHtmlTag = function (block) {
            var startpos = this.pos + 1;
            var m = this.match(reHtmlTag);
            if (m === null) {
                return false;
            }
            var node = createNode$1('htmlInline', this.sourcepos(startpos, this.pos));
            node.literal = m;
            block.appendChild(node);
            return true;
        };
        // Scan a sequence of characters with code cc, and return information about
        // the number of delimiters and whether they are positioned such that
        // they can open and/or close emphasis or strong emphasis.  A utility
        // function for strong/emph parsing.
        InlineParser.prototype.scanDelims = function (cc) {
            var numdelims = 0;
            var startpos = this.pos;
            if (cc === C_SINGLEQUOTE || cc === C_DOUBLEQUOTE) {
                numdelims++;
                this.pos++;
            }
            else {
                while (this.peek() === cc) {
                    numdelims++;
                    this.pos++;
                }
            }
            if (numdelims === 0 || (numdelims < 2 && (cc === C_TILDE || cc === C_DOLLAR))) {
                this.pos = startpos;
                return null;
            }
            var charBefore = startpos === 0 ? '\n' : this.subject.charAt(startpos - 1);
            var ccAfter = this.peek();
            var charAfter;
            if (ccAfter === -1) {
                charAfter = '\n';
            }
            else {
                charAfter = fromCodePoint$1(ccAfter);
            }
            var afterIsWhitespace = reUnicodeWhitespaceChar.test(charAfter);
            var afterIsPunctuation = rePunctuation.test(charAfter);
            var beforeIsWhitespace = reUnicodeWhitespaceChar.test(charBefore);
            var beforeIsPunctuation = rePunctuation.test(charBefore);
            var leftFlanking = !afterIsWhitespace && (!afterIsPunctuation || beforeIsWhitespace || beforeIsPunctuation);
            var rightFlanking = !beforeIsWhitespace && (!beforeIsPunctuation || afterIsWhitespace || afterIsPunctuation);
            var canOpen;
            var canClose;
            if (cc === C_UNDERSCORE) {
                canOpen = leftFlanking && (!rightFlanking || beforeIsPunctuation);
                canClose = rightFlanking && (!leftFlanking || afterIsPunctuation);
            }
            else if (cc === C_SINGLEQUOTE || cc === C_DOUBLEQUOTE) {
                canOpen = leftFlanking && !rightFlanking;
                canClose = rightFlanking;
            }
            else if (cc === C_DOLLAR) {
                canOpen = !afterIsWhitespace;
                canClose = !beforeIsWhitespace;
            }
            else {
                canOpen = leftFlanking;
                canClose = rightFlanking;
            }
            this.pos = startpos;
            return { numdelims: numdelims, canOpen: canOpen, canClose: canClose };
        };
        // Handle a delimiter marker for emphasis or a quote.
        InlineParser.prototype.handleDelim = function (cc, block) {
            var res = this.scanDelims(cc);
            if (!res) {
                return false;
            }
            var numdelims = res.numdelims;
            var startpos = this.pos + 1;
            var contents;
            this.pos += numdelims;
            if (cc === C_SINGLEQUOTE) {
                contents = '\u2019';
            }
            else if (cc === C_DOUBLEQUOTE) {
                contents = '\u201C';
            }
            else {
                contents = this.subject.slice(startpos - 1, this.pos);
            }
            var node = text(contents, this.sourcepos(startpos, this.pos));
            block.appendChild(node);
            // Add entry to stack for this opener
            if ((res.canOpen || res.canClose) &&
                (this.options.smart || (cc !== C_SINGLEQUOTE && cc !== C_DOUBLEQUOTE))) {
                this.delimiters = {
                    cc: cc,
                    numdelims: numdelims,
                    origdelims: numdelims,
                    node: node,
                    previous: this.delimiters,
                    next: null,
                    canOpen: res.canOpen,
                    canClose: res.canClose,
                };
                if (this.delimiters.previous) {
                    this.delimiters.previous.next = this.delimiters;
                }
            }
            return true;
        };
        InlineParser.prototype.removeDelimiter = function (delim) {
            if (delim.previous !== null) {
                delim.previous.next = delim.next;
            }
            if (delim.next === null) {
                // top of stack
                this.delimiters = delim.previous;
            }
            else {
                delim.next.previous = delim.previous;
            }
        };
        InlineParser.prototype.removeDelimitersBetween = function (bottom, top) {
            if (bottom.next !== top) {
                bottom.next = top;
                top.previous = bottom;
            }
        };
        /**
         * Process all delimiters - emphasis, strong emphasis, strikethrough(gfm)
         * If the smart punctuation options is true,
         * convert single/double quotes to corresponding unicode characters.
         **/
        InlineParser.prototype.processEmphasis = function (stackBottom) {
            var _a;
            var opener;
            var closer;
            var oldCloser;
            var openerInl, closerInl;
            var openerFound;
            var oddMatch = false;
            var openersBottom = (_a = {},
                _a[C_UNDERSCORE] = [stackBottom, stackBottom, stackBottom],
                _a[C_ASTERISK] = [stackBottom, stackBottom, stackBottom],
                _a[C_SINGLEQUOTE] = [stackBottom],
                _a[C_DOUBLEQUOTE] = [stackBottom],
                _a[C_TILDE] = [stackBottom],
                _a[C_DOLLAR] = [stackBottom],
                _a);
            // find first closer above stackBottom:
            closer = this.delimiters;
            while (closer !== null && closer.previous !== stackBottom) {
                closer = closer.previous;
            }
            // move forward, looking for closers, and handling each
            while (closer !== null) {
                var closercc = closer.cc;
                var closerEmph = closercc === C_UNDERSCORE || closercc === C_ASTERISK;
                if (!closer.canClose) {
                    closer = closer.next;
                }
                else {
                    // found emphasis closer. now look back for first matching opener:
                    opener = closer.previous;
                    openerFound = false;
                    while (opener !== null &&
                        opener !== stackBottom &&
                        opener !== openersBottom[closercc][closerEmph ? closer.origdelims % 3 : 0]) {
                        oddMatch =
                            closerEmph &&
                                (closer.canOpen || opener.canClose) &&
                                closer.origdelims % 3 !== 0 &&
                                (opener.origdelims + closer.origdelims) % 3 === 0;
                        if (opener.cc === closer.cc && opener.canOpen && !oddMatch) {
                            openerFound = true;
                            break;
                        }
                        opener = opener.previous;
                    }
                    oldCloser = closer;
                    if (closerEmph || closercc === C_TILDE || closercc === C_DOLLAR) {
                        if (!openerFound) {
                            closer = closer.next;
                        }
                        else if (opener) {
                            // (null opener check for type narrowing)
                            // calculate actual number of delimiters used from closer
                            var useDelims = closer.numdelims >= 2 && opener.numdelims >= 2 ? 2 : 1;
                            var emptyDelims = closerEmph ? 0 : 1;
                            openerInl = opener.node;
                            closerInl = closer.node;
                            // build contents for new emph element
                            var nodeType = closerEmph
                                ? useDelims === 1
                                    ? 'emph'
                                    : 'strong'
                                : 'strike';
                            if (closercc === C_DOLLAR) {
                                nodeType = 'customInline';
                            }
                            var newNode = createNode$1(nodeType);
                            var openerEndPos = openerInl.sourcepos[1];
                            var closerStartPos = closerInl.sourcepos[0];
                            newNode.sourcepos = [
                                [openerEndPos[0], openerEndPos[1] - useDelims + 1],
                                [closerStartPos[0], closerStartPos[1] + useDelims - 1],
                            ];
                            openerInl.sourcepos[1][1] -= useDelims;
                            closerInl.sourcepos[0][1] += useDelims;
                            openerInl.literal = openerInl.literal.slice(useDelims);
                            closerInl.literal = closerInl.literal.slice(useDelims);
                            opener.numdelims -= useDelims;
                            closer.numdelims -= useDelims;
                            // remove used delimiters from stack elts and inlines
                            var tmp = openerInl.next;
                            var next = void 0;
                            while (tmp && tmp !== closerInl) {
                                next = tmp.next;
                                tmp.unlink();
                                newNode.appendChild(tmp);
                                tmp = next;
                            }
                            // build custom inline node
                            if (closercc === C_DOLLAR) {
                                var textNode = newNode.firstChild;
                                var literal = textNode.literal || '';
                                var info = literal.split(/\s/)[0];
                                newNode.info = info;
                                if (literal.length === info.length + 1) {
                                    textNode.unlink();
                                }
                                else {
                                    textNode.sourcepos[0][1] += info.length;
                                    textNode.literal = literal.replace(info + " ", '');
                                }
                            }
                            openerInl.insertAfter(newNode);
                            // remove elts between opener and closer in delimiters stack
                            this.removeDelimitersBetween(opener, closer);
                            // if opener has 0 delims, remove it and the inline
                            // if opener has 1 delims and character is tilde, remove delimiter only
                            if (opener.numdelims <= emptyDelims) {
                                if (opener.numdelims === 0) {
                                    openerInl.unlink();
                                }
                                this.removeDelimiter(opener);
                            }
                            // if closer has 0 delims, remove it and the inline
                            // if closer has 1 delims and character is tilde, remove delimiter only
                            if (closer.numdelims <= emptyDelims) {
                                if (closer.numdelims === 0) {
                                    closerInl.unlink();
                                }
                                var tempstack = closer.next;
                                this.removeDelimiter(closer);
                                closer = tempstack;
                            }
                        }
                    }
                    else if (closercc === C_SINGLEQUOTE) {
                        closer.node.literal = '\u2019';
                        if (openerFound) {
                            opener.node.literal = '\u2018';
                        }
                        closer = closer.next;
                    }
                    else if (closercc === C_DOUBLEQUOTE) {
                        closer.node.literal = '\u201D';
                        if (openerFound) {
                            opener.node.literal = '\u201C';
                        }
                        closer = closer.next;
                    }
                    if (!openerFound) {
                        // Set lower bound for future searches for openers:
                        openersBottom[closercc][closerEmph ? oldCloser.origdelims % 3 : 0] = oldCloser.previous;
                        if (!oldCloser.canOpen) {
                            // We can remove a closer that can't be an opener,
                            // once we've seen there's no matching opener:
                            this.removeDelimiter(oldCloser);
                        }
                    }
                }
            }
            // remove all delimiters
            while (this.delimiters !== null && this.delimiters !== stackBottom) {
                this.removeDelimiter(this.delimiters);
            }
        };
        // Attempt to parse link title (sans quotes), returning the string
        // or null if no match.
        InlineParser.prototype.parseLinkTitle = function () {
            var title = this.match(reLinkTitle);
            if (title === null) {
                return null;
            }
            // chop off quotes from title and unescape:
            return unescapeString(title.substr(1, title.length - 2));
        };
        // Attempt to parse link destination, returning the string or null if no match.
        InlineParser.prototype.parseLinkDestination = function () {
            var res = this.match(reLinkDestinationBraces);
            if (res === null) {
                if (this.peek() === C_LESSTHAN$1) {
                    return null;
                }
                // @TODO handrolled parser; res should be null or the string
                var savepos = this.pos;
                var openparens = 0;
                var c = void 0;
                while ((c = this.peek()) !== -1) {
                    if (c === C_BACKSLASH && reEscapable.test(this.subject.charAt(this.pos + 1))) {
                        this.pos += 1;
                        if (this.peek() !== -1) {
                            this.pos += 1;
                        }
                    }
                    else if (c === C_OPEN_PAREN) {
                        this.pos += 1;
                        openparens += 1;
                    }
                    else if (c === C_CLOSE_PAREN) {
                        if (openparens < 1) {
                            break;
                        }
                        else {
                            this.pos += 1;
                            openparens -= 1;
                        }
                    }
                    else if (reWhitespaceChar.exec(fromCodePoint$1(c)) !== null) {
                        break;
                    }
                    else {
                        this.pos += 1;
                    }
                }
                if (this.pos === savepos && c !== C_CLOSE_PAREN) {
                    return null;
                }
                if (openparens !== 0) {
                    return null;
                }
                res = this.subject.substr(savepos, this.pos - savepos);
                return normalizeURI(unescapeString(res));
            } // chop off surrounding <..>:
            return normalizeURI(unescapeString(res.substr(1, res.length - 2)));
        };
        // Attempt to parse a link label, returning number of characters parsed.
        InlineParser.prototype.parseLinkLabel = function () {
            var m = this.match(reLinkLabel);
            if (m === null || m.length > 1001) {
                return 0;
            }
            return m.length;
        };
        // Add open bracket to delimiter stack and add a text node to block's children.
        InlineParser.prototype.parseOpenBracket = function (block) {
            var startpos = this.pos;
            this.pos += 1;
            var node = text('[', this.sourcepos(this.pos, this.pos));
            block.appendChild(node);
            // Add entry to stack for this opener
            this.addBracket(node, startpos, false);
            return true;
        };
        // IF next character is [, and ! delimiter to delimiter stack and
        // add a text node to block's children.  Otherwise just add a text node.
        InlineParser.prototype.parseBang = function (block) {
            var startpos = this.pos;
            this.pos += 1;
            if (this.peek() === C_OPEN_BRACKET$1) {
                this.pos += 1;
                var node = text('![', this.sourcepos(this.pos - 1, this.pos));
                block.appendChild(node);
                // Add entry to stack for this opener
                this.addBracket(node, startpos + 1, true);
            }
            else {
                var node = text('!', this.sourcepos(this.pos, this.pos));
                block.appendChild(node);
            }
            return true;
        };
        // Try to match close bracket against an opening in the delimiter
        // stack.  Add either a link or image, or a plain [ character,
        // to block's children.  If there is a matching delimiter,
        // remove it from the delimiter stack.
        InlineParser.prototype.parseCloseBracket = function (block) {
            var dest = null;
            var title = null;
            var matched = false;
            this.pos += 1;
            var startpos = this.pos;
            // get last [ or ![
            var opener = this.brackets;
            if (opener === null) {
                // no matched opener, just return a literal
                block.appendChild(text(']', this.sourcepos(startpos, startpos)));
                return true;
            }
            if (!opener.active) {
                // no matched opener, just return a literal
                block.appendChild(text(']', this.sourcepos(startpos, startpos)));
                // take opener off brackets stack
                this.removeBracket();
                return true;
            }
            // If we got here, open is a potential opener
            var isImage = opener.image;
            // Check to see if we have a link/image
            var savepos = this.pos;
            // Inline link?
            if (this.peek() === C_OPEN_PAREN) {
                this.pos++;
                if (this.spnl() &&
                    (dest = this.parseLinkDestination()) !== null &&
                    this.spnl() &&
                    // make sure there's a space before the title:
                    ((reWhitespaceChar.test(this.subject.charAt(this.pos - 1)) &&
                        (title = this.parseLinkTitle())) ||
                        true) &&
                    this.spnl() &&
                    this.peek() === C_CLOSE_PAREN) {
                    this.pos += 1;
                    matched = true;
                }
                else {
                    this.pos = savepos;
                }
            }
            var refLabel = '';
            if (!matched) {
                // Next, see if there's a link label
                var beforelabel = this.pos;
                var n = this.parseLinkLabel();
                if (n > 2) {
                    refLabel = this.subject.slice(beforelabel, beforelabel + n);
                }
                else if (!opener.bracketAfter) {
                    // Empty or missing second label means to use the first label as the reference.
                    // The reference must not contain a bracket. If we know there's a bracket, we don't even bother checking it.
                    refLabel = this.subject.slice(opener.index, startpos);
                }
                if (n === 0) {
                    // If shortcut reference link, rewind before spaces we skipped.
                    this.pos = savepos;
                }
                if (refLabel) {
                    refLabel = normalizeReference(refLabel);
                    // lookup rawlabel in refMap
                    var link = this.refMap[refLabel];
                    if (link) {
                        dest = link.destination;
                        title = link.title;
                        matched = true;
                    }
                }
            }
            if (matched) {
                var node = createNode$1(isImage ? 'image' : 'link');
                node.destination = dest;
                node.title = title || '';
                node.sourcepos = [opener.startpos, this.sourcepos(this.pos)];
                var tmp = opener.node.next;
                var next = void 0;
                while (tmp) {
                    next = tmp.next;
                    tmp.unlink();
                    node.appendChild(tmp);
                    tmp = next;
                }
                block.appendChild(node);
                this.processEmphasis(opener.previousDelimiter);
                this.removeBracket();
                opener.node.unlink();
                // We remove this bracket and processEmphasis will remove later delimiters.
                // Now, for a link, we also deactivate earlier link openers.
                // (no links in links)
                if (!isImage) {
                    opener = this.brackets;
                    while (opener !== null) {
                        if (!opener.image) {
                            opener.active = false; // deactivate this opener
                        }
                        opener = opener.previous;
                    }
                }
                if (this.options.referenceDefinition) {
                    this.refLinkCandidateMap[block.id] = { node: block, refLabel: refLabel };
                }
                return true;
            } // no match
            this.removeBracket(); // remove this opener from stack
            this.pos = startpos;
            block.appendChild(text(']', this.sourcepos(startpos, startpos)));
            if (this.options.referenceDefinition) {
                this.refLinkCandidateMap[block.id] = { node: block, refLabel: refLabel };
            }
            return true;
        };
        InlineParser.prototype.addBracket = function (node, index, image) {
            if (this.brackets !== null) {
                this.brackets.bracketAfter = true;
            }
            this.brackets = {
                node: node,
                startpos: this.sourcepos(index + (image ? 0 : 1)),
                previous: this.brackets,
                previousDelimiter: this.delimiters,
                index: index,
                image: image,
                active: true,
            };
        };
        InlineParser.prototype.removeBracket = function () {
            if (this.brackets) {
                this.brackets = this.brackets.previous;
            }
        };
        // Attempt to parse an entity.
        InlineParser.prototype.parseEntity = function (block) {
            var m;
            var startpos = this.pos + 1;
            if ((m = this.match(reEntityHere))) {
                block.appendChild(text(lib.decodeHTML(m), this.sourcepos(startpos, this.pos)));
                return true;
            }
            return false;
        };
        // Parse a run of ordinary characters, or a single character with
        // a special meaning in markdown, as a plain string.
        InlineParser.prototype.parseString = function (block) {
            var m;
            var startpos = this.pos + 1;
            if ((m = this.match(reMain))) {
                if (this.options.smart) {
                    var lit = m.replace(reEllipses, '\u2026').replace(reDash, function (chars) {
                        var enCount = 0;
                        var emCount = 0;
                        if (chars.length % 3 === 0) {
                            // If divisible by 3, use all em dashes
                            emCount = chars.length / 3;
                        }
                        else if (chars.length % 2 === 0) {
                            // If divisible by 2, use all en dashes
                            enCount = chars.length / 2;
                        }
                        else if (chars.length % 3 === 2) {
                            // If 2 extra dashes, use en dash for last 2; em dashes for rest
                            enCount = 1;
                            emCount = (chars.length - 2) / 3;
                        }
                        else {
                            // Use en dashes for last 4 hyphens; em dashes for rest
                            enCount = 2;
                            emCount = (chars.length - 4) / 3;
                        }
                        return repeat('\u2014', emCount) + repeat('\u2013', enCount);
                    });
                    block.appendChild(text(lit, this.sourcepos(startpos, this.pos)));
                }
                else {
                    var node = text(m, this.sourcepos(startpos, this.pos));
                    block.appendChild(node);
                }
                return true;
            }
            return false;
        };
        // Parse a newline.  If it was preceded by two spaces, return a hard
        // line break; otherwise a soft line break.
        InlineParser.prototype.parseNewline = function (block) {
            this.pos += 1; // assume we're at a \n
            // check previous node for trailing spaces
            var lastc = block.lastChild;
            if (lastc && lastc.type === 'text' && lastc.literal[lastc.literal.length - 1] === ' ') {
                var hardbreak = lastc.literal[lastc.literal.length - 2] === ' ';
                var litLen = lastc.literal.length;
                lastc.literal = lastc.literal.replace(reFinalSpace, '');
                var finalSpaceLen = litLen - lastc.literal.length;
                lastc.sourcepos[1][1] -= finalSpaceLen;
                block.appendChild(createNode$1(hardbreak ? 'linebreak' : 'softbreak', this.sourcepos(this.pos - finalSpaceLen, this.pos)));
            }
            else {
                block.appendChild(createNode$1('softbreak', this.sourcepos(this.pos, this.pos)));
            }
            this.nextLine();
            this.match(reInitialSpace); // gobble leading spaces in next line
            return true;
        };
        // Attempt to parse a link reference, modifying refmap.
        InlineParser.prototype.parseReference = function (block, refMap) {
            if (!this.options.referenceDefinition) {
                return 0;
            }
            this.subject = block.stringContent;
            this.pos = 0;
            var title = null;
            var startpos = this.pos;
            // label:
            var matchChars = this.parseLinkLabel();
            if (matchChars === 0) {
                return 0;
            }
            var rawlabel = this.subject.substr(0, matchChars);
            // colon:
            if (this.peek() === C_COLON) {
                this.pos++;
            }
            else {
                this.pos = startpos;
                return 0;
            }
            //  link url
            this.spnl();
            var dest = this.parseLinkDestination();
            if (dest === null) {
                this.pos = startpos;
                return 0;
            }
            var beforetitle = this.pos;
            this.spnl();
            if (this.pos !== beforetitle) {
                title = this.parseLinkTitle();
            }
            if (title === null) {
                title = '';
                // rewind before spaces
                this.pos = beforetitle;
            }
            // make sure we're at line end:
            var atLineEnd = true;
            if (this.match(reSpaceAtEndOfLine) === null) {
                if (title === '') {
                    atLineEnd = false;
                }
                else {
                    // the potential title we found is not at the line end,
                    // but it could still be a legal link reference if we
                    // discard the title
                    title = '';
                    // rewind before spaces
                    this.pos = beforetitle;
                    // and instead check if the link URL is at the line end
                    atLineEnd = this.match(reSpaceAtEndOfLine) !== null;
                }
            }
            if (!atLineEnd) {
                this.pos = startpos;
                return 0;
            }
            var normalLabel = normalizeReference(rawlabel);
            if (normalLabel === '') {
                // label must contain non-whitespace characters
                this.pos = startpos;
                return 0;
            }
            var sourcepos = this.getReferenceDefSourcepos(block);
            block.sourcepos[0][0] = sourcepos[1][0] + 1;
            var node = createNode$1('refDef', sourcepos);
            node.title = title;
            node.dest = dest;
            node.label = normalLabel;
            block.insertBefore(node);
            if (!refMap[normalLabel]) {
                refMap[normalLabel] = createRefDefState(node);
            }
            else {
                this.refDefCandidateMap[node.id] = node;
            }
            return this.pos - startpos;
        };
        InlineParser.prototype.mergeTextNodes = function (walker) {
            var event;
            var textNodes = [];
            while ((event = walker.next())) {
                var entering = event.entering, node = event.node;
                if (entering && node.type === 'text') {
                    textNodes.push(node);
                }
                else if (textNodes.length === 1) {
                    textNodes = [];
                }
                else if (textNodes.length > 1) {
                    var firstNode = textNodes[0];
                    var lastNode = textNodes[textNodes.length - 1];
                    if (firstNode.sourcepos && lastNode.sourcepos) {
                        firstNode.sourcepos[1] = lastNode.sourcepos[1];
                    }
                    firstNode.next = lastNode.next;
                    if (firstNode.next) {
                        firstNode.next.prev = firstNode;
                    }
                    for (var i = 1; i < textNodes.length; i += 1) {
                        firstNode.literal += textNodes[i].literal;
                        textNodes[i].unlink();
                    }
                    textNodes = [];
                }
            }
        };
        InlineParser.prototype.getReferenceDefSourcepos = function (block) {
            var lines = block.stringContent.split(/\n|\r\n/);
            var passedUrlLine = false;
            var quotationCount = 0;
            var lastLineOffset = { line: 0, ch: 0 };
            for (var i = 0; i < lines.length; i += 1) {
                var line = lines[i];
                if (reWhitespaceChar.test(line)) {
                    break;
                }
                if (/\:/.test(line) && quotationCount === 0) {
                    if (passedUrlLine) {
                        break;
                    }
                    var lineOffset = line.indexOf(':') === line.length - 1 ? i + 1 : i;
                    lastLineOffset = { line: lineOffset, ch: lines[lineOffset].length };
                    passedUrlLine = true;
                }
                // should consider extendable title
                var matched = line.match(/'|"/g);
                if (matched) {
                    quotationCount += matched.length;
                }
                if (quotationCount === 2) {
                    lastLineOffset = { line: i, ch: line.length };
                    break;
                }
            }
            return [
                [block.sourcepos[0][0], block.sourcepos[0][1]],
                [block.sourcepos[0][0] + lastLineOffset.line, lastLineOffset.ch],
            ];
        };
        // Parse the next inline element in subject, advancing subject position.
        // On success, add the result to block's children and return true.
        // On failure, return false.
        InlineParser.prototype.parseInline = function (block) {
            var _a;
            var res = false;
            var c = this.peek();
            if (c === -1) {
                return false;
            }
            switch (c) {
                case C_NEWLINE:
                    res = this.parseNewline(block);
                    break;
                case C_BACKSLASH:
                    res = this.parseBackslash(block);
                    break;
                case C_BACKTICK:
                    res = this.parseBackticks(block);
                    break;
                case C_ASTERISK:
                case C_UNDERSCORE:
                case C_TILDE:
                case C_DOLLAR:
                    res = this.handleDelim(c, block);
                    break;
                case C_SINGLEQUOTE:
                case C_DOUBLEQUOTE:
                    res = !!((_a = this.options) === null || _a === void 0 ? void 0 : _a.smart) && this.handleDelim(c, block);
                    break;
                case C_OPEN_BRACKET$1:
                    res = this.parseOpenBracket(block);
                    break;
                case C_BANG:
                    res = this.parseBang(block);
                    break;
                case C_CLOSE_BRACKET:
                    res = this.parseCloseBracket(block);
                    break;
                case C_LESSTHAN$1:
                    res = this.parseAutolink(block) || this.parseHtmlTag(block);
                    break;
                case C_AMPERSAND:
                    res = this.parseEntity(block);
                    break;
                default:
                    res = this.parseString(block);
                    break;
            }
            if (!res) {
                this.pos += 1;
                block.appendChild(text(fromCodePoint$1(c), this.sourcepos(this.pos, this.pos + 1)));
            }
            return true;
        };
        // Parse string content in block into inline children,
        // using refmap to resolve references.
        InlineParser.prototype.parse = function (block) {
            this.subject = block.stringContent.trim();
            this.pos = 0;
            this.delimiters = null;
            this.brackets = null;
            this.lineOffsets = block.lineOffsets || [0];
            this.lineIdx = 0;
            this.linePosOffset = 0;
            this.lineStartNum = block.sourcepos[0][0];
            if (isHeading(block)) {
                this.lineOffsets[0] += block.level + 1;
            }
            while (this.parseInline(block)) { }
            block.stringContent = null; // allow raw string to be garbage collected
            this.processEmphasis(null);
            this.mergeTextNodes(block.walker());
            var _a = this.options, extendedAutolinks = _a.extendedAutolinks, customParser = _a.customParser;
            if (extendedAutolinks) {
                convertExtAutoLinks(block.walker(), extendedAutolinks);
            }
            if (customParser && block.firstChild) {
                var event_1;
                var walker = block.firstChild.walker();
                while ((event_1 = walker.next())) {
                    var node = event_1.node, entering = event_1.entering;
                    if (customParser[node.type]) {
                        customParser[node.type](node, { entering: entering, options: this.options });
                    }
                }
            }
        };
        return InlineParser;
    }());

    var reTaskListItemMarker = /^\[([ \txX])\][ \t]+/;
    // finalize for block handler
    function taskListItemFinalize(_, block) {
        if (block.firstChild && block.firstChild.type === 'paragraph') {
            var p = block.firstChild;
            var m = p.stringContent.match(reTaskListItemMarker);
            if (m) {
                var mLen = m[0].length;
                p.stringContent = p.stringContent.substring(mLen - 1);
                p.sourcepos[0][1] += mLen;
                p.lineOffsets[0] += mLen;
                block.listData.task = true;
                block.listData.checked = /[xX]/.test(m[1]);
            }
        }
    }

    var table = {
        continue: function () {
            return 0 /* Go */;
        },
        finalize: function () { },
        canContain: function (t) {
            return t === 'tableHead' || t === 'tableBody';
        },
        acceptsLines: false,
    };
    var tableBody$1 = {
        continue: function () {
            return 0 /* Go */;
        },
        finalize: function () { },
        canContain: function (t) {
            return t === 'tableRow';
        },
        acceptsLines: false,
    };
    var tableHead$1 = {
        continue: function () {
            return 1 /* Stop */;
        },
        finalize: function () { },
        canContain: function (t) {
            return t === 'tableRow' || t === 'tableDelimRow';
        },
        acceptsLines: false,
    };
    var tableDelimRow = {
        continue: function () {
            return 1 /* Stop */;
        },
        finalize: function () { },
        canContain: function (t) {
            return t === 'tableDelimCell';
        },
        acceptsLines: false,
    };
    var tableDelimCell = {
        continue: function () {
            return 1 /* Stop */;
        },
        finalize: function () { },
        canContain: function () {
            return false;
        },
        acceptsLines: false,
    };
    var tableRow = {
        continue: function () {
            return 1 /* Stop */;
        },
        finalize: function () { },
        canContain: function (t) {
            return t === 'tableCell';
        },
        acceptsLines: false,
    };
    var tableCell = {
        continue: function () {
            return 1 /* Stop */;
        },
        finalize: function () { },
        canContain: function () {
            return false;
        },
        acceptsLines: false,
    };

    var CODE_INDENT = 4;
    var C_TAB = 9;
    var C_GREATERTHAN = 62;
    var C_LESSTHAN = 60;
    var C_SPACE = 32;
    var C_OPEN_BRACKET = 91;
    var reNonSpace = /[^ \t\f\v\r\n]/;
    var reClosingCodeFence = /^(?:`{3,}|~{3,})(?= *$)/;
    // Returns true if block ends with a blank line, descending if needed
    // into lists and sublists.
    function endsWithBlankLine(block) {
        var curBlock = block;
        while (curBlock) {
            if (curBlock.lastLineBlank) {
                return true;
            }
            var t = curBlock.type;
            if (!curBlock.lastLineChecked && (t === 'list' || t === 'item')) {
                curBlock.lastLineChecked = true;
                curBlock = curBlock.lastChild;
            }
            else {
                curBlock.lastLineChecked = true;
                break;
            }
        }
        return false;
    }
    function peek(ln, pos) {
        if (pos < ln.length) {
            return ln.charCodeAt(pos);
        }
        return -1;
    }
    // Returns true if string contains only space characters.
    function isBlank(s) {
        return !reNonSpace.test(s);
    }
    function isSpaceOrTab(c) {
        return c === C_SPACE || c === C_TAB;
    }

    var reClosingCustomBlock = /^\$\$$/;
    var customBlock$1 = {
        continue: function (parser, container) {
            var line = parser.currentLine;
            var match = line.match(reClosingCustomBlock);
            if (match) {
                // closing custom block
                parser.lastLineLength = match[0].length;
                parser.finalize(container, parser.lineNumber);
                return 2 /* Finished */;
            }
            // skip optional spaces of custom block offset
            var i = container.offset;
            while (i > 0 && isSpaceOrTab(peek(line, parser.offset))) {
                parser.advanceOffset(1, true);
                i--;
            }
            return 0 /* Go */;
        },
        finalize: function (_, block) {
            if (block.stringContent === null) {
                return;
            }
            // first line becomes info string
            var content = block.stringContent;
            var newlinePos = content.indexOf('\n');
            var firstLine = content.slice(0, newlinePos);
            var rest = content.slice(newlinePos + 1);
            var infoString = firstLine.match(/^(\s*)(.*)/);
            block.info = unescapeString(infoString[2].trim());
            block.literal = rest;
            block.stringContent = null;
        },
        canContain: function () {
            return false;
        },
        acceptsLines: true,
    };

    var noop = {
        continue: function () {
            return 1 /* Stop */;
        },
        finalize: function () { },
        canContain: function () {
            return false;
        },
        acceptsLines: true,
    };
    var document$1 = {
        continue: function () {
            return 0 /* Go */;
        },
        finalize: function () { },
        canContain: function (t) {
            return t !== 'item';
        },
        acceptsLines: false,
    };
    var list = {
        continue: function () {
            return 0 /* Go */;
        },
        finalize: function (_, block) {
            var item = block.firstChild;
            while (item) {
                // check for non-final list item ending with blank line:
                if (endsWithBlankLine(item) && item.next) {
                    block.listData.tight = false;
                    break;
                }
                // recurse into children of list item, to see if there are
                // spaces between any of them:
                var subitem = item.firstChild;
                while (subitem) {
                    if (endsWithBlankLine(subitem) && (item.next || subitem.next)) {
                        block.listData.tight = false;
                        break;
                    }
                    subitem = subitem.next;
                }
                item = item.next;
            }
        },
        canContain: function (t) {
            return t === 'item';
        },
        acceptsLines: false,
    };
    var blockQuote$1 = {
        continue: function (parser) {
            var ln = parser.currentLine;
            if (!parser.indented && peek(ln, parser.nextNonspace) === C_GREATERTHAN) {
                parser.advanceNextNonspace();
                parser.advanceOffset(1, false);
                if (isSpaceOrTab(peek(ln, parser.offset))) {
                    parser.advanceOffset(1, true);
                }
            }
            else {
                return 1 /* Stop */;
            }
            return 0 /* Go */;
        },
        finalize: function () { },
        canContain: function (t) {
            return t !== 'item';
        },
        acceptsLines: false,
    };
    var item = {
        continue: function (parser, container) {
            if (parser.blank) {
                if (container.firstChild === null) {
                    // Blank line after empty list item
                    return 1 /* Stop */;
                }
                parser.advanceNextNonspace();
            }
            else if (parser.indent >= container.listData.markerOffset + container.listData.padding) {
                parser.advanceOffset(container.listData.markerOffset + container.listData.padding, true);
            }
            else {
                return 1 /* Stop */;
            }
            return 0 /* Go */;
        },
        finalize: taskListItemFinalize,
        canContain: function (t) {
            return t !== 'item';
        },
        acceptsLines: false,
    };
    var heading = {
        continue: function () {
            // a heading can never container > 1 line, so fail to match:
            return 1 /* Stop */;
        },
        finalize: function () { },
        canContain: function () {
            return false;
        },
        acceptsLines: false,
    };
    var thematicBreak$1 = {
        continue: function () {
            // a thematic break can never container > 1 line, so fail to match:
            return 1 /* Stop */;
        },
        finalize: function () { },
        canContain: function () {
            return false;
        },
        acceptsLines: false,
    };
    var codeBlock = {
        continue: function (parser, container) {
            var ln = parser.currentLine;
            var indent = parser.indent;
            if (container.isFenced) {
                // fenced
                var match = indent <= 3 &&
                    ln.charAt(parser.nextNonspace) === container.fenceChar &&
                    ln.slice(parser.nextNonspace).match(reClosingCodeFence);
                if (match && match[0].length >= container.fenceLength) {
                    // closing fence - we're at end of line, so we can return
                    parser.lastLineLength = parser.offset + indent + match[0].length;
                    parser.finalize(container, parser.lineNumber);
                    return 2 /* Finished */;
                }
                // skip optional spaces of fence offset
                var i = container.fenceOffset;
                while (i > 0 && isSpaceOrTab(peek(ln, parser.offset))) {
                    parser.advanceOffset(1, true);
                    i--;
                }
            }
            else {
                // indented
                if (indent >= CODE_INDENT) {
                    parser.advanceOffset(CODE_INDENT, true);
                }
                else if (parser.blank) {
                    parser.advanceNextNonspace();
                }
                else {
                    return 1 /* Stop */;
                }
            }
            return 0 /* Go */;
        },
        finalize: function (_, block) {
            var _a;
            if (block.stringContent === null) {
                return;
            }
            if (block.isFenced) {
                // fenced
                // first line becomes info string
                var content = block.stringContent;
                var newlinePos = content.indexOf('\n');
                var firstLine = content.slice(0, newlinePos);
                var rest = content.slice(newlinePos + 1);
                var infoString = firstLine.match(/^(\s*)(.*)/);
                block.infoPadding = infoString[1].length;
                block.info = unescapeString(infoString[2].trim());
                block.literal = rest;
            }
            else {
                // indented
                block.literal = (_a = block.stringContent) === null || _a === void 0 ? void 0 : _a.replace(/(\n *)+$/, '\n');
            }
            block.stringContent = null; // allow GC
        },
        canContain: function () {
            return false;
        },
        acceptsLines: true,
    };
    var htmlBlock$1 = {
        continue: function (parser, container) {
            return parser.blank && (container.htmlBlockType === 6 || container.htmlBlockType === 7)
                ? 1 /* Stop */
                : 0 /* Go */;
        },
        finalize: function (_, block) {
            var _a;
            block.literal = ((_a = block.stringContent) === null || _a === void 0 ? void 0 : _a.replace(/(\n *)+$/, '')) || null;
            block.stringContent = null; // allow GC
        },
        canContain: function () {
            return false;
        },
        acceptsLines: true,
    };
    var paragraph = {
        continue: function (parser) {
            return parser.blank ? 1 /* Stop */ : 0 /* Go */;
        },
        finalize: function (parser, block) {
            if (block.stringContent === null) {
                return;
            }
            var pos;
            var hasReferenceDefs = false;
            // try parsing the beginning as link reference definitions:
            while (peek(block.stringContent, 0) === C_OPEN_BRACKET &&
                (pos = parser.inlineParser.parseReference(block, parser.refMap))) {
                block.stringContent = block.stringContent.slice(pos);
                hasReferenceDefs = true;
            }
            if (hasReferenceDefs && isBlank(block.stringContent)) {
                block.unlink();
            }
        },
        canContain: function () {
            return false;
        },
        acceptsLines: true,
    };
    var refDef = noop;
    var frontMatter$2 = noop;
    var blockHandlers = {
        document: document$1,
        list: list,
        blockQuote: blockQuote$1,
        item: item,
        heading: heading,
        thematicBreak: thematicBreak$1,
        codeBlock: codeBlock,
        htmlBlock: htmlBlock$1,
        paragraph: paragraph,
        table: table,
        tableBody: tableBody$1,
        tableHead: tableHead$1,
        tableRow: tableRow,
        tableCell: tableCell,
        tableDelimRow: tableDelimRow,
        tableDelimCell: tableDelimCell,
        refDef: refDef,
        customBlock: customBlock$1,
        frontMatter: frontMatter$2,
    };

    function parseRowContent(content) {
        var startIdx = 0;
        var offset = 0;
        var cells = [];
        for (var i = 0; i < content.length; i += 1) {
            if (content[i] === '|' && content[i - 1] !== '\\') {
                var cell = content.substring(startIdx, i);
                if (startIdx === 0 && isEmpty(cell)) {
                    offset = i + 1;
                }
                else {
                    cells.push(cell);
                }
                startIdx = i + 1;
            }
        }
        if (startIdx < content.length) {
            var cell = content.substring(startIdx, content.length);
            if (!isEmpty(cell)) {
                cells.push(cell);
            }
        }
        return [offset, cells];
    }
    function generateTableCells(cellType, contents, lineNum, chPos) {
        var cells = [];
        for (var _i = 0, contents_1 = contents; _i < contents_1.length; _i++) {
            var content = contents_1[_i];
            var preSpaces = content.match(/^[ \t]+/);
            var paddingLeft = preSpaces ? preSpaces[0].length : 0;
            var paddingRight = void 0, trimmed = void 0;
            if (paddingLeft === content.length) {
                paddingLeft = 0;
                paddingRight = 0;
                trimmed = '';
            }
            else {
                var postSpaces = content.match(/[ \t]+$/);
                paddingRight = postSpaces ? postSpaces[0].length : 0;
                trimmed = content.slice(paddingLeft, content.length - paddingRight);
            }
            var chPosStart = chPos + paddingLeft;
            var tableCell = createNode$1(cellType, [
                [lineNum, chPos],
                [lineNum, chPos + content.length - 1],
            ]);
            tableCell.stringContent = trimmed.replace(/\\\|/g, '|'); // replace esacped pipe(\|)
            tableCell.startIdx = cells.length;
            tableCell.endIdx = cells.length;
            tableCell.lineOffsets = [chPosStart - 1];
            tableCell.paddingLeft = paddingLeft;
            tableCell.paddingRight = paddingRight;
            cells.push(tableCell);
            chPos += content.length + 1;
        }
        return cells;
    }
    function getColumnFromDelimCell(cellNode) {
        var align = null;
        var content = cellNode.stringContent;
        var firstCh = content[0];
        var lastCh = content[content.length - 1];
        if (lastCh === ':') {
            align = firstCh === ':' ? 'center' : 'right';
        }
        else if (firstCh === ':') {
            align = 'left';
        }
        return { align: align };
    }
    var tableHead = function (parser, container) {
        var stringContent = container.stringContent;
        if (container.type === 'paragraph' && !parser.indented && !parser.blank) {
            var lastNewLineIdx = stringContent.length - 1;
            var lastLineStartIdx = stringContent.lastIndexOf('\n', lastNewLineIdx - 1) + 1;
            var headerContent = stringContent.slice(lastLineStartIdx, lastNewLineIdx);
            var delimContent = parser.currentLine.slice(parser.nextNonspace);
            var _a = parseRowContent(headerContent), headerOffset = _a[0], headerCells = _a[1];
            var _b = parseRowContent(delimContent), delimOffset = _b[0], delimCells = _b[1];
            var reValidDelimCell_1 = /^[ \t]*:?-+:?[ \t]*$/;
            if (
            // not checking if the number of header cells and delimiter cells are the same
            // to consider the case of merged-column (via plugin)
            !headerCells.length ||
                !delimCells.length ||
                delimCells.some(function (cell) { return !reValidDelimCell_1.test(cell); }) ||
                // to prevent to regard setTextHeading as tabel delim cell with 'disallowDeepHeading' option
                (delimCells.length === 1 && delimContent.indexOf('|') !== 0)) {
                return 0 /* None */;
            }
            var lineOffsets = container.lineOffsets;
            var firstLineNum = parser.lineNumber - 1;
            var firstLineStart = last(lineOffsets) + 1;
            var table = createNode$1('table', [
                [firstLineNum, firstLineStart],
                [parser.lineNumber, parser.offset],
            ]);
            // eslint-disable-next-line arrow-body-style
            table.columns = delimCells.map(function () { return ({ align: null }); });
            container.insertAfter(table);
            if (lineOffsets.length === 1) {
                container.unlink();
            }
            else {
                container.stringContent = stringContent.slice(0, lastLineStartIdx);
                var paraLastLineStartIdx = stringContent.lastIndexOf('\n', lastLineStartIdx - 2) + 1;
                var paraLastLineLen = lastLineStartIdx - paraLastLineStartIdx - 1;
                parser.lastLineLength = lineOffsets[lineOffsets.length - 2] + paraLastLineLen;
                parser.finalize(container, firstLineNum - 1);
            }
            parser.advanceOffset(parser.currentLine.length - parser.offset, false);
            var tableHead_1 = createNode$1('tableHead', [
                [firstLineNum, firstLineStart],
                [parser.lineNumber, parser.offset],
            ]);
            table.appendChild(tableHead_1);
            var tableHeadRow_1 = createNode$1('tableRow', [
                [firstLineNum, firstLineStart],
                [firstLineNum, firstLineStart + headerContent.length - 1],
            ]);
            var tableDelimRow_1 = createNode$1('tableDelimRow', [
                [parser.lineNumber, parser.nextNonspace + 1],
                [parser.lineNumber, parser.offset],
            ]);
            tableHead_1.appendChild(tableHeadRow_1);
            tableHead_1.appendChild(tableDelimRow_1);
            generateTableCells('tableCell', headerCells, firstLineNum, firstLineStart + headerOffset).forEach(function (cellNode) {
                tableHeadRow_1.appendChild(cellNode);
            });
            var delimCellNodes = generateTableCells('tableDelimCell', delimCells, parser.lineNumber, parser.nextNonspace + 1 + delimOffset);
            delimCellNodes.forEach(function (cellNode) {
                tableDelimRow_1.appendChild(cellNode);
            });
            table.columns = delimCellNodes.map(getColumnFromDelimCell);
            parser.tip = table;
            return 2 /* Leaf */;
        }
        return 0 /* None */;
    };
    var tableBody = function (parser, container) {
        if ((container.type !== 'table' && container.type !== 'tableBody') ||
            (!parser.blank && parser.currentLine.indexOf('|') === -1)) {
            return 0 /* None */;
        }
        parser.advanceOffset(parser.currentLine.length - parser.offset, false);
        if (parser.blank) {
            var table_1 = container;
            if (container.type === 'tableBody') {
                table_1 = container.parent;
                parser.finalize(container, parser.lineNumber - 1);
            }
            parser.finalize(table_1, parser.lineNumber - 1);
            return 0 /* None */;
        }
        var tableBody = container;
        if (container.type === 'table') {
            tableBody = parser.addChild('tableBody', parser.nextNonspace);
            tableBody.stringContent = null;
        }
        var tableRow = createNode$1('tableRow', [
            [parser.lineNumber, parser.nextNonspace + 1],
            [parser.lineNumber, parser.currentLine.length],
        ]);
        tableBody.appendChild(tableRow);
        var table = tableBody.parent;
        var content = parser.currentLine.slice(parser.nextNonspace);
        var _a = parseRowContent(content), offset = _a[0], cellContents = _a[1];
        generateTableCells('tableCell', cellContents, parser.lineNumber, parser.nextNonspace + 1 + offset).forEach(function (cellNode, idx) {
            if (idx >= table.columns.length) {
                cellNode.ignored = true;
            }
            tableRow.appendChild(cellNode);
        });
        return 2 /* Leaf */;
    };

    var reCustomBlock = /^(\$\$)(\s*[a-zA-Z])+/;
    var reCanBeCustomInline = /^(\$\$)(\s*[a-zA-Z])+.*(\$\$)/;
    var customBlock = function (parser) {
        var match;
        if (!parser.indented &&
            !reCanBeCustomInline.test(parser.currentLine) &&
            (match = parser.currentLine.match(reCustomBlock))) {
            var syntaxLength = match[1].length;
            parser.closeUnmatchedBlocks();
            var container = parser.addChild('customBlock', parser.nextNonspace);
            container.syntaxLength = syntaxLength;
            container.offset = parser.indent;
            parser.advanceNextNonspace();
            parser.advanceOffset(syntaxLength, false);
            return 2 /* Leaf */;
        }
        return 0 /* None */;
    };

    var reCodeFence = /^`{3,}(?!.*`)|^~{3,}/;
    var reHtmlBlockOpen = [
        /./,
        /^<(?:script|pre|style)(?:\s|>|$)/i,
        /^<!--/,
        /^<[?]/,
        /^<![A-Z]/,
        /^<!\[CDATA\[/,
        /^<[/]?(?:address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[123456]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul)(?:\s|[/]?[>]|$)/i,
        new RegExp("^(?:" + OPENTAG + "|" + CLOSETAG + ")\\s*$", 'i'),
    ];
    var reSetextHeadingLine = /^(?:=+|-+)[ \t]*$/;
    var reATXHeadingMarker = /^#{1,6}(?:[ \t]+|$)/;
    var reThematicBreak = /^(?:(?:\*[ \t]*){3,}|(?:_[ \t]*){3,}|(?:-[ \t]*){3,})[ \t]*$/;
    var reBulletListMarker = /^[*+-]/;
    var reOrderedListMarker = /^(\d{1,9})([.)])/;
    // Parse a list marker and return data on the marker (type,
    // start, delimiter, bullet character, padding) or null.
    function parseListMarker(parser, container) {
        var rest = parser.currentLine.slice(parser.nextNonspace);
        var match;
        var nextc;
        var data = {
            type: 'bullet',
            tight: true,
            bulletChar: '',
            start: 0,
            delimiter: '',
            padding: 0,
            markerOffset: parser.indent,
            // GFM: Task List Item
            task: false,
            checked: false,
        };
        if (parser.indent >= 4) {
            return null;
        }
        if ((match = rest.match(reBulletListMarker))) {
            data.type = 'bullet';
            data.bulletChar = match[0][0];
        }
        else if ((match = rest.match(reOrderedListMarker)) &&
            (container.type !== 'paragraph' || match[1] === '1')) {
            data.type = 'ordered';
            data.start = parseInt(match[1], 10);
            data.delimiter = match[2];
        }
        else {
            return null;
        }
        // make sure we have spaces after
        nextc = peek(parser.currentLine, parser.nextNonspace + match[0].length);
        if (!(nextc === -1 || nextc === C_TAB || nextc === C_SPACE)) {
            return null;
        }
        // if it interrupts paragraph, make sure first line isn't blank
        if (container.type === 'paragraph' &&
            !parser.currentLine.slice(parser.nextNonspace + match[0].length).match(reNonSpace)) {
            return null;
        }
        // we've got a match! advance offset and calculate padding
        parser.advanceNextNonspace(); // to start of marker
        parser.advanceOffset(match[0].length, true); // to end of marker
        var spacesStartCol = parser.column;
        var spacesStartOffset = parser.offset;
        do {
            parser.advanceOffset(1, true);
            nextc = peek(parser.currentLine, parser.offset);
        } while (parser.column - spacesStartCol < 5 && isSpaceOrTab(nextc));
        var blankItem = peek(parser.currentLine, parser.offset) === -1;
        var spacesAfterMarker = parser.column - spacesStartCol;
        if (spacesAfterMarker >= 5 || spacesAfterMarker < 1 || blankItem) {
            data.padding = match[0].length + 1;
            parser.column = spacesStartCol;
            parser.offset = spacesStartOffset;
            if (isSpaceOrTab(peek(parser.currentLine, parser.offset))) {
                parser.advanceOffset(1, true);
            }
        }
        else {
            data.padding = match[0].length + spacesAfterMarker;
        }
        return data;
    }
    // Returns true if the two list items are of the same type,
    // with the same delimiter and bullet character.  This is used
    // in agglomerating list items into lists.
    function listsMatch(listData, itemData) {
        return (listData.type === itemData.type &&
            listData.delimiter === itemData.delimiter &&
            listData.bulletChar === itemData.bulletChar);
    }
    function isDisallowedDeepHeading(parser, node) {
        return parser.options.disallowDeepHeading && (node.type === 'blockQuote' || node.type === 'item');
    }
    var blockQuote = function (parser) {
        if (!parser.indented && peek(parser.currentLine, parser.nextNonspace) === C_GREATERTHAN) {
            parser.advanceNextNonspace();
            parser.advanceOffset(1, false);
            // optional following space
            if (isSpaceOrTab(peek(parser.currentLine, parser.offset))) {
                parser.advanceOffset(1, true);
            }
            parser.closeUnmatchedBlocks();
            parser.addChild('blockQuote', parser.nextNonspace);
            return 1 /* Container */;
        }
        return 0 /* None */;
    };
    var atxHeading = function (parser, container) {
        var match;
        if (!parser.indented &&
            // The nested Heading is disallowed in list and blockquote with 'disallowDeepHeading' option
            !isDisallowedDeepHeading(parser, container) &&
            (match = parser.currentLine.slice(parser.nextNonspace).match(reATXHeadingMarker))) {
            parser.advanceNextNonspace();
            parser.advanceOffset(match[0].length, false);
            parser.closeUnmatchedBlocks();
            var heading = parser.addChild('heading', parser.nextNonspace);
            heading.level = match[0].trim().length; // number of #s
            heading.headingType = 'atx';
            // remove trailing ###s:
            heading.stringContent = parser.currentLine
                .slice(parser.offset)
                .replace(/^[ \t]*#+[ \t]*$/, '')
                .replace(/[ \t]+#+[ \t]*$/, '');
            parser.advanceOffset(parser.currentLine.length - parser.offset);
            return 2 /* Leaf */;
        }
        return 0 /* None */;
    };
    var fencedCodeBlock = function (parser) {
        var match;
        if (!parser.indented &&
            (match = parser.currentLine.slice(parser.nextNonspace).match(reCodeFence))) {
            var fenceLength = match[0].length;
            parser.closeUnmatchedBlocks();
            var container = parser.addChild('codeBlock', parser.nextNonspace);
            container.isFenced = true;
            container.fenceLength = fenceLength;
            container.fenceChar = match[0][0];
            container.fenceOffset = parser.indent;
            parser.advanceNextNonspace();
            parser.advanceOffset(fenceLength, false);
            return 2 /* Leaf */;
        }
        return 0 /* None */;
    };
    var htmlBlock = function (parser, container) {
        if (!parser.indented && peek(parser.currentLine, parser.nextNonspace) === C_LESSTHAN) {
            var s = parser.currentLine.slice(parser.nextNonspace);
            var disallowedTags = parser.options.disallowedHtmlBlockTags;
            var blockType = void 0;
            for (blockType = 1; blockType <= 7; blockType++) {
                var matched = s.match(reHtmlBlockOpen[blockType]);
                if (matched) {
                    if (blockType === 7) {
                        if (container.type === 'paragraph') {
                            return 0 /* None */;
                        }
                        if (disallowedTags.length > 0) {
                            var reDisallowedTags = new RegExp("</?(?:" + disallowedTags.join('|') + ")", 'i');
                            if (reDisallowedTags.test(matched[0])) {
                                return 0 /* None */;
                            }
                        }
                    }
                    parser.closeUnmatchedBlocks();
                    // We don't adjust parser.offset;
                    // spaces are part of the HTML block:
                    var b = parser.addChild('htmlBlock', parser.offset);
                    b.htmlBlockType = blockType;
                    return 2 /* Leaf */;
                }
            }
        }
        return 0 /* None */;
    };
    var seTextHeading = function (parser, container) {
        var match;
        if (container.stringContent !== null &&
            !parser.indented &&
            container.type === 'paragraph' &&
            // The nested Heading is disallowed in list and blockquote with 'disallowDeepHeading' option
            !isDisallowedDeepHeading(parser, container.parent) &&
            (match = parser.currentLine.slice(parser.nextNonspace).match(reSetextHeadingLine))) {
            parser.closeUnmatchedBlocks();
            // resolve reference link definitions
            var pos = void 0;
            while (peek(container.stringContent, 0) === C_OPEN_BRACKET &&
                (pos = parser.inlineParser.parseReference(container, parser.refMap))) {
                container.stringContent = container.stringContent.slice(pos);
            }
            if (container.stringContent.length > 0) {
                var heading = createNode$1('heading', container.sourcepos);
                heading.level = match[0][0] === '=' ? 1 : 2;
                heading.headingType = 'setext';
                heading.stringContent = container.stringContent;
                container.insertAfter(heading);
                container.unlink();
                parser.tip = heading;
                parser.advanceOffset(parser.currentLine.length - parser.offset, false);
                return 2 /* Leaf */;
            }
            return 0 /* None */;
        }
        return 0 /* None */;
    };
    var thematicBreak = function (parser) {
        if (!parser.indented && reThematicBreak.test(parser.currentLine.slice(parser.nextNonspace))) {
            parser.closeUnmatchedBlocks();
            parser.addChild('thematicBreak', parser.nextNonspace);
            parser.advanceOffset(parser.currentLine.length - parser.offset, false);
            return 2 /* Leaf */;
        }
        return 0 /* None */;
    };
    var listItem = function (parser, container) {
        var data;
        var currNode = container;
        if ((!parser.indented || container.type === 'list') &&
            (data = parseListMarker(parser, currNode))) {
            parser.closeUnmatchedBlocks();
            // add the list if needed
            if (parser.tip.type !== 'list' || !listsMatch(currNode.listData, data)) {
                currNode = parser.addChild('list', parser.nextNonspace);
                currNode.listData = data;
            }
            // add the list item
            currNode = parser.addChild('item', parser.nextNonspace);
            currNode.listData = data;
            return 1 /* Container */;
        }
        return 0 /* None */;
    };
    // indented code block
    var indentedCodeBlock = function (parser) {
        if (parser.indented && parser.tip.type !== 'paragraph' && !parser.blank) {
            // indented code
            parser.advanceOffset(CODE_INDENT, true);
            parser.closeUnmatchedBlocks();
            parser.addChild('codeBlock', parser.offset);
            return 2 /* Leaf */;
        }
        return 0 /* None */;
    };
    var blockStarts = [
        blockQuote,
        atxHeading,
        fencedCodeBlock,
        htmlBlock,
        seTextHeading,
        thematicBreak,
        listItem,
        indentedCodeBlock,
        tableHead,
        tableBody,
        customBlock,
    ];

    // `---` for YAML, `+++` for TOML, `;;;` for JSON
    var reFrontMatter = /^(-{3}|\+{3}|;{3})$/;
    var frontMatter$1 = function (parser, container) {
        var currentLine = parser.currentLine, lineNumber = parser.lineNumber, indented = parser.indented;
        if (lineNumber === 1 &&
            !indented &&
            container.type === 'document' &&
            reFrontMatter.test(currentLine)) {
            parser.closeUnmatchedBlocks();
            var frontMatter_1 = parser.addChild('frontMatter', parser.nextNonspace);
            frontMatter_1.stringContent = currentLine;
            parser.advanceNextNonspace();
            parser.advanceOffset(currentLine.length, false);
            return 2 /* Leaf */;
        }
        return 0 /* None */;
    };

    var frontMatter = {
        continue: function (parser, container) {
            var line = parser.currentLine;
            var match = line.match(reFrontMatter);
            if (container.type === 'frontMatter' && match) {
                container.stringContent += line;
                parser.lastLineLength = match[0].length;
                parser.finalize(container, parser.lineNumber);
                return 2 /* Finished */;
            }
            return 0 /* Go */;
        },
        finalize: function (_, block) {
            if (block.stringContent === null) {
                return;
            }
            block.literal = block.stringContent;
            block.stringContent = null;
        },
        canContain: function () {
            return false;
        },
        acceptsLines: true,
    };

    var reHtmlBlockClose = [
        /./,
        /<\/(?:script|pre|style)>/i,
        /-->/,
        /\?>/,
        />/,
        /\]\]>/,
    ];
    var reMaybeSpecial = /^[#`~*+_=<>0-9-;$]/;
    var reLineEnding$1 = /\r\n|\n|\r/;
    function document$2() {
        return createNode$1('document', [
            [1, 1],
            [0, 0],
        ]);
    }
    var defaultOptions$1 = {
        smart: false,
        tagFilter: false,
        extendedAutolinks: false,
        disallowedHtmlBlockTags: [],
        referenceDefinition: false,
        disallowDeepHeading: false,
        customParser: null,
        frontMatter: false,
    };
    var Parser = /** @class */ (function () {
        function Parser(options) {
            this.options = __assign(__assign({}, defaultOptions$1), options);
            this.doc = document$2();
            this.tip = this.doc;
            this.oldtip = this.doc;
            this.lineNumber = 0;
            this.offset = 0;
            this.column = 0;
            this.nextNonspace = 0;
            this.nextNonspaceColumn = 0;
            this.indent = 0;
            this.currentLine = '';
            this.indented = false;
            this.blank = false;
            this.partiallyConsumedTab = false;
            this.allClosed = true;
            this.lastMatchedContainer = this.doc;
            this.refMap = {};
            this.refLinkCandidateMap = {};
            this.refDefCandidateMap = {};
            this.lastLineLength = 0;
            this.lines = [];
            if (this.options.frontMatter) {
                blockHandlers.frontMatter = frontMatter;
                blockStarts.unshift(frontMatter$1);
            }
            this.inlineParser = new InlineParser(this.options);
        }
        Parser.prototype.advanceOffset = function (count, columns) {
            if (columns === void 0) { columns = false; }
            var currentLine = this.currentLine;
            var charsToTab, charsToAdvance;
            var c;
            while (count > 0 && (c = currentLine[this.offset])) {
                if (c === '\t') {
                    charsToTab = 4 - (this.column % 4);
                    if (columns) {
                        this.partiallyConsumedTab = charsToTab > count;
                        charsToAdvance = charsToTab > count ? count : charsToTab;
                        this.column += charsToAdvance;
                        this.offset += this.partiallyConsumedTab ? 0 : 1;
                        count -= charsToAdvance;
                    }
                    else {
                        this.partiallyConsumedTab = false;
                        this.column += charsToTab;
                        this.offset += 1;
                        count -= 1;
                    }
                }
                else {
                    this.partiallyConsumedTab = false;
                    this.offset += 1;
                    this.column += 1; // assume ascii; block starts are ascii
                    count -= 1;
                }
            }
        };
        Parser.prototype.advanceNextNonspace = function () {
            this.offset = this.nextNonspace;
            this.column = this.nextNonspaceColumn;
            this.partiallyConsumedTab = false;
        };
        Parser.prototype.findNextNonspace = function () {
            var currentLine = this.currentLine;
            var i = this.offset;
            var cols = this.column;
            var c;
            while ((c = currentLine.charAt(i)) !== '') {
                if (c === ' ') {
                    i++;
                    cols++;
                }
                else if (c === '\t') {
                    i++;
                    cols += 4 - (cols % 4);
                }
                else {
                    break;
                }
            }
            this.blank = c === '\n' || c === '\r' || c === '';
            this.nextNonspace = i;
            this.nextNonspaceColumn = cols;
            this.indent = this.nextNonspaceColumn - this.column;
            this.indented = this.indent >= CODE_INDENT;
        };
        // Add a line to the block at the tip.  We assume the tip
        // can accept lines -- that check should be done before calling this.
        Parser.prototype.addLine = function () {
            if (this.partiallyConsumedTab) {
                this.offset += 1; // skip over tab
                // add space characters:
                var charsToTab = 4 - (this.column % 4);
                this.tip.stringContent += repeat(' ', charsToTab);
            }
            if (this.tip.lineOffsets) {
                this.tip.lineOffsets.push(this.offset);
            }
            else {
                this.tip.lineOffsets = [this.offset];
            }
            this.tip.stringContent += this.currentLine.slice(this.offset) + "\n";
        };
        // Add block of type tag as a child of the tip.  If the tip can't
        // accept children, close and finalize it and try its parent,
        // and so on til we find a block that can accept children.
        Parser.prototype.addChild = function (tag, offset) {
            while (!blockHandlers[this.tip.type].canContain(tag)) {
                this.finalize(this.tip, this.lineNumber - 1);
            }
            var columnNumber = offset + 1; // offset 0 = column 1
            var newBlock = createNode$1(tag, [
                [this.lineNumber, columnNumber],
                [0, 0],
            ]);
            newBlock.stringContent = '';
            this.tip.appendChild(newBlock);
            this.tip = newBlock;
            return newBlock;
        };
        // Finalize and close any unmatched blocks.
        Parser.prototype.closeUnmatchedBlocks = function () {
            if (!this.allClosed) {
                // finalize any blocks not matched
                while (this.oldtip !== this.lastMatchedContainer) {
                    var parent_1 = this.oldtip.parent;
                    this.finalize(this.oldtip, this.lineNumber - 1);
                    this.oldtip = parent_1;
                }
                this.allClosed = true;
            }
        };
        // Finalize a block.  Close it and do any necessary postprocessing,
        // e.g. creating stringContent from strings, setting the 'tight'
        // or 'loose' status of a list, and parsing the beginnings
        // of paragraphs for reference definitions.  Reset the tip to the
        // parent of the closed block.
        Parser.prototype.finalize = function (block, lineNumber) {
            var above = block.parent;
            block.open = false;
            block.sourcepos[1] = [lineNumber, this.lastLineLength];
            blockHandlers[block.type].finalize(this, block);
            this.tip = above;
        };
        // Walk through a block & children recursively, parsing string content
        // into inline content where appropriate.
        Parser.prototype.processInlines = function (block) {
            var event;
            var customParser = this.options.customParser;
            var walker = block.walker();
            this.inlineParser.refMap = this.refMap;
            this.inlineParser.refLinkCandidateMap = this.refLinkCandidateMap;
            this.inlineParser.refDefCandidateMap = this.refDefCandidateMap;
            this.inlineParser.options = this.options;
            while ((event = walker.next())) {
                var node = event.node, entering = event.entering;
                var t = node.type;
                if (customParser && customParser[t]) {
                    customParser[t](node, { entering: entering, options: this.options });
                }
                if (!entering &&
                    (t === 'paragraph' ||
                        t === 'heading' ||
                        (t === 'tableCell' && !node.ignored))) {
                    this.inlineParser.parse(node);
                }
            }
        };
        // Analyze a line of text and update the document appropriately.
        // We parse markdown text by calling this on each line of input,
        // then finalizing the document.
        Parser.prototype.incorporateLine = function (ln) {
            var container = this.doc;
            this.oldtip = this.tip;
            this.offset = 0;
            this.column = 0;
            this.blank = false;
            this.partiallyConsumedTab = false;
            this.lineNumber += 1;
            // replace NUL characters for security
            if (ln.indexOf('\u0000') !== -1) {
                ln = ln.replace(/\0/g, '\uFFFD');
            }
            this.currentLine = ln;
            // For each containing block, try to parse the associated line start.
            // Bail out on failure: container will point to the last matching block.
            // Set allMatched to false if not all containers match.
            var allMatched = true;
            var lastChild;
            while ((lastChild = container.lastChild) && lastChild.open) {
                container = lastChild;
                this.findNextNonspace();
                switch (blockHandlers[container.type]['continue'](this, container)) {
                    case 0 /* Go */: // we've matched, keep going
                        break;
                    case 1 /* Stop */: // we've failed to match a block
                        allMatched = false;
                        break;
                    case 2 /* Finished */: // we've hit end of line for fenced code close and can return
                        this.lastLineLength = ln.length;
                        return;
                    default:
                        throw new Error('continue returned illegal value, must be 0, 1, or 2');
                }
                if (!allMatched) {
                    container = container.parent; // back up to last matching block
                    break;
                }
            }
            this.allClosed = container === this.oldtip;
            this.lastMatchedContainer = container;
            var matchedLeaf = container.type !== 'paragraph' && blockHandlers[container.type].acceptsLines;
            var blockStartsLen = blockStarts.length;
            // Unless last matched container is a code block, try new container starts,
            // adding children to the last matched container:
            while (!matchedLeaf) {
                this.findNextNonspace();
                // this is a little performance optimization:
                if (container.type !== 'table' &&
                    container.type !== 'tableBody' &&
                    container.type !== 'paragraph' &&
                    !this.indented &&
                    !reMaybeSpecial.test(ln.slice(this.nextNonspace))) {
                    this.advanceNextNonspace();
                    break;
                }
                var i = 0;
                while (i < blockStartsLen) {
                    var res = blockStarts[i](this, container);
                    if (res === 1 /* Container */) {
                        container = this.tip;
                        break;
                    }
                    else if (res === 2 /* Leaf */) {
                        container = this.tip;
                        matchedLeaf = true;
                        break;
                    }
                    else {
                        i++;
                    }
                }
                if (i === blockStartsLen) {
                    // nothing matched
                    this.advanceNextNonspace();
                    break;
                }
            }
            // What remains at the offset is a text line.  Add the text to the
            // appropriate container.
            // First check for a lazy paragraph continuation:
            if (!this.allClosed && !this.blank && this.tip.type === 'paragraph') {
                // lazy paragraph continuation
                this.addLine();
            }
            else {
                // not a lazy continuation
                // finalize any blocks not matched
                this.closeUnmatchedBlocks();
                if (this.blank && container.lastChild) {
                    container.lastChild.lastLineBlank = true;
                }
                var t = container.type;
                // Block quote lines are never blank as they start with >
                // and we don't count blanks in fenced code for purposes of tight/loose
                // lists or breaking out of lists. We also don't set _lastLineBlank
                // on an empty list item, or if we just closed a fenced block.
                var lastLineBlank = this.blank &&
                    !(t === 'blockQuote' ||
                        (isCodeBlock(container) && container.isFenced) ||
                        (t === 'item' && !container.firstChild && container.sourcepos[0][0] === this.lineNumber));
                // propagate lastLineBlank up through parents:
                var cont = container;
                while (cont) {
                    cont.lastLineBlank = lastLineBlank;
                    cont = cont.parent;
                }
                if (blockHandlers[t].acceptsLines) {
                    this.addLine();
                    // if HtmlBlock, check for end condition
                    if (isHtmlBlock(container) &&
                        container.htmlBlockType >= 1 &&
                        container.htmlBlockType <= 5 &&
                        reHtmlBlockClose[container.htmlBlockType].test(this.currentLine.slice(this.offset))) {
                        this.lastLineLength = ln.length;
                        this.finalize(container, this.lineNumber);
                    }
                }
                else if (this.offset < ln.length && !this.blank) {
                    // create paragraph container for line
                    container = this.addChild('paragraph', this.offset);
                    this.advanceNextNonspace();
                    this.addLine();
                }
            }
            this.lastLineLength = ln.length;
        };
        // The main parsing function.  Returns a parsed document AST.
        Parser.prototype.parse = function (input, lineTexts) {
            this.doc = document$2();
            this.tip = this.doc;
            this.lineNumber = 0;
            this.lastLineLength = 0;
            this.offset = 0;
            this.column = 0;
            this.lastMatchedContainer = this.doc;
            this.currentLine = '';
            var lines = input.split(reLineEnding$1);
            var len = lines.length;
            this.lines = lineTexts ? lineTexts : lines;
            if (this.options.referenceDefinition) {
                this.clearRefMaps();
            }
            if (input.charCodeAt(input.length - 1) === C_NEWLINE) {
                // ignore last blank line created by final newline
                len -= 1;
            }
            for (var i = 0; i < len; i++) {
                this.incorporateLine(lines[i]);
            }
            while (this.tip) {
                this.finalize(this.tip, len);
            }
            this.processInlines(this.doc);
            return this.doc;
        };
        Parser.prototype.partialParseStart = function (lineNumber, lines) {
            this.doc = document$2();
            this.tip = this.doc;
            this.lineNumber = lineNumber - 1;
            this.lastLineLength = 0;
            this.offset = 0;
            this.column = 0;
            this.lastMatchedContainer = this.doc;
            this.currentLine = '';
            var len = lines.length;
            for (var i = 0; i < len; i++) {
                this.incorporateLine(lines[i]);
            }
            return this.doc;
        };
        Parser.prototype.partialParseExtends = function (lines) {
            for (var i = 0; i < lines.length; i++) {
                this.incorporateLine(lines[i]);
            }
        };
        Parser.prototype.partialParseFinish = function () {
            while (this.tip) {
                this.finalize(this.tip, this.lineNumber);
            }
            this.processInlines(this.doc);
        };
        Parser.prototype.setRefMaps = function (refMap, refLinkCandidateMap, refDefCandidateMap) {
            this.refMap = refMap;
            this.refLinkCandidateMap = refLinkCandidateMap;
            this.refDefCandidateMap = refDefCandidateMap;
        };
        Parser.prototype.clearRefMaps = function () {
            [this.refMap, this.refLinkCandidateMap, this.refDefCandidateMap].forEach(function (map) {
                clearObj(map);
            });
        };
        return Parser;
    }());

    function comparePos(p1, p2) {
        if (p1[0] < p2[0]) {
            return 1 /* LT */;
        }
        if (p1[0] > p2[0]) {
            return -1 /* GT */;
        }
        if (p1[1] < p2[1]) {
            return 1 /* LT */;
        }
        if (p1[1] > p2[1]) {
            return -1 /* GT */;
        }
        return 0 /* EQ */;
    }
    function compareRangeAndPos(_a, pos) {
        var startPos = _a[0], endPos = _a[1];
        if (comparePos(endPos, pos) === 1 /* LT */) {
            return 1 /* LT */;
        }
        if (comparePos(startPos, pos) === -1 /* GT */) {
            return -1 /* GT */;
        }
        return 0 /* EQ */;
    }
    function removeNextUntil(node, last) {
        if (node.parent !== last.parent || node === last) {
            return;
        }
        var next = node.next;
        while (next && next !== last) {
            var temp = next.next;
            for (var _i = 0, _a = ['parent', 'prev', 'next']; _i < _a.length; _i++) {
                var type = _a[_i];
                if (next[type]) {
                    removeNodeById(next[type].id);
                    next[type] = null;
                }
            }
            next = temp;
        }
        node.next = last.next;
        if (last.next) {
            last.next.prev = node;
        }
        else {
            node.parent.lastChild = node;
        }
    }
    function getChildNodes(parent) {
        var nodes = [];
        var curr = parent.firstChild;
        while (curr) {
            nodes.push(curr);
            curr = curr.next;
        }
        return nodes;
    }
    function insertNodesBefore(target, nodes) {
        for (var _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++) {
            var node = nodes_1[_i];
            target.insertBefore(node);
        }
    }
    function prependChildNodes(parent, nodes) {
        for (var i = nodes.length - 1; i >= 0; i -= 1) {
            parent.prependChild(nodes[i]);
        }
    }
    function updateNextLineNumbers(base, diff) {
        if (!base || !base.parent || diff === 0) {
            return;
        }
        var walker = base.parent.walker();
        walker.resumeAt(base, true);
        var event;
        while ((event = walker.next())) {
            var node = event.node, entering = event.entering;
            if (entering) {
                node.sourcepos[0][0] += diff;
                node.sourcepos[1][0] += diff;
            }
        }
    }
    function compareRangeAndLine(_a, line) {
        var startPos = _a[0], endPos = _a[1];
        if (endPos[0] < line) {
            return 1 /* LT */;
        }
        if (startPos[0] > line) {
            return -1 /* GT */;
        }
        return 0 /* EQ */;
    }
    function findChildNodeAtLine(parent, line) {
        var node = parent.firstChild;
        while (node) {
            var comp = compareRangeAndLine(node.sourcepos, line);
            if (comp === 0 /* EQ */) {
                return node;
            }
            if (comp === -1 /* GT */) {
                // To consider that top line is blank line
                return node.prev || node;
            }
            node = node.next;
        }
        return parent.lastChild;
    }
    function lastLeafNode(node) {
        while (node.lastChild) {
            node = node.lastChild;
        }
        return node;
    }
    function sameLineTopAncestor(node) {
        while (node.parent &&
            node.parent.type !== 'document' &&
            node.parent.sourcepos[0][0] === node.sourcepos[0][0]) {
            node = node.parent;
        }
        return node;
    }
    function findFirstNodeAtLine(parent, line) {
        var node = parent.firstChild;
        var prev = null;
        while (node) {
            var comp = compareRangeAndLine(node.sourcepos, line);
            if (comp === 0 /* EQ */) {
                if (node.sourcepos[0][0] === line || !node.firstChild) {
                    return node;
                }
                prev = node;
                node = node.firstChild;
            }
            else if (comp === -1 /* GT */) {
                break;
            }
            else {
                prev = node;
                node = node.next;
            }
        }
        if (prev) {
            return sameLineTopAncestor(lastLeafNode(prev));
        }
        return null;
    }
    function findNodeAtPosition(parent, pos) {
        var node = parent;
        var prev = null;
        while (node) {
            var comp = compareRangeAndPos(node.sourcepos, pos);
            if (comp === 0 /* EQ */) {
                if (node.firstChild) {
                    prev = node;
                    node = node.firstChild;
                }
                else {
                    return node;
                }
            }
            else if (comp === -1 /* GT */) {
                return prev;
            }
            else if (node.next) {
                node = node.next;
            }
            else {
                return prev;
            }
        }
        return node;
    }
    function findNodeById(id) {
        return getNodeById(id) || null;
    }
    function invokeNextUntil(callback, start, end) {
        if (end === void 0) { end = null; }
        if (start) {
            var walker = start.walker();
            while (start && start !== end) {
                callback(start);
                var next = walker.next();
                if (next) {
                    start = next.node;
                }
                else {
                    break;
                }
            }
        }
    }
    function isUnlinked(id) {
        var node = findNodeById(id);
        if (!node) {
            return true;
        }
        while (node && node.type !== 'document') {
            // eslint-disable-next-line no-loop-func
            if (!node.parent && !node.prev && !node.next) {
                return true;
            }
            node = node.parent;
        }
        return false;
    }

    var reLineEnding = /\r\n|\n|\r/;
    function canBeContinuedListItem(lineText) {
        var spaceMatch = lineText.match(/^[ \t]+/);
        if (spaceMatch && (spaceMatch[0].length >= 2 || /\t/.test(spaceMatch[0]))) {
            return true;
        }
        var leftTrimmed = spaceMatch ? lineText.slice(spaceMatch.length) : lineText;
        return reBulletListMarker.test(leftTrimmed) || reOrderedListMarker.test(leftTrimmed);
    }
    function canBeContinuedTableBody(lineText) {
        return !isBlank(lineText) && lineText.indexOf('|') !== -1;
    }
    function createRefDefState(node) {
        var id = node.id, title = node.title, sourcepos = node.sourcepos, dest = node.dest;
        return {
            id: id,
            title: title,
            sourcepos: sourcepos,
            unlinked: false,
            destination: dest,
        };
    }
    var ToastMark = /** @class */ (function () {
        function ToastMark(contents, options) {
            this.refMap = {};
            this.refLinkCandidateMap = {};
            this.refDefCandidateMap = {};
            this.referenceDefinition = !!(options === null || options === void 0 ? void 0 : options.referenceDefinition);
            this.parser = new Parser(options);
            this.parser.setRefMaps(this.refMap, this.refLinkCandidateMap, this.refDefCandidateMap);
            this.eventHandlerMap = { change: [] };
            contents = contents || '';
            this.lineTexts = contents.split(reLineEnding);
            this.root = this.parser.parse(contents, this.lineTexts);
        }
        ToastMark.prototype.updateLineTexts = function (startPos, endPos, newText) {
            var _a;
            var startLine = startPos[0], startCol = startPos[1];
            var endLine = endPos[0], endCol = endPos[1];
            var newLines = newText.split(reLineEnding);
            var newLineLen = newLines.length;
            var startLineText = this.lineTexts[startLine - 1];
            var endLineText = this.lineTexts[endLine - 1];
            newLines[0] = startLineText.slice(0, startCol - 1) + newLines[0];
            newLines[newLineLen - 1] = newLines[newLineLen - 1] + endLineText.slice(endCol - 1);
            var removedLineLen = endLine - startLine + 1;
            (_a = this.lineTexts).splice.apply(_a, __spreadArray([startLine - 1, removedLineLen], newLines));
            return newLineLen - removedLineLen;
        };
        ToastMark.prototype.updateRootNodeState = function () {
            if (this.lineTexts.length === 1 && this.lineTexts[0] === '') {
                this.root.lastLineBlank = true;
                this.root.sourcepos = [
                    [1, 1],
                    [1, 0],
                ];
                return;
            }
            if (this.root.lastChild) {
                this.root.lastLineBlank = this.root.lastChild.lastLineBlank;
            }
            var lineTexts = this.lineTexts;
            var idx = lineTexts.length - 1;
            while (lineTexts[idx] === '') {
                idx -= 1;
            }
            if (lineTexts.length - 2 > idx) {
                idx += 1;
            }
            this.root.sourcepos[1] = [idx + 1, lineTexts[idx].length];
        };
        ToastMark.prototype.replaceRangeNodes = function (startNode, endNode, newNodes) {
            if (!startNode) {
                if (endNode) {
                    insertNodesBefore(endNode, newNodes);
                    removeNodeById(endNode.id);
                    endNode.unlink();
                }
                else {
                    prependChildNodes(this.root, newNodes);
                }
            }
            else {
                insertNodesBefore(startNode, newNodes);
                removeNextUntil(startNode, endNode);
                [startNode.id, endNode.id].forEach(function (id) { return removeNodeById(id); });
                startNode.unlink();
            }
        };
        ToastMark.prototype.getNodeRange = function (startPos, endPos) {
            var startNode = findChildNodeAtLine(this.root, startPos[0]);
            var endNode = findChildNodeAtLine(this.root, endPos[0]);
            // extend node range to include a following block which doesn't have preceding blank line
            if (endNode && endNode.next && endPos[0] + 1 === endNode.next.sourcepos[0][0]) {
                endNode = endNode.next;
            }
            return [startNode, endNode];
        };
        ToastMark.prototype.trigger = function (eventName, param) {
            this.eventHandlerMap[eventName].forEach(function (handler) {
                handler(param);
            });
        };
        ToastMark.prototype.extendEndLine = function (line) {
            while (this.lineTexts[line] === '') {
                line += 1;
            }
            return line;
        };
        ToastMark.prototype.parseRange = function (startNode, endNode, startLine, endLine) {
            // extends starting range if the first node can be a continued list item
            if (startNode &&
                startNode.prev &&
                ((isList(startNode.prev) && canBeContinuedListItem(this.lineTexts[startLine - 1])) ||
                    (isTable(startNode.prev) && canBeContinuedTableBody(this.lineTexts[startLine - 1])))) {
                startNode = startNode.prev;
                startLine = startNode.sourcepos[0][0];
            }
            var editedLines = this.lineTexts.slice(startLine - 1, endLine);
            var root = this.parser.partialParseStart(startLine, editedLines);
            // extends ending range if the following node can be a fenced code block or a continued list item
            var nextNode = endNode ? endNode.next : this.root.firstChild;
            var lastChild = root.lastChild;
            var isOpenedLastChildCodeBlock = lastChild && isCodeBlock(lastChild) && lastChild.open;
            var isOpenedLastChildCustomBlock = lastChild && isCustomBlock(lastChild) && lastChild.open;
            var isLastChildList = lastChild && isList(lastChild);
            while (((isOpenedLastChildCodeBlock || isOpenedLastChildCustomBlock) && nextNode) ||
                (isLastChildList && nextNode && (nextNode.type === 'list' || nextNode.sourcepos[0][1] >= 2))) {
                var newEndLine = this.extendEndLine(nextNode.sourcepos[1][0]);
                this.parser.partialParseExtends(this.lineTexts.slice(endLine, newEndLine));
                if (!startNode) {
                    startNode = endNode;
                }
                endNode = nextNode;
                endLine = newEndLine;
                nextNode = nextNode.next;
            }
            this.parser.partialParseFinish();
            var newNodes = getChildNodes(root);
            return { newNodes: newNodes, extStartNode: startNode, extEndNode: endNode };
        };
        ToastMark.prototype.getRemovedNodeRange = function (extStartNode, extEndNode) {
            if (!extStartNode ||
                (extStartNode && isRefDef(extStartNode)) ||
                (extEndNode && isRefDef(extEndNode))) {
                return null;
            }
            return {
                id: [extStartNode.id, extEndNode.id],
                line: [extStartNode.sourcepos[0][0] - 1, extEndNode.sourcepos[1][0] - 1],
            };
        };
        ToastMark.prototype.markDeletedRefMap = function (extStartNode, extEndNode) {
            var _this = this;
            if (!isEmptyObj(this.refMap)) {
                var markDeleted = function (node) {
                    if (isRefDef(node)) {
                        var refDefState = _this.refMap[node.label];
                        if (refDefState && node.id === refDefState.id) {
                            refDefState.unlinked = true;
                        }
                    }
                };
                if (extStartNode) {
                    invokeNextUntil(markDeleted, extStartNode.parent, extEndNode);
                }
                if (extEndNode) {
                    invokeNextUntil(markDeleted, extEndNode);
                }
            }
        };
        ToastMark.prototype.replaceWithNewRefDefState = function (nodes) {
            var _this = this;
            if (!isEmptyObj(this.refMap)) {
                var replaceWith_1 = function (node) {
                    if (isRefDef(node)) {
                        var label = node.label;
                        var refDefState = _this.refMap[label];
                        if (!refDefState || refDefState.unlinked) {
                            _this.refMap[label] = createRefDefState(node);
                        }
                    }
                };
                nodes.forEach(function (node) {
                    invokeNextUntil(replaceWith_1, node);
                });
            }
        };
        ToastMark.prototype.replaceWithRefDefCandidate = function () {
            var _this = this;
            if (!isEmptyObj(this.refDefCandidateMap)) {
                iterateObject(this.refDefCandidateMap, function (_, candidate) {
                    var label = candidate.label, sourcepos = candidate.sourcepos;
                    var refDefState = _this.refMap[label];
                    if (!refDefState ||
                        refDefState.unlinked ||
                        refDefState.sourcepos[0][0] > sourcepos[0][0]) {
                        _this.refMap[label] = createRefDefState(candidate);
                    }
                });
            }
        };
        ToastMark.prototype.getRangeWithRefDef = function (startLine, endLine, startNode, endNode, lineDiff) {
            if (this.referenceDefinition && !isEmptyObj(this.refMap)) {
                var prevNode = findChildNodeAtLine(this.root, startLine - 1);
                var nextNode = findChildNodeAtLine(this.root, endLine + 1);
                if (prevNode && isRefDef(prevNode) && prevNode !== startNode && prevNode !== endNode) {
                    startNode = prevNode;
                    startLine = startNode.sourcepos[0][0];
                }
                if (nextNode && isRefDef(nextNode) && nextNode !== startNode && nextNode !== endNode) {
                    endNode = nextNode;
                    endLine = this.extendEndLine(endNode.sourcepos[1][0] + lineDiff);
                }
            }
            return [startNode, endNode, startLine, endLine];
        };
        ToastMark.prototype.parse = function (startPos, endPos, lineDiff) {
            if (lineDiff === void 0) { lineDiff = 0; }
            var range = this.getNodeRange(startPos, endPos);
            var startNode = range[0], endNode = range[1];
            var startLine = startNode ? Math.min(startNode.sourcepos[0][0], startPos[0]) : startPos[0];
            var endLine = this.extendEndLine((endNode ? Math.max(endNode.sourcepos[1][0], endPos[0]) : endPos[0]) + lineDiff);
            var parseResult = this.parseRange.apply(this, this.getRangeWithRefDef(startLine, endLine, startNode, endNode, lineDiff));
            var newNodes = parseResult.newNodes, extStartNode = parseResult.extStartNode, extEndNode = parseResult.extEndNode;
            var removedNodeRange = this.getRemovedNodeRange(extStartNode, extEndNode);
            var nextNode = extEndNode ? extEndNode.next : this.root.firstChild;
            if (this.referenceDefinition) {
                this.markDeletedRefMap(extStartNode, extEndNode);
                this.replaceRangeNodes(extStartNode, extEndNode, newNodes);
                this.replaceWithNewRefDefState(newNodes);
            }
            else {
                this.replaceRangeNodes(extStartNode, extEndNode, newNodes);
            }
            return { nodes: newNodes, removedNodeRange: removedNodeRange, nextNode: nextNode };
        };
        ToastMark.prototype.parseRefLink = function () {
            var _this = this;
            var result = [];
            if (!isEmptyObj(this.refMap)) {
                iterateObject(this.refMap, function (label, value) {
                    if (value.unlinked) {
                        delete _this.refMap[label];
                    }
                    iterateObject(_this.refLinkCandidateMap, function (_, candidate) {
                        var node = candidate.node, refLabel = candidate.refLabel;
                        if (refLabel === label) {
                            result.push(_this.parse(node.sourcepos[0], node.sourcepos[1]));
                        }
                    });
                });
            }
            return result;
        };
        ToastMark.prototype.removeUnlinkedCandidate = function () {
            if (!isEmptyObj(this.refDefCandidateMap)) {
                [this.refLinkCandidateMap, this.refDefCandidateMap].forEach(function (candidateMap) {
                    iterateObject(candidateMap, function (id) {
                        if (isUnlinked(id)) {
                            delete candidateMap[id];
                        }
                    });
                });
            }
        };
        ToastMark.prototype.editMarkdown = function (startPos, endPos, newText) {
            var lineDiff = this.updateLineTexts(startPos, endPos, newText);
            var parseResult = this.parse(startPos, endPos, lineDiff);
            var editResult = omit(parseResult, 'nextNode');
            updateNextLineNumbers(parseResult.nextNode, lineDiff);
            this.updateRootNodeState();
            var result = [editResult];
            if (this.referenceDefinition) {
                this.removeUnlinkedCandidate();
                this.replaceWithRefDefCandidate();
                result = result.concat(this.parseRefLink());
            }
            this.trigger('change', result);
            return result;
        };
        ToastMark.prototype.getLineTexts = function () {
            return this.lineTexts;
        };
        ToastMark.prototype.getRootNode = function () {
            return this.root;
        };
        ToastMark.prototype.findNodeAtPosition = function (pos) {
            var node = findNodeAtPosition(this.root, pos);
            if (!node || node === this.root) {
                return null;
            }
            return node;
        };
        ToastMark.prototype.findFirstNodeAtLine = function (line) {
            return findFirstNodeAtLine(this.root, line);
        };
        ToastMark.prototype.on = function (eventName, callback) {
            this.eventHandlerMap[eventName].push(callback);
        };
        ToastMark.prototype.off = function (eventName, callback) {
            var handlers = this.eventHandlerMap[eventName];
            var idx = handlers.indexOf(callback);
            handlers.splice(idx, 1);
        };
        ToastMark.prototype.findNodeById = function (id) {
            return findNodeById(id);
        };
        ToastMark.prototype.removeAllNode = function () {
            removeAllNode();
        };
        return ToastMark;
    }());

    var disallowedTags = [
        'title',
        'textarea',
        'style',
        'xmp',
        'iframe',
        'noembed',
        'noframes',
        'script',
        'plaintext',
    ];
    var reDisallowedTag = new RegExp("<(/?(?:" + disallowedTags.join('|') + ")[^>]*>)", 'ig');
    function filterDisallowedTags(str) {
        if (reDisallowedTag.test(str)) {
            return str.replace(reDisallowedTag, function (_, group) { return "&lt;" + group; });
        }
        return str;
    }

    var baseConvertors$1 = {
        heading: function (node, _a) {
            var entering = _a.entering;
            return {
                type: entering ? 'openTag' : 'closeTag',
                tagName: "h" + node.level,
                outerNewLine: true,
            };
        },
        text: function (node) {
            return {
                type: 'text',
                content: node.literal,
            };
        },
        softbreak: function (_, _a) {
            var options = _a.options;
            return {
                type: 'html',
                content: options.softbreak,
            };
        },
        linebreak: function () {
            return {
                type: 'html',
                content: '<br />\n',
            };
        },
        emph: function (_, _a) {
            var entering = _a.entering;
            return {
                type: entering ? 'openTag' : 'closeTag',
                tagName: 'em',
            };
        },
        strong: function (_, _a) {
            var entering = _a.entering;
            return {
                type: entering ? 'openTag' : 'closeTag',
                tagName: 'strong',
            };
        },
        paragraph: function (node, _a) {
            var _b;
            var entering = _a.entering;
            var grandparent = (_b = node.parent) === null || _b === void 0 ? void 0 : _b.parent;
            if (grandparent && grandparent.type === 'list') {
                if (grandparent.listData.tight) {
                    return null;
                }
            }
            return {
                type: entering ? 'openTag' : 'closeTag',
                tagName: 'p',
                outerNewLine: true,
            };
        },
        thematicBreak: function () {
            return {
                type: 'openTag',
                tagName: 'hr',
                outerNewLine: true,
                selfClose: true,
            };
        },
        blockQuote: function (_, _a) {
            var entering = _a.entering;
            return {
                type: entering ? 'openTag' : 'closeTag',
                tagName: 'blockquote',
                outerNewLine: true,
                innerNewLine: true,
            };
        },
        list: function (node, _a) {
            var entering = _a.entering;
            var _b = node.listData, type = _b.type, start = _b.start;
            var tagName = type === 'bullet' ? 'ul' : 'ol';
            var attributes = {};
            if (tagName === 'ol' && start !== null && start !== 1) {
                attributes.start = start.toString();
            }
            return {
                type: entering ? 'openTag' : 'closeTag',
                tagName: tagName,
                attributes: attributes,
                outerNewLine: true,
            };
        },
        item: function (_, _a) {
            var entering = _a.entering;
            return {
                type: entering ? 'openTag' : 'closeTag',
                tagName: 'li',
                outerNewLine: true,
            };
        },
        htmlInline: function (node, _a) {
            var options = _a.options;
            var content = options.tagFilter ? filterDisallowedTags(node.literal) : node.literal;
            return { type: 'html', content: content };
        },
        htmlBlock: function (node, _a) {
            var options = _a.options;
            var content = options.tagFilter ? filterDisallowedTags(node.literal) : node.literal;
            if (options.nodeId) {
                return [
                    { type: 'openTag', tagName: 'div', outerNewLine: true },
                    { type: 'html', content: content },
                    { type: 'closeTag', tagName: 'div', outerNewLine: true },
                ];
            }
            return { type: 'html', content: content, outerNewLine: true };
        },
        code: function (node) {
            return [
                { type: 'openTag', tagName: 'code' },
                { type: 'text', content: node.literal },
                { type: 'closeTag', tagName: 'code' },
            ];
        },
        codeBlock: function (node) {
            var infoStr = node.info;
            var infoWords = infoStr ? infoStr.split(/\s+/) : [];
            var codeClassNames = [];
            if (infoWords.length > 0 && infoWords[0].length > 0) {
                codeClassNames.push("language-" + escapeXml(infoWords[0]));
            }
            return [
                { type: 'openTag', tagName: 'pre', outerNewLine: true },
                { type: 'openTag', tagName: 'code', classNames: codeClassNames },
                { type: 'text', content: node.literal },
                { type: 'closeTag', tagName: 'code' },
                { type: 'closeTag', tagName: 'pre', outerNewLine: true },
            ];
        },
        link: function (node, _a) {
            var entering = _a.entering;
            if (entering) {
                var _b = node, title = _b.title, destination = _b.destination;
                return {
                    type: 'openTag',
                    tagName: 'a',
                    attributes: __assign({ href: escapeXml(destination) }, (title && { title: escapeXml(title) })),
                };
            }
            return { type: 'closeTag', tagName: 'a' };
        },
        image: function (node, _a) {
            var getChildrenText = _a.getChildrenText, skipChildren = _a.skipChildren;
            var _b = node, title = _b.title, destination = _b.destination;
            skipChildren();
            return {
                type: 'openTag',
                tagName: 'img',
                selfClose: true,
                attributes: __assign({ src: escapeXml(destination), alt: getChildrenText(node) }, (title && { title: escapeXml(title) })),
            };
        },
        customBlock: function (node, context, convertors) {
            var info = node.info.trim().toLowerCase();
            var customConvertor = convertors[info];
            if (customConvertor) {
                try {
                    return customConvertor(node, context);
                }
                catch (e) {
                    console.warn(e);
                }
            }
            return [
                { type: 'openTag', tagName: 'div', outerNewLine: true },
                { type: 'text', content: node.literal },
                { type: 'closeTag', tagName: 'div', outerNewLine: true },
            ];
        },
        frontMatter: function (node) {
            return [
                {
                    type: 'openTag',
                    tagName: 'div',
                    outerNewLine: true,
                    // Because front matter is metadata, it should not be render.
                    attributes: { style: 'white-space: pre; display: none;' },
                },
                { type: 'text', content: node.literal },
                { type: 'closeTag', tagName: 'div', outerNewLine: true },
            ];
        },
        customInline: function (node, context, convertors) {
            var info = node.info.trim().toLowerCase();
            var customConvertor = convertors[info];
            if (customConvertor) {
                return customConvertor(node, context);
            }
            return {
                type: context.entering ? 'openTag' : 'closeTag',
                tagName: 'span',
            };
        },
    };

    var gfmConvertors = {
        strike: function (_, _a) {
            var entering = _a.entering;
            return {
                type: entering ? 'openTag' : 'closeTag',
                tagName: 'del',
            };
        },
        item: function (node, _a) {
            var entering = _a.entering;
            var _b = node.listData, checked = _b.checked, task = _b.task;
            if (entering) {
                var itemTag = {
                    type: 'openTag',
                    tagName: 'li',
                    outerNewLine: true,
                };
                if (task) {
                    return [
                        itemTag,
                        {
                            type: 'openTag',
                            tagName: 'input',
                            selfClose: true,
                            attributes: __assign(__assign({}, (checked && { checked: '' })), { disabled: '', type: 'checkbox' }),
                        },
                        {
                            type: 'text',
                            content: ' ',
                        },
                    ];
                }
                return itemTag;
            }
            return {
                type: 'closeTag',
                tagName: 'li',
                outerNewLine: true,
            };
        },
        table: function (_, _a) {
            var entering = _a.entering;
            return {
                type: entering ? 'openTag' : 'closeTag',
                tagName: 'table',
                outerNewLine: true,
            };
        },
        tableHead: function (_, _a) {
            var entering = _a.entering;
            return {
                type: entering ? 'openTag' : 'closeTag',
                tagName: 'thead',
                outerNewLine: true,
            };
        },
        tableBody: function (_, _a) {
            var entering = _a.entering;
            return {
                type: entering ? 'openTag' : 'closeTag',
                tagName: 'tbody',
                outerNewLine: true,
            };
        },
        tableRow: function (node, _a) {
            var entering = _a.entering;
            if (entering) {
                return {
                    type: 'openTag',
                    tagName: 'tr',
                    outerNewLine: true,
                };
            }
            var result = [];
            if (node.lastChild) {
                var columnLen = node.parent.parent.columns.length;
                var lastColIdx = node.lastChild.endIdx;
                for (var i = lastColIdx + 1; i < columnLen; i += 1) {
                    result.push({
                        type: 'openTag',
                        tagName: 'td',
                        outerNewLine: true,
                    }, {
                        type: 'closeTag',
                        tagName: 'td',
                        outerNewLine: true,
                    });
                }
            }
            result.push({
                type: 'closeTag',
                tagName: 'tr',
                outerNewLine: true,
            });
            return result;
        },
        tableCell: function (node, _a) {
            var entering = _a.entering;
            if (node.ignored) {
                return {
                    type: 'text',
                    content: '',
                };
            }
            var tablePart = node.parent.parent;
            var tagName = tablePart.type === 'tableHead' ? 'th' : 'td';
            var table = tablePart.parent;
            var columnInfo = table.columns[node.startIdx];
            var attributes = (columnInfo === null || columnInfo === void 0 ? void 0 : columnInfo.align) ? { align: columnInfo.align } : null;
            if (entering) {
                return __assign({ type: 'openTag', tagName: tagName, outerNewLine: true }, (attributes && { attributes: attributes }));
            }
            return {
                type: 'closeTag',
                tagName: tagName,
                outerNewLine: true,
            };
        },
    };

    var defaultOptions = {
        softbreak: '\n',
        gfm: false,
        tagFilter: false,
        nodeId: false,
    };
    function getChildrenText(node) {
        var buffer = [];
        var walker = node.walker();
        var event = null;
        while ((event = walker.next())) {
            var node_1 = event.node;
            if (node_1.type === 'text') {
                buffer.push(node_1.literal);
            }
        }
        return buffer.join('');
    }
    var Renderer = /** @class */ (function () {
        function Renderer(customOptions) {
            this.buffer = [];
            this.options = __assign(__assign({}, defaultOptions), customOptions);
            this.convertors = this.createConvertors();
            delete this.options.convertors;
        }
        Renderer.prototype.createConvertors = function () {
            var convertors = __assign({}, baseConvertors$1);
            if (this.options.gfm) {
                convertors = __assign(__assign({}, convertors), gfmConvertors);
            }
            if (this.options.convertors) {
                var customConvertors_1 = this.options.convertors;
                var nodeTypes = Object.keys(customConvertors_1);
                var defaultConvertors_1 = __assign(__assign({}, baseConvertors$1), gfmConvertors);
                nodeTypes.forEach(function (nodeType) {
                    var orgConvertor = convertors[nodeType];
                    var convertor = customConvertors_1[nodeType];
                    var convertorType = Object.keys(defaultConvertors_1).indexOf(nodeType) === -1
                        ? nodeType.toLowerCase()
                        : nodeType;
                    if (orgConvertor) {
                        convertors[convertorType] = function (node, context) {
                            context.origin = function () { return orgConvertor(node, context); };
                            return convertor(node, context);
                        };
                    }
                    else {
                        convertors[convertorType] = convertor;
                    }
                });
            }
            return convertors;
        };
        Renderer.prototype.getConvertors = function () {
            return this.convertors;
        };
        Renderer.prototype.getOptions = function () {
            return this.options;
        };
        Renderer.prototype.render = function (rootNode) {
            var _this = this;
            this.buffer = [];
            var walker = rootNode.walker();
            var event = null;
            var _loop_1 = function () {
                var node = event.node, entering = event.entering;
                var convertor = this_1.convertors[node.type];
                if (!convertor) {
                    return "continue";
                }
                var skipped = false;
                var context = {
                    entering: entering,
                    leaf: !isContainer$1(node),
                    options: this_1.options,
                    getChildrenText: getChildrenText,
                    skipChildren: function () {
                        skipped = true;
                    },
                };
                var converted = isCustomBlock(node) || isCustomInline(node)
                    ? convertor(node, context, this_1.convertors)
                    : convertor(node, context);
                if (converted) {
                    var htmlNodes = Array.isArray(converted) ? converted : [converted];
                    htmlNodes.forEach(function (htmlNode, index) {
                        if (htmlNode.type === 'openTag' && _this.options.nodeId && index === 0) {
                            if (!htmlNode.attributes) {
                                htmlNode.attributes = {};
                            }
                            htmlNode.attributes['data-nodeid'] = String(node.id);
                        }
                        _this.renderHTMLNode(htmlNode);
                    });
                    if (skipped) {
                        walker.resumeAt(node, false);
                        walker.next();
                    }
                }
            };
            var this_1 = this;
            while ((event = walker.next())) {
                _loop_1();
            }
            this.addNewLine();
            return this.buffer.join('');
        };
        Renderer.prototype.renderHTMLNode = function (node) {
            switch (node.type) {
                case 'openTag':
                case 'closeTag':
                    this.renderElementNode(node);
                    break;
                case 'text':
                    this.renderTextNode(node);
                    break;
                case 'html':
                    this.renderRawHtmlNode(node);
                    break;
                // no-default-case
            }
        };
        Renderer.prototype.generateOpenTagString = function (node) {
            var _this = this;
            var tagName = node.tagName, classNames = node.classNames, attributes = node.attributes;
            this.buffer.push("<" + tagName);
            if (classNames && classNames.length > 0) {
                this.buffer.push(" class=\"" + classNames.join(' ') + "\"");
            }
            if (attributes) {
                Object.keys(attributes).forEach(function (attrName) {
                    var attrValue = attributes[attrName];
                    _this.buffer.push(" " + attrName + "=\"" + attrValue + "\"");
                });
            }
            if (node.selfClose) {
                this.buffer.push(' /');
            }
            this.buffer.push('>');
        };
        Renderer.prototype.generateCloseTagString = function (_a) {
            var tagName = _a.tagName;
            this.buffer.push("</" + tagName + ">");
        };
        Renderer.prototype.addNewLine = function () {
            if (this.buffer.length && last(last(this.buffer)) !== '\n') {
                this.buffer.push('\n');
            }
        };
        Renderer.prototype.addOuterNewLine = function (node) {
            if (node.outerNewLine) {
                this.addNewLine();
            }
        };
        Renderer.prototype.addInnerNewLine = function (node) {
            if (node.innerNewLine) {
                this.addNewLine();
            }
        };
        Renderer.prototype.renderTextNode = function (node) {
            this.buffer.push(escapeXml(node.content));
        };
        Renderer.prototype.renderRawHtmlNode = function (node) {
            this.addOuterNewLine(node);
            this.buffer.push(node.content);
            this.addOuterNewLine(node);
        };
        Renderer.prototype.renderElementNode = function (node) {
            if (node.type === 'openTag') {
                this.addOuterNewLine(node);
                this.generateOpenTagString(node);
                if (node.selfClose) {
                    this.addOuterNewLine(node);
                }
                else {
                    this.addInnerNewLine(node);
                }
            }
            else {
                this.addInnerNewLine(node);
                this.generateCloseTagString(node);
                this.addOuterNewLine(node);
            }
        };
        return Renderer;
    }());

    var reXSSHtmlAttr = new RegExp('^(abbr|align|alt|axis|bgcolor|border|cellpadding|cellspacing|class|clear|' +
        'color|cols|compact|coords|dir|face|headers|height|hreflang|hspace|' +
        'ismap|lang|language|nohref|nowrap|rel|rev|rows|rules|' +
        'scope|scrolling|shape|size|span|start|summary|tabindex|target|title|type|' +
        'valign|value|vspace|width|checked|mathvariant|encoding|id|name|' +
        'background|cite|href|longdesc|src|usemap|xlink:href|data-+|checked|style)', 'g');
    var reXSSSvgAttr = new RegExp('^(accent-height|accumulate|additive|alphabetic|arabic-form|ascent|' +
        'baseProfile|bbox|begin|by|calcMode|cap-height|class|color|color-rendering|content|' +
        'cx|cy|d|dx|dy|descent|display|dur|end|fill|fill-rule|font-family|font-size|font-stretch|' +
        'font-style|font-variant|font-weight|from|fx|fy|g1|g2|glyph-name|gradientUnits|hanging|' +
        'height|horiz-adv-x|horiz-origin-x|ideographic|k|keyPoints|keySplines|keyTimes|lang|' +
        'marker-end|marker-mid|marker-start|markerHeight|markerUnits|markerWidth|mathematical|' +
        'max|min|offset|opacity|orient|origin|overline-position|overline-thickness|panose-1|' +
        'path|pathLength|points|preserveAspectRatio|r|refX|refY|repeatCount|repeatDur|' +
        'requiredExtensions|requiredFeatures|restart|rotate|rx|ry|slope|stemh|stemv|stop-color|' +
        'stop-opacity|strikethrough-position|strikethrough-thickness|stroke|stroke-dasharray|' +
        'stroke-dashoffset|stroke-linecap|stroke-linejoin|stroke-miterlimit|stroke-opacity|' +
        'stroke-width|systemLanguage|target|text-anchor|to|transform|type|u1|u2|underline-position|' +
        'underline-thickness|unicode|unicode-range|units-per-em|values|version|viewBox|visibility|' +
        'width|widths|x|x-height|x1|x2|xlink:actuate|xlink:arcrole|xlink:role|xlink:show|xlink:title|' +
        'xlink:type|xml:base|xml:lang|xml:space|xmlns|xmlns:xlink|y|y1|y2|zoomAndPan)', 'g');
    var reXSSAttr = /href|src|background/i;
    var reXSSAttrValue = /((java|vb|live)script|x):/i;
    var reOnEvent = /^on\S+/i;
    var reComment = /<!--[\s\S]*?-->/g;
    var DEFAULT_TAG_BLACK_LIST = [
        'script',
        'iframe',
        'textarea',
        'form',
        'button',
        'select',
        'input',
        'meta',
        'style',
        'link',
        'title',
        'embed',
        'object',
        'details',
        'summary',
    ];
    var CAN_BE_TAG_WHITE_LIST = ['iframe', 'embed', 'details', 'summary'];
    var tagBlacklist = __spreadArray$1([], DEFAULT_TAG_BLACK_LIST);
    function registerTagWhitelistIfPossible(tagName) {
        if (includes(CAN_BE_TAG_WHITE_LIST, tagName)) {
            tagBlacklist.splice(tagBlacklist.indexOf(tagName), 1);
        }
    }
    function sanitizeHTML(html) {
        var root = document.createElement('div');
        if (isString_1(html)) {
            html = html.replace(reComment, '');
            root.innerHTML = html;
        }
        removeUnnecessaryTags(root);
        leaveOnlyWhitelistAttribute(root);
        return finalizeHtml(root, true);
    }
    function removeUnnecessaryTags(html) {
        var removedTags = findNodes(html, tagBlacklist.join(','));
        removedTags.forEach(function (node) {
            removeNode$1(node);
        });
    }
    function isXSSAttribute(attrName, attrValue) {
        return attrName.match(reXSSAttr) && attrValue.match(reXSSAttrValue);
    }
    function removeBlacklistAttributes(node, blacklistAttrs) {
        blacklistAttrs.forEach(function (_a) {
            var name = _a.name;
            if (reOnEvent.test(name)) {
                node[name] = null;
            }
            if (node.getAttribute(name)) {
                node.removeAttribute(name);
            }
        });
    }
    function leaveOnlyWhitelistAttribute(html) {
        findNodes(html, '*').forEach(function (node) {
            var attributes = node.attributes;
            var blacklist = toArray_1(attributes).filter(function (attr) {
                var name = attr.name, value = attr.value;
                var htmlAttr = name.match(reXSSHtmlAttr);
                var svgAttr = name.match(reXSSSvgAttr);
                var xssAttr = htmlAttr && isXSSAttribute(name, value);
                return (!htmlAttr && !svgAttr) || xssAttr;
            });
            removeBlacklistAttributes(node, blacklist);
        });
    }
    function sanitizeXSSAttributeValue(attrValue) {
        attrValue = attrValue.replace(reComment, '');
        return reXSSAttrValue.test(attrValue) ? '' : attrValue;
    }

    function getChildrenHTML(node, typeName) {
        return node
            .literal.replace(new RegExp("(<\\s*" + typeName + "[^>]+?>)|(</" + typeName + "\\s*[>])", 'ig'), '')
            .trim();
    }
    function getHTMLAttrsByHTMLString(html) {
        html = html.match(reHTMLTag)[0];
        var attrs = html.match(new RegExp(ATTRIBUTE$1, 'g'));
        return attrs
            ? attrs.reduce(function (acc, attr) {
                var _a = attr.trim().split('='), name = _a[0], values = _a.slice(1);
                if (values.length) {
                    acc[name] = values.join('=').replace(/'|"/g, '').trim();
                }
                return acc;
            }, {})
            : {};
    }
    function getHTMLAttrs(dom) {
        return toArray_1(dom.attributes).reduce(function (acc, attr) {
            acc[attr.nodeName] = attr.nodeValue;
            return acc;
        }, {});
    }
    function sanitizeDOM(node, typeName, sanitizer, wwToDOMAdaptor) {
        var dom = wwToDOMAdaptor.getToDOMNode(typeName)(node);
        var html = sanitizer(dom.outerHTML);
        var container = document.createElement('div');
        container.innerHTML = html;
        dom = container.firstChild;
        var htmlAttrs = getHTMLAttrs(dom);
        return { dom: dom, htmlAttrs: htmlAttrs };
    }
    var schemaFactory = {
        htmlBlock: function (typeName, sanitizeHTML, wwToDOMAdaptor) {
            return {
                atom: true,
                content: 'block+',
                group: 'block',
                attrs: {
                    htmlAttrs: { default: {} },
                    childrenHTML: { default: '' },
                    htmlBlock: { default: true },
                },
                parseDOM: [
                    {
                        tag: typeName,
                        getAttrs: function (dom) {
                            return {
                                htmlAttrs: getHTMLAttrs(dom),
                                childrenHTML: dom.innerHTML,
                            };
                        },
                    },
                ],
                toDOM: function (node) {
                    var _a = sanitizeDOM(node, typeName, sanitizeHTML, wwToDOMAdaptor), dom = _a.dom, htmlAttrs = _a.htmlAttrs;
                    htmlAttrs.class = htmlAttrs.class ? htmlAttrs.class + " html-block" : 'html-block';
                    return __spreadArray$1([typeName, htmlAttrs], toArray_1(dom.childNodes));
                },
            };
        },
        htmlInline: function (typeName, sanitizeHTML, wwToDOMAdaptor) {
            return {
                attrs: {
                    htmlAttrs: { default: {} },
                    htmlInline: { default: true },
                },
                parseDOM: [
                    {
                        tag: typeName,
                        getAttrs: function (dom) {
                            return {
                                htmlAttrs: getHTMLAttrs(dom),
                            };
                        },
                    },
                ],
                toDOM: function (node) {
                    var htmlAttrs = sanitizeDOM(node, typeName, sanitizeHTML, wwToDOMAdaptor).htmlAttrs;
                    return [typeName, htmlAttrs, 0];
                },
            };
        },
    };
    function createHTMLSchemaMap(convertorMap, sanitizeHTML, wwToDOMAdaptor) {
        var htmlSchemaMap = { nodes: {}, marks: {} };
        ['htmlBlock', 'htmlInline'].forEach(function (htmlType) {
            if (convertorMap[htmlType]) {
                Object.keys(convertorMap[htmlType]).forEach(function (type) {
                    var targetType = htmlType === 'htmlBlock' ? 'nodes' : 'marks';
                    // register tag white list for preventing to remove the html in sanitizer
                    registerTagWhitelistIfPossible(type);
                    htmlSchemaMap[targetType][type] = schemaFactory[htmlType](type, sanitizeHTML, wwToDOMAdaptor);
                });
            }
        });
        return htmlSchemaMap;
    }

    var reCloseTag = /^\s*<\s*\//;
    var baseConvertors = {
        paragraph: function (_, _a) {
            var entering = _a.entering, origin = _a.origin, options = _a.options;
            if (options.nodeId) {
                return {
                    type: entering ? 'openTag' : 'closeTag',
                    outerNewLine: true,
                    tagName: 'p',
                };
            }
            return origin();
        },
        softbreak: function (node) {
            var isPrevNodeHTML = node.prev && node.prev.type === 'htmlInline';
            var isPrevBR = isPrevNodeHTML && /<br ?\/?>/.test(node.prev.literal);
            var content = isPrevBR ? '\n' : '<br>\n';
            return { type: 'html', content: content };
        },
        item: function (node, _a) {
            var entering = _a.entering;
            if (entering) {
                var attributes = {};
                var classNames = [];
                if (node.listData.task) {
                    attributes['data-task'] = '';
                    classNames.push('task-list-item');
                    if (node.listData.checked) {
                        classNames.push('checked');
                        attributes['data-task-checked'] = '';
                    }
                }
                return {
                    type: 'openTag',
                    tagName: 'li',
                    classNames: classNames,
                    attributes: attributes,
                    outerNewLine: true,
                };
            }
            return {
                type: 'closeTag',
                tagName: 'li',
                outerNewLine: true,
            };
        },
        code: function (node) {
            var attributes = { 'data-backticks': String(node.tickCount) };
            return [
                { type: 'openTag', tagName: 'code', attributes: attributes },
                { type: 'text', content: node.literal },
                { type: 'closeTag', tagName: 'code' },
            ];
        },
        codeBlock: function (node) {
            var _a = node, fenceLength = _a.fenceLength, info = _a.info;
            var infoWords = info ? info.split(/\s+/) : [];
            var preClasses = [];
            var codeAttrs = {};
            if (fenceLength > 3) {
                codeAttrs['data-backticks'] = fenceLength;
            }
            if (infoWords.length > 0 && infoWords[0].length > 0) {
                var lang = infoWords[0];
                preClasses.push("lang-" + lang);
                codeAttrs['data-language'] = lang;
            }
            return [
                { type: 'openTag', tagName: 'pre', classNames: preClasses },
                { type: 'openTag', tagName: 'code', attributes: codeAttrs },
                { type: 'text', content: node.literal },
                { type: 'closeTag', tagName: 'code' },
                { type: 'closeTag', tagName: 'pre' },
            ];
        },
        customInline: function (node, _a) {
            var origin = _a.origin, entering = _a.entering, skipChildren = _a.skipChildren;
            var info = node.info;
            if (info.indexOf('widget') !== -1 && entering) {
                skipChildren();
                var content = getWidgetContent(node);
                var htmlInline = widgetToDOM(info, content).outerHTML;
                return [
                    { type: 'openTag', tagName: 'span', classNames: ['tui-widget'] },
                    { type: 'html', content: htmlInline },
                    { type: 'closeTag', tagName: 'span' },
                ];
            }
            return origin();
        },
    };
    function getHTMLRenderConvertors(linkAttributes, customConvertors) {
        var convertors = __assign$1({}, baseConvertors);
        if (linkAttributes) {
            convertors.link = function (_, _a) {
                var entering = _a.entering, origin = _a.origin;
                var result = origin();
                if (entering) {
                    result.attributes = __assign$1(__assign$1({}, result.attributes), linkAttributes);
                }
                return result;
            };
        }
        if (customConvertors) {
            Object.keys(customConvertors).forEach(function (nodeType) {
                var orgConvertor = convertors[nodeType];
                var customConvertor = customConvertors[nodeType];
                if (orgConvertor && isFunction_1(customConvertor)) {
                    convertors[nodeType] = function (node, context) {
                        var newContext = __assign$1({}, context);
                        newContext.origin = function () { return orgConvertor(node, context); };
                        return customConvertor(node, newContext);
                    };
                }
                else if (includes(['htmlBlock', 'htmlInline'], nodeType) && !isFunction_1(customConvertor)) {
                    convertors[nodeType] = function (node, context) {
                        var matched = node.literal.match(reHTMLTag);
                        if (matched) {
                            var rootHTML = matched[0], openTagName = matched[1], closeTagName = matched[3];
                            var typeName = (openTagName || closeTagName).toLowerCase();
                            var htmlConvertor = customConvertor[typeName];
                            var childrenHTML = getChildrenHTML(node, typeName);
                            if (htmlConvertor) {
                                // copy for preventing to overwrite the originial property
                                var newNode = __assign$1({}, node);
                                newNode.attrs = getHTMLAttrsByHTMLString(rootHTML);
                                newNode.childrenHTML = childrenHTML;
                                newNode.type = typeName;
                                context.entering = !reCloseTag.test(node.literal);
                                return htmlConvertor(newNode, context);
                            }
                        }
                        return context.origin();
                    };
                }
                else {
                    convertors[nodeType] = customConvertor;
                }
            });
        }
        return convertors;
    }

    var nestableTypes = ['list', 'item', 'blockQuote'];
    var nestableTagNames = ['UL', 'OL', 'BLOCKQUOTE'];
    function isBlankLine(doc, index) {
        var _a;
        var pmNode = doc.child(index);
        return !pmNode.childCount || (pmNode.childCount === 1 && !((_a = pmNode.firstChild.text) === null || _a === void 0 ? void 0 : _a.trim()));
    }
    function getEditorRangeHeightInfo(doc, mdNode, children) {
        var start = getMdStartLine(mdNode) - 1;
        var end = getMdEndLine(mdNode) - 1;
        var rect = children[start].getBoundingClientRect();
        var height = children[end].offsetTop -
            children[start].offsetTop +
            children[end].clientHeight;
        return {
            height: height <= 0
                ? children[start].clientHeight
                : height + getBlankLinesHeight(doc, children, Math.min(end + 1, doc.childCount - 1)),
            rect: rect,
        };
    }
    function getBlankLinesHeight(doc, children, start) {
        var end = doc.childCount - 1;
        var height = 0;
        while (start <= end && isBlankLine(doc, start)) {
            height += children[start].clientHeight;
            start += 1;
        }
        return height;
    }
    function findAncestorHavingId(el, root) {
        while (!el.getAttribute('data-nodeid') && el.parentElement !== root) {
            el = el.parentElement;
        }
        return el;
    }
    function getTotalOffsetTop(el, root) {
        var offsetTop = 0;
        while (el && el !== root) {
            if (!includes(nestableTagNames, el.tagName)) {
                offsetTop += el.offsetTop;
            }
            if (el.offsetParent === root.offsetParent) {
                break;
            }
            el = el.parentElement;
        }
        return offsetTop;
    }
    function findAdjacentElementToScrollTop(scrollTop, root) {
        var el = root;
        var prev = null;
        while (el) {
            var firstElementChild = el.firstElementChild;
            if (!firstElementChild) {
                break;
            }
            var lastSibling = findLastSiblingElementToScrollTop(firstElementChild, scrollTop, getTotalOffsetTop(el, root));
            prev = el;
            el = lastSibling;
        }
        var adjacentEl = el || prev;
        return adjacentEl === root ? null : adjacentEl;
    }
    function findLastSiblingElementToScrollTop(el, scrollTop, offsetTop) {
        if (el && scrollTop > offsetTop + el.offsetTop) {
            return (findLastSiblingElementToScrollTop(el.nextElementSibling, scrollTop, offsetTop) || el);
        }
        return null;
    }
    function getAdditionalPos(scrollTop, offsetTop, height, targetNodeHeight) {
        var ratio = Math.min((scrollTop - offsetTop) / height, 1);
        return ratio * targetNodeHeight;
    }
    function getParentNodeObj(mdNode) {
        var el = document.querySelector("[data-nodeid=\"" + mdNode.id + "\"]");
        while (!el || isStyledInlineNode(mdNode)) {
            mdNode = mdNode.parent;
            el = document.querySelector("[data-nodeid=\"" + mdNode.id + "\"]");
        }
        return getNonNestableNodeObj({ mdNode: mdNode, el: el });
    }
    function getNonNestableNodeObj(_a) {
        var mdNode = _a.mdNode, el = _a.el;
        while ((includes(nestableTypes, mdNode.type) || mdNode.type === 'table') && mdNode.firstChild) {
            mdNode = mdNode.firstChild;
            el = el.firstElementChild;
        }
        return { mdNode: mdNode, el: el };
    }

    var offsetInfoMap = {};
    function setHeight(id, height) {
        offsetInfoMap[id] = offsetInfoMap[id] || {};
        offsetInfoMap[id].height = height;
    }
    function setOffsetTop(id, offsetTop) {
        offsetInfoMap[id] = offsetInfoMap[id] || {};
        offsetInfoMap[id].offsetTop = offsetTop;
    }
    function getHeight(id) {
        return offsetInfoMap[id] && offsetInfoMap[id].height;
    }
    function getOffsetTop(id) {
        return offsetInfoMap[id] && offsetInfoMap[id].offsetTop;
    }
    function removeOffsetInfoByNode(node) {
        if (node) {
            delete offsetInfoMap[Number(node.getAttribute('data-nodeid'))];
            toArray_1(node.children).forEach(function (child) {
                removeOffsetInfoByNode(child);
            });
        }
    }
    function getAndSaveOffsetInfo(node, root, mdNodeId) {
        var cachedHeight = getHeight(mdNodeId);
        var cachedTop = getOffsetTop(mdNodeId);
        var nodeHeight = cachedHeight || node.clientHeight;
        var offsetTop = cachedTop || getTotalOffsetTop(node, root) || node.offsetTop;
        if (!cachedHeight) {
            setHeight(mdNodeId, nodeHeight);
        }
        if (!cachedTop) {
            setOffsetTop(mdNodeId, offsetTop);
        }
        return { nodeHeight: nodeHeight, offsetTop: offsetTop };
    }

    var CLASS_HIGHLIGHT = cls('md-preview-highlight');
    function findTableCell(tableRow, chOffset) {
        var cell = tableRow.firstChild;
        while (cell && cell.next) {
            if (getMdStartCh(cell.next) > chOffset + 1) {
                break;
            }
            cell = cell.next;
        }
        return cell;
    }
    /**
     * Class Markdown Preview
     * @param {HTMLElement} el - base element
     * @param {eventEmitter} eventEmitter - event manager
     * @param {object} options
     * @param {boolean} options.isViewer - true for view-only mode
     * @param {boolean} options.highlight - true for using live-highlight feature
     * @param {object} opitons.linkAttributes - attributes for link element
     * @param {object} opitons.customHTMLRenderer - map of custom HTML render functions
     *
     * @ignore
     */
    var MarkdownPreview = /** @class */ (function () {
        function MarkdownPreview(eventEmitter, options) {
            var el = document.createElement('div');
            this.el = el;
            this.eventEmitter = eventEmitter;
            this.isViewer = !!options.isViewer;
            this.el.className = cls('md-preview');
            var linkAttributes = options.linkAttributes, customHTMLRenderer = options.customHTMLRenderer, sanitizer = options.sanitizer, _a = options.highlight, highlight = _a === void 0 ? false : _a;
            this.renderer = new Renderer({
                gfm: true,
                nodeId: true,
                convertors: getHTMLRenderConvertors(linkAttributes, customHTMLRenderer),
            });
            this.cursorNodeId = null;
            this.sanitizer = sanitizer;
            this.initEvent(highlight);
            this.initContentSection();
        }
        MarkdownPreview.prototype.initContentSection = function () {
            this.previewContent = createElementWith("<div class=\"" + cls('contents') + "\"></div>");
            this.el.appendChild(this.previewContent);
        };
        MarkdownPreview.prototype.toggleActive = function (active) {
            toggleClass(this.el, 'active', active);
        };
        MarkdownPreview.prototype.initEvent = function (highlight) {
            var _this = this;
            this.eventEmitter.listen('updatePreview', this.update.bind(this));
            if (highlight) {
                this.eventEmitter.listen('changeToolbarState', function (_a) {
                    var mdNode = _a.mdNode, cursorPos = _a.cursorPos;
                    _this.updateCursorNode(mdNode, cursorPos);
                });
                this.eventEmitter.listen('blur', function () {
                    _this.removeHighlight();
                });
            }
            on_1(this.el, 'scroll', function (event) {
                _this.eventEmitter.emit('scroll', 'preview', findAdjacentElementToScrollTop(event.target.scrollTop, _this.previewContent));
            });
            this.eventEmitter.listen('changePreviewTabPreview', function () { return _this.toggleActive(true); });
            this.eventEmitter.listen('changePreviewTabWrite', function () { return _this.toggleActive(false); });
        };
        MarkdownPreview.prototype.removeHighlight = function () {
            if (this.cursorNodeId) {
                var currentEl = this.getElementByNodeId(this.cursorNodeId);
                if (currentEl) {
                    removeClass_1(currentEl, CLASS_HIGHLIGHT);
                }
            }
        };
        MarkdownPreview.prototype.updateCursorNode = function (cursorNode, cursorPos) {
            if (cursorNode) {
                cursorNode = findClosestNode(cursorNode, function (mdNode) { return !isInlineNode$1(mdNode); });
                if (cursorNode.type === 'tableRow') {
                    cursorNode = findTableCell(cursorNode, cursorPos[1]);
                }
                else if (cursorNode.type === 'tableBody') {
                    // empty line next to table
                    cursorNode = null;
                }
            }
            var cursorNodeId = cursorNode ? cursorNode.id : null;
            if (this.cursorNodeId === cursorNodeId) {
                return;
            }
            var oldEL = this.getElementByNodeId(this.cursorNodeId);
            var newEL = this.getElementByNodeId(cursorNodeId);
            if (oldEL) {
                removeClass_1(oldEL, CLASS_HIGHLIGHT);
            }
            if (newEL) {
                addClass_1(newEL, CLASS_HIGHLIGHT);
            }
            this.cursorNodeId = cursorNodeId;
        };
        MarkdownPreview.prototype.getElementByNodeId = function (nodeId) {
            return nodeId
                ? this.previewContent.querySelector("[data-nodeid=\"" + nodeId + "\"]")
                : null;
        };
        MarkdownPreview.prototype.update = function (changed) {
            var _this = this;
            changed.forEach(function (editResult) { return _this.replaceRangeNodes(editResult); });
            this.eventEmitter.emit('afterPreviewRender', this);
        };
        MarkdownPreview.prototype.replaceRangeNodes = function (editResult) {
            var _this = this;
            var nodes = editResult.nodes, removedNodeRange = editResult.removedNodeRange;
            var contentEl = this.previewContent;
            var newHtml = this.eventEmitter.emitReduce('beforePreviewRender', this.sanitizer(nodes.map(function (node) { return _this.renderer.render(node); }).join('')));
            if (!removedNodeRange) {
                contentEl.insertAdjacentHTML('afterbegin', newHtml);
            }
            else {
                var _a = removedNodeRange.id, startNodeId = _a[0], endNodeId = _a[1];
                var startEl = this.getElementByNodeId(startNodeId);
                var endEl = this.getElementByNodeId(endNodeId);
                if (startEl) {
                    startEl.insertAdjacentHTML('beforebegin', newHtml);
                    var el = startEl;
                    while (el && el !== endEl) {
                        var nextEl = el.nextElementSibling;
                        removeNode$1(el);
                        removeOffsetInfoByNode(el);
                        el = nextEl;
                    }
                    if (el === null || el === void 0 ? void 0 : el.parentNode) {
                        removeNode$1(el);
                        removeOffsetInfoByNode(el);
                    }
                }
            }
        };
        MarkdownPreview.prototype.getRenderer = function () {
            return this.renderer;
        };
        MarkdownPreview.prototype.destroy = function () {
            off_1(this.el, 'scroll');
            this.el = null;
        };
        MarkdownPreview.prototype.getElement = function () {
            return this.el;
        };
        MarkdownPreview.prototype.getHTML = function () {
            return this.previewContent.innerHTML;
        };
        MarkdownPreview.prototype.setHTML = function (html) {
            this.previewContent.innerHTML = html;
        };
        MarkdownPreview.prototype.setHeight = function (height) {
            css_1(this.el, { height: height + "px" });
        };
        MarkdownPreview.prototype.setMinHeight = function (minHeight) {
            css_1(this.el, { minHeight: minHeight + "px" });
        };
        return MarkdownPreview;
    }());

    function findNodeBy(pos, condition) {
        var depth = pos.depth;
        while (depth) {
            var node = pos.node(depth);
            if (condition(node, depth)) {
                return {
                    node: node,
                    depth: depth,
                    offset: depth > 0 ? pos.before(depth) : 0,
                };
            }
            depth -= 1;
        }
        return null;
    }
    function isInListNode(pos) {
        return !!findNodeBy(pos, function (_a) {
            var type = _a.type;
            return type.name === 'listItem' || type.name === 'bulletList' || type.name === 'orderedList';
        });
    }
    function isInTableNode(pos) {
        return !!findNodeBy(pos, function (_a) {
            var type = _a.type;
            return type.name === 'tableHeadCell' || type.name === 'tableBodyCell';
        });
    }
    function findListItem(pos) {
        return findNodeBy(pos, function (_a) {
            var type = _a.type;
            return type.name === 'listItem';
        });
    }
    function createDOMInfoParsedRawHTML(tag) {
        return {
            tag: tag,
            getAttrs: function (dom) {
                var rawHTML = dom.getAttribute('data-raw-html');
                return __assign$1({}, (rawHTML && { rawHTML: rawHTML }));
            },
        };
    }
    function createCellAttrs(attrs) {
        return Object.keys(attrs).reduce(function (acc, attrName) {
            if (attrName !== 'rawHTML' && attrs[attrName]) {
                attrName = attrName === 'className' ? 'class' : attrName;
                acc[attrName] = attrs[attrName];
            }
            return acc;
        }, {});
    }
    function createParsedCellDOM(tag) {
        return {
            tag: tag,
            getAttrs: function (dom) {
                return ['rawHTML', 'colspan', 'rowspan', 'extended'].reduce(function (acc, attrName) {
                    var attrNameInDOM = attrName === 'rawHTML' ? 'data-raw-html' : attrName;
                    var attrValue = dom.getAttribute(attrNameInDOM);
                    if (attrValue) {
                        acc[attrName] = includes(['rawHTML', 'extended'], attrName)
                            ? attrValue
                            : Number(attrValue);
                    }
                    return acc;
                }, {});
            },
        };
    }
    function getDefaultCustomAttrs() {
        return {
            htmlAttrs: { default: null },
            classNames: { default: null },
        };
    }
    function getCustomAttrs(attrs) {
        var htmlAttrs = attrs.htmlAttrs, classNames = attrs.classNames;
        return __assign$1(__assign$1({}, htmlAttrs), { class: classNames ? classNames.join(' ') : null });
    }

    function findWrappingOutside(range, type) {
        var parent = range.parent, startIndex = range.startIndex, endIndex = range.endIndex;
        var around = parent.contentMatchAt(startIndex).findWrapping(type);
        if (around) {
            var outer = around.length ? around[0] : type;
            return parent.canReplaceWith(startIndex, endIndex, outer) ? around : null;
        }
        return null;
    }
    function findWrappingInside(range, type) {
        var parent = range.parent, startIndex = range.startIndex, endIndex = range.endIndex;
        var inner = parent.child(startIndex);
        var inside = type.contentMatch.findWrapping(inner.type);
        if (inside) {
            var lastType = inside.length ? inside[inside.length - 1] : type;
            var innerMatch = lastType.contentMatch;
            for (var i = startIndex; innerMatch && i < endIndex; i += 1) {
                innerMatch = innerMatch.matchType(parent.child(i).type);
            }
            if (innerMatch && innerMatch.validEnd) {
                return inside;
            }
        }
        return null;
    }
    function findWrappers(range, innerRange, nodeType, attrs) {
        var around = findWrappingOutside(range, nodeType);
        var inner = findWrappingInside(innerRange, nodeType);
        if (around && inner) {
            var aroundNodes = around.map(function (type) {
                return { type: type };
            });
            var innerNodes = inner.map(function (type) {
                return { type: type, attrs: attrs };
            });
            return aroundNodes.concat({ type: nodeType }).concat(innerNodes);
        }
        return null;
    }
    function wrapInList(tr, _a, wrappers, joinBefore, list) {
        var start = _a.start, end = _a.end, startIndex = _a.startIndex, endIndex = _a.endIndex, parent = _a.parent;
        var content = Fragment.empty;
        for (var i = wrappers.length - 1; i >= 0; i -= 1) {
            content = Fragment.from(wrappers[i].type.create(wrappers[i].attrs, content));
        }
        tr.step(new ReplaceAroundStep(start - (joinBefore ? 2 : 0), end, start, end, new Slice(content, 0, 0), wrappers.length, true));
        var foundListIndex = 0;
        for (var i = 0; i < wrappers.length; i += 1) {
            if (wrappers[i].type === list) {
                foundListIndex = i + 1;
                break;
            }
        }
        var splitDepth = wrappers.length - foundListIndex;
        var splitPos = start + wrappers.length - (joinBefore ? 2 : 0);
        for (var i = startIndex, len = endIndex; i < len; i += 1) {
            var first = i === startIndex;
            if (!first && canSplit(tr.doc, splitPos, splitDepth)) {
                tr.split(splitPos, splitDepth);
                splitPos += splitDepth * 2;
            }
            splitPos += parent.child(i).nodeSize;
        }
        return tr;
    }
    function changeToList(tr, range, list, attrs) {
        var $from = range.$from, $to = range.$to, depth = range.depth;
        var outerRange = range;
        var joinBefore = false;
        if (depth >= 2 &&
            $from.node(depth - 1).type.compatibleContent(list) &&
            range.startIndex === 0 &&
            $from.index(depth - 1)) {
            var start = tr.doc.resolve(range.start - 2);
            outerRange = new NodeRange(start, start, depth);
            if (range.endIndex < range.parent.childCount) {
                range = new NodeRange($from, tr.doc.resolve($to.end(depth)), depth);
            }
            joinBefore = true;
        }
        var wrappers = findWrappers(outerRange, range, list, attrs);
        if (wrappers) {
            return wrapInList(tr, range, wrappers, joinBefore, list);
        }
        return tr;
    }
    function getBeforeLineListItem(doc, offset) {
        var endListItemPos = doc.resolve(offset);
        while (endListItemPos.node().type.name !== 'paragraph') {
            offset -= 2; // The position value of </li></ul>
            endListItemPos = doc.resolve(offset);
        }
        return findListItem(endListItemPos);
    }
    function toggleTaskListItems(tr, _a) {
        var $from = _a.$from, $to = _a.$to;
        var startListItem = findListItem($from);
        var endListItem = findListItem($to);
        if (startListItem && endListItem) {
            while (endListItem) {
                var offset = endListItem.offset, node = endListItem.node;
                var attrs = { task: !node.attrs.task, checked: false };
                tr.setNodeMarkup(offset, null, attrs);
                if (offset === startListItem.offset) {
                    break;
                }
                endListItem = getBeforeLineListItem(tr.doc, offset);
            }
        }
        return tr;
    }
    function changeListType(tr, _a, list) {
        var $from = _a.$from, $to = _a.$to;
        var startListItem = findListItem($from);
        var endListItem = findListItem($to);
        if (startListItem && endListItem) {
            while (endListItem) {
                var offset = endListItem.offset, node = endListItem.node, depth = endListItem.depth;
                if (node.attrs.task) {
                    tr.setNodeMarkup(offset, null, { task: false, checked: false });
                }
                var resolvedPos = tr.doc.resolve(offset);
                if (resolvedPos.parent.type !== list) {
                    var parentOffset = resolvedPos.before(depth - 1);
                    tr.setNodeMarkup(parentOffset, list);
                }
                if (offset === startListItem.offset) {
                    break;
                }
                endListItem = getBeforeLineListItem(tr.doc, offset);
            }
        }
        return tr;
    }
    function changeList(list) {
        return function (_a, dispatch) {
            var selection = _a.selection, tr = _a.tr;
            var $from = selection.$from, $to = selection.$to;
            var range = $from.blockRange($to);
            if (range) {
                var newTr = isInListNode($from)
                    ? changeListType(tr, range, list)
                    : changeToList(tr, range, list);
                dispatch(newTr);
                return true;
            }
            return false;
        };
    }
    function toggleTask() {
        return function (_a, dispatch) {
            var selection = _a.selection, tr = _a.tr, schema = _a.schema;
            var $from = selection.$from, $to = selection.$to;
            var range = $from.blockRange($to);
            if (range) {
                var newTr = isInListNode($from)
                    ? toggleTaskListItems(tr, range)
                    : changeToList(tr, range, schema.nodes.bulletList, { task: true });
                dispatch(newTr);
                return true;
            }
            return false;
        };
    }
    function sinkListItem(listItem) {
        return function (_a, dispatch) {
            var tr = _a.tr, selection = _a.selection;
            var $from = selection.$from, $to = selection.$to;
            var range = $from.blockRange($to, function (_a) {
                var childCount = _a.childCount, firstChild = _a.firstChild;
                return !!childCount && firstChild.type === listItem;
            });
            if (range && range.startIndex > 0) {
                var parent_1 = range.parent;
                var nodeBefore = parent_1.child(range.startIndex - 1);
                if (nodeBefore.type !== listItem) {
                    return false;
                }
                var nestedBefore = nodeBefore.lastChild && nodeBefore.lastChild.type === parent_1.type;
                var inner = nestedBefore ? Fragment.from(listItem.create()) : null;
                var slice = new Slice(Fragment.from(listItem.create(null, Fragment.from(parent_1.type.create(null, inner)))), nestedBefore ? 3 : 1, 0);
                var before = range.start;
                var after = range.end;
                tr.step(new ReplaceAroundStep(before - (nestedBefore ? 3 : 1), after, before, after, slice, 1, true));
                dispatch(tr);
                return true;
            }
            return false;
        };
    }
    function liftToOuterList(tr, range, listItem) {
        var $from = range.$from, $to = range.$to, end = range.end, depth = range.depth, parent = range.parent;
        var endOfList = $to.end(depth);
        if (end < endOfList) {
            // There are siblings after the lifted items, which must become
            // children of the last item
            tr.step(new ReplaceAroundStep(end - 1, endOfList, end, endOfList, new Slice(Fragment.from(listItem.create(null, parent.copy())), 1, 0), 1, true));
            range = new NodeRange(tr.doc.resolve($from.pos), tr.doc.resolve(endOfList), depth);
        }
        tr.lift(range, liftTarget(range));
        return tr;
    }
    function liftOutOfList(tr, range) {
        var list = range.parent;
        var pos = range.end;
        // Merge the list items into a single big item
        for (var i = range.endIndex - 1, len = range.startIndex; i > len; i -= 1) {
            pos -= list.child(i).nodeSize;
            tr.delete(pos - 1, pos + 1);
        }
        var startPos = tr.doc.resolve(range.start);
        var listItem = startPos.nodeAfter;
        var atStart = range.startIndex === 0;
        var atEnd = range.endIndex === list.childCount;
        var parent = startPos.node(-1);
        var indexBefore = startPos.index(-1);
        var canReplaceParent = parent.canReplace(indexBefore + (atStart ? 0 : 1), indexBefore + 1, listItem === null || listItem === void 0 ? void 0 : listItem.content.append(atEnd ? Fragment.empty : Fragment.from(list)));
        if (listItem && canReplaceParent) {
            var start = startPos.pos;
            var end = start + listItem.nodeSize;
            // Strip off the surrounding list. At the sides where we're not at
            // the end of the list, the existing list is closed. At sides where
            // this is the end, it is overwritten to its end.
            tr.step(new ReplaceAroundStep(start - (atStart ? 1 : 0), end + (atEnd ? 1 : 0), start + 1, end - 1, new Slice((atStart ? Fragment.empty : Fragment.from(list.copy(Fragment.empty))).append(atEnd ? Fragment.empty : Fragment.from(list.copy(Fragment.empty))), atStart ? 0 : 1, atEnd ? 0 : 1), atStart ? 0 : 1));
        }
        return tr;
    }
    function liftListItem(listItem) {
        return function (_a, dispatch) {
            var tr = _a.tr, selection = _a.selection;
            var $from = selection.$from, $to = selection.$to;
            var range = $from.blockRange($to, function (_a) {
                var childCount = _a.childCount, firstChild = _a.firstChild;
                return !!childCount && firstChild.type === listItem;
            });
            if (range) {
                var topListItem = $from.node(range.depth - 1).type === listItem;
                var newTr = topListItem ? liftToOuterList(tr, range, listItem) : liftOutOfList(tr, range);
                dispatch(newTr);
                return true;
            }
            return false;
        };
    }
    function splitListItem(listItem) {
        return function (_a, dispatch) {
            var tr = _a.tr, selection = _a.selection;
            var $from = selection.$from, $to = selection.$to;
            if ($from.depth < 2 || !$from.sameParent($to)) {
                return false;
            }
            var grandParent = $from.node(-1);
            if (grandParent.type !== listItem) {
                return false;
            }
            if ($from.parent.content.size === 0 && $from.node(-1).childCount === $from.indexAfter(-1)) {
                // In an empty block. If this is a nested list, the wrapping
                // list item should be split. Otherwise, bail out and let next
                // command handle lifting.
                if ($from.depth === 2 ||
                    $from.node(-3).type !== listItem ||
                    $from.index(-2) !== $from.node(-2).childCount - 1) {
                    return false;
                }
                var keepItem = $from.index(-1) > 0;
                var wrapper = Fragment.empty;
                // Build a fragment containing empty versions of the structure
                // from the outer list item to the parent node of the cursor
                for (var depth = $from.depth - (keepItem ? 1 : 2); depth >= $from.depth - 3; depth -= 1) {
                    wrapper = Fragment.from($from.node(depth).copy(wrapper));
                }
                // Add a second list item with an empty default start node
                wrapper = wrapper.append(Fragment.from(listItem.createAndFill()));
                tr.replace(keepItem ? $from.before() : $from.before(-1), $from.after(-3), new Slice(wrapper, keepItem ? 3 : 2, 2));
                tr.setSelection(Selection.near(tr.doc.resolve($from.pos + (keepItem ? 3 : 2))));
                dispatch(tr);
                return true;
            }
            var nextType = $to.pos === $from.end() ? grandParent.contentMatchAt(0).defaultType : null;
            var types = nextType && [null, { type: nextType }];
            tr.delete($from.pos, $to.pos);
            if (canSplit(tr.doc, $from.pos, 2, types)) {
                tr.split($from.pos, 2, types);
                dispatch(tr);
                return true;
            }
            return false;
        };
    }

    function indent() {
        return function () { return function (state, dispatch) {
            var selection = state.selection, schema = state.schema;
            var $from = selection.$from, $to = selection.$to;
            var range = $from.blockRange($to);
            if (range && isInListNode($from)) {
                return sinkListItem(schema.nodes.listItem)(state, dispatch);
            }
            return false;
        }; };
    }
    function outdent() {
        return function () { return function (state, dispatch) {
            var selection = state.selection, schema = state.schema;
            var $from = selection.$from, $to = selection.$to;
            var range = $from.blockRange($to);
            if (range && isInListNode($from)) {
                return liftListItem(schema.nodes.listItem)(state, dispatch);
            }
            return false;
        }; };
    }
    function getWwCommands() {
        return {
            indent: indent(),
            outdent: outdent(),
        };
    }

    var cache = new Map();
    /* eslint-disable @typescript-eslint/no-unused-vars */
    var TableOffsetMap = /** @class */ (function () {
        function TableOffsetMap(table, tableRows, tableStartPos, rowInfo) {
            this.table = table;
            this.tableRows = tableRows;
            this.tableStartPos = tableStartPos;
            this.rowInfo = rowInfo;
        }
        TableOffsetMap.create = function (cellPos) {
            var table = findNodeBy(cellPos, function (_a) {
                var type = _a.type;
                return type.name === 'table';
            });
            if (table) {
                var node = table.node, depth = table.depth, offset = table.offset;
                var cached = cache.get(node);
                if ((cached === null || cached === void 0 ? void 0 : cached.tableStartPos) === offset + 1) {
                    return cached;
                }
                var rows_1 = [];
                var tablePos = cellPos.start(depth);
                var thead = node.child(0);
                var tbody = node.child(1);
                var theadCellInfo = createOffsetMap(thead, tablePos);
                var tbodyCellInfo = createOffsetMap(tbody, tablePos + thead.nodeSize);
                thead.forEach(function (row) { return rows_1.push(row); });
                tbody.forEach(function (row) { return rows_1.push(row); });
                var map = new TableOffsetMap(node, rows_1, tablePos, theadCellInfo.concat(tbodyCellInfo));
                cache.set(node, map);
                return map;
            }
            return null;
        };
        Object.defineProperty(TableOffsetMap.prototype, "totalRowCount", {
            get: function () {
                return this.rowInfo.length;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TableOffsetMap.prototype, "totalColumnCount", {
            get: function () {
                return this.rowInfo[0].length;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TableOffsetMap.prototype, "tableStartOffset", {
            get: function () {
                return this.tableStartPos;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TableOffsetMap.prototype, "tableEndOffset", {
            get: function () {
                return this.tableStartPos + this.table.nodeSize - 1;
            },
            enumerable: false,
            configurable: true
        });
        TableOffsetMap.prototype.getCellInfo = function (rowIdx, colIdx) {
            return this.rowInfo[rowIdx][colIdx];
        };
        TableOffsetMap.prototype.posAt = function (rowIdx, colIdx) {
            for (var i = 0, rowStart = this.tableStartPos;; i += 1) {
                var rowEnd = rowStart + this.tableRows[i].nodeSize;
                if (i === rowIdx) {
                    var index = colIdx;
                    // Skip the cells from previous row(via rowspan)
                    while (index < this.totalColumnCount && this.rowInfo[i][index].offset < rowStart) {
                        index += 1;
                    }
                    return index === this.totalColumnCount ? rowEnd : this.rowInfo[i][index].offset;
                }
                rowStart = rowEnd;
            }
        };
        TableOffsetMap.prototype.getNodeAndPos = function (rowIdx, colIdx) {
            var cellInfo = this.rowInfo[rowIdx][colIdx];
            return { node: this.table.nodeAt(cellInfo.offset - 1), pos: cellInfo.offset };
        };
        TableOffsetMap.prototype.extendedRowspan = function (rowIdx, colIdx) {
            return false;
        };
        TableOffsetMap.prototype.extendedColspan = function (rowIdx, colIdx) {
            return false;
        };
        TableOffsetMap.prototype.getRowspanCount = function (rowIdx, colIdx) {
            return 0;
        };
        TableOffsetMap.prototype.getColspanCount = function (rowIdx, colIdx) {
            return 0;
        };
        TableOffsetMap.prototype.decreaseColspanCount = function (rowIdx, colIdx) {
            return 0;
        };
        TableOffsetMap.prototype.decreaseRowspanCount = function (rowIdx, colIdx) {
            return 0;
        };
        TableOffsetMap.prototype.getColspanStartInfo = function (rowIdx, colIdx) {
            return null;
        };
        TableOffsetMap.prototype.getRowspanStartInfo = function (rowIdx, colIdx) {
            return null;
        };
        TableOffsetMap.prototype.getCellStartOffset = function (rowIdx, colIdx) {
            var offset = this.rowInfo[rowIdx][colIdx].offset;
            return this.extendedRowspan(rowIdx, colIdx) ? this.posAt(rowIdx, colIdx) : offset;
        };
        TableOffsetMap.prototype.getCellEndOffset = function (rowIdx, colIdx) {
            var _a = this.rowInfo[rowIdx][colIdx], offset = _a.offset, nodeSize = _a.nodeSize;
            return this.extendedRowspan(rowIdx, colIdx) ? this.posAt(rowIdx, colIdx) : offset + nodeSize;
        };
        TableOffsetMap.prototype.getCellIndex = function (cellPos) {
            for (var rowIdx = 0; rowIdx < this.totalRowCount; rowIdx += 1) {
                var rowInfo = this.rowInfo[rowIdx];
                for (var colIdx = 0; colIdx < this.totalColumnCount; colIdx += 1) {
                    if (rowInfo[colIdx].offset + 1 > cellPos.pos) {
                        return [rowIdx, colIdx];
                    }
                }
            }
            return [0, 0];
        };
        TableOffsetMap.prototype.getRectOffsets = function (startCellPos, endCellPos) {
            var _a, _b, _c;
            if (endCellPos === void 0) { endCellPos = startCellPos; }
            if (startCellPos.pos > endCellPos.pos) {
                _a = [endCellPos, startCellPos], startCellPos = _a[0], endCellPos = _a[1];
            }
            var _d = this.getCellIndex(startCellPos), startRowIdx = _d[0], startColIdx = _d[1];
            var _e = this.getCellIndex(endCellPos), endRowIdx = _e[0], endColIdx = _e[1];
            _b = getSortedNumPair(startRowIdx, endRowIdx), startRowIdx = _b[0], endRowIdx = _b[1];
            _c = getSortedNumPair(startColIdx, endColIdx), startColIdx = _c[0], endColIdx = _c[1];
            return this.getSpannedOffsets({ startRowIdx: startRowIdx, startColIdx: startColIdx, endRowIdx: endRowIdx, endColIdx: endColIdx });
        };
        TableOffsetMap.prototype.getSpannedOffsets = function (selectionInfo) {
            return selectionInfo;
        };
        return TableOffsetMap;
    }());
    /* eslint-enable @typescript-eslint/no-unused-vars */
    var createOffsetMap = function (headOrBody, startOffset) {
        var cellInfoMatrix = [];
        headOrBody.forEach(function (row, rowOffset) {
            // get row index based on table(not table head or table body)
            var rowInfo = { rowspanMap: {}, colspanMap: {}, length: 0 };
            row.forEach(function (_a, cellOffset) {
                var nodeSize = _a.nodeSize;
                var colIdx = 0;
                while (rowInfo[colIdx]) {
                    colIdx += 1;
                }
                rowInfo[colIdx] = {
                    // 2 is the sum of the front and back positions of the tag
                    offset: startOffset + rowOffset + cellOffset + 2,
                    nodeSize: nodeSize,
                };
                rowInfo.length += 1;
            });
            cellInfoMatrix.push(rowInfo);
        });
        return cellInfoMatrix;
    };
    function mixinTableOffsetMapPrototype(offsetMapMixin, createOffsetMapMixin) {
        assign(TableOffsetMap.prototype, offsetMapMixin);
        createOffsetMap = createOffsetMapMixin;
        return TableOffsetMap;
    }

    function getSelectionRanges(doc, map, _a) {
        var startRowIdx = _a.startRowIdx, startColIdx = _a.startColIdx, endRowIdx = _a.endRowIdx, endColIdx = _a.endColIdx;
        var ranges = [];
        for (var rowIdx = startRowIdx; rowIdx <= endRowIdx; rowIdx += 1) {
            for (var colIdx = startColIdx; colIdx <= endColIdx; colIdx += 1) {
                var _b = map.getCellInfo(rowIdx, colIdx), offset = _b.offset, nodeSize = _b.nodeSize;
                ranges.push(new SelectionRange(doc.resolve(offset + 1), doc.resolve(offset + nodeSize - 1)));
            }
        }
        return ranges;
    }
    function createTableFragment(tableHead, tableBody) {
        var fragment = [];
        if (tableHead.childCount) {
            fragment.push(tableHead);
        }
        if (tableBody.childCount) {
            fragment.push(tableBody);
        }
        return Fragment.from(fragment);
    }
    var CellSelection = /** @class */ (function (_super) {
        __extends$1(CellSelection, _super);
        function CellSelection(startCellPos, endCellPos) {
            if (endCellPos === void 0) { endCellPos = startCellPos; }
            var _this = this;
            var doc = startCellPos.node(0);
            var map = TableOffsetMap.create(startCellPos);
            var selectionInfo = map.getRectOffsets(startCellPos, endCellPos);
            var ranges = getSelectionRanges(doc, map, selectionInfo);
            _this = _super.call(this, ranges[0].$from, ranges[0].$to, ranges) || this;
            _this.startCell = startCellPos;
            _this.endCell = endCellPos;
            _this.offsetMap = map;
            _this.isCellSelection = true;
            // This property is the api of the 'Selection' in prosemirror,
            // and is used to disable the text selection.
            _this.visible = false;
            return _this;
        }
        CellSelection.prototype.map = function (doc, mapping) {
            var startPos = this.startCell.pos;
            var endPos = this.endCell.pos;
            var startCell = doc.resolve(mapping.map(startPos));
            var endCell = doc.resolve(mapping.map(endPos));
            var map = TableOffsetMap.create(startCell);
            // text selection when rows or columns are deleted
            if (this.offsetMap.totalColumnCount > map.totalColumnCount ||
                this.offsetMap.totalRowCount > map.totalRowCount) {
                var depthMap = { tableBody: 1, tableRow: 2, tableCell: 3, paragraph: 4 };
                var depthFromTable = depthMap[endCell.parent.type.name];
                var tableEndPos = endCell.end(endCell.depth - depthFromTable);
                // subtract 4(</td></tr></tbody></table> tag length)
                var from = Math.min(tableEndPos - 4, endCell.pos);
                return TextSelection.create(doc, from);
            }
            return new CellSelection(startCell, endCell);
        };
        CellSelection.prototype.eq = function (cell) {
            return (cell instanceof CellSelection &&
                cell.startCell.pos === this.startCell.pos &&
                cell.endCell.pos === this.endCell.pos);
        };
        CellSelection.prototype.content = function () {
            var table = this.startCell.node(-2);
            var tableOffset = this.startCell.start(-2);
            var row = table.child(1).firstChild;
            var tableHead = table.child(0).type.create();
            var tableBody = table.child(1).type.create();
            var map = TableOffsetMap.create(this.startCell);
            var selectionInfo = map.getRectOffsets(this.startCell, this.endCell);
            var startRowIdx = selectionInfo.startRowIdx, startColIdx = selectionInfo.startColIdx, endRowIdx = selectionInfo.endRowIdx, endColIdx = selectionInfo.endColIdx;
            var isTableHeadCell = false;
            for (var rowIdx = startRowIdx; rowIdx <= endRowIdx; rowIdx += 1) {
                var cells = [];
                for (var colIdx = startColIdx; colIdx <= endColIdx; colIdx += 1) {
                    var offset = map.getCellInfo(rowIdx, colIdx).offset;
                    var cell = table.nodeAt(offset - tableOffset);
                    if (cell) {
                        isTableHeadCell = cell.type.name === 'tableHeadCell';
                        // mark the extended cell for pasting
                        if (map.extendedRowspan(rowIdx, colIdx) || map.extendedColspan(rowIdx, colIdx)) {
                            cells.push(cell.type.create({ extended: true }));
                        }
                        else {
                            cells.push(cell.copy(cell.content));
                        }
                    }
                }
                var copiedRow = row.copy(Fragment.from(cells));
                var targetNode = isTableHeadCell ? tableHead : tableBody;
                targetNode.content = targetNode.content.append(Fragment.from(copiedRow));
            }
            return new Slice(createTableFragment(tableHead, tableBody), 1, 1);
        };
        return CellSelection;
    }(Selection));

    function createTableHeadRow(columnCount, schema, data) {
        var _a = schema.nodes, tableRow = _a.tableRow, tableHeadCell = _a.tableHeadCell, paragraph = _a.paragraph;
        var cells = [];
        for (var index = 0; index < columnCount; index += 1) {
            var text = data && data[index];
            var para = paragraph.create(null, text ? schema.text(text) : []);
            cells.push(tableHeadCell.create(null, para));
        }
        return [tableRow.create(null, cells)];
    }
    function createTableBodyRows(rowCount, columnCount, schema, data) {
        var _a = schema.nodes, tableRow = _a.tableRow, tableBodyCell = _a.tableBodyCell, paragraph = _a.paragraph;
        var tableRows = [];
        for (var rowIdx = 0; rowIdx < rowCount; rowIdx += 1) {
            var cells = [];
            for (var colIdx = 0; colIdx < columnCount; colIdx += 1) {
                var text = data && data[rowIdx * columnCount + colIdx];
                var para = paragraph.create(null, text ? schema.text(text) : []);
                cells.push(tableBodyCell.create(null, para));
            }
            tableRows.push(tableRow.create(null, cells));
        }
        return tableRows;
    }
    function createDummyCells(columnCount, rowIdx, schema, attrs) {
        if (attrs === void 0) { attrs = null; }
        var _a = schema.nodes, tableHeadCell = _a.tableHeadCell, tableBodyCell = _a.tableBodyCell, paragraph = _a.paragraph;
        var cell = rowIdx === 0 ? tableHeadCell : tableBodyCell;
        var cells = [];
        for (var index = 0; index < columnCount; index += 1) {
            cells.push(cell.create(attrs, paragraph.create()));
        }
        return cells;
    }
    function findCellElement(node, root) {
        while (node && node !== root) {
            if (node.nodeName === 'TD' || node.nodeName === 'TH') {
                return node;
            }
            node = node.parentNode;
        }
        return null;
    }
    function findCell(pos) {
        return findNodeBy(pos, function (_a) {
            var type = _a.type;
            return type.name === 'tableHeadCell' || type.name === 'tableBodyCell';
        });
    }
    function getResolvedSelection(selection) {
        if (selection instanceof TextSelection) {
            var $anchor = selection.$anchor;
            var foundCell = findCell($anchor);
            if (foundCell) {
                var anchor = $anchor.node(0).resolve($anchor.before(foundCell.depth));
                return { anchor: anchor, head: anchor };
            }
        }
        var _a = selection, startCell = _a.startCell, endCell = _a.endCell;
        return { anchor: startCell, head: endCell };
    }
    function getTableContentFromSlice(slice) {
        var _a;
        if (slice.size) {
            var content = slice.content, openStart = slice.openStart, openEnd = slice.openEnd;
            if (content.childCount !== 1) {
                return null;
            }
            while (content.childCount === 1 &&
                ((openStart > 0 && openEnd > 0) || ((_a = content.firstChild) === null || _a === void 0 ? void 0 : _a.type.name) === 'table')) {
                openStart -= 1;
                openEnd -= 1;
                content = content.firstChild.content;
            }
            if (content.firstChild.type.name === 'tableHead' ||
                content.firstChild.type.name === 'tableBody') {
                return content;
            }
        }
        return null;
    }
    function getRowAndColumnCount(_a) {
        var startRowIdx = _a.startRowIdx, startColIdx = _a.startColIdx, endRowIdx = _a.endRowIdx, endColIdx = _a.endColIdx;
        var rowCount = endRowIdx - startRowIdx + 1;
        var columnCount = endColIdx - startColIdx + 1;
        return { rowCount: rowCount, columnCount: columnCount };
    }
    function setAttrs(cell, attrs) {
        return __assign$1(__assign$1({}, cell.attrs), attrs);
    }

    var pluginKey = new PluginKey('cellSelection');
    var MOUSE_RIGHT_BUTTON = 2;
    var TableSelection = /** @class */ (function () {
        function TableSelection(view) {
            this.view = view;
            this.handlers = {
                mousedown: this.handleMousedown.bind(this),
                mousemove: this.handleMousemove.bind(this),
                mouseup: this.handleMouseup.bind(this),
            };
            this.startCellPos = null;
            this.init();
        }
        TableSelection.prototype.init = function () {
            this.view.dom.addEventListener('mousedown', this.handlers.mousedown);
        };
        TableSelection.prototype.handleMousedown = function (ev) {
            var foundCell = findCellElement(ev.target, this.view.dom);
            if (ev.button === MOUSE_RIGHT_BUTTON) {
                ev.preventDefault();
                return;
            }
            if (foundCell) {
                var startCellPos = this.getCellPos(ev);
                if (startCellPos) {
                    this.startCellPos = startCellPos;
                }
                this.bindEvent();
            }
        };
        TableSelection.prototype.handleMousemove = function (ev) {
            var prevEndCellOffset = pluginKey.getState(this.view.state);
            var endCellPos = this.getCellPos(ev);
            var startCellPos = this.startCellPos;
            var prevEndCellPos;
            if (prevEndCellOffset) {
                prevEndCellPos = this.view.state.doc.resolve(prevEndCellOffset);
            }
            else if (startCellPos !== endCellPos) {
                prevEndCellPos = startCellPos;
            }
            if (prevEndCellPos && startCellPos && endCellPos) {
                this.setCellSelection(startCellPos, endCellPos);
            }
        };
        TableSelection.prototype.handleMouseup = function () {
            this.startCellPos = null;
            this.unbindEvent();
            if (pluginKey.getState(this.view.state) !== null) {
                this.view.dispatch(this.view.state.tr.setMeta(pluginKey, -1));
            }
        };
        TableSelection.prototype.bindEvent = function () {
            var dom = this.view.dom;
            dom.addEventListener('mousemove', this.handlers.mousemove);
            dom.addEventListener('mouseup', this.handlers.mouseup);
        };
        TableSelection.prototype.unbindEvent = function () {
            var dom = this.view.dom;
            dom.removeEventListener('mousemove', this.handlers.mousemove);
            dom.removeEventListener('mouseup', this.handlers.mouseup);
        };
        TableSelection.prototype.getCellPos = function (_a) {
            var clientX = _a.clientX, clientY = _a.clientY;
            var mousePos = this.view.posAtCoords({ left: clientX, top: clientY });
            if (mousePos) {
                var doc = this.view.state.doc;
                var currentPos = doc.resolve(mousePos.pos);
                var foundCell = findCell(currentPos);
                if (foundCell) {
                    var cellOffset = currentPos.before(foundCell.depth);
                    return doc.resolve(cellOffset);
                }
            }
            return null;
        };
        TableSelection.prototype.setCellSelection = function (startCellPos, endCellPos) {
            var _a = this.view.state, selection = _a.selection, tr = _a.tr;
            var starting = pluginKey.getState(this.view.state) === null;
            var cellSelection = new CellSelection(startCellPos, endCellPos);
            if (starting || !selection.eq(cellSelection)) {
                var newTr = tr.setSelection(cellSelection);
                if (starting) {
                    newTr.setMeta(pluginKey, endCellPos.pos);
                }
                this.view.dispatch(newTr);
            }
        };
        TableSelection.prototype.destroy = function () {
            this.view.dom.removeEventListener('mousedown', this.handlers.mousedown);
        };
        return TableSelection;
    }());

    var SELECTED_CELL_CLASS_NAME = cls('cell-selected');
    function drawCellSelection(_a) {
        var selection = _a.selection, doc = _a.doc;
        if (selection instanceof CellSelection) {
            var cells_1 = [];
            var ranges = selection.ranges;
            ranges.forEach(function (_a) {
                var $from = _a.$from, $to = _a.$to;
                cells_1.push(Decoration.node($from.pos - 1, $to.pos + 1, { class: SELECTED_CELL_CLASS_NAME }));
            });
            return DecorationSet.create(doc, cells_1);
        }
        return null;
    }
    function tableSelection() {
        return new Plugin({
            key: pluginKey,
            state: {
                init: function () {
                    return null;
                },
                apply: function (tr, value) {
                    var cellOffset = tr.getMeta(pluginKey);
                    if (cellOffset) {
                        return cellOffset === -1 ? null : cellOffset;
                    }
                    if (isNull_1(value) || !tr.docChanged) {
                        return value;
                    }
                    var _a = tr.mapping.mapResult(value), deleted = _a.deleted, pos = _a.pos;
                    return deleted ? null : pos;
                },
            },
            props: {
                decorations: drawCellSelection,
                createSelectionBetween: function (_a) {
                    var state = _a.state;
                    if (!isNull_1(pluginKey.getState(state))) {
                        return state.selection;
                    }
                    return null;
                },
            },
            view: function (editorView) {
                return new TableSelection(editorView);
            },
        });
    }

    /**
     * @class
     * @ignore
     * @classdesc ES6 Map
     */
    var Map$1 = /** @class */ (function () {
        function Map() {
            this.keys = [];
            this.values = [];
        }
        Map.prototype.getKeyIndex = function (key) {
            return inArray_1(key, this.keys);
        };
        Map.prototype.get = function (key) {
            return this.values[this.getKeyIndex(key)];
        };
        Map.prototype.set = function (key, value) {
            var keyIndex = this.getKeyIndex(key);
            if (keyIndex > -1) {
                this.values[keyIndex] = value;
            }
            else {
                this.keys.push(key);
                this.values.push(value);
            }
            return this;
        };
        Map.prototype.has = function (key) {
            return this.getKeyIndex(key) > -1;
        };
        Map.prototype.delete = function (key) {
            var keyIndex = this.getKeyIndex(key);
            if (keyIndex > -1) {
                this.keys.splice(keyIndex, 1);
                this.values.splice(keyIndex, 1);
                return true;
            }
            return false;
        };
        Map.prototype.forEach = function (callback, thisArg) {
            var _this = this;
            if (thisArg === void 0) { thisArg = this; }
            this.values.forEach(function (value, index) {
                if (value && _this.keys[index]) {
                    callback.call(thisArg, value, _this.keys[index], _this);
                }
            });
        };
        Map.prototype.clear = function () {
            this.keys = [];
            this.values = [];
        };
        return Map;
    }());

    /**
     * @fileoverview Implements i18n
     * @author NHN FE Development Lab <dl_javascript@nhn.com>
     */
    var DEFAULT_CODE = 'en-US';
    /**
     * Class I18n
     * @ignore
     */
    var I18n = /** @class */ (function () {
        function I18n() {
            this.code = DEFAULT_CODE;
            this.langs = new Map$1();
        }
        I18n.prototype.setCode = function (code) {
            this.code = code || DEFAULT_CODE;
        };
        /**
         * Set language set
         * @param {string|string[]} codes locale code
         * @param {object} data language set
         */
        I18n.prototype.setLanguage = function (codes, data) {
            var _this = this;
            codes = [].concat(codes);
            codes.forEach(function (code) {
                if (!_this.langs.has(code)) {
                    _this.langs.set(code, data);
                }
                else {
                    var langData = _this.langs.get(code);
                    _this.langs.set(code, extend_1(langData, data));
                }
            });
        };
        I18n.prototype.get = function (key, code) {
            if (!code) {
                code = this.code;
            }
            var langSet = this.langs.get(code);
            if (!langSet) {
                langSet = this.langs.get(DEFAULT_CODE);
            }
            var text = langSet[key];
            if (!text) {
                throw new Error("There is no text key \"" + key + "\" in " + code);
            }
            return text;
        };
        return I18n;
    }());
    var i18n = new I18n();

    var contextMenuGroups = [
        [
            {
                action: 'Add row to up',
                command: 'addRowToUp',
                disableInThead: true,
                className: 'add-row-up',
            },
            {
                action: 'Add row to down',
                command: 'addRowToDown',
                disableInThead: true,
                className: 'add-row-down',
            },
            { action: 'Remove row', command: 'removeRow', disableInThead: true, className: 'remove-row' },
        ],
        [
            { action: 'Add column to left', command: 'addColumnToLeft', className: 'add-column-left' },
            { action: 'Add column to right', command: 'addColumnToRight', className: 'add-column-right' },
            { action: 'Remove column', command: 'removeColumn', className: 'remove-column' },
        ],
        [
            {
                action: 'Align column to left',
                command: 'alignColumn',
                payload: { align: 'left' },
                className: 'align-column-left',
            },
            {
                action: 'Align column to center',
                command: 'alignColumn',
                payload: { align: 'center' },
                className: 'align-column-center',
            },
            {
                action: 'Align column to right',
                command: 'alignColumn',
                payload: { align: 'right' },
                className: 'align-column-right',
            },
        ],
        [{ action: 'Remove table', command: 'removeTable', className: 'remove-table' }],
    ];
    function getContextMenuGroups(eventEmitter, inTableHead) {
        return contextMenuGroups
            .map(function (contextMenuGroup) {
            return contextMenuGroup.map(function (_a) {
                var action = _a.action, command = _a.command, payload = _a.payload, disableInThead = _a.disableInThead, className = _a.className;
                return {
                    label: i18n.get(action),
                    onClick: function () {
                        eventEmitter.emit('command', command, payload);
                    },
                    disabled: inTableHead && !!disableInThead,
                    className: className,
                };
            });
        })
            .concat();
    }
    function tableContextMenu(eventEmitter) {
        return new Plugin({
            props: {
                handleDOMEvents: {
                    contextmenu: function (view, ev) {
                        var tableCell = findCellElement(ev.target, view.dom);
                        if (tableCell) {
                            ev.preventDefault();
                            var _a = ev, clientX = _a.clientX, clientY = _a.clientY;
                            var _b = view.dom.parentNode.getBoundingClientRect(), left = _b.left, top_1 = _b.top;
                            var inTableHead = tableCell.nodeName === 'TH';
                            eventEmitter.emit('contextmenu', {
                                pos: { left: clientX - left + 10 + "px", top: clientY - top_1 + 30 + "px" },
                                menuGroups: getContextMenuGroups(eventEmitter, inTableHead),
                                tableCell: tableCell,
                            });
                            return true;
                        }
                        return false;
                    },
                },
            },
        });
    }

    function task() {
        return new Plugin({
            props: {
                handleDOMEvents: {
                    mousedown: function (view, ev) {
                        var _a = ev, clientX = _a.clientX, clientY = _a.clientY;
                        var mousePos = view.posAtCoords({ left: clientX, top: clientY });
                        if (mousePos) {
                            var _b = view.state, doc = _b.doc, tr = _b.tr;
                            var currentPos = doc.resolve(mousePos.pos);
                            var listItem = findListItem(currentPos);
                            var target = ev.target;
                            var style = getComputedStyle(target, ':before');
                            var _c = ev, offsetX = _c.offsetX, offsetY = _c.offsetY;
                            if (!listItem || !isPositionInBox(style, offsetX, offsetY)) {
                                return false;
                            }
                            ev.preventDefault();
                            var offset = currentPos.before(listItem.depth);
                            var attrs = listItem.node.attrs;
                            tr.setNodeMarkup(offset, null, __assign$1(__assign$1({}, attrs), { checked: !attrs.checked }));
                            view.dispatch(tr);
                            return true;
                        }
                        return false;
                    },
                },
            },
        });
    }

    var EXCEPT_TYPES = ['image', 'link', 'customBlock', 'frontMatter'];
    var MARK_TYPES = ['strong', 'strike', 'emph', 'code'];
    var LIST_TYPES = ['bulletList', 'orderedList', 'taskList'];
    function getToolbarStateType(node, parentNode) {
        var type = node.type.name;
        if (type === 'listItem') {
            return node.attrs.task ? 'taskList' : parentNode.type.name;
        }
        if (type.indexOf('table') !== -1) {
            return 'table';
        }
        return type;
    }
    function setListNodeToolbarState(type, nodeTypeState) {
        nodeTypeState[type] = true;
        LIST_TYPES.filter(function (listName) { return listName !== type; }).forEach(function (listType) {
            if (nodeTypeState[listType]) {
                delete nodeTypeState[listType];
            }
        });
    }
    function getMarkTypeStates(from, to, schema) {
        var markTypeState = {};
        MARK_TYPES.forEach(function (type) {
            var mark = schema.marks[type];
            var marksAtPos = from.marksAcross(to) || [];
            var foundMark = !!mark.isInSet(marksAtPos);
            if (foundMark) {
                markTypeState[type] = true;
            }
        });
        return markTypeState;
    }
    function getToolbarState(selection, doc, schema) {
        var $from = selection.$from, $to = selection.$to, from = selection.from, to = selection.to;
        var nodeTypeState = {};
        var markTypeState = {};
        doc.nodesBetween(from, to, function (node, _, parentNode) {
            var type = getToolbarStateType(node, parentNode);
            if (includes(EXCEPT_TYPES, type)) {
                return;
            }
            if (includes(LIST_TYPES, type)) {
                setListNodeToolbarState(type, nodeTypeState);
            }
            else if (type === 'paragraph' || type === 'text') {
                markTypeState = getMarkTypeStates($from, $to, schema);
            }
            else {
                nodeTypeState[type] = true;
            }
        });
        return __assign$1(__assign$1({}, nodeTypeState), markTypeState);
    }
    function toolbarState(eventEmitter) {
        return new Plugin({
            view: function () {
                return {
                    update: function (view) {
                        var _a = view.state, selection = _a.selection, doc = _a.doc, schema = _a.schema;
                        eventEmitter.emit('changeToolbarState', {
                            toolbarState: getToolbarState(selection, doc, schema),
                        });
                    },
                };
            },
        });
    }

    var CustomBlockView = /** @class */ (function () {
        function CustomBlockView(node, view, getPos, toDOMAdaptor) {
            var _this = this;
            this.openEditor = function () {
                if (_this.innerEditorView) {
                    throw new Error('The editor is already opened.');
                }
                _this.wrapper.style.display = 'none';
                _this.innerViewContainer.style.display = 'block';
                _this.innerEditorView = new EditorView(_this.innerViewContainer, {
                    state: EditorState.create({
                        doc: _this.node,
                        plugins: [
                            keymap({
                                'Mod-z': function () { return undo(_this.innerEditorView.state, _this.innerEditorView.dispatch); },
                                'Shift-Mod-z': function () { return redo(_this.innerEditorView.state, _this.innerEditorView.dispatch); },
                                Tab: function (state, dispatch) {
                                    dispatch(state.tr.insertText('\t'));
                                    return true;
                                },
                                Enter: newlineInCode,
                                Escape: function () {
                                    _this.cancelEditing();
                                    return true;
                                },
                                'Ctrl-Enter': function () {
                                    _this.saveAndFinishEditing();
                                    return true;
                                },
                            }),
                            history$1(),
                        ],
                    }),
                    dispatchTransaction: function (tr) { return _this.dispatchInner(tr); },
                    handleDOMEvents: {
                        mousedown: function () {
                            if (_this.editorView.hasFocus()) {
                                _this.innerEditorView.focus();
                            }
                            return true;
                        },
                        blur: function () {
                            _this.saveAndFinishEditing();
                            return true;
                        },
                    },
                });
                _this.innerEditorView.focus();
            };
            this.node = node;
            this.editorView = view;
            this.getPos = getPos;
            this.toDOMAdaptor = toDOMAdaptor;
            this.innerEditorView = null;
            this.canceled = false;
            this.dom = document.createElement('div');
            this.dom.className = cls('custom-block');
            this.wrapper = document.createElement('div');
            this.wrapper.className = cls('custom-block-view');
            this.createInnerViewContainer();
            this.renderCustomBlock();
            this.dom.appendChild(this.innerViewContainer);
            this.dom.appendChild(this.wrapper);
        }
        CustomBlockView.prototype.renderToolArea = function () {
            var _this = this;
            var tool = document.createElement('div');
            var span = document.createElement('span');
            var button = document.createElement('button');
            tool.className = 'tool';
            span.textContent = this.node.attrs.info;
            span.className = 'info';
            button.type = 'button';
            button.addEventListener('click', function () { return _this.openEditor(); });
            tool.appendChild(span);
            tool.appendChild(button);
            this.wrapper.appendChild(tool);
        };
        CustomBlockView.prototype.renderCustomBlock = function () {
            var toDOMNode = this.toDOMAdaptor.getToDOMNode(this.node.attrs.info);
            if (toDOMNode) {
                var node = toDOMNode(this.node);
                while (this.wrapper.hasChildNodes()) {
                    this.wrapper.removeChild(this.wrapper.lastChild);
                }
                if (node) {
                    this.wrapper.appendChild(node);
                }
                this.renderToolArea();
            }
        };
        CustomBlockView.prototype.createInnerViewContainer = function () {
            this.innerViewContainer = document.createElement('div');
            this.innerViewContainer.className = cls('custom-block-editor');
            this.innerViewContainer.style.display = 'none';
        };
        CustomBlockView.prototype.closeEditor = function () {
            if (this.innerEditorView) {
                this.innerEditorView.destroy();
                this.innerEditorView = null;
                this.innerViewContainer.style.display = 'none';
            }
            this.wrapper.style.display = 'block';
        };
        CustomBlockView.prototype.saveAndFinishEditing = function () {
            var to = this.editorView.state.selection.to;
            var outerState = this.editorView.state;
            this.editorView.dispatch(outerState.tr.setSelection(createTextSelection(outerState.tr, to)));
            this.editorView.focus();
            this.renderCustomBlock();
            this.closeEditor();
        };
        CustomBlockView.prototype.cancelEditing = function () {
            var undoableCount = undoDepth(this.innerEditorView.state);
            this.canceled = true;
            // should undo editing result
            // eslint-disable-next-line no-plusplus
            while (undoableCount--) {
                undo(this.innerEditorView.state, this.innerEditorView.dispatch);
                undo(this.editorView.state, this.editorView.dispatch);
            }
            this.canceled = false;
            var to = this.editorView.state.selection.to;
            var outerState = this.editorView.state;
            this.editorView.dispatch(outerState.tr.setSelection(TextSelection.create(outerState.doc, to)));
            this.editorView.focus();
            this.closeEditor();
        };
        CustomBlockView.prototype.dispatchInner = function (tr) {
            var _a = this.innerEditorView.state.applyTransaction(tr), state = _a.state, transactions = _a.transactions;
            this.innerEditorView.updateState(state);
            if (!this.canceled && isFunction_1(this.getPos)) {
                var outerTr = this.editorView.state.tr;
                var offsetMap = StepMap.offset(this.getPos() + 1);
                for (var i = 0; i < transactions.length; i += 1) {
                    var steps = transactions[i].steps;
                    for (var j = 0; j < steps.length; j += 1) {
                        outerTr.step(steps[j].map(offsetMap));
                    }
                }
                if (outerTr.docChanged) {
                    this.editorView.dispatch(outerTr);
                }
            }
        };
        CustomBlockView.prototype.update = function (node) {
            if (!node.sameMarkup(this.node)) {
                return false;
            }
            this.node = node;
            if (!this.innerEditorView) {
                this.renderCustomBlock();
            }
            return true;
        };
        CustomBlockView.prototype.stopEvent = function (event) {
            return (!!this.innerEditorView &&
                !!event.target &&
                this.innerEditorView.dom.contains(event.target));
        };
        CustomBlockView.prototype.ignoreMutation = function () {
            return true;
        };
        CustomBlockView.prototype.destroy = function () {
            this.dom.removeEventListener('dblclick', this.openEditor);
            this.closeEditor();
        };
        return CustomBlockView;
    }());

    var IMAGE_LINK_CLASS_NAME = 'image-link';
    var ImageView = /** @class */ (function () {
        function ImageView(node, view, getPos, eventEmitter) {
            var _this = this;
            var _a;
            this.handleMousedown = function (ev) {
                ev.preventDefault();
                var target = ev.target, offsetX = ev.offsetX, offsetY = ev.offsetY;
                if (_this.imageLink &&
                    isFunction_1(_this.getPos) &&
                    hasClass_1(target, IMAGE_LINK_CLASS_NAME)) {
                    var style = getComputedStyle(target, ':before');
                    ev.stopPropagation();
                    if (isPositionInBox(style, offsetX, offsetY)) {
                        var tr = _this.view.state.tr;
                        var pos = _this.getPos();
                        tr.setSelection(createTextSelection(tr, pos, pos + 1));
                        _this.view.dispatch(tr);
                        _this.eventEmitter.emit('openPopup', 'link', _this.imageLink.attrs);
                    }
                }
            };
            this.node = node;
            this.view = view;
            this.getPos = getPos;
            this.eventEmitter = eventEmitter;
            this.imageLink = (_a = node.marks.filter(function (_a) {
                var type = _a.type;
                return type.name === 'link';
            })[0]) !== null && _a !== void 0 ? _a : null;
            this.dom = this.createElement();
            this.bindEvent();
        }
        ImageView.prototype.createElement = function () {
            var image = this.createImageElement(this.node);
            if (this.imageLink) {
                var wrapper = document.createElement('span');
                wrapper.className = IMAGE_LINK_CLASS_NAME;
                wrapper.appendChild(image);
                return wrapper;
            }
            return image;
        };
        ImageView.prototype.createImageElement = function (node) {
            var image = document.createElement('img');
            var _a = node.attrs, imageUrl = _a.imageUrl, altText = _a.altText;
            var attrs = getCustomAttrs(node.attrs);
            image.src = imageUrl;
            if (altText) {
                image.alt = altText;
            }
            setAttributes(attrs, image);
            return image;
        };
        ImageView.prototype.bindEvent = function () {
            if (this.imageLink) {
                this.dom.addEventListener('mousedown', this.handleMousedown);
            }
        };
        ImageView.prototype.stopEvent = function () {
            return true;
        };
        ImageView.prototype.destroy = function () {
            if (this.imageLink) {
                this.dom.removeEventListener('mousedown', this.handleMousedown);
            }
        };
        return ImageView;
    }());

    var WRAPPER_CLASS_NAME = 'toastui-editor-ww-code-block';
    var CODE_BLOCK_LANG_CLASS_NAME = 'toastui-editor-ww-code-block-language';
    var CodeBlockView = /** @class */ (function () {
        function CodeBlockView(node, view, getPos, eventEmitter) {
            var _this = this;
            this.dom = null;
            this.contentDOM = null;
            this.input = null;
            this.handleMousedown = function (ev) {
                var target = ev.target;
                var style = getComputedStyle(target, ':after');
                // judge to click pseudo element with background image for IE11
                if (style.backgroundImage !== 'none' && isFunction_1(_this.getPos)) {
                    var _a = _this.view.coordsAtPos(_this.getPos()), top_1 = _a.top, right = _a.right;
                    _this.createLanguageEditor({ top: top_1, right: right });
                }
            };
            this.handleKeydown = function (ev) {
                if (ev.key === 'Enter' && _this.input) {
                    ev.preventDefault();
                    _this.changeLanguage();
                }
            };
            this.node = node;
            this.view = view;
            this.getPos = getPos;
            this.eventEmitter = eventEmitter;
            this.createElement();
            this.bindDOMEvent();
            this.bindEvent();
        }
        CodeBlockView.prototype.createElement = function () {
            var language = this.node.attrs.language;
            var wrapper = document.createElement('div');
            wrapper.setAttribute('data-language', language || 'text');
            wrapper.className = WRAPPER_CLASS_NAME;
            var pre = this.createCodeBlockElement();
            var code = pre.firstChild;
            wrapper.appendChild(pre);
            this.dom = wrapper;
            this.contentDOM = code;
        };
        CodeBlockView.prototype.createCodeBlockElement = function () {
            var pre = document.createElement('pre');
            var code = document.createElement('code');
            var language = this.node.attrs.language;
            var attrs = getCustomAttrs(this.node.attrs);
            if (language) {
                code.setAttribute('data-language', language);
            }
            setAttributes(attrs, pre);
            pre.appendChild(code);
            return pre;
        };
        CodeBlockView.prototype.createLanguageEditor = function (_a) {
            var _this = this;
            var top = _a.top, right = _a.right;
            var wrapper = document.createElement('span');
            wrapper.className = CODE_BLOCK_LANG_CLASS_NAME;
            var input = document.createElement('input');
            input.type = 'text';
            input.value = this.node.attrs.language;
            wrapper.appendChild(input);
            document.querySelector('.toastui-editor.ww-mode').appendChild(wrapper);
            var wrpperWidth = wrapper.clientWidth;
            css_1(wrapper, {
                top: top + 10 + "px",
                left: right - wrpperWidth - 10 + "px",
                width: wrpperWidth + "px",
            });
            this.input = input;
            this.input.addEventListener('blur', function () { return _this.changeLanguage(); });
            this.input.addEventListener('keydown', this.handleKeydown);
            setTimeout(function () { return _this.input.focus(); });
        };
        CodeBlockView.prototype.bindDOMEvent = function () {
            if (this.dom) {
                this.dom.addEventListener('click', this.handleMousedown);
            }
        };
        CodeBlockView.prototype.bindEvent = function () {
            var _this = this;
            this.eventEmitter.listen('scroll', function () {
                if (_this.input) {
                    _this.reset();
                }
            });
        };
        CodeBlockView.prototype.changeLanguage = function () {
            if (this.input && isFunction_1(this.getPos)) {
                var value = this.input.value;
                this.reset();
                var pos = this.getPos();
                var tr = this.view.state.tr;
                tr.setNodeMarkup(pos, null, { language: value });
                this.view.dispatch(tr);
            }
        };
        CodeBlockView.prototype.reset = function () {
            var _a;
            if ((_a = this.input) === null || _a === void 0 ? void 0 : _a.parentElement) {
                var parent_1 = this.input.parentElement;
                this.input = null;
                removeNode$1(parent_1);
            }
        };
        CodeBlockView.prototype.stopEvent = function () {
            return true;
        };
        CodeBlockView.prototype.update = function (node) {
            if (!node.sameMarkup(this.node)) {
                return false;
            }
            this.node = node;
            return true;
        };
        CodeBlockView.prototype.destroy = function () {
            this.reset();
            if (this.dom) {
                this.dom.removeEventListener('click', this.handleMousedown);
            }
        };
        return CodeBlockView;
    }());

    var reMSOListClassName = /MsoListParagraph/;
    var reMSOStylePrefix = /style=(.|\n)*mso-/;
    var reMSOListStyle = /mso-list:(.*)/;
    var reMSOTagName = /O:P/;
    var reMSOListBullet = /^(n|u|l)/;
    var MSO_CLASS_NAME_LIST_PARA = 'p.MsoListParagraph';
    function isFromMso(html) {
        return reMSOStylePrefix.test(html);
    }
    function getListItemContents(para) {
        var removedNodes = [];
        var walker = document.createTreeWalker(para, 1, null, false);
        while (walker.nextNode()) {
            var node = walker.currentNode;
            if (isElemNode(node)) {
                var _a = node, outerHTML = _a.outerHTML, textContent = _a.textContent;
                var msoSpan = reMSOStylePrefix.test(outerHTML);
                var bulletSpan = reMSOListStyle.test(outerHTML);
                if (msoSpan && !bulletSpan && textContent) {
                    removedNodes.push([node, true]);
                }
                else if (reMSOTagName.test(node.nodeName) || (msoSpan && !textContent) || bulletSpan) {
                    removedNodes.push([node, false]);
                }
            }
        }
        removedNodes.forEach(function (_a) {
            var node = _a[0], isUnwrap = _a[1];
            if (isUnwrap) {
                unwrapNode(node);
            }
            else {
                removeNode$1(node);
            }
        });
        return para.innerHTML.trim();
    }
    function createListItemDataFromParagraph(para, index) {
        var styleAttr = para.getAttribute('style');
        if (styleAttr) {
            var _a = styleAttr.match(reMSOListStyle), listItemInfo = _a[1];
            var _b = listItemInfo.trim().split(' '), levelStr = _b[1];
            var level = parseInt(levelStr.replace('level', ''), 10);
            var unordered = reMSOListBullet.test(para.textContent || '');
            return {
                id: index,
                level: level,
                prev: null,
                parent: null,
                children: [],
                unordered: unordered,
                contents: getListItemContents(para),
            };
        }
        return null;
    }
    function addListItemDetailData(data, prevData) {
        if (prevData.level < data.level) {
            prevData.children.push(data);
            data.parent = prevData;
        }
        else {
            while (prevData) {
                if (prevData.level === data.level) {
                    break;
                }
                prevData = prevData.parent;
            }
            if (prevData) {
                data.prev = prevData;
                data.parent = prevData.parent;
                if (data.parent) {
                    data.parent.children.push(data);
                }
            }
        }
    }
    function createListData(paras) {
        var listData = [];
        paras.forEach(function (para, index) {
            var prevListItemData = listData[index - 1];
            var listItemData = createListItemDataFromParagraph(para, index);
            if (listItemData) {
                if (prevListItemData) {
                    addListItemDetailData(listItemData, prevListItemData);
                }
                listData.push(listItemData);
            }
        });
        return listData;
    }
    function makeList(listData) {
        var listTagName = listData[0].unordered ? 'ul' : 'ol';
        var list = document.createElement(listTagName);
        listData.forEach(function (data) {
            var children = data.children, contents = data.contents;
            var listItem = document.createElement('li');
            listItem.innerHTML = contents;
            list.appendChild(listItem);
            if (children.length) {
                list.appendChild(makeList(children));
            }
        });
        return list;
    }
    function makeListFromParagraphs(paras) {
        var listData = createListData(paras);
        var rootChildren = listData.filter(function (_a) {
            var parent = _a.parent;
            return !parent;
        });
        return makeList(rootChildren);
    }
    function isMsoListParagraphEnd(node) {
        while (node) {
            if (isElemNode(node)) {
                break;
            }
            node = node.nextSibling;
        }
        return node ? !reMSOListClassName.test(node.className) : true;
    }
    function convertMsoParagraphsToList(html) {
        var container = document.createElement('div');
        container.innerHTML = html;
        var paras = [];
        var foundParas = findNodes(container, MSO_CLASS_NAME_LIST_PARA);
        foundParas.forEach(function (para) {
            var msoListParaEnd = isMsoListParagraphEnd(para.nextSibling);
            paras.push(para);
            if (msoListParaEnd) {
                var list = makeListFromParagraphs(paras);
                var nextSibling = para.nextSibling;
                if (nextSibling) {
                    insertBeforeNode(list, nextSibling);
                }
                else {
                    appendNodes(container, list);
                }
                paras = [];
            }
            removeNode$1(para);
        });
        // without `<p></p>`, the list string was parsed as a paragraph node and added
        var extraHTML = foundParas.length ? '<p></p>' : '';
        return "" + extraHTML + container.innerHTML;
    }

    var START_FRAGMENT_COMMENT = '<!--StartFragment-->';
    var END_FRAGMENT_COMMENT = '<!--EndFragment-->';
    function getContentBetweenFragmentComments(html) {
        var startFragmentIndex = html.indexOf(START_FRAGMENT_COMMENT);
        var endFragmentIndex = html.lastIndexOf(END_FRAGMENT_COMMENT);
        if (startFragmentIndex > -1 && endFragmentIndex > -1) {
            html = html.slice(startFragmentIndex + START_FRAGMENT_COMMENT.length, endFragmentIndex);
        }
        return html;
    }
    function convertMsoTableToCompletedTable(html) {
        // wrap with <tr> if html contains dangling <td> tags
        // dangling <td> tag is that tag does not have <tr> as parent node
        if (/<\/td>((?!<\/tr>)[\s\S])*$/i.test(html)) {
            html = "<tr>" + html + "</tr>";
        }
        // wrap with <table> if html contains dangling <tr> tags
        // dangling <tr> tag is that tag does not have <table> as parent node
        if (/<\/tr>((?!<\/table>)[\s\S])*$/i.test(html)) {
            html = "<table>" + html + "</table>";
        }
        return html;
    }
    function changePastedHTML(html) {
        html = getContentBetweenFragmentComments(html);
        html = convertMsoTableToCompletedTable(html);
        if (isFromMso(html)) {
            html = convertMsoParagraphsToList(html);
        }
        return html;
    }
    function getMaxColumnCount(rows) {
        var row = rows.reduce(function (prevRow, currentRow) {
            return prevRow.childCount > currentRow.childCount ? prevRow : currentRow;
        });
        return row.childCount;
    }
    function createCells(orgRow, maxColumnCount, cell) {
        var cells = [];
        var cellCount = orgRow.childCount;
        for (var colIdx = 0; colIdx < cellCount; colIdx += 1) {
            if (!orgRow.child(colIdx).attrs.extended) {
                var copiedCell = colIdx < cellCount
                    ? cell.create(orgRow.child(colIdx).attrs, orgRow.child(colIdx).content)
                    : cell.createAndFill();
                cells.push(copiedCell);
            }
        }
        return cells;
    }
    function copyTableHeadRow(orgRow, maxColumnCount, schema) {
        var _a = schema.nodes, tableRow = _a.tableRow, tableHeadCell = _a.tableHeadCell;
        var cells = createCells(orgRow, maxColumnCount, tableHeadCell);
        return tableRow.create(null, cells);
    }
    function copyTableBodyRow(orgRow, maxColumnCount, schema) {
        var _a = schema.nodes, tableRow = _a.tableRow, tableBodyCell = _a.tableBodyCell;
        var cells = createCells(orgRow, maxColumnCount, tableBodyCell);
        return tableRow.create(null, cells);
    }
    function creatTableBodyDummyRow(columnCount, schema) {
        var _a = schema.nodes, tableRow = _a.tableRow, tableBodyCell = _a.tableBodyCell;
        var cells = [];
        for (var columnIndex = 0; columnIndex < columnCount; columnIndex += 1) {
            var dummyCell = tableBodyCell.createAndFill();
            cells.push(dummyCell);
        }
        return tableRow.create({ dummyRowForPasting: true }, cells);
    }
    function createRowsFromPastingTable(tableContent) {
        var tableHeadRows = [];
        var tableBodyRows = [];
        if (tableContent.firstChild.type.name === 'tableHead') {
            var tableHead = tableContent.firstChild;
            tableHead.forEach(function (row) { return tableHeadRows.push(row); });
        }
        if (tableContent.lastChild.type.name === 'tableBody') {
            var tableBody = tableContent.lastChild;
            tableBody.forEach(function (row) { return tableBodyRows.push(row); });
        }
        return __spreadArray$1(__spreadArray$1([], tableHeadRows), tableBodyRows);
    }
    function createTableHead(tableHeadRow, maxColumnCount, schema) {
        var copiedRow = copyTableHeadRow(tableHeadRow, maxColumnCount, schema);
        return schema.nodes.tableHead.create(null, copiedRow);
    }
    function createTableBody(tableBodyRows, maxColumnCount, schema) {
        var copiedRows = tableBodyRows.map(function (tableBodyRow) {
            return copyTableBodyRow(tableBodyRow, maxColumnCount, schema);
        });
        if (!tableBodyRows.length) {
            var dummyTableRow = creatTableBodyDummyRow(maxColumnCount, schema);
            copiedRows.push(dummyTableRow);
        }
        return schema.nodes.tableBody.create(null, copiedRows);
    }
    function createTableFromPastingTable(rows, schema, startFromBody) {
        var columnCount = getMaxColumnCount(rows);
        if (startFromBody) {
            return schema.nodes.table.create(null, [createTableBody(rows, columnCount, schema)]);
        }
        var tableHeadRow = rows[0];
        var tableBodyRows = rows.slice(1);
        var nodes = [createTableHead(tableHeadRow, columnCount, schema)];
        if (tableBodyRows.length) {
            nodes.push(createTableBody(tableBodyRows, columnCount, schema));
        }
        return schema.nodes.table.create(null, nodes);
    }
    function changePastedSlice(slice, schema) {
        var nodes = [];
        slice.content.forEach(function (node) {
            if (node.type.name === 'table') {
                var tableContent = getTableContentFromSlice(new Slice(Fragment.from(node), 0, 0));
                if (tableContent) {
                    var rows = createRowsFromPastingTable(tableContent);
                    var startFromBody = tableContent.firstChild.type.name === 'tableBody';
                    var table = createTableFromPastingTable(rows, schema, startFromBody);
                    nodes.push(table);
                }
            }
            else {
                nodes.push(node);
            }
        });
        return new Slice(Fragment.from(nodes), 0, 0);
    }

    var DUMMY_CELL_SIZE = 4;
    var TR_NODES_SIZE = 2;
    function getDummyCellSize(dummyCellCount) {
        return dummyCellCount * DUMMY_CELL_SIZE;
    }
    function createPastingCells(tableContent, curSelectionInfo, schema) {
        var pastingRows = [];
        var pastingTableRows = createRowsFromPastingTable(tableContent);
        var columnCount = pastingTableRows[0].childCount;
        var rowCount = pastingTableRows.length;
        var startToTableHead = curSelectionInfo.startRowIdx === 0;
        var slicedRows = pastingTableRows.slice(0, rowCount);
        if (startToTableHead) {
            var tableHeadRow = slicedRows.shift();
            if (tableHeadRow) {
                var content = copyTableHeadRow(tableHeadRow, columnCount, schema).content;
                pastingRows.push(content);
            }
        }
        slicedRows.forEach(function (tableBodyRow) {
            if (!tableBodyRow.attrs.dummyRowForPasting) {
                var content = copyTableBodyRow(tableBodyRow, columnCount, schema).content;
                pastingRows.push(content);
            }
        });
        return pastingRows;
    }
    function getPastingRangeInfo(map, _a, pastingCells) {
        var startRowIdx = _a.startRowIdx, startColIdx = _a.startColIdx;
        var pastingRowCount = pastingCells.length;
        var pastingColumnCount = 0;
        var _loop_1 = function (i) {
            var columnCount = pastingCells[i].childCount;
            pastingCells[i].forEach(function (_a) {
                var attrs = _a.attrs;
                var colspan = attrs.colspan;
                if (colspan > 1) {
                    columnCount += colspan - 1;
                }
            });
            pastingColumnCount = Math.max(pastingColumnCount, columnCount);
        };
        for (var i = 0; i < pastingRowCount; i += 1) {
            _loop_1(i);
        }
        var endRowIdx = startRowIdx + pastingRowCount - 1;
        var endColIdx = startColIdx + pastingColumnCount - 1;
        var addedRowCount = Math.max(endRowIdx + 1 - map.totalRowCount, 0);
        var addedColumnCount = Math.max(endColIdx + 1 - map.totalColumnCount, 0);
        return {
            startRowIdx: startRowIdx,
            startColIdx: startColIdx,
            endRowIdx: endRowIdx,
            endColIdx: endColIdx,
            addedRowCount: addedRowCount,
            addedColumnCount: addedColumnCount,
        };
    }
    function addReplacedOffsets(_a, cellsOffsets) {
        var startRowIdx = _a.startRowIdx, startColIdx = _a.startColIdx, endRowIdx = _a.endRowIdx, endColIdx = _a.endColIdx, addedRowCount = _a.addedRowCount, addedColumnCount = _a.addedColumnCount;
        for (var rowIdx = startRowIdx; rowIdx <= endRowIdx - addedRowCount; rowIdx += 1) {
            cellsOffsets.push({
                rowIdx: rowIdx,
                startColIdx: startColIdx,
                endColIdx: endColIdx - addedColumnCount,
            });
        }
    }
    function expandColumns(tr, schema, map, _a, cellsOffsets) {
        var startRowIdx = _a.startRowIdx, startColIdx = _a.startColIdx, endRowIdx = _a.endRowIdx, endColIdx = _a.endColIdx, addedRowCount = _a.addedRowCount, addedColumnCount = _a.addedColumnCount;
        var totalRowCount = map.totalRowCount;
        var index = 0;
        for (var rowIdx = 0; rowIdx < totalRowCount; rowIdx += 1) {
            var _b = map.getCellInfo(rowIdx, endColIdx - addedColumnCount), offset = _b.offset, nodeSize = _b.nodeSize;
            var insertOffset = tr.mapping.map(offset + nodeSize);
            var cells = createDummyCells(addedColumnCount, rowIdx, schema);
            tr.insert(insertOffset, cells);
            if (rowIdx >= startRowIdx && rowIdx <= endRowIdx - addedRowCount) {
                var cellInfo = map.getCellInfo(rowIdx, endColIdx - addedColumnCount);
                var startCellOffset = tr.mapping.map(cellInfo.offset);
                var endCellOffset = insertOffset + getDummyCellSize(addedColumnCount);
                cellsOffsets[index] = {
                    rowIdx: rowIdx,
                    startColIdx: startColIdx,
                    endColIdx: endColIdx,
                    dummyOffsets: [startCellOffset, endCellOffset],
                };
                index += 1;
            }
        }
    }
    function expandRows(tr, schema, map, _a, cellsOffsets) {
        var addedRowCount = _a.addedRowCount, addedColumnCount = _a.addedColumnCount, startColIdx = _a.startColIdx, endColIdx = _a.endColIdx;
        var mapStart = tr.mapping.maps.length;
        var tableEndPos = map.tableEndOffset - 2;
        var rows = createTableBodyRows(addedRowCount, map.totalColumnCount + addedColumnCount, schema);
        var startOffset = tableEndPos;
        tr.insert(tr.mapping.slice(mapStart).map(startOffset), rows);
        for (var rowIndex = 0; rowIndex < addedRowCount; rowIndex += 1) {
            var startCellOffset = startOffset + getDummyCellSize(startColIdx) + 1;
            var endCellOffset = startOffset + getDummyCellSize(endColIdx + 1) + 1;
            var nextCellOffset = startOffset + getDummyCellSize(map.totalColumnCount + addedColumnCount) + TR_NODES_SIZE;
            cellsOffsets.push({
                rowIdx: rowIndex + map.totalRowCount,
                startColIdx: startColIdx,
                endColIdx: endColIdx,
                dummyOffsets: [startCellOffset, endCellOffset],
            });
            startOffset = nextCellOffset;
        }
    }
    function replaceCells(tr, pastingRows, cellsOffsets, map) {
        var mapStart = tr.mapping.maps.length;
        cellsOffsets.forEach(function (offsets, index) {
            var rowIdx = offsets.rowIdx, startColIdx = offsets.startColIdx, endColIdx = offsets.endColIdx, dummyOffsets = offsets.dummyOffsets;
            var mapping = tr.mapping.slice(mapStart);
            var cells = new Slice(pastingRows[index], 0, 0);
            var from = dummyOffsets ? dummyOffsets[0] : map.getCellStartOffset(rowIdx, startColIdx);
            var to = dummyOffsets ? dummyOffsets[1] : map.getCellEndOffset(rowIdx, endColIdx);
            tr.replace(mapping.map(from), mapping.map(to), cells);
        });
    }
    function pasteToTable(view, slice) {
        var _a = view.state, selection = _a.selection, schema = _a.schema, tr = _a.tr;
        var _b = getResolvedSelection(selection), anchor = _b.anchor, head = _b.head;
        if (anchor && head) {
            var tableContent = getTableContentFromSlice(slice);
            if (!tableContent) {
                return false;
            }
            var map = TableOffsetMap.create(anchor);
            var curSelectionInfo = map.getRectOffsets(anchor, head);
            var pastingCells = createPastingCells(tableContent, curSelectionInfo, schema);
            var pastingInfo = getPastingRangeInfo(map, curSelectionInfo, pastingCells);
            var cellsOffsets = [];
            // @TODO: unmerge the span and paste the cell
            if (canMerge(map, pastingInfo)) {
                addReplacedOffsets(pastingInfo, cellsOffsets);
                if (pastingInfo.addedColumnCount) {
                    expandColumns(tr, schema, map, pastingInfo, cellsOffsets);
                }
                if (pastingInfo.addedRowCount) {
                    expandRows(tr, schema, map, pastingInfo, cellsOffsets);
                }
                replaceCells(tr, pastingCells, cellsOffsets, map);
                view.dispatch(tr);
                setSelection(view, cellsOffsets, map.getCellInfo(0, 0).offset);
            }
            return true;
        }
        return false;
    }
    function setSelection(view, cellsOffsets, pos) {
        var _a = view.state, tr = _a.tr, doc = _a.doc;
        // get changed cell offsets
        var map = TableOffsetMap.create(doc.resolve(pos));
        // eslint-disable-next-line prefer-destructuring
        var _b = cellsOffsets[0], startRowIdx = _b.rowIdx, startColIdx = _b.startColIdx;
        var _c = last$1(cellsOffsets), endRowIdx = _c.rowIdx, endColIdx = _c.endColIdx;
        var startOffset = map.getCellInfo(startRowIdx, startColIdx).offset;
        var endOffset = map.getCellInfo(endRowIdx, endColIdx).offset;
        view.dispatch(tr.setSelection(new CellSelection(doc.resolve(startOffset), doc.resolve(endOffset))));
    }
    function canMerge(map, pastingInfo) {
        var ranges = map.getSpannedOffsets(pastingInfo);
        var _a = getRowAndColumnCount(ranges), rowCount = _a.rowCount, columnCount = _a.columnCount;
        var _b = getRowAndColumnCount(pastingInfo), pastingRowCount = _b.rowCount, pastingColumnCount = _b.columnCount;
        return rowCount === pastingRowCount && columnCount === pastingColumnCount;
    }

    var Doc = /** @class */ (function (_super) {
        __extends$1(Doc, _super);
        function Doc() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Doc.prototype, "name", {
            get: function () {
                return 'doc';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Doc.prototype, "schema", {
            get: function () {
                return {
                    content: 'block+',
                };
            },
            enumerable: false,
            configurable: true
        });
        return Doc;
    }(Node$2));

    var Paragraph = /** @class */ (function (_super) {
        __extends$1(Paragraph, _super);
        function Paragraph() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Paragraph.prototype, "name", {
            get: function () {
                return 'paragraph';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Paragraph.prototype, "schema", {
            get: function () {
                return {
                    content: 'inline*',
                    group: 'block listGroup',
                    attrs: __assign$1({}, getDefaultCustomAttrs()),
                    parseDOM: [{ tag: 'p' }],
                    toDOM: function (_a) {
                        var attrs = _a.attrs;
                        return ['p', getCustomAttrs(attrs), 0];
                    },
                };
            },
            enumerable: false,
            configurable: true
        });
        return Paragraph;
    }(Node$2));

    var reSoftTabLen = /\s{1,4}$/;
    var Text = /** @class */ (function (_super) {
        __extends$1(Text, _super);
        function Text() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Text.prototype, "name", {
            get: function () {
                return 'text';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Text.prototype, "schema", {
            get: function () {
                return {
                    group: 'inline',
                };
            },
            enumerable: false,
            configurable: true
        });
        Text.prototype.addSpaces = function () {
            return function (_a, dispatch) {
                var selection = _a.selection, tr = _a.tr;
                var $from = selection.$from, $to = selection.$to;
                var range = $from.blockRange($to);
                if (range && !isInListNode($from) && !isInTableNode($from)) {
                    dispatch(tr.insertText('    ', $from.pos, $to.pos));
                    return true;
                }
                return false;
            };
        };
        Text.prototype.removeSpaces = function () {
            return function (_a, dispatch) {
                var selection = _a.selection, tr = _a.tr;
                var $from = selection.$from, $to = selection.$to, from = selection.from;
                var range = $from.blockRange($to);
                if (range && !isInListNode($from) && !isInTableNode($from)) {
                    var nodeBefore = $from.nodeBefore;
                    if (nodeBefore && nodeBefore.isText) {
                        var text = nodeBefore.text;
                        var removedSpaceText = text.replace(reSoftTabLen, '');
                        var spaces = text.length - removedSpaceText.length;
                        dispatch(tr.delete(from - spaces, from));
                        return true;
                    }
                }
                return false;
            };
        };
        Text.prototype.keymaps = function () {
            return {
                Tab: this.addSpaces(),
                'Shift-Tab': this.removeSpaces(),
            };
        };
        return Text;
    }(Node$2));

    var Heading = /** @class */ (function (_super) {
        __extends$1(Heading, _super);
        function Heading() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Heading.prototype, "name", {
            get: function () {
                return 'heading';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Heading.prototype, "levels", {
            get: function () {
                return [1, 2, 3, 4, 5, 6];
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Heading.prototype, "schema", {
            get: function () {
                var parseDOM = this.levels.map(function (level) {
                    return {
                        tag: "h" + level,
                        getAttrs: function (dom) {
                            var rawHTML = dom.getAttribute('data-raw-html');
                            return __assign$1({ level: level }, (rawHTML && { rawHTML: rawHTML }));
                        },
                    };
                });
                return {
                    attrs: __assign$1({ level: { default: 1 }, headingType: { default: 'atx' }, rawHTML: { default: null } }, getDefaultCustomAttrs()),
                    content: 'inline*',
                    group: 'block',
                    defining: true,
                    parseDOM: parseDOM,
                    toDOM: function (_a) {
                        var attrs = _a.attrs;
                        return ["h" + attrs.level, getCustomAttrs(attrs), 0];
                    },
                };
            },
            enumerable: false,
            configurable: true
        });
        Heading.prototype.commands = function () {
            return function (payload) { return function (state, dispatch) {
                return setBlockType(state.schema.nodes.heading, payload)(state, dispatch);
            }; };
        };
        return Heading;
    }(Node$2));

    var CodeBlock = /** @class */ (function (_super) {
        __extends$1(CodeBlock, _super);
        function CodeBlock() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(CodeBlock.prototype, "name", {
            get: function () {
                return 'codeBlock';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CodeBlock.prototype, "schema", {
            get: function () {
                return {
                    content: 'text*',
                    group: 'block',
                    attrs: __assign$1({ language: { default: null }, rawHTML: { default: null } }, getDefaultCustomAttrs()),
                    code: true,
                    defining: true,
                    marks: '',
                    parseDOM: [
                        {
                            tag: 'pre',
                            preserveWhitespace: 'full',
                            getAttrs: function (dom) {
                                var rawHTML = dom.getAttribute('data-raw-html');
                                var child = dom.firstElementChild;
                                return __assign$1({ language: (child === null || child === void 0 ? void 0 : child.getAttribute('data-language')) || null }, (rawHTML && { rawHTML: rawHTML }));
                            },
                        },
                    ],
                    toDOM: function (_a) {
                        var attrs = _a.attrs;
                        return [
                            attrs.rawHTML || 'pre',
                            ['code', __assign$1({ 'data-language': attrs.language }, getCustomAttrs(attrs)), 0],
                        ];
                    },
                };
            },
            enumerable: false,
            configurable: true
        });
        CodeBlock.prototype.commands = function () {
            return function () { return function (state, dispatch) { return setBlockType(state.schema.nodes.codeBlock)(state, dispatch); }; };
        };
        CodeBlock.prototype.moveCursor = function (direction) {
            var _this = this;
            return function (state, dispatch) {
                var tr = state.tr, doc = state.doc, schema = state.schema;
                var $from = state.selection.$from;
                var view = _this.context.view;
                if (view.endOfTextblock(direction) && $from.node().type.name === 'codeBlock') {
                    var lines = $from.parent.textContent.split('\n');
                    var offset = direction === 'up' ? $from.start() : $from.end();
                    var range = direction === 'up'
                        ? [offset, lines[0].length + offset]
                        : [offset - last$1(lines).length, offset];
                    var pos = doc.resolve(direction === 'up' ? $from.before() : $from.after());
                    var node = direction === 'up' ? pos.nodeBefore : pos.nodeAfter;
                    if (between$1($from.pos, range[0], range[1]) && !node) {
                        var newTr = addParagraph(tr, pos, schema);
                        if (newTr) {
                            dispatch(newTr);
                            return true;
                        }
                    }
                }
                return false;
            };
        };
        CodeBlock.prototype.keymaps = function () {
            var codeCommand = this.commands()();
            return {
                'Shift-Mod-p': codeCommand,
                'Shift-Mod-P': codeCommand,
                ArrowUp: this.moveCursor('up'),
                ArrowDown: this.moveCursor('down'),
            };
        };
        return CodeBlock;
    }(Node$2));

    var BulletList = /** @class */ (function (_super) {
        __extends$1(BulletList, _super);
        function BulletList() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(BulletList.prototype, "name", {
            get: function () {
                return 'bulletList';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BulletList.prototype, "schema", {
            get: function () {
                return {
                    content: 'listItem+',
                    group: 'block listGroup',
                    attrs: __assign$1({ rawHTML: { default: null } }, getDefaultCustomAttrs()),
                    parseDOM: [createDOMInfoParsedRawHTML('ul')],
                    toDOM: function (_a) {
                        var attrs = _a.attrs;
                        return ['ul', getCustomAttrs(attrs), 0];
                    },
                };
            },
            enumerable: false,
            configurable: true
        });
        BulletList.prototype.changeList = function () {
            return function (state, dispatch) { return changeList(state.schema.nodes.bulletList)(state, dispatch); };
        };
        BulletList.prototype.commands = function () {
            return {
                bulletList: this.changeList,
                taskList: toggleTask,
            };
        };
        BulletList.prototype.keymaps = function () {
            var bulletListCommand = this.changeList();
            var _a = getWwCommands(), indent = _a.indent, outdent = _a.outdent;
            return {
                'Mod-u': bulletListCommand,
                'Mod-U': bulletListCommand,
                Tab: indent(),
                'Shift-Tab': outdent(),
            };
        };
        return BulletList;
    }(Node$2));

    var OrderedList = /** @class */ (function (_super) {
        __extends$1(OrderedList, _super);
        function OrderedList() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(OrderedList.prototype, "name", {
            get: function () {
                return 'orderedList';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(OrderedList.prototype, "schema", {
            get: function () {
                return {
                    content: 'listItem+',
                    group: 'block listGroup',
                    attrs: __assign$1({ order: { default: 1 }, rawHTML: { default: null } }, getDefaultCustomAttrs()),
                    parseDOM: [
                        {
                            tag: 'ol',
                            getAttrs: function (dom) {
                                var start = dom.getAttribute('start');
                                var rawHTML = dom.getAttribute('data-raw-html');
                                return __assign$1({ order: dom.hasAttribute('start') ? Number(start) : 1 }, (rawHTML && { rawHTML: rawHTML }));
                            },
                        },
                    ],
                    toDOM: function (_a) {
                        var attrs = _a.attrs;
                        return [
                            attrs.rawHTML || 'ol',
                            __assign$1({ start: attrs.order === 1 ? null : attrs.order }, getCustomAttrs(attrs)),
                            0,
                        ];
                    },
                };
            },
            enumerable: false,
            configurable: true
        });
        OrderedList.prototype.commands = function () {
            return function () { return function (state, dispatch) { return changeList(state.schema.nodes.orderedList)(state, dispatch); }; };
        };
        OrderedList.prototype.keymaps = function () {
            var orderedListCommand = this.commands()();
            var _a = getWwCommands(), indent = _a.indent, outdent = _a.outdent;
            return {
                'Mod-o': orderedListCommand,
                'Mod-O': orderedListCommand,
                Tab: indent(),
                'Shift-Tab': outdent(),
            };
        };
        return OrderedList;
    }(Node$2));

    var ListItem = /** @class */ (function (_super) {
        __extends$1(ListItem, _super);
        function ListItem() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(ListItem.prototype, "name", {
            get: function () {
                return 'listItem';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ListItem.prototype, "schema", {
            get: function () {
                return {
                    content: 'paragraph listGroup*',
                    attrs: {
                        task: { default: false },
                        checked: { default: false },
                        rawHTML: { default: null },
                    },
                    defining: true,
                    parseDOM: [
                        {
                            tag: 'li',
                            getAttrs: function (dom) {
                                var rawHTML = dom.getAttribute('data-raw-html');
                                return __assign$1({ task: dom.hasAttribute('data-task'), checked: dom.hasAttribute('data-task-checked') }, (rawHTML && { rawHTML: rawHTML }));
                            },
                        },
                    ],
                    toDOM: function (_a) {
                        var attrs = _a.attrs;
                        var task = attrs.task, checked = attrs.checked;
                        if (!task) {
                            return [attrs.rawHTML || 'li', 0];
                        }
                        var classNames = ['task-list-item'];
                        if (checked) {
                            classNames.push('checked');
                        }
                        return [
                            attrs.rawHTML || 'li',
                            __assign$1({ class: classNames.join(' '), 'data-task': task }, (checked && { 'data-task-checked': checked })),
                            0,
                        ];
                    },
                };
            },
            enumerable: false,
            configurable: true
        });
        ListItem.prototype.liftToPrevListItem = function () {
            return function (state, dispatch) {
                var selection = state.selection, tr = state.tr, schema = state.schema;
                var $from = selection.$from, empty = selection.empty;
                var listItem = schema.nodes.listItem;
                var parent = $from.parent;
                var listItemParent = $from.node(-1);
                if (empty && !parent.childCount && listItemParent.type === listItem) {
                    // move to previous sibling list item when the current list item is not top list item
                    if ($from.index(-2) >= 1) {
                        // should subtract '1' for considering tag length(<li>)
                        tr.delete($from.start(-1) - 1, $from.end(-1));
                        dispatch(tr);
                        return true;
                    }
                    var grandParentListItem = $from.node(-3);
                    // move to parent list item when the current list item is top list item
                    if (grandParentListItem.type === listItem) {
                        // should subtract '1' for considering tag length(<ul>)
                        tr.delete($from.start(-2) - 1, $from.end(-1));
                        dispatch(tr);
                        return true;
                    }
                }
                return false;
            };
        };
        ListItem.prototype.keymaps = function () {
            var split = function (state, dispatch) {
                return splitListItem(state.schema.nodes.listItem)(state, dispatch);
            };
            return {
                Backspace: this.liftToPrevListItem(),
                Enter: split,
            };
        };
        return ListItem;
    }(Node$2));

    var BlockQuote = /** @class */ (function (_super) {
        __extends$1(BlockQuote, _super);
        function BlockQuote() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(BlockQuote.prototype, "name", {
            get: function () {
                return 'blockQuote';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BlockQuote.prototype, "schema", {
            get: function () {
                return {
                    attrs: __assign$1({ rawHTML: { default: null } }, getDefaultCustomAttrs()),
                    content: 'block+',
                    group: 'block',
                    parseDOM: [createDOMInfoParsedRawHTML('blockquote')],
                    toDOM: function (_a) {
                        var attrs = _a.attrs;
                        return ['blockquote', getCustomAttrs(attrs), 0];
                    },
                };
            },
            enumerable: false,
            configurable: true
        });
        BlockQuote.prototype.commands = function () {
            return function () { return function (state, dispatch) { return wrapIn(state.schema.nodes.blockQuote)(state, dispatch); }; };
        };
        BlockQuote.prototype.keymaps = function () {
            var blockQutoeCommand = this.commands()();
            return {
                'Alt-q': blockQutoeCommand,
                'Alt-Q': blockQutoeCommand,
            };
        };
        return BlockQuote;
    }(Node$2));

    var cellOffsetFnMap = {
        left: getLeftCellOffset,
        right: getRightCellOffset,
        up: getUpCellOffset,
        down: getDownCellOffset,
    };
    function isInFirstListItem(pos, doc, _a) {
        var paraDepth = _a[0], listDepth = _a[1];
        var listItemNode = doc.resolve(pos.before(paraDepth - 1));
        return listDepth === paraDepth && !listItemNode.nodeBefore;
    }
    function isInLastListItem(pos) {
        var _a;
        var depth = pos.depth;
        var parentNode;
        while (depth) {
            parentNode = pos.node(depth);
            if (parentNode.type.name === 'tableBodyCell') {
                break;
            }
            if (parentNode.type.name === 'listItem') {
                var grandParent = pos.node(depth - 1);
                var lastListItem = grandParent.lastChild === parentNode;
                var hasChildren = ((_a = parentNode.lastChild) === null || _a === void 0 ? void 0 : _a.type.name) !== 'paragraph';
                if (!lastListItem) {
                    return false;
                }
                return !hasChildren;
            }
            depth -= 1;
        }
        return false;
    }
    function canMoveToBeforeCell(direction, _a, from, doc, inList) {
        var paraDepth = _a[0], listDepth = _a[1], curDepth = _a[2];
        if (direction === "left" /* LEFT */ || direction === "up" /* UP */) {
            if (inList && !isInFirstListItem(from, doc, [paraDepth, listDepth])) {
                return false;
            }
            var endOffset = from.before(curDepth);
            var nodeBefore = doc.resolve(endOffset).nodeBefore;
            if (nodeBefore) {
                return false;
            }
        }
        return true;
    }
    function canMoveToAfterCell(direction, curDepth, from, doc, inList) {
        if (direction === "right" /* RIGHT */ || direction === "down" /* DOWN */) {
            if (inList && !isInLastListItem(from)) {
                return false;
            }
            var endOffset = from.after(curDepth);
            var nodeAfter = doc.resolve(endOffset).nodeAfter;
            if (nodeAfter) {
                return false;
            }
        }
        return true;
    }
    function canMoveBetweenCells(direction, _a, from, doc) {
        var cellDepth = _a[0], paraDepth = _a[1];
        var listDepth = cellDepth + 3; // 3 is position of <ul><li><p>
        var inList = paraDepth >= listDepth;
        var curDepth = inList ? cellDepth + 1 : paraDepth;
        var moveBeforeCell = canMoveToBeforeCell(direction, [paraDepth, listDepth, curDepth], from, doc, inList);
        var moveAfterCell = canMoveToAfterCell(direction, curDepth, from, doc, inList);
        return moveBeforeCell && moveAfterCell;
    }
    function canBeOutOfTable(direction, map, _a) {
        var rowIdx = _a[0], colIdx = _a[1];
        var rowspanInfo = map.getRowspanStartInfo(rowIdx, colIdx);
        var inFirstRow = direction === "up" /* UP */ && rowIdx === 0;
        var inLastRow = direction === "down" /* DOWN */ &&
            ((rowspanInfo === null || rowspanInfo === void 0 ? void 0 : rowspanInfo.count) > 1 ? rowIdx + rowspanInfo.count - 1 : rowIdx) === map.totalRowCount - 1;
        return inFirstRow || inLastRow;
    }
    function addParagraphBeforeTable(tr, map, schema) {
        var tableStartPos = tr.doc.resolve(map.tableStartOffset - 1);
        if (!tableStartPos.nodeBefore) {
            return addParagraph(tr, tableStartPos, schema);
        }
        return tr.setSelection(Selection.near(tableStartPos, -1));
    }
    function addParagraphAfterTable(tr, map, schema) {
        var tableEndPos = tr.doc.resolve(map.tableEndOffset);
        if (!tableEndPos.nodeAfter) {
            return addParagraph(tr, tableEndPos, schema);
        }
        return tr.setSelection(Selection.near(tableEndPos, 1));
    }
    function getRightCellOffset(_a, map) {
        var rowIdx = _a[0], colIdx = _a[1];
        var totalRowCount = map.totalRowCount, totalColumnCount = map.totalColumnCount;
        var lastCellInRow = colIdx === totalColumnCount - 1;
        var lastCellInTable = rowIdx === totalRowCount - 1 && lastCellInRow;
        if (!lastCellInTable) {
            var nextColIdx = colIdx + 1;
            var colspanInfo = map.getColspanStartInfo(rowIdx, colIdx);
            if ((colspanInfo === null || colspanInfo === void 0 ? void 0 : colspanInfo.count) > 1) {
                nextColIdx += colspanInfo.count - 1;
            }
            if (lastCellInRow || nextColIdx === totalColumnCount) {
                rowIdx += 1;
                nextColIdx = 0;
            }
            var offset = map.getCellInfo(rowIdx, nextColIdx).offset;
            return offset + 2;
        }
        return null;
    }
    function getLeftCellOffset(_a, map) {
        var rowIdx = _a[0], colIdx = _a[1];
        var totalColumnCount = map.totalColumnCount;
        var firstCellInRow = colIdx === 0;
        var firstCellInTable = rowIdx === 0 && firstCellInRow;
        if (!firstCellInTable) {
            colIdx -= 1;
            if (firstCellInRow) {
                rowIdx -= 1;
                colIdx = totalColumnCount - 1;
            }
            var _b = map.getCellInfo(rowIdx, colIdx), offset = _b.offset, nodeSize = _b.nodeSize;
            return offset + nodeSize - 2;
        }
        return null;
    }
    function getUpCellOffset(_a, map) {
        var rowIdx = _a[0], colIdx = _a[1];
        if (rowIdx > 0) {
            var _b = map.getCellInfo(rowIdx - 1, colIdx), offset = _b.offset, nodeSize = _b.nodeSize;
            return offset + nodeSize - 2;
        }
        return null;
    }
    function getDownCellOffset(_a, map) {
        var rowIdx = _a[0], colIdx = _a[1];
        var totalRowCount = map.totalRowCount;
        if (rowIdx < totalRowCount - 1) {
            var nextRowIdx = rowIdx + 1;
            var rowspanInfo = map.getRowspanStartInfo(rowIdx, colIdx);
            if ((rowspanInfo === null || rowspanInfo === void 0 ? void 0 : rowspanInfo.count) > 1) {
                nextRowIdx += rowspanInfo.count - 1;
            }
            var offset = map.getCellInfo(nextRowIdx, colIdx).offset;
            return offset + 2;
        }
        return null;
    }
    function moveToCell(direction, tr, cellIndex, map) {
        var cellOffsetFn = cellOffsetFnMap[direction];
        var offset = cellOffsetFn(cellIndex, map);
        if (offset) {
            var dir = direction === "right" /* RIGHT */ || direction === "down" /* DOWN */ ? 1 : -1;
            return tr.setSelection(Selection.near(tr.doc.resolve(offset), dir));
        }
        return null;
    }
    function canSelectTableNode(direction, map, _a) {
        var rowIdx = _a[0], colIdx = _a[1];
        if (direction === "up" /* UP */ || direction === "down" /* DOWN */) {
            return false;
        }
        var tableStartOffset = map.tableStartOffset, tableEndOffset = map.tableEndOffset;
        var _b = map.getCellInfo(rowIdx, colIdx), offset = _b.offset, nodeSize = _b.nodeSize;
        var pos = direction === "left" /* LEFT */ ? tableStartOffset : tableEndOffset;
        var curPos = direction === "left" /* LEFT */ ? offset - 2 : offset + nodeSize + 3;
        return pos === curPos;
    }
    function selectNode(tr, pos, depth) {
        var tablePos = tr.doc.resolve(pos.before(depth - 3));
        return tr.setSelection(new NodeSelection(tablePos));
    }

    function getTargetRowInfo(direction, map, selectionInfo) {
        var targetRowIdx;
        var insertColIdx;
        var nodeSize;
        if (direction === "up" /* UP */) {
            targetRowIdx = selectionInfo.startRowIdx;
            insertColIdx = 0;
            nodeSize = -1;
        }
        else {
            targetRowIdx = selectionInfo.endRowIdx;
            insertColIdx = map.totalColumnCount - 1;
            nodeSize = map.getCellInfo(targetRowIdx, insertColIdx).nodeSize + 1;
        }
        return { targetRowIdx: targetRowIdx, insertColIdx: insertColIdx, nodeSize: nodeSize };
    }
    function getRowRanges(map, rowIdx, totalColumnCount) {
        var startOffset = map.getCellInfo(rowIdx, 0).offset;
        var _a = map.getCellInfo(rowIdx, totalColumnCount - 1), offset = _a.offset, nodeSize = _a.nodeSize;
        return { from: startOffset, to: offset + nodeSize };
    }
    var Table = /** @class */ (function (_super) {
        __extends$1(Table, _super);
        function Table() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Table.prototype, "name", {
            get: function () {
                return 'table';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "schema", {
            get: function () {
                return {
                    content: 'tableHead{1} tableBody{1}',
                    group: 'block',
                    attrs: __assign$1({ rawHTML: { default: null } }, getDefaultCustomAttrs()),
                    parseDOM: [createDOMInfoParsedRawHTML('table')],
                    toDOM: function (_a) {
                        var attrs = _a.attrs;
                        return ['table', getCustomAttrs(attrs), 0];
                    },
                };
            },
            enumerable: false,
            configurable: true
        });
        Table.prototype.addTable = function () {
            return function (payload) {
                if (payload === void 0) { payload = { rowCount: 2, columnCount: 1, data: [] }; }
                return function (state, dispatch) {
                    var rowCount = payload.rowCount, columnCount = payload.columnCount, data = payload.data;
                    var schema = state.schema, selection = state.selection, tr = state.tr;
                    var from = selection.from, to = selection.to, $from = selection.$from;
                    var collapsed = from === to;
                    if (collapsed && !isInTableNode($from)) {
                        var _a = schema.nodes, tableHead = _a.tableHead, tableBody = _a.tableBody;
                        var theadData = data === null || data === void 0 ? void 0 : data.slice(0, columnCount);
                        var tbodyData = data === null || data === void 0 ? void 0 : data.slice(columnCount, data.length);
                        var tableHeadRow = createTableHeadRow(columnCount, schema, theadData);
                        var tableBodyRows = createTableBodyRows(rowCount - 1, columnCount, schema, tbodyData);
                        var table = schema.nodes.table.create(null, [
                            tableHead.create(null, tableHeadRow),
                            tableBody.create(null, tableBodyRows),
                        ]);
                        dispatch(tr.replaceSelectionWith(table));
                        return true;
                    }
                    return false;
                };
            };
        };
        Table.prototype.removeTable = function () {
            return function () { return function (state, dispatch) {
                var selection = state.selection, tr = state.tr;
                var map = TableOffsetMap.create(selection.$anchor);
                if (map) {
                    var tableStartOffset = map.tableStartOffset, tableEndOffset = map.tableEndOffset;
                    var startOffset = tableStartOffset - 1;
                    var cursorPos = createTextSelection(tr.delete(startOffset, tableEndOffset), startOffset);
                    dispatch(tr.setSelection(cursorPos));
                    return true;
                }
                return false;
            }; };
        };
        Table.prototype.addColumn = function (direction) {
            return function () { return function (state, dispatch) {
                var selection = state.selection, tr = state.tr, schema = state.schema;
                var _a = getResolvedSelection(selection), anchor = _a.anchor, head = _a.head;
                if (anchor && head) {
                    var map = TableOffsetMap.create(anchor);
                    var selectionInfo = map.getRectOffsets(anchor, head);
                    var targetColIdx = direction === "left" /* LEFT */ ? selectionInfo.startColIdx : selectionInfo.endColIdx + 1;
                    var columnCount = getRowAndColumnCount(selectionInfo).columnCount;
                    var totalRowCount = map.totalRowCount;
                    for (var rowIdx = 0; rowIdx < totalRowCount; rowIdx += 1) {
                        var cells = createDummyCells(columnCount, rowIdx, schema);
                        tr.insert(tr.mapping.map(map.posAt(rowIdx, targetColIdx)), cells);
                    }
                    dispatch(tr);
                    return true;
                }
                return false;
            }; };
        };
        Table.prototype.removeColumn = function () {
            return function () { return function (state, dispatch) {
                var selection = state.selection, tr = state.tr;
                var _a = getResolvedSelection(selection), anchor = _a.anchor, head = _a.head;
                if (anchor && head) {
                    var map = TableOffsetMap.create(anchor);
                    var selectionInfo = map.getRectOffsets(anchor, head);
                    var totalColumnCount = map.totalColumnCount, totalRowCount = map.totalRowCount;
                    var columnCount = getRowAndColumnCount(selectionInfo).columnCount;
                    var selectedAllColumn = columnCount === totalColumnCount;
                    if (selectedAllColumn) {
                        return false;
                    }
                    var startColIdx = selectionInfo.startColIdx, endColIdx = selectionInfo.endColIdx;
                    var mapStart = tr.mapping.maps.length;
                    for (var rowIdx = 0; rowIdx < totalRowCount; rowIdx += 1) {
                        for (var colIdx = endColIdx; colIdx >= startColIdx; colIdx -= 1) {
                            var _b = map.getCellInfo(rowIdx, colIdx), offset = _b.offset, nodeSize = _b.nodeSize;
                            var from = tr.mapping.slice(mapStart).map(offset);
                            var to = from + nodeSize;
                            tr.delete(from, to);
                        }
                    }
                    dispatch(tr);
                    return true;
                }
                return false;
            }; };
        };
        Table.prototype.addRow = function (direction) {
            return function () { return function (state, dispatch) {
                var selection = state.selection, schema = state.schema, tr = state.tr;
                var _a = getResolvedSelection(selection), anchor = _a.anchor, head = _a.head;
                if (anchor && head) {
                    var map = TableOffsetMap.create(anchor);
                    var totalColumnCount = map.totalColumnCount;
                    var selectionInfo = map.getRectOffsets(anchor, head);
                    var rowCount = getRowAndColumnCount(selectionInfo).rowCount;
                    var _b = getTargetRowInfo(direction, map, selectionInfo), targetRowIdx = _b.targetRowIdx, insertColIdx = _b.insertColIdx, nodeSize = _b.nodeSize;
                    var selectedThead = targetRowIdx === 0;
                    if (!selectedThead) {
                        var rows = [];
                        var from = tr.mapping.map(map.posAt(targetRowIdx, insertColIdx)) + nodeSize;
                        var cells = [];
                        for (var colIdx = 0; colIdx < totalColumnCount; colIdx += 1) {
                            cells = cells.concat(createDummyCells(1, targetRowIdx, schema));
                        }
                        for (var i = 0; i < rowCount; i += 1) {
                            rows.push(schema.nodes.tableRow.create(null, cells));
                        }
                        dispatch(tr.insert(from, rows));
                        return true;
                    }
                }
                return false;
            }; };
        };
        Table.prototype.removeRow = function () {
            return function () { return function (state, dispatch) {
                var selection = state.selection, tr = state.tr;
                var _a = getResolvedSelection(selection), anchor = _a.anchor, head = _a.head;
                if (anchor && head) {
                    var map = TableOffsetMap.create(anchor);
                    var totalRowCount = map.totalRowCount, totalColumnCount = map.totalColumnCount;
                    var selectionInfo = map.getRectOffsets(anchor, head);
                    var rowCount = getRowAndColumnCount(selectionInfo).rowCount;
                    var startRowIdx = selectionInfo.startRowIdx, endRowIdx = selectionInfo.endRowIdx;
                    var selectedThead = startRowIdx === 0;
                    var selectedAllTbodyRow = rowCount === totalRowCount - 1;
                    if (selectedAllTbodyRow || selectedThead) {
                        return false;
                    }
                    for (var rowIdx = endRowIdx; rowIdx >= startRowIdx; rowIdx -= 1) {
                        var _b = getRowRanges(map, rowIdx, totalColumnCount), from = _b.from, to = _b.to;
                        // delete table row
                        tr.delete(from - 1, to + 1);
                    }
                    dispatch(tr);
                    return true;
                }
                return false;
            }; };
        };
        Table.prototype.alignColumn = function () {
            return function (payload) {
                if (payload === void 0) { payload = { align: 'center' }; }
                return function (state, dispatch) {
                    var align = payload.align;
                    var selection = state.selection, tr = state.tr;
                    var _a = getResolvedSelection(selection), anchor = _a.anchor, head = _a.head;
                    if (anchor && head) {
                        var map = TableOffsetMap.create(anchor);
                        var totalRowCount = map.totalRowCount;
                        var selectionInfo = map.getRectOffsets(anchor, head);
                        var startColIdx = selectionInfo.startColIdx, endColIdx = selectionInfo.endColIdx;
                        for (var rowIdx = 0; rowIdx < totalRowCount; rowIdx += 1) {
                            for (var colIdx = startColIdx; colIdx <= endColIdx; colIdx += 1) {
                                if (!map.extendedRowspan(rowIdx, colIdx) && !map.extendedColspan(rowIdx, colIdx)) {
                                    var _b = map.getNodeAndPos(rowIdx, colIdx), node = _b.node, pos = _b.pos;
                                    var attrs = setAttrs(node, { align: align });
                                    tr.setNodeMarkup(pos, null, attrs);
                                }
                            }
                        }
                        dispatch(tr);
                        return true;
                    }
                    return false;
                };
            };
        };
        Table.prototype.moveToCell = function (direction) {
            return function (state, dispatch) {
                var selection = state.selection, tr = state.tr, schema = state.schema;
                var _a = getResolvedSelection(selection), anchor = _a.anchor, head = _a.head;
                if (anchor && head) {
                    var map = TableOffsetMap.create(anchor);
                    var cellIndex = map.getCellIndex(anchor);
                    var newTr = void 0;
                    if (canBeOutOfTable(direction, map, cellIndex)) {
                        // When there is no content before or after the table,
                        // an empty line('paragraph') is created by pressing the arrow keys.
                        newTr = addParagraphAfterTable(tr, map, schema);
                    }
                    else {
                        newTr = moveToCell(direction, tr, cellIndex, map);
                    }
                    if (newTr) {
                        dispatch(newTr);
                        return true;
                    }
                }
                return false;
            };
        };
        Table.prototype.moveInCell = function (direction) {
            var _this = this;
            return function (state, dispatch) {
                var selection = state.selection, tr = state.tr, doc = state.doc, schema = state.schema;
                var $from = selection.$from;
                var view = _this.context.view;
                if (!view.endOfTextblock(direction)) {
                    return false;
                }
                var cell = findNodeBy($from, function (_a) {
                    var type = _a.type;
                    return type.name === 'tableHeadCell' || type.name === 'tableBodyCell';
                });
                if (cell) {
                    var para = findNodeBy($from, function (_a) {
                        var type = _a.type;
                        return type.name === 'paragraph';
                    });
                    var cellDepth = cell.depth;
                    if (para && canMoveBetweenCells(direction, [cellDepth, para.depth], $from, doc)) {
                        var anchor = getResolvedSelection(selection).anchor;
                        var map = TableOffsetMap.create(anchor);
                        var cellIndex = map.getCellIndex(anchor);
                        var newTr = void 0;
                        if (canSelectTableNode(direction, map, cellIndex)) {
                            // When the cursor position is at the end of the cell,
                            // the table is selected when the left / right arrow keys are pressed.
                            newTr = selectNode(tr, $from, cellDepth);
                        }
                        else if (canBeOutOfTable(direction, map, cellIndex)) {
                            // When there is no content before or after the table,
                            // an empty line('paragraph') is created by pressing the arrow keys.
                            if (direction === "up" /* UP */) {
                                newTr = addParagraphBeforeTable(tr, map, schema);
                            }
                            else if (direction === "down" /* DOWN */) {
                                newTr = addParagraphAfterTable(tr, map, schema);
                            }
                        }
                        else {
                            newTr = moveToCell(direction, tr, cellIndex, map);
                        }
                        if (newTr) {
                            dispatch(newTr);
                            return true;
                        }
                    }
                }
                return false;
            };
        };
        Table.prototype.deleteCells = function () {
            return function (state, dispatch) {
                var schema = state.schema, selection = state.selection, tr = state.tr;
                var _a = getResolvedSelection(selection), anchor = _a.anchor, head = _a.head;
                var textSelection = selection instanceof TextSelection;
                if (anchor && head && !textSelection) {
                    var map = TableOffsetMap.create(anchor);
                    var _b = map.getRectOffsets(anchor, head), startRowIdx = _b.startRowIdx, startColIdx = _b.startColIdx, endRowIdx = _b.endRowIdx, endColIdx = _b.endColIdx;
                    for (var rowIdx = startRowIdx; rowIdx <= endRowIdx; rowIdx += 1) {
                        for (var colIdx = startColIdx; colIdx <= endColIdx; colIdx += 1) {
                            if (!map.extendedRowspan(rowIdx, colIdx) && !map.extendedColspan(rowIdx, colIdx)) {
                                var _c = map.getNodeAndPos(rowIdx, colIdx), node = _c.node, pos = _c.pos;
                                var cells = createDummyCells(1, rowIdx, schema, node.attrs);
                                tr.replaceWith(tr.mapping.map(pos), tr.mapping.map(pos + node.nodeSize), cells);
                            }
                        }
                    }
                    dispatch(tr);
                    return true;
                }
                return false;
            };
        };
        Table.prototype.commands = function () {
            return {
                addTable: this.addTable(),
                removeTable: this.removeTable(),
                addColumnToLeft: this.addColumn("left" /* LEFT */),
                addColumnToRight: this.addColumn("right" /* RIGHT */),
                removeColumn: this.removeColumn(),
                addRowToUp: this.addRow("up" /* UP */),
                addRowToDown: this.addRow("down" /* DOWN */),
                removeRow: this.removeRow(),
                alignColumn: this.alignColumn(),
            };
        };
        Table.prototype.keymaps = function () {
            var deleteCellContent = this.deleteCells();
            return {
                Tab: this.moveToCell("right" /* RIGHT */),
                'Shift-Tab': this.moveToCell("left" /* LEFT */),
                ArrowUp: this.moveInCell("up" /* UP */),
                ArrowDown: this.moveInCell("down" /* DOWN */),
                ArrowLeft: this.moveInCell("left" /* LEFT */),
                ArrowRight: this.moveInCell("right" /* RIGHT */),
                Backspace: deleteCellContent,
                'Mod-Backspace': deleteCellContent,
                Delete: deleteCellContent,
                'Mod-Delete': deleteCellContent,
            };
        };
        return Table;
    }(Node$2));

    var TableHead = /** @class */ (function (_super) {
        __extends$1(TableHead, _super);
        function TableHead() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(TableHead.prototype, "name", {
            get: function () {
                return 'tableHead';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TableHead.prototype, "schema", {
            get: function () {
                return {
                    content: 'tableRow{1}',
                    attrs: __assign$1({ rawHTML: { default: null } }, getDefaultCustomAttrs()),
                    parseDOM: [createDOMInfoParsedRawHTML('thead')],
                    toDOM: function (_a) {
                        var attrs = _a.attrs;
                        return ['thead', getCustomAttrs(attrs), 0];
                    },
                };
            },
            enumerable: false,
            configurable: true
        });
        return TableHead;
    }(Node$2));

    var TableBody = /** @class */ (function (_super) {
        __extends$1(TableBody, _super);
        function TableBody() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(TableBody.prototype, "name", {
            get: function () {
                return 'tableBody';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TableBody.prototype, "schema", {
            get: function () {
                return {
                    content: 'tableRow+',
                    attrs: __assign$1({ rawHTML: { default: null } }, getDefaultCustomAttrs()),
                    parseDOM: [
                        {
                            tag: 'tbody',
                            getAttrs: function (dom) {
                                var rows = dom.querySelectorAll('tr');
                                var columns = rows[0].children.length;
                                var rawHTML = dom.getAttribute('data-raw-html');
                                if (!columns) {
                                    return false;
                                }
                                return __assign$1({}, (rawHTML && { rawHTML: rawHTML }));
                            },
                        },
                    ],
                    toDOM: function (_a) {
                        var attrs = _a.attrs;
                        return ['tbody', getCustomAttrs(attrs), 0];
                    },
                };
            },
            enumerable: false,
            configurable: true
        });
        return TableBody;
    }(Node$2));

    var TableRow = /** @class */ (function (_super) {
        __extends$1(TableRow, _super);
        function TableRow() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(TableRow.prototype, "name", {
            get: function () {
                return 'tableRow';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TableRow.prototype, "schema", {
            get: function () {
                return {
                    content: '(tableHeadCell | tableBodyCell)*',
                    attrs: __assign$1({ rawHTML: { default: null } }, getDefaultCustomAttrs()),
                    parseDOM: [
                        {
                            tag: 'tr',
                            getAttrs: function (dom) {
                                var columns = dom.children.length;
                                var rawHTML = dom.getAttribute('data-raw-html');
                                if (!columns) {
                                    return false;
                                }
                                return __assign$1({}, (rawHTML && { rawHTML: rawHTML }));
                            },
                        },
                    ],
                    toDOM: function (_a) {
                        var attrs = _a.attrs;
                        return ['tr', getCustomAttrs(attrs), 0];
                    },
                };
            },
            enumerable: false,
            configurable: true
        });
        return TableRow;
    }(Node$2));

    var TableHeadCell = /** @class */ (function (_super) {
        __extends$1(TableHeadCell, _super);
        function TableHeadCell() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(TableHeadCell.prototype, "name", {
            get: function () {
                return 'tableHeadCell';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TableHeadCell.prototype, "schema", {
            get: function () {
                return {
                    content: 'paragraph+',
                    attrs: __assign$1({ align: { default: null }, className: { default: null }, rawHTML: { default: null }, colspan: { default: null }, extended: { default: null } }, getDefaultCustomAttrs()),
                    isolating: true,
                    parseDOM: [createParsedCellDOM('th')],
                    toDOM: function (_a) {
                        var attrs = _a.attrs;
                        var cellAttrs = createCellAttrs(attrs);
                        return ['th', __assign$1(__assign$1({}, cellAttrs), getCustomAttrs(attrs)), 0];
                    },
                };
            },
            enumerable: false,
            configurable: true
        });
        return TableHeadCell;
    }(Node$2));

    var TableBodyCell = /** @class */ (function (_super) {
        __extends$1(TableBodyCell, _super);
        function TableBodyCell() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(TableBodyCell.prototype, "name", {
            get: function () {
                return 'tableBodyCell';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TableBodyCell.prototype, "schema", {
            get: function () {
                return {
                    content: '(paragraph | bulletList | orderedList)+',
                    attrs: {
                        align: { default: null },
                        className: { default: null },
                        rawHTML: { default: null },
                        colspan: { default: null },
                        rowspan: { default: null },
                        extended: { default: null },
                    },
                    isolating: true,
                    parseDOM: [createParsedCellDOM('td')],
                    toDOM: function (_a) {
                        var attrs = _a.attrs;
                        var cellAttrs = createCellAttrs(attrs);
                        return ['td', cellAttrs, 0];
                    },
                };
            },
            enumerable: false,
            configurable: true
        });
        return TableBodyCell;
    }(Node$2));

    var Image = /** @class */ (function (_super) {
        __extends$1(Image, _super);
        function Image() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Image.prototype, "name", {
            get: function () {
                return 'image';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Image.prototype, "schema", {
            get: function () {
                return {
                    inline: true,
                    attrs: __assign$1({ imageUrl: { default: '' }, altText: { default: null }, rawHTML: { default: null } }, getDefaultCustomAttrs()),
                    group: 'inline',
                    selectable: false,
                    parseDOM: [
                        {
                            tag: 'img[src]',
                            getAttrs: function (dom) {
                                var imageUrl = dom.getAttribute('src') || '';
                                var rawHTML = dom.getAttribute('data-raw-html');
                                return __assign$1({ imageUrl: sanitizeXSSAttributeValue(imageUrl), altText: dom.getAttribute('alt') }, (rawHTML && { rawHTML: rawHTML }));
                            },
                        },
                    ],
                    toDOM: function (_a) {
                        var attrs = _a.attrs;
                        return [
                            attrs.rawHTML || 'img',
                            __assign$1(__assign$1({ src: attrs.imageUrl }, (attrs.altText && { alt: attrs.altText })), getCustomAttrs(attrs)),
                        ];
                    },
                };
            },
            enumerable: false,
            configurable: true
        });
        Image.prototype.addImage = function () {
            return function (payload) { return function (_a, dispatch) {
                var schema = _a.schema, tr = _a.tr;
                var _b = payload, imageUrl = _b.imageUrl, altText = _b.altText;
                if (!imageUrl) {
                    return false;
                }
                var node = schema.nodes.image.createAndFill(__assign$1({ imageUrl: encodeMarkdownText(imageUrl) }, (altText && { altText: altText })));
                dispatch(tr.replaceSelectionWith(node).scrollIntoView());
                return true;
            }; };
        };
        Image.prototype.commands = function () {
            return {
                addImage: this.addImage(),
            };
        };
        return Image;
    }(Node$2));

    var ROOT_BLOCK_DEPTH = 1;
    var ThematicBreak = /** @class */ (function (_super) {
        __extends$1(ThematicBreak, _super);
        function ThematicBreak() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(ThematicBreak.prototype, "name", {
            get: function () {
                return 'thematicBreak';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ThematicBreak.prototype, "schema", {
            get: function () {
                return {
                    attrs: __assign$1({ rawHTML: { default: null } }, getDefaultCustomAttrs()),
                    group: 'block',
                    parseDOM: [{ tag: 'hr' }],
                    selectable: false,
                    toDOM: function (_a) {
                        var attrs = _a.attrs;
                        return ['div', getCustomAttrs(attrs), [attrs.rawHTML || 'hr']];
                    },
                };
            },
            enumerable: false,
            configurable: true
        });
        ThematicBreak.prototype.hr = function () {
            var _this = this;
            return function () { return function (state, dispatch) {
                var _a;
                var _b = state.selection, $from = _b.$from, $to = _b.$to;
                if ($from === $to) {
                    var doc = state.doc;
                    var _c = state.schema.nodes, thematicBreak = _c.thematicBreak, paragraph = _c.paragraph;
                    var nodes = [thematicBreak.create()];
                    var rootBlock = $from.node(ROOT_BLOCK_DEPTH);
                    var lastBlock = doc.child(doc.childCount - 1) === rootBlock;
                    var blockEnd = doc.resolve($from.after(ROOT_BLOCK_DEPTH));
                    var nextHr = ((_a = $from.nodeAfter) === null || _a === void 0 ? void 0 : _a.type.name) === _this.name;
                    if (lastBlock || nextHr) {
                        nodes.push(paragraph.create());
                    }
                    dispatch(state.tr.insert(blockEnd.pos, nodes).scrollIntoView());
                    return true;
                }
                return false;
            }; };
        };
        ThematicBreak.prototype.commands = function () {
            return { hr: this.hr() };
        };
        ThematicBreak.prototype.keymaps = function () {
            var hrCommand = this.hr()();
            return {
                'Mod-l': hrCommand,
                'Mod-L': hrCommand,
            };
        };
        return ThematicBreak;
    }(Node$2));

    var Strong = /** @class */ (function (_super) {
        __extends$1(Strong, _super);
        function Strong() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Strong.prototype, "name", {
            get: function () {
                return 'strong';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Strong.prototype, "schema", {
            get: function () {
                var parseDOM = ['b', 'strong'].map(function (tag) {
                    return {
                        tag: tag,
                        getAttrs: function (dom) {
                            var rawHTML = dom.getAttribute('data-raw-html');
                            return __assign$1({}, (rawHTML && { rawHTML: rawHTML }));
                        },
                    };
                });
                return {
                    attrs: __assign$1({ rawHTML: { default: null } }, getDefaultCustomAttrs()),
                    parseDOM: parseDOM,
                    toDOM: function (_a) {
                        var attrs = _a.attrs;
                        return [attrs.rawHTML || 'strong', getCustomAttrs(attrs)];
                    },
                };
            },
            enumerable: false,
            configurable: true
        });
        Strong.prototype.bold = function () {
            return function () { return function (state, dispatch) { return toggleMark$1(state.schema.marks.strong)(state, dispatch); }; };
        };
        Strong.prototype.commands = function () {
            return { bold: this.bold() };
        };
        Strong.prototype.keymaps = function () {
            var boldCommand = this.bold()();
            return {
                'Mod-b': boldCommand,
                'Mod-B': boldCommand,
            };
        };
        return Strong;
    }(Mark));

    var Emph = /** @class */ (function (_super) {
        __extends$1(Emph, _super);
        function Emph() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Emph.prototype, "name", {
            get: function () {
                return 'emph';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Emph.prototype, "schema", {
            get: function () {
                var parseDOM = ['i', 'em'].map(function (tag) {
                    return {
                        tag: tag,
                        getAttrs: function (dom) {
                            var rawHTML = dom.getAttribute('data-raw-html');
                            return __assign$1({}, (rawHTML && { rawHTML: rawHTML }));
                        },
                    };
                });
                return {
                    attrs: __assign$1({ rawHTML: { default: null } }, getDefaultCustomAttrs()),
                    parseDOM: parseDOM,
                    toDOM: function (_a) {
                        var attrs = _a.attrs;
                        return [attrs.rawHTML || 'em', getCustomAttrs(attrs)];
                    },
                };
            },
            enumerable: false,
            configurable: true
        });
        Emph.prototype.italic = function () {
            return function () { return function (state, dispatch) { return toggleMark$1(state.schema.marks.emph)(state, dispatch); }; };
        };
        Emph.prototype.commands = function () {
            return { italic: this.italic() };
        };
        Emph.prototype.keymaps = function () {
            var italicCommand = this.italic()();
            return {
                'Mod-i': italicCommand,
                'Mod-I': italicCommand,
            };
        };
        return Emph;
    }(Mark));

    var Strike = /** @class */ (function (_super) {
        __extends$1(Strike, _super);
        function Strike() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Strike.prototype, "name", {
            get: function () {
                return 'strike';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Strike.prototype, "schema", {
            get: function () {
                var parseDOM = ['s', 'del'].map(function (tag) {
                    return {
                        tag: tag,
                        getAttrs: function (dom) {
                            var rawHTML = dom.getAttribute('data-raw-html');
                            return __assign$1({}, (rawHTML && { rawHTML: rawHTML }));
                        },
                    };
                });
                return {
                    attrs: __assign$1({ rawHTML: { default: null } }, getDefaultCustomAttrs()),
                    parseDOM: parseDOM,
                    toDOM: function (_a) {
                        var attrs = _a.attrs;
                        return [attrs.rawHTML || 'del', getCustomAttrs(attrs)];
                    },
                };
            },
            enumerable: false,
            configurable: true
        });
        Strike.prototype.commands = function () {
            return function () { return function (state, dispatch) { return toggleMark$1(state.schema.marks.strike)(state, dispatch); }; };
        };
        Strike.prototype.keymaps = function () {
            var strikeCommand = this.commands()();
            return {
                'Mod-s': strikeCommand,
                'Mod-S': strikeCommand,
            };
        };
        return Strike;
    }(Mark));

    var Link = /** @class */ (function (_super) {
        __extends$1(Link, _super);
        function Link(linkAttributes) {
            var _this = _super.call(this) || this;
            _this.linkAttributes = linkAttributes;
            return _this;
        }
        Object.defineProperty(Link.prototype, "name", {
            get: function () {
                return 'link';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Link.prototype, "schema", {
            get: function () {
                var _this = this;
                return {
                    attrs: __assign$1({ linkUrl: { default: '' }, linkText: { default: null }, rawHTML: { default: null } }, getDefaultCustomAttrs()),
                    inclusive: false,
                    parseDOM: [
                        {
                            tag: 'a[href]',
                            getAttrs: function (dom) {
                                var href = dom.getAttribute('href') || '';
                                var rawHTML = dom.getAttribute('data-raw-html');
                                return __assign$1({ linkUrl: sanitizeXSSAttributeValue(href), linkText: dom.textContent }, (rawHTML && { rawHTML: rawHTML }));
                            },
                        },
                    ],
                    toDOM: function (_a) {
                        var attrs = _a.attrs;
                        return [
                            attrs.rawHTML || 'a',
                            __assign$1(__assign$1({ href: attrs.linkUrl }, _this.linkAttributes), getCustomAttrs(attrs)),
                        ];
                    },
                };
            },
            enumerable: false,
            configurable: true
        });
        Link.prototype.addLink = function () {
            return function (payload) { return function (state, dispatch) {
                var _a = payload, linkUrl = _a.linkUrl, _b = _a.linkText, linkText = _b === void 0 ? '' : _b;
                var schema = state.schema, tr = state.tr, selection = state.selection;
                var empty = selection.empty, from = selection.from, to = selection.to;
                if (from && to && linkUrl) {
                    var attrs = {
                        linkUrl: encodeMarkdownText(linkUrl),
                        linkText: escapeMarkdownText(linkText),
                    };
                    var mark = schema.mark('link', attrs);
                    if (empty && linkText) {
                        var node = createTextNode$1(schema, linkText, mark);
                        tr.replaceRangeWith(from, to, node);
                    }
                    else {
                        tr.addMark(from, to, mark);
                    }
                    dispatch(tr.scrollIntoView());
                    return true;
                }
                return false;
            }; };
        };
        Link.prototype.toggleLink = function () {
            return function (payload) { return function (state, dispatch) {
                return toggleMark$1(state.schema.marks.link, payload)(state, dispatch);
            }; };
        };
        Link.prototype.commands = function () {
            return {
                addLink: this.addLink(),
                toggleLink: this.toggleLink(),
            };
        };
        return Link;
    }(Mark));

    var Code = /** @class */ (function (_super) {
        __extends$1(Code, _super);
        function Code() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Code.prototype, "name", {
            get: function () {
                return 'code';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Code.prototype, "schema", {
            get: function () {
                return {
                    attrs: __assign$1({ rawHTML: { default: null } }, getDefaultCustomAttrs()),
                    parseDOM: [
                        {
                            tag: 'code',
                            getAttrs: function (dom) {
                                var rawHTML = dom.getAttribute('data-raw-html');
                                return __assign$1({}, (rawHTML && { rawHTML: rawHTML }));
                            },
                        },
                    ],
                    toDOM: function (_a) {
                        var attrs = _a.attrs;
                        return [attrs.rawHTML || 'code', getCustomAttrs(attrs)];
                    },
                };
            },
            enumerable: false,
            configurable: true
        });
        Code.prototype.commands = function () {
            return function () { return function (state, dispatch) { return toggleMark$1(state.schema.marks.code)(state, dispatch); }; };
        };
        Code.prototype.keymaps = function () {
            var codeCommand = this.commands()();
            return {
                'Shift-Mod-c': codeCommand,
                'Shift-Mod-C': codeCommand,
            };
        };
        return Code;
    }(Mark));

    var CustomBlock = /** @class */ (function (_super) {
        __extends$1(CustomBlock, _super);
        function CustomBlock() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(CustomBlock.prototype, "name", {
            get: function () {
                return 'customBlock';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CustomBlock.prototype, "schema", {
            get: function () {
                return {
                    content: 'text*',
                    group: 'block',
                    attrs: {
                        info: { default: null },
                    },
                    atom: true,
                    code: true,
                    defining: true,
                    parseDOM: [
                        {
                            tag: 'div[data-custom-info]',
                            getAttrs: function (dom) {
                                var info = dom.getAttribute('data-custom-info');
                                return { info: info };
                            },
                        },
                    ],
                    toDOM: function (_a) {
                        var attrs = _a.attrs;
                        return ['div', { 'data-custom-info': attrs.info || null }, 0];
                    },
                };
            },
            enumerable: false,
            configurable: true
        });
        return CustomBlock;
    }(Node$2));

    var FrontMatter = /** @class */ (function (_super) {
        __extends$1(FrontMatter, _super);
        function FrontMatter() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(FrontMatter.prototype, "name", {
            get: function () {
                return 'frontMatter';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FrontMatter.prototype, "schema", {
            get: function () {
                return {
                    content: 'text*',
                    group: 'block',
                    code: true,
                    parseDOM: [
                        {
                            tag: 'div[data-front-matter]',
                        },
                    ],
                    toDOM: function () {
                        return ['div', { 'data-front-matter': 'true' }, 0];
                    },
                };
            },
            enumerable: false,
            configurable: true
        });
        FrontMatter.prototype.commands = function () {
            return function () { return function (state, dispatch, view) {
                var $from = state.selection.$from;
                if (view.endOfTextblock('down') && $from.node().type.name === 'frontMatter') {
                    return exitCode(state, dispatch);
                }
                return false;
            }; };
        };
        FrontMatter.prototype.keymaps = function () {
            return {
                Enter: this.commands()(),
            };
        };
        return FrontMatter;
    }(Node$2));

    function createSpecs(linkAttributes) {
        return new SpecManager([
            new Doc(),
            new Paragraph(),
            new Text(),
            new Heading(),
            new CodeBlock(),
            new BulletList(),
            new OrderedList(),
            new ListItem(),
            new BlockQuote(),
            new Table(),
            new TableHead(),
            new TableBody(),
            new TableRow(),
            new TableHeadCell(),
            new TableBodyCell(),
            new Image(),
            new ThematicBreak(),
            new Strong(),
            new Emph(),
            new Strike(),
            new Link(linkAttributes),
            new Code(),
            new CustomBlock(),
            new FrontMatter(),
            new Widget(),
        ]);
    }

    var CONTENTS_CLASS_NAME = cls('contents');
    var WysiwygEditor = /** @class */ (function (_super) {
        __extends$1(WysiwygEditor, _super);
        function WysiwygEditor(eventEmitter, options) {
            var _this = _super.call(this, eventEmitter) || this;
            var toDOMAdaptor = options.toDOMAdaptor, _a = options.htmlSchemaMap, htmlSchemaMap = _a === void 0 ? {} : _a, _b = options.linkAttributes, linkAttributes = _b === void 0 ? {} : _b, _c = options.useCommandShortcut, useCommandShortcut = _c === void 0 ? true : _c, _d = options.wwPlugins, wwPlugins = _d === void 0 ? [] : _d, _e = options.wwNodeViews, wwNodeViews = _e === void 0 ? {} : _e;
            _this.editorType = 'wysiwyg';
            _this.el.classList.add('ww-mode');
            _this.toDOMAdaptor = toDOMAdaptor;
            _this.linkAttributes = linkAttributes;
            _this.extraPlugins = wwPlugins;
            _this.pluginNodeViews = wwNodeViews;
            _this.specs = _this.createSpecs();
            _this.schema = _this.createSchema(htmlSchemaMap);
            _this.context = _this.createContext();
            _this.keymaps = _this.createKeymaps(useCommandShortcut);
            _this.view = _this.createView();
            _this.commands = _this.createCommands();
            _this.specs.setContext(__assign$1(__assign$1({}, _this.context), { view: _this.view }));
            _this.initEvent();
            return _this;
        }
        WysiwygEditor.prototype.createSpecs = function () {
            return createSpecs(this.linkAttributes);
        };
        WysiwygEditor.prototype.createContext = function () {
            return {
                schema: this.schema,
                eventEmitter: this.eventEmitter,
            };
        };
        WysiwygEditor.prototype.createSchema = function (htmlSchemaMap) {
            return new Schema({
                nodes: __assign$1(__assign$1({}, this.specs.nodes), htmlSchemaMap.nodes),
                marks: __assign$1(__assign$1({}, this.specs.marks), htmlSchemaMap.marks),
            });
        };
        WysiwygEditor.prototype.createPlugins = function () {
            return this.defaultPlugins.concat(__spreadArray$1([
                tableSelection(),
                tableContextMenu(this.eventEmitter),
                task(),
                toolbarState(this.eventEmitter)
            ], this.createPluginProps()));
        };
        WysiwygEditor.prototype.createPluginNodeViews = function () {
            var _a = this, eventEmitter = _a.eventEmitter, pluginNodeViews = _a.pluginNodeViews;
            var pluginNodeViewMap = {};
            if (pluginNodeViews) {
                Object.keys(pluginNodeViews).forEach(function (key) {
                    pluginNodeViewMap[key] = function (node, view, getPos) {
                        return pluginNodeViews[key](node, view, getPos, eventEmitter);
                    };
                });
            }
            return pluginNodeViewMap;
        };
        WysiwygEditor.prototype.createView = function () {
            var _this = this;
            var _a = this, toDOMAdaptor = _a.toDOMAdaptor, eventEmitter = _a.eventEmitter;
            return new EditorView(this.el, {
                state: this.createState(),
                attributes: {
                    class: CONTENTS_CLASS_NAME,
                },
                nodeViews: __assign$1({ customBlock: function (node, view, getPos) {
                        return new CustomBlockView(node, view, getPos, toDOMAdaptor);
                    },
                    image: function (node, view, getPos) {
                        return new ImageView(node, view, getPos, eventEmitter);
                    },
                    codeBlock: function (node, view, getPos) {
                        return new CodeBlockView(node, view, getPos, eventEmitter);
                    }, widget: widgetNodeView }, this.createPluginNodeViews()),
                dispatchTransaction: function (tr) {
                    var state = _this.view.state.applyTransaction(tr).state;
                    _this.view.updateState(state);
                    _this.emitChangeEvent(tr.scrollIntoView());
                    _this.eventEmitter.emit('setFocusedNode', state.selection.$from.node(1));
                },
                transformPastedHTML: changePastedHTML,
                transformPasted: function (slice) { return changePastedSlice(slice, _this.schema); },
                handlePaste: function (view, _, slice) { return pasteToTable(view, slice); },
                handleKeyDown: function (_, ev) {
                    _this.eventEmitter.emit('keydown', _this.editorType, ev);
                    return false;
                },
                handleDOMEvents: {
                    paste: function (_, ev) {
                        var clipboardData = ev.clipboardData || window.clipboardData;
                        var items = clipboardData && clipboardData.items;
                        if (items) {
                            var imageBlob = pasteImageOnly(items);
                            if (imageBlob) {
                                ev.preventDefault();
                                emitImageBlobHook(_this.eventEmitter, imageBlob, ev.type);
                            }
                        }
                        return false;
                    },
                    keyup: function (_, ev) {
                        _this.eventEmitter.emit('keyup', _this.editorType, ev);
                        return false;
                    },
                    scroll: function () {
                        _this.eventEmitter.emit('scroll', 'editor');
                        return true;
                    },
                },
            });
        };
        WysiwygEditor.prototype.createCommands = function () {
            return this.specs.commands(this.view, getWwCommands());
        };
        WysiwygEditor.prototype.getHTML = function () {
            return this.view.dom.innerHTML;
        };
        WysiwygEditor.prototype.getModel = function () {
            return this.view.state.doc;
        };
        WysiwygEditor.prototype.getSelection = function () {
            var _a = this.view.state.selection, from = _a.from, to = _a.to;
            return [from, to];
        };
        WysiwygEditor.prototype.getSchema = function () {
            return this.view.state.schema;
        };
        WysiwygEditor.prototype.replaceSelection = function (text, start, end) {
            var _a = this.view.state, schema = _a.schema, tr = _a.tr;
            var lineTexts = text.split('\n');
            var paras = lineTexts.map(function (lineText) {
                return createParagraph(schema, createNodesWithWidget(lineText, schema));
            });
            var slice = new Slice(Fragment.from(paras), 1, 1);
            var newTr = isNumber_1(start) && isNumber_1(end)
                ? tr.replaceRange(start, end, slice)
                : tr.replaceSelection(slice);
            this.view.dispatch(newTr);
            this.focus();
        };
        WysiwygEditor.prototype.deleteSelection = function (start, end) {
            var tr = this.view.state.tr;
            var newTr = isNumber_1(start) && isNumber_1(end) ? tr.deleteRange(start, end) : tr.deleteSelection();
            this.view.dispatch(newTr.scrollIntoView());
        };
        WysiwygEditor.prototype.getSelectedText = function (start, end) {
            var _a = this.view.state, doc = _a.doc, selection = _a.selection;
            var from = selection.from, to = selection.to;
            if (isNumber_1(start) && isNumber_1(end)) {
                from = start;
                to = end;
            }
            return doc.textBetween(from, to, '\n');
        };
        WysiwygEditor.prototype.setModel = function (newDoc, cursorToEnd) {
            if (cursorToEnd === void 0) { cursorToEnd = false; }
            var _a = this.view.state, tr = _a.tr, doc = _a.doc;
            this.view.dispatch(tr.replaceWith(0, doc.content.size, newDoc));
            if (cursorToEnd) {
                this.moveCursorToEnd();
            }
        };
        WysiwygEditor.prototype.setSelection = function (start, end) {
            if (end === void 0) { end = start; }
            var tr = this.view.state.tr;
            var selection = createTextSelection(tr, start, end);
            this.view.dispatch(tr.setSelection(selection).scrollIntoView());
        };
        WysiwygEditor.prototype.addWidget = function (node, style, pos) {
            var _a = this.view, dispatch = _a.dispatch, state = _a.state;
            dispatch(state.tr.setMeta('widget', { pos: pos !== null && pos !== void 0 ? pos : state.selection.to, node: node, style: style }));
        };
        WysiwygEditor.prototype.replaceWithWidget = function (start, end, text) {
            var _a = this.view.state, tr = _a.tr, schema = _a.schema;
            var nodes = createNodesWithWidget(text, schema);
            this.view.dispatch(tr.replaceWith(start, end, nodes));
        };
        WysiwygEditor.prototype.getRangeInfoOfNode = function (pos) {
            var _a = this.view.state, doc = _a.doc, selection = _a.selection;
            var $pos = pos ? doc.resolve(pos) : selection.$from;
            var marks = $pos.marks();
            var node = $pos.node();
            var start = $pos.start();
            var end = $pos.end();
            var type = node.type.name;
            if (marks.length || type === 'paragraph') {
                var mark_1 = marks[marks.length - 1];
                var maybeHasMark_1 = function (nodeMarks) {
                    return nodeMarks.length ? includes(nodeMarks, mark_1) : true;
                };
                type = mark_1 ? mark_1.type.name : 'text';
                node.forEach(function (child, offset) {
                    var isText = child.isText, nodeSize = child.nodeSize, nodeMarks = child.marks;
                    var startOffset = $pos.pos - start;
                    if (isText &&
                        offset <= startOffset &&
                        offset + nodeSize >= startOffset &&
                        maybeHasMark_1(nodeMarks)) {
                        start = start + offset;
                        end = start + nodeSize;
                    }
                });
            }
            return { range: [start, end], type: type };
        };
        return WysiwygEditor;
    }(EditorBase));

    /**
     * @fileoverview Check whether the given variable is existing or not.
     * @author NHN FE Development Lab <dl_javascript@nhn.com>
     */

    var isUndefined = isUndefined_1;
    var isNull = isNull_1;

    /**
     * Check whether the given variable is existing or not.
     * If the given variable is not null and not undefined, returns true.
     * @param {*} param - Target for checking
     * @returns {boolean} Is existy?
     * @memberof module:type
     * @example
     * var isExisty = require('tui-code-snippet/type/isExisty'); // node, commonjs
     *
     * isExisty(''); //true
     * isExisty(0); //true
     * isExisty([]); //true
     * isExisty({}); //true
     * isExisty(null); //false
     * isExisty(undefined); //false
    */
    function isExisty$1(param) {
      return !isUndefined(param) && !isNull(param);
    }

    var isExisty_1 = isExisty$1;

    /**
     * @fileoverview Check whether the given variable is truthy or not.
     * @author NHN FE Development Lab <dl_javascript@nhn.com>
     */

    var isExisty = isExisty_1;

    /**
     * Check whether the given variable is truthy or not.
     * If the given variable is not null or not undefined or not false, returns true.
     * (It regards 0 as true)
     * @param {*} obj - Target for checking
     * @returns {boolean} Is truthy?
     * @memberof module:type
     */
    function isTruthy$1(obj) {
      return isExisty(obj) && obj !== false;
    }

    var isTruthy_1 = isTruthy$1;

    /**
     * @fileoverview Check whether the given variable is falsy or not.
     * @author NHN FE Development Lab <dl_javascript@nhn.com>
     */

    var isTruthy = isTruthy_1;

    /**
     * Check whether the given variable is falsy or not.
     * If the given variable is null or undefined or false, returns true.
     * @param {*} obj - Target for checking
     * @returns {boolean} Is falsy?
     * @memberof module:type
     */
    function isFalsy(obj) {
      return !isTruthy(obj);
    }

    var isFalsy_1 = isFalsy;

    var eventTypeList = [
        'afterPreviewRender',
        'updatePreview',
        'changeMode',
        'needChangeMode',
        'command',
        'changePreviewStyle',
        'changePreviewTabPreview',
        'changePreviewTabWrite',
        'scroll',
        'contextmenu',
        'show',
        'hide',
        'changeLanguage',
        'changeToolbarState',
        'toggleScrollSync',
        'mixinTableOffsetMapPrototype',
        'setFocusedNode',
        'removePopupWidget',
        // provide event for user
        'openPopup',
        'closePopup',
        'addImageBlobHook',
        'beforePreviewRender',
        'beforeConvertWysiwygToMarkdown',
        'load',
        'change',
        'caretChange',
        'destroy',
        'focus',
        'blur',
        'keydown',
        'keyup',
    ];
    /**
     * Class EventEmitter
     * @ignore
     */
    var EventEmitter = /** @class */ (function () {
        function EventEmitter() {
            var _this = this;
            this.events = new Map$1();
            this.eventTypes = eventTypeList.reduce(function (types, type) {
                return __assign$1(__assign$1({}, types), { type: type });
            }, {});
            this.hold = false;
            eventTypeList.forEach(function (eventType) {
                _this.addEventType(eventType);
            });
        }
        /**
         * Listen event and bind event handler
         * @param {string} type Event type string
         * @param {function} handler Event handler
         */
        EventEmitter.prototype.listen = function (type, handler) {
            var typeInfo = this.getTypeInfo(type);
            var eventHandlers = this.events.get(typeInfo.type) || [];
            if (!this.hasEventType(typeInfo.type)) {
                throw new Error("There is no event type " + typeInfo.type);
            }
            if (typeInfo.namespace) {
                handler.namespace = typeInfo.namespace;
            }
            eventHandlers.push(handler);
            this.events.set(typeInfo.type, eventHandlers);
        };
        /**
         * Emit event
         * @param {string} eventName Event name to emit
         * @returns {Array}
         */
        EventEmitter.prototype.emit = function (type) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            var typeInfo = this.getTypeInfo(type);
            var eventHandlers = this.events.get(typeInfo.type);
            var results = [];
            if (!this.hold && eventHandlers) {
                eventHandlers.forEach(function (handler) {
                    var result = handler.apply(void 0, args);
                    if (!isUndefined_1(result)) {
                        results.push(result);
                    }
                });
            }
            return results;
        };
        /**
         * Emit given event and return result
         * @param {string} eventName Event name to emit
         * @param {any} source Source to change
         * @returns {string}
         */
        EventEmitter.prototype.emitReduce = function (type, source) {
            var args = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args[_i - 2] = arguments[_i];
            }
            var eventHandlers = this.events.get(type);
            if (!this.hold && eventHandlers) {
                eventHandlers.forEach(function (handler) {
                    var result = handler.apply(void 0, __spreadArray$1([source], args));
                    if (!isFalsy_1(result)) {
                        source = result;
                    }
                });
            }
            return source;
        };
        /**
         * Get event type and namespace
         * @param {string} type Event type name
         * @returns {{type: string, namespace: string}}
         * @private
         */
        EventEmitter.prototype.getTypeInfo = function (type) {
            var splited = type.split('.');
            return {
                type: splited[0],
                namespace: splited[1],
            };
        };
        /**
         * Check whether event type exists or not
         * @param {string} type Event type name
         * @returns {boolean}
         * @private
         */
        EventEmitter.prototype.hasEventType = function (type) {
            return !isUndefined_1(this.eventTypes[this.getTypeInfo(type).type]);
        };
        /**
         * Add event type when given event not exists
         * @param {string} type Event type name
         */
        EventEmitter.prototype.addEventType = function (type) {
            if (this.hasEventType(type)) {
                throw new Error("There is already have event type " + type);
            }
            this.eventTypes[type] = type;
        };
        /**
         * Remove event handler from given event type
         * @param {string} eventType Event type name
         * @param {function} [handler] - registered event handler
         */
        EventEmitter.prototype.removeEventHandler = function (eventType, handler) {
            var _this = this;
            var _a = this.getTypeInfo(eventType), type = _a.type, namespace = _a.namespace;
            if (type && handler) {
                this.removeEventHandlerWithHandler(type, handler);
            }
            else if (type && !namespace) {
                this.events.delete(type);
            }
            else if (!type && namespace) {
                this.events.forEach(function (_, evtType) {
                    _this.removeEventHandlerWithTypeInfo(evtType, namespace);
                });
            }
            else if (type && namespace) {
                this.removeEventHandlerWithTypeInfo(type, namespace);
            }
        };
        /**
         * Remove event handler with event handler
         * @param {string} type - event type name
         * @param {function} handler - event handler
         * @private
         */
        EventEmitter.prototype.removeEventHandlerWithHandler = function (type, handler) {
            var eventHandlers = this.events.get(type);
            if (eventHandlers) {
                var handlerIndex = eventHandlers.indexOf(handler);
                if (eventHandlers.indexOf(handler) >= 0) {
                    eventHandlers.splice(handlerIndex, 1);
                }
            }
        };
        /**
         * Remove event handler with event type information
         * @param {string} type Event type name
         * @param {string} namespace Event namespace
         * @private
         */
        EventEmitter.prototype.removeEventHandlerWithTypeInfo = function (type, namespace) {
            var handlersToSurvive = [];
            var eventHandlers = this.events.get(type);
            if (!eventHandlers) {
                return;
            }
            eventHandlers.map(function (handler) {
                if (handler.namespace !== namespace) {
                    handlersToSurvive.push(handler);
                }
                return null;
            });
            this.events.set(type, handlersToSurvive);
        };
        EventEmitter.prototype.getEvents = function () {
            return this.events;
        };
        EventEmitter.prototype.holdEventInvoke = function (fn) {
            this.hold = true;
            fn();
            this.hold = false;
        };
        return EventEmitter;
    }());

    var CommandManager = /** @class */ (function () {
        function CommandManager(eventEmitter, mdCommands, wwCommands, getEditorType) {
            this.eventEmitter = eventEmitter;
            this.mdCommands = mdCommands;
            this.wwCommands = wwCommands;
            this.getEditorType = getEditorType;
            this.initEvent();
        }
        CommandManager.prototype.initEvent = function () {
            var _this = this;
            this.eventEmitter.listen('command', function (command, payload) {
                _this.exec(command, payload);
            });
        };
        CommandManager.prototype.addCommand = function (type, name, command) {
            if (type === 'markdown') {
                this.mdCommands[name] = command;
            }
            else {
                this.wwCommands[name] = command;
            }
        };
        CommandManager.prototype.deleteCommand = function (type, name) {
            if (type === 'markdown') {
                delete this.mdCommands[name];
            }
            else {
                delete this.wwCommands[name];
            }
        };
        CommandManager.prototype.exec = function (name, payload) {
            var type = this.getEditorType();
            if (type === 'markdown') {
                this.mdCommands[name](payload);
            }
            else {
                this.wwCommands[name](payload);
            }
        };
        return CommandManager;
    }());

    function getTextWithoutTrailingNewline(text) {
        return text[text.length - 1] === '\n' ? text.slice(0, text.length - 1) : text;
    }
    function isCustomHTMLInlineNode(_a, node) {
        var schema = _a.schema;
        var html = node.literal;
        var matched = html.match(reHTMLTag);
        if (matched) {
            var openTagName = matched[1], closeTagName = matched[3];
            var typeName = (openTagName || closeTagName).toLowerCase();
            return node.type === 'htmlInline' && !!(schema.marks[typeName] || schema.nodes[typeName]);
        }
        return false;
    }
    function isInlineNode(_a) {
        var type = _a.type;
        return includes(['text', 'strong', 'emph', 'strike', 'image', 'link', 'code'], type);
    }
    function isListNode(_a) {
        var type = _a.type, literal = _a.literal;
        var matched = type === 'htmlInline' && literal.match(reHTMLTag);
        if (matched) {
            var openTagName = matched[1], closeTagName = matched[3];
            var tagName = openTagName || closeTagName;
            if (tagName) {
                return includes(['ul', 'ol', 'li'], tagName.toLowerCase());
            }
        }
        return false;
    }
    function getListItemAttrs(_a) {
        var literal = _a.literal;
        var task = /data-task/.test(literal);
        var checked = /data-task-checked/.test(literal);
        return { task: task, checked: checked };
    }
    function getMatchedAttributeValue(rawHTML, attrName) {
        var wrapper = document.createElement('div');
        wrapper.innerHTML = rawHTML;
        var el = wrapper.firstChild;
        return el.getAttribute(attrName) || '';
    }
    function createConvertors(convertors) {
        var convertorMap = {};
        Object.keys(convertors).forEach(function (key) {
            var tagNames = key.split(', ');
            tagNames.forEach(function (tagName) {
                var name = tagName.toLowerCase();
                convertorMap[name] = convertors[key];
            });
        });
        return convertorMap;
    }
    var convertors = {
        'b, strong': function (state, _, openTagName) {
            var strong = state.schema.marks.strong;
            if (openTagName) {
                state.openMark(strong.create({ rawHTML: openTagName }));
            }
            else {
                state.closeMark(strong);
            }
        },
        'i, em': function (state, _, openTagName) {
            var emph = state.schema.marks.emph;
            if (openTagName) {
                state.openMark(emph.create({ rawHTML: openTagName }));
            }
            else {
                state.closeMark(emph);
            }
        },
        's, del': function (state, _, openTagName) {
            var strike = state.schema.marks.strike;
            if (openTagName) {
                state.openMark(strike.create({ rawHTML: openTagName }));
            }
            else {
                state.closeMark(strike);
            }
        },
        code: function (state, _, openTagName) {
            var code = state.schema.marks.code;
            if (openTagName) {
                state.openMark(code.create({ rawHTML: openTagName }));
            }
            else {
                state.closeMark(code);
            }
        },
        a: function (state, node, openTagName) {
            var tag = node.literal;
            var link = state.schema.marks.link;
            if (openTagName) {
                var linkUrl = getMatchedAttributeValue(tag, 'href');
                state.openMark(link.create({
                    linkUrl: sanitizeXSSAttributeValue(linkUrl),
                    rawHTML: openTagName,
                }));
            }
            else {
                state.closeMark(link);
            }
        },
        img: function (state, node, openTagName) {
            var tag = node.literal;
            var imageUrl = getMatchedAttributeValue(tag, 'src');
            if (imageUrl) {
                var altText = getMatchedAttributeValue(tag, 'alt');
                var image = state.schema.nodes.image;
                state.addNode(image, __assign$1({ rawHTML: openTagName, imageUrl: sanitizeXSSAttributeValue(imageUrl) }, (altText && { altText: altText })));
            }
        },
        hr: function (state, _, openTagName) {
            state.addNode(state.schema.nodes.thematicBreak, { rawHTML: openTagName });
        },
        br: function (state, node) {
            var _a, _b;
            var paragraph = state.schema.nodes.paragraph;
            if (((_a = node.parent) === null || _a === void 0 ? void 0 : _a.type) === 'paragraph') {
                if (node.prev) {
                    state.openNode(paragraph);
                }
                if (node.next) {
                    state.closeNode();
                }
            }
            else if (((_b = node.parent) === null || _b === void 0 ? void 0 : _b.type) === 'tableCell') {
                if (node.prev && (isInlineNode(node.prev) || isCustomHTMLInlineNode(state, node.prev))) {
                    state.closeNode();
                }
                if (node.next && (isInlineNode(node.next) || isCustomHTMLInlineNode(state, node.next))) {
                    state.openNode(paragraph);
                }
            }
        },
        pre: function (state, node, openTagName) {
            var _a, _b;
            var container = document.createElement('div');
            container.innerHTML = node.literal;
            var literal = (_b = (_a = container.firstChild) === null || _a === void 0 ? void 0 : _a.firstChild) === null || _b === void 0 ? void 0 : _b.textContent;
            state.openNode(state.schema.nodes.codeBlock, { rawHTML: openTagName });
            state.addText(getTextWithoutTrailingNewline(literal));
            state.closeNode();
        },
        'ul, ol': function (state, node, openTagName) {
            // in the table cell, '<ul>', '<ol>' is parsed as 'htmlInline' node
            if (node.parent.type === 'tableCell') {
                var _a = state.schema.nodes, bulletList = _a.bulletList, orderedList = _a.orderedList, paragraph = _a.paragraph;
                var list = openTagName === 'ul' ? bulletList : orderedList;
                if (openTagName) {
                    if (node.prev && !isListNode(node.prev)) {
                        state.closeNode();
                    }
                    state.openNode(list, { rawHTML: openTagName });
                }
                else {
                    state.closeNode();
                    if (node.next && !isListNode(node.next)) {
                        state.openNode(paragraph);
                    }
                }
            }
        },
        li: function (state, node, openTagName) {
            var _a;
            // in the table cell, '<li>' is parsed as 'htmlInline' node
            if (((_a = node.parent) === null || _a === void 0 ? void 0 : _a.type) === 'tableCell') {
                var _b = state.schema.nodes, listItem = _b.listItem, paragraph = _b.paragraph;
                if (openTagName) {
                    var attrs = getListItemAttrs(node);
                    if (node.prev && !isListNode(node.prev)) {
                        state.closeNode();
                    }
                    state.openNode(listItem, __assign$1({ rawHTML: openTagName }, attrs));
                    if (node.next && !isListNode(node.next)) {
                        state.openNode(paragraph);
                    }
                }
                else {
                    if (node.prev && !isListNode(node.prev)) {
                        state.closeNode();
                    }
                    state.closeNode();
                }
            }
        },
    };
    var htmlToWwConvertors = createConvertors(convertors);

    function isBRTag(node) {
        return node.type === 'htmlInline' && /<br ?\/?>/.test(node.literal);
    }
    function addRawHTMLAttributeToDOM(parent) {
        toArray_1(parent.childNodes).forEach(function (child) {
            if (isElemNode(child)) {
                var openTagName = child.nodeName.toLowerCase();
                child.setAttribute('data-raw-html', openTagName);
                if (child.childNodes) {
                    addRawHTMLAttributeToDOM(child);
                }
            }
        });
    }
    var toWwConvertors = {
        text: function (state, node) {
            state.addText(node.literal || '');
        },
        paragraph: function (state, node, _a, customAttrs) {
            var _b;
            var entering = _a.entering;
            if (entering) {
                var paragraph = state.schema.nodes.paragraph;
                // The `\n\n` entered in markdown separates the paragraph.
                // When changing to wysiwyg, a newline is added between the two paragraphs.
                if (((_b = node.prev) === null || _b === void 0 ? void 0 : _b.type) === 'paragraph') {
                    state.openNode(paragraph, customAttrs);
                    state.closeNode();
                }
                state.openNode(paragraph, customAttrs);
            }
            else {
                state.closeNode();
            }
        },
        heading: function (state, node, _a, customAttrs) {
            var entering = _a.entering;
            if (entering) {
                var _b = node, level = _b.level, headingType = _b.headingType;
                state.openNode(state.schema.nodes.heading, __assign$1({ level: level, headingType: headingType }, customAttrs));
            }
            else {
                state.closeNode();
            }
        },
        codeBlock: function (state, node, customAttrs) {
            var codeBlock = state.schema.nodes.codeBlock;
            var _a = node, info = _a.info, literal = _a.literal;
            state.openNode(codeBlock, __assign$1({ language: info }, customAttrs));
            state.addText(getTextWithoutTrailingNewline(literal || ''));
            state.closeNode();
        },
        list: function (state, node, _a, customAttrs) {
            var entering = _a.entering;
            if (entering) {
                var _b = state.schema.nodes, bulletList = _b.bulletList, orderedList = _b.orderedList;
                var _c = node.listData, type = _c.type, start = _c.start;
                if (type === 'bullet') {
                    state.openNode(bulletList, customAttrs);
                }
                else {
                    state.openNode(orderedList, __assign$1({ order: start }, customAttrs));
                }
            }
            else {
                state.closeNode();
            }
        },
        item: function (state, node, _a, customAttrs) {
            var entering = _a.entering;
            var listItem = state.schema.nodes.listItem;
            var _b = node.listData, task = _b.task, checked = _b.checked;
            if (entering) {
                var attrs = __assign$1(__assign$1(__assign$1({}, (task && { task: task })), (checked && { checked: checked })), customAttrs);
                state.openNode(listItem, attrs);
            }
            else {
                state.closeNode();
            }
        },
        blockQuote: function (state, _, _a, customAttrs) {
            var entering = _a.entering;
            if (entering) {
                state.openNode(state.schema.nodes.blockQuote, customAttrs);
            }
            else {
                state.closeNode();
            }
        },
        image: function (state, node, _a, customAttrs) {
            var entering = _a.entering, skipChildren = _a.skipChildren;
            var image = state.schema.nodes.image;
            var _b = node, destination = _b.destination, firstChild = _b.firstChild;
            if (entering && skipChildren) {
                skipChildren();
            }
            state.addNode(image, __assign$1(__assign$1({ imageUrl: destination }, (firstChild && { altText: firstChild.literal })), customAttrs));
        },
        thematicBreak: function (state, node, _, customAttrs) {
            state.addNode(state.schema.nodes.thematicBreak, customAttrs);
        },
        strong: function (state, _, _a, customAttrs) {
            var entering = _a.entering;
            var strong = state.schema.marks.strong;
            if (entering) {
                state.openMark(strong.create(customAttrs));
            }
            else {
                state.closeMark(strong);
            }
        },
        emph: function (state, _, _a, customAttrs) {
            var entering = _a.entering;
            var emph = state.schema.marks.emph;
            if (entering) {
                state.openMark(emph.create(customAttrs));
            }
            else {
                state.closeMark(emph);
            }
        },
        link: function (state, node, _a, customAttrs) {
            var entering = _a.entering;
            var link = state.schema.marks.link;
            var _b = node, destination = _b.destination, title = _b.title;
            if (entering) {
                var attrs = __assign$1(__assign$1({ linkUrl: destination }, (title && { linkText: title })), customAttrs);
                state.openMark(link.create(attrs));
            }
            else {
                state.closeMark(link);
            }
        },
        softbreak: function (state, node) {
            if (node.parent.type === 'paragraph') {
                var prev = node.prev, next = node.next;
                if (prev && !isBRTag(prev)) {
                    state.closeNode();
                }
                if (next && !isBRTag(next)) {
                    state.openNode(state.schema.nodes.paragraph);
                }
            }
        },
        // GFM specifications node
        table: function (state, _, _a, customAttrs) {
            var entering = _a.entering;
            if (entering) {
                state.openNode(state.schema.nodes.table, customAttrs);
            }
            else {
                state.closeNode();
            }
        },
        tableHead: function (state, _, _a, customAttrs) {
            var entering = _a.entering;
            if (entering) {
                state.openNode(state.schema.nodes.tableHead, customAttrs);
            }
            else {
                state.closeNode();
            }
        },
        tableBody: function (state, _, _a, customAttrs) {
            var entering = _a.entering;
            if (entering) {
                state.openNode(state.schema.nodes.tableBody, customAttrs);
            }
            else {
                state.closeNode();
            }
        },
        tableRow: function (state, _, _a, customAttrs) {
            var entering = _a.entering;
            if (entering) {
                state.openNode(state.schema.nodes.tableRow, customAttrs);
            }
            else {
                state.closeNode();
            }
        },
        tableCell: function (state, node, _a) {
            var entering = _a.entering;
            if (!node.ignored) {
                var hasParaNode = function (childNode) {
                    return childNode && (isInlineNode(childNode) || isCustomHTMLInlineNode(state, childNode));
                };
                if (entering) {
                    var _b = state.schema.nodes, tableHeadCell = _b.tableHeadCell, tableBodyCell = _b.tableBodyCell, paragraph = _b.paragraph;
                    var tablePart = node.parent.parent;
                    var cell = tablePart.type === 'tableHead' ? tableHeadCell : tableBodyCell;
                    var table = tablePart.parent;
                    var align = table.columns[node.startIdx].align;
                    var attrs = __assign$1({}, node.attrs);
                    if (align) {
                        attrs.align = align;
                    }
                    state.openNode(cell, attrs);
                    if (hasParaNode(node.firstChild)) {
                        state.openNode(paragraph);
                    }
                }
                else {
                    if (hasParaNode(node.lastChild)) {
                        state.closeNode();
                    }
                    state.closeNode();
                }
            }
        },
        strike: function (state, _, _a, customAttrs) {
            var entering = _a.entering;
            var strike = state.schema.marks.strike;
            if (entering) {
                state.openMark(strike.create(customAttrs));
            }
            else {
                state.closeMark(strike);
            }
        },
        code: function (state, node, _, customAttrs) {
            var code = state.schema.marks.code;
            state.openMark(code.create(customAttrs));
            state.addText(getTextWithoutTrailingNewline(node.literal || ''));
            state.closeMark(code);
        },
        customBlock: function (state, node) {
            var _a = state.schema.nodes, customBlock = _a.customBlock, paragraph = _a.paragraph;
            var _b = node, info = _b.info, literal = _b.literal;
            state.openNode(customBlock, { info: info });
            state.addText(getTextWithoutTrailingNewline(literal || ''));
            state.closeNode();
            // add empty line to edit the content in next line
            if (!node.next) {
                state.openNode(paragraph);
                state.closeNode();
            }
        },
        frontMatter: function (state, node) {
            state.openNode(state.schema.nodes.frontMatter);
            state.addText(node.literal);
            state.closeNode();
        },
        htmlInline: function (state, node) {
            var html = node.literal;
            var matched = html.match(reHTMLTag);
            var openTagName = matched[1], closeTagName = matched[3];
            var typeName = (openTagName || closeTagName).toLowerCase();
            var markType = state.schema.marks[typeName];
            // for user defined html schema
            if (markType === null || markType === void 0 ? void 0 : markType.spec.attrs.htmlInline) {
                if (openTagName) {
                    var htmlAttrs = getHTMLAttrsByHTMLString(html);
                    state.openMark(markType.create({ htmlAttrs: htmlAttrs }));
                }
                else {
                    state.closeMark(markType);
                }
            }
            else {
                var htmlToWwConvertor = htmlToWwConvertors[typeName];
                if (htmlToWwConvertor) {
                    htmlToWwConvertor(state, node, openTagName);
                }
            }
        },
        htmlBlock: function (state, node) {
            var html = node.literal;
            var container = document.createElement('div');
            var matched = html.match(reHTMLTag);
            var openTagName = matched[1], closeTagName = matched[3];
            var typeName = (openTagName || closeTagName).toLowerCase();
            var nodeType = state.schema.nodes[typeName];
            // for user defined html schema
            if (nodeType === null || nodeType === void 0 ? void 0 : nodeType.spec.attrs.htmlBlock) {
                var htmlAttrs = getHTMLAttrsByHTMLString(html);
                var childrenHTML = getChildrenHTML(node, typeName);
                state.addNode(nodeType, { htmlAttrs: htmlAttrs, childrenHTML: childrenHTML });
            }
            else {
                container.innerHTML = html;
                addRawHTMLAttributeToDOM(container);
                state.convertByDOMParser(container);
            }
        },
        customInline: function (state, node, _a) {
            var entering = _a.entering, skipChildren = _a.skipChildren;
            var info = node.info;
            var schema = state.schema;
            if (info.indexOf('widget') !== -1 && entering) {
                var content = getWidgetContent(node);
                skipChildren();
                state.addNode(schema.nodes.widget, { info: info }, [
                    schema.text(createWidgetContent(info, content)),
                ]);
            }
        },
    };
    function createWwConvertors(customConvertors) {
        var customConvertorTypes = Object.keys(customConvertors);
        var convertors = __assign$1({}, toWwConvertors);
        var renderer = new Renderer({
            gfm: true,
            nodeId: true,
            convertors: customConvertors,
        });
        var orgConvertors = renderer.getConvertors();
        customConvertorTypes.forEach(function (type) {
            var wwConvertor = toWwConvertors[type];
            if (wwConvertor && !includes(['htmlBlock', 'htmlInline'], type)) {
                convertors[type] = function (state, node, context) {
                    context.origin = function () { return orgConvertors[type](node, context); };
                    var tokens = customConvertors[type](node, context);
                    var attrs;
                    if (tokens) {
                        var _a = Array.isArray(tokens) ? tokens[0] : tokens, htmlAttrs = _a.attributes, classNames = _a.classNames;
                        attrs = { htmlAttrs: htmlAttrs, classNames: classNames };
                    }
                    wwConvertor(state, node, context, attrs);
                };
            }
        });
        return convertors;
    }

    function mergeMarkText(a, b) {
        if (a.isText && b.isText && Mark$1.sameSet(a.marks, b.marks)) {
            // @ts-ignore
            // type is not defined for "withText" in prosemirror-model
            return a.withText(a.text + b.text);
        }
        return false;
    }
    var ToWwConvertorState = /** @class */ (function () {
        function ToWwConvertorState(schema, convertors) {
            this.schema = schema;
            this.convertors = convertors;
            this.stack = [{ type: this.schema.topNodeType, attrs: null, content: [] }];
            this.marks = Mark$1.none;
        }
        ToWwConvertorState.prototype.top = function () {
            return last$1(this.stack);
        };
        ToWwConvertorState.prototype.push = function (node) {
            if (this.stack.length) {
                this.top().content.push(node);
            }
        };
        ToWwConvertorState.prototype.addText = function (text) {
            if (text) {
                var nodes = this.top().content;
                var lastNode = last$1(nodes);
                var node = this.schema.text(text, this.marks);
                var merged = lastNode && mergeMarkText(lastNode, node);
                if (merged) {
                    nodes[nodes.length - 1] = merged;
                }
                else {
                    nodes.push(node);
                }
            }
        };
        ToWwConvertorState.prototype.openMark = function (mark) {
            this.marks = mark.addToSet(this.marks);
        };
        ToWwConvertorState.prototype.closeMark = function (mark) {
            this.marks = mark.removeFromSet(this.marks);
        };
        ToWwConvertorState.prototype.addNode = function (type, attrs, content) {
            var node = type.createAndFill(attrs, content, this.marks);
            if (node) {
                this.push(node);
                return node;
            }
            return null;
        };
        ToWwConvertorState.prototype.openNode = function (type, attrs) {
            this.stack.push({ type: type, attrs: attrs, content: [] });
        };
        ToWwConvertorState.prototype.closeNode = function () {
            if (this.marks.length) {
                this.marks = Mark$1.none;
            }
            var _a = this.stack.pop(), type = _a.type, attrs = _a.attrs, content = _a.content;
            return this.addNode(type, attrs, content);
        };
        ToWwConvertorState.prototype.convertByDOMParser = function (root) {
            var _this = this;
            var doc = DOMParser.fromSchema(this.schema).parse(root);
            doc.content.forEach(function (node) { return _this.push(node); });
        };
        ToWwConvertorState.prototype.convert = function (mdNode, infoForPosSync) {
            var walker = mdNode.walker();
            var event = walker.next();
            var _loop_1 = function () {
                var node = event.node, entering = event.entering;
                var convertor = this_1.convertors[node.type];
                var skipped = false;
                if (convertor) {
                    var context = {
                        entering: entering,
                        leaf: !isContainer$2(node),
                        getChildrenText: getChildrenText$1,
                        options: { gfm: true, nodeId: false, tagFilter: false, softbreak: '\n' },
                        skipChildren: function () {
                            skipped = true;
                        },
                    };
                    convertor(this_1, node, context);
                    if ((infoForPosSync === null || infoForPosSync === void 0 ? void 0 : infoForPosSync.node) === node) {
                        var pos = this_1.stack.reduce(function (nodeSize, stackItem) {
                            return nodeSize +
                                stackItem.content.reduce(function (contentSize, pmNode) { return contentSize + pmNode.nodeSize; }, 0);
                        }, 0) + 1;
                        infoForPosSync.setMappedPos(pos);
                    }
                }
                if (skipped) {
                    walker.resumeAt(node, false);
                    walker.next();
                }
                event = walker.next();
            };
            var this_1 = this;
            while (event) {
                _loop_1();
            }
        };
        ToWwConvertorState.prototype.convertNode = function (mdNode, infoForPosSync) {
            this.convert(mdNode, infoForPosSync);
            if (this.stack.length) {
                return this.closeNode();
            }
            return null;
        };
        return ToWwConvertorState;
    }());

    function convertToRawHTMLHavingInlines(state, node, _a) {
        var openTag = _a[0], closeTag = _a[1];
        state.write(openTag);
        state.convertInline(node);
        state.write(closeTag);
    }
    function convertToRawHTMLHavingBlocks(state, _a, _b) {
        var node = _a.node, parent = _a.parent;
        var openTag = _b[0], closeTag = _b[1];
        state.stopNewline = true;
        state.write(openTag);
        state.convertNode(node);
        state.write(closeTag);
        if ((parent === null || parent === void 0 ? void 0 : parent.type.name) === 'doc') {
            state.closeBlock(node);
            state.stopNewline = false;
        }
    }
    function createTableHeadDelim(textContent, columnAlign) {
        var textLen = textContent.length;
        var leftDelim = '';
        var rightDelim = '';
        if (columnAlign === 'left') {
            leftDelim = ':';
            textLen -= 1;
        }
        else if (columnAlign === 'right') {
            rightDelim = ':';
            textLen -= 1;
        }
        else if (columnAlign === 'center') {
            leftDelim = ':';
            rightDelim = ':';
            textLen -= 2;
        }
        return "" + leftDelim + repeat$1('-', Math.max(textLen, 3)) + rightDelim;
    }
    var nodeTypeWriters = {
        text: function (state, _a) {
            var _b;
            var node = _a.node;
            state.text((_b = node.text) !== null && _b !== void 0 ? _b : '');
        },
        paragraph: function (state, _a) {
            var node = _a.node, parent = _a.parent, _b = _a.index, index = _b === void 0 ? 0 : _b;
            if (state.stopNewline) {
                state.convertInline(node);
            }
            else {
                var firstChildNode = index === 0;
                var prevNode = !firstChildNode && parent.child(index - 1);
                var prevEmptyNode = prevNode && prevNode.childCount === 0;
                var nextNode = index < parent.childCount - 1 && parent.child(index + 1);
                var nextParaNode = nextNode && nextNode.type.name === 'paragraph';
                var emptyNode = node.childCount === 0;
                if (emptyNode && prevEmptyNode) {
                    state.write('<br>\n');
                }
                else if (emptyNode && !prevEmptyNode && !firstChildNode) {
                    state.write('\n');
                }
                else {
                    state.convertInline(node);
                    if (nextParaNode) {
                        state.write('\n');
                    }
                    else {
                        state.closeBlock(node);
                    }
                }
            }
        },
        heading: function (state, _a, _b) {
            var node = _a.node;
            var delim = _b.delim;
            var headingType = node.attrs.headingType;
            if (headingType === 'atx') {
                state.write(delim + " ");
                state.convertInline(node);
                state.closeBlock(node);
            }
            else {
                state.convertInline(node);
                state.ensureNewLine();
                state.write(delim);
                state.closeBlock(node);
            }
        },
        codeBlock: function (state, _a, _b) {
            var node = _a.node;
            var delim = _b.delim, text = _b.text;
            var _c = delim, openDelim = _c[0], closeDelim = _c[1];
            state.write(openDelim);
            state.ensureNewLine();
            state.text(text, false);
            state.ensureNewLine();
            state.write(closeDelim);
            state.closeBlock(node);
        },
        blockQuote: function (state, _a, _b) {
            var node = _a.node, parent = _a.parent;
            var delim = _b.delim;
            if ((parent === null || parent === void 0 ? void 0 : parent.type.name) === node.type.name) {
                state.flushClose(1);
            }
            state.wrapBlock(delim, null, node, function () { return state.convertNode(node); });
        },
        bulletList: function (state, _a, _b) {
            var node = _a.node;
            var delim = _b.delim;
            // soft-tab(4)
            state.convertList(node, repeat$1(' ', 4), function () { return delim + " "; });
        },
        orderedList: function (state, _a) {
            var node = _a.node;
            var start = node.attrs.order || 1;
            // soft-tab(4)
            state.convertList(node, repeat$1(' ', 4), function (index) {
                var orderedNum = String(start + index);
                return orderedNum + ". ";
            });
        },
        listItem: function (state, _a) {
            var node = _a.node;
            var _b = node.attrs, task = _b.task, checked = _b.checked;
            if (task) {
                state.write("[" + (checked ? 'x' : ' ') + "] ");
            }
            state.convertNode(node);
        },
        image: function (state, _, _a) {
            var attrs = _a.attrs;
            state.write("![" + (attrs === null || attrs === void 0 ? void 0 : attrs.altText) + "](" + (attrs === null || attrs === void 0 ? void 0 : attrs.imageUrl) + ")");
        },
        thematicBreak: function (state, _a, _b) {
            var node = _a.node;
            var delim = _b.delim;
            state.write(delim);
            state.closeBlock(node);
        },
        table: function (state, _a) {
            var node = _a.node;
            state.convertNode(node);
            state.closeBlock(node);
        },
        tableHead: function (state, _a, _b) {
            var node = _a.node;
            var delim = _b.delim;
            var row = node.firstChild;
            state.convertNode(node);
            var result = delim !== null && delim !== void 0 ? delim : '';
            if (!delim && row) {
                row.forEach(function (_a) {
                    var textContent = _a.textContent, attrs = _a.attrs;
                    var headDelim = createTableHeadDelim(textContent, attrs.align);
                    result += "| " + headDelim + " ";
                });
            }
            state.write(result + "|");
            state.ensureNewLine();
        },
        tableBody: function (state, _a) {
            var node = _a.node;
            state.convertNode(node);
        },
        tableRow: function (state, _a) {
            var node = _a.node;
            state.convertNode(node);
            state.write('|');
            state.ensureNewLine();
        },
        tableHeadCell: function (state, _a, _b) {
            var node = _a.node;
            var _c = _b.delim, delim = _c === void 0 ? '| ' : _c;
            state.write(delim);
            state.convertTableCell(node);
            state.write(' ');
        },
        tableBodyCell: function (state, _a, _b) {
            var node = _a.node;
            var _c = _b.delim, delim = _c === void 0 ? '| ' : _c;
            state.write(delim);
            state.convertTableCell(node);
            state.write(' ');
        },
        customBlock: function (state, _a, _b) {
            var node = _a.node;
            var delim = _b.delim, text = _b.text;
            var _c = delim, openDelim = _c[0], closeDelim = _c[1];
            state.write(openDelim);
            state.ensureNewLine();
            state.text(text, false);
            state.ensureNewLine();
            state.write(closeDelim);
            state.closeBlock(node);
        },
        frontMatter: function (state, _a, _b) {
            var node = _a.node;
            var text = _b.text;
            state.text(text, false);
            state.closeBlock(node);
        },
        widget: function (state, _, _a) {
            var text = _a.text;
            state.write(text);
        },
        html: function (state, _, _a) {
            var text = _a.text;
            state.write(text);
        },
    };
    function write(type, _a) {
        var state = _a.state, nodeInfo = _a.nodeInfo, params = _a.params;
        var rawHTML = params.rawHTML;
        if (rawHTML) {
            if (inArray_1(type, ['heading', 'codeBlock']) > -1) {
                convertToRawHTMLHavingInlines(state, nodeInfo.node, rawHTML);
            }
            else if (inArray_1(type, ['image', 'thematicBreak']) > -1) {
                state.write(rawHTML);
            }
            else {
                convertToRawHTMLHavingBlocks(state, nodeInfo, rawHTML);
            }
        }
        else {
            nodeTypeWriters[type](state, nodeInfo, params);
        }
    }

    function addBackticks(node, side) {
        var text = node.text;
        var ticks = /`+/g;
        var len = 0;
        if (node.isText && text) {
            var matched = ticks.exec(text);
            while (matched) {
                len = Math.max(len, matched[0].length);
                matched = ticks.exec(text);
            }
        }
        var result = len > 0 && side > 0 ? ' `' : '`';
        for (var i = 0; i < len; i += 1) {
            result += '`';
        }
        if (len > 0 && side < 0) {
            result += ' ';
        }
        return result;
    }
    function getPairRawHTML(rawHTML) {
        return rawHTML ? ["<" + rawHTML + ">", "</" + rawHTML + ">"] : null;
    }
    function getOpenRawHTML(rawHTML) {
        return rawHTML ? "<" + rawHTML + ">" : null;
    }
    function getCloseRawHTML(rawHTML) {
        return rawHTML ? "</" + rawHTML + ">" : null;
    }
    var toMdConvertors = {
        heading: function (_a) {
            var node = _a.node;
            var attrs = node.attrs;
            var level = attrs.level;
            var delim = repeat$1('#', level);
            if (attrs.headingType === 'setext') {
                delim = level === 1 ? '===' : '---';
            }
            return {
                delim: delim,
                rawHTML: getPairRawHTML(attrs.rawHTML),
            };
        },
        codeBlock: function (_a) {
            var node = _a.node;
            var _b = node, attrs = _b.attrs, textContent = _b.textContent;
            return {
                delim: ["```" + (attrs.language || ''), '```'],
                rawHTML: getPairRawHTML(attrs.rawHTML),
                text: textContent,
            };
        },
        blockQuote: function (_a) {
            var node = _a.node;
            return {
                delim: '> ',
                rawHTML: getPairRawHTML(node.attrs.rawHTML),
            };
        },
        bulletList: function (_a, _b) {
            var node = _a.node;
            var inTable = _b.inTable;
            var rawHTML = node.attrs.rawHTML;
            if (inTable) {
                rawHTML = rawHTML || 'ul';
            }
            return {
                delim: '*',
                rawHTML: getPairRawHTML(rawHTML),
            };
        },
        orderedList: function (_a, _b) {
            var node = _a.node;
            var inTable = _b.inTable;
            var rawHTML = node.attrs.rawHTML;
            if (inTable) {
                rawHTML = rawHTML || 'ol';
            }
            return {
                rawHTML: getPairRawHTML(rawHTML),
            };
        },
        listItem: function (_a, _b) {
            var node = _a.node;
            var inTable = _b.inTable;
            var _c = node.attrs, task = _c.task, checked = _c.checked;
            var rawHTML = node.attrs.rawHTML;
            if (inTable) {
                rawHTML = rawHTML || 'li';
            }
            var className = task ? " class=\"task-list-item" + (checked ? ' checked' : '') + "\"" : '';
            var dataset = task ? " data-task" + (checked ? " data-task-checked" : '') : '';
            return {
                rawHTML: rawHTML ? ["<" + rawHTML + className + dataset + ">", "</" + rawHTML + ">"] : null,
            };
        },
        table: function (_a) {
            var node = _a.node;
            return {
                rawHTML: getPairRawHTML(node.attrs.rawHTML),
            };
        },
        tableHead: function (_a) {
            var node = _a.node;
            return {
                rawHTML: getPairRawHTML(node.attrs.rawHTML),
            };
        },
        tableBody: function (_a) {
            var node = _a.node;
            return {
                rawHTML: getPairRawHTML(node.attrs.rawHTML),
            };
        },
        tableRow: function (_a) {
            var node = _a.node;
            return {
                rawHTML: getPairRawHTML(node.attrs.rawHTML),
            };
        },
        tableHeadCell: function (_a) {
            var node = _a.node;
            return {
                rawHTML: getPairRawHTML(node.attrs.rawHTML),
            };
        },
        tableBodyCell: function (_a) {
            var node = _a.node;
            return {
                rawHTML: getPairRawHTML(node.attrs.rawHTML),
            };
        },
        image: function (_a) {
            var node = _a.node;
            var attrs = node.attrs;
            var altText = escape$1(attrs.altText || '');
            var imageUrl = escape$1(attrs.imageUrl);
            var altAttr = altText ? " alt=\"" + altText + "\"" : '';
            return {
                rawHTML: attrs.rawHTML ? "<" + attrs.rawHTML + " src=\"" + imageUrl + "\"" + altAttr + ">" : null,
                attrs: {
                    altText: altText,
                    imageUrl: imageUrl,
                },
            };
        },
        thematicBreak: function (_a) {
            var node = _a.node;
            return {
                delim: '***',
                rawHTML: getOpenRawHTML(node.attrs.rawHTML),
            };
        },
        customBlock: function (_a) {
            var node = _a.node;
            var _b = node, attrs = _b.attrs, textContent = _b.textContent;
            return {
                delim: ["$$" + attrs.info, '$$'],
                text: textContent,
            };
        },
        frontMatter: function (_a) {
            var node = _a.node;
            return {
                text: node.textContent,
            };
        },
        widget: function (_a) {
            var node = _a.node;
            return {
                text: node.textContent,
            };
        },
        strong: function (_a, _b) {
            var node = _a.node;
            var entering = _b.entering;
            var rawHTML = node.attrs.rawHTML;
            return {
                delim: '**',
                rawHTML: entering ? getOpenRawHTML(rawHTML) : getCloseRawHTML(rawHTML),
            };
        },
        emph: function (_a, _b) {
            var node = _a.node;
            var entering = _b.entering;
            var rawHTML = node.attrs.rawHTML;
            return {
                delim: '*',
                rawHTML: entering ? getOpenRawHTML(rawHTML) : getCloseRawHTML(rawHTML),
            };
        },
        strike: function (_a, _b) {
            var node = _a.node;
            var entering = _b.entering;
            var rawHTML = node.attrs.rawHTML;
            return {
                delim: '~~',
                rawHTML: entering ? getOpenRawHTML(rawHTML) : getCloseRawHTML(rawHTML),
            };
        },
        link: function (_a, _b) {
            var node = _a.node;
            var entering = _b.entering;
            var attrs = node.attrs;
            var linkUrl = escape$1(attrs.linkUrl);
            var rawHTML = attrs.rawHTML;
            if (entering) {
                return {
                    delim: '[',
                    rawHTML: rawHTML ? "<" + rawHTML + " href=\"" + linkUrl + "\">" : null,
                };
            }
            var linkText = attrs.title ? " " + quote(attrs.linkText) : '';
            return {
                delim: "](" + linkText + linkUrl + ")",
                rawHTML: getCloseRawHTML(rawHTML),
            };
        },
        code: function (_a, _b) {
            var node = _a.node, parent = _a.parent, _c = _a.index, index = _c === void 0 ? 0 : _c;
            var entering = _b.entering;
            var delim = entering
                ? addBackticks(parent.child(index), -1)
                : addBackticks(parent.child(index - 1), 1);
            var rawHTML = entering
                ? getOpenRawHTML(node.attrs.rawHTML)
                : getCloseRawHTML(node.attrs.rawHTML);
            return {
                delim: delim,
                rawHTML: rawHTML,
            };
        },
        // html inline node, html block node
        html: function (_a, _b) {
            var node = _a.node;
            var entering = _b.entering;
            var tagName = node.type.name;
            var attrs = node.attrs.htmlAttrs;
            var openTag = "<" + tagName;
            var closeTag = "</" + tagName + ">";
            Object.keys(attrs).forEach(function (attrName) {
                openTag += " " + attrName + "=\"" + attrs[attrName] + "\"";
            });
            openTag += '>';
            if (node.attrs.htmlInline) {
                return {
                    rawHTML: entering ? openTag : closeTag,
                };
            }
            return {
                text: "" + openTag + node.attrs.childrenHTML + closeTag,
            };
        },
    };
    var markTypeOptions = {
        strong: {
            mixable: true,
            removedEnclosingWhitespace: true,
        },
        emph: {
            mixable: true,
            removedEnclosingWhitespace: true,
        },
        strike: {
            mixable: true,
            removedEnclosingWhitespace: true,
        },
        code: {
            escape: false,
        },
        link: null,
        html: null,
    };
    function createNodeTypeConvertors(convertors) {
        var nodeTypeConvertors = {};
        var nodeTypes = Object.keys(nodeTypeWriters);
        nodeTypes.forEach(function (type) {
            nodeTypeConvertors[type] = function (state, nodeInfo) {
                var writer = nodeTypeWriters[type];
                if (writer) {
                    var convertor = convertors[type];
                    var params = convertor
                        ? convertor(nodeInfo, {
                            inTable: state.inTable,
                        })
                        : {};
                    write(type, { state: state, nodeInfo: nodeInfo, params: params });
                }
            };
        });
        return nodeTypeConvertors;
    }
    function createMarkTypeConvertors(convertors) {
        var markTypeConvertors = {};
        var markTypes = Object.keys(markTypeOptions);
        markTypes.forEach(function (type) {
            markTypeConvertors[type] = function (nodeInfo, entering) {
                var markOption = markTypeOptions[type];
                var convertor = convertors[type];
                // There are two ways to call the mark type converter
                // in the `toMdConvertorState` module.
                // When calling the converter without using `delim` and `rawHTML` values,
                // the converter is called without parameters.
                var runConvertor = convertor && nodeInfo && !isUndefined_1(entering);
                var params = runConvertor ? convertor(nodeInfo, { entering: entering }) : {};
                return __assign$1(__assign$1({}, params), markOption);
            };
        });
        return markTypeConvertors;
    }
    // Step 1: Create the converter by overriding the custom converter
    //         to the original converter defined in the `toMdConvertors` module.
    //         If the node type is defined in the original converter,
    //         the `origin()` function is exported to the paramter of the converter.
    // Step 2: Create a converter for the node type of ProseMirror by combining the converter
    //         created in Step 1 with the writers defined in the`toMdNodeTypeWriters` module.
    //         Each writer converts the ProseMirror's node to a string with the value returned
    //         by the converter, and then stores the state in the`toMdConverterState` class.
    // Step 3: Create a converter for the mark type of ProseMirror by combining the converter
    //         created in Step 1 with `markTypeOptions`.
    // Step 4: The created node type converter and mark type converter are injected
    //         when creating an instance of the`toMdConverterState` class.
    function createMdConvertors(customConvertors) {
        var customConvertorTypes = Object.keys(customConvertors);
        customConvertorTypes.forEach(function (type) {
            var baseConvertor = toMdConvertors[type];
            var customConvertor = customConvertors[type];
            if (baseConvertor) {
                toMdConvertors[type] = function (nodeInfo, context) {
                    context.origin = function () { return baseConvertor(nodeInfo, context); };
                    return customConvertor(nodeInfo, context);
                };
            }
            else {
                toMdConvertors[type] = customConvertor;
            }
            delete customConvertors[type];
        });
        var nodeTypeConvertors = createNodeTypeConvertors(toMdConvertors);
        var markTypeConvertors = createMarkTypeConvertors(toMdConvertors);
        return {
            nodeTypeConvertors: nodeTypeConvertors,
            markTypeConvertors: markTypeConvertors,
        };
    }

    var ToMdConvertorState = /** @class */ (function () {
        function ToMdConvertorState(_a) {
            var nodeTypeConvertors = _a.nodeTypeConvertors, markTypeConvertors = _a.markTypeConvertors;
            this.nodeTypeConvertors = nodeTypeConvertors;
            this.markTypeConvertors = markTypeConvertors;
            this.delim = '';
            this.result = '';
            this.closed = false;
            this.tightList = false;
            this.stopNewline = false;
            this.inTable = false;
        }
        ToMdConvertorState.prototype.getMarkConvertor = function (mark) {
            var type = mark.attrs.htmlInline ? 'html' : mark.type.name;
            return this.markTypeConvertors[type];
        };
        ToMdConvertorState.prototype.isInBlank = function () {
            return /(^|\n)$/.test(this.result);
        };
        ToMdConvertorState.prototype.markText = function (mark, entering, parent, index) {
            var convertor = this.getMarkConvertor(mark);
            if (convertor) {
                var _a = convertor({ node: mark, parent: parent, index: index }, entering), delim = _a.delim, rawHTML = _a.rawHTML;
                return rawHTML || delim;
            }
            return '';
        };
        ToMdConvertorState.prototype.flushClose = function (size) {
            if (!this.stopNewline && this.closed) {
                if (!this.isInBlank()) {
                    this.result += '\n';
                }
                if (!size) {
                    size = 2;
                }
                if (size > 1) {
                    var delimMin = this.delim;
                    var trim = /\s+$/.exec(delimMin);
                    if (trim) {
                        delimMin = delimMin.slice(0, delimMin.length - trim[0].length);
                    }
                    for (var i = 1; i < size; i += 1) {
                        this.result += delimMin + "\n";
                    }
                }
                this.closed = false;
            }
        };
        ToMdConvertorState.prototype.wrapBlock = function (delim, firstDelim, node, fn) {
            var old = this.delim;
            this.write(firstDelim || delim);
            this.delim += delim;
            fn();
            this.delim = old;
            this.closeBlock(node);
        };
        ToMdConvertorState.prototype.ensureNewLine = function () {
            if (!this.isInBlank()) {
                this.result += '\n';
            }
        };
        ToMdConvertorState.prototype.write = function (content) {
            if (content === void 0) { content = ''; }
            this.flushClose();
            if (this.delim && this.isInBlank()) {
                this.result += this.delim;
            }
            if (content) {
                this.result += content;
            }
        };
        ToMdConvertorState.prototype.closeBlock = function (node) {
            this.closed = node;
        };
        ToMdConvertorState.prototype.text = function (text, escaped) {
            var lines = text.split('\n');
            for (var i = 0; i < lines.length; i += 1) {
                var startOfLine = this.isInBlank() || !!this.closed;
                this.write();
                this.result += escaped !== false ? escape$1(lines[i], startOfLine) : lines[i];
                if (i !== lines.length - 1) {
                    this.result += '\n';
                }
            }
        };
        ToMdConvertorState.prototype.convertBlock = function (node, parent, index) {
            var type = node.type.name;
            var convertor = this.nodeTypeConvertors[type];
            var nodeInfo = { node: node, parent: parent, index: index };
            if (node.attrs.htmlBlock) {
                this.nodeTypeConvertors.html(this, nodeInfo);
            }
            else if (convertor) {
                convertor(this, nodeInfo);
            }
        };
        ToMdConvertorState.prototype.convertInline = function (parent) {
            var _this = this;
            var active = [];
            var trailing = '';
            var progress = function (node, _, index) {
                var marks = node ? node.marks : [];
                var leading = trailing;
                trailing = '';
                // If whitespace has to be expelled from the node, adjust
                // leading and trailing accordingly.
                var removedWhitespace = node &&
                    node.isText &&
                    marks.some(function (mark) {
                        var markConvertor = _this.getMarkConvertor(mark);
                        var info = markConvertor && markConvertor();
                        return info && info.removedEnclosingWhitespace;
                    });
                if (removedWhitespace && node && node.text) {
                    var _a = /^(\s*)(.*?)(\s*)$/m.exec(node.text), lead = _a[1], mark = _a[2], trail = _a[3];
                    leading += lead;
                    trailing = trail;
                    if (lead || trail) {
                        // @ts-ignore
                        // type is not defined for "withText" in prosemirror-model
                        node = mark ? node.withText(mark) : null;
                        if (!node) {
                            marks = active;
                        }
                    }
                }
                var lastMark = marks.length && last$1(marks);
                var markConvertor = lastMark && _this.getMarkConvertor(lastMark);
                var markType = markConvertor && markConvertor();
                var noEscape = markType && markType.escape === false;
                var len = marks.length - (noEscape ? 1 : 0);
                // Try to reorder 'mixable' marks, such as em and strong, which
                // in Markdown may be opened and closed in different order, so
                // that order of the marks for the token matches the order in
                // active.
                for (var i = 0; i < len; i += 1) {
                    var mark = marks[i];
                    if (markType && !markType.mixable) {
                        break;
                    }
                    for (var j = 0; j < active.length; j += 1) {
                        var other = active[j];
                        if (markType && !markType.mixable) {
                            break;
                        }
                        if (mark.eq(other)) {
                            // eslint-disable-next-line max-depth
                            if (i > j) {
                                marks = marks
                                    .slice(0, j)
                                    .concat(mark)
                                    .concat(marks.slice(j, i))
                                    .concat(marks.slice(i + 1, len));
                            }
                            else if (j > i) {
                                marks = marks
                                    .slice(0, i)
                                    .concat(marks.slice(i + 1, j))
                                    .concat(mark)
                                    .concat(marks.slice(j, len));
                            }
                            break;
                        }
                    }
                }
                // Find the prefix of the mark set that didn't change
                var keep = 0;
                while (keep < Math.min(active.length, len) && marks[keep].eq(active[keep])) {
                    keep += 1;
                }
                // Close the marks that need to be closed
                while (keep < active.length) {
                    var activedMark = active.pop();
                    if (activedMark) {
                        _this.text(_this.markText(activedMark, false, parent, index), false);
                    }
                }
                // Output any previously expelled trailing whitespace outside the marks
                if (leading) {
                    _this.text(leading);
                }
                // Open the marks that need to be opened
                if (node) {
                    while (active.length < len) {
                        var mark = marks[active.length];
                        active.push(mark);
                        _this.text(_this.markText(mark, true, parent, index), false);
                    }
                    // Render the node. Special case code marks, since their content
                    // may not be escaped.
                    if (noEscape && node.isText) {
                        _this.text(_this.markText(lastMark, true, parent, index) +
                            node.text +
                            _this.markText(lastMark, false, parent, index + 1), false);
                    }
                    else {
                        _this.convertBlock(node, parent, index);
                    }
                }
            };
            parent.forEach(progress);
            progress(null, null, parent.childCount);
        };
        // Render a node's content as a list. `delim` should be the extra
        // indentation added to all lines except the first in an item,
        // `firstDelimFn` is a function going from an item index to a
        // delimiter for the first line of the item.
        ToMdConvertorState.prototype.convertList = function (node, delim, firstDelimFn) {
            var _this = this;
            var _a;
            if (this.closed && this.closed.type === node.type) {
                this.flushClose(3);
            }
            else if (this.tightList) {
                this.flushClose(1);
            }
            var tight = (_a = node.attrs.tight) !== null && _a !== void 0 ? _a : true;
            var prevTight = this.tightList;
            this.tightList = tight;
            node.forEach(function (child, _, index) {
                if (index && tight) {
                    _this.flushClose(1);
                }
                _this.wrapBlock(delim, firstDelimFn(index), node, function () { return _this.convertBlock(child, node, index); });
            });
            this.tightList = prevTight;
        };
        ToMdConvertorState.prototype.convertTableCell = function (node) {
            var _this = this;
            this.stopNewline = true;
            this.inTable = true;
            node.forEach(function (child, _, index) {
                if (includes(['bulletList', 'orderedList'], child.type.name)) {
                    _this.convertBlock(child, node, index);
                    _this.closed = false;
                }
                else {
                    _this.convertInline(child);
                    if (index < node.childCount - 1) {
                        var nextChild = node.child(index + 1);
                        if (nextChild.type.name === 'paragraph') {
                            _this.write('<br>');
                        }
                    }
                }
            });
            this.stopNewline = false;
            this.inTable = false;
        };
        ToMdConvertorState.prototype.convertNode = function (parent, infoForPosSync) {
            var _this = this;
            parent.forEach(function (node, _, index) {
                _this.convertBlock(node, parent, index);
                if ((infoForPosSync === null || infoForPosSync === void 0 ? void 0 : infoForPosSync.node) === node) {
                    var lineTexts = _this.result.split('\n');
                    infoForPosSync.setMappedPos([lineTexts.length, last$1(lineTexts).length + 1]);
                }
            });
            return this.result;
        };
        return ToMdConvertorState;
    }());

    var Convertor = /** @class */ (function () {
        function Convertor(schema, toMdConvertors, toHTMLConvertors, eventEmitter) {
            var _this = this;
            this.setMappedPos = function (pos) {
                _this.mappedPosWhenConverting = pos;
            };
            this.schema = schema;
            this.eventEmitter = eventEmitter;
            this.focusedNode = null;
            this.mappedPosWhenConverting = null;
            this.toWwConvertors = createWwConvertors(toHTMLConvertors);
            this.toMdConvertors = createMdConvertors(toMdConvertors || {});
            this.eventEmitter.listen('setFocusedNode', function (node) { return (_this.focusedNode = node); });
        }
        Convertor.prototype.getMappedPos = function () {
            return this.mappedPosWhenConverting;
        };
        Convertor.prototype.getInfoForPosSync = function () {
            return { node: this.focusedNode, setMappedPos: this.setMappedPos };
        };
        Convertor.prototype.toWysiwygModel = function (mdNode) {
            var state = new ToWwConvertorState(this.schema, this.toWwConvertors);
            return state.convertNode(mdNode, this.getInfoForPosSync());
        };
        Convertor.prototype.toMarkdownText = function (wwNode) {
            var state = new ToMdConvertorState(this.toMdConvertors);
            var markdownText = state.convertNode(wwNode, this.getInfoForPosSync());
            markdownText = this.eventEmitter.emitReduce('beforeConvertWysiwygToMarkdown', markdownText);
            return markdownText;
        };
        return Convertor;
    }());

    function execPlugin(plugin, eventEmitter, usageStatistics) {
        var pmState = { Plugin: Plugin, Selection: Selection, TextSelection: TextSelection };
        var pmView = { Decoration: Decoration, DecorationSet: DecorationSet };
        var pmModel = { Fragment: Fragment };
        var context = { eventEmitter: eventEmitter, usageStatistics: usageStatistics, pmState: pmState, pmView: pmView, pmModel: pmModel, i18n: i18n };
        if (isArray_1(plugin)) {
            var pluginFn = plugin[0], _a = plugin[1], options = _a === void 0 ? {} : _a;
            return pluginFn(context, options);
        }
        return plugin(context);
    }
    function getPluginInfo(plugins, eventEmitter, usageStatistics) {
        eventEmitter.listen('mixinTableOffsetMapPrototype', mixinTableOffsetMapPrototype);
        return (plugins !== null && plugins !== void 0 ? plugins : []).reduce(function (acc, plugin) {
            var pluginInfoResult = execPlugin(plugin, eventEmitter, usageStatistics);
            if (!pluginInfoResult) {
                throw new Error('The return value of the executed plugin is empty.');
            }
            var markdownParsers = pluginInfoResult.markdownParsers, toHTMLRenderers = pluginInfoResult.toHTMLRenderers, toMarkdownRenderers = pluginInfoResult.toMarkdownRenderers, markdownPlugins = pluginInfoResult.markdownPlugins, wysiwygPlugins = pluginInfoResult.wysiwygPlugins, wysiwygNodeViews = pluginInfoResult.wysiwygNodeViews, markdownCommands = pluginInfoResult.markdownCommands, wysiwygCommands = pluginInfoResult.wysiwygCommands, toolbarItems = pluginInfoResult.toolbarItems;
            if (toHTMLRenderers) {
                acc.toHTMLRenderers = deepMergedCopy(acc.toHTMLRenderers, toHTMLRenderers);
            }
            if (toMarkdownRenderers) {
                acc.toMarkdownRenderers = deepMergedCopy(acc.toMarkdownRenderers, toMarkdownRenderers);
            }
            if (markdownPlugins) {
                acc.mdPlugins = acc.mdPlugins.concat(markdownPlugins);
            }
            if (wysiwygPlugins) {
                acc.wwPlugins = acc.wwPlugins.concat(wysiwygPlugins);
            }
            if (wysiwygNodeViews) {
                acc.wwNodeViews = __assign$1(__assign$1({}, acc.wwNodeViews), wysiwygNodeViews);
            }
            if (markdownCommands) {
                acc.mdCommands = __assign$1(__assign$1({}, acc.mdCommands), markdownCommands);
            }
            if (wysiwygCommands) {
                acc.wwCommands = __assign$1(__assign$1({}, acc.wwCommands), wysiwygCommands);
            }
            if (toolbarItems) {
                acc.toolbarItems = acc.toolbarItems.concat(toolbarItems);
            }
            if (markdownParsers) {
                acc.markdownParsers = __assign$1(__assign$1({}, acc.markdownParsers), markdownParsers);
            }
            return acc;
        }, {
            toHTMLRenderers: {},
            toMarkdownRenderers: {},
            mdPlugins: [],
            wwPlugins: [],
            wwNodeViews: {},
            mdCommands: {},
            wwCommands: {},
            toolbarItems: [],
            markdownParsers: {},
        });
    }

    var TASK_ATTR_NAME = 'data-task';
    var DISABLED_TASK_ATTR_NAME = 'data-task-disabled';
    var TASK_CHECKED_CLASS_NAME = 'checked';
    /**
     * Class ToastUIEditorViewer
     * @param {object} options Option object
     *     @param {HTMLElement} options.el - container element
     *     @param {string} [options.initialValue] Editor's initial value
     *     @param {Object} [options.events] - Events
     *         @param {function} [options.events.load] - It would be emitted when editor fully load
     *         @param {function} [options.events.change] - It would be emitted when content changed
     *         @param {function} [options.events.caretChange] - It would be emitted when format change by cursor position
     *         @param {function} [options.events.focus] - It would be emitted when editor get focus
     *         @param {function} [options.events.blur] - It would be emitted when editor loose focus
     *     @param {Array.<function|Array>} [options.plugins] - Array of plugins. A plugin can be either a function or an array in the form of [function, options].
     *     @param {Object} [options.extendedAutolinks] - Using extended Autolinks specified in GFM spec
     *     @param {Object} [options.linkAttributes] - Attributes of anchor element that should be rel, target, hreflang, type
     *     @param {Object} [options.customHTMLRenderer=null] - Object containing custom renderer functions correspond to change markdown node to preview HTML or wysiwyg node
     *     @param {boolean} [options.referenceDefinition=false] - whether use the specification of link reference definition
     *     @param {function} [options.customHTMLSanitizer=null] - custom HTML sanitizer
     *     @param {boolean} [options.frontMatter=false] - whether use the front matter
     *     @param {string} [options.theme] - The theme to style the viewer with. The default is included in toastui-editor.css.
     */
    var ToastUIEditorViewer = /** @class */ (function () {
        function ToastUIEditorViewer(options) {
            var _this = this;
            this.options = extend_1({
                linkAttributes: null,
                extendedAutolinks: false,
                customHTMLRenderer: null,
                referenceDefinition: false,
                customHTMLSanitizer: null,
                frontMatter: false,
                usageStatistics: true,
                theme: 'light',
            }, options);
            this.eventEmitter = new EventEmitter();
            var linkAttributes = sanitizeLinkAttribute(this.options.linkAttributes);
            var _a = getPluginInfo(this.options.plugins, this.eventEmitter, this.options.usageStatistics) || {}, toHTMLRenderers = _a.toHTMLRenderers, markdownParsers = _a.markdownParsers;
            var _b = this.options, customHTMLRenderer = _b.customHTMLRenderer, extendedAutolinks = _b.extendedAutolinks, referenceDefinition = _b.referenceDefinition, frontMatter = _b.frontMatter, customHTMLSanitizer = _b.customHTMLSanitizer;
            var rendererOptions = {
                linkAttributes: linkAttributes,
                customHTMLRenderer: __assign$1(__assign$1({}, toHTMLRenderers), customHTMLRenderer),
                extendedAutolinks: extendedAutolinks,
                referenceDefinition: referenceDefinition,
                frontMatter: frontMatter,
                sanitizer: customHTMLSanitizer || sanitizeHTML,
            };
            if (this.options.events) {
                forEachOwnProperties_1(this.options.events, function (fn, key) {
                    _this.on(key, fn);
                });
            }
            var _c = this.options, el = _c.el, initialValue = _c.initialValue, theme = _c.theme;
            var existingHTML = el.innerHTML;
            if (theme !== 'light') {
                el.classList.add(cls(theme));
            }
            el.innerHTML = '';
            this.toastMark = new ToastMark('', {
                disallowedHtmlBlockTags: ['br', 'img'],
                extendedAutolinks: extendedAutolinks,
                referenceDefinition: referenceDefinition,
                disallowDeepHeading: true,
                frontMatter: frontMatter,
                customParser: markdownParsers,
            });
            this.preview = new MarkdownPreview(this.eventEmitter, __assign$1(__assign$1({}, rendererOptions), { isViewer: true }));
            on_1(this.preview.el, 'mousedown', this.toggleTask.bind(this));
            if (initialValue) {
                this.setMarkdown(initialValue);
            }
            else if (existingHTML) {
                this.preview.setHTML(existingHTML);
            }
            el.appendChild(this.preview.previewContent);
            this.eventEmitter.emit('load', this);
        }
        /**
         * Toggle task by detecting mousedown event.
         * @param {MouseEvent} ev - event
         * @private
         */
        ToastUIEditorViewer.prototype.toggleTask = function (ev) {
            var element = ev.target;
            var style = getComputedStyle(element, ':before');
            if (!element.hasAttribute(DISABLED_TASK_ATTR_NAME) &&
                element.hasAttribute(TASK_ATTR_NAME) &&
                isPositionInBox(style, ev.offsetX, ev.offsetY)) {
                toggleClass(element, TASK_CHECKED_CLASS_NAME);
            }
        };
        /**
         * Set content for preview
         * @param {string} markdown Markdown text
         */
        ToastUIEditorViewer.prototype.setMarkdown = function (markdown) {
            var lineTexts = this.toastMark.getLineTexts();
            var length = lineTexts.length;
            var lastLine = last$1(lineTexts);
            var endSourcepos = [length, lastLine.length + 1];
            var editResult = this.toastMark.editMarkdown([1, 1], endSourcepos, markdown || '');
            this.eventEmitter.emit('updatePreview', editResult);
        };
        /**
         * Bind eventHandler to event type
         * @param {string} type Event type
         * @param {function} handler Event handler
         */
        ToastUIEditorViewer.prototype.on = function (type, handler) {
            this.eventEmitter.listen(type, handler);
        };
        /**
         * Unbind eventHandler from event type
         * @param {string} type Event type
         */
        ToastUIEditorViewer.prototype.off = function (type) {
            this.eventEmitter.removeEventHandler(type);
        };
        /**
         * Add hook to TUIEditor event
         * @param {string} type Event type
         * @param {function} handler Event handler
         */
        ToastUIEditorViewer.prototype.addHook = function (type, handler) {
            this.eventEmitter.removeEventHandler(type);
            this.eventEmitter.listen(type, handler);
        };
        /**
         * Remove Viewer preview from document
         */
        ToastUIEditorViewer.prototype.destroy = function () {
            off_1(this.preview.el, 'mousedown', this.toggleTask.bind(this));
            this.preview.destroy();
            this.eventEmitter.emit('destroy');
        };
        /**
         * Return true
         * @returns {boolean}
         */
        ToastUIEditorViewer.prototype.isViewer = function () {
            return true;
        };
        /**
         * Return false
         * @returns {boolean}
         */
        ToastUIEditorViewer.prototype.isMarkdownMode = function () {
            return false;
        };
        /**
         * Return false
         * @returns {boolean}
         */
        ToastUIEditorViewer.prototype.isWysiwygMode = function () {
            return false;
        };
        return ToastUIEditorViewer;
    }());

    function isPmNode(node) {
        return node instanceof Node$3;
    }
    function isContainer(type) {
        var containerTypes = [
            'document',
            'blockQuote',
            'bulletList',
            'orderedList',
            'listItem',
            'paragraph',
            'heading',
            'emph',
            'strong',
            'strike',
            'link',
            'image',
            'table',
            'tableHead',
            'tableBody',
            'tableRow',
            'tableHeadCell',
            'tableBodyCell',
        ];
        return includes(containerTypes, type);
    }
    function createMdLikeNode(node) {
        var attrs = node.attrs, type = node.type;
        var nodeType = type.name;
        var mdLikeNode = {
            type: nodeType,
            wysiwygNode: true,
            literal: !isContainer(nodeType) && isPmNode(node) ? node.textContent : null,
        };
        var nodeTypeMap = {
            heading: { level: attrs.level },
            link: { destination: attrs.linkUrl, title: attrs.linkText },
            image: { destination: attrs.imageUrl },
            codeBlock: { info: attrs.language },
            bulletList: { type: 'list', listData: { type: 'bullet' } },
            orderedList: { type: 'list', listData: { type: 'ordered', start: attrs.order } },
            listItem: { type: 'item', listData: { task: attrs.task, checked: attrs.checked } },
            tableHeadCell: { type: 'tableCell', cellType: 'head', align: attrs.align },
            tableBodyCell: { type: 'tableCell', cellType: 'body', align: attrs.align },
            customBlock: { info: attrs.info },
        };
        var nodeInfo = nodeTypeMap[nodeType];
        var attributes = __assign$1(__assign$1({}, mdLikeNode), nodeInfo);
        // html block, inline node
        var _a = node.attrs, htmlAttrs = _a.htmlAttrs, childrenHTML = _a.childrenHTML;
        if (htmlAttrs) {
            return __assign$1(__assign$1({}, attributes), { attrs: htmlAttrs, childrenHTML: childrenHTML });
        }
        return attributes;
    }

    var tokenToDOMNode = {
        openTag: function (token, stack) {
            var _a = token, tagName = _a.tagName, classNames = _a.classNames, attributes = _a.attributes;
            var el = document.createElement(tagName);
            var attrs = {};
            if (classNames) {
                el.className = classNames.join(' ');
            }
            if (attributes) {
                attrs = __assign$1(__assign$1({}, attrs), attributes);
            }
            setAttributes(attrs, el);
            stack.push(el);
        },
        closeTag: function (_, stack) {
            if (stack.length > 1) {
                var el = stack.pop();
                last$1(stack).appendChild(el);
            }
        },
        html: function (token, stack) {
            last$1(stack).insertAdjacentHTML('beforeend', token.content);
        },
        text: function (token, stack) {
            var textNode = document.createTextNode(token.content);
            last$1(stack).appendChild(textNode);
        },
    };
    var WwToDOMAdaptor = /** @class */ (function () {
        function WwToDOMAdaptor(linkAttributes, customRenderer) {
            var convertors = getHTMLRenderConvertors(linkAttributes, customRenderer);
            var customHTMLConvertor = __assign$1(__assign$1({}, customRenderer.htmlBlock), customRenderer.htmlInline);
            // flatten the html block, inline convertor to other custom convertors
            this.customConvertorKeys = Object.keys(customRenderer).concat(Object.keys(customHTMLConvertor));
            this.renderer = new Renderer({
                gfm: true,
                convertors: __assign$1(__assign$1({}, convertors), customHTMLConvertor),
            });
            this.convertors = this.renderer.getConvertors();
        }
        WwToDOMAdaptor.prototype.generateTokens = function (node) {
            var mdLikeNode = createMdLikeNode(node);
            var context = {
                entering: true,
                leaf: isPmNode(node) ? node.isLeaf : false,
                options: this.renderer.getOptions(),
                getChildrenText: function () { return (isPmNode(node) ? node.textContent : ''); },
                skipChildren: function () { return false; },
            };
            var convertor = this.convertors[node.type.name];
            var converted = convertor(mdLikeNode, context, this.convertors);
            var tokens = isArray_1(converted) ? converted : [converted];
            if (isContainer(node.type.name) || node.attrs.htmlInline) {
                context.entering = false;
                tokens.push({ type: 'text', content: isPmNode(node) ? node.textContent : '' });
                tokens = tokens.concat(convertor(mdLikeNode, context, this.convertors));
            }
            return tokens;
        };
        WwToDOMAdaptor.prototype.toDOMNode = function (node) {
            var tokens = this.generateTokens(node);
            var stack = [];
            tokens.forEach(function (token) { return tokenToDOMNode[token.type](token, stack); });
            return stack[0];
        };
        WwToDOMAdaptor.prototype.getToDOMNode = function (name) {
            if (includes(this.customConvertorKeys, name)) {
                return this.toDOMNode.bind(this);
            }
            return null;
        };
        return WwToDOMAdaptor;
    }());

    var ANIMATION_TIME = 100;
    var SCROLL_BLOCKING_RESET_DELAY = 15;
    var currentTimeoutId = null;
    var releaseTimer = null;
    function run(deltaScrollTop, _a) {
        var syncScrollTop = _a.syncScrollTop, releaseEventBlock = _a.releaseEventBlock;
        if (releaseTimer) {
            clearTimeout(releaseTimer);
        }
        syncScrollTop(deltaScrollTop);
        releaseTimer = setTimeout(function () {
            releaseEventBlock();
        }, SCROLL_BLOCKING_RESET_DELAY);
    }
    function animate(curScrollTop, targetScrollTop, syncCallbacks) {
        var diff = targetScrollTop - curScrollTop;
        var startTime = Date.now();
        var step = function () {
            var stepTime = Date.now();
            var progress = (stepTime - startTime) / ANIMATION_TIME;
            var deltaValue;
            if (currentTimeoutId) {
                clearTimeout(currentTimeoutId);
            }
            if (progress < 1) {
                deltaValue = curScrollTop + diff * Math.cos(((1 - progress) * Math.PI) / 2);
                run(Math.ceil(deltaValue), syncCallbacks);
                currentTimeoutId = setTimeout(step, 1);
            }
            else {
                run(targetScrollTop, syncCallbacks);
                currentTimeoutId = null;
            }
        };
        step();
    }

    var EDITOR_BOTTOM_PADDING = 18;
    var ScrollSync = /** @class */ (function () {
        function ScrollSync(mdEditor, preview, eventEmitter) {
            this.latestEditorScrollTop = null;
            this.latestPreviewScrollTop = null;
            this.blockedScroll = null;
            this.active = true;
            var previewRoot = preview.previewContent, previewEl = preview.el;
            this.previewRoot = previewRoot;
            this.previewEl = previewEl;
            this.mdEditor = mdEditor;
            this.editorView = mdEditor.view;
            this.toastMark = mdEditor.getToastMark();
            this.eventEmitter = eventEmitter;
            this.addScrollSyncEvent();
        }
        ScrollSync.prototype.addScrollSyncEvent = function () {
            var _this = this;
            this.eventEmitter.listen('afterPreviewRender', function () {
                // Immediately after the 'afterPreviewRender' event has occurred,
                // browser rendering is not yet complete.
                // So the size of elements can not be accurately measured.
                setTimeout(function () {
                    _this.syncPreviewScrollTop(true);
                }, 200);
            });
            this.eventEmitter.listen('scroll', function (type, data) {
                if (_this.active) {
                    if (type === 'editor' && _this.blockedScroll !== 'editor') {
                        _this.syncPreviewScrollTop();
                    }
                    else if (type === 'preview' && _this.blockedScroll !== 'preview') {
                        _this.syncEditorScrollTop(data);
                    }
                }
            });
            this.eventEmitter.listen('toggleScrollSync', function (active) {
                _this.active = active;
            });
        };
        ScrollSync.prototype.getMdNodeAtPos = function (doc, posInfo) {
            var indexInfo = doc.content.findIndex(posInfo.pos);
            var line = indexInfo.index;
            return this.toastMark.findFirstNodeAtLine(line + 1);
        };
        ScrollSync.prototype.getScrollTopByCaretPos = function () {
            var pos = this.mdEditor.getSelection();
            var firstMdNode = this.toastMark.findFirstNodeAtLine(pos[0][0]);
            var previewHeight = this.previewEl.clientHeight;
            var el = getParentNodeObj(firstMdNode).el;
            var totalOffsetTop = getTotalOffsetTop(el, this.previewRoot) || el.offsetTop;
            var nodeHeight = el.clientHeight;
            // multiply 0.5 for calculating the position in the middle of preview area
            var targetScrollTop = totalOffsetTop + nodeHeight - previewHeight * 0.5;
            this.latestEditorScrollTop = null;
            var diff = el.getBoundingClientRect().top - this.previewEl.getBoundingClientRect().top;
            return diff < previewHeight ? null : targetScrollTop;
        };
        ScrollSync.prototype.syncPreviewScrollTop = function (editing) {
            if (editing === void 0) { editing = false; }
            var _a = this, editorView = _a.editorView, previewEl = _a.previewEl, previewRoot = _a.previewRoot;
            var _b = editorView.dom.getBoundingClientRect(), left = _b.left, top = _b.top;
            var posInfo = editorView.posAtCoords({ left: left, top: top });
            var doc = editorView.state.doc;
            var firstMdNode = this.getMdNodeAtPos(doc, posInfo);
            if (!firstMdNode || isHTMLNode(firstMdNode)) {
                return;
            }
            var curScrollTop = previewEl.scrollTop;
            var _c = editorView.dom, scrollTop = _c.scrollTop, scrollHeight = _c.scrollHeight, clientHeight = _c.clientHeight, children = _c.children;
            var isBottomPos = scrollHeight - scrollTop <= clientHeight + EDITOR_BOTTOM_PADDING;
            var targetScrollTop = isBottomPos ? previewEl.scrollHeight : 0;
            if (scrollTop && !isBottomPos) {
                if (editing) {
                    var scrollTopByEditing = this.getScrollTopByCaretPos();
                    if (!scrollTopByEditing) {
                        return;
                    }
                    targetScrollTop = scrollTopByEditing;
                }
                else {
                    var _d = getParentNodeObj(firstMdNode), el = _d.el, mdNode = _d.mdNode;
                    var _e = getEditorRangeHeightInfo(doc, mdNode, children), height = _e.height, rect = _e.rect;
                    var totalOffsetTop = getTotalOffsetTop(el, previewRoot) || el.offsetTop;
                    var nodeHeight = el.clientHeight;
                    var ratio = top > rect.top ? Math.min((top - rect.top) / height, 1) : 0;
                    targetScrollTop = totalOffsetTop + nodeHeight * ratio;
                }
                targetScrollTop = this.getResolvedScrollTop('editor', scrollTop, targetScrollTop, curScrollTop);
                this.latestEditorScrollTop = scrollTop;
            }
            if (targetScrollTop !== curScrollTop) {
                this.run('editor', targetScrollTop, curScrollTop);
            }
        };
        ScrollSync.prototype.syncEditorScrollTop = function (targetNode) {
            var _a = this, toastMark = _a.toastMark, editorView = _a.editorView, previewRoot = _a.previewRoot, previewEl = _a.previewEl;
            var dom = editorView.dom, state = editorView.state;
            var scrollTop = previewEl.scrollTop, clientHeight = previewEl.clientHeight, scrollHeight = previewEl.scrollHeight;
            var isBottomPos = scrollHeight - scrollTop <= clientHeight;
            var curScrollTop = dom.scrollTop;
            var targetScrollTop = isBottomPos ? dom.scrollHeight : 0;
            if (scrollTop && targetNode && !isBottomPos) {
                targetNode = findAncestorHavingId(targetNode, previewRoot);
                if (!targetNode.getAttribute('data-nodeid')) {
                    return;
                }
                var children = dom.children;
                var mdNodeId = Number(targetNode.getAttribute('data-nodeid'));
                var _b = getParentNodeObj(toastMark.findNodeById(mdNodeId)), mdNode = _b.mdNode, el = _b.el;
                var mdNodeStartLine = getMdStartLine(mdNode);
                targetScrollTop = children[mdNodeStartLine - 1].offsetTop;
                var height = getEditorRangeHeightInfo(state.doc, mdNode, children).height;
                var _c = getAndSaveOffsetInfo(el, previewRoot, mdNodeId), nodeHeight = _c.nodeHeight, offsetTop = _c.offsetTop;
                targetScrollTop += getAdditionalPos(scrollTop, offsetTop, nodeHeight, height);
                targetScrollTop = this.getResolvedScrollTop('preview', scrollTop, targetScrollTop, curScrollTop);
                this.latestPreviewScrollTop = scrollTop;
            }
            if (targetScrollTop !== curScrollTop) {
                this.run('preview', targetScrollTop, curScrollTop);
            }
        };
        ScrollSync.prototype.getResolvedScrollTop = function (from, scrollTop, targetScrollTop, curScrollTop) {
            var latestScrollTop = from === 'editor' ? this.latestEditorScrollTop : this.latestPreviewScrollTop;
            if (latestScrollTop === null) {
                return targetScrollTop;
            }
            return latestScrollTop < scrollTop
                ? Math.max(targetScrollTop, curScrollTop)
                : Math.min(targetScrollTop, curScrollTop);
        };
        ScrollSync.prototype.run = function (from, targetScrollTop, curScrollTop) {
            var _this = this;
            var scrollTarget;
            if (from === 'editor') {
                scrollTarget = this.previewEl;
                this.blockedScroll = 'preview';
            }
            else {
                scrollTarget = this.editorView.dom;
                this.blockedScroll = 'editor';
            }
            var syncCallbacks = {
                syncScrollTop: function (scrollTop) { return (scrollTarget.scrollTop = scrollTop); },
                releaseEventBlock: function () { return (_this.blockedScroll = null); },
            };
            animate(curScrollTop, targetScrollTop, syncCallbacks);
        };
        ScrollSync.prototype.destroy = function () {
            this.eventEmitter.removeEventHandler('scroll');
            this.eventEmitter.removeEventHandler('afterPreviewRender');
        };
        return ScrollSync;
    }());

    /**
     * ToastUIEditorCore
     * @param {Object} options Option object
     *     @param {HTMLElement} options.el - container element
     *     @param {string} [options.height='300px'] - Editor's height style value. Height is applied as border-box ex) '300px', '100%', 'auto'
     *     @param {string} [options.minHeight='200px'] - Editor's min-height style value in pixel ex) '300px'
     *     @param {string} [options.initialValue] - Editor's initial value
     *     @param {string} [options.previewStyle] - Markdown editor's preview style (tab, vertical)
     *     @param {boolean} [options.previewHighlight = true] - Highlight a preview element corresponds to the cursor position in the markdown editor
     *     @param {string} [options.initialEditType] - Initial editor type (markdown, wysiwyg)
     *     @param {Object} [options.events] - Events
     *         @param {function} [options.events.load] - It would be emitted when editor fully load
     *         @param {function} [options.events.change] - It would be emitted when content changed
     *         @param {function} [options.events.caretChange] - It would be emitted when format change by cursor position
     *         @param {function} [options.events.focus] - It would be emitted when editor get focus
     *         @param {function} [options.events.blur] - It would be emitted when editor loose focus
     *         @param {function} [options.events.keydown] - It would be emitted when the key is pressed in editor
     *         @param {function} [options.events.keyup] - It would be emitted when the key is released in editor
     *         @param {function} [options.events.beforePreviewRender] - It would be emitted before rendering the markdown preview with html string
     *         @param {function} [options.events.beforeConvertWysiwygToMarkdown] - It would be emitted before converting wysiwyg to markdown with markdown text
     *     @param {Object} [options.hooks] - Hooks
     *         @param {addImageBlobHook} [options.hooks.addImageBlobHook] - hook for image upload
     *     @param {string} [options.language='en-US'] - language
     *     @param {boolean} [options.useCommandShortcut=true] - whether use keyboard shortcuts to perform commands
     *     @param {boolean} [options.usageStatistics=true] - send hostname to google analytics
     *     @param {Array.<string|toolbarItemsValue>} [options.toolbarItems] - toolbar items.
     *     @param {boolean} [options.hideModeSwitch=false] - hide mode switch tab bar
     *     @param {Array.<function|Array>} [options.plugins] - Array of plugins. A plugin can be either a function or an array in the form of [function, options].
     *     @param {Object} [options.extendedAutolinks] - Using extended Autolinks specified in GFM spec
     *     @param {string} [options.placeholder] - The placeholder text of the editable element.
     *     @param {Object} [options.linkAttributes] - Attributes of anchor element that should be rel, target, hreflang, type
     *     @param {Object} [options.customHTMLRenderer=null] - Object containing custom renderer functions correspond to change markdown node to preview HTML or wysiwyg node
     *     @param {Object} [options.customMarkdownRenderer=null] - Object containing custom renderer functions correspond to change wysiwyg node to markdown text
     *     @param {boolean} [options.referenceDefinition=false] - whether use the specification of link reference definition
     *     @param {function} [options.customHTMLSanitizer=null] - custom HTML sanitizer
     *     @param {boolean} [options.previewHighlight=false] - whether highlight preview area
     *     @param {boolean} [options.frontMatter=false] - whether use the front matter
     *     @param {Array.<object>} [options.widgetRules=[]] - The rules for replacing the text with widget node
     *     @param {string} [options.theme] - The theme to style the editor with. The default is included in toastui-editor.css.
     */
    var ToastUIEditorCore = /** @class */ (function () {
        function ToastUIEditorCore(options) {
            var _this = this;
            this.initialHtml = options.el.innerHTML;
            options.el.innerHTML = '';
            this.options = extend_1({
                previewStyle: 'tab',
                previewHighlight: true,
                initialEditType: 'markdown',
                height: '300px',
                minHeight: '200px',
                language: 'en-US',
                useCommandShortcut: true,
                usageStatistics: true,
                toolbarItems: [
                    ['heading', 'bold', 'italic', 'strike'],
                    ['hr', 'quote'],
                    ['ul', 'ol', 'task', 'indent', 'outdent'],
                    ['table', 'image', 'link'],
                    ['code', 'codeblock'],
                    ['scrollSync'],
                ],
                hideModeSwitch: false,
                linkAttributes: null,
                extendedAutolinks: false,
                customHTMLRenderer: null,
                customMarkdownRenderer: null,
                referenceDefinition: false,
                customHTMLSanitizer: null,
                frontMatter: false,
                widgetRules: [],
                theme: 'light',
            }, options);
            var _a = this.options, customHTMLRenderer = _a.customHTMLRenderer, extendedAutolinks = _a.extendedAutolinks, referenceDefinition = _a.referenceDefinition, frontMatter = _a.frontMatter, customMarkdownRenderer = _a.customMarkdownRenderer, useCommandShortcut = _a.useCommandShortcut, initialEditType = _a.initialEditType, widgetRules = _a.widgetRules, customHTMLSanitizer = _a.customHTMLSanitizer;
            this.mode = initialEditType || 'markdown';
            this.mdPreviewStyle = this.options.previewStyle;
            this.eventEmitter = new EventEmitter();
            setWidgetRules(widgetRules);
            var linkAttributes = sanitizeLinkAttribute(this.options.linkAttributes);
            this.pluginInfo = getPluginInfo(this.options.plugins, this.eventEmitter, this.options.usageStatistics);
            var _b = this.pluginInfo, toHTMLRenderers = _b.toHTMLRenderers, toMarkdownRenderers = _b.toMarkdownRenderers, mdPlugins = _b.mdPlugins, wwPlugins = _b.wwPlugins, wwNodeViews = _b.wwNodeViews, mdCommands = _b.mdCommands, wwCommands = _b.wwCommands, markdownParsers = _b.markdownParsers;
            var rendererOptions = {
                linkAttributes: linkAttributes,
                customHTMLRenderer: deepMergedCopy(toHTMLRenderers, customHTMLRenderer),
                extendedAutolinks: extendedAutolinks,
                referenceDefinition: referenceDefinition,
                frontMatter: frontMatter,
                sanitizer: customHTMLSanitizer || sanitizeHTML,
            };
            var wwToDOMAdaptor = new WwToDOMAdaptor(linkAttributes, rendererOptions.customHTMLRenderer);
            var htmlSchemaMap = createHTMLSchemaMap(rendererOptions.customHTMLRenderer, rendererOptions.sanitizer, wwToDOMAdaptor);
            this.i18n = i18n;
            this.i18n.setCode(this.options.language);
            this.toastMark = new ToastMark('', {
                disallowedHtmlBlockTags: ['br', 'img'],
                extendedAutolinks: extendedAutolinks,
                referenceDefinition: referenceDefinition,
                disallowDeepHeading: true,
                frontMatter: frontMatter,
                customParser: markdownParsers,
            });
            this.mdEditor = new MdEditor(this.eventEmitter, {
                toastMark: this.toastMark,
                useCommandShortcut: useCommandShortcut,
                mdPlugins: mdPlugins,
            });
            this.preview = new MarkdownPreview(this.eventEmitter, __assign$1(__assign$1({}, rendererOptions), { isViewer: false, highlight: this.options.previewHighlight }));
            this.wwEditor = new WysiwygEditor(this.eventEmitter, {
                toDOMAdaptor: wwToDOMAdaptor,
                useCommandShortcut: useCommandShortcut,
                htmlSchemaMap: htmlSchemaMap,
                linkAttributes: linkAttributes,
                wwPlugins: wwPlugins,
                wwNodeViews: wwNodeViews,
            });
            this.convertor = new Convertor(this.wwEditor.getSchema(), __assign$1(__assign$1({}, toMarkdownRenderers), customMarkdownRenderer), getHTMLRenderConvertors(linkAttributes, rendererOptions.customHTMLRenderer), this.eventEmitter);
            this.setMinHeight(this.options.minHeight);
            this.setHeight(this.options.height);
            this.setMarkdown(this.options.initialValue, false);
            if (this.options.placeholder) {
                this.setPlaceholder(this.options.placeholder);
            }
            if (!this.options.initialValue) {
                this.setHTML(this.initialHtml, false);
            }
            this.commandManager = new CommandManager(this.eventEmitter, this.mdEditor.commands, this.wwEditor.commands, function () { return _this.mode; });
            if (this.options.usageStatistics) {
                sendHostName();
            }
            this.scrollSync = new ScrollSync(this.mdEditor, this.preview, this.eventEmitter);
            this.addInitEvent();
            this.addInitCommand(mdCommands, wwCommands);
            if (this.options.hooks) {
                forEachOwnProperties_1(this.options.hooks, function (fn, key) { return _this.addHook(key, fn); });
            }
            if (this.options.events) {
                forEachOwnProperties_1(this.options.events, function (fn, key) { return _this.on(key, fn); });
            }
            this.eventEmitter.emit('load', this);
            this.moveCursorToStart();
        }
        ToastUIEditorCore.prototype.addInitEvent = function () {
            this.on('needChangeMode', this.changeMode.bind(this));
            addDefaultImageBlobHook(this.eventEmitter);
        };
        ToastUIEditorCore.prototype.addInitCommand = function (mdCommands, wwCommands) {
            var _this = this;
            var addPluginCommands = function (type, commandMap) {
                Object.keys(commandMap).forEach(function (name) {
                    _this.addCommand(type, name, commandMap[name]);
                });
            };
            this.addCommand('markdown', 'toggleScrollSync', function (payload) {
                _this.eventEmitter.emit('toggleScrollSync', payload.active);
                return true;
            });
            addPluginCommands('markdown', mdCommands);
            addPluginCommands('wysiwyg', wwCommands);
        };
        ToastUIEditorCore.prototype.getCurrentModeEditor = function () {
            return (this.isMarkdownMode() ? this.mdEditor : this.wwEditor);
        };
        /**
         * Factory method for Editor
         * @param {object} options Option for initialize TUIEditor
         * @returns {object} ToastUIEditorCore or ToastUIEditorViewer
         */
        ToastUIEditorCore.factory = function (options) {
            return options.viewer ? new ToastUIEditorViewer(options) : new ToastUIEditorCore(options);
        };
        /**
         * Set language
         * @param {string|string[]} code - code for I18N language
         * @param {object} data - language set
         */
        ToastUIEditorCore.setLanguage = function (code, data) {
            i18n.setLanguage(code, data);
        };
        /**
         * change preview style
         * @param {string} style - 'tab'|'vertical'
         */
        ToastUIEditorCore.prototype.changePreviewStyle = function (style) {
            if (this.mdPreviewStyle !== style) {
                this.mdPreviewStyle = style;
                this.eventEmitter.emit('changePreviewStyle', style);
            }
        };
        /**
         * execute editor command
         * @param {string} name - command name
         * @param {object} [payload] - payload for command
         */
        ToastUIEditorCore.prototype.exec = function (name, payload) {
            this.commandManager.exec(name, payload);
        };
        /**
         * @param {string} type - editor type
         * @param {string} name - command name
         * @param {function} command - command handler
         */
        ToastUIEditorCore.prototype.addCommand = function (type, name, command) {
            var _this = this;
            var commandHoc = function (paylaod) {
                if (paylaod === void 0) { paylaod = {}; }
                var view = (type === 'markdown' ? _this.mdEditor : _this.wwEditor).view;
                command(paylaod, view.state, view.dispatch, view);
            };
            this.commandManager.addCommand(type, name, commandHoc);
        };
        /**
         * Bind eventHandler to event type
         * @param {string} type Event type
         * @param {function} handler Event handler
         */
        ToastUIEditorCore.prototype.on = function (type, handler) {
            this.eventEmitter.listen(type, handler);
        };
        /**
         * Unbind eventHandler from event type
         * @param {string} type Event type
         */
        ToastUIEditorCore.prototype.off = function (type) {
            this.eventEmitter.removeEventHandler(type);
        };
        /**
         * Add hook to TUIEditor event
         * @param {string} type Event type
         * @param {function} handler Event handler
         */
        ToastUIEditorCore.prototype.addHook = function (type, handler) {
            this.eventEmitter.removeEventHandler(type);
            this.eventEmitter.listen(type, handler);
        };
        /**
         * Remove hook from TUIEditor event
         * @param {string} type Event type
         */
        ToastUIEditorCore.prototype.removeHook = function (type) {
            this.eventEmitter.removeEventHandler(type);
        };
        /**
         * Set focus to current Editor
         */
        ToastUIEditorCore.prototype.focus = function () {
            this.getCurrentModeEditor().focus();
        };
        /**
         * Remove focus of current Editor
         */
        ToastUIEditorCore.prototype.blur = function () {
            this.getCurrentModeEditor().blur();
        };
        /**
         * Set cursor position to end
         */
        ToastUIEditorCore.prototype.moveCursorToEnd = function () {
            this.getCurrentModeEditor().moveCursorToEnd();
        };
        /**
         * Set cursor position to start
         */
        ToastUIEditorCore.prototype.moveCursorToStart = function () {
            this.getCurrentModeEditor().moveCursorToStart();
        };
        /**
         * Set markdown syntax text.
         * @param {string} markdown - markdown syntax text.
         * @param {boolean} [cursorToEnd=true] - move cursor to contents end
         */
        ToastUIEditorCore.prototype.setMarkdown = function (markdown, cursorToEnd) {
            if (markdown === void 0) { markdown = ''; }
            if (cursorToEnd === void 0) { cursorToEnd = true; }
            this.mdEditor.setMarkdown(markdown, cursorToEnd);
            if (this.isWysiwygMode()) {
                var mdNode = this.toastMark.getRootNode();
                var wwNode = this.convertor.toWysiwygModel(mdNode);
                this.wwEditor.setModel(wwNode, cursorToEnd);
            }
        };
        /**
         * Set html value.
         * @param {string} html - html syntax text
         * @param {boolean} [cursorToEnd=true] - move cursor to contents end
         */
        ToastUIEditorCore.prototype.setHTML = function (html, cursorToEnd) {
            if (html === void 0) { html = ''; }
            if (cursorToEnd === void 0) { cursorToEnd = true; }
            var container = document.createElement('div');
            // the `br` tag should be replaced with empty block to separate between blocks
            container.innerHTML = replaceBRWithEmptyBlock(html);
            var wwNode = DOMParser.fromSchema(this.wwEditor.schema).parse(container);
            if (this.isMarkdownMode()) {
                this.mdEditor.setMarkdown(this.convertor.toMarkdownText(wwNode), cursorToEnd);
            }
            else {
                this.wwEditor.setModel(wwNode, cursorToEnd);
            }
        };
        /**
         * Get content to markdown
         * @returns {string} markdown text
         */
        ToastUIEditorCore.prototype.getMarkdown = function () {
            if (this.isMarkdownMode()) {
                return this.mdEditor.getMarkdown();
            }
            return this.convertor.toMarkdownText(this.wwEditor.getModel());
        };
        /**
         * Get content to html
         * @returns {string} html string
         */
        ToastUIEditorCore.prototype.getHTML = function () {
            var _this = this;
            this.eventEmitter.holdEventInvoke(function () {
                if (_this.isWysiwygMode()) {
                    _this.mdEditor.setMarkdown(_this.convertor.toMarkdownText(_this.wwEditor.getModel()));
                }
            });
            var mdNode = this.toastMark.getRootNode();
            var mdRenderer = this.preview.getRenderer();
            return mdRenderer
                .render(mdNode)
                .replace(/\sdata-nodeid="\d{1,}"/g, '')
                .trim();
        };
        /**
         * Insert text
         * @param {string} text - text content
         */
        ToastUIEditorCore.prototype.insertText = function (text) {
            this.getCurrentModeEditor().replaceSelection(text);
        };
        /**
         * Set selection range
         * @param {number|Array.<number>} start - start position
         * @param {number|Array.<number>} end - end position
         */
        ToastUIEditorCore.prototype.setSelection = function (start, end) {
            this.getCurrentModeEditor().setSelection(start, end);
        };
        /**
         * Replace selection range with given text content
         * @param {string} text - text content
         * @param {number|Array.<number>} [start] - start position
         * @param {number|Array.<number>} [end] - end position
         */
        ToastUIEditorCore.prototype.replaceSelection = function (text, start, end) {
            this.getCurrentModeEditor().replaceSelection(text, start, end);
        };
        /**
         * Delete the content of selection range
         * @param {number|Array.<number>} [start] - start position
         * @param {number|Array.<number>} [end] - end position
         */
        ToastUIEditorCore.prototype.deleteSelection = function (start, end) {
            this.getCurrentModeEditor().deleteSelection(start, end);
        };
        /**
         * Get selected text content
         * @param {number|Array.<number>} [start] - start position
         * @param {number|Array.<number>} [end] - end position
         * @returns {string} - selected text content
         */
        ToastUIEditorCore.prototype.getSelectedText = function (start, end) {
            return this.getCurrentModeEditor().getSelectedText(start, end);
        };
        /**
         * Get range of the node
         * @param {number|Array.<number>} [pos] - position
         * @returns {Array.<number[]>|Array.<number>} - node [start, end] range
         * @example
         * // Markdown mode
         * const rangeInfo = editor.getRangeInfoOfNode();
         *
         * console.log(rangeInfo); // { range: [[startLineOffset, startCurorOffset], [endLineOffset, endCurorOffset]], type: 'emph' }
         *
         * // WYSIWYG mode
         * const rangeInfo = editor.getRangeInfoOfNode();
         *
         * console.log(rangeInfo); // { range: [startCursorOffset, endCursorOffset], type: 'emph' }
         */
        ToastUIEditorCore.prototype.getRangeInfoOfNode = function (pos) {
            return this.getCurrentModeEditor().getRangeInfoOfNode(pos);
        };
        /**
         * Add widget to selection
         * @param {Node} node - widget node
         * @param {string} style - Adding style "top" or "bottom"
         * @param {number|Array.<number>} [pos] - position
         */
        ToastUIEditorCore.prototype.addWidget = function (node, style, pos) {
            this.getCurrentModeEditor().addWidget(node, style, pos);
        };
        /**
         * Replace node with widget to range
         * @param {number|Array.<number>} start - start position
         * @param {number|Array.<number>} end - end position
         * @param {string} text - widget text content
         */
        ToastUIEditorCore.prototype.replaceWithWidget = function (start, end, text) {
            this.getCurrentModeEditor().replaceWithWidget(start, end, text);
        };
        /**
         * Set editor height
         * @param {string} height - editor height in pixel
         */
        ToastUIEditorCore.prototype.setHeight = function (height) {
            var el = this.options.el;
            if (isString_1(height)) {
                if (height === 'auto') {
                    addClass_1(el, 'auto-height');
                    this.setMinHeight(this.getMinHeight());
                }
                else {
                    removeClass_1(el, 'auto-height');
                    this.setMinHeight(height);
                }
            }
            css_1(el, { height: height });
            this.height = height;
        };
        /**
         * Get editor height
         * @returns {string} editor height in pixel
         */
        ToastUIEditorCore.prototype.getHeight = function () {
            return this.height;
        };
        /**
         * Set minimum height to editor content
         * @param {string} minHeight - min content height in pixel
         */
        ToastUIEditorCore.prototype.setMinHeight = function (minHeight) {
            var _a;
            this.minHeight = minHeight;
            var editorHeight = this.options.el.clientHeight;
            var editorSectionHeight = ((_a = document.querySelector("." + cls('main'))) === null || _a === void 0 ? void 0 : _a.clientHeight) || 0;
            var diffHeight = editorHeight - editorSectionHeight;
            var minHeightNum = parseInt(minHeight, 10);
            minHeightNum = Math.max(minHeightNum - diffHeight, 0);
            this.wwEditor.setMinHeight(minHeightNum);
            this.mdEditor.setMinHeight(minHeightNum);
            this.preview.setMinHeight(minHeightNum);
        };
        /**
         * Get minimum height of editor content
         * @returns {string} min height in pixel
         */
        ToastUIEditorCore.prototype.getMinHeight = function () {
            return this.minHeight;
        };
        /**
         * Return true if current editor mode is Markdown
         * @returns {boolean}
         */
        ToastUIEditorCore.prototype.isMarkdownMode = function () {
            return this.mode === 'markdown';
        };
        /**
         * Return true if current editor mode is WYSIWYG
         * @returns {boolean}
         */
        ToastUIEditorCore.prototype.isWysiwygMode = function () {
            return this.mode === 'wysiwyg';
        };
        /**
         * Return false
         * @returns {boolean}
         */
        ToastUIEditorCore.prototype.isViewer = function () {
            return false;
        };
        /**
         * Get current Markdown editor's preview style
         * @returns {string}
         */
        ToastUIEditorCore.prototype.getCurrentPreviewStyle = function () {
            return this.mdPreviewStyle;
        };
        /**
         * Change editor's mode to given mode string
         * @param {string} mode - Editor mode name of want to change
         * @param {boolean} [withoutFocus] - Change mode without focus
         */
        ToastUIEditorCore.prototype.changeMode = function (mode, withoutFocus) {
            if (this.mode === mode) {
                return;
            }
            this.mode = mode;
            if (this.isWysiwygMode()) {
                var mdNode = this.toastMark.getRootNode();
                var wwNode = this.convertor.toWysiwygModel(mdNode);
                this.wwEditor.setModel(wwNode);
            }
            else {
                var wwNode = this.wwEditor.getModel();
                this.mdEditor.setMarkdown(this.convertor.toMarkdownText(wwNode), !withoutFocus);
            }
            this.eventEmitter.emit('removePopupWidget');
            this.eventEmitter.emit('changeMode', mode);
            if (!withoutFocus) {
                var pos = this.convertor.getMappedPos();
                this.focus();
                if (this.isWysiwygMode() && isNumber_1(pos)) {
                    this.wwEditor.setSelection(pos);
                }
                else if (Array.isArray(pos)) {
                    this.mdEditor.setSelection(pos);
                }
            }
        };
        /**
         * Destroy TUIEditor from document
         */
        ToastUIEditorCore.prototype.destroy = function () {
            var _this = this;
            this.wwEditor.destroy();
            this.mdEditor.destroy();
            this.preview.destroy();
            this.scrollSync.destroy();
            this.eventEmitter.emit('destroy');
            this.eventEmitter.getEvents().forEach(function (_, type) { return _this.off(type); });
        };
        /**
         * Hide TUIEditor
         */
        ToastUIEditorCore.prototype.hide = function () {
            this.eventEmitter.emit('hide');
        };
        /**
         * Show TUIEditor
         */
        ToastUIEditorCore.prototype.show = function () {
            this.eventEmitter.emit('show');
        };
        /**
         * Move on scroll position of the editor container
         * @param {number} value scrollTop value of editor container
         */
        ToastUIEditorCore.prototype.setScrollTop = function (value) {
            this.getCurrentModeEditor().setScrollTop(value);
        };
        /**
         * Get scroll position value of editor container
         * @returns {number} scrollTop value of editor container
         */
        ToastUIEditorCore.prototype.getScrollTop = function () {
            return this.getCurrentModeEditor().getScrollTop();
        };
        /**
         * Reset TUIEditor
         */
        ToastUIEditorCore.prototype.reset = function () {
            this.wwEditor.setModel([]);
            this.mdEditor.setMarkdown('');
        };
        /**
         * Get current selection range
         * @returns {Array.<number[]>|Array.<number>} Returns the range of the selection depending on the editor mode
         * @example
         * // Markdown mode
         * const mdSelection = editor.getSelection();
         *
         * console.log(mdSelection); // [[startLineOffset, startCurorOffset], [endLineOffset, endCurorOffset]]
         *
         * // WYSIWYG mode
         * const wwSelection = editor.getSelection();
         *
         * console.log(wwSelection); // [startCursorOffset, endCursorOffset]
         */
        ToastUIEditorCore.prototype.getSelection = function () {
            return this.getCurrentModeEditor().getSelection();
        };
        /**
         * Set the placeholder on all editors
         * @param {string} placeholder - placeholder to set
         */
        ToastUIEditorCore.prototype.setPlaceholder = function (placeholder) {
            this.mdEditor.setPlaceholder(placeholder);
            this.wwEditor.setPlaceholder(placeholder);
        };
        /**
         * Get markdown editor, preview, wysiwyg editor DOM elements
         */
        ToastUIEditorCore.prototype.getEditorElements = function () {
            return {
                mdEditor: this.mdEditor.getElement(),
                mdPreview: this.preview.getElement(),
                wwEditor: this.wwEditor.getElement(),
            };
        };
        return ToastUIEditorCore;
    }());

    // @TODO: change syntax with our convention
    /* eslint-disable */
    function html$1 (n) {
      for (
        var l,
          e,
          s = arguments,
          t = 1,
          r = '',
          u = '',
          a = [0],
          c = function (n) {
            t === 1 && (n || (r = r.replace(/^\s*\n\s*|\s*\n\s*$/g, '')))
              ? a.push(n ? s[n] : r)
              : t === 3 && (n || r)
              ? ((a[1] = n ? s[n] : r), (t = 2))
              : t === 2 && r === '...' && n
              ? (a[2] = assign(a[2] || {}, s[n]))
              : t === 2 && r && !n
              ? ((a[2] = a[2] || {})[r] = !0)
              : t >= 5 &&
                (t === 5
                  ? (((a[2] = a[2] || {})[e] = n ? (r ? r + s[n] : s[n]) : r), (t = 6))
                  : (n || r) && (a[2][e] += n ? r + s[n] : r)),
              (r = '');
          },
          h = 0;
        h < n.length;
        h++
      ) {
        h && (t === 1 && c(), c(h));
        for (let i = 0; i < n[h].length; i++)
          (l = n[h][i]),
            t === 1
              ? l === '<'
                ? (c(), (a = [a, '', null]), (t = 3))
                : (r += l)
              : t === 4
              ? r === '--' && l === '>'
                ? ((t = 1), (r = ''))
                : (r = l + r[0])
              : u
              ? l === u
                ? (u = '')
                : (r += l)
              : l === '"' || l === "'"
              ? (u = l)
              : l === '>'
              ? (c(), (t = 1))
              : t &&
                (l === '='
                  ? ((t = 5), (e = r), (r = ''))
                  : l === '/' && (t < 5 || n[h][i + 1] === '>')
                  ? (c(),
                    t === 3 && (a = a[0]),
                    (t = a),
                    (a = a[0]).push(this.apply(null, t.slice(1))),
                    (t = 0))
                  : l === ' ' || l === '\t' || l === '\n' || l === '\r'
                  ? (c(), (t = 2))
                  : (r += l)),
            t === 3 && r === '!--' && ((t = 4), (a = a[0]));
      }
      return c(), a.length > 2 ? a.slice(1) : a[1];
    }

    /**
     * @fileoverview Check whether the given variable is a string or not.
     * @author NHN FE Development Lab <dl_javascript@nhn.com>
     */

    /**
     * Check whether the given variable is a boolean or not.
     *  If the given variable is a boolean, return true.
     * @param {*} obj - Target for checking
     * @returns {boolean} Is boolean?
     * @memberof module:type
     */
    function isBoolean(obj) {
      return typeof obj === 'boolean' || obj instanceof Boolean;
    }

    var isBoolean_1 = isBoolean;

    var VNodeWalker = /** @class */ (function () {
        function VNodeWalker(current) {
            this.current = current;
            this.root = current;
            this.entering = true;
        }
        VNodeWalker.prototype.walk = function () {
            var _a = this, entering = _a.entering, cur = _a.current;
            if (!cur) {
                return null;
            }
            if (entering) {
                if (cur.firstChild) {
                    this.current = cur.firstChild;
                    this.entering = true;
                }
                else {
                    this.entering = false;
                }
            }
            else if (cur === this.root) {
                this.current = null;
            }
            else if (cur.next) {
                this.current = cur.next;
                this.entering = true;
            }
            else {
                this.current = cur.parent;
                this.entering = false;
            }
            return { vnode: cur, entering: entering };
        };
        return VNodeWalker;
    }());
    var VNode = /** @class */ (function () {
        function VNode(type, props, children) {
            this.parent = null;
            this.old = null;
            this.firstChild = null;
            this.next = null;
            this.skip = false;
            this.type = type;
            this.props = props;
            this.children = children;
            this.props.children = children;
            if (props.ref) {
                this.ref = props.ref;
                delete props.ref;
            }
            if (props.key) {
                this.key = props.key;
                delete props.key;
            }
        }
        VNode.prototype.walker = function () {
            return new VNodeWalker(this);
        };
        VNode.removalNodes = [];
        return VNode;
    }());

    function createTextNode(text) {
        return new VNode('TEXT_NODE', { nodeValue: text }, []);
    }
    function excludeUnnecessaryChild(child, flatted) {
        var vnode = child;
        // eslint-disable-next-line no-eq-null,eqeqeq
        if (isBoolean_1(child) || child == null) {
            vnode = null;
        }
        else if (isString_1(child) || isNumber_1(child)) {
            vnode = createTextNode(String(child));
        }
        if (vnode) {
            flatted.push(vnode);
        }
    }
    function h(type, props) {
        var children = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            children[_i - 2] = arguments[_i];
        }
        var flatted = [];
        children.forEach(function (child) {
            if (Array.isArray(child)) {
                child.forEach(function (vnode) {
                    excludeUnnecessaryChild(vnode, flatted);
                });
            }
            else {
                excludeUnnecessaryChild(child, flatted);
            }
        });
        return new VNode(type, props || {}, flatted);
    }
    // @ts-ignore
    var html = html$1.bind(h);

    /**
     * @fileoverview Check whether the given variable is an object or not.
     * @author NHN FE Development Lab <dl_javascript@nhn.com>
     */

    /**
     * Check whether the given variable is an object or not.
     * If the given variable is an object, return true.
     * @param {*} obj - Target for checking
     * @returns {boolean} Is object?
     * @memberof module:type
     */
    function isObject(obj) {
      return obj === Object(obj);
    }

    var isObject_1 = isObject;

    // @TODO: clearfy the type definition for CSSDeclaration
    function createNode(vnode) {
        var node;
        if (vnode.type === 'TEXT_NODE') {
            node = document.createTextNode(vnode.props.nodeValue);
        }
        else {
            node = document.createElement(vnode.type);
            setProps(node, {}, vnode.props);
        }
        return node;
    }
    function removeNode(vnode, parentNode) {
        if (vnode.node) {
            parentNode.removeChild(vnode.node);
        }
        else {
            removeNode(vnode.firstChild, parentNode);
        }
    }
    function innerDiff(node, prevProps, nextProps) {
        Object.keys(prevProps).forEach(function (propName) {
            if (/^on/.test(propName)) {
                if (!nextProps[propName] || prevProps[propName] !== nextProps[propName]) {
                    var eventName = propName.slice(2).toLowerCase();
                    node.removeEventListener(eventName, prevProps[propName]);
                }
            }
            else if (propName !== 'children' && !nextProps[propName] && !isTextNode(node)) {
                node.removeAttribute(propName);
            }
        });
        setProps(node, prevProps, nextProps, function (propName) { return !shallowEqual(prevProps[propName], nextProps[propName]); });
    }
    var reNonDimension = /acit|ex(?:s|g|n|p|$)|rph|ows|mnc|ntw|ine[ch]|zoo|^ord/i;
    function setProps(node, prevProps, props, condition) {
        Object.keys(props).forEach(function (propName) {
            if (!condition || condition(propName)) {
                if (/^on/.test(propName)) {
                    var eventName = propName.slice(2).toLowerCase();
                    node.addEventListener(eventName, props[propName]);
                }
                else if (propName === 'nodeValue') {
                    node[propName] = props[propName];
                }
                else if (propName === 'style' && isObject_1(props[propName])) {
                    setStyleProps(node, prevProps[propName], props[propName]);
                }
                else if (propName !== 'children') {
                    if (props[propName] === false) {
                        node.removeAttribute(propName);
                    }
                    else {
                        node.setAttribute(propName, props[propName]);
                    }
                }
            }
        });
    }
    function setStyleProps(node, prevStyleProps, styleProps) {
        if (prevStyleProps) {
            Object.keys(prevStyleProps).forEach(function (styleProp) {
                // @ts-ignore
                node.style[styleProp] = '';
            });
        }
        Object.keys(styleProps).forEach(function (styleProp) {
            var value = styleProps[styleProp];
            // @ts-ignore
            node.style[styleProp] =
                isNumber_1(value) && !reNonDimension.test(styleProp) ? value + "px" : value;
        });
    }

    function commit(vnode) {
        VNode.removalNodes.forEach(function (removalNode) { return diff(removalNode); });
        if (vnode) {
            var next = void 0;
            var walker = vnode.walker();
            while ((next = walker.walk())) {
                vnode = next.vnode;
                if (next.entering) {
                    diff(vnode);
                }
                else if (isFunction_1(vnode.type)) {
                    var comp = vnode.component;
                    // lifecycle method
                    if (!vnode.old && comp.mounted) {
                        comp.mounted();
                    }
                    if (vnode.old && comp.updated) {
                        var prevProps = comp.prevProps || {};
                        comp.updated(prevProps);
                    }
                }
            }
        }
    }
    function getParentNode(vnode) {
        var parent = vnode.parent;
        while (!parent.node) {
            parent = parent.parent;
        }
        return parent.node;
    }
    function diff(vnode) {
        if (!vnode || !vnode.parent) {
            return;
        }
        if (vnode.node) {
            var parentNode = getParentNode(vnode);
            if (vnode.effect === 'A') {
                parentNode.appendChild(vnode.node);
            }
            else if (vnode.effect === 'U') {
                innerDiff(vnode.node, vnode.old.props, vnode.props);
            }
        }
        if (vnode.effect === 'D') {
            var next = void 0;
            var walker = vnode.walker();
            while ((next = walker.walk())) {
                vnode = next.vnode;
                if (!next.entering) {
                    if (isFunction_1(vnode.type)) {
                        var comp = vnode.component;
                        // lifecycle method
                        if (comp.beforeDestroy) {
                            comp.beforeDestroy();
                        }
                    }
                    else {
                        var parentNode = getParentNode(vnode);
                        removeNode(vnode, parentNode);
                    }
                }
            }
        }
        // apply ref
        if (vnode.ref) {
            if (vnode.component) {
                vnode.ref(vnode.component);
            }
            else if (vnode.node) {
                vnode.ref(vnode.node);
            }
        }
    }

    function createComponent(Comp, vnode) {
        var props = vnode.props, component = vnode.component;
        if (component) {
            component.prevProps = component.props;
            component.props = vnode.props;
            return component;
        }
        return new Comp(props);
    }
    function buildVNode(vnode) {
        var root = vnode;
        while (vnode && !vnode.skip) {
            if (isFunction_1(vnode.type)) {
                var instance = createComponent(vnode.type, vnode);
                instance.vnode = vnode;
                vnode.component = instance;
                vnode.props.children = vnode.children = [instance.render()];
                buildChildrenVNode(vnode);
            }
            else {
                if (!vnode.node) {
                    vnode.node = createNode(vnode);
                }
                buildChildrenVNode(vnode);
            }
            if (vnode.firstChild) {
                vnode = vnode.firstChild;
            }
            else {
                while (vnode && vnode.parent && !vnode.next) {
                    vnode = vnode.parent;
                    if (vnode === root) {
                        break;
                    }
                }
                vnode = vnode.next;
            }
        }
    }
    function isSameType(old, vnode) {
        return old && vnode && vnode.type === old.type && (!vnode.key || vnode.key === old.key);
    }
    // @TODO: add key diff algorithm
    function buildChildrenVNode(parent) {
        var children = parent.children;
        var old = parent.old ? parent.old.firstChild : null;
        var prev = null;
        children.forEach(function (vnode, index) {
            var sameType = isSameType(old, vnode);
            if (sameType) {
                vnode.old = old;
                vnode.parent = parent;
                vnode.node = old.node;
                vnode.component = old.component;
                vnode.effect = 'U';
            }
            if (vnode && !sameType) {
                vnode.old = null;
                vnode.parent = parent;
                vnode.node = null;
                vnode.effect = 'A';
            }
            if (old && !sameType) {
                VNode.removalNodes.push(old);
                old.effect = 'D';
            }
            if (old) {
                old = old.next;
            }
            if (index === 0) {
                parent.firstChild = vnode;
            }
            else if (vnode) {
                prev.next = vnode;
            }
            prev = vnode;
        });
        var lastChild = last$1(children);
        if (!children.length) {
            while (old) {
                VNode.removalNodes.push(old);
                old.effect = 'D';
                old = old.next;
            }
        }
        while (old && lastChild) {
            if (old && lastChild.old !== old) {
                VNode.removalNodes.push(old);
                old.effect = 'D';
                old = old.next;
            }
        }
    }

    function destroy(vnode) {
        vnode.effect = 'D';
        VNode.removalNodes = [vnode];
        commit();
        VNode.removalNodes = [];
    }
    function rerender(comp) {
        var root = comp.vnode;
        root.effect = 'U';
        root.old = root;
        // skip for unnecessary reconciliation
        if (root.next) {
            root.next.skip = true;
        }
        VNode.removalNodes = [];
        buildVNode(root);
        commit(root);
        if (root.next) {
            root.next.skip = false;
        }
    }
    function render(container, vnode) {
        var root = new VNode(container.tagName.toLowerCase(), {}, [vnode]);
        root.node = container;
        VNode.removalNodes = [];
        buildVNode(root);
        commit(root);
        return function () { return destroy(root.firstChild); };
    }

    var Component = /** @class */ (function () {
        function Component(props) {
            this.props = props;
            this.state = {};
            this.refs = {};
        }
        Component.prototype.setState = function (state) {
            var newState = __assign$1(__assign$1({}, this.state), state);
            if (!shallowEqual(this.state, newState)) {
                this.state = newState;
                rerender(this);
            }
        };
        return Component;
    }());

    var Switch = /** @class */ (function (_super) {
        __extends$1(Switch, _super);
        function Switch(props) {
            var _this = _super.call(this, props) || this;
            _this.state = {
                hide: false,
            };
            return _this;
        }
        Switch.prototype.show = function () {
            this.setState({ hide: false });
        };
        Switch.prototype.hide = function () {
            this.setState({ hide: true });
        };
        Switch.prototype.render = function () {
            var _a = this.props, editorType = _a.editorType, eventEmitter = _a.eventEmitter;
            return html(templateObject_1$h || (templateObject_1$h = __makeTemplateObject(["\n      <div class=\"", "\" style=\"display: ", "\">\n        <div\n          class=\"tab-item", "\"\n          onClick=", "\n        >\n          ", "\n        </div>\n        <div\n          class=\"tab-item", "\"\n          onClick=", "\n        >\n          ", "\n        </div>\n      </div>\n    "], ["\n      <div class=\"", "\" style=\"display: ", "\">\n        <div\n          class=\"tab-item", "\"\n          onClick=",
                "\n        >\n          ", "\n        </div>\n        <div\n          class=\"tab-item", "\"\n          onClick=",
                "\n        >\n          ", "\n        </div>\n      </div>\n    "])), cls('mode-switch'), this.state.hide ? 'none' : 'block', editorType === 'markdown' ? ' active' : '', function () {
                eventEmitter.emit('needChangeMode', 'markdown');
            }, i18n.get('Markdown'), editorType === 'wysiwyg' ? ' active' : '', function () {
                eventEmitter.emit('needChangeMode', 'wysiwyg');
            }, i18n.get('WYSIWYG'));
        };
        return Switch;
    }(Component));
    var templateObject_1$h;

    /**
     * @fileoverview Creates a debounced function that delays invoking fn until after delay milliseconds has elapsed since the last time the debouced function was invoked.
     * @author NHN FE Development Lab <dl_javascript.nhn.com>
     */

    /**
     * @module tricks
     */

    /**
     * Creates a debounced function that delays invoking fn until after delay milliseconds has elapsed
     * since the last time the debouced function was invoked.
     * @param {function} fn The function to debounce.
     * @param {number} [delay=0] The number of milliseconds to delay
     * @returns {function} debounced function.
     * @memberof module:tricks
     * @example
     * var debounce = require('tui-code-snippet/tricks/debounce'); // node, commonjs
     *
     * function someMethodToInvokeDebounced() {}
     *
     * var debounced = debounce(someMethodToInvokeDebounced, 300);
     *
     * // invoke repeatedly
     * debounced();
     * debounced();
     * debounced();
     * debounced();
     * debounced();
     * debounced();    // last invoke of debounced()
     *
     * // invoke someMethodToInvokeDebounced() after 300 milliseconds.
     */
    function debounce$1(fn, delay) {
      var timer, args;

      /* istanbul ignore next */
      delay = delay || 0;

      function debounced() { // eslint-disable-line require-jsdoc
        args = Array.prototype.slice.call(arguments);

        window.clearTimeout(timer);
        timer = window.setTimeout(function() {
          fn.apply(null, args);
        }, delay);
      }

      return debounced;
    }

    var debounce_1 = debounce$1;

    /**
     * @fileoverview Creates a throttled function that only invokes fn at most once per every interval milliseconds.
     * @author NHN FE Development Lab <dl_javascript.nhn.com>
     */

    var debounce = debounce_1;

    /**
     * Creates a throttled function that only invokes fn at most once per every interval milliseconds.
     * You can use this throttle short time repeatedly invoking functions. (e.g MouseMove, Resize ...)
     * if you need reuse throttled method. you must remove slugs (e.g. flag variable) related with throttling.
     * @param {function} fn function to throttle
     * @param {number} [interval=0] the number of milliseconds to throttle invocations to.
     * @returns {function} throttled function
     * @memberof module:tricks
     * @example
     * var throttle = require('tui-code-snippet/tricks/throttle'); // node, commonjs
     *
     * function someMethodToInvokeThrottled() {}
     *
     * var throttled = throttle(someMethodToInvokeThrottled, 300);
     *
     * // invoke repeatedly
     * throttled();    // invoke (leading)
     * throttled();
     * throttled();    // invoke (near 300 milliseconds)
     * throttled();
     * throttled();
     * throttled();    // invoke (near 600 milliseconds)
     * // ...
     * // invoke (trailing)
     *
     * // if you need reuse throttled method. then invoke reset()
     * throttled.reset();
     */
    function throttle(fn, interval) {
      var base;
      var isLeading = true;
      var tick = function(_args) {
        fn.apply(null, _args);
        base = null;
      };
      var debounced, stamp, args;

      /* istanbul ignore next */
      interval = interval || 0;

      debounced = debounce(tick, interval);

      function throttled() { // eslint-disable-line require-jsdoc
        args = Array.prototype.slice.call(arguments);

        if (isLeading) {
          tick(args);
          isLeading = false;

          return;
        }

        stamp = Number(new Date());

        base = base || stamp;

        // pass array directly because `debounce()`, `tick()` are already use
        // `apply()` method to invoke developer's `fn` handler.
        //
        // also, this `debounced` line invoked every time for implements
        // `trailing` features.
        debounced(args);

        if ((stamp - base) >= interval) {
          tick(args);
        }
      }

      function reset() { // eslint-disable-line require-jsdoc
        isLeading = true;
        base = null;
      }

      throttled.reset = reset;

      return throttled;
    }

    var throttle_1 = throttle;

    var HeadingPopupBody = /** @class */ (function (_super) {
        __extends$1(HeadingPopupBody, _super);
        function HeadingPopupBody() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        HeadingPopupBody.prototype.execCommand = function (ev) {
            var el = closest(ev.target, 'li');
            this.props.execCommand('heading', {
                level: Number(el.getAttribute('data-level')),
            });
        };
        HeadingPopupBody.prototype.render = function () {
            var _this = this;
            return html(templateObject_2$8 || (templateObject_2$8 = __makeTemplateObject(["\n      <ul onClick=", ">\n        ", "\n        <li data-type=\"Paragraph\"><div>", "</div></li>\n      </ul>\n    "], ["\n      <ul onClick=", ">\n        ",
                "\n        <li data-type=\"Paragraph\"><div>", "</div></li>\n      </ul>\n    "])), function (ev) { return _this.execCommand(ev); }, [1, 2, 3, 4, 5, 6].map(function (level) {
                return html(templateObject_1$g || (templateObject_1$g = __makeTemplateObject(["\n              <li data-level=\"", "\" data-type=\"Heading\">\n                <", ">", " ", "</$>\n              </li>\n            "], ["\n              <li data-level=\"", "\" data-type=\"Heading\">\n                <", ">", " ", "</$>\n              </li>\n            "])), level, "h" + level, i18n.get('Heading'), level);
            }), i18n.get('Paragraph'));
        };
        return HeadingPopupBody;
    }(Component));
    var templateObject_1$g, templateObject_2$8;

    var Tabs = /** @class */ (function (_super) {
        __extends$1(Tabs, _super);
        function Tabs() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Tabs.prototype.toggleTab = function (ev, activeTab) {
            this.props.onClick(ev, activeTab);
        };
        Tabs.prototype.render = function () {
            var _this = this;
            return html(templateObject_2$7 || (templateObject_2$7 = __makeTemplateObject(["\n      <div class=\"", "\">\n        ", "\n      </div>\n    "], ["\n      <div class=\"", "\">\n        ",
                "\n      </div>\n    "])), cls('tabs'), this.props.tabs.map(function (_a) {
                var name = _a.name, text = _a.text;
                return html(templateObject_1$f || (templateObject_1$f = __makeTemplateObject(["\n            <div\n              class=\"tab-item", "\"\n              onClick=", "\n            >\n              ", "\n            </div>\n          "], ["\n            <div\n              class=\"tab-item", "\"\n              onClick=", "\n            >\n              ", "\n            </div>\n          "])), _this.props.activeTab === name ? ' active' : '', function (ev) { return _this.toggleTab(ev, name); }, i18n.get(text));
            }));
        };
        return Tabs;
    }(Component));
    var templateObject_1$f, templateObject_2$7;

    var TYPE_UI = 'ui';
    var ImagePopupBody = /** @class */ (function (_super) {
        __extends$1(ImagePopupBody, _super);
        function ImagePopupBody(props) {
            var _this = _super.call(this, props) || this;
            _this.initialize = function (activeTab) {
                if (activeTab === void 0) { activeTab = 'file'; }
                var urlEl = _this.refs.url;
                urlEl.value = '';
                _this.refs.altText.value = '';
                _this.refs.file.value = '';
                removeClass_1(urlEl, 'wrong');
                _this.setState({ activeTab: activeTab, file: null, fileNameElClassName: '' });
            };
            _this.execCommand = function () {
                if (_this.state.activeTab === 'file') {
                    _this.emitAddImageBlob();
                }
                else {
                    _this.emitAddImage();
                }
            };
            _this.toggleTab = function (_, activeTab) {
                if (activeTab !== _this.state.activeTab) {
                    _this.initialize(activeTab);
                }
            };
            _this.showFileSelectBox = function () {
                _this.refs.file.click();
            };
            _this.changeFile = function (ev) {
                var files = ev.target.files;
                if (files === null || files === void 0 ? void 0 : files.length) {
                    _this.setState({ file: files[0] });
                }
            };
            _this.state = { activeTab: 'file', file: null, fileNameElClassName: '' };
            _this.tabs = [
                { name: 'file', text: 'File' },
                { name: 'url', text: 'URL' },
            ];
            return _this;
        }
        ImagePopupBody.prototype.emitAddImageBlob = function () {
            var _this = this;
            var files = this.refs.file.files;
            var altTextEl = this.refs.altText;
            var fileNameElClassName = ' wrong';
            if (files === null || files === void 0 ? void 0 : files.length) {
                fileNameElClassName = '';
                var imageFile = files.item(0);
                var hookCallback = function (url, text) {
                    return _this.props.execCommand('addImage', { imageUrl: url, altText: text || altTextEl.value });
                };
                this.props.eventEmitter.emit('addImageBlobHook', imageFile, hookCallback, TYPE_UI);
            }
            this.setState({ fileNameElClassName: fileNameElClassName });
        };
        ImagePopupBody.prototype.emitAddImage = function () {
            var imageUrlEl = this.refs.url;
            var altTextEl = this.refs.altText;
            var imageUrl = imageUrlEl.value;
            var altText = altTextEl.value || 'image';
            removeClass_1(imageUrlEl, 'wrong');
            if (!imageUrl.length) {
                addClass_1(imageUrlEl, 'wrong');
                return;
            }
            if (imageUrl) {
                this.props.execCommand('addImage', { imageUrl: imageUrl, altText: altText });
            }
        };
        ImagePopupBody.prototype.preventSelectStart = function (ev) {
            ev.preventDefault();
        };
        ImagePopupBody.prototype.updated = function () {
            if (!this.props.show) {
                this.initialize();
            }
        };
        ImagePopupBody.prototype.render = function () {
            var _this = this;
            var _a = this.state, activeTab = _a.activeTab, file = _a.file, fileNameElClassName = _a.fileNameElClassName;
            return html(templateObject_1$e || (templateObject_1$e = __makeTemplateObject(["\n      <div>\n        <", " tabs=", " activeTab=", " onClick=", " />\n        <div style=\"display:", "\">\n          <label for=\"toastuiImageUrlInput\">", "</label>\n          <input\n            id=\"toastuiImageUrlInput\"\n            type=\"text\"\n            ref=", "\n          />\n        </div>\n        <div style=\"display:", ";position: relative;\">\n          <label for=\"toastuiImageFileInput\">", "</label>\n          <span\n            class=\"", "", "\"\n            onClick=", "\n            onSelectstart=", "\n          >\n            ", "\n          </span>\n          <button\n            type=\"button\"\n            class=\"", "\"\n            onClick=", "\n          >\n            ", "\n          </button>\n          <input\n            id=\"toastuiImageFileInput\"\n            type=\"file\"\n            accept=\"image/*\"\n            onChange=", "\n            ref=", "\n          />\n        </div>\n        <label for=\"toastuiAltTextInput\">", "</label>\n        <input\n          id=\"toastuiAltTextInput\"\n          type=\"text\"\n          ref=", "\n        />\n        <div class=\"", "\">\n          <button type=\"button\" class=\"", "\" onClick=", ">\n            ", "\n          </button>\n          <button type=\"button\" class=\"", "\" onClick=", ">\n            ", "\n          </button>\n        </div>\n      </div>\n    "], ["\n      <div>\n        <", " tabs=", " activeTab=", " onClick=", " />\n        <div style=\"display:", "\">\n          <label for=\"toastuiImageUrlInput\">", "</label>\n          <input\n            id=\"toastuiImageUrlInput\"\n            type=\"text\"\n            ref=", "\n          />\n        </div>\n        <div style=\"display:", ";position: relative;\">\n          <label for=\"toastuiImageFileInput\">", "</label>\n          <span\n            class=\"", "", "\"\n            onClick=", "\n            onSelectstart=", "\n          >\n            ", "\n          </span>\n          <button\n            type=\"button\"\n            class=\"", "\"\n            onClick=", "\n          >\n            ", "\n          </button>\n          <input\n            id=\"toastuiImageFileInput\"\n            type=\"file\"\n            accept=\"image/*\"\n            onChange=", "\n            ref=", "\n          />\n        </div>\n        <label for=\"toastuiAltTextInput\">", "</label>\n        <input\n          id=\"toastuiAltTextInput\"\n          type=\"text\"\n          ref=", "\n        />\n        <div class=\"", "\">\n          <button type=\"button\" class=\"", "\" onClick=", ">\n            ", "\n          </button>\n          <button type=\"button\" class=\"", "\" onClick=", ">\n            ", "\n          </button>\n        </div>\n      </div>\n    "])), Tabs, this.tabs, activeTab, this.toggleTab, activeTab === 'url' ? 'block' : 'none', i18n.get('Image URL'), function (el) { return (_this.refs.url = el); }, activeTab === 'file' ? 'block' : 'none', i18n.get('Select image file'), cls('file-name'), file ? ' has-file' : fileNameElClassName, this.showFileSelectBox, this.preventSelectStart, file ? file.name : i18n.get('No file'), cls('file-select-button'), this.showFileSelectBox, i18n.get('Choose a file'), this.changeFile, function (el) { return (_this.refs.file = el); }, i18n.get('Description'), function (el) { return (_this.refs.altText = el); }, cls('button-container'), cls('close-button'), this.props.hidePopup, i18n.get('Cancel'), cls('ok-button'), this.execCommand, i18n.get('OK'));
        };
        return ImagePopupBody;
    }(Component));
    var templateObject_1$e;

    var LinkPopupBody = /** @class */ (function (_super) {
        __extends$1(LinkPopupBody, _super);
        function LinkPopupBody() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.execCommand = function () {
                var linkUrlEl = _this.refs.url;
                var linkTextEl = _this.refs.text;
                removeClass_1(linkUrlEl, 'wrong');
                removeClass_1(linkTextEl, 'wrong');
                if (linkUrlEl.value.length < 1) {
                    addClass_1(linkUrlEl, 'wrong');
                    return;
                }
                var checkLinkText = isUndefined_1(_this.props.initialValues.linkUrl);
                if (checkLinkText && linkTextEl.value.length < 1) {
                    addClass_1(linkTextEl, 'wrong');
                    return;
                }
                _this.props.execCommand('addLink', {
                    linkUrl: linkUrlEl.value,
                    linkText: linkTextEl.value,
                });
            };
            return _this;
        }
        LinkPopupBody.prototype.initialize = function () {
            var _a = this.props.initialValues, linkUrl = _a.linkUrl, linkText = _a.linkText;
            var linkUrlEl = this.refs.url;
            var linkTextEl = this.refs.text;
            removeClass_1(linkUrlEl, 'wrong');
            removeClass_1(linkTextEl, 'wrong', 'disabled');
            linkTextEl.removeAttribute('disabled');
            if (linkUrl) {
                addClass_1(linkTextEl, 'disabled');
                linkTextEl.setAttribute('disabled', 'disabled');
            }
            linkUrlEl.value = linkUrl || '';
            linkTextEl.value = linkText || '';
        };
        LinkPopupBody.prototype.mounted = function () {
            this.initialize();
        };
        LinkPopupBody.prototype.updated = function (prevProps) {
            if (!prevProps.show && this.props.show) {
                this.initialize();
            }
        };
        LinkPopupBody.prototype.render = function () {
            var _this = this;
            return html(templateObject_1$d || (templateObject_1$d = __makeTemplateObject(["\n      <div>\n        <label for=\"toastuiLinkUrlInput\">", "</label>\n        <input\n          id=\"toastuiLinkUrlInput\"\n          type=\"text\"\n          ref=", "\n        />\n        <label for=\"toastuiLinkTextInput\">", "</label>\n        <input\n          id=\"toastuiLinkTextInput\"\n          type=\"text\"\n          ref=", "\n        />\n        <div class=\"", "\">\n          <button type=\"button\" class=\"", "\" onClick=", ">\n            ", "\n          </button>\n          <button type=\"button\" class=\"", "\" onClick=", ">\n            ", "\n          </button>\n        </div>\n      </div>\n    "], ["\n      <div>\n        <label for=\"toastuiLinkUrlInput\">", "</label>\n        <input\n          id=\"toastuiLinkUrlInput\"\n          type=\"text\"\n          ref=", "\n        />\n        <label for=\"toastuiLinkTextInput\">", "</label>\n        <input\n          id=\"toastuiLinkTextInput\"\n          type=\"text\"\n          ref=", "\n        />\n        <div class=\"", "\">\n          <button type=\"button\" class=\"", "\" onClick=", ">\n            ", "\n          </button>\n          <button type=\"button\" class=\"", "\" onClick=", ">\n            ", "\n          </button>\n        </div>\n      </div>\n    "])), i18n.get('URL'), function (el) { return (_this.refs.url = el); }, i18n.get('Link text'), function (el) { return (_this.refs.text = el); }, cls('button-container'), cls('close-button'), this.props.hidePopup, i18n.get('Cancel'), cls('ok-button'), this.execCommand, i18n.get('OK'));
        };
        return LinkPopupBody;
    }(Component));
    var templateObject_1$d;

    var CELL_WIDTH = 20;
    var CELL_HEIGHT = 20;
    var MIN_ROW_INDEX = 5;
    var MAX_ROW_INDEX = 14;
    var MIN_COL_INDEX = 5;
    var MAX_COL_INDEX = 9;
    var MIN_ROW_SELECTION_INDEX = 1;
    var MIN_COL_SELECTION_INDEX = 1;
    var BORDER_WIDTH = 1;
    var TablePopupBody = /** @class */ (function (_super) {
        __extends$1(TablePopupBody, _super);
        function TablePopupBody(props) {
            var _this = _super.call(this, props) || this;
            _this.extendSelectionRange = function (_a) {
                var pageX = _a.pageX, pageY = _a.pageY;
                var x = pageX - _this.offsetRect.left;
                var y = pageY - _this.offsetRect.top;
                var range = _this.getSelectionRangeByOffset(x, y);
                _this.setState(__assign$1({}, range));
            };
            _this.execCommand = function () {
                _this.props.execCommand('addTable', {
                    rowCount: _this.state.rowIdx + 1,
                    columnCount: _this.state.colIdx + 1,
                });
            };
            _this.state = {
                rowIdx: -1,
                colIdx: -1,
            };
            return _this;
        }
        TablePopupBody.prototype.getDescription = function () {
            return this.state.colIdx === -1 ? '' : this.state.colIdx + 1 + " x " + (this.state.rowIdx + 1);
        };
        TablePopupBody.prototype.getBoundByRange = function (colIdx, rowIdx) {
            return {
                width: (colIdx + 1) * CELL_WIDTH,
                height: (rowIdx + 1) * CELL_HEIGHT,
            };
        };
        TablePopupBody.prototype.getRangeByOffset = function (x, y) {
            return {
                colIdx: Math.floor(x / CELL_WIDTH),
                rowIdx: Math.floor(y / CELL_HEIGHT),
            };
        };
        TablePopupBody.prototype.getTableRange = function () {
            var _a = this.state, orgColIdx = _a.colIdx, orgRowIdx = _a.rowIdx;
            var colIdx = Math.max(orgColIdx, MIN_COL_INDEX);
            var rowIdx = Math.max(orgRowIdx, MIN_ROW_INDEX);
            if (orgColIdx >= MIN_COL_INDEX && colIdx < MAX_COL_INDEX) {
                colIdx += 1;
            }
            if (orgRowIdx >= MIN_ROW_INDEX && rowIdx < MAX_ROW_INDEX) {
                rowIdx += 1;
            }
            return { colIdx: colIdx + 1, rowIdx: rowIdx + 1 };
        };
        TablePopupBody.prototype.getSelectionAreaBound = function () {
            var _a = this.getBoundByRange(this.state.colIdx, this.state.rowIdx), width = _a.width, height = _a.height;
            if (!width && !height) {
                return { display: 'none' };
            }
            return { width: width - BORDER_WIDTH, height: height - BORDER_WIDTH, display: 'block' };
        };
        TablePopupBody.prototype.getSelectionRangeByOffset = function (x, y) {
            var range = this.getRangeByOffset(x, y);
            range.rowIdx = Math.min(Math.max(range.rowIdx, MIN_ROW_SELECTION_INDEX), MAX_ROW_INDEX);
            range.colIdx = Math.min(Math.max(range.colIdx, MIN_COL_SELECTION_INDEX), MAX_COL_INDEX);
            return range;
        };
        TablePopupBody.prototype.mounted = function () {
            var _a = this.refs.tableEl.getBoundingClientRect(), left = _a.left, top = _a.top;
            this.offsetRect = {
                left: window.pageXOffset + left,
                top: window.pageYOffset + top,
            };
        };
        TablePopupBody.prototype.updated = function () {
            if (!this.props.show) {
                this.setState({ colIdx: -1, rowIdx: -1 });
            }
        };
        TablePopupBody.prototype.createTableArea = function (tableRange) {
            var colIdx = tableRange.colIdx, rowIdx = tableRange.rowIdx;
            var rows = [];
            for (var i = 0; i < rowIdx; i += 1) {
                var cells = [];
                for (var j = 0; j < colIdx; j += 1) {
                    var cellClassNames = "" + cls('table-cell') + (i > 0 ? '' : ' header');
                    cells.push(html(templateObject_1$c || (templateObject_1$c = __makeTemplateObject(["<div class=\"", "\"></div>"], ["<div class=\"", "\"></div>"])), cellClassNames));
                }
                rows.push(html(templateObject_2$6 || (templateObject_2$6 = __makeTemplateObject(["<div class=\"", "\">", "</div>"], ["<div class=\"", "\">", "</div>"])), cls('table-row'), cells));
            }
            return html(templateObject_3$2 || (templateObject_3$2 = __makeTemplateObject(["<div class=\"", "\">", "</div>"], ["<div class=\"", "\">", "</div>"])), cls('table'), rows);
        };
        TablePopupBody.prototype.render = function () {
            var _this = this;
            var tableRange = this.getTableRange();
            var selectionAreaBound = this.getSelectionAreaBound();
            return html(templateObject_4$1 || (templateObject_4$1 = __makeTemplateObject(["\n      <div>\n        <div\n          class=\"", "\"\n          ref=", "\n          onMousemove=", "\n          onClick=", "\n        >\n          ", "\n          <div class=\"", "\" style=", "></div>\n        </div>\n        <p class=\"", "\">", "</p>\n      </div>\n    "], ["\n      <div>\n        <div\n          class=\"", "\"\n          ref=", "\n          onMousemove=", "\n          onClick=", "\n        >\n          ", "\n          <div class=\"", "\" style=", "></div>\n        </div>\n        <p class=\"", "\">", "</p>\n      </div>\n    "])), cls('table-selection'), function (el) { return (_this.refs.tableEl = el); }, this.extendSelectionRange, this.execCommand, this.createTableArea(tableRange), cls('table-selection-layer'), selectionAreaBound, cls('table-description'), this.getDescription());
        };
        return TablePopupBody;
    }(Component));
    var templateObject_1$c, templateObject_2$6, templateObject_3$2, templateObject_4$1;

    var CustomPopupBody = /** @class */ (function (_super) {
        __extends$1(CustomPopupBody, _super);
        function CustomPopupBody(props) {
            var _this = _super.call(this, props) || this;
            props.eventEmitter.listen('closePopup', _this.props.hidePopup);
            return _this;
        }
        CustomPopupBody.prototype.mounted = function () {
            // append the custom popup body element
            this.refs.el.appendChild(this.props.body);
        };
        CustomPopupBody.prototype.render = function () {
            var _this = this;
            return html(templateObject_1$b || (templateObject_1$b = __makeTemplateObject(["<div ref=", "></div>"], ["<div ref=", "></div>"])), function (el) { return (_this.refs.el = el); });
        };
        return CustomPopupBody;
    }(Component));
    var templateObject_1$b;

    function createToolbarItemInfo(type) {
        return isString_1(type) ? createDefaultToolbarItemInfo(type) : type;
    }
    function createScrollSyncToolbarItem() {
        var label = document.createElement('label');
        var checkbox = document.createElement('input');
        var toggleSwitch = document.createElement('span');
        label.className = 'scroll-sync active';
        checkbox.type = 'checkbox';
        checkbox.checked = true;
        toggleSwitch.className = 'switch';
        var onMounted = function (execCommand) {
            return checkbox.addEventListener('change', function (ev) {
                var checked = ev.target.checked;
                if (checked) {
                    addClass_1(label, 'active');
                }
                else {
                    removeClass_1(label, 'active');
                }
                execCommand('toggleScrollSync', { active: checked });
            });
        };
        label.appendChild(checkbox);
        label.appendChild(toggleSwitch);
        return {
            name: 'scrollSync',
            el: label,
            onMounted: onMounted,
        };
    }
    function createDefaultToolbarItemInfo(type) {
        var info;
        switch (type) {
            case 'heading':
                info = {
                    name: 'heading',
                    className: 'heading',
                    tooltip: i18n.get('Headings'),
                    state: 'heading',
                };
                break;
            case 'bold':
                info = {
                    name: 'bold',
                    className: 'bold',
                    command: 'bold',
                    tooltip: i18n.get('Bold'),
                    state: 'strong',
                };
                break;
            case 'italic':
                info = {
                    name: 'italic',
                    className: 'italic',
                    command: 'italic',
                    tooltip: i18n.get('Italic'),
                    state: 'emph',
                };
                break;
            case 'strike':
                info = {
                    name: 'strike',
                    className: 'strike',
                    command: 'strike',
                    tooltip: i18n.get('Strike'),
                    state: 'strike',
                };
                break;
            case 'hr':
                info = {
                    name: 'hr',
                    className: 'hrline',
                    command: 'hr',
                    tooltip: i18n.get('Line'),
                    state: 'thematicBreak',
                };
                break;
            case 'quote':
                info = {
                    name: 'quote',
                    className: 'quote',
                    command: 'blockQuote',
                    tooltip: i18n.get('Blockquote'),
                    state: 'blockQuote',
                };
                break;
            case 'ul':
                info = {
                    name: 'ul',
                    className: 'bullet-list',
                    command: 'bulletList',
                    tooltip: i18n.get('Unordered list'),
                    state: 'bulletList',
                };
                break;
            case 'ol':
                info = {
                    name: 'ol',
                    className: 'ordered-list',
                    command: 'orderedList',
                    tooltip: i18n.get('Ordered list'),
                    state: 'orderedList',
                };
                break;
            case 'task':
                info = {
                    name: 'task',
                    className: 'task-list',
                    command: 'taskList',
                    tooltip: i18n.get('Task'),
                    state: 'taskList',
                };
                break;
            case 'table':
                info = {
                    name: 'table',
                    className: 'table',
                    tooltip: i18n.get('Insert table'),
                    state: 'table',
                };
                break;
            case 'image':
                info = {
                    name: 'image',
                    className: 'image',
                    tooltip: i18n.get('Insert image'),
                };
                break;
            case 'link':
                info = {
                    name: 'link',
                    className: 'link',
                    tooltip: i18n.get('Insert link'),
                };
                break;
            case 'code':
                info = {
                    name: 'code',
                    className: 'code',
                    command: 'code',
                    tooltip: i18n.get('Code'),
                    state: 'code',
                };
                break;
            case 'codeblock':
                info = {
                    name: 'codeblock',
                    className: 'codeblock',
                    command: 'codeBlock',
                    tooltip: i18n.get('Insert CodeBlock'),
                    state: 'codeBlock',
                };
                break;
            case 'indent':
                info = {
                    name: 'indent',
                    className: 'indent',
                    command: 'indent',
                    tooltip: i18n.get('Indent'),
                };
                break;
            case 'outdent':
                info = {
                    name: 'outdent',
                    className: 'outdent',
                    command: 'outdent',
                    tooltip: i18n.get('Outdent'),
                };
                break;
            case 'scrollSync':
                info = createScrollSyncToolbarItem();
                break;
            case 'more':
                info = {
                    name: 'more',
                    className: 'more',
                    tooltip: i18n.get('More'),
                };
                break;
            // do nothing
        }
        if (info.name !== 'scrollSync') {
            info.className += " " + cls('toolbar-icons');
        }
        return info;
    }
    // eslint-disable-next-line consistent-return
    function createPopupInfo(type, payload) {
        var el = payload.el, pos = payload.pos, popup = payload.popup, initialValues = payload.initialValues;
        switch (type) {
            case 'heading':
                return {
                    render: function (props) { return html(templateObject_1$a || (templateObject_1$a = __makeTemplateObject(["<", " ...", " />"], ["<", " ...", " />"])), HeadingPopupBody, props); },
                    className: cls('popup-add-heading'),
                    fromEl: el,
                    pos: pos,
                };
            case 'link':
                return {
                    render: function (props) { return html(templateObject_2$5 || (templateObject_2$5 = __makeTemplateObject(["<", " ...", " />"], ["<", " ...", " />"])), LinkPopupBody, props); },
                    className: cls('popup-add-link'),
                    fromEl: el,
                    pos: pos,
                    initialValues: initialValues,
                };
            case 'image':
                return {
                    render: function (props) { return html(templateObject_3$1 || (templateObject_3$1 = __makeTemplateObject(["<", " ...", " />"], ["<", " ...", " />"])), ImagePopupBody, props); },
                    className: cls('popup-add-image'),
                    fromEl: el,
                    pos: pos,
                };
            case 'table':
                return {
                    render: function (props) { return html(templateObject_4 || (templateObject_4 = __makeTemplateObject(["<", " ...", " />"], ["<", " ...", " />"])), TablePopupBody, props); },
                    className: cls('popup-add-table'),
                    fromEl: el,
                    pos: pos,
                };
            case 'customPopupBody':
                if (!popup) {
                    return null;
                }
                return __assign$1({ render: function (props) { return html(templateObject_5 || (templateObject_5 = __makeTemplateObject(["<", " ...", " body=", " />"], ["<", " ...", " body=", " />"])), CustomPopupBody, props, popup.body); }, fromEl: el, pos: pos }, popup);
            default:
                return null;
        }
    }
    function setGroupState(group) {
        group.hidden = group.length === group.filter(function (info) { return info.hidden; }).length;
    }
    function groupToolbarItems(toolbarItems, hiddenScrollSync) {
        var toggleScrollSyncState = function (item) {
            item.hidden = item.name === 'scrollSync' && hiddenScrollSync;
            return item;
        };
        return toolbarItems.reduce(function (acc, item) {
            acc.push(item.map(function (type) { return toggleScrollSyncState(createToolbarItemInfo(type)); }));
            var group = acc[(acc.length || 1) - 1];
            if (group) {
                setGroupState(group);
            }
            return acc;
        }, []);
    }
    function toggleScrollSync(toolbarItems, hiddenScrollSync) {
        toolbarItems.forEach(function (group) {
            group.forEach(function (item) { return (item.hidden = item.name === 'scrollSync' && hiddenScrollSync); });
            setGroupState(group);
        });
    }
    var templateObject_1$a, templateObject_2$5, templateObject_3$1, templateObject_4, templateObject_5;

    var Popup = /** @class */ (function (_super) {
        __extends$1(Popup, _super);
        function Popup() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.handleMousedown = function (ev) {
                if (!closest(ev.target, "." + cls('popup')) &&
                    !closest(ev.target, _this.props.info.fromEl)) {
                    _this.props.hidePopup();
                }
            };
            return _this;
        }
        Popup.prototype.mounted = function () {
            document.addEventListener('mousedown', this.handleMousedown);
        };
        Popup.prototype.beforeDestroy = function () {
            document.removeEventListener('mousedown', this.handleMousedown);
        };
        Popup.prototype.render = function () {
            var _a = this.props, info = _a.info, show = _a.show, hidePopup = _a.hidePopup, eventEmitter = _a.eventEmitter, execCommand = _a.execCommand;
            var _b = info || {}, _c = _b.className, className = _c === void 0 ? '' : _c, style = _b.style, render = _b.render, pos = _b.pos, _d = _b.initialValues, initialValues = _d === void 0 ? {} : _d;
            var popupStyle = __assign$1({ display: show ? 'block' : 'none' }, style);
            if (pos) {
                popupStyle.left = pos.left;
                popupStyle.top = pos.top;
            }
            return html(templateObject_1$9 || (templateObject_1$9 = __makeTemplateObject(["\n      <div class=\"", " ", "\" style=", ">\n        <div class=\"", "\">\n          ", "\n        </div>\n      </div>\n    "], ["\n      <div class=\"", " ", "\" style=", ">\n        <div class=\"", "\">\n          ", "\n        </div>\n      </div>\n    "])), cls('popup'), className, popupStyle, cls('popup-body'), render && render({ eventEmitter: eventEmitter, show: show, hidePopup: hidePopup, execCommand: execCommand, initialValues: initialValues }));
        };
        return Popup;
    }(Component));
    var templateObject_1$9;

    var TOOLTIP_INDENT = 6;
    function connectHOC(WrappedComponent) {
        return /** @class */ (function (_super) {
            __extends$1(ButtonHOC, _super);
            function ButtonHOC(props) {
                var _this = _super.call(this, props) || this;
                _this.showTooltip = function (el) {
                    var tooltip = _this.props.item.tooltip;
                    if (!_this.props.disabled && tooltip) {
                        var bound = _this.getBound(el);
                        var left = bound.left + TOOLTIP_INDENT + "px";
                        var top_1 = bound.top + TOOLTIP_INDENT + "px";
                        css_1(_this.props.tooltipRef.current, { display: 'block', left: left, top: top_1 });
                        _this.props.tooltipRef.current.querySelector('.text').textContent = tooltip;
                    }
                };
                _this.hideTooltip = function () {
                    css_1(_this.props.tooltipRef.current, 'display', 'none');
                };
                _this.state = { active: false };
                _this.addEvent();
                return _this;
            }
            ButtonHOC.prototype.addEvent = function () {
                var _this = this;
                var _a = this.props, item = _a.item, eventEmitter = _a.eventEmitter;
                if (item.state) {
                    eventEmitter.listen('changeToolbarState', function (_a) {
                        var toolbarState = _a.toolbarState;
                        var active = !!toolbarState[item.state];
                        _this.setState({ active: active });
                    });
                }
            };
            ButtonHOC.prototype.getBound = function (el) {
                var _a = getTotalOffset(el, closest(el, "." + cls('toolbar'))), offsetLeft = _a.offsetLeft, offsetTop = _a.offsetTop;
                return { left: offsetLeft, top: el.offsetHeight + offsetTop };
            };
            ButtonHOC.prototype.render = function () {
                return html(templateObject_1$8 || (templateObject_1$8 = __makeTemplateObject(["\n        <", "\n          ...", "\n          active=", "\n          showTooltip=", "\n          hideTooltip=", "\n          getBound=", "\n        />\n      "], ["\n        <", "\n          ...", "\n          active=", "\n          showTooltip=", "\n          hideTooltip=", "\n          getBound=", "\n        />\n      "])), WrappedComponent, this.props, this.state.active, this.showTooltip, this.hideTooltip, this.getBound);
            };
            return ButtonHOC;
        }(Component));
    }
    var templateObject_1$8;

    var DEFAULT_WIDTH$1 = 80;
    var ToolbarButtonComp = /** @class */ (function (_super) {
        __extends$1(ToolbarButtonComp, _super);
        function ToolbarButtonComp() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.showTooltip = function () {
                _this.props.showTooltip(_this.refs.el);
            };
            _this.execCommand = function () {
                var _a = _this.props, item = _a.item, execCommand = _a.execCommand, setPopupInfo = _a.setPopupInfo, getBound = _a.getBound;
                var command = item.command, name = item.name, popup = item.popup;
                if (command) {
                    execCommand(command);
                }
                else {
                    var popupName = popup ? 'customPopupBody' : name;
                    var info = createPopupInfo(popupName, {
                        el: _this.refs.el,
                        pos: getBound(_this.refs.el),
                        popup: popup,
                    });
                    if (info) {
                        setPopupInfo(info);
                    }
                }
            };
            return _this;
        }
        ToolbarButtonComp.prototype.mounted = function () {
            this.setItemWidth();
        };
        ToolbarButtonComp.prototype.updated = function (prevProps) {
            if (prevProps.item.name !== this.props.item.name) {
                this.setItemWidth();
            }
        };
        ToolbarButtonComp.prototype.setItemWidth = function () {
            var _a = this.props, setItemWidth = _a.setItemWidth, item = _a.item;
            // set width only if it is not a dropdown toolbar
            if (setItemWidth) {
                setItemWidth(item.name, getOuterWidth(this.refs.el) + (item.hidden ? DEFAULT_WIDTH$1 : 0));
            }
        };
        ToolbarButtonComp.prototype.render = function () {
            var _this = this;
            var _a = this.props, hideTooltip = _a.hideTooltip, disabled = _a.disabled, item = _a.item, active = _a.active;
            var style = __assign$1({ display: item.hidden ? 'none' : null }, item.style);
            var classNames = "" + (item.className || '') + (active ? ' active' : '');
            return html(templateObject_1$7 || (templateObject_1$7 = __makeTemplateObject(["\n      <button\n        ref=", "\n        type=\"button\"\n        style=", "\n        class=", "\n        onClick=", "\n        onMouseover=", "\n        onMouseout=", "\n        disabled=", "\n      >\n        ", "\n      </button>\n    "], ["\n      <button\n        ref=", "\n        type=\"button\"\n        style=", "\n        class=", "\n        onClick=", "\n        onMouseover=", "\n        onMouseout=", "\n        disabled=", "\n      >\n        ", "\n      </button>\n    "])), function (el) { return (_this.refs.el = el); }, style, classNames, this.execCommand, this.showTooltip, hideTooltip, !!disabled, item.text || '');
        };
        return ToolbarButtonComp;
    }(Component));
    var ToolbarButton = connectHOC(ToolbarButtonComp);
    var templateObject_1$7;

    var CustomToolbarItemComp = /** @class */ (function (_super) {
        __extends$1(CustomToolbarItemComp, _super);
        function CustomToolbarItemComp() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.showTooltip = function () {
                _this.props.showTooltip(_this.refs.el);
            };
            _this.showPopup = function () {
                var info = createPopupInfo('customPopupBody', {
                    el: _this.refs.el,
                    pos: _this.props.getBound(_this.refs.el),
                    popup: _this.props.item.popup,
                });
                if (info) {
                    _this.props.setPopupInfo(info);
                }
            };
            return _this;
        }
        CustomToolbarItemComp.prototype.mounted = function () {
            var _a = this.props, setItemWidth = _a.setItemWidth, item = _a.item;
            // append the custom html element
            this.refs.el.appendChild(item.el);
            // set width only if it is not a dropdown toolbar
            if (setItemWidth) {
                setItemWidth(item.name, getOuterWidth(this.refs.el));
            }
            if (item.onMounted) {
                item.onMounted(this.props.execCommand);
            }
        };
        CustomToolbarItemComp.prototype.updated = function (prevProps) {
            var _a;
            var _b = this.props, item = _b.item, active = _b.active, disabled = _b.disabled;
            if (prevProps.active !== active || prevProps.disabled !== disabled) {
                (_a = item.onUpdated) === null || _a === void 0 ? void 0 : _a.call(item, { active: active, disabled: disabled });
            }
        };
        CustomToolbarItemComp.prototype.render = function () {
            var _this = this;
            var _a = this.props, disabled = _a.disabled, item = _a.item;
            var style = { display: item.hidden ? 'none' : 'inline-block' };
            var getListener = function (listener) { return (disabled ? null : listener); };
            return html(templateObject_1$6 || (templateObject_1$6 = __makeTemplateObject(["\n      <div\n        ref=", "\n        style=", "\n        class=", "\n        onClick=", "\n        onMouseover=", "\n        onMouseout=", "\n      ></div>\n    "], ["\n      <div\n        ref=", "\n        style=", "\n        class=", "\n        onClick=", "\n        onMouseover=", "\n        onMouseout=", "\n      ></div>\n    "])), function (el) { return (_this.refs.el = el); }, style, cls('toolbar-item-wrapper'), getListener(this.showPopup), getListener(this.showTooltip), getListener(this.props.hideTooltip));
        };
        return CustomToolbarItemComp;
    }(Component));
    var CustomToolbarItem = connectHOC(CustomToolbarItemComp);
    var templateObject_1$6;

    var ToolbarGroup = /** @class */ (function (_super) {
        __extends$1(ToolbarGroup, _super);
        function ToolbarGroup() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ToolbarGroup.prototype.render = function () {
            var _this = this;
            var _a = this.props, group = _a.group, hiddenDivider = _a.hiddenDivider;
            var groupStyle = group.hidden ? { display: 'none' } : null;
            var dividerStyle = hiddenDivider ? { display: 'none' } : null;
            return html(templateObject_2$4 || (templateObject_2$4 = __makeTemplateObject(["\n      <div class=\"", "\" style=", ">\n        ", "\n        <div class=\"", "\" style=", "></div>\n      </div>\n    "], ["\n      <div class=\"", "\" style=", ">\n        ",
                "\n        <div class=\"", "\" style=", "></div>\n      </div>\n    "])), cls('toolbar-group'), groupStyle, group.map(function (item) {
                var Comp = item.el ? CustomToolbarItem : ToolbarButton;
                return html(templateObject_1$5 || (templateObject_1$5 = __makeTemplateObject(["<", " key=", " ...", " item=", " />"], ["<", " key=", " ...", " item=", " />"])), Comp, item.name, _this.props, item);
            }), cls('toolbar-divider'), dividerStyle);
        };
        return ToolbarGroup;
    }(Component));
    var templateObject_1$5, templateObject_2$4;

    var POPUP_INDENT = 4;
    var DropdownToolbarButtonComp = /** @class */ (function (_super) {
        __extends$1(DropdownToolbarButtonComp, _super);
        function DropdownToolbarButtonComp(props) {
            var _this = _super.call(this, props) || this;
            _this.handleClickDocument = function (_a) {
                var target = _a.target;
                if (!closest(target, "." + cls('dropdown-toolbar')) &&
                    !closest(target, '.more')) {
                    _this.setState({ showDropdown: false, dropdownPos: null });
                }
            };
            _this.showTooltip = function () {
                _this.props.showTooltip(_this.refs.el);
            };
            _this.state = { showDropdown: false, dropdownPos: null };
            return _this;
        }
        DropdownToolbarButtonComp.prototype.getBound = function () {
            var rect = this.props.getBound(this.refs.el);
            rect.top += POPUP_INDENT;
            return __assign$1(__assign$1({}, rect), { left: null, right: 10 });
        };
        DropdownToolbarButtonComp.prototype.mounted = function () {
            document.addEventListener('click', this.handleClickDocument);
        };
        DropdownToolbarButtonComp.prototype.updated = function () {
            if (this.state.showDropdown && !this.state.dropdownPos) {
                this.setState({ dropdownPos: this.getBound() });
            }
        };
        DropdownToolbarButtonComp.prototype.beforeDestroy = function () {
            document.removeEventListener('click', this.handleClickDocument);
        };
        DropdownToolbarButtonComp.prototype.render = function () {
            var _this = this;
            var _a = this.state, showDropdown = _a.showDropdown, dropdownPos = _a.dropdownPos;
            var _b = this.props, disabled = _b.disabled, item = _b.item, items = _b.items, hideTooltip = _b.hideTooltip;
            var visibleItems = items.filter(function (dropdownItem) { return !dropdownItem.hidden; });
            var groupStyle = visibleItems.length ? null : { display: 'none' };
            var dropdownStyle = showDropdown ? null : { display: 'none' };
            return html(templateObject_2$3 || (templateObject_2$3 = __makeTemplateObject(["\n      <div class=\"", "\" style=", ">\n        <button\n          ref=", "\n          type=\"button\"\n          class=", "\n          onClick=", "\n          onMouseover=", "\n          onMouseout=", "\n          disabled=", "\n        ></button>\n        <div\n          class=\"", "\"\n          style=", "\n          ref=", "\n        >\n          ", "\n        </div>\n      </div>\n    "], ["\n      <div class=\"", "\" style=", ">\n        <button\n          ref=", "\n          type=\"button\"\n          class=", "\n          onClick=", "\n          onMouseover=", "\n          onMouseout=", "\n          disabled=", "\n        ></button>\n        <div\n          class=\"", "\"\n          style=", "\n          ref=", "\n        >\n          ",
                "\n        </div>\n      </div>\n    "])), cls('toolbar-group'), groupStyle, function (el) { return (_this.refs.el = el); }, item.className, function () { return _this.setState({ showDropdown: true }); }, this.showTooltip, hideTooltip, disabled, cls('dropdown-toolbar'), __assign$1(__assign$1({}, dropdownStyle), dropdownPos), function (el) { return (_this.refs.dropdownEl = el); }, visibleItems.length
                ? visibleItems.map(function (group, index) {
                    var _a;
                    return html(templateObject_1$4 || (templateObject_1$4 = __makeTemplateObject(["\n                  <", "\n                    group=", "\n                    hiddenDivider=", "\n                    ...", "\n                  />\n                "], ["\n                  <", "\n                    group=", "\n                    hiddenDivider=",
                        "\n                    ...", "\n                  />\n                "])), ToolbarGroup, group, index === visibleItems.length - 1 ||
                        ((_a = visibleItems[index + 1]) === null || _a === void 0 ? void 0 : _a.hidden), _this.props);
                })
                : null);
        };
        return DropdownToolbarButtonComp;
    }(Component));
    var DropdownToolbarButton = connectHOC(DropdownToolbarButtonComp);
    var templateObject_1$4, templateObject_2$3;

    var DROPDOWN_WIDTH = 120;
    var DEFAULT_WIDTH = 80;
    var Toolbar = /** @class */ (function (_super) {
        __extends$1(Toolbar, _super);
        function Toolbar(props) {
            var _this = _super.call(this, props) || this;
            _this.toggleTab = function (_, activeTab) {
                var eventEmitter = _this.props.eventEmitter;
                if (_this.state.activeTab !== activeTab) {
                    var event_1 = activeTab === 'write' ? 'changePreviewTabWrite' : 'changePreviewTabPreview';
                    eventEmitter.emit(event_1);
                    _this.setState({ activeTab: activeTab });
                }
            };
            _this.setItemWidth = function (name, width) {
                _this.itemWidthMap[name] = width;
            };
            _this.setPopupInfo = function (popupInfo) {
                _this.setState({ showPopup: true, popupInfo: popupInfo });
            };
            _this.openPopup = function (popupName, initialValues) {
                if (initialValues === void 0) { initialValues = {}; }
                var el = document.querySelector("." + cls('toolbar-group') + " ." + popupName);
                if (el) {
                    var _a = getTotalOffset(el, closest(el, "." + cls('toolbar'))), offsetLeft = _a.offsetLeft, offsetTop = _a.offsetTop;
                    var info = createPopupInfo(popupName, {
                        el: el,
                        pos: { left: offsetLeft, top: el.offsetHeight + offsetTop },
                        initialValues: initialValues,
                    });
                    if (info) {
                        _this.setPopupInfo(info);
                    }
                }
            };
            _this.hidePopup = function () {
                if (_this.state.showPopup) {
                    _this.setState({ showPopup: false });
                }
            };
            _this.execCommand = function (command, payload) {
                var eventEmitter = _this.props.eventEmitter;
                eventEmitter.emit('command', command, payload);
                _this.hidePopup();
            };
            _this.tabs = [
                { name: 'write', text: 'Write' },
                { name: 'preview', text: 'Preview' },
            ];
            _this.itemWidthMap = {};
            _this.initialItems = groupToolbarItems(props.toolbarItems || [], _this.hiddenScrollSync());
            _this.state = {
                items: _this.initialItems,
                dropdownItems: [],
                showPopup: false,
                popupInfo: {},
                activeTab: 'write',
            };
            _this.tooltipRef = { current: null };
            _this.addEvent();
            return _this;
        }
        Toolbar.prototype.insertToolbarItem = function (indexList, item) {
            var groupIndex = indexList.groupIndex, itemIndex = indexList.itemIndex;
            var group = this.initialItems[groupIndex];
            item = createToolbarItemInfo(item);
            if (group) {
                group.splice(itemIndex, 0, item);
            }
            else {
                this.initialItems.push([item]);
            }
            this.setState(this.classifyToolbarItems());
        };
        Toolbar.prototype.removeToolbarItem = function (name) {
            var _this = this;
            forEachArray_1(this.initialItems, function (group) {
                var found = false;
                forEachArray_1(group, function (item, index) {
                    if (item.name === name) {
                        found = true;
                        group.splice(index, 1);
                        _this.setState(_this.classifyToolbarItems());
                        return false;
                    }
                    return true;
                });
                return !found;
            });
        };
        Toolbar.prototype.addEvent = function () {
            var _this = this;
            this.props.eventEmitter.listen('openPopup', this.openPopup);
            this.handleResize = throttle_1(function () { return _this.setState(_this.classifyToolbarItems()); }, 200);
            window.addEventListener('resize', this.handleResize);
        };
        Toolbar.prototype.appendTooltipToRoot = function () {
            var tooltip = "<div class=\"" + cls('tooltip') + "\" style=\"display:none\">\n        <div class=\"arrow\"></div>\n        <span class=\"text\"></span>\n      </div>";
            this.tooltipRef.current = createElementWith(tooltip, this.refs.el);
        };
        Toolbar.prototype.hiddenScrollSync = function () {
            return this.props.editorType === 'wysiwyg' || this.props.previewStyle === 'tab';
        };
        Toolbar.prototype.classifyToolbarItems = function () {
            var _this = this;
            var totalWidth = 0;
            var clientWidth = this.refs.el.clientWidth;
            var divider = this.refs.el.querySelector("." + cls('toolbar-divider'));
            var dividerWidth = divider ? getOuterWidth(divider) : 0;
            var items = [];
            var dropdownItems = [];
            this.initialItems.forEach(function (initialGroup, index) {
                var group = [];
                var dropdownGroup = [];
                initialGroup.forEach(function (item) {
                    totalWidth += _this.itemWidthMap[item.name] || DEFAULT_WIDTH;
                    var target = totalWidth >= clientWidth - DROPDOWN_WIDTH ? dropdownGroup : group;
                    target.push(item);
                });
                if (group.length) {
                    setGroupState(group);
                    items.push(group);
                }
                if (dropdownGroup.length) {
                    setGroupState(dropdownGroup);
                    dropdownItems.push(dropdownGroup);
                }
                // add divider width
                if (index < _this.state.items.length - 1) {
                    totalWidth += dividerWidth;
                }
            });
            return { items: items, dropdownItems: dropdownItems };
        };
        Toolbar.prototype.mounted = function () {
            if (this.props.previewStyle === 'tab') {
                this.props.eventEmitter.emit('changePreviewTabWrite');
            }
            // classify toolbar and dropdown toolbar after DOM has been rendered
            this.setState(this.classifyToolbarItems());
            this.appendTooltipToRoot();
        };
        Toolbar.prototype.updated = function (prevProps) {
            var _a = this.props, editorType = _a.editorType, previewStyle = _a.previewStyle, eventEmitter = _a.eventEmitter;
            var changedStyle = previewStyle !== prevProps.previewStyle;
            var changedType = editorType !== prevProps.editorType;
            if (changedStyle || changedType) {
                // show or hide scrollSync button
                toggleScrollSync(this.initialItems, this.hiddenScrollSync());
                var newState = this.classifyToolbarItems();
                if (changedStyle || (previewStyle === 'tab' && editorType === 'markdown')) {
                    eventEmitter.emit('changePreviewTabWrite');
                    newState.activeTab = 'write';
                }
                this.setState(newState);
            }
        };
        Toolbar.prototype.beforeDestroy = function () {
            window.removeEventListener('resize', this.handleResize);
            removeNode$1(this.tooltipRef.current);
        };
        Toolbar.prototype.render = function () {
            var _this = this;
            var _a = this.props, previewStyle = _a.previewStyle, eventEmitter = _a.eventEmitter, editorType = _a.editorType;
            var _b = this.state, popupInfo = _b.popupInfo, showPopup = _b.showPopup, activeTab = _b.activeTab, items = _b.items, dropdownItems = _b.dropdownItems;
            var props = {
                eventEmitter: eventEmitter,
                tooltipRef: this.tooltipRef,
                disabled: editorType === 'markdown' && previewStyle === 'tab' && activeTab === 'preview',
                execCommand: this.execCommand,
                setPopupInfo: this.setPopupInfo,
            };
            var toolbarStyle = previewStyle === 'tab' ? { borderTopLeftRadius: 0 } : null;
            return html(templateObject_2$2 || (templateObject_2$2 = __makeTemplateObject(["\n      <div class=\"", "\">\n        <div\n          class=\"", "\"\n          style=\"display: ", "\"\n        >\n          <", " tabs=", " activeTab=", " onClick=", " />\n        </div>\n        <div\n          class=\"", "\"\n          ref=", "\n          style=", "\n        >\n          ", "\n          <", "\n            item=", "\n            items=", "\n            ...", "\n          />\n        </div>\n        <", "\n          info=", "\n          show=", "\n          eventEmitter=", "\n          hidePopup=", "\n          execCommand=", "\n        />\n      </div>\n    "], ["\n      <div class=\"", "\">\n        <div\n          class=\"", "\"\n          style=\"display: ",
                "\"\n        >\n          <", " tabs=", " activeTab=", " onClick=", " />\n        </div>\n        <div\n          class=\"", "\"\n          ref=", "\n          style=", "\n        >\n          ",
                "\n          <", "\n            item=", "\n            items=", "\n            ...", "\n          />\n        </div>\n        <", "\n          info=", "\n          show=", "\n          eventEmitter=", "\n          hidePopup=", "\n          execCommand=", "\n        />\n      </div>\n    "])), cls('toolbar'), cls('md-tab-container'), editorType === 'wysiwyg' || previewStyle === 'vertical'
                ? 'none'
                : 'block', Tabs, this.tabs, activeTab, this.toggleTab, cls('defaultUI-toolbar'), function (el) { return (_this.refs.el = el); }, toolbarStyle, items.map(function (group, index) {
                var _a;
                return html(templateObject_1$3 || (templateObject_1$3 = __makeTemplateObject(["\n              <", "\n                group=", "\n                hiddenDivider=", "\n                setItemWidth=", "\n                ...", "\n              />\n            "], ["\n              <", "\n                group=", "\n                hiddenDivider=", "\n                setItemWidth=", "\n                ...", "\n              />\n            "])), ToolbarGroup, group, index === items.length - 1 || ((_a = items[index + 1]) === null || _a === void 0 ? void 0 : _a.hidden), _this.setItemWidth, props);
            }), DropdownToolbarButton, createToolbarItemInfo('more'), dropdownItems, props, Popup, popupInfo, showPopup, eventEmitter, this.hidePopup, this.execCommand);
        };
        return Toolbar;
    }(Component));
    var templateObject_1$3, templateObject_2$2;

    var ContextMenu = /** @class */ (function (_super) {
        __extends$1(ContextMenu, _super);
        function ContextMenu(props) {
            var _this = _super.call(this, props) || this;
            _this.handleClickDocument = function (ev) {
                if (!closest(ev.target, "." + cls('context-menu'))) {
                    _this.setState({ pos: null });
                }
            };
            _this.state = {
                pos: null,
                menuGroups: [],
            };
            _this.addEvent();
            return _this;
        }
        ContextMenu.prototype.addEvent = function () {
            var _this = this;
            this.props.eventEmitter.listen('contextmenu', function (_a) {
                var pos = _a.pos, menuGroups = _a.menuGroups;
                _this.setState({ pos: pos, menuGroups: menuGroups });
            });
        };
        ContextMenu.prototype.mounted = function () {
            document.addEventListener('click', this.handleClickDocument);
        };
        ContextMenu.prototype.beforeDestroy = function () {
            document.removeEventListener('click', this.handleClickDocument);
        };
        ContextMenu.prototype.getMenuGroupElements = function () {
            var _this = this;
            var _a = this.state, pos = _a.pos, menuGroups = _a.menuGroups;
            return pos
                ? menuGroups.reduce(function (acc, group) {
                    var menuItem = [];
                    group.forEach(function (_a) {
                        var label = _a.label, _b = _a.className, className = _b === void 0 ? false : _b, disabled = _a.disabled, onClick = _a.onClick;
                        var handleClick = function () {
                            if (!disabled) {
                                onClick();
                                _this.setState({ pos: null });
                            }
                        };
                        menuItem.push(html(templateObject_1$2 || (templateObject_1$2 = __makeTemplateObject(["\n                <li onClick=", " class=\"menu-item", "\">\n                  <span class=\"", "\">", "</span>\n                </li>\n              "], ["\n                <li onClick=", " class=\"menu-item", "\">\n                  <span class=\"", "\">", "</span>\n                </li>\n              "])), handleClick, disabled ? ' disabled' : '', className, label));
                    });
                    acc.push(html(templateObject_2$1 || (templateObject_2$1 = __makeTemplateObject(["<ul class=\"menu-group\">\n              ", "\n            </ul>"], ["<ul class=\"menu-group\">\n              ", "\n            </ul>"])), menuItem));
                    return acc;
                }, [])
                : [];
        };
        ContextMenu.prototype.render = function () {
            var style = __assign$1({ display: this.state.pos ? 'block' : 'none' }, this.state.pos);
            return html(templateObject_3 || (templateObject_3 = __makeTemplateObject(["<div class=\"", "\" style=", ">\n      ", "\n    </div>"], ["<div class=\"", "\" style=", ">\n      ", "\n    </div>"])), cls('context-menu'), style, this.getMenuGroupElements());
        };
        return ContextMenu;
    }(Component));
    var templateObject_1$2, templateObject_2$1, templateObject_3;

    var Layout = /** @class */ (function (_super) {
        __extends$1(Layout, _super);
        function Layout(props) {
            var _this = _super.call(this, props) || this;
            _this.changeMode = function (editorType) {
                if (editorType !== _this.state.editorType) {
                    _this.setState({ editorType: editorType });
                }
            };
            _this.changePreviewStyle = function (previewStyle) {
                if (previewStyle !== _this.state.previewStyle) {
                    _this.setState({ previewStyle: previewStyle });
                }
            };
            _this.hide = function () {
                _this.setState({ hide: true });
            };
            _this.show = function () {
                _this.setState({ hide: false });
            };
            var editorType = props.editorType, previewStyle = props.previewStyle;
            _this.state = {
                editorType: editorType,
                previewStyle: previewStyle,
                hide: false,
            };
            _this.addEvent();
            return _this;
        }
        Layout.prototype.mounted = function () {
            var _a = this.props.slots, wwEditor = _a.wwEditor, mdEditor = _a.mdEditor, mdPreview = _a.mdPreview;
            this.refs.wwContainer.appendChild(wwEditor);
            this.refs.mdContainer.insertAdjacentElement('afterbegin', mdEditor);
            this.refs.mdContainer.appendChild(mdPreview);
        };
        Layout.prototype.insertToolbarItem = function (indexList, item) {
            this.toolbar.insertToolbarItem(indexList, item);
        };
        Layout.prototype.removeToolbarItem = function (name) {
            this.toolbar.removeToolbarItem(name);
        };
        Layout.prototype.render = function () {
            var _this = this;
            var _a = this.props, eventEmitter = _a.eventEmitter, hideModeSwitch = _a.hideModeSwitch, toolbarItems = _a.toolbarItems, theme = _a.theme;
            var _b = this.state, hide = _b.hide, previewStyle = _b.previewStyle, editorType = _b.editorType;
            var displayClassName = hide ? ' hidden' : '';
            var editorTypeClassName = cls(editorType === 'markdown' ? 'md-mode' : 'ww-mode');
            var previewClassName = cls('md') + "-" + previewStyle + "-style";
            var themeClassName = cls([theme !== 'light', theme + " "]);
            return html(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n      <div\n        class=\"", "", "", "\"\n        ref=", "\n      >\n        <", "\n          ref=", "\n          eventEmitter=", "\n          previewStyle=", "\n          toolbarItems=", "\n          editorType=", "\n        />\n        <div\n          class=\"", " ", "\"\n          ref=", "\n        >\n          <div\n            class=\"", " ", "\"\n            ref=", "\n          >\n            <div class=\"", "\"></div>\n          </div>\n          <div\n            class=\"", "\"\n            ref=", "\n          />\n        </div>\n        ", "\n        <", " eventEmitter=", " />\n      </div>\n    "], ["\n      <div\n        class=\"", "", "", "\"\n        ref=", "\n      >\n        <", "\n          ref=", "\n          eventEmitter=", "\n          previewStyle=", "\n          toolbarItems=", "\n          editorType=", "\n        />\n        <div\n          class=\"", " ", "\"\n          ref=", "\n        >\n          <div\n            class=\"", " ", "\"\n            ref=", "\n          >\n            <div class=\"", "\"></div>\n          </div>\n          <div\n            class=\"", "\"\n            ref=", "\n          />\n        </div>\n        ",
                "\n        <", " eventEmitter=", " />\n      </div>\n    "])), themeClassName, cls('defaultUI'), displayClassName, function (el) { return (_this.refs.el = el); }, Toolbar, function (toolbar) { return (_this.toolbar = toolbar); }, eventEmitter, previewStyle, toolbarItems, editorType, cls('main'), editorTypeClassName, function (el) { return (_this.refs.editorSection = el); }, cls('md-container'), previewClassName, function (el) { return (_this.refs.mdContainer = el); }, cls('md-splitter'), cls('ww-container'), function (el) { return (_this.refs.wwContainer = el); }, !hideModeSwitch && html(templateObject_1$1 || (templateObject_1$1 = __makeTemplateObject(["<", " eventEmitter=", " editorType=", " />"], ["<", " eventEmitter=", " editorType=", " />"])), Switch, eventEmitter, editorType), ContextMenu, eventEmitter);
        };
        Layout.prototype.addEvent = function () {
            var eventEmitter = this.props.eventEmitter;
            eventEmitter.listen('hide', this.hide);
            eventEmitter.listen('show', this.show);
            eventEmitter.listen('changeMode', this.changeMode);
            eventEmitter.listen('changePreviewStyle', this.changePreviewStyle);
        };
        return Layout;
    }(Component));
    var templateObject_1$1, templateObject_2;

    /**
     * ToastUI Editor
     * @extends ToastUIEditorCore
     */
    var ToastUIEditor = /** @class */ (function (_super) {
        __extends$1(ToastUIEditor, _super);
        function ToastUIEditor(options) {
            var _a;
            var _this = _super.call(this, options) || this;
            var layoutComp;
            var destroy = render(_this.options.el, html(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n        <", "\n          ref=", "\n          eventEmitter=", "\n          slots=", "\n          hideModeSwitch=", "\n          toolbarItems=", "\n          previewStyle=", "\n          editorType=", "\n          theme=", "\n        />\n      "], ["\n        <", "\n          ref=", "\n          eventEmitter=", "\n          slots=", "\n          hideModeSwitch=", "\n          toolbarItems=", "\n          previewStyle=", "\n          editorType=", "\n          theme=", "\n        />\n      "])), Layout, function (layout) { return (layoutComp = layout); }, _this.eventEmitter, _this.getEditorElements(), _this.options.hideModeSwitch, _this.options.toolbarItems, _this.options.previewStyle, _this.options.initialEditType, _this.options.theme));
            _this.setMinHeight(_this.options.minHeight);
            _this.setHeight(_this.options.height);
            _this.defaultUI = {
                insertToolbarItem: layoutComp.insertToolbarItem.bind(layoutComp),
                removeToolbarItem: layoutComp.removeToolbarItem.bind(layoutComp),
                destroy: destroy,
            };
            (_a = _this.pluginInfo.toolbarItems) === null || _a === void 0 ? void 0 : _a.forEach(function (toolbarItem) {
                var groupIndex = toolbarItem.groupIndex, itemIndex = toolbarItem.itemIndex, item = toolbarItem.item;
                _this.defaultUI.insertToolbarItem({ groupIndex: groupIndex, itemIndex: itemIndex }, item);
            });
            return _this;
        }
        /**
         * Factory method for Editor
         * @param {object} options Option for initialize TUIEditor
         * @returns {object} ToastUIEditor or ToastUIEditorViewer
         */
        ToastUIEditor.factory = function (options) {
            return options.viewer ? new ToastUIEditorViewer(options) : new ToastUIEditor(options);
        };
        /**
         * add toolbar item
         * @param {Object} indexInfo group index and item index of the toolbar item
         * @param {string|Object} item toolbar item
         */
        ToastUIEditor.prototype.insertToolbarItem = function (indexInfo, item) {
            this.defaultUI.insertToolbarItem(indexInfo, item);
        };
        /**
         * Remove toolbar item
         * @param {string} itemName toolbar item name
         */
        ToastUIEditor.prototype.removeToolbarItem = function (itemName) {
            this.defaultUI.removeToolbarItem(itemName);
        };
        /**
         * Destroy TUIEditor from document
         */
        ToastUIEditor.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
            this.defaultUI.destroy();
        };
        return ToastUIEditor;
    }(ToastUIEditorCore));
    var templateObject_1;

    /**
     * @fileoverview I18N for English
     * @author NHN FE Development Lab <dl_javascript@nhn.com>
     */
    ToastUIEditorCore.setLanguage(['en', 'en-US'], {
        Markdown: 'Markdown',
        WYSIWYG: 'WYSIWYG',
        Write: 'Write',
        Preview: 'Preview',
        Headings: 'Headings',
        Paragraph: 'Paragraph',
        Bold: 'Bold',
        Italic: 'Italic',
        Strike: 'Strike',
        Code: 'Inline code',
        Line: 'Line',
        Blockquote: 'Blockquote',
        'Unordered list': 'Unordered list',
        'Ordered list': 'Ordered list',
        Task: 'Task',
        Indent: 'Indent',
        Outdent: 'Outdent',
        'Insert link': 'Insert link',
        'Insert CodeBlock': 'Insert codeBlock',
        'Insert table': 'Insert table',
        'Insert image': 'Insert image',
        Heading: 'Heading',
        'Image URL': 'Image URL',
        'Select image file': 'Select image file',
        'Choose a file': 'Choose a file',
        'No file': 'No file',
        Description: 'Description',
        OK: 'OK',
        More: 'More',
        Cancel: 'Cancel',
        File: 'File',
        URL: 'URL',
        'Link text': 'Link text',
        'Add row to up': 'Add row to up',
        'Add row to down': 'Add row to down',
        'Add column to left': 'Add column to left',
        'Add column to right': 'Add column to right',
        'Remove row': 'Remove row',
        'Remove column': 'Remove column',
        'Align column to left': 'Align column to left',
        'Align column to center': 'Align column to center',
        'Align column to right': 'Align column to right',
        'Remove table': 'Remove table',
        'Would you like to paste as table?': 'Would you like to paste as table?',
        'Text color': 'Text color',
        'Auto scroll enabled': 'Auto scroll enabled',
        'Auto scroll disabled': 'Auto scroll disabled',
        'Choose language': 'Choose language',
    });

    function flip(node, animation, params = {}) {
        const style = getComputedStyle(node);
        const transform = style.transform === 'none' ? '' : style.transform;
        const scaleX = animation.from.width / node.clientWidth;
        const scaleY = animation.from.height / node.clientHeight;
        const dx = (animation.from.left - animation.to.left) / scaleX;
        const dy = (animation.from.top - animation.to.top) / scaleY;
        const d = Math.sqrt(dx * dx + dy * dy);
        const { delay = 0, duration = (d) => Math.sqrt(d) * 120, easing = cubicOut } = params;
        return {
            delay,
            duration: is_function(duration) ? duration(d) : duration,
            easing,
            css: (_t, u) => `transform: ${transform} translate(${u * dx}px, ${u * dy}px);`
        };
    }

    /* src\shared\FlipButton.svelte generated by Svelte v3.41.0 */

    const file$f = "src\\shared\\FlipButton.svelte";

    function create_fragment$i(ctx) {
    	let button;
    	let span;
    	let t_value = /*options*/ ctx[1][/*curOption*/ ctx[0]] + "";
    	let t;
    	let button_style_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			span = element("span");
    			t = text$2(t_value);
    			attr_dev(span, "class", "svelte-965ln3");
    			toggle_class(span, "playAni", /*playAni*/ ctx[4]);
    			add_location(span, file$f, 28, 2, 624);
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "flipButton svelte-965ln3");

    			attr_dev(button, "style", button_style_value = Array.isArray(/*optionStyles*/ ctx[2]) && /*optionStyles*/ ctx[2][/*curOption*/ ctx[0]] !== null
    			? /*optionStyles*/ ctx[2][/*curOption*/ ctx[0]]
    			: '');

    			toggle_class(button, "disabled", /*disabled*/ ctx[3]);
    			add_location(button, file$f, 21, 0, 411);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, span);
    			append_dev(span, t);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*handleClick*/ ctx[5], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*options, curOption*/ 3 && t_value !== (t_value = /*options*/ ctx[1][/*curOption*/ ctx[0]] + "")) set_data_dev(t, t_value);

    			if (dirty & /*playAni*/ 16) {
    				toggle_class(span, "playAni", /*playAni*/ ctx[4]);
    			}

    			if (dirty & /*optionStyles, curOption*/ 5 && button_style_value !== (button_style_value = Array.isArray(/*optionStyles*/ ctx[2]) && /*optionStyles*/ ctx[2][/*curOption*/ ctx[0]] !== null
    			? /*optionStyles*/ ctx[2][/*curOption*/ ctx[0]]
    			: '')) {
    				attr_dev(button, "style", button_style_value);
    			}

    			if (dirty & /*disabled*/ 8) {
    				toggle_class(button, "disabled", /*disabled*/ ctx[3]);
    			}
    		},
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$i.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$i($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('FlipButton', slots, []);
    	let { options = ['on', 'off'] } = $$props;
    	let { curOption = 0 } = $$props;
    	let { optionStyles = [] } = $$props;

    	let { onClick = () => {
    		
    	} } = $$props;

    	let { disabled = false } = $$props;
    	let playAni = false;

    	function handleClick() {
    		if (!disabled) {
    			$$invalidate(4, playAni = true);

    			if ($$invalidate(0, ++curOption) >= options.length) {
    				$$invalidate(0, curOption = 0);
    			}

    			setTimeout(() => $$invalidate(4, playAni = false), 400);
    			onClick();
    		}
    	}

    	const writable_props = ['options', 'curOption', 'optionStyles', 'onClick', 'disabled'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<FlipButton> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('options' in $$props) $$invalidate(1, options = $$props.options);
    		if ('curOption' in $$props) $$invalidate(0, curOption = $$props.curOption);
    		if ('optionStyles' in $$props) $$invalidate(2, optionStyles = $$props.optionStyles);
    		if ('onClick' in $$props) $$invalidate(6, onClick = $$props.onClick);
    		if ('disabled' in $$props) $$invalidate(3, disabled = $$props.disabled);
    	};

    	$$self.$capture_state = () => ({
    		options,
    		curOption,
    		optionStyles,
    		onClick,
    		disabled,
    		playAni,
    		handleClick
    	});

    	$$self.$inject_state = $$props => {
    		if ('options' in $$props) $$invalidate(1, options = $$props.options);
    		if ('curOption' in $$props) $$invalidate(0, curOption = $$props.curOption);
    		if ('optionStyles' in $$props) $$invalidate(2, optionStyles = $$props.optionStyles);
    		if ('onClick' in $$props) $$invalidate(6, onClick = $$props.onClick);
    		if ('disabled' in $$props) $$invalidate(3, disabled = $$props.disabled);
    		if ('playAni' in $$props) $$invalidate(4, playAni = $$props.playAni);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [curOption, options, optionStyles, disabled, playAni, handleClick, onClick];
    }

    class FlipButton extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$i, create_fragment$i, safe_not_equal, {
    			options: 1,
    			curOption: 0,
    			optionStyles: 2,
    			onClick: 6,
    			disabled: 3
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "FlipButton",
    			options,
    			id: create_fragment$i.name
    		});
    	}

    	get options() {
    		throw new Error("<FlipButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set options(value) {
    		throw new Error("<FlipButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get curOption() {
    		throw new Error("<FlipButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set curOption(value) {
    		throw new Error("<FlipButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get optionStyles() {
    		throw new Error("<FlipButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set optionStyles(value) {
    		throw new Error("<FlipButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onClick() {
    		throw new Error("<FlipButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onClick(value) {
    		throw new Error("<FlipButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get disabled() {
    		throw new Error("<FlipButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disabled(value) {
    		throw new Error("<FlipButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\shared\HeroFinder.svelte generated by Svelte v3.41.0 */

    const { Error: Error_1$6, Object: Object_1$2 } = globals;
    const file$e = "src\\shared\\HeroFinder.svelte";

    function get_each_context$b(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[93] = list[i];
    	return child_ctx;
    }

    function get_each_context_3$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[93] = list[i];
    	return child_ctx;
    }

    function get_each_context_2$4(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[93] = list[i];
    	return child_ctx;
    }

    function get_each_context_5$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[93] = list[i];
    	return child_ctx;
    }

    function get_each_context_4$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[93] = list[i];
    	return child_ctx;
    }

    function get_each_context_7$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[93] = list[i];
    	return child_ctx;
    }

    function get_each_context_6$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[93] = list[i];
    	child_ctx[108] = i;
    	return child_ctx;
    }

    function get_each_context_1$6(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[96] = list[i];
    	return child_ctx;
    }

    // (428:26) 
    function create_if_block_1$5(ctx) {
    	let div18;
    	let div0;
    	let button0;
    	let span0;
    	let t1;
    	let button1;
    	let span1;
    	let t3;
    	let div17;
    	let div1;
    	let t4_value = /*$HeroData*/ ctx[29].find(/*func*/ ctx[69]).name + "";
    	let t4;
    	let t5;
    	let div5;
    	let div2;
    	let flipbutton0;
    	let t6;
    	let div3;
    	let img;
    	let img_src_value;
    	let img_alt_value;
    	let t7;
    	let div4;
    	let flipbutton1;
    	let t8;
    	let div6;
    	let flipbutton2;
    	let t9;
    	let div7;
    	let button2;
    	let span2;
    	let t11;
    	let h40;
    	let t13;
    	let div9;
    	let textarea;
    	let textarea_maxlength_value;
    	let t14;
    	let div8;
    	let span3;
    	let t15_value = /*selectedHero*/ ctx[17].notes.length + "";
    	let t15;
    	let t16;
    	let t17_value = /*$AppData*/ ctx[31].maxNoteLen + "";
    	let t17;
    	let t18;
    	let h41;
    	let t20;
    	let div16;
    	let div11;
    	let h50;
    	let t22;
    	let div10;
    	let t23;
    	let div13;
    	let h51;
    	let t25;
    	let div12;
    	let t26;
    	let div15;
    	let h52;
    	let t28;
    	let div14;
    	let current;
    	let mounted;
    	let dispose;

    	flipbutton0 = new FlipButton({
    			props: {
    				options: [
    					'SI OFF',
    					'SI +0',
    					'SI +5',
    					'SI +10',
    					'SI +15',
    					'SI +20',
    					'SI +25',
    					'SI +30'
    				],
    				optionStyles: [
    					'background-color: #6B8DF2; color: white; border: 3px solid #6B8DF2; border-radius: 10px; padding: 5px; width: 75px; font-size: 1.05rem;',
    					'background-color: #6B8DF2; color: white; border: 3px solid #6B8DF2; border-radius: 10px; padding: 5px; width: 75px; font-size: 1.05rem;',
    					'background-color: #6B8DF2; color: white; border: 3px solid #6B8DF2; border-radius: 10px; padding: 5px; width: 75px; font-size: 1.05rem;',
    					'background-color: #6B8DF2; color: white; border: 3px solid #6B8DF2; border-radius: 10px; padding: 5px; width: 75px; font-size: 1.05rem;',
    					'background-color: #6B8DF2; color: white; border: 3px solid #6B8DF2; border-radius: 10px; padding: 5px; width: 75px; font-size: 1.05rem;',
    					'background-color: #6B8DF2; color: white; border: 3px solid #6B8DF2; border-radius: 10px; padding: 5px; width: 75px; font-size: 1.05rem;',
    					'background-color: #6B8DF2; color: white; border: 3px solid #6B8DF2; border-radius: 10px; padding: 5px; width: 75px; font-size: 1.05rem;',
    					'background-color: #6B8DF2; color: white; border: 3px solid #6B8DF2; border-radius: 10px; padding: 5px; width: 75px; font-size: 1.05rem;'
    				],
    				curOption: /*selectedHero*/ ctx[17].si === -1
    				? 0
    				: Math.floor(/*selectedHero*/ ctx[17].si / 5) + 1,
    				onClick: /*handleSIChange*/ ctx[34]
    			},
    			$$inline: true
    		});

    	flipbutton1 = new FlipButton({
    			props: {
    				options: ['0f', '3f', '9f'],
    				optionStyles: [
    					'background-color: #6B8DF2; color: white; border: 3px solid #6B8DF2; border-radius: 10px; padding: 5px; width: 50px; font-size: 1.05rem;',
    					'background-color: #6B8DF2; color: white; border: 3px solid #6B8DF2; border-radius: 10px; padding: 5px; width: 50px; font-size: 1.05rem;',
    					'background-color: #6B8DF2; color: white; border: 3px solid #6B8DF2; border-radius: 10px; padding: 5px; width: 50px; font-size: 1.05rem;'
    				],
    				curOption: /*selectedHero*/ ctx[17].furn === 0
    				? 0
    				: /*selectedHero*/ ctx[17].furn === 3 ? 1 : 2,
    				onClick: /*handleFurnChange*/ ctx[36]
    			},
    			$$inline: true
    		});

    	flipbutton2 = new FlipButton({
    			props: {
    				options: [
    					'Elite',
    					'Elite+',
    					'Legendary',
    					'Legendary+',
    					'Mythic',
    					'Mythic+',
    					'Ascended'
    				],
    				optionStyles: [
    					'background-color: #AF3CEA; color: white; border: 3px solid #AF3CEA; border-radius: 10px; padding: 7px 20px; font-size: 1.1rem; font-weight: bold;',
    					'background-color: #AF3CEA; color: white; border: 3px solid #6D2691; border-radius: 10px; padding: 7px 20px; font-size: 1.1rem; font-weight: bold;',
    					'background-color: #F7BC19; color: white; border: 3px solid #F7BC19; border-radius: 10px; padding: 7px 20px; font-size: 1.1rem; font-weight: bold;',
    					'background-color: #F7BC19; color: white; border: 3px solid #E0920B; border-radius: 10px; padding: 7px 20px; font-size: 1.1rem; font-weight: bold;',
    					'background-color: #E60B51; color: white; border: 3px solid #E60B51; border-radius: 10px; padding: 7px 20px; font-size: 1.1rem; font-weight: bold;',
    					'background-color: #E60B51; color: white; border: 3px solid #A6083A; border-radius: 10px; padding: 7px 20px; font-size: 1.1rem; font-weight: bold;',
    					'background: linear-gradient(#91BDFF, transparent), linear-gradient(-45deg, #E196FF, transparent), linear-gradient(45deg, #B1A3FE, transparent); background-blend-mode: multiply; color: white; border: 3px solid #B289E8; border-radius: 10px; padding: 7px 20px; font-size: 1.1rem; font-weight: bold;'
    				],
    				curOption: /*selectedHero*/ ctx[17].ascendLv,
    				onClick: /*handleAscChange*/ ctx[35]
    			},
    			$$inline: true
    		});

    	function select_block_type_1(ctx, dirty) {
    		if (!/*pickArtifactPri*/ ctx[20]) return create_if_block_6$2;
    		return create_else_block_2$3;
    	}

    	let current_block_type = select_block_type_1(ctx);
    	let if_block0 = current_block_type(ctx);

    	function select_block_type_2(ctx, dirty) {
    		if (!/*pickArtifactSec*/ ctx[21]) return create_if_block_4$5;
    		return create_else_block_1$4;
    	}

    	let current_block_type_1 = select_block_type_2(ctx);
    	let if_block1 = current_block_type_1(ctx);

    	function select_block_type_3(ctx, dirty) {
    		if (!/*pickArtifactSit*/ ctx[22]) return create_if_block_2$5;
    		return create_else_block$8;
    	}

    	let current_block_type_2 = select_block_type_3(ctx);
    	let if_block2 = current_block_type_2(ctx);

    	const block = {
    		c: function create() {
    			div18 = element("div");
    			div0 = element("div");
    			button0 = element("button");
    			span0 = element("span");
    			span0.textContent = "< Heroes";
    			t1 = space();
    			button1 = element("button");
    			span1 = element("span");
    			span1.textContent = "Save";
    			t3 = space();
    			div17 = element("div");
    			div1 = element("div");
    			t4 = text$2(t4_value);
    			t5 = space();
    			div5 = element("div");
    			div2 = element("div");
    			create_component(flipbutton0.$$.fragment);
    			t6 = space();
    			div3 = element("div");
    			img = element("img");
    			t7 = space();
    			div4 = element("div");
    			create_component(flipbutton1.$$.fragment);
    			t8 = space();
    			div6 = element("div");
    			create_component(flipbutton2.$$.fragment);
    			t9 = space();
    			div7 = element("div");
    			button2 = element("button");
    			span2 = element("span");
    			span2.textContent = "Core";
    			t11 = space();
    			h40 = element("h4");
    			h40.textContent = "Notes";
    			t13 = space();
    			div9 = element("div");
    			textarea = element("textarea");
    			t14 = space();
    			div8 = element("div");
    			span3 = element("span");
    			t15 = text$2(t15_value);
    			t16 = text$2("/");
    			t17 = text$2(t17_value);
    			t18 = space();
    			h41 = element("h4");
    			h41.textContent = "Artifacts";
    			t20 = space();
    			div16 = element("div");
    			div11 = element("div");
    			h50 = element("h5");
    			h50.textContent = "Primary";
    			t22 = space();
    			div10 = element("div");
    			if_block0.c();
    			t23 = space();
    			div13 = element("div");
    			h51 = element("h5");
    			h51.textContent = "Secondary";
    			t25 = space();
    			div12 = element("div");
    			if_block1.c();
    			t26 = space();
    			div15 = element("div");
    			h52 = element("h5");
    			h52.textContent = "Situational";
    			t28 = space();
    			div14 = element("div");
    			if_block2.c();
    			add_location(span0, file$e, 430, 80, 17153);
    			attr_dev(button0, "type", "button");
    			attr_dev(button0, "class", "backButton svelte-1sbefv2");
    			add_location(button0, file$e, 430, 5, 17078);
    			add_location(span1, file$e, 431, 74, 17262);
    			attr_dev(button1, "type", "button");
    			attr_dev(button1, "class", "saveButton svelte-1sbefv2");
    			add_location(button1, file$e, 431, 5, 17193);
    			attr_dev(div0, "class", "heroEditHead svelte-1sbefv2");
    			add_location(div0, file$e, 429, 4, 17045);
    			attr_dev(div1, "class", "heroName svelte-1sbefv2");
    			add_location(div1, file$e, 434, 5, 17337);
    			attr_dev(div2, "class", "siFlipButtonArea svelte-1sbefv2");
    			add_location(div2, file$e, 436, 6, 17458);
    			attr_dev(img, "class", "editorPortrait svelte-1sbefv2");
    			if (!src_url_equal(img.src, img_src_value = /*$HeroData*/ ctx[29].find(/*func_1*/ ctx[70]).portrait)) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", img_alt_value = /*$HeroData*/ ctx[29].find(/*func_2*/ ctx[71]).name);
    			add_location(img, file$e, 452, 7, 19020);
    			attr_dev(div3, "class", "portraitContainer svelte-1sbefv2");
    			add_location(div3, file$e, 451, 6, 18980);
    			attr_dev(div4, "class", "furnFlipButtonArea svelte-1sbefv2");
    			add_location(div4, file$e, 454, 6, 19192);
    			attr_dev(div5, "class", "portraitArea svelte-1sbefv2");
    			add_location(div5, file$e, 435, 5, 17424);
    			attr_dev(div6, "class", "ascFlipButtonArea svelte-1sbefv2");
    			add_location(div6, file$e, 465, 5, 19922);
    			add_location(span2, file$e, 480, 132, 21631);
    			attr_dev(button2, "type", "button");
    			attr_dev(button2, "class", "coreButton svelte-1sbefv2");
    			toggle_class(button2, "on", /*selectedHero*/ ctx[17].core);
    			add_location(button2, file$e, 480, 6, 21505);
    			attr_dev(div7, "class", "coreArea svelte-1sbefv2");
    			add_location(div7, file$e, 479, 5, 21475);
    			attr_dev(h40, "class", "svelte-1sbefv2");
    			add_location(h40, file$e, 482, 5, 21677);
    			attr_dev(textarea, "class", "notesEditor svelte-1sbefv2");
    			attr_dev(textarea, "maxlength", textarea_maxlength_value = /*$AppData*/ ctx[31].maxNoteLen);
    			add_location(textarea, file$e, 484, 6, 21729);
    			add_location(span3, file$e, 485, 96, 21932);
    			attr_dev(div8, "class", "noteLimitArea svelte-1sbefv2");
    			toggle_class(div8, "maxed", /*selectedHero*/ ctx[17].notes.length >= /*$AppData*/ ctx[31].maxNoteLen);
    			add_location(div8, file$e, 485, 6, 21842);
    			attr_dev(div9, "class", "notesArea svelte-1sbefv2");
    			add_location(div9, file$e, 483, 5, 21698);
    			attr_dev(h41, "class", "svelte-1sbefv2");
    			add_location(h41, file$e, 487, 5, 22020);
    			attr_dev(h50, "class", "svelte-1sbefv2");
    			add_location(h50, file$e, 490, 7, 22115);
    			attr_dev(div10, "class", "artifactLine priArtifactLine svelte-1sbefv2");
    			add_location(div10, file$e, 491, 7, 22140);
    			attr_dev(div11, "class", "gridCell svelte-1sbefv2");
    			add_location(div11, file$e, 489, 6, 22084);
    			attr_dev(h51, "class", "svelte-1sbefv2");
    			add_location(h51, file$e, 518, 7, 23477);
    			attr_dev(div12, "class", "artifactLine secArtifactLine svelte-1sbefv2");
    			add_location(div12, file$e, 519, 7, 23504);
    			attr_dev(div13, "class", "gridCell svelte-1sbefv2");
    			add_location(div13, file$e, 517, 6, 23446);
    			attr_dev(h52, "class", "svelte-1sbefv2");
    			add_location(h52, file$e, 546, 7, 24844);
    			attr_dev(div14, "class", "artifactLine sitArtifactLine svelte-1sbefv2");
    			add_location(div14, file$e, 547, 7, 24873);
    			attr_dev(div15, "class", "gridCell svelte-1sbefv2");
    			add_location(div15, file$e, 545, 6, 24813);
    			attr_dev(div16, "class", "selectedArtifacts svelte-1sbefv2");
    			add_location(div16, file$e, 488, 5, 22045);
    			attr_dev(div17, "class", "heroEditor svelte-1sbefv2");
    			add_location(div17, file$e, 433, 4, 17306);
    			attr_dev(div18, "class", "section2");
    			add_location(div18, file$e, 428, 3, 17017);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div18, anchor);
    			append_dev(div18, div0);
    			append_dev(div0, button0);
    			append_dev(button0, span0);
    			append_dev(div0, t1);
    			append_dev(div0, button1);
    			append_dev(button1, span1);
    			append_dev(div18, t3);
    			append_dev(div18, div17);
    			append_dev(div17, div1);
    			append_dev(div1, t4);
    			append_dev(div17, t5);
    			append_dev(div17, div5);
    			append_dev(div5, div2);
    			mount_component(flipbutton0, div2, null);
    			append_dev(div5, t6);
    			append_dev(div5, div3);
    			append_dev(div3, img);
    			append_dev(div5, t7);
    			append_dev(div5, div4);
    			mount_component(flipbutton1, div4, null);
    			append_dev(div17, t8);
    			append_dev(div17, div6);
    			mount_component(flipbutton2, div6, null);
    			append_dev(div17, t9);
    			append_dev(div17, div7);
    			append_dev(div7, button2);
    			append_dev(button2, span2);
    			append_dev(div17, t11);
    			append_dev(div17, h40);
    			append_dev(div17, t13);
    			append_dev(div17, div9);
    			append_dev(div9, textarea);
    			set_input_value(textarea, /*selectedHero*/ ctx[17].notes);
    			append_dev(div9, t14);
    			append_dev(div9, div8);
    			append_dev(div8, span3);
    			append_dev(span3, t15);
    			append_dev(span3, t16);
    			append_dev(span3, t17);
    			append_dev(div17, t18);
    			append_dev(div17, h41);
    			append_dev(div17, t20);
    			append_dev(div17, div16);
    			append_dev(div16, div11);
    			append_dev(div11, h50);
    			append_dev(div11, t22);
    			append_dev(div11, div10);
    			if_block0.m(div10, null);
    			append_dev(div16, t23);
    			append_dev(div16, div13);
    			append_dev(div13, h51);
    			append_dev(div13, t25);
    			append_dev(div13, div12);
    			if_block1.m(div12, null);
    			append_dev(div16, t26);
    			append_dev(div16, div15);
    			append_dev(div15, h52);
    			append_dev(div15, t28);
    			append_dev(div15, div14);
    			if_block2.m(div14, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(button0, "click", /*click_handler_20*/ ctx[67], false, false, false),
    					listen_dev(button1, "click", /*click_handler_21*/ ctx[68], false, false, false),
    					listen_dev(button2, "click", /*click_handler_22*/ ctx[72], false, false, false),
    					listen_dev(textarea, "input", /*textarea_input_handler*/ ctx[73])
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if ((!current || dirty[0] & /*$HeroData, selectedHero*/ 537001984) && t4_value !== (t4_value = /*$HeroData*/ ctx[29].find(/*func*/ ctx[69]).name + "")) set_data_dev(t4, t4_value);
    			const flipbutton0_changes = {};

    			if (dirty[0] & /*selectedHero*/ 131072) flipbutton0_changes.curOption = /*selectedHero*/ ctx[17].si === -1
    			? 0
    			: Math.floor(/*selectedHero*/ ctx[17].si / 5) + 1;

    			flipbutton0.$set(flipbutton0_changes);

    			if (!current || dirty[0] & /*$HeroData, selectedHero*/ 537001984 && !src_url_equal(img.src, img_src_value = /*$HeroData*/ ctx[29].find(/*func_1*/ ctx[70]).portrait)) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if (!current || dirty[0] & /*$HeroData, selectedHero*/ 537001984 && img_alt_value !== (img_alt_value = /*$HeroData*/ ctx[29].find(/*func_2*/ ctx[71]).name)) {
    				attr_dev(img, "alt", img_alt_value);
    			}

    			const flipbutton1_changes = {};

    			if (dirty[0] & /*selectedHero*/ 131072) flipbutton1_changes.curOption = /*selectedHero*/ ctx[17].furn === 0
    			? 0
    			: /*selectedHero*/ ctx[17].furn === 3 ? 1 : 2;

    			flipbutton1.$set(flipbutton1_changes);
    			const flipbutton2_changes = {};
    			if (dirty[0] & /*selectedHero*/ 131072) flipbutton2_changes.curOption = /*selectedHero*/ ctx[17].ascendLv;
    			flipbutton2.$set(flipbutton2_changes);

    			if (dirty[0] & /*selectedHero*/ 131072) {
    				toggle_class(button2, "on", /*selectedHero*/ ctx[17].core);
    			}

    			if (!current || dirty[1] & /*$AppData*/ 1 && textarea_maxlength_value !== (textarea_maxlength_value = /*$AppData*/ ctx[31].maxNoteLen)) {
    				attr_dev(textarea, "maxlength", textarea_maxlength_value);
    			}

    			if (dirty[0] & /*selectedHero*/ 131072) {
    				set_input_value(textarea, /*selectedHero*/ ctx[17].notes);
    			}

    			if ((!current || dirty[0] & /*selectedHero*/ 131072) && t15_value !== (t15_value = /*selectedHero*/ ctx[17].notes.length + "")) set_data_dev(t15, t15_value);
    			if ((!current || dirty[1] & /*$AppData*/ 1) && t17_value !== (t17_value = /*$AppData*/ ctx[31].maxNoteLen + "")) set_data_dev(t17, t17_value);

    			if (dirty[0] & /*selectedHero*/ 131072 | dirty[1] & /*$AppData*/ 1) {
    				toggle_class(div8, "maxed", /*selectedHero*/ ctx[17].notes.length >= /*$AppData*/ ctx[31].maxNoteLen);
    			}

    			if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block0) {
    				if_block0.p(ctx, dirty);
    			} else {
    				if_block0.d(1);
    				if_block0 = current_block_type(ctx);

    				if (if_block0) {
    					if_block0.c();
    					if_block0.m(div10, null);
    				}
    			}

    			if (current_block_type_1 === (current_block_type_1 = select_block_type_2(ctx)) && if_block1) {
    				if_block1.p(ctx, dirty);
    			} else {
    				if_block1.d(1);
    				if_block1 = current_block_type_1(ctx);

    				if (if_block1) {
    					if_block1.c();
    					if_block1.m(div12, null);
    				}
    			}

    			if (current_block_type_2 === (current_block_type_2 = select_block_type_3(ctx)) && if_block2) {
    				if_block2.p(ctx, dirty);
    			} else {
    				if_block2.d(1);
    				if_block2 = current_block_type_2(ctx);

    				if (if_block2) {
    					if_block2.c();
    					if_block2.m(div14, null);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(flipbutton0.$$.fragment, local);
    			transition_in(flipbutton1.$$.fragment, local);
    			transition_in(flipbutton2.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(flipbutton0.$$.fragment, local);
    			transition_out(flipbutton1.$$.fragment, local);
    			transition_out(flipbutton2.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div18);
    			destroy_component(flipbutton0);
    			destroy_component(flipbutton1);
    			destroy_component(flipbutton2);
    			if_block0.d();
    			if_block1.d();
    			if_block2.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$5.name,
    		type: "if",
    		source: "(428:26) ",
    		ctx
    	});

    	return block;
    }

    // (351:2) {#if section === 1}
    function create_if_block$b(ctx) {
    	let div9;
    	let div0;
    	let button0;
    	let i;
    	let i_class_value;
    	let span;
    	let t1;
    	let div7;
    	let div2;
    	let div1;
    	let input;
    	let t2;
    	let div6;
    	let div3;
    	let button1;
    	let t4;
    	let button2;
    	let img0;
    	let img0_src_value;
    	let t5;
    	let button3;
    	let img1;
    	let img1_src_value;
    	let t6;
    	let button4;
    	let img2;
    	let img2_src_value;
    	let t7;
    	let button5;
    	let img3;
    	let img3_src_value;
    	let t8;
    	let button6;
    	let img4;
    	let img4_src_value;
    	let t9;
    	let button7;
    	let img5;
    	let img5_src_value;
    	let t10;
    	let button8;
    	let img6;
    	let img6_src_value;
    	let t11;
    	let div4;
    	let button9;
    	let t13;
    	let button10;
    	let img7;
    	let img7_src_value;
    	let t14;
    	let button11;
    	let img8;
    	let img8_src_value;
    	let t15;
    	let button12;
    	let img9;
    	let img9_src_value;
    	let t16;
    	let div5;
    	let button13;
    	let t18;
    	let button14;
    	let img10;
    	let img10_src_value;
    	let t19;
    	let button15;
    	let img11;
    	let img11_src_value;
    	let t20;
    	let button16;
    	let img12;
    	let img12_src_value;
    	let t21;
    	let button17;
    	let img13;
    	let img13_src_value;
    	let t22;
    	let button18;
    	let img14;
    	let img14_src_value;
    	let t23;
    	let div8;
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let mounted;
    	let dispose;
    	let each_value_1 = /*heroes*/ ctx[25];
    	validate_each_argument(each_value_1);
    	const get_key = ctx => /*hero*/ ctx[96].id;
    	validate_each_keys(ctx, each_value_1, get_each_context_1$6, get_key);

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		let child_ctx = get_each_context_1$6(ctx, each_value_1, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block_1$6(key, child_ctx));
    	}

    	const block = {
    		c: function create() {
    			div9 = element("div");
    			div0 = element("div");
    			button0 = element("button");
    			i = element("i");
    			span = element("span");
    			span.textContent = "Search and Filters";
    			t1 = space();
    			div7 = element("div");
    			div2 = element("div");
    			div1 = element("div");
    			input = element("input");
    			t2 = space();
    			div6 = element("div");
    			div3 = element("div");
    			button1 = element("button");
    			button1.textContent = "ALL";
    			t4 = space();
    			button2 = element("button");
    			img0 = element("img");
    			t5 = space();
    			button3 = element("button");
    			img1 = element("img");
    			t6 = space();
    			button4 = element("button");
    			img2 = element("img");
    			t7 = space();
    			button5 = element("button");
    			img3 = element("img");
    			t8 = space();
    			button6 = element("button");
    			img4 = element("img");
    			t9 = space();
    			button7 = element("button");
    			img5 = element("img");
    			t10 = space();
    			button8 = element("button");
    			img6 = element("img");
    			t11 = space();
    			div4 = element("div");
    			button9 = element("button");
    			button9.textContent = "ALL";
    			t13 = space();
    			button10 = element("button");
    			img7 = element("img");
    			t14 = space();
    			button11 = element("button");
    			img8 = element("img");
    			t15 = space();
    			button12 = element("button");
    			img9 = element("img");
    			t16 = space();
    			div5 = element("div");
    			button13 = element("button");
    			button13.textContent = "ALL";
    			t18 = space();
    			button14 = element("button");
    			img10 = element("img");
    			t19 = space();
    			button15 = element("button");
    			img11 = element("img");
    			t20 = space();
    			button16 = element("button");
    			img12 = element("img");
    			t21 = space();
    			button17 = element("button");
    			img13 = element("img");
    			t22 = space();
    			button18 = element("button");
    			img14 = element("img");
    			t23 = space();
    			div8 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(i, "class", i_class_value = "arrow " + (/*openFilters*/ ctx[18] ? 'open' : 'right') + " svelte-1sbefv2");
    			add_location(i, file$e, 353, 93, 11774);
    			add_location(span, file$e, 353, 148, 11829);
    			attr_dev(button0, "type", "button");
    			attr_dev(button0, "class", "filtersButton svelte-1sbefv2");
    			add_location(button0, file$e, 353, 5, 11686);
    			attr_dev(div0, "class", "mobileExpanderTitle");
    			add_location(div0, file$e, 352, 4, 11646);
    			attr_dev(input, "id", "searchBox");
    			attr_dev(input, "type", "search");
    			attr_dev(input, "placeholder", "Search");
    			attr_dev(input, "class", "svelte-1sbefv2");
    			add_location(input, file$e, 358, 7, 12019);
    			attr_dev(div1, "class", "search svelte-1sbefv2");
    			add_location(div1, file$e, 357, 6, 11990);
    			attr_dev(div2, "class", "searchContainer svelte-1sbefv2");
    			add_location(div2, file$e, 356, 5, 11953);
    			attr_dev(button1, "type", "button");
    			attr_dev(button1, "class", "filterMasterButton svelte-1sbefv2");
    			toggle_class(button1, "filterMasterDisabled", !/*allFactionsEnabled*/ ctx[28]);
    			add_location(button1, file$e, 363, 7, 12281);
    			attr_dev(img0, "class", "filterImg svelte-1sbefv2");
    			if (!src_url_equal(img0.src, img0_src_value = "./img/factions/lightbearer.png")) attr_dev(img0, "src", img0_src_value);
    			attr_dev(img0, "alt", "Lightbearer");
    			toggle_class(img0, "filterInactive", !/*showLB*/ ctx[0]);
    			add_location(img0, file$e, 365, 8, 12574);
    			attr_dev(button2, "type", "button");
    			attr_dev(button2, "class", "filterButton svelte-1sbefv2");
    			add_location(button2, file$e, 364, 7, 12458);
    			attr_dev(img1, "class", "filterImg svelte-1sbefv2");
    			if (!src_url_equal(img1.src, img1_src_value = "./img/factions/mauler.png")) attr_dev(img1, "src", img1_src_value);
    			attr_dev(img1, "alt", "Mauler");
    			toggle_class(img1, "filterInactive", !/*showM*/ ctx[1]);
    			add_location(img1, file$e, 368, 8, 12825);
    			attr_dev(button3, "type", "button");
    			attr_dev(button3, "class", "filterButton svelte-1sbefv2");
    			add_location(button3, file$e, 367, 7, 12710);
    			attr_dev(img2, "class", "filterImg svelte-1sbefv2");
    			if (!src_url_equal(img2.src, img2_src_value = "./img/factions/wilder.png")) attr_dev(img2, "src", img2_src_value);
    			attr_dev(img2, "alt", "wilder");
    			toggle_class(img2, "filterInactive", !/*showW*/ ctx[2]);
    			add_location(img2, file$e, 371, 8, 13065);
    			attr_dev(button4, "type", "button");
    			attr_dev(button4, "class", "filterButton svelte-1sbefv2");
    			add_location(button4, file$e, 370, 7, 12950);
    			attr_dev(img3, "class", "filterImg svelte-1sbefv2");
    			if (!src_url_equal(img3.src, img3_src_value = "./img/factions/graveborn.png")) attr_dev(img3, "src", img3_src_value);
    			attr_dev(img3, "alt", "Graveborn");
    			toggle_class(img3, "filterInactive", !/*showGB*/ ctx[3]);
    			add_location(img3, file$e, 374, 8, 13307);
    			attr_dev(button5, "type", "button");
    			attr_dev(button5, "class", "filterButton svelte-1sbefv2");
    			add_location(button5, file$e, 373, 7, 13190);
    			attr_dev(img4, "class", "filterImg svelte-1sbefv2");
    			if (!src_url_equal(img4.src, img4_src_value = "./img/factions/celestial.png")) attr_dev(img4, "src", img4_src_value);
    			attr_dev(img4, "alt", "Celestial");
    			toggle_class(img4, "filterInactive", !/*showC*/ ctx[4]);
    			add_location(img4, file$e, 377, 8, 13554);
    			attr_dev(button6, "type", "button");
    			attr_dev(button6, "class", "filterButton svelte-1sbefv2");
    			add_location(button6, file$e, 376, 7, 13439);
    			attr_dev(img5, "class", "filterImg svelte-1sbefv2");
    			if (!src_url_equal(img5.src, img5_src_value = "./img/factions/hypogean.png")) attr_dev(img5, "src", img5_src_value);
    			attr_dev(img5, "alt", "Hypogean");
    			toggle_class(img5, "filterInactive", !/*showH*/ ctx[5]);
    			add_location(img5, file$e, 380, 8, 13800);
    			attr_dev(button7, "type", "button");
    			attr_dev(button7, "class", "filterButton svelte-1sbefv2");
    			add_location(button7, file$e, 379, 7, 13685);
    			attr_dev(img6, "class", "filterImg svelte-1sbefv2");
    			if (!src_url_equal(img6.src, img6_src_value = "./img/factions/dimensional.png")) attr_dev(img6, "src", img6_src_value);
    			attr_dev(img6, "alt", "Dimensional");
    			toggle_class(img6, "filterInactive", !/*showD*/ ctx[6]);
    			add_location(img6, file$e, 383, 8, 14044);
    			attr_dev(button8, "type", "button");
    			attr_dev(button8, "class", "filterButton svelte-1sbefv2");
    			add_location(button8, file$e, 382, 7, 13929);
    			attr_dev(div3, "class", "filterSection svelte-1sbefv2");
    			add_location(div3, file$e, 362, 6, 12245);
    			attr_dev(button9, "type", "button");
    			attr_dev(button9, "class", "filterMasterButton svelte-1sbefv2");
    			toggle_class(button9, "filterMasterDisabled", !/*allTypesEnabled*/ ctx[27]);
    			add_location(button9, file$e, 387, 7, 14228);
    			attr_dev(img7, "class", "filterImg svelte-1sbefv2");
    			if (!src_url_equal(img7.src, img7_src_value = "./img/types/intelligence.png")) attr_dev(img7, "src", img7_src_value);
    			attr_dev(img7, "alt", "Intelligence");
    			toggle_class(img7, "filterInactive", !/*showInt*/ ctx[7]);
    			add_location(img7, file$e, 389, 8, 14518);
    			attr_dev(button10, "type", "button");
    			attr_dev(button10, "class", "filterButton svelte-1sbefv2");
    			add_location(button10, file$e, 388, 7, 14399);
    			attr_dev(img8, "class", "filterImg svelte-1sbefv2");
    			if (!src_url_equal(img8.src, img8_src_value = "./img/types/agility.png")) attr_dev(img8, "src", img8_src_value);
    			attr_dev(img8, "alt", "Agility");
    			toggle_class(img8, "filterInactive", !/*showAgi*/ ctx[8]);
    			add_location(img8, file$e, 392, 8, 14773);
    			attr_dev(button11, "type", "button");
    			attr_dev(button11, "class", "filterButton svelte-1sbefv2");
    			add_location(button11, file$e, 391, 7, 14654);
    			attr_dev(img9, "class", "filterImg svelte-1sbefv2");
    			if (!src_url_equal(img9.src, img9_src_value = "./img/types/strength.png")) attr_dev(img9, "src", img9_src_value);
    			attr_dev(img9, "alt", "Strength");
    			toggle_class(img9, "filterInactive", !/*showStr*/ ctx[9]);
    			add_location(img9, file$e, 395, 8, 15018);
    			attr_dev(button12, "type", "button");
    			attr_dev(button12, "class", "filterButton svelte-1sbefv2");
    			add_location(button12, file$e, 394, 7, 14899);
    			attr_dev(div4, "class", "filterSection svelte-1sbefv2");
    			add_location(div4, file$e, 386, 6, 14192);
    			attr_dev(button13, "type", "button");
    			attr_dev(button13, "class", "filterMasterButton svelte-1sbefv2");
    			toggle_class(button13, "filterMasterDisabled", !/*allClassEnabled*/ ctx[26]);
    			add_location(button13, file$e, 399, 7, 15195);
    			attr_dev(img10, "class", "filterImg svelte-1sbefv2");
    			if (!src_url_equal(img10.src, img10_src_value = "./img/classes/mage.png")) attr_dev(img10, "src", img10_src_value);
    			attr_dev(img10, "alt", "Mage");
    			toggle_class(img10, "filterInactive", !/*showMage*/ ctx[10]);
    			add_location(img10, file$e, 401, 8, 15488);
    			attr_dev(button14, "type", "button");
    			attr_dev(button14, "class", "filterButton svelte-1sbefv2");
    			add_location(button14, file$e, 400, 7, 15367);
    			attr_dev(img11, "class", "filterImg svelte-1sbefv2");
    			if (!src_url_equal(img11.src, img11_src_value = "./img/classes/warrior.png")) attr_dev(img11, "src", img11_src_value);
    			attr_dev(img11, "alt", "Warrior");
    			toggle_class(img11, "filterInactive", !/*showWar*/ ctx[11]);
    			add_location(img11, file$e, 404, 8, 15730);
    			attr_dev(button15, "type", "button");
    			attr_dev(button15, "class", "filterButton svelte-1sbefv2");
    			add_location(button15, file$e, 403, 7, 15611);
    			attr_dev(img12, "class", "filterImg svelte-1sbefv2");
    			if (!src_url_equal(img12.src, img12_src_value = "./img/classes/tank.png")) attr_dev(img12, "src", img12_src_value);
    			attr_dev(img12, "alt", "Tank");
    			toggle_class(img12, "filterInactive", !/*showTank*/ ctx[12]);
    			add_location(img12, file$e, 407, 8, 15979);
    			attr_dev(button16, "type", "button");
    			attr_dev(button16, "class", "filterButton svelte-1sbefv2");
    			add_location(button16, file$e, 406, 7, 15858);
    			attr_dev(img13, "class", "filterImg svelte-1sbefv2");
    			if (!src_url_equal(img13.src, img13_src_value = "./img/classes/support.png")) attr_dev(img13, "src", img13_src_value);
    			attr_dev(img13, "alt", "Support");
    			toggle_class(img13, "filterInactive", !/*showSup*/ ctx[13]);
    			add_location(img13, file$e, 410, 8, 16221);
    			attr_dev(button17, "type", "button");
    			attr_dev(button17, "class", "filterButton svelte-1sbefv2");
    			add_location(button17, file$e, 409, 7, 16102);
    			attr_dev(img14, "class", "filterImg svelte-1sbefv2");
    			if (!src_url_equal(img14.src, img14_src_value = "./img/classes/ranger.png")) attr_dev(img14, "src", img14_src_value);
    			attr_dev(img14, "alt", "Ranger");
    			toggle_class(img14, "filterInactive", !/*showRan*/ ctx[14]);
    			add_location(img14, file$e, 413, 8, 16468);
    			attr_dev(button18, "type", "button");
    			attr_dev(button18, "class", "filterButton svelte-1sbefv2");
    			add_location(button18, file$e, 412, 7, 16349);
    			attr_dev(div5, "class", "filterSection svelte-1sbefv2");
    			add_location(div5, file$e, 398, 6, 15159);
    			attr_dev(div6, "class", "filters svelte-1sbefv2");
    			add_location(div6, file$e, 361, 5, 12216);
    			attr_dev(div7, "class", "mobileExpander svelte-1sbefv2");
    			toggle_class(div7, "filterOpen", /*openFilters*/ ctx[18]);
    			add_location(div7, file$e, 355, 4, 11887);
    			attr_dev(div8, "class", "heroGrid svelte-1sbefv2");
    			add_location(div8, file$e, 418, 4, 16630);
    			attr_dev(div9, "class", "section1");
    			add_location(div9, file$e, 351, 3, 11618);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div9, anchor);
    			append_dev(div9, div0);
    			append_dev(div0, button0);
    			append_dev(button0, i);
    			append_dev(button0, span);
    			append_dev(div9, t1);
    			append_dev(div9, div7);
    			append_dev(div7, div2);
    			append_dev(div2, div1);
    			append_dev(div1, input);
    			set_input_value(input, /*searchStr*/ ctx[23]);
    			append_dev(div7, t2);
    			append_dev(div7, div6);
    			append_dev(div6, div3);
    			append_dev(div3, button1);
    			append_dev(div3, t4);
    			append_dev(div3, button2);
    			append_dev(button2, img0);
    			append_dev(div3, t5);
    			append_dev(div3, button3);
    			append_dev(button3, img1);
    			append_dev(div3, t6);
    			append_dev(div3, button4);
    			append_dev(button4, img2);
    			append_dev(div3, t7);
    			append_dev(div3, button5);
    			append_dev(button5, img3);
    			append_dev(div3, t8);
    			append_dev(div3, button6);
    			append_dev(button6, img4);
    			append_dev(div3, t9);
    			append_dev(div3, button7);
    			append_dev(button7, img5);
    			append_dev(div3, t10);
    			append_dev(div3, button8);
    			append_dev(button8, img6);
    			append_dev(div6, t11);
    			append_dev(div6, div4);
    			append_dev(div4, button9);
    			append_dev(div4, t13);
    			append_dev(div4, button10);
    			append_dev(button10, img7);
    			append_dev(div4, t14);
    			append_dev(div4, button11);
    			append_dev(button11, img8);
    			append_dev(div4, t15);
    			append_dev(div4, button12);
    			append_dev(button12, img9);
    			append_dev(div6, t16);
    			append_dev(div6, div5);
    			append_dev(div5, button13);
    			append_dev(div5, t18);
    			append_dev(div5, button14);
    			append_dev(button14, img10);
    			append_dev(div5, t19);
    			append_dev(div5, button15);
    			append_dev(button15, img11);
    			append_dev(div5, t20);
    			append_dev(div5, button16);
    			append_dev(button16, img12);
    			append_dev(div5, t21);
    			append_dev(div5, button17);
    			append_dev(button17, img13);
    			append_dev(div5, t22);
    			append_dev(div5, button18);
    			append_dev(button18, img14);
    			append_dev(div9, t23);
    			append_dev(div9, div8);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div8, null);
    			}

    			if (!mounted) {
    				dispose = [
    					listen_dev(button0, "click", /*click_handler*/ ctx[44], false, false, false),
    					listen_dev(input, "input", /*input_input_handler*/ ctx[45]),
    					listen_dev(input, "keyup", /*keyup_handler*/ ctx[46], false, false, false),
    					listen_dev(input, "search", /*search_handler*/ ctx[47], false, false, false),
    					listen_dev(button1, "click", /*click_handler_1*/ ctx[48], false, false, false),
    					listen_dev(button2, "click", /*click_handler_2*/ ctx[49], false, false, false),
    					listen_dev(button3, "click", /*click_handler_3*/ ctx[50], false, false, false),
    					listen_dev(button4, "click", /*click_handler_4*/ ctx[51], false, false, false),
    					listen_dev(button5, "click", /*click_handler_5*/ ctx[52], false, false, false),
    					listen_dev(button6, "click", /*click_handler_6*/ ctx[53], false, false, false),
    					listen_dev(button7, "click", /*click_handler_7*/ ctx[54], false, false, false),
    					listen_dev(button8, "click", /*click_handler_8*/ ctx[55], false, false, false),
    					listen_dev(button9, "click", /*click_handler_9*/ ctx[56], false, false, false),
    					listen_dev(button10, "click", /*click_handler_10*/ ctx[57], false, false, false),
    					listen_dev(button11, "click", /*click_handler_11*/ ctx[58], false, false, false),
    					listen_dev(button12, "click", /*click_handler_12*/ ctx[59], false, false, false),
    					listen_dev(button13, "click", /*click_handler_13*/ ctx[60], false, false, false),
    					listen_dev(button14, "click", /*click_handler_14*/ ctx[61], false, false, false),
    					listen_dev(button15, "click", /*click_handler_15*/ ctx[62], false, false, false),
    					listen_dev(button16, "click", /*click_handler_16*/ ctx[63], false, false, false),
    					listen_dev(button17, "click", /*click_handler_17*/ ctx[64], false, false, false),
    					listen_dev(button18, "click", /*click_handler_18*/ ctx[65], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*openFilters*/ 262144 && i_class_value !== (i_class_value = "arrow " + (/*openFilters*/ ctx[18] ? 'open' : 'right') + " svelte-1sbefv2")) {
    				attr_dev(i, "class", i_class_value);
    			}

    			if (dirty[0] & /*searchStr*/ 8388608) {
    				set_input_value(input, /*searchStr*/ ctx[23]);
    			}

    			if (dirty[0] & /*allFactionsEnabled*/ 268435456) {
    				toggle_class(button1, "filterMasterDisabled", !/*allFactionsEnabled*/ ctx[28]);
    			}

    			if (dirty[0] & /*showLB*/ 1) {
    				toggle_class(img0, "filterInactive", !/*showLB*/ ctx[0]);
    			}

    			if (dirty[0] & /*showM*/ 2) {
    				toggle_class(img1, "filterInactive", !/*showM*/ ctx[1]);
    			}

    			if (dirty[0] & /*showW*/ 4) {
    				toggle_class(img2, "filterInactive", !/*showW*/ ctx[2]);
    			}

    			if (dirty[0] & /*showGB*/ 8) {
    				toggle_class(img3, "filterInactive", !/*showGB*/ ctx[3]);
    			}

    			if (dirty[0] & /*showC*/ 16) {
    				toggle_class(img4, "filterInactive", !/*showC*/ ctx[4]);
    			}

    			if (dirty[0] & /*showH*/ 32) {
    				toggle_class(img5, "filterInactive", !/*showH*/ ctx[5]);
    			}

    			if (dirty[0] & /*showD*/ 64) {
    				toggle_class(img6, "filterInactive", !/*showD*/ ctx[6]);
    			}

    			if (dirty[0] & /*allTypesEnabled*/ 134217728) {
    				toggle_class(button9, "filterMasterDisabled", !/*allTypesEnabled*/ ctx[27]);
    			}

    			if (dirty[0] & /*showInt*/ 128) {
    				toggle_class(img7, "filterInactive", !/*showInt*/ ctx[7]);
    			}

    			if (dirty[0] & /*showAgi*/ 256) {
    				toggle_class(img8, "filterInactive", !/*showAgi*/ ctx[8]);
    			}

    			if (dirty[0] & /*showStr*/ 512) {
    				toggle_class(img9, "filterInactive", !/*showStr*/ ctx[9]);
    			}

    			if (dirty[0] & /*allClassEnabled*/ 67108864) {
    				toggle_class(button13, "filterMasterDisabled", !/*allClassEnabled*/ ctx[26]);
    			}

    			if (dirty[0] & /*showMage*/ 1024) {
    				toggle_class(img10, "filterInactive", !/*showMage*/ ctx[10]);
    			}

    			if (dirty[0] & /*showWar*/ 2048) {
    				toggle_class(img11, "filterInactive", !/*showWar*/ ctx[11]);
    			}

    			if (dirty[0] & /*showTank*/ 4096) {
    				toggle_class(img12, "filterInactive", !/*showTank*/ ctx[12]);
    			}

    			if (dirty[0] & /*showSup*/ 8192) {
    				toggle_class(img13, "filterInactive", !/*showSup*/ ctx[13]);
    			}

    			if (dirty[0] & /*showRan*/ 16384) {
    				toggle_class(img14, "filterInactive", !/*showRan*/ ctx[14]);
    			}

    			if (dirty[0] & /*openFilters*/ 262144) {
    				toggle_class(div7, "filterOpen", /*openFilters*/ ctx[18]);
    			}

    			if (dirty[0] & /*heroes, compHeroData*/ 34078720 | dirty[1] & /*selectHero*/ 512) {
    				each_value_1 = /*heroes*/ ctx[25];
    				validate_each_argument(each_value_1);
    				for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].r();
    				validate_each_keys(ctx, each_value_1, get_each_context_1$6, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value_1, each_1_lookup, div8, fix_and_destroy_block, create_each_block_1$6, null, get_each_context_1$6);
    				for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].a();
    			}
    		},
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div9);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d();
    			}

    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$b.name,
    		type: "if",
    		source: "(351:2) {#if section === 1}",
    		ctx
    	});

    	return block;
    }

    // (506:8) {:else}
    function create_else_block_2$3(ctx) {
    	let div;
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let each_value_7 = /*unusedArtifacts*/ ctx[24];
    	validate_each_argument(each_value_7);
    	const get_key = ctx => /*artifact*/ ctx[93];
    	validate_each_keys(ctx, each_value_7, get_each_context_7$1, get_key);

    	for (let i = 0; i < each_value_7.length; i += 1) {
    		let child_ctx = get_each_context_7$1(ctx, each_value_7, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block_7$1(key, child_ctx));
    	}

    	const block = {
    		c: function create() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div, "class", "mobileArtifactPicker svelte-1sbefv2");
    			add_location(div, file$e, 506, 9, 22973);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*unusedArtifacts, $Artifacts*/ 1090519040 | dirty[1] & /*handleAddArtifact*/ 64) {
    				each_value_7 = /*unusedArtifacts*/ ctx[24];
    				validate_each_argument(each_value_7);
    				validate_each_keys(ctx, each_value_7, get_each_context_7$1, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value_7, each_1_lookup, div, destroy_block, create_each_block_7$1, null, get_each_context_7$1);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d();
    			}
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_2$3.name,
    		type: "else",
    		source: "(506:8) {:else}",
    		ctx
    	});

    	return block;
    }

    // (493:8) {#if !pickArtifactPri}
    function create_if_block_6$2(ctx) {
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let t;
    	let if_block_anchor;
    	let each_value_6 = /*selectedHero*/ ctx[17].artifacts.primary;
    	validate_each_argument(each_value_6);
    	const get_key = ctx => /*artifact*/ ctx[93];
    	validate_each_keys(ctx, each_value_6, get_each_context_6$2, get_key);

    	for (let i = 0; i < each_value_6.length; i += 1) {
    		let child_ctx = get_each_context_6$2(ctx, each_value_6, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block_6$2(key, child_ctx));
    	}

    	let if_block = /*unusedArtifacts*/ ctx[24].length > 0 && create_if_block_7$2(ctx);

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t = space();
    			if (if_block) if_block.c();
    			if_block_anchor = empty$3();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, t, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*$Artifacts, selectedHero*/ 1073872896 | dirty[1] & /*handleRemoveArtifact*/ 128) {
    				each_value_6 = /*selectedHero*/ ctx[17].artifacts.primary;
    				validate_each_argument(each_value_6);
    				validate_each_keys(ctx, each_value_6, get_each_context_6$2, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value_6, each_1_lookup, t.parentNode, destroy_block, create_each_block_6$2, t, get_each_context_6$2);
    			}

    			if (/*unusedArtifacts*/ ctx[24].length > 0) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_7$2(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		d: function destroy(detaching) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d(detaching);
    			}

    			if (detaching) detach_dev(t);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6$2.name,
    		type: "if",
    		source: "(493:8) {#if !pickArtifactPri}",
    		ctx
    	});

    	return block;
    }

    // (508:10) {#each unusedArtifacts as artifact (artifact)}
    function create_each_block_7$1(key_1, ctx) {
    	let button;
    	let img;
    	let img_src_value;
    	let img_alt_value;
    	let t0;
    	let p;
    	let t1_value = /*$Artifacts*/ ctx[30][/*artifact*/ ctx[93]].name + "";
    	let t1;
    	let t2;
    	let mounted;
    	let dispose;

    	function click_handler_25() {
    		return /*click_handler_25*/ ctx[76](/*artifact*/ ctx[93]);
    	}

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			button = element("button");
    			img = element("img");
    			t0 = space();
    			p = element("p");
    			t1 = text$2(t1_value);
    			t2 = space();
    			attr_dev(img, "class", "artifactImg svelte-1sbefv2");
    			if (!src_url_equal(img.src, img_src_value = /*$Artifacts*/ ctx[30][/*artifact*/ ctx[93]].image)) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", img_alt_value = /*$Artifacts*/ ctx[30][/*artifact*/ ctx[93]].name);
    			add_location(img, file$e, 509, 12, 23194);
    			attr_dev(p, "class", "svelte-1sbefv2");
    			add_location(p, file$e, 510, 12, 23302);
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "artifactButton svelte-1sbefv2");
    			add_location(button, file$e, 508, 11, 23078);
    			this.first = button;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, img);
    			append_dev(button, t0);
    			append_dev(button, p);
    			append_dev(p, t1);
    			append_dev(button, t2);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", click_handler_25, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty[0] & /*$Artifacts, unusedArtifacts*/ 1090519040 && !src_url_equal(img.src, img_src_value = /*$Artifacts*/ ctx[30][/*artifact*/ ctx[93]].image)) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if (dirty[0] & /*$Artifacts, unusedArtifacts*/ 1090519040 && img_alt_value !== (img_alt_value = /*$Artifacts*/ ctx[30][/*artifact*/ ctx[93]].name)) {
    				attr_dev(img, "alt", img_alt_value);
    			}

    			if (dirty[0] & /*$Artifacts, unusedArtifacts*/ 1090519040 && t1_value !== (t1_value = /*$Artifacts*/ ctx[30][/*artifact*/ ctx[93]].name + "")) set_data_dev(t1, t1_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_7$1.name,
    		type: "each",
    		source: "(508:10) {#each unusedArtifacts as artifact (artifact)}",
    		ctx
    	});

    	return block;
    }

    // (494:9) {#each selectedHero.artifacts.primary as artifact, i (artifact)}
    function create_each_block_6$2(key_1, ctx) {
    	let div1;
    	let div0;
    	let img;
    	let img_src_value;
    	let img_alt_value;
    	let t0;
    	let button;
    	let span;
    	let t2;
    	let p;
    	let t3_value = /*$Artifacts*/ ctx[30][/*artifact*/ ctx[93]].name + "";
    	let t3;
    	let mounted;
    	let dispose;

    	function click_handler_23(...args) {
    		return /*click_handler_23*/ ctx[74](/*artifact*/ ctx[93], ...args);
    	}

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			img = element("img");
    			t0 = space();
    			button = element("button");
    			span = element("span");
    			span.textContent = "x";
    			t2 = space();
    			p = element("p");
    			t3 = text$2(t3_value);
    			attr_dev(img, "class", "artifactImg listImg svelte-1sbefv2");
    			if (!src_url_equal(img.src, img_src_value = /*$Artifacts*/ ctx[30][/*artifact*/ ctx[93]].image)) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", img_alt_value = /*$Artifacts*/ ctx[30][/*artifact*/ ctx[93]].name);
    			add_location(img, file$e, 496, 12, 22393);
    			add_location(span, file$e, 497, 141, 22638);
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "removeButton svelte-1sbefv2");
    			add_location(button, file$e, 497, 12, 22509);
    			attr_dev(div0, "class", "artifactImgContainer svelte-1sbefv2");
    			add_location(div0, file$e, 495, 11, 22345);
    			attr_dev(p, "class", "svelte-1sbefv2");
    			add_location(p, file$e, 499, 11, 22693);
    			attr_dev(div1, "class", "artifactContainer svelte-1sbefv2");
    			add_location(div1, file$e, 494, 10, 22301);
    			this.first = div1;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div0, img);
    			append_dev(div0, t0);
    			append_dev(div0, button);
    			append_dev(button, span);
    			append_dev(div1, t2);
    			append_dev(div1, p);
    			append_dev(p, t3);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", click_handler_23, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty[0] & /*$Artifacts, selectedHero*/ 1073872896 && !src_url_equal(img.src, img_src_value = /*$Artifacts*/ ctx[30][/*artifact*/ ctx[93]].image)) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if (dirty[0] & /*$Artifacts, selectedHero*/ 1073872896 && img_alt_value !== (img_alt_value = /*$Artifacts*/ ctx[30][/*artifact*/ ctx[93]].name)) {
    				attr_dev(img, "alt", img_alt_value);
    			}

    			if (dirty[0] & /*$Artifacts, selectedHero*/ 1073872896 && t3_value !== (t3_value = /*$Artifacts*/ ctx[30][/*artifact*/ ctx[93]].name + "")) set_data_dev(t3, t3_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_6$2.name,
    		type: "each",
    		source: "(494:9) {#each selectedHero.artifacts.primary as artifact, i (artifact)}",
    		ctx
    	});

    	return block;
    }

    // (503:9) {#if unusedArtifacts.length > 0}
    function create_if_block_7$2(ctx) {
    	let button;
    	let span;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			span = element("span");
    			span.textContent = "+";
    			add_location(span, file$e, 503, 98, 22906);
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "addArtifactButton svelte-1sbefv2");
    			add_location(button, file$e, 503, 10, 22818);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, span);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*click_handler_24*/ ctx[75], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7$2.name,
    		type: "if",
    		source: "(503:9) {#if unusedArtifacts.length > 0}",
    		ctx
    	});

    	return block;
    }

    // (534:8) {:else}
    function create_else_block_1$4(ctx) {
    	let div;
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let each_value_5 = /*unusedArtifacts*/ ctx[24];
    	validate_each_argument(each_value_5);
    	const get_key = ctx => /*artifact*/ ctx[93];
    	validate_each_keys(ctx, each_value_5, get_each_context_5$2, get_key);

    	for (let i = 0; i < each_value_5.length; i += 1) {
    		let child_ctx = get_each_context_5$2(ctx, each_value_5, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block_5$2(key, child_ctx));
    	}

    	const block = {
    		c: function create() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div, "class", "mobileArtifactPicker svelte-1sbefv2");
    			add_location(div, file$e, 534, 9, 24338);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*unusedArtifacts, $Artifacts*/ 1090519040 | dirty[1] & /*handleAddArtifact*/ 64) {
    				each_value_5 = /*unusedArtifacts*/ ctx[24];
    				validate_each_argument(each_value_5);
    				validate_each_keys(ctx, each_value_5, get_each_context_5$2, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value_5, each_1_lookup, div, destroy_block, create_each_block_5$2, null, get_each_context_5$2);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d();
    			}
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$4.name,
    		type: "else",
    		source: "(534:8) {:else}",
    		ctx
    	});

    	return block;
    }

    // (521:8) {#if !pickArtifactSec}
    function create_if_block_4$5(ctx) {
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let t;
    	let if_block_anchor;
    	let each_value_4 = /*selectedHero*/ ctx[17].artifacts.secondary;
    	validate_each_argument(each_value_4);
    	const get_key = ctx => /*artifact*/ ctx[93];
    	validate_each_keys(ctx, each_value_4, get_each_context_4$2, get_key);

    	for (let i = 0; i < each_value_4.length; i += 1) {
    		let child_ctx = get_each_context_4$2(ctx, each_value_4, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block_4$2(key, child_ctx));
    	}

    	let if_block = /*unusedArtifacts*/ ctx[24].length > 0 && create_if_block_5$3(ctx);

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t = space();
    			if (if_block) if_block.c();
    			if_block_anchor = empty$3();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, t, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*$Artifacts, selectedHero*/ 1073872896 | dirty[1] & /*handleRemoveArtifact*/ 128) {
    				each_value_4 = /*selectedHero*/ ctx[17].artifacts.secondary;
    				validate_each_argument(each_value_4);
    				validate_each_keys(ctx, each_value_4, get_each_context_4$2, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value_4, each_1_lookup, t.parentNode, destroy_block, create_each_block_4$2, t, get_each_context_4$2);
    			}

    			if (/*unusedArtifacts*/ ctx[24].length > 0) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_5$3(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		d: function destroy(detaching) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d(detaching);
    			}

    			if (detaching) detach_dev(t);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$5.name,
    		type: "if",
    		source: "(521:8) {#if !pickArtifactSec}",
    		ctx
    	});

    	return block;
    }

    // (536:10) {#each unusedArtifacts as artifact (artifact)}
    function create_each_block_5$2(key_1, ctx) {
    	let button;
    	let img;
    	let img_src_value;
    	let img_alt_value;
    	let t0;
    	let p;
    	let t1_value = /*$Artifacts*/ ctx[30][/*artifact*/ ctx[93]].name + "";
    	let t1;
    	let t2;
    	let mounted;
    	let dispose;

    	function click_handler_28() {
    		return /*click_handler_28*/ ctx[79](/*artifact*/ ctx[93]);
    	}

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			button = element("button");
    			img = element("img");
    			t0 = space();
    			p = element("p");
    			t1 = text$2(t1_value);
    			t2 = space();
    			attr_dev(img, "class", "artifactImg svelte-1sbefv2");
    			if (!src_url_equal(img.src, img_src_value = /*$Artifacts*/ ctx[30][/*artifact*/ ctx[93]].image)) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", img_alt_value = /*$Artifacts*/ ctx[30][/*artifact*/ ctx[93]].name);
    			add_location(img, file$e, 537, 12, 24561);
    			attr_dev(p, "class", "svelte-1sbefv2");
    			add_location(p, file$e, 538, 12, 24669);
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "artifactButton svelte-1sbefv2");
    			add_location(button, file$e, 536, 11, 24443);
    			this.first = button;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, img);
    			append_dev(button, t0);
    			append_dev(button, p);
    			append_dev(p, t1);
    			append_dev(button, t2);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", click_handler_28, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty[0] & /*$Artifacts, unusedArtifacts*/ 1090519040 && !src_url_equal(img.src, img_src_value = /*$Artifacts*/ ctx[30][/*artifact*/ ctx[93]].image)) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if (dirty[0] & /*$Artifacts, unusedArtifacts*/ 1090519040 && img_alt_value !== (img_alt_value = /*$Artifacts*/ ctx[30][/*artifact*/ ctx[93]].name)) {
    				attr_dev(img, "alt", img_alt_value);
    			}

    			if (dirty[0] & /*$Artifacts, unusedArtifacts*/ 1090519040 && t1_value !== (t1_value = /*$Artifacts*/ ctx[30][/*artifact*/ ctx[93]].name + "")) set_data_dev(t1, t1_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_5$2.name,
    		type: "each",
    		source: "(536:10) {#each unusedArtifacts as artifact (artifact)}",
    		ctx
    	});

    	return block;
    }

    // (522:9) {#each selectedHero.artifacts.secondary as artifact (artifact)}
    function create_each_block_4$2(key_1, ctx) {
    	let div1;
    	let div0;
    	let img;
    	let img_src_value;
    	let img_alt_value;
    	let t0;
    	let button;
    	let span;
    	let t2;
    	let p;
    	let t3_value = /*$Artifacts*/ ctx[30][/*artifact*/ ctx[93]].name + "";
    	let t3;
    	let mounted;
    	let dispose;

    	function click_handler_26(...args) {
    		return /*click_handler_26*/ ctx[77](/*artifact*/ ctx[93], ...args);
    	}

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			img = element("img");
    			t0 = space();
    			button = element("button");
    			span = element("span");
    			span.textContent = "x";
    			t2 = space();
    			p = element("p");
    			t3 = text$2(t3_value);
    			attr_dev(img, "class", "artifactImg listImg svelte-1sbefv2");
    			if (!src_url_equal(img.src, img_src_value = /*$Artifacts*/ ctx[30][/*artifact*/ ctx[93]].image)) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", img_alt_value = /*$Artifacts*/ ctx[30][/*artifact*/ ctx[93]].name);
    			add_location(img, file$e, 524, 12, 23756);
    			add_location(span, file$e, 525, 143, 24003);
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "removeButton svelte-1sbefv2");
    			add_location(button, file$e, 525, 12, 23872);
    			attr_dev(div0, "class", "artifactImgContainer svelte-1sbefv2");
    			add_location(div0, file$e, 523, 11, 23708);
    			attr_dev(p, "class", "svelte-1sbefv2");
    			add_location(p, file$e, 527, 11, 24058);
    			attr_dev(div1, "class", "artifactContainer svelte-1sbefv2");
    			add_location(div1, file$e, 522, 10, 23664);
    			this.first = div1;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div0, img);
    			append_dev(div0, t0);
    			append_dev(div0, button);
    			append_dev(button, span);
    			append_dev(div1, t2);
    			append_dev(div1, p);
    			append_dev(p, t3);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", click_handler_26, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty[0] & /*$Artifacts, selectedHero*/ 1073872896 && !src_url_equal(img.src, img_src_value = /*$Artifacts*/ ctx[30][/*artifact*/ ctx[93]].image)) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if (dirty[0] & /*$Artifacts, selectedHero*/ 1073872896 && img_alt_value !== (img_alt_value = /*$Artifacts*/ ctx[30][/*artifact*/ ctx[93]].name)) {
    				attr_dev(img, "alt", img_alt_value);
    			}

    			if (dirty[0] & /*$Artifacts, selectedHero*/ 1073872896 && t3_value !== (t3_value = /*$Artifacts*/ ctx[30][/*artifact*/ ctx[93]].name + "")) set_data_dev(t3, t3_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_4$2.name,
    		type: "each",
    		source: "(522:9) {#each selectedHero.artifacts.secondary as artifact (artifact)}",
    		ctx
    	});

    	return block;
    }

    // (531:9) {#if unusedArtifacts.length > 0}
    function create_if_block_5$3(ctx) {
    	let button;
    	let span;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			span = element("span");
    			span.textContent = "+";
    			add_location(span, file$e, 531, 98, 24271);
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "addArtifactButton svelte-1sbefv2");
    			add_location(button, file$e, 531, 10, 24183);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, span);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*click_handler_27*/ ctx[78], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$3.name,
    		type: "if",
    		source: "(531:9) {#if unusedArtifacts.length > 0}",
    		ctx
    	});

    	return block;
    }

    // (562:8) {:else}
    function create_else_block$8(ctx) {
    	let div;
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let each_value_3 = /*unusedArtifacts*/ ctx[24];
    	validate_each_argument(each_value_3);
    	const get_key = ctx => /*artifact*/ ctx[93];
    	validate_each_keys(ctx, each_value_3, get_each_context_3$2, get_key);

    	for (let i = 0; i < each_value_3.length; i += 1) {
    		let child_ctx = get_each_context_3$2(ctx, each_value_3, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block_3$2(key, child_ctx));
    	}

    	const block = {
    		c: function create() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div, "class", "mobileArtifactPicker svelte-1sbefv2");
    			add_location(div, file$e, 562, 9, 25711);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*unusedArtifacts, $Artifacts*/ 1090519040 | dirty[1] & /*handleAddArtifact*/ 64) {
    				each_value_3 = /*unusedArtifacts*/ ctx[24];
    				validate_each_argument(each_value_3);
    				validate_each_keys(ctx, each_value_3, get_each_context_3$2, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value_3, each_1_lookup, div, destroy_block, create_each_block_3$2, null, get_each_context_3$2);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d();
    			}
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$8.name,
    		type: "else",
    		source: "(562:8) {:else}",
    		ctx
    	});

    	return block;
    }

    // (549:8) {#if !pickArtifactSit}
    function create_if_block_2$5(ctx) {
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let t;
    	let if_block_anchor;
    	let each_value_2 = /*selectedHero*/ ctx[17].artifacts.situational;
    	validate_each_argument(each_value_2);
    	const get_key = ctx => /*artifact*/ ctx[93];
    	validate_each_keys(ctx, each_value_2, get_each_context_2$4, get_key);

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		let child_ctx = get_each_context_2$4(ctx, each_value_2, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block_2$4(key, child_ctx));
    	}

    	let if_block = /*unusedArtifacts*/ ctx[24].length > 0 && create_if_block_3$5(ctx);

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t = space();
    			if (if_block) if_block.c();
    			if_block_anchor = empty$3();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, t, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*$Artifacts, selectedHero*/ 1073872896 | dirty[1] & /*handleRemoveArtifact*/ 128) {
    				each_value_2 = /*selectedHero*/ ctx[17].artifacts.situational;
    				validate_each_argument(each_value_2);
    				validate_each_keys(ctx, each_value_2, get_each_context_2$4, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value_2, each_1_lookup, t.parentNode, destroy_block, create_each_block_2$4, t, get_each_context_2$4);
    			}

    			if (/*unusedArtifacts*/ ctx[24].length > 0) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_3$5(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		d: function destroy(detaching) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d(detaching);
    			}

    			if (detaching) detach_dev(t);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$5.name,
    		type: "if",
    		source: "(549:8) {#if !pickArtifactSit}",
    		ctx
    	});

    	return block;
    }

    // (564:10) {#each unusedArtifacts as artifact (artifact)}
    function create_each_block_3$2(key_1, ctx) {
    	let button;
    	let img;
    	let img_src_value;
    	let img_alt_value;
    	let t0;
    	let p;
    	let t1_value = /*$Artifacts*/ ctx[30][/*artifact*/ ctx[93]].name + "";
    	let t1;
    	let t2;
    	let mounted;
    	let dispose;

    	function click_handler_31() {
    		return /*click_handler_31*/ ctx[82](/*artifact*/ ctx[93]);
    	}

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			button = element("button");
    			img = element("img");
    			t0 = space();
    			p = element("p");
    			t1 = text$2(t1_value);
    			t2 = space();
    			attr_dev(img, "class", "artifactImg svelte-1sbefv2");
    			if (!src_url_equal(img.src, img_src_value = /*$Artifacts*/ ctx[30][/*artifact*/ ctx[93]].image)) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", img_alt_value = /*$Artifacts*/ ctx[30][/*artifact*/ ctx[93]].name);
    			add_location(img, file$e, 565, 12, 25936);
    			attr_dev(p, "class", "svelte-1sbefv2");
    			add_location(p, file$e, 566, 12, 26044);
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "artifactButton svelte-1sbefv2");
    			add_location(button, file$e, 564, 11, 25816);
    			this.first = button;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, img);
    			append_dev(button, t0);
    			append_dev(button, p);
    			append_dev(p, t1);
    			append_dev(button, t2);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", click_handler_31, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty[0] & /*$Artifacts, unusedArtifacts*/ 1090519040 && !src_url_equal(img.src, img_src_value = /*$Artifacts*/ ctx[30][/*artifact*/ ctx[93]].image)) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if (dirty[0] & /*$Artifacts, unusedArtifacts*/ 1090519040 && img_alt_value !== (img_alt_value = /*$Artifacts*/ ctx[30][/*artifact*/ ctx[93]].name)) {
    				attr_dev(img, "alt", img_alt_value);
    			}

    			if (dirty[0] & /*$Artifacts, unusedArtifacts*/ 1090519040 && t1_value !== (t1_value = /*$Artifacts*/ ctx[30][/*artifact*/ ctx[93]].name + "")) set_data_dev(t1, t1_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_3$2.name,
    		type: "each",
    		source: "(564:10) {#each unusedArtifacts as artifact (artifact)}",
    		ctx
    	});

    	return block;
    }

    // (550:9) {#each selectedHero.artifacts.situational as artifact (artifact)}
    function create_each_block_2$4(key_1, ctx) {
    	let div1;
    	let div0;
    	let img;
    	let img_src_value;
    	let img_alt_value;
    	let t0;
    	let button;
    	let span;
    	let t2;
    	let p;
    	let t3_value = /*$Artifacts*/ ctx[30][/*artifact*/ ctx[93]].name + "";
    	let t3;
    	let mounted;
    	let dispose;

    	function click_handler_29(...args) {
    		return /*click_handler_29*/ ctx[80](/*artifact*/ ctx[93], ...args);
    	}

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			img = element("img");
    			t0 = space();
    			button = element("button");
    			span = element("span");
    			span.textContent = "x";
    			t2 = space();
    			p = element("p");
    			t3 = text$2(t3_value);
    			attr_dev(img, "class", "artifactImg listImg svelte-1sbefv2");
    			if (!src_url_equal(img.src, img_src_value = /*$Artifacts*/ ctx[30][/*artifact*/ ctx[93]].image)) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", img_alt_value = /*$Artifacts*/ ctx[30][/*artifact*/ ctx[93]].name);
    			add_location(img, file$e, 552, 12, 25127);
    			add_location(span, file$e, 553, 145, 25376);
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "removeButton svelte-1sbefv2");
    			add_location(button, file$e, 553, 12, 25243);
    			attr_dev(div0, "class", "artifactImgContainer svelte-1sbefv2");
    			add_location(div0, file$e, 551, 11, 25079);
    			attr_dev(p, "class", "svelte-1sbefv2");
    			add_location(p, file$e, 555, 11, 25431);
    			attr_dev(div1, "class", "artifactContainer svelte-1sbefv2");
    			add_location(div1, file$e, 550, 10, 25035);
    			this.first = div1;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div0, img);
    			append_dev(div0, t0);
    			append_dev(div0, button);
    			append_dev(button, span);
    			append_dev(div1, t2);
    			append_dev(div1, p);
    			append_dev(p, t3);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", click_handler_29, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty[0] & /*$Artifacts, selectedHero*/ 1073872896 && !src_url_equal(img.src, img_src_value = /*$Artifacts*/ ctx[30][/*artifact*/ ctx[93]].image)) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if (dirty[0] & /*$Artifacts, selectedHero*/ 1073872896 && img_alt_value !== (img_alt_value = /*$Artifacts*/ ctx[30][/*artifact*/ ctx[93]].name)) {
    				attr_dev(img, "alt", img_alt_value);
    			}

    			if (dirty[0] & /*$Artifacts, selectedHero*/ 1073872896 && t3_value !== (t3_value = /*$Artifacts*/ ctx[30][/*artifact*/ ctx[93]].name + "")) set_data_dev(t3, t3_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_2$4.name,
    		type: "each",
    		source: "(550:9) {#each selectedHero.artifacts.situational as artifact (artifact)}",
    		ctx
    	});

    	return block;
    }

    // (559:9) {#if unusedArtifacts.length > 0}
    function create_if_block_3$5(ctx) {
    	let button;
    	let span;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			span = element("span");
    			span.textContent = "+";
    			add_location(span, file$e, 559, 98, 25644);
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "addArtifactButton svelte-1sbefv2");
    			add_location(button, file$e, 559, 10, 25556);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, span);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*click_handler_30*/ ctx[81], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$5.name,
    		type: "if",
    		source: "(559:9) {#if unusedArtifacts.length > 0}",
    		ctx
    	});

    	return block;
    }

    // (420:5) {#each heroes as hero (hero.id)}
    function create_each_block_1$6(key_1, ctx) {
    	let button;
    	let img;
    	let img_src_value;
    	let t0;
    	let p;
    	let t1_value = /*hero*/ ctx[96].name + "";
    	let t1;
    	let t2;
    	let rect;
    	let stop_animation = noop$1;
    	let mounted;
    	let dispose;

    	function click_handler_19() {
    		return /*click_handler_19*/ ctx[66](/*hero*/ ctx[96]);
    	}

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			button = element("button");
    			img = element("img");
    			t0 = space();
    			p = element("p");
    			t1 = text$2(t1_value);
    			t2 = space();
    			if (!src_url_equal(img.src, img_src_value = /*hero*/ ctx[96].portrait)) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "hero.name");
    			attr_dev(img, "class", "svelte-1sbefv2");
    			add_location(img, file$e, 421, 7, 16860);
    			attr_dev(p, "class", "svelte-1sbefv2");
    			add_location(p, file$e, 422, 7, 16912);
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "heroPortrait svelte-1sbefv2");
    			toggle_class(button, "active", /*hero*/ ctx[96].id in /*compHeroData*/ ctx[19]);
    			add_location(button, file$e, 420, 6, 16699);
    			this.first = button;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, img);
    			append_dev(button, t0);
    			append_dev(button, p);
    			append_dev(p, t1);
    			append_dev(button, t2);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", click_handler_19, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty[0] & /*heroes*/ 33554432 && !src_url_equal(img.src, img_src_value = /*hero*/ ctx[96].portrait)) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if (dirty[0] & /*heroes*/ 33554432 && t1_value !== (t1_value = /*hero*/ ctx[96].name + "")) set_data_dev(t1, t1_value);

    			if (dirty[0] & /*heroes, compHeroData*/ 34078720) {
    				toggle_class(button, "active", /*hero*/ ctx[96].id in /*compHeroData*/ ctx[19]);
    			}
    		},
    		r: function measure() {
    			rect = button.getBoundingClientRect();
    		},
    		f: function fix() {
    			fix_position(button);
    			stop_animation();
    		},
    		a: function animate() {
    			stop_animation();
    			stop_animation = create_animation(button, rect, flip, { duration: 200 });
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$6.name,
    		type: "each",
    		source: "(420:5) {#each heroes as hero (hero.id)}",
    		ctx
    	});

    	return block;
    }

    // (593:3) {#each unusedArtifacts as artifact (artifact)}
    function create_each_block$b(key_1, ctx) {
    	let button;
    	let img;
    	let img_src_value;
    	let img_alt_value;
    	let t0;
    	let p;
    	let t1_value = /*$Artifacts*/ ctx[30][/*artifact*/ ctx[93]].name + "";
    	let t1;
    	let t2;
    	let mounted;
    	let dispose;

    	function click_handler_33() {
    		return /*click_handler_33*/ ctx[84](/*artifact*/ ctx[93]);
    	}

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			button = element("button");
    			img = element("img");
    			t0 = space();
    			p = element("p");
    			t1 = text$2(t1_value);
    			t2 = space();
    			attr_dev(img, "class", "artifactImg svelte-1sbefv2");
    			if (!src_url_equal(img.src, img_src_value = /*$Artifacts*/ ctx[30][/*artifact*/ ctx[93]].image)) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", img_alt_value = /*$Artifacts*/ ctx[30][/*artifact*/ ctx[93]].name);
    			add_location(img, file$e, 598, 5, 27123);
    			attr_dev(p, "class", "svelte-1sbefv2");
    			add_location(p, file$e, 599, 5, 27224);
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "artifactButton svelte-1sbefv2");
    			add_location(button, file$e, 593, 4, 26899);
    			this.first = button;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, img);
    			append_dev(button, t0);
    			append_dev(button, p);
    			append_dev(p, t1);
    			append_dev(button, t2);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", click_handler_33, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty[0] & /*$Artifacts, unusedArtifacts*/ 1090519040 && !src_url_equal(img.src, img_src_value = /*$Artifacts*/ ctx[30][/*artifact*/ ctx[93]].image)) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if (dirty[0] & /*$Artifacts, unusedArtifacts*/ 1090519040 && img_alt_value !== (img_alt_value = /*$Artifacts*/ ctx[30][/*artifact*/ ctx[93]].name)) {
    				attr_dev(img, "alt", img_alt_value);
    			}

    			if (dirty[0] & /*$Artifacts, unusedArtifacts*/ 1090519040 && t1_value !== (t1_value = /*$Artifacts*/ ctx[30][/*artifact*/ ctx[93]].name + "")) set_data_dev(t1, t1_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$b.name,
    		type: "each",
    		source: "(593:3) {#each unusedArtifacts as artifact (artifact)}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$h(ctx) {
    	let div2;
    	let div0;
    	let modalclosebutton0;
    	let t0;
    	let div1;
    	let current_block_type_index;
    	let if_block;
    	let t1;
    	let div6;
    	let div5;
    	let div3;
    	let modalclosebutton1;
    	let t2;
    	let div4;
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let current;
    	let mounted;
    	let dispose;

    	modalclosebutton0 = new ModalCloseButton({
    			props: { onClose: /*close*/ ctx[15] },
    			$$inline: true
    		});

    	const if_block_creators = [create_if_block$b, create_if_block_1$5];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*section*/ ctx[16] === 1) return 0;
    		if (/*section*/ ctx[16] === 2) return 1;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type(ctx))) {
    		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	modalclosebutton1 = new ModalCloseButton({
    			props: { onClose: /*func_3*/ ctx[83] },
    			$$inline: true
    		});

    	let each_value = /*unusedArtifacts*/ ctx[24];
    	validate_each_argument(each_value);
    	const get_key = ctx => /*artifact*/ ctx[93];
    	validate_each_keys(ctx, each_value, get_each_context$b, get_key);

    	for (let i = 0; i < each_value.length; i += 1) {
    		let child_ctx = get_each_context$b(ctx, each_value, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block$b(key, child_ctx));
    	}

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div0 = element("div");
    			create_component(modalclosebutton0.$$.fragment);
    			t0 = space();
    			div1 = element("div");
    			if (if_block) if_block.c();
    			t1 = space();
    			div6 = element("div");
    			div5 = element("div");
    			div3 = element("div");
    			create_component(modalclosebutton1.$$.fragment);
    			t2 = space();
    			div4 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div0, "class", "modalCloseContainer svelte-1sbefv2");
    			add_location(div0, file$e, 346, 1, 11417);
    			attr_dev(div1, "id", "hfContainer");
    			attr_dev(div1, "class", "heroFinderContainer svelte-1sbefv2");
    			add_location(div1, file$e, 349, 1, 11502);
    			attr_dev(div2, "class", "background svelte-1sbefv2");
    			add_location(div2, file$e, 345, 0, 11390);
    			attr_dev(div3, "class", "artifactModalCloseContainer svelte-1sbefv2");
    			add_location(div3, file$e, 585, 2, 26533);
    			attr_dev(div4, "class", "artifactPickerWindow svelte-1sbefv2");
    			add_location(div4, file$e, 591, 2, 26772);
    			attr_dev(div5, "class", "background svelte-1sbefv2");
    			add_location(div5, file$e, 581, 1, 26351);
    			attr_dev(div6, "class", "desktopArtifactPicker svelte-1sbefv2");
    			toggle_class(div6, "open", /*pickArtifactPri*/ ctx[20] || /*pickArtifactSec*/ ctx[21] || /*pickArtifactSit*/ ctx[22]);
    			add_location(div6, file$e, 580, 0, 26246);
    		},
    		l: function claim(nodes) {
    			throw new Error_1$6("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			mount_component(modalclosebutton0, div0, null);
    			append_dev(div2, t0);
    			append_dev(div2, div1);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(div1, null);
    			}

    			insert_dev(target, t1, anchor);
    			insert_dev(target, div6, anchor);
    			append_dev(div6, div5);
    			append_dev(div5, div3);
    			mount_component(modalclosebutton1, div3, null);
    			append_dev(div5, t2);
    			append_dev(div5, div4);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div4, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(div1, "click", click_handler_32, false, false, false),
    					listen_dev(div4, "click", click_handler_34, false, false, false),
    					listen_dev(div5, "click", /*click_handler_35*/ ctx[85], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			const modalclosebutton0_changes = {};
    			if (dirty[0] & /*close*/ 32768) modalclosebutton0_changes.onClose = /*close*/ ctx[15];
    			modalclosebutton0.$set(modalclosebutton0_changes);
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if (~current_block_type_index) {
    					if_blocks[current_block_type_index].p(ctx, dirty);
    				}
    			} else {
    				if (if_block) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block = if_blocks[current_block_type_index];

    					if (!if_block) {
    						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block.c();
    					} else {
    						if_block.p(ctx, dirty);
    					}

    					transition_in(if_block, 1);
    					if_block.m(div1, null);
    				} else {
    					if_block = null;
    				}
    			}

    			const modalclosebutton1_changes = {};
    			if (dirty[0] & /*pickArtifactPri, pickArtifactSec*/ 3145728) modalclosebutton1_changes.onClose = /*func_3*/ ctx[83];
    			modalclosebutton1.$set(modalclosebutton1_changes);

    			if (dirty[0] & /*pickArtifactPri, pickArtifactSec, unusedArtifacts, $Artifacts*/ 1093664768 | dirty[1] & /*handleAddArtifact*/ 64) {
    				each_value = /*unusedArtifacts*/ ctx[24];
    				validate_each_argument(each_value);
    				validate_each_keys(ctx, each_value, get_each_context$b, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div4, destroy_block, create_each_block$b, null, get_each_context$b);
    			}

    			if (dirty[0] & /*pickArtifactPri, pickArtifactSec, pickArtifactSit*/ 7340032) {
    				toggle_class(div6, "open", /*pickArtifactPri*/ ctx[20] || /*pickArtifactSec*/ ctx[21] || /*pickArtifactSit*/ ctx[22]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(modalclosebutton0.$$.fragment, local);
    			transition_in(if_block);
    			transition_in(modalclosebutton1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(modalclosebutton0.$$.fragment, local);
    			transition_out(if_block);
    			transition_out(modalclosebutton1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			destroy_component(modalclosebutton0);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d();
    			}

    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div6);
    			destroy_component(modalclosebutton1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d();
    			}

    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$h.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const click_handler_32 = e => e.stopPropagation();
    const click_handler_34 = e => e.stopPropagation();

    function instance$h($$self, $$props, $$invalidate) {
    	let heroes;
    	let allFactionsEnabled;
    	let allTypesEnabled;
    	let allClassEnabled;
    	let unusedArtifacts;
    	let $HeroData;
    	let $Artifacts;
    	let $AppData;
    	validate_store(HeroData, 'HeroData');
    	component_subscribe($$self, HeroData, $$value => $$invalidate(29, $HeroData = $$value));
    	validate_store(Artifacts, 'Artifacts');
    	component_subscribe($$self, Artifacts, $$value => $$invalidate(30, $Artifacts = $$value));
    	validate_store(AppData$1, 'AppData');
    	component_subscribe($$self, AppData$1, $$value => $$invalidate(31, $AppData = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('HeroFinder', slots, []);
    	let { config = {} } = $$props;
    	let { isMobile = false } = $$props;

    	let close = () => {
    		
    	};

    	let section = 1;
    	let selectedHero = {};
    	let openFilters = !isMobile;
    	let idx = 0;
    	let pos = 0;

    	let onSuccess = () => {
    		
    	};

    	let oldHeroID = '';
    	let oldHeroData = {};
    	let compHeroData = {};
    	let pickArtifactPri = false;
    	let pickArtifactSec = false;
    	let pickArtifactSit = false;

    	onMount(async () => {
    		$$invalidate(15, close = config.close);
    		idx = config.idx;
    		pos = config.pos;
    		onSuccess = config.onSuccess;
    		$$invalidate(19, compHeroData = config.compHeroData);

    		if ('oldHeroID' in config) {
    			oldHeroID = config.oldHeroID;
    			oldHeroData = compHeroData[oldHeroID];
    		}

    		if (oldHeroID !== '') {
    			$$invalidate(16, section = 2);

    			$$invalidate(17, selectedHero = {
    				id: oldHeroID,
    				ascendLv: oldHeroData.ascendLv,
    				si: oldHeroData.si,
    				furn: oldHeroData.furn,
    				artifacts: JSON.parse(JSON.stringify(oldHeroData.artifacts)),
    				core: oldHeroData.core,
    				notes: oldHeroData.notes
    			});

    			$$invalidate(24, unusedArtifacts = makeUnusedArtifactList());
    		}

    		$$invalidate(25, heroes = makeHeroList());

    		if (section === 1) {
    			await tick();
    			if (!isMobile) document.querySelector('#searchBox').focus();
    		}
    	});

    	// filter variables
    	let showLB = true;

    	let showM = true;
    	let showW = true;
    	let showGB = true;
    	let showC = true;
    	let showH = true;
    	let showD = true;
    	let showInt = true;
    	let showAgi = true;
    	let showStr = true;
    	let showMage = true;
    	let showWar = true;
    	let showTank = true;
    	let showSup = true;
    	let showRan = true;
    	let searchStr = '';

    	function makeHeroList() {
    		let buffer = [];

    		for (const hero of $HeroData) {
    			if (!showLB && hero.faction.toLowerCase() === 'lightbearer') continue;
    			if (!showM && hero.faction.toLowerCase() === 'mauler') continue;
    			if (!showW && hero.faction.toLowerCase() === 'wilder') continue;
    			if (!showGB && hero.faction.toLowerCase() === 'graveborn') continue;
    			if (!showC && hero.faction.toLowerCase() === 'celestial') continue;
    			if (!showH && hero.faction.toLowerCase() === 'hypogean') continue;
    			if (!showD && hero.faction.toLowerCase() === 'dimensional') continue;
    			if (!showInt && hero.type.toLowerCase() === 'intelligence') continue;
    			if (!showAgi && hero.type.toLowerCase() === 'agility') continue;
    			if (!showStr && hero.type.toLowerCase() === 'strength') continue;
    			if (!showMage && hero.class.toLowerCase() === 'mage') continue;
    			if (!showWar && hero.class.toLowerCase() === 'warrior') continue;
    			if (!showTank && hero.class.toLowerCase() === 'tank') continue;
    			if (!showSup && hero.class.toLowerCase() === 'support') continue;
    			if (!showRan && hero.class.toLowerCase() === 'ranger') continue;
    			if (searchStr !== '' && !hero.name.toLowerCase().includes(searchStr.toLowerCase()) && !hero.class.toLowerCase().includes(searchStr.toLowerCase()) && !hero.faction.toLowerCase().includes(searchStr.toLowerCase()) && !hero.type.toLowerCase().includes(searchStr.toLowerCase())) continue;
    			buffer.push(hero);
    		}

    		return buffer.length > 0
    		? buffer.sort((a, b) => a.name.toLowerCase() > b.name.toLowerCase() ? 1 : -1)
    		: buffer;
    	}

    	function makeUnusedArtifactList() {
    		let buffer = Object.keys($Artifacts);
    		let artifactsInLine = [];

    		for (const key in selectedHero.artifacts) {
    			for (const artifact of selectedHero.artifacts[key]) {
    				artifactsInLine.push(artifact);
    			}
    		}

    		if ('artifacts' in selectedHero && 'id' in selectedHero) {
    			const heroClass = $HeroData.find(e => e.id === selectedHero.id).class;

    			// filter for artifacts of the right class
    			buffer = buffer.filter(e => $Artifacts[e].class === heroClass || $Artifacts[e].class === 'Any');

    			// filter out artifacts that are already in a line
    			buffer = buffer.filter(e => !artifactsInLine.includes(e));
    		}

    		return buffer.sort();
    	}

    	function handleFilterMasterButtonClick(category) {
    		switch (category) {
    			case 'faction':
    				if (allFactionsEnabled) {
    					$$invalidate(0, showLB = false);
    					$$invalidate(1, showM = false);
    					$$invalidate(2, showW = false);
    					$$invalidate(3, showGB = false);
    					$$invalidate(4, showC = false);
    					$$invalidate(5, showH = false);
    					$$invalidate(6, showD = false);
    				} else {
    					$$invalidate(0, showLB = true);
    					$$invalidate(1, showM = true);
    					$$invalidate(2, showW = true);
    					$$invalidate(3, showGB = true);
    					$$invalidate(4, showC = true);
    					$$invalidate(5, showH = true);
    					$$invalidate(6, showD = true);
    				}
    				break;
    			case 'type':
    				if (allTypesEnabled) {
    					$$invalidate(7, showInt = false);
    					$$invalidate(8, showAgi = false);
    					$$invalidate(9, showStr = false);
    				} else {
    					$$invalidate(7, showInt = true);
    					$$invalidate(8, showAgi = true);
    					$$invalidate(9, showStr = true);
    				}
    				break;
    			case 'class':
    				if (allClassEnabled) {
    					$$invalidate(10, showMage = false);
    					$$invalidate(11, showWar = false);
    					$$invalidate(12, showTank = false);
    					$$invalidate(13, showSup = false);
    					$$invalidate(14, showRan = false);
    				} else {
    					$$invalidate(10, showMage = true);
    					$$invalidate(11, showWar = true);
    					$$invalidate(12, showTank = true);
    					$$invalidate(13, showSup = true);
    					$$invalidate(14, showRan = true);
    				}
    				break;
    			default:
    				throw new Error(`Invalid category given to handleFilterMasterButtonClick(): ${category}`);
    		}

    		$$invalidate(25, heroes = makeHeroList());
    	}

    	function handleSIChange() {
    		if (selectedHero.si < 0) {
    			$$invalidate(17, selectedHero.si = 0, selectedHero);
    		} else {
    			$$invalidate(17, selectedHero.si += 5, selectedHero);
    		}

    		if (selectedHero.si > 30) {
    			$$invalidate(17, selectedHero.si = -1, selectedHero);
    		}
    	}

    	function handleAscChange() {
    		if ($$invalidate(17, ++selectedHero.ascendLv, selectedHero) > 6) {
    			$$invalidate(17, selectedHero.ascendLv = 0, selectedHero);
    		}
    	}

    	function handleFurnChange() {
    		switch (selectedHero.furn) {
    			case 0:
    				$$invalidate(17, selectedHero.furn = 3, selectedHero);
    				break;
    			case 3:
    				$$invalidate(17, selectedHero.furn = 9, selectedHero);
    				break;
    			case 9:
    				$$invalidate(17, selectedHero.furn = 0, selectedHero);
    				break;
    			default:
    				throw new Error(`Error in handleFurnChange, selectedHero.furn is an invalid level: ${selectedHero.furn}`);
    		}
    	}

    	function handleAddArtifact(artifact, line) {
    		if (artifact in $Artifacts) {
    			if (!selectedHero.artifacts[line].includes(artifact)) {
    				$$invalidate(17, selectedHero.artifacts[line] = [...selectedHero.artifacts[line], artifact], selectedHero);
    			}

    			$$invalidate(24, unusedArtifacts = makeUnusedArtifactList());
    		}

    		switch (line) {
    			case 'primary':
    				$$invalidate(20, pickArtifactPri = false);
    				break;
    			case 'secondary':
    				$$invalidate(21, pickArtifactSec = false);
    				break;
    			case 'situational':
    				$$invalidate(22, pickArtifactSit = false);
    				break;
    			default:
    				throw new Error(`Error invalid artifact line type given: ${line}`);
    		}
    	}

    	function handleRemoveArtifact(artifact, line) {
    		if (!(line in selectedHero.artifacts)) throw new Error(`Invalid artifact line given: ${line}`);
    		$$invalidate(17, selectedHero.artifacts[line] = selectedHero.artifacts[line].filter(e => e !== artifact), selectedHero);
    		$$invalidate(24, unusedArtifacts = makeUnusedArtifactList());
    	}

    	async function checkHero(hero) {
    		const expectedProps = [
    			{ name: 'id', type: 'string' },
    			{ name: 'ascendLv', type: 'number' },
    			{ name: 'si', type: 'number' },
    			{ name: 'furn', type: 'number' },
    			{ name: 'artifacts', type: 'object' },
    			{ name: 'core', type: 'boolean' },
    			{ name: 'notes', type: 'string' }
    		];

    		// make sure that hero is an object (and nothing else)
    		// https://javascript.plainenglish.io/javascript-check-if-a-variable-is-an-object-and-nothing-else-not-an-array-a-set-etc-a3987ea08fd7
    		if (Object.prototype.toString.call(hero) !== '[object Object]') return {
    			retCode: 1,
    			message: 'Hero must be an object.'
    		};

    		// hero must be an object at this point, so make sure it's consistent with the format we expect
    		for (const prop of expectedProps) {
    			if (!(prop.name in hero)) {
    				return {
    					retCode: 1,
    					message: `Hero object missing property: ${prop.name}`
    				};
    			} else {
    				if (prop.type === 'array') {
    					if (!Array.isArray(hero[prop.name])) return {
    						retCode: 1,
    						message: `Hero object property, ${prop.name}, is type ${typeof hero[prop.name]}. Expected ${prop.type}.`
    					};
    				} else if (prop.type === 'object') {
    					if (!Object.prototype.toString.call(hero[prop.name]) === '[object Object]') return {
    						retCode: 1,
    						message: `Hero object property, ${prop.name}, is type ${typeof hero[prop.name]}. Expected ${prop.type}.`
    					};
    				} else {
    					if (!(typeof hero[prop.name] === prop.type)) return {
    						retCode: 1,
    						message: `Hero object property, ${prop.name}, is type ${typeof hero[prop.name]}. Expected ${prop.type}.`
    					};
    				}
    			}
    		}

    		// delete any props in hero that aren't expected
    		for (const key in hero) {
    			if (!expectedProps.some(e => e.name === key)) delete hero[key];
    		}

    		// make sure values are within expected ranges
    		if (!$HeroData.some(e => e.id === hero.id)) return {
    			retCode: 1,
    			message: `Hero ID not found in $HeroData database: ${hero.id}`
    		};

    		if (!(hero.ascendLv >= 0 && hero.ascendLv <= 6)) return {
    			retCode: 1,
    			message: `Hero ascend level must be between 0-30: ${hero.ascendLv}`
    		};

    		if (!(hero.ascendLv >= 0 && hero.ascendLv <= 30)) return {
    			retCode: 1,
    			message: `Hero si level must be between 0-30: ${hero.si}`
    		};

    		if (!(hero.ascendLv >= 0 && hero.ascendLv <= 9)) return {
    			retCode: 1,
    			message: `Hero furniture level must be between 0-30: ${hero.furn}`
    		};

    		let artifactsInLine = [];

    		for (const key in selectedHero.artifacts) {
    			for (const artifact of selectedHero.artifacts[key]) {
    				artifactsInLine.push(artifact);
    			}
    		}

    		for (const artifact of artifactsInLine) {
    			if (!Object.keys($Artifacts).includes(artifact)) return {
    				retCode: 1,
    				message: `Artifact not found in $Artifacts database: ${artifact}`
    			};
    		}

    		// everything should be good now, return the clean MH.List object
    		return { retCode: 0, message: hero };
    	}

    	async function saveHero() {
    		const returnObj = await checkHero(selectedHero);

    		if (returnObj.retCode !== 0) {
    			// validation error occurred
    			throw new Error(`Hero validation error occurred for hero: ${returnObj.message}`);
    		} else {
    			// message should contain a clean hero object now
    			$$invalidate(17, selectedHero = returnObj.message);
    		}

    		onSuccess(idx, pos, selectedHero, oldHeroID);
    		close();
    	}

    	function selectHero(heroID) {
    		if (heroID in compHeroData) {
    			$$invalidate(17, selectedHero = {
    				id: heroID,
    				ascendLv: compHeroData[heroID].ascendLv,
    				si: compHeroData[heroID].si,
    				furn: compHeroData[heroID].furn,
    				artifacts: JSON.parse(JSON.stringify(compHeroData[heroID].artifacts)),
    				core: compHeroData[heroID].core,
    				notes: compHeroData[heroID].notes
    			});
    		} else {
    			$$invalidate(17, selectedHero = {
    				id: heroID,
    				ascendLv: 6,
    				si: $HeroData.find(e => e.id === heroID).si_benchmark,
    				furn: $HeroData.find(e => e.id === heroID).furn_benchmark,
    				artifacts: {
    					primary: [],
    					secondary: [],
    					situational: []
    				},
    				core: false,
    				notes: ''
    			});
    		}

    		changeSection(2);
    		$$invalidate(24, unusedArtifacts = makeUnusedArtifactList());
    	}

    	async function changeSection(sectNum) {
    		$$invalidate(16, section = sectNum);

    		if (section === 1) {
    			await tick();
    			document.querySelector('#searchBox').focus();
    		}

    		// scroll back to top
    		document.getElementById('hfContainer').scrollTop = 0;
    	}

    	const writable_props = ['config', 'isMobile'];

    	Object_1$2.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<HeroFinder> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => $$invalidate(18, openFilters = !openFilters);

    	function input_input_handler() {
    		searchStr = this.value;
    		$$invalidate(23, searchStr);
    	}

    	const keyup_handler = () => $$invalidate(25, heroes = makeHeroList());
    	const search_handler = () => $$invalidate(25, heroes = makeHeroList());
    	const click_handler_1 = () => handleFilterMasterButtonClick('faction');

    	const click_handler_2 = () => {
    		$$invalidate(0, showLB = !showLB);
    		$$invalidate(25, heroes = makeHeroList());
    	};

    	const click_handler_3 = () => {
    		$$invalidate(1, showM = !showM);
    		$$invalidate(25, heroes = makeHeroList());
    	};

    	const click_handler_4 = () => {
    		$$invalidate(2, showW = !showW);
    		$$invalidate(25, heroes = makeHeroList());
    	};

    	const click_handler_5 = () => {
    		$$invalidate(3, showGB = !showGB);
    		$$invalidate(25, heroes = makeHeroList());
    	};

    	const click_handler_6 = () => {
    		$$invalidate(4, showC = !showC);
    		$$invalidate(25, heroes = makeHeroList());
    	};

    	const click_handler_7 = () => {
    		$$invalidate(5, showH = !showH);
    		$$invalidate(25, heroes = makeHeroList());
    	};

    	const click_handler_8 = () => {
    		$$invalidate(6, showD = !showD);
    		$$invalidate(25, heroes = makeHeroList());
    	};

    	const click_handler_9 = () => handleFilterMasterButtonClick('type');

    	const click_handler_10 = () => {
    		$$invalidate(7, showInt = !showInt);
    		$$invalidate(25, heroes = makeHeroList());
    	};

    	const click_handler_11 = () => {
    		$$invalidate(8, showAgi = !showAgi);
    		$$invalidate(25, heroes = makeHeroList());
    	};

    	const click_handler_12 = () => {
    		$$invalidate(9, showStr = !showStr);
    		$$invalidate(25, heroes = makeHeroList());
    	};

    	const click_handler_13 = () => handleFilterMasterButtonClick('class');

    	const click_handler_14 = () => {
    		$$invalidate(10, showMage = !showMage);
    		$$invalidate(25, heroes = makeHeroList());
    	};

    	const click_handler_15 = () => {
    		$$invalidate(11, showWar = !showWar);
    		$$invalidate(25, heroes = makeHeroList());
    	};

    	const click_handler_16 = () => {
    		$$invalidate(12, showTank = !showTank);
    		$$invalidate(25, heroes = makeHeroList());
    	};

    	const click_handler_17 = () => {
    		$$invalidate(13, showSup = !showSup);
    		$$invalidate(25, heroes = makeHeroList());
    	};

    	const click_handler_18 = () => {
    		$$invalidate(14, showRan = !showRan);
    		$$invalidate(25, heroes = makeHeroList());
    	};

    	const click_handler_19 = hero => selectHero(hero.id);
    	const click_handler_20 = () => changeSection(1);
    	const click_handler_21 = () => saveHero();
    	const func = e => e.id === selectedHero.id;
    	const func_1 = e => e.id === selectedHero.id;
    	const func_2 = e => e.id === selectedHero.id;
    	const click_handler_22 = () => $$invalidate(17, selectedHero.core = !selectedHero.core, selectedHero);

    	function textarea_input_handler() {
    		selectedHero.notes = this.value;
    		$$invalidate(17, selectedHero);
    	}

    	const click_handler_23 = (artifact, e) => {
    		handleRemoveArtifact(artifact, 'primary');
    		e.stopPropagation();
    	};

    	const click_handler_24 = () => $$invalidate(20, pickArtifactPri = true);
    	const click_handler_25 = artifact => handleAddArtifact(artifact, 'primary');

    	const click_handler_26 = (artifact, e) => {
    		handleRemoveArtifact(artifact, 'secondary');
    		e.stopPropagation();
    	};

    	const click_handler_27 = () => $$invalidate(21, pickArtifactSec = true);
    	const click_handler_28 = artifact => handleAddArtifact(artifact, 'secondary');

    	const click_handler_29 = (artifact, e) => {
    		handleRemoveArtifact(artifact, 'situational');
    		e.stopPropagation();
    	};

    	const click_handler_30 = () => $$invalidate(22, pickArtifactSit = true);
    	const click_handler_31 = artifact => handleAddArtifact(artifact, 'situational');

    	const func_3 = () => {
    		const line = pickArtifactPri
    		? 'primary'
    		: pickArtifactSec ? 'secondary' : 'situational';

    		handleAddArtifact('cancel', line);
    	};

    	const click_handler_33 = artifact => {
    		const line = pickArtifactPri
    		? 'primary'
    		: pickArtifactSec ? 'secondary' : 'situational';

    		handleAddArtifact(artifact, line);
    	};

    	const click_handler_35 = () => {
    		const line = pickArtifactPri
    		? 'primary'
    		: pickArtifactSec ? 'secondary' : 'situational';

    		handleAddArtifact('cancel', line);
    	};

    	$$self.$$set = $$props => {
    		if ('config' in $$props) $$invalidate(42, config = $$props.config);
    		if ('isMobile' in $$props) $$invalidate(43, isMobile = $$props.isMobile);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		tick,
    		flip,
    		HeroData,
    		Artifacts,
    		AppData: AppData$1,
    		ModalCloseButton,
    		FlipButton,
    		config,
    		isMobile,
    		close,
    		section,
    		selectedHero,
    		openFilters,
    		idx,
    		pos,
    		onSuccess,
    		oldHeroID,
    		oldHeroData,
    		compHeroData,
    		pickArtifactPri,
    		pickArtifactSec,
    		pickArtifactSit,
    		showLB,
    		showM,
    		showW,
    		showGB,
    		showC,
    		showH,
    		showD,
    		showInt,
    		showAgi,
    		showStr,
    		showMage,
    		showWar,
    		showTank,
    		showSup,
    		showRan,
    		searchStr,
    		makeHeroList,
    		makeUnusedArtifactList,
    		handleFilterMasterButtonClick,
    		handleSIChange,
    		handleAscChange,
    		handleFurnChange,
    		handleAddArtifact,
    		handleRemoveArtifact,
    		checkHero,
    		saveHero,
    		selectHero,
    		changeSection,
    		unusedArtifacts,
    		heroes,
    		allClassEnabled,
    		allTypesEnabled,
    		allFactionsEnabled,
    		$HeroData,
    		$Artifacts,
    		$AppData
    	});

    	$$self.$inject_state = $$props => {
    		if ('config' in $$props) $$invalidate(42, config = $$props.config);
    		if ('isMobile' in $$props) $$invalidate(43, isMobile = $$props.isMobile);
    		if ('close' in $$props) $$invalidate(15, close = $$props.close);
    		if ('section' in $$props) $$invalidate(16, section = $$props.section);
    		if ('selectedHero' in $$props) $$invalidate(17, selectedHero = $$props.selectedHero);
    		if ('openFilters' in $$props) $$invalidate(18, openFilters = $$props.openFilters);
    		if ('idx' in $$props) idx = $$props.idx;
    		if ('pos' in $$props) pos = $$props.pos;
    		if ('onSuccess' in $$props) onSuccess = $$props.onSuccess;
    		if ('oldHeroID' in $$props) oldHeroID = $$props.oldHeroID;
    		if ('oldHeroData' in $$props) oldHeroData = $$props.oldHeroData;
    		if ('compHeroData' in $$props) $$invalidate(19, compHeroData = $$props.compHeroData);
    		if ('pickArtifactPri' in $$props) $$invalidate(20, pickArtifactPri = $$props.pickArtifactPri);
    		if ('pickArtifactSec' in $$props) $$invalidate(21, pickArtifactSec = $$props.pickArtifactSec);
    		if ('pickArtifactSit' in $$props) $$invalidate(22, pickArtifactSit = $$props.pickArtifactSit);
    		if ('showLB' in $$props) $$invalidate(0, showLB = $$props.showLB);
    		if ('showM' in $$props) $$invalidate(1, showM = $$props.showM);
    		if ('showW' in $$props) $$invalidate(2, showW = $$props.showW);
    		if ('showGB' in $$props) $$invalidate(3, showGB = $$props.showGB);
    		if ('showC' in $$props) $$invalidate(4, showC = $$props.showC);
    		if ('showH' in $$props) $$invalidate(5, showH = $$props.showH);
    		if ('showD' in $$props) $$invalidate(6, showD = $$props.showD);
    		if ('showInt' in $$props) $$invalidate(7, showInt = $$props.showInt);
    		if ('showAgi' in $$props) $$invalidate(8, showAgi = $$props.showAgi);
    		if ('showStr' in $$props) $$invalidate(9, showStr = $$props.showStr);
    		if ('showMage' in $$props) $$invalidate(10, showMage = $$props.showMage);
    		if ('showWar' in $$props) $$invalidate(11, showWar = $$props.showWar);
    		if ('showTank' in $$props) $$invalidate(12, showTank = $$props.showTank);
    		if ('showSup' in $$props) $$invalidate(13, showSup = $$props.showSup);
    		if ('showRan' in $$props) $$invalidate(14, showRan = $$props.showRan);
    		if ('searchStr' in $$props) $$invalidate(23, searchStr = $$props.searchStr);
    		if ('unusedArtifacts' in $$props) $$invalidate(24, unusedArtifacts = $$props.unusedArtifacts);
    		if ('heroes' in $$props) $$invalidate(25, heroes = $$props.heroes);
    		if ('allClassEnabled' in $$props) $$invalidate(26, allClassEnabled = $$props.allClassEnabled);
    		if ('allTypesEnabled' in $$props) $$invalidate(27, allTypesEnabled = $$props.allTypesEnabled);
    		if ('allFactionsEnabled' in $$props) $$invalidate(28, allFactionsEnabled = $$props.allFactionsEnabled);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*showLB, showM, showW, showGB, showC, showH, showD*/ 127) {
    			$$invalidate(28, allFactionsEnabled = showLB && showM && showW && showGB && showC && showH && showD);
    		}

    		if ($$self.$$.dirty[0] & /*showInt, showAgi, showStr*/ 896) {
    			$$invalidate(27, allTypesEnabled = showInt && showAgi && showStr);
    		}

    		if ($$self.$$.dirty[0] & /*showMage, showWar, showTank, showSup, showRan*/ 31744) {
    			$$invalidate(26, allClassEnabled = showMage && showWar && showTank && showSup && showRan);
    		}
    	};

    	$$invalidate(25, heroes = makeHeroList());
    	$$invalidate(24, unusedArtifacts = makeUnusedArtifactList());

    	return [
    		showLB,
    		showM,
    		showW,
    		showGB,
    		showC,
    		showH,
    		showD,
    		showInt,
    		showAgi,
    		showStr,
    		showMage,
    		showWar,
    		showTank,
    		showSup,
    		showRan,
    		close,
    		section,
    		selectedHero,
    		openFilters,
    		compHeroData,
    		pickArtifactPri,
    		pickArtifactSec,
    		pickArtifactSit,
    		searchStr,
    		unusedArtifacts,
    		heroes,
    		allClassEnabled,
    		allTypesEnabled,
    		allFactionsEnabled,
    		$HeroData,
    		$Artifacts,
    		$AppData,
    		makeHeroList,
    		handleFilterMasterButtonClick,
    		handleSIChange,
    		handleAscChange,
    		handleFurnChange,
    		handleAddArtifact,
    		handleRemoveArtifact,
    		saveHero,
    		selectHero,
    		changeSection,
    		config,
    		isMobile,
    		click_handler,
    		input_input_handler,
    		keyup_handler,
    		search_handler,
    		click_handler_1,
    		click_handler_2,
    		click_handler_3,
    		click_handler_4,
    		click_handler_5,
    		click_handler_6,
    		click_handler_7,
    		click_handler_8,
    		click_handler_9,
    		click_handler_10,
    		click_handler_11,
    		click_handler_12,
    		click_handler_13,
    		click_handler_14,
    		click_handler_15,
    		click_handler_16,
    		click_handler_17,
    		click_handler_18,
    		click_handler_19,
    		click_handler_20,
    		click_handler_21,
    		func,
    		func_1,
    		func_2,
    		click_handler_22,
    		textarea_input_handler,
    		click_handler_23,
    		click_handler_24,
    		click_handler_25,
    		click_handler_26,
    		click_handler_27,
    		click_handler_28,
    		click_handler_29,
    		click_handler_30,
    		click_handler_31,
    		func_3,
    		click_handler_33,
    		click_handler_35
    	];
    }

    class HeroFinder extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$h, create_fragment$h, safe_not_equal, { config: 42, isMobile: 43 }, null, [-1, -1, -1, -1]);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "HeroFinder",
    			options,
    			id: create_fragment$h.name
    		});
    	}

    	get config() {
    		throw new Error_1$6("<HeroFinder>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set config(value) {
    		throw new Error_1$6("<HeroFinder>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isMobile() {
    		throw new Error_1$6("<HeroFinder>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isMobile(value) {
    		throw new Error_1$6("<HeroFinder>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\shared\SimpleSortableList.svelte generated by Svelte v3.41.0 */
    const file$d = "src\\shared\\SimpleSortableList.svelte";

    function get_each_context$a(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[14] = list[i];
    	child_ctx[16] = i;
    	return child_ctx;
    }

    const get_default_slot_changes$1 = dirty => ({
    	item: dirty & /*localList*/ 1,
    	i: dirty & /*localList*/ 1
    });

    const get_default_slot_context$1 = ctx => ({
    	item: /*item*/ ctx[14].value,
    	i: /*i*/ ctx[16]
    });

    // (77:0) {#if localList && localList.length}
    function create_if_block$a(ctx) {
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let each_1_anchor;
    	let current;
    	let each_value = /*localList*/ ctx[0];
    	validate_each_argument(each_value);
    	const get_key = ctx => /*item*/ ctx[14].id;
    	validate_each_keys(ctx, each_value, get_each_context$a, get_key);

    	for (let i = 0; i < each_value.length; i += 1) {
    		let child_ctx = get_each_context$a(ctx, each_value, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block$a(key, child_ctx));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty$3();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*localList, isOver, start, over, leave, drop, $$scope*/ 575) {
    				each_value = /*localList*/ ctx[0];
    				validate_each_argument(each_value);
    				group_outros();
    				for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].r();
    				validate_each_keys(ctx, each_value, get_each_context$a, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, each_1_anchor.parentNode, fix_and_outro_and_destroy_block, create_each_block$a, each_1_anchor, get_each_context$a);
    				for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].a();
    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d(detaching);
    			}

    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$a.name,
    		type: "if",
    		source: "(77:0) {#if localList && localList.length}",
    		ctx
    	});

    	return block;
    }

    // (78:1) {#each localList as item, i (item.id)}
    function create_each_block$a(key_1, ctx) {
    	let div;
    	let t;
    	let div_data_index_value;
    	let rect;
    	let stop_animation = noop$1;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[10].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], get_default_slot_context$1);

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			t = space();
    			attr_dev(div, "data-index", div_data_index_value = /*i*/ ctx[16]);
    			attr_dev(div, "draggable", "true");
    			attr_dev(div, "class", "dataItem svelte-1og14g7");
    			toggle_class(div, "over", /*i*/ ctx[16] === /*isOver*/ ctx[1]);
    			add_location(div, file$d, 78, 2, 2241);
    			this.first = div;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			append_dev(div, t);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(div, "dragstart", /*start*/ ctx[2], false, false, false),
    					listen_dev(div, "dragover", /*over*/ ctx[3], false, false, false),
    					listen_dev(div, "dragleave", /*leave*/ ctx[4], false, false, false),
    					listen_dev(div, "drop", /*drop*/ ctx[5], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope, localList*/ 513)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[9],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[9], dirty, get_default_slot_changes$1),
    						get_default_slot_context$1
    					);
    				}
    			}

    			if (!current || dirty & /*localList*/ 1 && div_data_index_value !== (div_data_index_value = /*i*/ ctx[16])) {
    				attr_dev(div, "data-index", div_data_index_value);
    			}

    			if (dirty & /*localList, isOver*/ 3) {
    				toggle_class(div, "over", /*i*/ ctx[16] === /*isOver*/ ctx[1]);
    			}
    		},
    		r: function measure() {
    			rect = div.getBoundingClientRect();
    		},
    		f: function fix() {
    			fix_position(div);
    			stop_animation();
    		},
    		a: function animate() {
    			stop_animation();
    			stop_animation = create_animation(div, rect, flip, { duration: 300 });
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$a.name,
    		type: "each",
    		source: "(78:1) {#each localList as item, i (item.id)}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$g(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*localList*/ ctx[0] && /*localList*/ ctx[0].length && create_if_block$a(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty$3();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*localList*/ ctx[0] && /*localList*/ ctx[0].length) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*localList*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$a(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$g.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function getDraggedParent(node) {
    	if (node.dataset && node.dataset.index) {
    		return node.dataset;
    	} else {
    		return getDraggedParent(node.parentNode);
    	}
    }

    function instance$g($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('SimpleSortableList', slots, ['default']);
    	const dispatch = createEventDispatcher();
    	let { list = [] } = $$props;
    	let { groupID = '' } = $$props;
    	let { validate = () => true } = $$props;
    	let localList = [];

    	function makeLocalList(inputList) {
    		let returnList = [];

    		if (inputList.length !== localList.length) {
    			for (const item of inputList) {
    				returnList.push({ id: v4(), value: item });
    			}
    		} else {
    			returnList = [...localList];

    			for (let i = 0; i < returnList.length; i++) {
    				if (returnList[i].value !== inputList[i]) {
    					returnList[i].value = inputList[i];
    				}
    			}
    		}

    		return returnList;
    	}

    	// DRAG AND DROP
    	let isOver = null;

    	function start(event) {
    		event.dataTransfer.setData("source", JSON.stringify({
    			from: event.target.dataset.index,
    			group: groupID
    		}));
    	}

    	function over(event) {
    		event.preventDefault();
    		let dragged = getDraggedParent(event.target);
    		if (isOver !== dragged.index) $$invalidate(1, isOver = dragged.index);
    	}

    	function leave(event) {
    		let dragged = getDraggedParent(event.target);
    		if (isOver === dragged.index) $$invalidate(1, isOver = null);
    	}

    	function drop(event) {
    		$$invalidate(1, isOver = null);
    		event.preventDefault();

    		if (event.dataTransfer.getData("source")) {
    			let dragged = getDraggedParent(event.target);
    			const dragData = JSON.parse(event.dataTransfer.getData("source"));
    			const from = dragData.from;
    			const group = dragData.group;
    			let to = dragged.index;
    			if (group === groupID) reorder(from, to);
    		}
    	}

    	// DISPATCH REORDER
    	function reorder(from, to) {
    		let newList = [...list];
    		newList[from] = [newList[to], newList[to] = newList[from]][0];

    		if (validate(newList)) {
    			$$invalidate(0, localList[from] = [localList[to], $$invalidate(0, localList[to] = localList[from], localList)][0], localList);
    			dispatch("sort", { newList, from, to, groupID });
    		}
    	}

    	const writable_props = ['list', 'groupID', 'validate'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<SimpleSortableList> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('list' in $$props) $$invalidate(6, list = $$props.list);
    		if ('groupID' in $$props) $$invalidate(7, groupID = $$props.groupID);
    		if ('validate' in $$props) $$invalidate(8, validate = $$props.validate);
    		if ('$$scope' in $$props) $$invalidate(9, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		createEventDispatcher,
    		flip,
    		uuidv4: v4,
    		dispatch,
    		list,
    		groupID,
    		validate,
    		localList,
    		makeLocalList,
    		isOver,
    		getDraggedParent,
    		start,
    		over,
    		leave,
    		drop,
    		reorder
    	});

    	$$self.$inject_state = $$props => {
    		if ('list' in $$props) $$invalidate(6, list = $$props.list);
    		if ('groupID' in $$props) $$invalidate(7, groupID = $$props.groupID);
    		if ('validate' in $$props) $$invalidate(8, validate = $$props.validate);
    		if ('localList' in $$props) $$invalidate(0, localList = $$props.localList);
    		if ('isOver' in $$props) $$invalidate(1, isOver = $$props.isOver);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*list*/ 64) {
    			$$invalidate(0, localList = makeLocalList(list));
    		}
    	};

    	return [
    		localList,
    		isOver,
    		start,
    		over,
    		leave,
    		drop,
    		list,
    		groupID,
    		validate,
    		$$scope,
    		slots
    	];
    }

    class SimpleSortableList extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$g, create_fragment$g, safe_not_equal, { list: 6, groupID: 7, validate: 8 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SimpleSortableList",
    			options,
    			id: create_fragment$g.name
    		});
    	}

    	get list() {
    		throw new Error("<SimpleSortableList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set list(value) {
    		throw new Error("<SimpleSortableList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get groupID() {
    		throw new Error("<SimpleSortableList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set groupID(value) {
    		throw new Error("<SimpleSortableList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get validate() {
    		throw new Error("<SimpleSortableList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set validate(value) {
    		throw new Error("<SimpleSortableList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\shared\XButton.svelte generated by Svelte v3.41.0 */

    const file$c = "src\\shared\\XButton.svelte";

    function create_fragment$f(ctx) {
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "xButton svelte-y9amgq");
    			toggle_class(button, "small", /*size*/ ctx[0] === 'sm' || /*size*/ ctx[0] === 'small');
    			toggle_class(button, "med", /*size*/ ctx[0] === 'med' || /*size*/ ctx[0] === 'medium');
    			toggle_class(button, "large", /*size*/ ctx[0] === 'lg' || /*size*/ ctx[0] === 'large');
    			toggle_class(button, "hoverable", /*hoverable*/ ctx[1]);
    			add_location(button, file$c, 6, 0, 122);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*click_handler*/ ctx[3], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*size*/ 1) {
    				toggle_class(button, "small", /*size*/ ctx[0] === 'sm' || /*size*/ ctx[0] === 'small');
    			}

    			if (dirty & /*size*/ 1) {
    				toggle_class(button, "med", /*size*/ ctx[0] === 'med' || /*size*/ ctx[0] === 'medium');
    			}

    			if (dirty & /*size*/ 1) {
    				toggle_class(button, "large", /*size*/ ctx[0] === 'lg' || /*size*/ ctx[0] === 'large');
    			}

    			if (dirty & /*hoverable*/ 2) {
    				toggle_class(button, "hoverable", /*hoverable*/ ctx[1]);
    			}
    		},
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$f.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$f($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('XButton', slots, []);
    	let { size = "small" } = $$props;
    	let { hoverable = false } = $$props;

    	let { clickCallback = () => {
    		
    	} } = $$props;

    	const writable_props = ['size', 'hoverable', 'clickCallback'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<XButton> was created with unknown prop '${key}'`);
    	});

    	const click_handler = e => {
    		clickCallback();
    		e.stopPropagation();
    	};

    	$$self.$$set = $$props => {
    		if ('size' in $$props) $$invalidate(0, size = $$props.size);
    		if ('hoverable' in $$props) $$invalidate(1, hoverable = $$props.hoverable);
    		if ('clickCallback' in $$props) $$invalidate(2, clickCallback = $$props.clickCallback);
    	};

    	$$self.$capture_state = () => ({ size, hoverable, clickCallback });

    	$$self.$inject_state = $$props => {
    		if ('size' in $$props) $$invalidate(0, size = $$props.size);
    		if ('hoverable' in $$props) $$invalidate(1, hoverable = $$props.hoverable);
    		if ('clickCallback' in $$props) $$invalidate(2, clickCallback = $$props.clickCallback);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [size, hoverable, clickCallback, click_handler];
    }

    class XButton extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$f, create_fragment$f, safe_not_equal, { size: 0, hoverable: 1, clickCallback: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "XButton",
    			options,
    			id: create_fragment$f.name
    		});
    	}

    	get size() {
    		throw new Error("<XButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set size(value) {
    		throw new Error("<XButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get hoverable() {
    		throw new Error("<XButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set hoverable(value) {
    		throw new Error("<XButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get clickCallback() {
    		throw new Error("<XButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set clickCallback(value) {
    		throw new Error("<XButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\modals\CompEditor.svelte generated by Svelte v3.41.0 */

    const { Error: Error_1$5, Object: Object_1$1 } = globals;
    const file$b = "src\\modals\\CompEditor.svelte";

    function get_each_context$9(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[70] = list[i];
    	child_ctx[71] = list;
    	child_ctx[72] = i;
    	return child_ctx;
    }

    function get_each_context_1$5(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[76] = list[i];
    	return child_ctx;
    }

    function get_each_context_2$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[79] = list[i];
    	child_ctx[72] = i;
    	return child_ctx;
    }

    // (402:3) {#if comp.draft}
    function create_if_block_20$1(ctx) {
    	let div;
    	let span;

    	const block = {
    		c: function create() {
    			div = element("div");
    			span = element("span");
    			span.textContent = "draft";
    			attr_dev(span, "class", "draftLabel svelte-1wbn975");
    			add_location(span, file$b, 402, 32, 11900);
    			attr_dev(div, "class", "draftContainer svelte-1wbn975");
    			add_location(div, file$b, 402, 4, 11872);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, span);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_20$1.name,
    		type: "if",
    		source: "(402:3) {#if comp.draft}",
    		ctx
    	});

    	return block;
    }

    // (408:5) {#each comp.tags as tag, i}
    function create_each_block_2$3(ctx) {
    	let div1;
    	let span;
    	let t0_value = /*tag*/ ctx[79] + "";
    	let t0;
    	let t1;
    	let div0;
    	let xbutton;
    	let current;

    	function func() {
    		return /*func*/ ctx[44](/*i*/ ctx[72]);
    	}

    	xbutton = new XButton({
    			props: {
    				clickCallback: func,
    				size: "small",
    				hoverable: false
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			span = element("span");
    			t0 = text$2(t0_value);
    			t1 = space();
    			div0 = element("div");
    			create_component(xbutton.$$.fragment);
    			attr_dev(span, "class", "tagText svelte-1wbn975");
    			add_location(span, file$b, 409, 7, 12097);
    			attr_dev(div0, "class", "removeTagButtonContainer svelte-1wbn975");
    			add_location(div0, file$b, 410, 7, 12140);
    			attr_dev(div1, "class", "tag svelte-1wbn975");
    			add_location(div1, file$b, 408, 6, 12071);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, span);
    			append_dev(span, t0);
    			append_dev(div1, t1);
    			append_dev(div1, div0);
    			mount_component(xbutton, div0, null);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if ((!current || dirty[0] & /*comp*/ 2) && t0_value !== (t0_value = /*tag*/ ctx[79] + "")) set_data_dev(t0, t0_value);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(xbutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(xbutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_component(xbutton);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_2$3.name,
    		type: "each",
    		source: "(408:5) {#each comp.tags as tag, i}",
    		ctx
    	});

    	return block;
    }

    // (429:5) {:else}
    function create_else_block_6$1(ctx) {
    	let div1;
    	let input;
    	let t;
    	let div0;
    	let mounted;
    	let dispose;
    	let each_value_1 = /*tagSuggestions*/ ctx[11];
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1$5(get_each_context_1$5(ctx, each_value_1, i));
    	}

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			input = element("input");
    			t = space();
    			div0 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(input, "id", "newTagInput");
    			attr_dev(input, "class", "tagInput svelte-1wbn975");
    			attr_dev(input, "type", "text");
    			attr_dev(input, "maxlength", "20");
    			toggle_class(input, "noMargin", /*comp*/ ctx[1].tags.length === 0);
    			add_location(input, file$b, 430, 7, 12758);
    			attr_dev(div0, "class", "suggestions svelte-1wbn975");
    			toggle_class(div0, "open", /*openSuggestions*/ ctx[10]);
    			add_location(div0, file$b, 440, 7, 13122);
    			attr_dev(div1, "class", "newTagInputArea svelte-1wbn975");
    			add_location(div1, file$b, 429, 6, 12720);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, input);
    			set_input_value(input, /*newTagText*/ ctx[8]);
    			append_dev(div1, t);
    			append_dev(div1, div0);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div0, null);
    			}

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "input", /*input_input_handler*/ ctx[46]),
    					listen_dev(input, "focus", /*focus_handler*/ ctx[47], false, false, false),
    					listen_dev(input, "blur", /*handleAddTag*/ ctx[30], false, false, false),
    					listen_dev(input, "keyup", /*keyup_handler*/ ctx[48], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*newTagText*/ 256 && input.value !== /*newTagText*/ ctx[8]) {
    				set_input_value(input, /*newTagText*/ ctx[8]);
    			}

    			if (dirty[0] & /*comp*/ 2) {
    				toggle_class(input, "noMargin", /*comp*/ ctx[1].tags.length === 0);
    			}

    			if (dirty[0] & /*tagSuggestions*/ 2048 | dirty[1] & /*takeTagSuggestion*/ 4) {
    				each_value_1 = /*tagSuggestions*/ ctx[11];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$5(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_1$5(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div0, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_1.length;
    			}

    			if (dirty[0] & /*openSuggestions*/ 1024) {
    				toggle_class(div0, "open", /*openSuggestions*/ ctx[10]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_6$1.name,
    		type: "else",
    		source: "(429:5) {:else}",
    		ctx
    	});

    	return block;
    }

    // (416:5) {#if !addTagOpen}
    function create_if_block_19$1(ctx) {
    	let button;
    	let span;
    	let button_disabled_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			span = element("span");
    			span.textContent = "+";
    			add_location(span, file$b, 426, 7, 12667);
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "addTagButton svelte-1wbn975");
    			button.disabled = button_disabled_value = /*comp*/ ctx[1].tags.length >= /*$AppData*/ ctx[13].maxCompTags;
    			toggle_class(button, "noMargin", /*comp*/ ctx[1].tags.length === 0);
    			add_location(button, file$b, 416, 6, 12340);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, span);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*click_handler*/ ctx[45], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*comp, $AppData*/ 8194 && button_disabled_value !== (button_disabled_value = /*comp*/ ctx[1].tags.length >= /*$AppData*/ ctx[13].maxCompTags)) {
    				prop_dev(button, "disabled", button_disabled_value);
    			}

    			if (dirty[0] & /*comp*/ 2) {
    				toggle_class(button, "noMargin", /*comp*/ ctx[1].tags.length === 0);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_19$1.name,
    		type: "if",
    		source: "(416:5) {#if !addTagOpen}",
    		ctx
    	});

    	return block;
    }

    // (442:8) {#each tagSuggestions as suggestion}
    function create_each_block_1$5(ctx) {
    	let button;
    	let span;
    	let t_value = /*suggestion*/ ctx[76] + "";
    	let t;
    	let mounted;
    	let dispose;

    	function mousedown_handler() {
    		return /*mousedown_handler*/ ctx[49](/*suggestion*/ ctx[76]);
    	}

    	const block = {
    		c: function create() {
    			button = element("button");
    			span = element("span");
    			t = text$2(t_value);
    			add_location(span, file$b, 442, 107, 13331);
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "suggestionButton svelte-1wbn975");
    			add_location(button, file$b, 442, 9, 13233);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, span);
    			append_dev(span, t);

    			if (!mounted) {
    				dispose = listen_dev(button, "mousedown", mousedown_handler, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty[0] & /*tagSuggestions*/ 2048 && t_value !== (t_value = /*suggestion*/ ctx[76] + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$5.name,
    		type: "each",
    		source: "(442:8) {#each tagSuggestions as suggestion}",
    		ctx
    	});

    	return block;
    }

    // (455:5) <SimpleSortableList        list={comp.lines}        groupID="lineEditHead"        validate={validateLineEditHead}        on:sort={handleLineSort}        let:item={line}        let:i={i}>
    function create_default_slot_2(ctx) {
    	let button;
    	let span;
    	let t0_value = /*line*/ ctx[75].name + "";
    	let t0;
    	let t1;
    	let div;
    	let xbutton;
    	let current;
    	let mounted;
    	let dispose;

    	function func_1() {
    		return /*func_1*/ ctx[50](/*i*/ ctx[72]);
    	}

    	xbutton = new XButton({
    			props: {
    				clickCallback: func_1,
    				size: "small",
    				hoverable: false
    			},
    			$$inline: true
    		});

    	function click_handler_1() {
    		return /*click_handler_1*/ ctx[51](/*i*/ ctx[72]);
    	}

    	const block = {
    		c: function create() {
    			button = element("button");
    			span = element("span");
    			t0 = text$2(t0_value);
    			t1 = space();
    			div = element("div");
    			create_component(xbutton.$$.fragment);
    			attr_dev(span, "class", "svelte-1wbn975");
    			add_location(span, file$b, 462, 7, 13898);
    			attr_dev(div, "class", "removeButtonContainer svelte-1wbn975");
    			toggle_class(div, "open", /*openLine*/ ctx[2] === /*i*/ ctx[72]);
    			add_location(div, file$b, 463, 7, 13931);
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "linePickerOption svelte-1wbn975");
    			toggle_class(button, "open", /*openLine*/ ctx[2] === /*i*/ ctx[72]);
    			add_location(button, file$b, 461, 6, 13784);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, span);
    			append_dev(span, t0);
    			append_dev(button, t1);
    			append_dev(button, div);
    			mount_component(xbutton, div, null);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", click_handler_1, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if ((!current || dirty[2] & /*line*/ 8192) && t0_value !== (t0_value = /*line*/ ctx[75].name + "")) set_data_dev(t0, t0_value);

    			if (dirty[0] & /*openLine*/ 4 | dirty[2] & /*i*/ 1024) {
    				toggle_class(div, "open", /*openLine*/ ctx[2] === /*i*/ ctx[72]);
    			}

    			if (dirty[0] & /*openLine*/ 4 | dirty[2] & /*i*/ 1024) {
    				toggle_class(button, "open", /*openLine*/ ctx[2] === /*i*/ ctx[72]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(xbutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(xbutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			destroy_component(xbutton);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2.name,
    		type: "slot",
    		source: "(455:5) <SimpleSortableList        list={comp.lines}        groupID=\\\"lineEditHead\\\"        validate={validateLineEditHead}        on:sort={handleLineSort}        let:item={line}        let:i={i}>",
    		ctx
    	});

    	return block;
    }

    // (474:5) {:else}
    function create_else_block_2$2(ctx) {
    	let input;
    	let t;
    	let div;
    	let simplesortablelist;
    	let current;
    	let mounted;
    	let dispose;

    	simplesortablelist = new SimpleSortableList({
    			props: {
    				list: [.../*comp*/ ctx[1].lines[/*openLine*/ ctx[2]].heroes].reverse(),
    				groupID: "lineDisplay",
    				validate: /*validateLineDisplay*/ ctx[36],
    				$$slots: {
    					default: [
    						create_default_slot_1$1,
    						({ item: hero, i }) => ({ 73: hero, 72: i }),
    						({ item: hero, i }) => [0, 0, (hero ? 2048 : 0) | (i ? 1024 : 0)]
    					]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	simplesortablelist.$on("sort", /*handleLineDisplaySort*/ ctx[37]);

    	const block = {
    		c: function create() {
    			input = element("input");
    			t = space();
    			div = element("div");
    			create_component(simplesortablelist.$$.fragment);
    			attr_dev(input, "type", "text");
    			attr_dev(input, "class", "lineNameInput svelte-1wbn975");
    			attr_dev(input, "placeholder", "Line Name");
    			attr_dev(input, "maxlength", "30");
    			toggle_class(input, "maxed", /*comp*/ ctx[1].lines[/*openLine*/ ctx[2]].name.length >= 30);
    			add_location(input, file$b, 474, 6, 14393);
    			attr_dev(div, "class", "lineDisplay svelte-1wbn975");
    			add_location(div, file$b, 475, 6, 14573);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, input, anchor);
    			set_input_value(input, /*comp*/ ctx[1].lines[/*openLine*/ ctx[2]].name);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div, anchor);
    			mount_component(simplesortablelist, div, null);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(input, "input", /*input_input_handler_1*/ ctx[52]);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*comp, openLine*/ 6 && input.value !== /*comp*/ ctx[1].lines[/*openLine*/ ctx[2]].name) {
    				set_input_value(input, /*comp*/ ctx[1].lines[/*openLine*/ ctx[2]].name);
    			}

    			if (dirty[0] & /*comp, openLine*/ 6) {
    				toggle_class(input, "maxed", /*comp*/ ctx[1].lines[/*openLine*/ ctx[2]].name.length >= 30);
    			}

    			const simplesortablelist_changes = {};
    			if (dirty[0] & /*comp, openLine*/ 6) simplesortablelist_changes.list = [.../*comp*/ ctx[1].lines[/*openLine*/ ctx[2]].heroes].reverse();

    			if (dirty[0] & /*openLine, comp*/ 6 | dirty[2] & /*$$scope, hero*/ 526336) {
    				simplesortablelist_changes.$$scope = { dirty, ctx };
    			}

    			simplesortablelist.$set(simplesortablelist_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(simplesortablelist.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(simplesortablelist.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(input);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div);
    			destroy_component(simplesortablelist);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_2$2.name,
    		type: "else",
    		source: "(474:5) {:else}",
    		ctx
    	});

    	return block;
    }

    // (472:5) {#if openLine === null}
    function create_if_block_9$1(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "Select a line to edit.";
    			attr_dev(span, "class", "noLine svelte-1wbn975");
    			add_location(span, file$b, 472, 6, 14321);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		p: noop$1,
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_9$1.name,
    		type: "if",
    		source: "(472:5) {#if openLine === null}",
    		ctx
    	});

    	return block;
    }

    // (488:8) {:else}
    function create_else_block_3$1(ctx) {
    	let button;
    	let div2;
    	let img;
    	let img_src_value;
    	let img_alt_value;
    	let t0;
    	let span;
    	let t1;
    	let div0;
    	let xbutton;
    	let t2;
    	let div1;
    	let t3;
    	let t4;
    	let t5;
    	let p;
    	let t6_value = /*heroLookup*/ ctx[14][/*hero*/ ctx[73]].name + "";
    	let t6;
    	let current;
    	let mounted;
    	let dispose;

    	function func_2() {
    		return /*func_2*/ ctx[54](/*i*/ ctx[72]);
    	}

    	xbutton = new XButton({
    			props: {
    				clickCallback: func_2,
    				size: "medium",
    				hoverable: false
    			},
    			$$inline: true
    		});

    	function select_block_type_3(ctx, dirty) {
    		if (/*comp*/ ctx[1].heroes[/*hero*/ ctx[73]].ascendLv >= 6) return create_if_block_16$1;
    		if (/*comp*/ ctx[1].heroes[/*hero*/ ctx[73]].ascendLv >= 4) return create_if_block_17$1;
    		if (/*comp*/ ctx[1].heroes[/*hero*/ ctx[73]].ascendLv >= 2) return create_if_block_18$1;
    		return create_else_block_5$1;
    	}

    	let current_block_type = select_block_type_3(ctx);
    	let if_block0 = current_block_type(ctx);

    	function select_block_type_4(ctx, dirty) {
    		if (/*comp*/ ctx[1].heroes[/*hero*/ ctx[73]].si >= 30) return create_if_block_13$1;
    		if (/*comp*/ ctx[1].heroes[/*hero*/ ctx[73]].si >= 20) return create_if_block_14$1;
    		if (/*comp*/ ctx[1].heroes[/*hero*/ ctx[73]].si >= 10) return create_if_block_15$1;
    		return create_else_block_4$1;
    	}

    	let current_block_type_1 = select_block_type_4(ctx);
    	let if_block1 = current_block_type_1(ctx);

    	function select_block_type_5(ctx, dirty) {
    		if (/*comp*/ ctx[1].heroes[/*hero*/ ctx[73]].furn >= 9) return create_if_block_11$1;
    		if (/*comp*/ ctx[1].heroes[/*hero*/ ctx[73]].furn >= 3) return create_if_block_12$1;
    	}

    	let current_block_type_2 = select_block_type_5(ctx);
    	let if_block2 = current_block_type_2 && current_block_type_2(ctx);

    	function click_handler_3() {
    		return /*click_handler_3*/ ctx[55](/*i*/ ctx[72], /*hero*/ ctx[73]);
    	}

    	const block = {
    		c: function create() {
    			button = element("button");
    			div2 = element("div");
    			img = element("img");
    			t0 = space();
    			span = element("span");
    			t1 = space();
    			div0 = element("div");
    			create_component(xbutton.$$.fragment);
    			t2 = space();
    			div1 = element("div");
    			if_block0.c();
    			t3 = space();
    			if_block1.c();
    			t4 = space();
    			if (if_block2) if_block2.c();
    			t5 = space();
    			p = element("p");
    			t6 = text$2(t6_value);
    			attr_dev(img, "draggable", "false");
    			if (!src_url_equal(img.src, img_src_value = /*heroLookup*/ ctx[14][/*hero*/ ctx[73]].portrait)) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", img_alt_value = /*heroLookup*/ ctx[14][/*hero*/ ctx[73]].name);
    			attr_dev(img, "class", "svelte-1wbn975");
    			add_location(img, file$b, 490, 11, 15399);
    			attr_dev(span, "class", "coreMark svelte-1wbn975");
    			toggle_class(span, "visible", /*comp*/ ctx[1].heroes[/*hero*/ ctx[73]].core);
    			add_location(span, file$b, 491, 11, 15495);
    			attr_dev(div0, "class", "removeHeroButtonContainer svelte-1wbn975");
    			add_location(div0, file$b, 492, 11, 15577);
    			attr_dev(div1, "class", "ascMark svelte-1wbn975");
    			add_location(div1, file$b, 495, 11, 15755);
    			attr_dev(div2, "class", "imgContainer svelte-1wbn975");
    			add_location(div2, file$b, 489, 10, 15360);
    			attr_dev(p, "class", "svelte-1wbn975");
    			add_location(p, file$b, 521, 10, 17210);
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "heroButton svelte-1wbn975");
    			add_location(button, file$b, 488, 9, 15153);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, div2);
    			append_dev(div2, img);
    			append_dev(div2, t0);
    			append_dev(div2, span);
    			append_dev(div2, t1);
    			append_dev(div2, div0);
    			mount_component(xbutton, div0, null);
    			append_dev(div2, t2);
    			append_dev(div2, div1);
    			if_block0.m(div1, null);
    			append_dev(div1, t3);
    			if_block1.m(div1, null);
    			append_dev(div1, t4);
    			if (if_block2) if_block2.m(div1, null);
    			append_dev(button, t5);
    			append_dev(button, p);
    			append_dev(p, t6);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", click_handler_3, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (!current || dirty[2] & /*hero*/ 2048 && !src_url_equal(img.src, img_src_value = /*heroLookup*/ ctx[14][/*hero*/ ctx[73]].portrait)) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if (!current || dirty[2] & /*hero*/ 2048 && img_alt_value !== (img_alt_value = /*heroLookup*/ ctx[14][/*hero*/ ctx[73]].name)) {
    				attr_dev(img, "alt", img_alt_value);
    			}

    			if (dirty[0] & /*comp*/ 2 | dirty[2] & /*hero*/ 2048) {
    				toggle_class(span, "visible", /*comp*/ ctx[1].heroes[/*hero*/ ctx[73]].core);
    			}

    			const xbutton_changes = {};
    			if (dirty[0] & /*openLine*/ 4) xbutton_changes.clickCallback = func_2;
    			xbutton.$set(xbutton_changes);

    			if (current_block_type !== (current_block_type = select_block_type_3(ctx))) {
    				if_block0.d(1);
    				if_block0 = current_block_type(ctx);

    				if (if_block0) {
    					if_block0.c();
    					if_block0.m(div1, t3);
    				}
    			}

    			if (current_block_type_1 !== (current_block_type_1 = select_block_type_4(ctx))) {
    				if_block1.d(1);
    				if_block1 = current_block_type_1(ctx);

    				if (if_block1) {
    					if_block1.c();
    					if_block1.m(div1, t4);
    				}
    			}

    			if (current_block_type_2 === (current_block_type_2 = select_block_type_5(ctx)) && if_block2) {
    				if_block2.p(ctx, dirty);
    			} else {
    				if (if_block2) if_block2.d(1);
    				if_block2 = current_block_type_2 && current_block_type_2(ctx);

    				if (if_block2) {
    					if_block2.c();
    					if_block2.m(div1, null);
    				}
    			}

    			if ((!current || dirty[2] & /*hero*/ 2048) && t6_value !== (t6_value = /*heroLookup*/ ctx[14][/*hero*/ ctx[73]].name + "")) set_data_dev(t6, t6_value);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(xbutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(xbutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			destroy_component(xbutton);
    			if_block0.d();
    			if_block1.d();

    			if (if_block2) {
    				if_block2.d();
    			}

    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_3$1.name,
    		type: "else",
    		source: "(488:8) {:else}",
    		ctx
    	});

    	return block;
    }

    // (484:8) {#if hero === 'unknown'}
    function create_if_block_10$1(ctx) {
    	let button;
    	let span;
    	let mounted;
    	let dispose;

    	function click_handler_2() {
    		return /*click_handler_2*/ ctx[53](/*i*/ ctx[72]);
    	}

    	const block = {
    		c: function create() {
    			button = element("button");
    			span = element("span");
    			span.textContent = "+";
    			add_location(span, file$b, 485, 10, 15091);
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "addHeroButton lineButton svelte-1wbn975");
    			add_location(button, file$b, 484, 9, 14887);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, span);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", click_handler_2, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_10$1.name,
    		type: "if",
    		source: "(484:8) {#if hero === 'unknown'}",
    		ctx
    	});

    	return block;
    }

    // (503:12) {:else}
    function create_else_block_5$1(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			attr_dev(img, "draggable", "false");
    			if (!src_url_equal(img.src, img_src_value = "./img/markers/elite.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "elite");
    			attr_dev(img, "class", "svelte-1wbn975");
    			add_location(img, file$b, 503, 13, 16231);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_5$1.name,
    		type: "else",
    		source: "(503:12) {:else}",
    		ctx
    	});

    	return block;
    }

    // (501:54) 
    function create_if_block_18$1(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			attr_dev(img, "draggable", "false");
    			if (!src_url_equal(img.src, img_src_value = "./img/markers/legendary.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "legendary");
    			attr_dev(img, "class", "svelte-1wbn975");
    			add_location(img, file$b, 501, 13, 16122);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_18$1.name,
    		type: "if",
    		source: "(501:54) ",
    		ctx
    	});

    	return block;
    }

    // (499:54) 
    function create_if_block_17$1(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			attr_dev(img, "draggable", "false");
    			if (!src_url_equal(img.src, img_src_value = "./img/markers/mythic.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "mythic");
    			attr_dev(img, "class", "svelte-1wbn975");
    			add_location(img, file$b, 499, 13, 15984);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_17$1.name,
    		type: "if",
    		source: "(499:54) ",
    		ctx
    	});

    	return block;
    }

    // (497:12) {#if comp.heroes[hero].ascendLv >= 6}
    function create_if_block_16$1(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			attr_dev(img, "draggable", "false");
    			if (!src_url_equal(img.src, img_src_value = "./img/markers/ascended.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "ascended");
    			attr_dev(img, "class", "svelte-1wbn975");
    			add_location(img, file$b, 497, 13, 15842);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_16$1.name,
    		type: "if",
    		source: "(497:12) {#if comp.heroes[hero].ascendLv >= 6}",
    		ctx
    	});

    	return block;
    }

    // (512:12) {:else}
    function create_else_block_4$1(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			attr_dev(img, "draggable", "false");
    			if (!src_url_equal(img.src, img_src_value = "./img/markers/si0.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "si0");
    			attr_dev(img, "class", "svelte-1wbn975");
    			add_location(img, file$b, 512, 13, 16733);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_4$1.name,
    		type: "else",
    		source: "(512:12) {:else}",
    		ctx
    	});

    	return block;
    }

    // (510:49) 
    function create_if_block_15$1(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			attr_dev(img, "draggable", "false");
    			if (!src_url_equal(img.src, img_src_value = "./img/markers/si10.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "si10");
    			attr_dev(img, "class", "svelte-1wbn975");
    			add_location(img, file$b, 510, 13, 16634);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_15$1.name,
    		type: "if",
    		source: "(510:49) ",
    		ctx
    	});

    	return block;
    }

    // (508:49) 
    function create_if_block_14$1(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			attr_dev(img, "draggable", "false");
    			if (!src_url_equal(img.src, img_src_value = "./img/markers/si20.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "si20");
    			attr_dev(img, "class", "svelte-1wbn975");
    			add_location(img, file$b, 508, 13, 16505);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_14$1.name,
    		type: "if",
    		source: "(508:49) ",
    		ctx
    	});

    	return block;
    }

    // (506:12) {#if comp.heroes[hero].si >= 30}
    function create_if_block_13$1(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			attr_dev(img, "draggable", "false");
    			if (!src_url_equal(img.src, img_src_value = "./img/markers/si30.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "si30");
    			attr_dev(img, "class", "svelte-1wbn975");
    			add_location(img, file$b, 506, 13, 16376);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_13$1.name,
    		type: "if",
    		source: "(506:12) {#if comp.heroes[hero].si >= 30}",
    		ctx
    	});

    	return block;
    }

    // (517:50) 
    function create_if_block_12$1(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			attr_dev(img, "draggable", "false");
    			if (!src_url_equal(img.src, img_src_value = "./img/markers/3f.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "3f");
    			attr_dev(img, "class", "svelte-1wbn975");
    			toggle_class(img, "moveup", /*comp*/ ctx[1].heroes[/*hero*/ ctx[73]].si < 10);
    			add_location(img, file$b, 517, 13, 17042);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*comp*/ 2 | dirty[2] & /*hero*/ 2048) {
    				toggle_class(img, "moveup", /*comp*/ ctx[1].heroes[/*hero*/ ctx[73]].si < 10);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_12$1.name,
    		type: "if",
    		source: "(517:50) ",
    		ctx
    	});

    	return block;
    }

    // (515:12) {#if comp.heroes[hero].furn >= 9}
    function create_if_block_11$1(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			attr_dev(img, "draggable", "false");
    			if (!src_url_equal(img.src, img_src_value = "./img/markers/9f.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "9f");
    			attr_dev(img, "class", "svelte-1wbn975");
    			toggle_class(img, "moveup", /*comp*/ ctx[1].heroes[/*hero*/ ctx[73]].si < 10);
    			add_location(img, file$b, 515, 13, 16875);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*comp*/ 2 | dirty[2] & /*hero*/ 2048) {
    				toggle_class(img, "moveup", /*comp*/ ctx[1].heroes[/*hero*/ ctx[73]].si < 10);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_11$1.name,
    		type: "if",
    		source: "(515:12) {#if comp.heroes[hero].furn >= 9}",
    		ctx
    	});

    	return block;
    }

    // (477:7) <SimpleSortableList          list={[...comp.lines[openLine].heroes].reverse()}          groupID="lineDisplay"          validate={validateLineDisplay}          on:sort={handleLineDisplaySort}          let:item={hero}          let:i={i}>
    function create_default_slot_1$1(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block_10$1, create_else_block_3$1];
    	const if_blocks = [];

    	function select_block_type_2(ctx, dirty) {
    		if (/*hero*/ ctx[73] === 'unknown') return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type_2(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty$3();
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_2(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$1.name,
    		type: "slot",
    		source: "(477:7) <SimpleSortableList          list={[...comp.lines[openLine].heroes].reverse()}          groupID=\\\"lineDisplay\\\"          validate={validateLineDisplay}          on:sort={handleLineDisplaySort}          let:item={hero}          let:i={i}>",
    		ctx
    	});

    	return block;
    }

    // (573:12) {:else}
    function create_else_block_1$3(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			attr_dev(img, "draggable", "false");
    			if (!src_url_equal(img.src, img_src_value = "./img/markers/elite.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "elite");
    			attr_dev(img, "class", "svelte-1wbn975");
    			add_location(img, file$b, 573, 13, 19644);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$3.name,
    		type: "else",
    		source: "(573:12) {:else}",
    		ctx
    	});

    	return block;
    }

    // (571:54) 
    function create_if_block_8$1(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			attr_dev(img, "draggable", "false");
    			if (!src_url_equal(img.src, img_src_value = "./img/markers/legendary.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "legendary");
    			attr_dev(img, "class", "svelte-1wbn975");
    			add_location(img, file$b, 571, 13, 19535);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_8$1.name,
    		type: "if",
    		source: "(571:54) ",
    		ctx
    	});

    	return block;
    }

    // (569:54) 
    function create_if_block_7$1(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			attr_dev(img, "draggable", "false");
    			if (!src_url_equal(img.src, img_src_value = "./img/markers/mythic.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "mythic");
    			attr_dev(img, "class", "svelte-1wbn975");
    			add_location(img, file$b, 569, 13, 19397);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7$1.name,
    		type: "if",
    		source: "(569:54) ",
    		ctx
    	});

    	return block;
    }

    // (567:12) {#if comp.heroes[hero].ascendLv >= 6}
    function create_if_block_6$1(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			attr_dev(img, "draggable", "false");
    			if (!src_url_equal(img.src, img_src_value = "./img/markers/ascended.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "ascended");
    			attr_dev(img, "class", "svelte-1wbn975");
    			add_location(img, file$b, 567, 13, 19255);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6$1.name,
    		type: "if",
    		source: "(567:12) {#if comp.heroes[hero].ascendLv >= 6}",
    		ctx
    	});

    	return block;
    }

    // (582:12) {:else}
    function create_else_block$7(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			attr_dev(img, "draggable", "false");
    			if (!src_url_equal(img.src, img_src_value = "./img/markers/si0.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "si0");
    			attr_dev(img, "class", "svelte-1wbn975");
    			add_location(img, file$b, 582, 13, 20146);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$7.name,
    		type: "else",
    		source: "(582:12) {:else}",
    		ctx
    	});

    	return block;
    }

    // (580:49) 
    function create_if_block_5$2(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			attr_dev(img, "draggable", "false");
    			if (!src_url_equal(img.src, img_src_value = "./img/markers/si10.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "si10");
    			attr_dev(img, "class", "svelte-1wbn975");
    			add_location(img, file$b, 580, 13, 20047);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$2.name,
    		type: "if",
    		source: "(580:49) ",
    		ctx
    	});

    	return block;
    }

    // (578:49) 
    function create_if_block_4$4(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			attr_dev(img, "draggable", "false");
    			if (!src_url_equal(img.src, img_src_value = "./img/markers/si20.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "si20");
    			attr_dev(img, "class", "svelte-1wbn975");
    			add_location(img, file$b, 578, 13, 19918);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$4.name,
    		type: "if",
    		source: "(578:49) ",
    		ctx
    	});

    	return block;
    }

    // (576:12) {#if comp.heroes[hero].si >= 30}
    function create_if_block_3$4(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			attr_dev(img, "draggable", "false");
    			if (!src_url_equal(img.src, img_src_value = "./img/markers/si30.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "si30");
    			attr_dev(img, "class", "svelte-1wbn975");
    			add_location(img, file$b, 576, 13, 19789);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$4.name,
    		type: "if",
    		source: "(576:12) {#if comp.heroes[hero].si >= 30}",
    		ctx
    	});

    	return block;
    }

    // (587:50) 
    function create_if_block_2$4(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			attr_dev(img, "draggable", "false");
    			if (!src_url_equal(img.src, img_src_value = "./img/markers/3f.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "3f");
    			attr_dev(img, "class", "svelte-1wbn975");
    			toggle_class(img, "moveup", /*comp*/ ctx[1].heroes[/*hero*/ ctx[73]].si < 10);
    			add_location(img, file$b, 587, 13, 20455);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*comp*/ 2 | dirty[2] & /*hero*/ 2048) {
    				toggle_class(img, "moveup", /*comp*/ ctx[1].heroes[/*hero*/ ctx[73]].si < 10);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$4.name,
    		type: "if",
    		source: "(587:50) ",
    		ctx
    	});

    	return block;
    }

    // (585:12) {#if comp.heroes[hero].furn >= 9}
    function create_if_block_1$4(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			attr_dev(img, "draggable", "false");
    			if (!src_url_equal(img.src, img_src_value = "./img/markers/9f.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "9f");
    			attr_dev(img, "class", "svelte-1wbn975");
    			toggle_class(img, "moveup", /*comp*/ ctx[1].heroes[/*hero*/ ctx[73]].si < 10);
    			add_location(img, file$b, 585, 13, 20288);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*comp*/ 2 | dirty[2] & /*hero*/ 2048) {
    				toggle_class(img, "moveup", /*comp*/ ctx[1].heroes[/*hero*/ ctx[73]].si < 10);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$4.name,
    		type: "if",
    		source: "(585:12) {#if comp.heroes[hero].furn >= 9}",
    		ctx
    	});

    	return block;
    }

    // (549:8) <SimpleSortableList           list={sub.heroes}           groupID="subLine-{i}"           validate={validateSubLine}           on:sort={handleSubSort}           let:item={hero}           let:i={j}>
    function create_default_slot$4(ctx) {
    	let div2;
    	let button;
    	let img;
    	let img_src_value;
    	let img_alt_value;
    	let t0;
    	let div0;
    	let xbutton;
    	let t1;
    	let span;
    	let t2;
    	let div1;
    	let t3;
    	let t4;
    	let t5;
    	let p;
    	let t6_value = /*heroLookup*/ ctx[14][/*hero*/ ctx[73]].name + "";
    	let t6;
    	let current;
    	let mounted;
    	let dispose;

    	function func_4(...args) {
    		return /*func_4*/ ctx[58](/*hero*/ ctx[73], ...args);
    	}

    	function func_5(...args) {
    		return /*func_5*/ ctx[59](/*hero*/ ctx[73], ...args);
    	}

    	function func_6() {
    		return /*func_6*/ ctx[60](/*i*/ ctx[72], /*j*/ ctx[74]);
    	}

    	xbutton = new XButton({
    			props: {
    				clickCallback: func_6,
    				size: "medium",
    				hoverable: false
    			},
    			$$inline: true
    		});

    	function select_block_type_6(ctx, dirty) {
    		if (/*comp*/ ctx[1].heroes[/*hero*/ ctx[73]].ascendLv >= 6) return create_if_block_6$1;
    		if (/*comp*/ ctx[1].heroes[/*hero*/ ctx[73]].ascendLv >= 4) return create_if_block_7$1;
    		if (/*comp*/ ctx[1].heroes[/*hero*/ ctx[73]].ascendLv >= 2) return create_if_block_8$1;
    		return create_else_block_1$3;
    	}

    	let current_block_type = select_block_type_6(ctx);
    	let if_block0 = current_block_type(ctx);

    	function select_block_type_7(ctx, dirty) {
    		if (/*comp*/ ctx[1].heroes[/*hero*/ ctx[73]].si >= 30) return create_if_block_3$4;
    		if (/*comp*/ ctx[1].heroes[/*hero*/ ctx[73]].si >= 20) return create_if_block_4$4;
    		if (/*comp*/ ctx[1].heroes[/*hero*/ ctx[73]].si >= 10) return create_if_block_5$2;
    		return create_else_block$7;
    	}

    	let current_block_type_1 = select_block_type_7(ctx);
    	let if_block1 = current_block_type_1(ctx);

    	function select_block_type_8(ctx, dirty) {
    		if (/*comp*/ ctx[1].heroes[/*hero*/ ctx[73]].furn >= 9) return create_if_block_1$4;
    		if (/*comp*/ ctx[1].heroes[/*hero*/ ctx[73]].furn >= 3) return create_if_block_2$4;
    	}

    	let current_block_type_2 = select_block_type_8(ctx);
    	let if_block2 = current_block_type_2 && current_block_type_2(ctx);

    	function click_handler_4() {
    		return /*click_handler_4*/ ctx[61](/*i*/ ctx[72], /*j*/ ctx[74], /*hero*/ ctx[73]);
    	}

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			button = element("button");
    			img = element("img");
    			t0 = space();
    			div0 = element("div");
    			create_component(xbutton.$$.fragment);
    			t1 = space();
    			span = element("span");
    			t2 = space();
    			div1 = element("div");
    			if_block0.c();
    			t3 = space();
    			if_block1.c();
    			t4 = space();
    			if (if_block2) if_block2.c();
    			t5 = space();
    			p = element("p");
    			t6 = text$2(t6_value);
    			attr_dev(img, "draggable", "false");

    			if (!src_url_equal(img.src, img_src_value = /*$HeroData*/ ctx[12].some(func_4)
    			? /*heroLookup*/ ctx[14][/*hero*/ ctx[73]].portrait
    			: './img/portraits/unavailable.png')) attr_dev(img, "src", img_src_value);

    			attr_dev(img, "alt", img_alt_value = /*$HeroData*/ ctx[12].some(func_5)
    			? /*heroLookup*/ ctx[14][/*hero*/ ctx[73]].name
    			: 'Pick a Hero');

    			attr_dev(img, "class", "svelte-1wbn975");
    			add_location(img, file$b, 557, 11, 18644);
    			attr_dev(div0, "class", "removeHeroButtonContainer svelte-1wbn975");
    			add_location(div0, file$b, 561, 11, 18905);
    			attr_dev(span, "class", "coreMark svelte-1wbn975");
    			toggle_class(span, "visible", /*comp*/ ctx[1].heroes[/*hero*/ ctx[73]].core);
    			add_location(span, file$b, 564, 11, 19075);
    			attr_dev(div1, "class", "ascMark subAscMark svelte-1wbn975");
    			add_location(div1, file$b, 565, 11, 19157);
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "heroButton svelte-1wbn975");
    			add_location(button, file$b, 556, 10, 18412);
    			attr_dev(p, "class", "svelte-1wbn975");
    			add_location(p, file$b, 591, 10, 20626);
    			attr_dev(div2, "class", "subGroupMember svelte-1wbn975");
    			add_location(div2, file$b, 555, 9, 18372);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, button);
    			append_dev(button, img);
    			append_dev(button, t0);
    			append_dev(button, div0);
    			mount_component(xbutton, div0, null);
    			append_dev(button, t1);
    			append_dev(button, span);
    			append_dev(button, t2);
    			append_dev(button, div1);
    			if_block0.m(div1, null);
    			append_dev(div1, t3);
    			if_block1.m(div1, null);
    			append_dev(div1, t4);
    			if (if_block2) if_block2.m(div1, null);
    			append_dev(div2, t5);
    			append_dev(div2, p);
    			append_dev(p, t6);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", click_handler_4, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (!current || dirty[0] & /*$HeroData*/ 4096 | dirty[2] & /*hero*/ 2048 && !src_url_equal(img.src, img_src_value = /*$HeroData*/ ctx[12].some(func_4)
    			? /*heroLookup*/ ctx[14][/*hero*/ ctx[73]].portrait
    			: './img/portraits/unavailable.png')) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if (!current || dirty[0] & /*$HeroData*/ 4096 | dirty[2] & /*hero*/ 2048 && img_alt_value !== (img_alt_value = /*$HeroData*/ ctx[12].some(func_5)
    			? /*heroLookup*/ ctx[14][/*hero*/ ctx[73]].name
    			: 'Pick a Hero')) {
    				attr_dev(img, "alt", img_alt_value);
    			}

    			if (dirty[0] & /*comp*/ 2 | dirty[2] & /*hero*/ 2048) {
    				toggle_class(span, "visible", /*comp*/ ctx[1].heroes[/*hero*/ ctx[73]].core);
    			}

    			if (current_block_type !== (current_block_type = select_block_type_6(ctx))) {
    				if_block0.d(1);
    				if_block0 = current_block_type(ctx);

    				if (if_block0) {
    					if_block0.c();
    					if_block0.m(div1, t3);
    				}
    			}

    			if (current_block_type_1 !== (current_block_type_1 = select_block_type_7(ctx))) {
    				if_block1.d(1);
    				if_block1 = current_block_type_1(ctx);

    				if (if_block1) {
    					if_block1.c();
    					if_block1.m(div1, t4);
    				}
    			}

    			if (current_block_type_2 === (current_block_type_2 = select_block_type_8(ctx)) && if_block2) {
    				if_block2.p(ctx, dirty);
    			} else {
    				if (if_block2) if_block2.d(1);
    				if_block2 = current_block_type_2 && current_block_type_2(ctx);

    				if (if_block2) {
    					if_block2.c();
    					if_block2.m(div1, null);
    				}
    			}

    			if ((!current || dirty[2] & /*hero*/ 2048) && t6_value !== (t6_value = /*heroLookup*/ ctx[14][/*hero*/ ctx[73]].name + "")) set_data_dev(t6, t6_value);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(xbutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(xbutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			destroy_component(xbutton);
    			if_block0.d();
    			if_block1.d();

    			if (if_block2) {
    				if_block2.d();
    			}

    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$4.name,
    		type: "slot",
    		source: "(549:8) <SimpleSortableList           list={sub.heroes}           groupID=\\\"subLine-{i}\\\"           validate={validateSubLine}           on:sort={handleSubSort}           let:item={hero}           let:i={j}>",
    		ctx
    	});

    	return block;
    }

    // (540:5) {#each comp.subs as sub, i}
    function create_each_block$9(ctx) {
    	let div3;
    	let div1;
    	let input;
    	let t0;
    	let div0;
    	let xbutton;
    	let t1;
    	let div2;
    	let simplesortablelist;
    	let t2;
    	let button;
    	let current;
    	let mounted;
    	let dispose;

    	function input_input_handler_2() {
    		/*input_input_handler_2*/ ctx[56].call(input, /*each_value*/ ctx[71], /*i*/ ctx[72]);
    	}

    	function func_3() {
    		return /*func_3*/ ctx[57](/*i*/ ctx[72]);
    	}

    	xbutton = new XButton({
    			props: {
    				clickCallback: func_3,
    				size: "large",
    				hoverable: true
    			},
    			$$inline: true
    		});

    	simplesortablelist = new SimpleSortableList({
    			props: {
    				list: /*sub*/ ctx[70].heroes,
    				groupID: "subLine-" + /*i*/ ctx[72],
    				validate: /*validateSubLine*/ ctx[38],
    				$$slots: {
    					default: [
    						create_default_slot$4,
    						({ item: hero, i: j }) => ({ 73: hero, 74: j }),
    						({ item: hero, i: j }) => [0, 0, (hero ? 2048 : 0) | (j ? 4096 : 0)]
    					]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	simplesortablelist.$on("sort", /*handleSubSort*/ ctx[39]);

    	function click_handler_5() {
    		return /*click_handler_5*/ ctx[62](/*i*/ ctx[72], /*sub*/ ctx[70]);
    	}

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			div1 = element("div");
    			input = element("input");
    			t0 = space();
    			div0 = element("div");
    			create_component(xbutton.$$.fragment);
    			t1 = space();
    			div2 = element("div");
    			create_component(simplesortablelist.$$.fragment);
    			t2 = space();
    			button = element("button");
    			button.textContent = "+";
    			attr_dev(input, "class", "subTitleInput svelte-1wbn975");
    			attr_dev(input, "type", "text");
    			attr_dev(input, "placeholder", "Subgroup Name");
    			attr_dev(input, "maxlength", "50");
    			toggle_class(input, "maxed", /*sub*/ ctx[70].name.length >= 50);
    			add_location(input, file$b, 542, 8, 17819);
    			attr_dev(div0, "class", "removeButtonContainer svelte-1wbn975");
    			add_location(div0, file$b, 543, 8, 17971);
    			attr_dev(div1, "class", "subTitle svelte-1wbn975");
    			add_location(div1, file$b, 541, 7, 17787);
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "addHeroButton svelte-1wbn975");
    			add_location(button, file$b, 594, 8, 20714);
    			attr_dev(div2, "class", "subLine svelte-1wbn975");
    			add_location(div2, file$b, 547, 7, 18133);
    			attr_dev(div3, "class", "subGroup svelte-1wbn975");
    			add_location(div3, file$b, 540, 6, 17756);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div1);
    			append_dev(div1, input);
    			set_input_value(input, /*sub*/ ctx[70].name);
    			append_dev(div1, t0);
    			append_dev(div1, div0);
    			mount_component(xbutton, div0, null);
    			append_dev(div3, t1);
    			append_dev(div3, div2);
    			mount_component(simplesortablelist, div2, null);
    			append_dev(div2, t2);
    			append_dev(div2, button);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "input", input_input_handler_2),
    					listen_dev(button, "click", click_handler_5, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty[0] & /*comp*/ 2 && input.value !== /*sub*/ ctx[70].name) {
    				set_input_value(input, /*sub*/ ctx[70].name);
    			}

    			if (dirty[0] & /*comp*/ 2) {
    				toggle_class(input, "maxed", /*sub*/ ctx[70].name.length >= 50);
    			}

    			const simplesortablelist_changes = {};
    			if (dirty[0] & /*comp*/ 2) simplesortablelist_changes.list = /*sub*/ ctx[70].heroes;

    			if (dirty[0] & /*comp, $HeroData*/ 4098 | dirty[2] & /*$$scope, hero*/ 526336) {
    				simplesortablelist_changes.$$scope = { dirty, ctx };
    			}

    			simplesortablelist.$set(simplesortablelist_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(xbutton.$$.fragment, local);
    			transition_in(simplesortablelist.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(xbutton.$$.fragment, local);
    			transition_out(simplesortablelist.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			destroy_component(xbutton);
    			destroy_component(simplesortablelist);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$9.name,
    		type: "each",
    		source: "(540:5) {#each comp.subs as sub, i}",
    		ctx
    	});

    	return block;
    }

    // (612:2) {#if heroFinderOpen}
    function create_if_block$9(ctx) {
    	let herofinder;
    	let current;

    	herofinder = new HeroFinder({
    			props: {
    				config: /*hfConfig*/ ctx[7],
    				isMobile: /*isMobile*/ ctx[0]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(herofinder.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(herofinder, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const herofinder_changes = {};
    			if (dirty[0] & /*hfConfig*/ 128) herofinder_changes.config = /*hfConfig*/ ctx[7];
    			if (dirty[0] & /*isMobile*/ 1) herofinder_changes.isMobile = /*isMobile*/ ctx[0];
    			herofinder.$set(herofinder_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(herofinder.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(herofinder.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(herofinder, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$9.name,
    		type: "if",
    		source: "(612:2) {#if heroFinderOpen}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$e(ctx) {
    	let div16;
    	let section0;
    	let div2;
    	let input0;
    	let t0;
    	let input1;
    	let t1;
    	let t2;
    	let div1;
    	let h5;
    	let t4;
    	let div0;
    	let t5;
    	let t6;
    	let div9;
    	let div5;
    	let h40;
    	let t8;
    	let div3;
    	let simplesortablelist;
    	let t9;
    	let button0;
    	let t11;
    	let div4;
    	let current_block_type_index;
    	let if_block2;
    	let t12;
    	let div8;
    	let h41;
    	let t14;
    	let div6;
    	let t15;
    	let div7;
    	let span;
    	let t16_value = /*comp*/ ctx[1].desc.length + "";
    	let t16;
    	let t17;
    	let t18_value = /*$AppData*/ ctx[13].maxDescLen + "";
    	let t18;
    	let t19;
    	let div13;
    	let div12;
    	let h42;
    	let t21;
    	let div11;
    	let t22;
    	let div10;
    	let button1;
    	let t24;
    	let div14;
    	let button2;
    	let t26;
    	let button3;
    	let t28;
    	let button4;
    	let t30;
    	let section1;
    	let t31;
    	let section2;
    	let div15;
    	let t32;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block0 = /*comp*/ ctx[1].draft && create_if_block_20$1(ctx);
    	let each_value_2 = /*comp*/ ctx[1].tags;
    	validate_each_argument(each_value_2);
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		each_blocks_1[i] = create_each_block_2$3(get_each_context_2$3(ctx, each_value_2, i));
    	}

    	const out = i => transition_out(each_blocks_1[i], 1, 1, () => {
    		each_blocks_1[i] = null;
    	});

    	function select_block_type(ctx, dirty) {
    		if (!/*addTagOpen*/ ctx[9]) return create_if_block_19$1;
    		return create_else_block_6$1;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block1 = current_block_type(ctx);

    	simplesortablelist = new SimpleSortableList({
    			props: {
    				list: /*comp*/ ctx[1].lines,
    				groupID: "lineEditHead",
    				validate: /*validateLineEditHead*/ ctx[34],
    				$$slots: {
    					default: [
    						create_default_slot_2,
    						({ item: line, i }) => ({ 75: line, 72: i }),
    						({ item: line, i }) => [0, 0, (line ? 8192 : 0) | (i ? 1024 : 0)]
    					]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	simplesortablelist.$on("sort", /*handleLineSort*/ ctx[35]);
    	const if_block_creators = [create_if_block_9$1, create_else_block_2$2];
    	const if_blocks = [];

    	function select_block_type_1(ctx, dirty) {
    		if (/*openLine*/ ctx[2] === null) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type_1(ctx);
    	if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	let each_value = /*comp*/ ctx[1].subs;
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$9(get_each_context$9(ctx, each_value, i));
    	}

    	const out_1 = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	let if_block3 = /*heroFinderOpen*/ ctx[6] && create_if_block$9(ctx);

    	const block = {
    		c: function create() {
    			div16 = element("div");
    			section0 = element("section");
    			div2 = element("div");
    			input0 = element("input");
    			t0 = space();
    			input1 = element("input");
    			t1 = space();
    			if (if_block0) if_block0.c();
    			t2 = space();
    			div1 = element("div");
    			h5 = element("h5");
    			h5.textContent = "Tags";
    			t4 = space();
    			div0 = element("div");

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t5 = space();
    			if_block1.c();
    			t6 = space();
    			div9 = element("div");
    			div5 = element("div");
    			h40 = element("h4");
    			h40.textContent = "Lines";
    			t8 = space();
    			div3 = element("div");
    			create_component(simplesortablelist.$$.fragment);
    			t9 = space();
    			button0 = element("button");
    			button0.textContent = "+";
    			t11 = space();
    			div4 = element("div");
    			if_block2.c();
    			t12 = space();
    			div8 = element("div");
    			h41 = element("h4");
    			h41.textContent = "Description";
    			t14 = space();
    			div6 = element("div");
    			t15 = space();
    			div7 = element("div");
    			span = element("span");
    			t16 = text$2(t16_value);
    			t17 = text$2("/");
    			t18 = text$2(t18_value);
    			t19 = space();
    			div13 = element("div");
    			div12 = element("div");
    			h42 = element("h4");
    			h42.textContent = "Substitutes";
    			t21 = space();
    			div11 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t22 = space();
    			div10 = element("div");
    			button1 = element("button");
    			button1.textContent = "Add Substitute Line";
    			t24 = space();
    			div14 = element("div");
    			button2 = element("button");
    			button2.textContent = "Save Draft";
    			t26 = space();
    			button3 = element("button");
    			button3.textContent = "Save";
    			t28 = space();
    			button4 = element("button");
    			button4.textContent = "Cancel";
    			t30 = space();
    			section1 = element("section");
    			if (if_block3) if_block3.c();
    			t31 = space();
    			section2 = element("section");
    			div15 = element("div");
    			t32 = text$2(/*statusMessage*/ ctx[3]);
    			attr_dev(input0, "class", "titleInput svelte-1wbn975");
    			attr_dev(input0, "type", "text");
    			attr_dev(input0, "placeholder", "Title");
    			attr_dev(input0, "maxlength", "50");
    			toggle_class(input0, "maxed", /*comp*/ ctx[1].name.length >= 50);
    			add_location(input0, file$b, 399, 3, 11568);
    			attr_dev(input1, "class", "authorInput svelte-1wbn975");
    			attr_dev(input1, "type", "text");
    			attr_dev(input1, "placeholder", "Author");
    			attr_dev(input1, "maxlength", "50");
    			toggle_class(input1, "maxed", /*comp*/ ctx[1].author.length >= 50);
    			add_location(input1, file$b, 400, 3, 11706);
    			attr_dev(h5, "class", "svelte-1wbn975");
    			add_location(h5, file$b, 405, 4, 11986);
    			attr_dev(div0, "class", "tagDisplay svelte-1wbn975");
    			add_location(div0, file$b, 406, 4, 12005);
    			attr_dev(div1, "class", "tagsArea svelte-1wbn975");
    			add_location(div1, file$b, 404, 3, 11958);
    			attr_dev(div2, "class", "editorHead svelte-1wbn975");
    			add_location(div2, file$b, 398, 2, 11539);
    			attr_dev(h40, "class", "lineEditorTitle svelte-1wbn975");
    			add_location(h40, file$b, 452, 4, 13513);
    			attr_dev(button0, "type", "button");
    			attr_dev(button0, "class", "linePickerOption addLineButton svelte-1wbn975");
    			add_location(button0, file$b, 468, 5, 14149);
    			attr_dev(div3, "class", "lineEditHead svelte-1wbn975");
    			add_location(div3, file$b, 453, 4, 13557);
    			attr_dev(div4, "class", "lineEditBody svelte-1wbn975");
    			add_location(div4, file$b, 470, 4, 14257);
    			attr_dev(div5, "class", "lineEditor svelte-1wbn975");
    			add_location(div5, file$b, 451, 3, 13483);
    			attr_dev(h41, "class", "svelte-1wbn975");
    			add_location(h41, file$b, 530, 4, 17389);
    			attr_dev(div6, "id", "tuieditor");
    			add_location(div6, file$b, 531, 4, 17415);
    			add_location(span, file$b, 532, 83, 17526);
    			attr_dev(div7, "class", "editorLimit svelte-1wbn975");
    			toggle_class(div7, "maxed", /*comp*/ ctx[1].desc.length >= /*$AppData*/ ctx[13].maxDescLen);
    			add_location(div7, file$b, 532, 4, 17447);
    			attr_dev(div8, "class", "descEditor svelte-1wbn975");
    			add_location(div8, file$b, 529, 3, 17359);
    			attr_dev(div9, "class", "row1 svelte-1wbn975");
    			add_location(div9, file$b, 450, 2, 13460);
    			attr_dev(h42, "class", "svelte-1wbn975");
    			add_location(h42, file$b, 537, 4, 17662);
    			attr_dev(button1, "type", "button");
    			attr_dev(button1, "class", "subAddButton svelte-1wbn975");
    			add_location(button1, file$b, 599, 6, 20995);
    			attr_dev(div10, "class", "newSubArea svelte-1wbn975");
    			add_location(div10, file$b, 598, 5, 20963);
    			attr_dev(div11, "class", "subContainer svelte-1wbn975");
    			add_location(div11, file$b, 538, 4, 17688);
    			attr_dev(div12, "class", "subEditor");
    			add_location(div12, file$b, 536, 3, 17633);
    			attr_dev(div13, "class", "row2");
    			add_location(div13, file$b, 535, 2, 17610);
    			attr_dev(button2, "type", "button");
    			attr_dev(button2, "class", "footerButton draftButton svelte-1wbn975");
    			add_location(button2, file$b, 605, 3, 21159);
    			attr_dev(button3, "type", "button");
    			attr_dev(button3, "class", "footerButton saveButton svelte-1wbn975");
    			add_location(button3, file$b, 606, 3, 21259);
    			attr_dev(button4, "type", "button");
    			attr_dev(button4, "class", "footerButton cancelButton svelte-1wbn975");
    			add_location(button4, file$b, 607, 3, 21384);
    			attr_dev(div14, "class", "footer svelte-1wbn975");
    			add_location(div14, file$b, 604, 2, 21134);
    			attr_dev(section0, "class", "sect1");
    			add_location(section0, file$b, 397, 1, 11512);
    			attr_dev(section1, "class", "sect2 svelte-1wbn975");
    			toggle_class(section1, "visible", /*heroFinderOpen*/ ctx[6]);
    			add_location(section1, file$b, 610, 1, 21503);
    			attr_dev(div15, "class", "statusMessage svelte-1wbn975");
    			toggle_class(div15, "visible", /*showStatusMessage*/ ctx[4]);
    			toggle_class(div15, "error", /*statusError*/ ctx[5]);
    			add_location(div15, file$b, 616, 2, 21690);
    			attr_dev(section2, "class", "sect3 svelte-1wbn975");
    			add_location(section2, file$b, 615, 1, 21663);
    			attr_dev(div16, "class", "editorContainer svelte-1wbn975");
    			add_location(div16, file$b, 396, 0, 11480);
    		},
    		l: function claim(nodes) {
    			throw new Error_1$5("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div16, anchor);
    			append_dev(div16, section0);
    			append_dev(section0, div2);
    			append_dev(div2, input0);
    			set_input_value(input0, /*comp*/ ctx[1].name);
    			append_dev(div2, t0);
    			append_dev(div2, input1);
    			set_input_value(input1, /*comp*/ ctx[1].author);
    			append_dev(div2, t1);
    			if (if_block0) if_block0.m(div2, null);
    			append_dev(div2, t2);
    			append_dev(div2, div1);
    			append_dev(div1, h5);
    			append_dev(div1, t4);
    			append_dev(div1, div0);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].m(div0, null);
    			}

    			append_dev(div0, t5);
    			if_block1.m(div0, null);
    			append_dev(section0, t6);
    			append_dev(section0, div9);
    			append_dev(div9, div5);
    			append_dev(div5, h40);
    			append_dev(div5, t8);
    			append_dev(div5, div3);
    			mount_component(simplesortablelist, div3, null);
    			append_dev(div3, t9);
    			append_dev(div3, button0);
    			append_dev(div5, t11);
    			append_dev(div5, div4);
    			if_blocks[current_block_type_index].m(div4, null);
    			append_dev(div9, t12);
    			append_dev(div9, div8);
    			append_dev(div8, h41);
    			append_dev(div8, t14);
    			append_dev(div8, div6);
    			append_dev(div8, t15);
    			append_dev(div8, div7);
    			append_dev(div7, span);
    			append_dev(span, t16);
    			append_dev(span, t17);
    			append_dev(span, t18);
    			append_dev(section0, t19);
    			append_dev(section0, div13);
    			append_dev(div13, div12);
    			append_dev(div12, h42);
    			append_dev(div12, t21);
    			append_dev(div12, div11);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div11, null);
    			}

    			append_dev(div11, t22);
    			append_dev(div11, div10);
    			append_dev(div10, button1);
    			append_dev(section0, t24);
    			append_dev(section0, div14);
    			append_dev(div14, button2);
    			append_dev(div14, t26);
    			append_dev(div14, button3);
    			append_dev(div14, t28);
    			append_dev(div14, button4);
    			append_dev(div16, t30);
    			append_dev(div16, section1);
    			if (if_block3) if_block3.m(section1, null);
    			append_dev(div16, t31);
    			append_dev(div16, section2);
    			append_dev(section2, div15);
    			append_dev(div15, t32);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(window, "popstate", /*handlePopState*/ ctx[29], false, false, false),
    					listen_dev(input0, "input", /*input0_input_handler*/ ctx[42]),
    					listen_dev(input1, "input", /*input1_input_handler*/ ctx[43]),
    					listen_dev(button0, "click", /*addLine*/ ctx[18], false, false, false),
    					listen_dev(button1, "click", /*addSub*/ ctx[19], false, false, false),
    					listen_dev(button2, "click", /*saveDraft*/ ctx[22], false, false, false),
    					listen_dev(button3, "click", /*click_handler_6*/ ctx[63], false, false, false),
    					listen_dev(button4, "click", /*cancelEdit*/ ctx[20], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*comp*/ 2 && input0.value !== /*comp*/ ctx[1].name) {
    				set_input_value(input0, /*comp*/ ctx[1].name);
    			}

    			if (dirty[0] & /*comp*/ 2) {
    				toggle_class(input0, "maxed", /*comp*/ ctx[1].name.length >= 50);
    			}

    			if (dirty[0] & /*comp*/ 2 && input1.value !== /*comp*/ ctx[1].author) {
    				set_input_value(input1, /*comp*/ ctx[1].author);
    			}

    			if (dirty[0] & /*comp*/ 2) {
    				toggle_class(input1, "maxed", /*comp*/ ctx[1].author.length >= 50);
    			}

    			if (/*comp*/ ctx[1].draft) {
    				if (if_block0) ; else {
    					if_block0 = create_if_block_20$1(ctx);
    					if_block0.c();
    					if_block0.m(div2, t2);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (dirty[0] & /*comp*/ 2 | dirty[1] & /*removeTag*/ 1) {
    				each_value_2 = /*comp*/ ctx[1].tags;
    				validate_each_argument(each_value_2);
    				let i;

    				for (i = 0; i < each_value_2.length; i += 1) {
    					const child_ctx = get_each_context_2$3(ctx, each_value_2, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    						transition_in(each_blocks_1[i], 1);
    					} else {
    						each_blocks_1[i] = create_each_block_2$3(child_ctx);
    						each_blocks_1[i].c();
    						transition_in(each_blocks_1[i], 1);
    						each_blocks_1[i].m(div0, t5);
    					}
    				}

    				group_outros();

    				for (i = each_value_2.length; i < each_blocks_1.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}

    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block1) {
    				if_block1.p(ctx, dirty);
    			} else {
    				if_block1.d(1);
    				if_block1 = current_block_type(ctx);

    				if (if_block1) {
    					if_block1.c();
    					if_block1.m(div0, null);
    				}
    			}

    			const simplesortablelist_changes = {};
    			if (dirty[0] & /*comp*/ 2) simplesortablelist_changes.list = /*comp*/ ctx[1].lines;

    			if (dirty[0] & /*openLine*/ 4 | dirty[2] & /*$$scope, i, line*/ 533504) {
    				simplesortablelist_changes.$$scope = { dirty, ctx };
    			}

    			simplesortablelist.$set(simplesortablelist_changes);
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_1(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block2 = if_blocks[current_block_type_index];

    				if (!if_block2) {
    					if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block2.c();
    				} else {
    					if_block2.p(ctx, dirty);
    				}

    				transition_in(if_block2, 1);
    				if_block2.m(div4, null);
    			}

    			if ((!current || dirty[0] & /*comp*/ 2) && t16_value !== (t16_value = /*comp*/ ctx[1].desc.length + "")) set_data_dev(t16, t16_value);
    			if ((!current || dirty[0] & /*$AppData*/ 8192) && t18_value !== (t18_value = /*$AppData*/ ctx[13].maxDescLen + "")) set_data_dev(t18, t18_value);

    			if (dirty[0] & /*comp, $AppData*/ 8194) {
    				toggle_class(div7, "maxed", /*comp*/ ctx[1].desc.length >= /*$AppData*/ ctx[13].maxDescLen);
    			}

    			if (dirty[0] & /*openHeroFinder, comp, updateSubHero, closeHeroFinder, heroLookup, removeSubHero, $HeroData, deleteSub*/ 226643970 | dirty[1] & /*validateSubLine, handleSubSort*/ 384 | dirty[2] & /*hero*/ 2048) {
    				each_value = /*comp*/ ctx[1].subs;
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$9(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$9(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div11, t22);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out_1(i);
    				}

    				check_outros();
    			}

    			if (/*heroFinderOpen*/ ctx[6]) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);

    					if (dirty[0] & /*heroFinderOpen*/ 64) {
    						transition_in(if_block3, 1);
    					}
    				} else {
    					if_block3 = create_if_block$9(ctx);
    					if_block3.c();
    					transition_in(if_block3, 1);
    					if_block3.m(section1, null);
    				}
    			} else if (if_block3) {
    				group_outros();

    				transition_out(if_block3, 1, 1, () => {
    					if_block3 = null;
    				});

    				check_outros();
    			}

    			if (dirty[0] & /*heroFinderOpen*/ 64) {
    				toggle_class(section1, "visible", /*heroFinderOpen*/ ctx[6]);
    			}

    			if (!current || dirty[0] & /*statusMessage*/ 8) set_data_dev(t32, /*statusMessage*/ ctx[3]);

    			if (dirty[0] & /*showStatusMessage*/ 16) {
    				toggle_class(div15, "visible", /*showStatusMessage*/ ctx[4]);
    			}

    			if (dirty[0] & /*statusError*/ 32) {
    				toggle_class(div15, "error", /*statusError*/ ctx[5]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value_2.length; i += 1) {
    				transition_in(each_blocks_1[i]);
    			}

    			transition_in(simplesortablelist.$$.fragment, local);
    			transition_in(if_block2);

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			transition_in(if_block3);
    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks_1 = each_blocks_1.filter(Boolean);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				transition_out(each_blocks_1[i]);
    			}

    			transition_out(simplesortablelist.$$.fragment, local);
    			transition_out(if_block2);
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			transition_out(if_block3);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div16);
    			if (if_block0) if_block0.d();
    			destroy_each(each_blocks_1, detaching);
    			if_block1.d();
    			destroy_component(simplesortablelist);
    			if_blocks[current_block_type_index].d();
    			destroy_each(each_blocks, detaching);
    			if (if_block3) if_block3.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$e.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$e($$self, $$props, $$invalidate) {
    	let tagSuggestions;
    	let $HeroData;
    	let $AppData;
    	validate_store(HeroData, 'HeroData');
    	component_subscribe($$self, HeroData, $$value => $$invalidate(12, $HeroData = $$value));
    	validate_store(AppData$1, 'AppData');
    	component_subscribe($$self, AppData$1, $$value => $$invalidate(13, $AppData = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('CompEditor', slots, []);
    	let { compID = null } = $$props;

    	let { onSuccess = () => {
    		
    	} } = $$props;

    	let { isMobile = false } = $$props;
    	const { close } = getContext('simple-modal');

    	// this will hold the comp as it's edited
    	let comp = {
    		name: '',
    		uuid: v4(),
    		desc: '',
    		starred: false,
    		draft: true,
    		author: '',
    		lastUpdate: new Date(),
    		heroes: {},
    		lines: [],
    		subs: [],
    		tags: []
    	};

    	let openLine = null;
    	let statusMessage = '';
    	let showStatusMessage = false;
    	let statusError = false;
    	let heroFinderOpen = false;
    	let hfConfig = {};
    	let newTagText = '';
    	let addTagOpen = false;
    	let openSuggestions = false;
    	let autosave;
    	let editor; // ToastUI editor
    	const heroLookup = makeHeroLookup();

    	onMount(async () => {
    		history.pushState(
    			{
    				view: $AppData.activeView,
    				modal: true,
    				comp: true
    			},
    			"Comp Editor",
    			`?view=${$AppData.activeView}&comp=true&modal=true`
    		);

    		if (compID) {
    			const compCopy = $AppData.Comps.find(e => e.uuid === compID);
    			if (typeof compCopy === 'undefined') throw new Error(`Invalid CompID given to CompEditor: ${compID}.`);
    			$$invalidate(1, comp = JSON.parse(JSON.stringify(compCopy)));
    			$$invalidate(1, comp.lastUpdate = new Date(comp.lastUpdate), comp);
    		}

    		autosave = setTimeout(
    			() => {
    				if (comp.draft) saveDraft();
    			},
    			30000
    		);

    		await tick();

    		editor = new ToastUIEditor({
    				el: document.querySelector('#tuieditor'),
    				events: { change: handleContentChange },
    				height: '346.5px',
    				initialValue: comp.desc,
    				initialEditType: 'wysiwyg',
    				language: 'en_US',
    				placeholder: 'Description',
    				toolbarItems: [
    					['heading', 'bold', 'italic', 'strike'],
    					['hr', 'quote'],
    					['ul', 'ol'],
    					['table', 'image', 'link'],
    					['code', 'codeblock']
    				],
    				usageStatistics: false,
    				useDefaultHTMLSanitizer: true
    			});

    		setTimeout(() => editor.blur(), 5);
    	});

    	onDestroy(async () => {
    		clearTimeout(autosave);
    	});

    	function makeTagSuggestions() {
    		let suggestions = [];

    		// start suggestions off as an array of all tags in all comps
    		for (const comp of $AppData.Comps) {
    			for (const tag of comp.tags) {
    				suggestions.push(tag);
    			}
    		}

    		// remove duplicate tags
    		suggestions = [...new Set(suggestions)];

    		// filter suggestions to just strings that match what's already been typed
    		suggestions = suggestions.filter(e => e.toLowerCase().includes(newTagText));

    		// take only the first 10 suggestions
    		suggestions = suggestions.slice(0, 10);

    		// finally, sort suggestions before returning
    		suggestions.sort();

    		return suggestions;
    	}

    	function makeHeroLookup() {
    		let lookup = {};

    		for (const hero of $HeroData) {
    			lookup[hero.id] = { portrait: hero.portrait, name: hero.name };
    		}

    		return lookup;
    	}

    	function deleteLine(lineIdx) {
    		$$invalidate(1, comp.lines = comp.lines.filter((e, i) => i !== lineIdx), comp);

    		if (openLine === lineIdx) {
    			$$invalidate(2, openLine = null);
    		} else if (openLine > lineIdx) {
    			$$invalidate(2, openLine--, openLine);
    		}
    	}

    	function deleteSub(subIdx) {
    		$$invalidate(1, comp.subs = comp.subs.filter((e, i) => i !== subIdx), comp);
    	}

    	function addLine() {
    		$$invalidate(
    			1,
    			comp.lines = [
    				...comp.lines,
    				{
    					name: "New Line",
    					heroes: ['unknown', 'unknown', 'unknown', 'unknown', 'unknown']
    				}
    			],
    			comp
    		);

    		$$invalidate(2, openLine = comp.lines.length - 1);
    	}

    	function addSub() {
    		$$invalidate(1, comp.subs = [...comp.subs, { name: "New Sub Group", heroes: [] }], comp);
    	}

    	function handleContentChange() {
    		if (editor) $$invalidate(1, comp.desc = editor.getMarkdown(), comp);
    	}

    	function cancelEdit() {
    		close();
    	}

    	async function saveEdit() {
    		$$invalidate(1, comp.lastUpdate = new Date(), comp);
    		const returnObj = await validateComp(comp);

    		if (returnObj.retCode !== 0) {
    			// validation error occurred
    			$$invalidate(3, statusMessage = `Validation error: ${returnObj.message}`);

    			$$invalidate(4, showStatusMessage = true);
    			$$invalidate(5, statusError = true);
    			$$invalidate(1, comp.draft = true, comp);

    			setTimeout(
    				() => {
    					$$invalidate(3, statusMessage = '');
    					$$invalidate(4, showStatusMessage = false);
    					$$invalidate(5, statusError = false);
    				},
    				8000
    			);
    		} else {
    			// message should contain a clean comp data object now
    			$$invalidate(1, comp = returnObj.message);

    			if (compID) {
    				// editing an existing comp
    				const compIdx = $AppData.Comps.findIndex(e => e.uuid === compID);

    				if (compIdx === -1) throw new Error(`Invalid CompID given to CompEditor: ${compID}.`);
    				set_store_value(AppData$1, $AppData.Comps[compIdx] = comp, $AppData);
    			} else {
    				// adding a new comp
    				set_store_value(AppData$1, $AppData.Comps = [...$AppData.Comps, comp], $AppData);
    			}

    			onSuccess(comp.uuid);
    			close();
    		}
    	}

    	async function saveDraft() {
    		clearTimeout(autosave);
    		$$invalidate(1, comp.draft = true, comp);
    		$$invalidate(1, comp.lastUpdate = new Date(), comp);
    		const returnObj = await validateComp(comp);

    		if (returnObj.retCode !== 0) {
    			// validation error occurred
    			$$invalidate(3, statusMessage = `Validation error: ${returnObj.message}`);

    			$$invalidate(4, showStatusMessage = true);
    			$$invalidate(5, statusError = true);

    			setTimeout(
    				() => {
    					$$invalidate(3, statusMessage = '');
    					$$invalidate(4, showStatusMessage = false);
    					$$invalidate(5, statusError = false);
    				},
    				8000
    			);
    		} else {
    			// message should contain a clean comp data object now
    			$$invalidate(1, comp = returnObj.message);

    			if (compID) {
    				// editing an existing comp
    				const compIdx = $AppData.Comps.findIndex(e => e.uuid === compID);

    				if (compIdx === -1) throw new Error(`Invalid CompID given to CompEditor: ${compID}.`);
    				set_store_value(AppData$1, $AppData.Comps[compIdx] = comp, $AppData);
    			} else {
    				// adding a new comp
    				set_store_value(AppData$1, $AppData.Comps = [...$AppData.Comps, comp], $AppData);

    				$$invalidate(40, compID = comp.uuid);
    			}

    			onSuccess(comp.uuid);
    			$$invalidate(3, statusMessage = "Draft saved");
    			$$invalidate(4, showStatusMessage = true);
    			$$invalidate(5, statusError = false);

    			setTimeout(
    				() => {
    					$$invalidate(3, statusMessage = '');
    					$$invalidate(4, showStatusMessage = false);
    					$$invalidate(5, statusError = false);
    				},
    				2000
    			);
    		}

    		autosave = setTimeout(
    			() => {
    				if (comp.draft) saveDraft();
    			},
    			30000
    		);
    	}

    	function openHeroFinder(config) {
    		$$invalidate(7, hfConfig = config);
    		clearTimeout(autosave); // turn off autosaving while HeroFinder is open
    		$$invalidate(6, heroFinderOpen = true);
    	}

    	function closeHeroFinder() {
    		$$invalidate(6, heroFinderOpen = false);

    		// save and resume autosaving now that HeroFinder is closed
    		if (comp.draft) saveDraft();

    		$$invalidate(7, hfConfig = {});
    	}

    	function updateLineHero(idx, pos, hero, oldHeroID) {
    		// need to reverse the list to update the right hero due to how the list is displayed
    		let rHeroes = [...comp.lines[idx].heroes].reverse();

    		rHeroes[pos] = hero.id;

    		$$invalidate(
    			1,
    			comp.heroes[hero.id] = {
    				ascendLv: hero.ascendLv,
    				si: hero.si,
    				furn: hero.furn,
    				artifacts: hero.artifacts,
    				core: hero.core,
    				notes: hero.notes
    			},
    			comp
    		);

    		// reverse it back for storage
    		$$invalidate(1, comp.lines[idx].heroes = rHeroes.reverse(), comp);

    		// check if the last reference to the old hero was replaced, and remove it if necessary
    		if (oldHeroID !== '' && oldHeroID !== hero.id) removeHeroesReference(oldHeroID);
    	}

    	function updateSubHero(idx, pos, hero, oldHeroID) {
    		$$invalidate(1, comp.subs[idx].heroes[pos] = hero.id, comp);

    		$$invalidate(
    			1,
    			comp.heroes[hero.id] = {
    				ascendLv: hero.ascendLv,
    				si: hero.si,
    				furn: hero.furn,
    				artifacts: hero.artifacts,
    				core: hero.core,
    				notes: hero.notes
    			},
    			comp
    		);

    		// check if the last reference to the old hero was replaced, and remove it if necessary
    		if (oldHeroID !== '' && oldHeroID !== hero.id) removeHeroesReference(oldHeroID);
    	}

    	function removeSubHero(subIdx, heroIdx) {
    		const heroID = comp.subs[subIdx].heroes[heroIdx];
    		$$invalidate(1, comp.subs[subIdx].heroes = comp.subs[subIdx].heroes.filter((e, i) => i !== heroIdx), comp);
    		removeHeroesReference(heroID);
    	}

    	function removeLineHero(lineIdx, heroIdx) {
    		// need to reverse the list to remove the right hero due to how the list is displayed
    		let rHeroes = [...comp.lines[lineIdx].heroes].reverse();

    		const heroID = rHeroes[heroIdx];
    		rHeroes[heroIdx] = 'unknown';

    		// reverse it back for storage
    		$$invalidate(1, comp.lines[lineIdx].heroes = rHeroes.reverse(), comp);

    		removeHeroesReference(heroID);
    	}

    	// function checks all subs and lines for reference to heroID and
    	// removes them from comp.heroes if no references are present
    	function removeHeroesReference(heroID) {
    		for (const sub of comp.subs) {
    			// reference found in a sub line, abort removal
    			if (sub.heroes.includes(heroID)) return 0;
    		}

    		for (const line of comp.lines) {
    			// reference found in an example line, abort removal
    			if (line.heroes.includes(heroID)) return 0;
    		}

    		// no references found in any example or sub lines, OK to delete
    		delete comp.heroes[heroID];
    	}

    	function handlePopState() {
    		close();
    	}

    	function handleAddTag() {
    		if (newTagText !== '') {
    			$$invalidate(1, comp.tags = [...comp.tags, newTagText], comp);
    			$$invalidate(8, newTagText = '');
    		}

    		$$invalidate(10, openSuggestions = false);
    		$$invalidate(9, addTagOpen = false);
    	}

    	function removeTag(index) {
    		$$invalidate(1, comp.tags = comp.tags.filter((e, i) => i !== index), comp);
    	}

    	function handleTagKeyUp(event) {
    		if (event.code === 'Enter') {
    			handleAddTag();
    			return 0;
    		} else {
    			$$invalidate(11, tagSuggestions = makeTagSuggestions());
    		}
    	}

    	function takeTagSuggestion(suggestion) {
    		$$invalidate(8, newTagText = suggestion);
    		handleAddTag();
    	}

    	function validateLineEditHead(list) {
    		// catch if a user dragged something we weren't expecting and exit
    		if (!Array.isArray(list)) return false;

    		// don't allow overwrite if there are missing lines
    		if (list.length !== comp.lines.length) return false;

    		for (const item of list) {
    			// don't allow overwrite if list is not a list of objects
    			if (Object.prototype.toString.call(item) !== '[object Object]') return false;
    		}

    		return true;
    	}

    	function handleLineSort(event) {
    		const newList = event.detail.newList;
    		const from = parseInt(event.detail.from);
    		const to = parseInt(event.detail.to);
    		$$invalidate(1, comp.lines = newList, comp);

    		if (openLine !== null) {
    			if (openLine === from) {
    				$$invalidate(2, openLine = to);
    			} else if (openLine === to) {
    				$$invalidate(2, openLine = from);
    			}
    		}
    	}

    	function validateLineDisplay(list) {
    		// catch if a user dragged something we weren't expecting and exit
    		if (!Array.isArray(list)) return false;

    		// don't allow overwrite if there are missing/additional heroes
    		if (list.length !== 5) return false;

    		for (const item of list) {
    			// don't allow overwrite if hero isn't in HeroData and isn't 'unknown'
    			if (!$HeroData.some(e => e.id === item) && !item === 'unknown') return false;
    		}

    		return true;
    	}

    	function handleLineDisplaySort(event) {
    		const newList = event.detail.newList.reverse();
    		$$invalidate(1, comp.lines[openLine].heroes = newList, comp);
    	}

    	function validateSubLine(list) {
    		// catch if a user dragged something we weren't expecting and exit
    		if (!Array.isArray(list)) return false;

    		for (const item of list) {
    			// don't allow overwrite if hero isn't in HeroData
    			if (!$HeroData.some(e => e.id === item)) return false;
    		}

    		return true;
    	}

    	function handleSubSort(event) {
    		const newList = event.detail.newList;
    		const group = event.detail.groupID;
    		const subIdx = parseInt(group.slice(8, group.length));
    		$$invalidate(1, comp.subs[subIdx].heroes = newList, comp);
    	}

    	const writable_props = ['compID', 'onSuccess', 'isMobile'];

    	Object_1$1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<CompEditor> was created with unknown prop '${key}'`);
    	});

    	function input0_input_handler() {
    		comp.name = this.value;
    		$$invalidate(1, comp);
    	}

    	function input1_input_handler() {
    		comp.author = this.value;
    		$$invalidate(1, comp);
    	}

    	const func = i => removeTag(i);

    	const click_handler = async () => {
    		$$invalidate(9, addTagOpen = true);
    		await tick();
    		document.querySelector('#newTagInput').focus();
    	};

    	function input_input_handler() {
    		newTagText = this.value;
    		$$invalidate(8, newTagText);
    	}

    	const focus_handler = () => {
    		$$invalidate(11, tagSuggestions = makeTagSuggestions());
    		$$invalidate(10, openSuggestions = true);
    	};

    	const keyup_handler = e => handleTagKeyUp(e);
    	const mousedown_handler = suggestion => takeTagSuggestion(suggestion);
    	const func_1 = i => deleteLine(i);
    	const click_handler_1 = i => $$invalidate(2, openLine = i);

    	function input_input_handler_1() {
    		comp.lines[openLine].name = this.value;
    		$$invalidate(1, comp);
    		$$invalidate(2, openLine);
    	}

    	const click_handler_2 = i => openHeroFinder({
    		idx: openLine,
    		pos: i,
    		onSuccess: updateLineHero,
    		close: closeHeroFinder,
    		compHeroData: comp.heroes
    	});

    	const func_2 = i => removeLineHero(openLine, i);

    	const click_handler_3 = (i, hero) => openHeroFinder({
    		idx: openLine,
    		pos: i,
    		onSuccess: updateLineHero,
    		close: closeHeroFinder,
    		oldHeroID: hero,
    		compHeroData: comp.heroes
    	});

    	function input_input_handler_2(each_value, i) {
    		each_value[i].name = this.value;
    		$$invalidate(1, comp);
    	}

    	const func_3 = i => deleteSub(i);
    	const func_4 = (hero, e) => e.id === hero;
    	const func_5 = (hero, e) => e.id === hero;
    	const func_6 = (i, j) => removeSubHero(i, j);

    	const click_handler_4 = (i, j, hero) => openHeroFinder({
    		idx: i,
    		pos: j,
    		onSuccess: updateSubHero,
    		close: closeHeroFinder,
    		oldHeroData: comp.heroes[hero],
    		oldHeroID: hero,
    		compHeroData: comp.heroes
    	});

    	const click_handler_5 = (i, sub) => openHeroFinder({
    		idx: i,
    		pos: sub.heroes.length,
    		onSuccess: updateSubHero,
    		close: closeHeroFinder,
    		compHeroData: comp.heroes
    	});

    	const click_handler_6 = () => {
    		$$invalidate(1, comp.draft = false, comp);
    		saveEdit();
    	};

    	$$self.$$set = $$props => {
    		if ('compID' in $$props) $$invalidate(40, compID = $$props.compID);
    		if ('onSuccess' in $$props) $$invalidate(41, onSuccess = $$props.onSuccess);
    		if ('isMobile' in $$props) $$invalidate(0, isMobile = $$props.isMobile);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		onDestroy,
    		tick,
    		getContext,
    		uuidv4: v4,
    		Editor: ToastUIEditor,
    		AppData: AppData$1,
    		HeroData,
    		HeroFinder,
    		SimpleSortableList,
    		XButton,
    		compID,
    		onSuccess,
    		isMobile,
    		close,
    		comp,
    		openLine,
    		statusMessage,
    		showStatusMessage,
    		statusError,
    		heroFinderOpen,
    		hfConfig,
    		newTagText,
    		addTagOpen,
    		openSuggestions,
    		autosave,
    		editor,
    		heroLookup,
    		makeTagSuggestions,
    		makeHeroLookup,
    		deleteLine,
    		deleteSub,
    		addLine,
    		addSub,
    		handleContentChange,
    		cancelEdit,
    		saveEdit,
    		saveDraft,
    		openHeroFinder,
    		closeHeroFinder,
    		updateLineHero,
    		updateSubHero,
    		removeSubHero,
    		removeLineHero,
    		removeHeroesReference,
    		handlePopState,
    		handleAddTag,
    		removeTag,
    		handleTagKeyUp,
    		takeTagSuggestion,
    		validateLineEditHead,
    		handleLineSort,
    		validateLineDisplay,
    		handleLineDisplaySort,
    		validateSubLine,
    		handleSubSort,
    		tagSuggestions,
    		$HeroData,
    		$AppData
    	});

    	$$self.$inject_state = $$props => {
    		if ('compID' in $$props) $$invalidate(40, compID = $$props.compID);
    		if ('onSuccess' in $$props) $$invalidate(41, onSuccess = $$props.onSuccess);
    		if ('isMobile' in $$props) $$invalidate(0, isMobile = $$props.isMobile);
    		if ('comp' in $$props) $$invalidate(1, comp = $$props.comp);
    		if ('openLine' in $$props) $$invalidate(2, openLine = $$props.openLine);
    		if ('statusMessage' in $$props) $$invalidate(3, statusMessage = $$props.statusMessage);
    		if ('showStatusMessage' in $$props) $$invalidate(4, showStatusMessage = $$props.showStatusMessage);
    		if ('statusError' in $$props) $$invalidate(5, statusError = $$props.statusError);
    		if ('heroFinderOpen' in $$props) $$invalidate(6, heroFinderOpen = $$props.heroFinderOpen);
    		if ('hfConfig' in $$props) $$invalidate(7, hfConfig = $$props.hfConfig);
    		if ('newTagText' in $$props) $$invalidate(8, newTagText = $$props.newTagText);
    		if ('addTagOpen' in $$props) $$invalidate(9, addTagOpen = $$props.addTagOpen);
    		if ('openSuggestions' in $$props) $$invalidate(10, openSuggestions = $$props.openSuggestions);
    		if ('autosave' in $$props) autosave = $$props.autosave;
    		if ('editor' in $$props) editor = $$props.editor;
    		if ('tagSuggestions' in $$props) $$invalidate(11, tagSuggestions = $$props.tagSuggestions);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$invalidate(11, tagSuggestions = makeTagSuggestions());

    	return [
    		isMobile,
    		comp,
    		openLine,
    		statusMessage,
    		showStatusMessage,
    		statusError,
    		heroFinderOpen,
    		hfConfig,
    		newTagText,
    		addTagOpen,
    		openSuggestions,
    		tagSuggestions,
    		$HeroData,
    		$AppData,
    		heroLookup,
    		makeTagSuggestions,
    		deleteLine,
    		deleteSub,
    		addLine,
    		addSub,
    		cancelEdit,
    		saveEdit,
    		saveDraft,
    		openHeroFinder,
    		closeHeroFinder,
    		updateLineHero,
    		updateSubHero,
    		removeSubHero,
    		removeLineHero,
    		handlePopState,
    		handleAddTag,
    		removeTag,
    		handleTagKeyUp,
    		takeTagSuggestion,
    		validateLineEditHead,
    		handleLineSort,
    		validateLineDisplay,
    		handleLineDisplaySort,
    		validateSubLine,
    		handleSubSort,
    		compID,
    		onSuccess,
    		input0_input_handler,
    		input1_input_handler,
    		func,
    		click_handler,
    		input_input_handler,
    		focus_handler,
    		keyup_handler,
    		mousedown_handler,
    		func_1,
    		click_handler_1,
    		input_input_handler_1,
    		click_handler_2,
    		func_2,
    		click_handler_3,
    		input_input_handler_2,
    		func_3,
    		func_4,
    		func_5,
    		func_6,
    		click_handler_4,
    		click_handler_5,
    		click_handler_6
    	];
    }

    class CompEditor extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$e, create_fragment$e, safe_not_equal, { compID: 40, onSuccess: 41, isMobile: 0 }, null, [-1, -1, -1]);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "CompEditor",
    			options,
    			id: create_fragment$e.name
    		});
    	}

    	get compID() {
    		throw new Error_1$5("<CompEditor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set compID(value) {
    		throw new Error_1$5("<CompEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onSuccess() {
    		throw new Error_1$5("<CompEditor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onSuccess(value) {
    		throw new Error_1$5("<CompEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isMobile() {
    		throw new Error_1$5("<CompEditor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isMobile(value) {
    		throw new Error_1$5("<CompEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\modals\ArtifactDetail.svelte generated by Svelte v3.41.0 */
    const file$a = "src\\modals\\ArtifactDetail.svelte";

    function get_each_context$8(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[6] = list[i];
    	return child_ctx;
    }

    function get_each_context_1$4(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[9] = list[i];
    	return child_ctx;
    }

    // (34:3) {:else}
    function create_else_block$6(ctx) {
    	let img;
    	let img_src_value;
    	let t0;
    	let div;
    	let span;

    	const block = {
    		c: function create() {
    			img = element("img");
    			t0 = space();
    			div = element("div");
    			span = element("span");
    			span.textContent = `${/*artifact*/ ctx[0].class}`;
    			attr_dev(img, "draggable", "false");
    			attr_dev(img, "class", "classImg svelte-1f8qck2");
    			if (!src_url_equal(img.src, img_src_value = "./img/classes/" + /*artifact*/ ctx[0].class.toLowerCase() + ".png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", /*artifact*/ ctx[0].class);
    			add_location(img, file$a, 34, 4, 1052);
    			attr_dev(span, "class", "tooltipText svelte-1f8qck2");
    			add_location(span, file$a, 35, 25, 1195);
    			attr_dev(div, "class", "tooltip svelte-1f8qck2");
    			add_location(div, file$a, 35, 4, 1174);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div, anchor);
    			append_dev(div, span);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$6.name,
    		type: "else",
    		source: "(34:3) {:else}",
    		ctx
    	});

    	return block;
    }

    // (31:3) {#if artifact.class === 'Any'}
    function create_if_block$8(ctx) {
    	let div0;
    	let span0;
    	let t1;
    	let div1;
    	let span1;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			span0 = element("span");
    			span0.textContent = "All";
    			t1 = space();
    			div1 = element("div");
    			span1 = element("span");
    			span1.textContent = "All Classes";
    			add_location(span0, file$a, 31, 36, 922);
    			attr_dev(div0, "class", "allCircle classImg svelte-1f8qck2");
    			add_location(div0, file$a, 31, 4, 890);
    			attr_dev(span1, "class", "tooltipText svelte-1f8qck2");
    			add_location(span1, file$a, 32, 38, 984);
    			attr_dev(div1, "class", "tooltip classTooltip svelte-1f8qck2");
    			add_location(div1, file$a, 32, 4, 950);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, span0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div1, anchor);
    			append_dev(div1, span1);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$8.name,
    		type: "if",
    		source: "(31:3) {#if artifact.class === 'Any'}",
    		ctx
    	});

    	return block;
    }

    // (40:3) {#each artifact.attributes as attr}
    function create_each_block_1$4(ctx) {
    	let div;
    	let span;
    	let t0_value = /*attr*/ ctx[9] + "";
    	let t0;
    	let t1;

    	const block = {
    		c: function create() {
    			div = element("div");
    			span = element("span");
    			t0 = text$2(t0_value);
    			t1 = space();
    			add_location(span, file$a, 41, 5, 1375);
    			attr_dev(div, "class", "attrBox svelte-1f8qck2");
    			add_location(div, file$a, 40, 4, 1347);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, span);
    			append_dev(span, t0);
    			append_dev(div, t1);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$4.name,
    		type: "each",
    		source: "(40:3) {#each artifact.attributes as attr}",
    		ctx
    	});

    	return block;
    }

    // (48:2) {#each artifact.upgrades as upgrade}
    function create_each_block$8(ctx) {
    	let div1;
    	let h4;
    	let t0;
    	let t1_value = /*upgrade*/ ctx[6].unlock + "";
    	let t1;
    	let t2;
    	let t3;
    	let div0;
    	let raw_value = /*upgrade*/ ctx[6].desc + "";
    	let t4;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			h4 = element("h4");
    			t0 = text$2("Unlocked at ");
    			t1 = text$2(t1_value);
    			t2 = text$2(":");
    			t3 = space();
    			div0 = element("div");
    			t4 = space();
    			attr_dev(h4, "class", "svelte-1f8qck2");
    			add_location(h4, file$a, 49, 4, 1548);
    			attr_dev(div0, "class", "descText svelte-1f8qck2");
    			add_location(div0, file$a, 50, 4, 1592);
    			attr_dev(div1, "class", "descArea");
    			add_location(div1, file$a, 48, 3, 1520);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, h4);
    			append_dev(h4, t0);
    			append_dev(h4, t1);
    			append_dev(h4, t2);
    			append_dev(div1, t3);
    			append_dev(div1, div0);
    			div0.innerHTML = raw_value;
    			append_dev(div1, t4);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$8.name,
    		type: "each",
    		source: "(48:2) {#each artifact.upgrades as upgrade}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$d(ctx) {
    	let div3;
    	let section0;
    	let h3;
    	let t1;
    	let div0;
    	let img;
    	let img_src_value;
    	let t2;
    	let section1;
    	let div1;
    	let t3;
    	let div2;
    	let t4;
    	let section2;
    	let mounted;
    	let dispose;

    	function select_block_type(ctx, dirty) {
    		if (/*artifact*/ ctx[0].class === 'Any') return create_if_block$8;
    		return create_else_block$6;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);
    	let each_value_1 = /*artifact*/ ctx[0].attributes;
    	validate_each_argument(each_value_1);
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks_1[i] = create_each_block_1$4(get_each_context_1$4(ctx, each_value_1, i));
    	}

    	let each_value = /*artifact*/ ctx[0].upgrades;
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$8(get_each_context$8(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			section0 = element("section");
    			h3 = element("h3");
    			h3.textContent = `${/*artifact*/ ctx[0].name}`;
    			t1 = space();
    			div0 = element("div");
    			img = element("img");
    			t2 = space();
    			section1 = element("section");
    			div1 = element("div");
    			if_block.c();
    			t3 = space();
    			div2 = element("div");

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t4 = space();
    			section2 = element("section");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(h3, "class", "name svelte-1f8qck2");
    			add_location(h3, file$a, 23, 2, 607);
    			attr_dev(img, "draggable", "false");
    			attr_dev(img, "class", "artifactImg svelte-1f8qck2");
    			if (!src_url_equal(img.src, img_src_value = /*artifact*/ ctx[0].image)) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", /*artifact*/ ctx[0].name);
    			add_location(img, file$a, 25, 3, 679);
    			attr_dev(div0, "class", "imgContainer svelte-1f8qck2");
    			add_location(div0, file$a, 24, 2, 648);
    			attr_dev(section0, "class", "headerSection svelte-1f8qck2");
    			add_location(section0, file$a, 22, 1, 572);
    			attr_dev(div1, "class", "classContainer svelte-1f8qck2");
    			add_location(div1, file$a, 29, 2, 821);
    			attr_dev(div2, "class", "attrContainer svelte-1f8qck2");
    			add_location(div2, file$a, 38, 2, 1274);
    			attr_dev(section1, "class", "attributes svelte-1f8qck2");
    			add_location(section1, file$a, 28, 1, 789);
    			attr_dev(section2, "class", "descContainer svelte-1f8qck2");
    			add_location(section2, file$a, 46, 1, 1444);
    			attr_dev(div3, "class", "container svelte-1f8qck2");
    			add_location(div3, file$a, 21, 0, 546);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, section0);
    			append_dev(section0, h3);
    			append_dev(section0, t1);
    			append_dev(section0, div0);
    			append_dev(div0, img);
    			append_dev(div3, t2);
    			append_dev(div3, section1);
    			append_dev(section1, div1);
    			if_block.m(div1, null);
    			append_dev(section1, t3);
    			append_dev(section1, div2);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].m(div2, null);
    			}

    			append_dev(div3, t4);
    			append_dev(div3, section2);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(section2, null);
    			}

    			if (!mounted) {
    				dispose = listen_dev(window, "popstate", /*handlePopState*/ ctx[1], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if_block.p(ctx, dirty);

    			if (dirty & /*artifact*/ 1) {
    				each_value_1 = /*artifact*/ ctx[0].attributes;
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$4(ctx, each_value_1, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_1[i] = create_each_block_1$4(child_ctx);
    						each_blocks_1[i].c();
    						each_blocks_1[i].m(div2, null);
    					}
    				}

    				for (; i < each_blocks_1.length; i += 1) {
    					each_blocks_1[i].d(1);
    				}

    				each_blocks_1.length = each_value_1.length;
    			}

    			if (dirty & /*artifact*/ 1) {
    				each_value = /*artifact*/ ctx[0].upgrades;
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$8(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$8(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(section2, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			if_block.d();
    			destroy_each(each_blocks_1, detaching);
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$d.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$d($$self, $$props, $$invalidate) {
    	let $Artifacts;
    	let $AppData;
    	validate_store(Artifacts, 'Artifacts');
    	component_subscribe($$self, Artifacts, $$value => $$invalidate(3, $Artifacts = $$value));
    	validate_store(AppData$1, 'AppData');
    	component_subscribe($$self, AppData$1, $$value => $$invalidate(4, $AppData = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ArtifactDetail', slots, []);
    	const { close } = getContext('simple-modal');

    	onMount(async () => {
    		history.pushState({ view: $AppData.activeView, modal: true }, "Artifact Detail", `?view=${$AppData.activeView}&modal=true`);
    	});

    	let { artifactID = "" } = $$props;
    	let artifact = $Artifacts[artifactID];

    	function handlePopState() {
    		close();
    	}

    	const writable_props = ['artifactID'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ArtifactDetail> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('artifactID' in $$props) $$invalidate(2, artifactID = $$props.artifactID);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		getContext,
    		Artifacts,
    		AppData: AppData$1,
    		close,
    		artifactID,
    		artifact,
    		handlePopState,
    		$Artifacts,
    		$AppData
    	});

    	$$self.$inject_state = $$props => {
    		if ('artifactID' in $$props) $$invalidate(2, artifactID = $$props.artifactID);
    		if ('artifact' in $$props) $$invalidate(0, artifact = $$props.artifact);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [artifact, handlePopState, artifactID];
    }

    class ArtifactDetail extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$d, create_fragment$d, safe_not_equal, { artifactID: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ArtifactDetail",
    			options,
    			id: create_fragment$d.name
    		});
    	}

    	get artifactID() {
    		throw new Error("<ArtifactDetail>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set artifactID(value) {
    		throw new Error("<ArtifactDetail>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\shared\AscendBox.svelte generated by Svelte v3.41.0 */

    const file$9 = "src\\shared\\AscendBox.svelte";

    function create_fragment$c(ctx) {
    	let div;
    	let span;
    	let t_value = /*getHeroAscendText*/ ctx[1](/*ascendLv*/ ctx[0]) + "";
    	let t;
    	let div_class_value;

    	const block = {
    		c: function create() {
    			div = element("div");
    			span = element("span");
    			t = text$2(t_value);
    			attr_dev(span, "class", "svelte-5lyazj");
    			add_location(span, file$9, 26, 1, 436);
    			attr_dev(div, "class", div_class_value = "ascendBox ascLv-" + /*ascendLv*/ ctx[0] + " svelte-5lyazj");
    			add_location(div, file$9, 25, 0, 393);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, span);
    			append_dev(span, t);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*ascendLv*/ 1 && t_value !== (t_value = /*getHeroAscendText*/ ctx[1](/*ascendLv*/ ctx[0]) + "")) set_data_dev(t, t_value);

    			if (dirty & /*ascendLv*/ 1 && div_class_value !== (div_class_value = "ascendBox ascLv-" + /*ascendLv*/ ctx[0] + " svelte-5lyazj")) {
    				attr_dev(div, "class", div_class_value);
    			}
    		},
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$c.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$c($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('AscendBox', slots, []);
    	let { ascendLv } = $$props;

    	function getHeroAscendText(ascLv) {
    		switch (ascendLv) {
    			case 0:
    				return 'Elite';
    			case 1:
    				return 'Elite+';
    			case 2:
    				return 'Legendary';
    			case 3:
    				return 'Legendary+';
    			case 4:
    				return 'Mythic';
    			case 5:
    				return 'Mythic+';
    			case 6:
    				return 'Ascended';
    			default:
    				return '';
    		}
    	}

    	const writable_props = ['ascendLv'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<AscendBox> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('ascendLv' in $$props) $$invalidate(0, ascendLv = $$props.ascendLv);
    	};

    	$$self.$capture_state = () => ({ ascendLv, getHeroAscendText });

    	$$self.$inject_state = $$props => {
    		if ('ascendLv' in $$props) $$invalidate(0, ascendLv = $$props.ascendLv);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [ascendLv, getHeroAscendText];
    }

    class AscendBox extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$c, create_fragment$c, safe_not_equal, { ascendLv: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "AscendBox",
    			options,
    			id: create_fragment$c.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*ascendLv*/ ctx[0] === undefined && !('ascendLv' in props)) {
    			console.warn("<AscendBox> was created without expected prop 'ascendLv'");
    		}
    	}

    	get ascendLv() {
    		throw new Error("<AscendBox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ascendLv(value) {
    		throw new Error("<AscendBox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\shared\SortableList.svelte generated by Svelte v3.41.0 */

    const file$8 = "src\\shared\\SortableList.svelte";

    function get_each_context$7(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[15] = list[i];
    	child_ctx[17] = i;
    	return child_ctx;
    }

    const get_default_slot_changes = dirty => ({
    	item: dirty & /*list*/ 1,
    	index: dirty & /*list*/ 1
    });

    const get_default_slot_context = ctx => ({
    	item: /*item*/ ctx[15],
    	index: /*index*/ ctx[17]
    });

    // (62:0) {#if list && list.length}
    function create_if_block$7(ctx) {
    	let ul;
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let current;
    	let each_value = /*list*/ ctx[0];
    	validate_each_argument(each_value);
    	const get_key = ctx => /*getKey*/ ctx[6](/*item*/ ctx[15]);
    	validate_each_keys(ctx, each_value, get_each_context$7, get_key);

    	for (let i = 0; i < each_value.length; i += 1) {
    		let child_ctx = get_each_context$7(ctx, each_value, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block$7(key, child_ctx));
    	}

    	const block = {
    		c: function create() {
    			ul = element("ul");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(ul, "class", "svelte-grlm9h");
    			add_location(ul, file$8, 62, 1, 1757);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, ul, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(ul, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*list, JSON, getKey, isOver, start, over, leave, drop, $$scope*/ 383) {
    				each_value = /*list*/ ctx[0];
    				validate_each_argument(each_value);
    				group_outros();
    				for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].r();
    				validate_each_keys(ctx, each_value, get_each_context$7, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, ul, fix_and_outro_and_destroy_block, create_each_block$7, null, get_each_context$7);
    				for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].a();
    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(ul);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d();
    			}
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$7.name,
    		type: "if",
    		source: "(62:0) {#if list && list.length}",
    		ctx
    	});

    	return block;
    }

    // (79:25)        
    function fallback_block(ctx) {
    	let p;
    	let t_value = /*getKey*/ ctx[6](/*item*/ ctx[15]) + "";
    	let t;

    	const block = {
    		c: function create() {
    			p = element("p");
    			t = text$2(t_value);
    			add_location(p, file$8, 79, 5, 2330);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*list*/ 1 && t_value !== (t_value = /*getKey*/ ctx[6](/*item*/ ctx[15]) + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block.name,
    		type: "fallback",
    		source: "(79:25)        ",
    		ctx
    	});

    	return block;
    }

    // (68:2) {#each list as item, index (getKey(item))}
    function create_each_block$7(key_2, ctx) {
    	let li;
    	let t;
    	let li_data_index_value;
    	let li_data_id_value;
    	let rect;
    	let stop_animation = noop$1;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[9].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], get_default_slot_context);
    	const default_slot_or_fallback = default_slot || fallback_block(ctx);

    	const block = {
    		key: key_2,
    		first: null,
    		c: function create() {
    			li = element("li");
    			if (default_slot_or_fallback) default_slot_or_fallback.c();
    			t = space();
    			attr_dev(li, "data-index", li_data_index_value = /*index*/ ctx[17]);
    			attr_dev(li, "data-id", li_data_id_value = JSON.stringify(/*getKey*/ ctx[6](/*item*/ ctx[15])));
    			attr_dev(li, "draggable", "true");
    			attr_dev(li, "class", "svelte-grlm9h");
    			toggle_class(li, "over", /*getKey*/ ctx[6](/*item*/ ctx[15]) === /*isOver*/ ctx[1]);
    			add_location(li, file$8, 68, 3, 2026);
    			this.first = li;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);

    			if (default_slot_or_fallback) {
    				default_slot_or_fallback.m(li, null);
    			}

    			append_dev(li, t);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(li, "dragstart", /*start*/ ctx[2], false, false, false),
    					listen_dev(li, "dragover", /*over*/ ctx[3], false, false, false),
    					listen_dev(li, "dragleave", /*leave*/ ctx[4], false, false, false),
    					listen_dev(li, "drop", /*drop*/ ctx[5], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope, list*/ 257)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[8],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[8])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[8], dirty, get_default_slot_changes),
    						get_default_slot_context
    					);
    				}
    			} else {
    				if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty & /*list*/ 1)) {
    					default_slot_or_fallback.p(ctx, !current ? -1 : dirty);
    				}
    			}

    			if (!current || dirty & /*list*/ 1 && li_data_index_value !== (li_data_index_value = /*index*/ ctx[17])) {
    				attr_dev(li, "data-index", li_data_index_value);
    			}

    			if (!current || dirty & /*list*/ 1 && li_data_id_value !== (li_data_id_value = JSON.stringify(/*getKey*/ ctx[6](/*item*/ ctx[15])))) {
    				attr_dev(li, "data-id", li_data_id_value);
    			}

    			if (dirty & /*getKey, list, isOver*/ 67) {
    				toggle_class(li, "over", /*getKey*/ ctx[6](/*item*/ ctx[15]) === /*isOver*/ ctx[1]);
    			}
    		},
    		r: function measure() {
    			rect = li.getBoundingClientRect();
    		},
    		f: function fix() {
    			fix_position(li);
    			stop_animation();
    		},
    		a: function animate() {
    			stop_animation();
    			stop_animation = create_animation(li, rect, flip, { duration: 300 });
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot_or_fallback, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot_or_fallback, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$7.name,
    		type: "each",
    		source: "(68:2) {#each list as item, index (getKey(item))}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$b(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*list*/ ctx[0] && /*list*/ ctx[0].length && create_if_block$7(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty$3();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*list*/ ctx[0] && /*list*/ ctx[0].length) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*list*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$7(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$b.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$b($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('SortableList', slots, ['default']);

    	const [send, receive] = crossfade({
    		duration: d => Math.sqrt(d * 200),
    		fallback(node, params) {
    			const style = getComputedStyle(node);
    			const transform = style.transform === "none" ? "" : style.transform;

    			return {
    				duration: 600,
    				easing: quintOut,
    				css: t => `
					transform: ${transform} scale(${t});
					opacity: ${t}
				`
    			};
    		}
    	});

    	// DRAG AND DROP
    	let isOver = false;

    	const getDraggedParent = node => node.dataset && node.dataset.index
    	? node.dataset
    	: getDraggedParent(node.parentNode);

    	const start = ev => {
    		ev.dataTransfer.setData("source", ev.target.dataset.index);
    	};

    	const over = ev => {
    		ev.preventDefault();
    		let dragged = getDraggedParent(ev.target);
    		if (isOver !== dragged.id) $$invalidate(1, isOver = JSON.parse(dragged.id));
    	};

    	const leave = ev => {
    		let dragged = getDraggedParent(ev.target);
    		if (isOver === dragged.id) $$invalidate(1, isOver = false);
    	};

    	const drop = ev => {
    		$$invalidate(1, isOver = false);
    		ev.preventDefault();
    		let dragged = getDraggedParent(ev.target);
    		let from = ev.dataTransfer.getData("source");
    		let to = dragged.index;
    		reorder({ from, to });
    	};

    	const dispatch = createEventDispatcher();

    	const reorder = ({ from, to }) => {
    		let newList = [...list];
    		newList[from] = [newList[to], newList[to] = newList[from]][0];
    		dispatch("sort", newList);
    	};

    	// UTILS
    	const getKey = item => key ? item[key] : item;

    	let { list = [] } = $$props;
    	let { key = '' } = $$props;
    	const writable_props = ['list', 'key'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<SortableList> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('list' in $$props) $$invalidate(0, list = $$props.list);
    		if ('key' in $$props) $$invalidate(7, key = $$props.key);
    		if ('$$scope' in $$props) $$invalidate(8, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		quintOut,
    		crossfade,
    		flip,
    		send,
    		receive,
    		isOver,
    		getDraggedParent,
    		start,
    		over,
    		leave,
    		drop,
    		createEventDispatcher,
    		dispatch,
    		reorder,
    		getKey,
    		list,
    		key
    	});

    	$$self.$inject_state = $$props => {
    		if ('isOver' in $$props) $$invalidate(1, isOver = $$props.isOver);
    		if ('list' in $$props) $$invalidate(0, list = $$props.list);
    		if ('key' in $$props) $$invalidate(7, key = $$props.key);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [list, isOver, start, over, leave, drop, getKey, key, $$scope, slots];
    }

    class SortableList extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$b, create_fragment$b, safe_not_equal, { list: 0, key: 7 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SortableList",
    			options,
    			id: create_fragment$b.name
    		});
    	}

    	get list() {
    		throw new Error("<SortableList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set list(value) {
    		throw new Error("<SortableList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get key() {
    		throw new Error("<SortableList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set key(value) {
    		throw new Error("<SortableList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\components\Comps.svelte generated by Svelte v3.41.0 */

    const { Error: Error_1$4, console: console_1$1, window: window_1$1 } = globals;
    const file$7 = "src\\components\\Comps.svelte";

    function get_each_context$6(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[81] = list[i];
    	return child_ctx;
    }

    function get_each_context_1$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[84] = list[i];
    	return child_ctx;
    }

    function get_each_context_2$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[87] = list[i];
    	return child_ctx;
    }

    function get_each_context_3$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[87] = list[i];
    	return child_ctx;
    }

    function get_each_context_4$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[87] = list[i];
    	return child_ctx;
    }

    function get_each_context_5$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[84] = list[i];
    	child_ctx[95] = i;
    	return child_ctx;
    }

    function get_each_context_6$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[84] = list[i];
    	child_ctx[95] = i;
    	return child_ctx;
    }

    function get_each_context_7(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[97] = list[i];
    	child_ctx[95] = i;
    	return child_ctx;
    }

    function get_each_context_8(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[99] = list[i];
    	return child_ctx;
    }

    function get_each_context_9(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[103] = list[i];
    	return child_ctx;
    }

    // (417:4) {#each searchSuggestions as suggestion}
    function create_each_block_9(ctx) {
    	let button;
    	let span;
    	let t_value = /*suggestion*/ ctx[103] + "";
    	let t;
    	let mounted;
    	let dispose;

    	function click_handler() {
    		return /*click_handler*/ ctx[39](/*suggestion*/ ctx[103]);
    	}

    	const block = {
    		c: function create() {
    			button = element("button");
    			span = element("span");
    			t = text$2(t_value);
    			add_location(span, file$7, 417, 96, 14859);
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "suggestionButton svelte-dc6tmv");
    			add_location(button, file$7, 417, 5, 14768);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, span);
    			append_dev(span, t);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", click_handler, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty[0] & /*searchSuggestions*/ 8192 && t_value !== (t_value = /*suggestion*/ ctx[103] + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_9.name,
    		type: "each",
    		source: "(417:4) {#each searchSuggestions as suggestion}",
    		ctx
    	});

    	return block;
    }

    // (434:3) {:else}
    function create_else_block_11(ctx) {
    	let sortablelist;
    	let current;

    	sortablelist = new SortableList({
    			props: {
    				list: /*sortedCompList*/ ctx[0],
    				key: "uuid",
    				$$slots: {
    					default: [
    						create_default_slot_1,
    						({ item: comp, index: i }) => ({ 102: comp, 95: i }),
    						({ item: comp, index: i }) => [0, 0, 0, (comp ? 512 : 0) | (i ? 4 : 0)]
    					]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	sortablelist.$on("sort", /*handleCardSort*/ ctx[30]);

    	const block = {
    		c: function create() {
    			create_component(sortablelist.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(sortablelist, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const sortablelist_changes = {};
    			if (dirty[0] & /*sortedCompList*/ 1) sortablelist_changes.list = /*sortedCompList*/ ctx[0];

    			if (dirty[0] & /*highlightComp*/ 16384 | dirty[3] & /*$$scope, comp, i*/ 8708) {
    				sortablelist_changes.$$scope = { dirty, ctx };
    			}

    			sortablelist.$set(sortablelist_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(sortablelist.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(sortablelist.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(sortablelist, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_11.name,
    		type: "else",
    		source: "(434:3) {:else}",
    		ctx
    	});

    	return block;
    }

    // (423:3) {#if sortedCompList.length === 0}
    function create_if_block_38(ctx) {
    	let div;

    	function select_block_type_1(ctx, dirty) {
    		if (/*$AppData*/ ctx[1].compSearchStr === '') return create_if_block_39;
    		return create_else_block_10;
    	}

    	let current_block_type = select_block_type_1(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if_block.c();
    			attr_dev(div, "class", "noComps svelte-dc6tmv");
    			toggle_class(div, "noSearch", /*$AppData*/ ctx[1].compSearchStr !== '');
    			add_location(div, file$7, 423, 4, 15001);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if_block.m(div, null);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type !== (current_block_type = select_block_type_1(ctx))) {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(div, null);
    				}
    			}

    			if (dirty[0] & /*$AppData*/ 2) {
    				toggle_class(div, "noSearch", /*$AppData*/ ctx[1].compSearchStr !== '');
    			}
    		},
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_38.name,
    		type: "if",
    		source: "(423:3) {#if sortedCompList.length === 0}",
    		ctx
    	});

    	return block;
    }

    // (435:4) <SortableList       list={sortedCompList}       key="uuid"       on:sort={handleCardSort}       let:item={comp}       let:index={i}>
    function create_default_slot_1(ctx) {
    	let compcard;
    	let current;

    	compcard = new CompCard({
    			props: {
    				comp: /*comp*/ ctx[102],
    				idx: /*i*/ ctx[95],
    				highlightComp: /*highlightComp*/ ctx[14],
    				delCallback: /*handleDeleteButtonClick*/ ctx[22],
    				cardClickCallback: /*handleCompCardClick*/ ctx[18],
    				exportCallback: /*handleExportButtonClick*/ ctx[24],
    				starCallback: /*handleStarClick*/ ctx[25]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(compcard.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(compcard, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const compcard_changes = {};
    			if (dirty[3] & /*comp*/ 512) compcard_changes.comp = /*comp*/ ctx[102];
    			if (dirty[3] & /*i*/ 4) compcard_changes.idx = /*i*/ ctx[95];
    			if (dirty[0] & /*highlightComp*/ 16384) compcard_changes.highlightComp = /*highlightComp*/ ctx[14];
    			compcard.$set(compcard_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(compcard.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(compcard.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(compcard, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1.name,
    		type: "slot",
    		source: "(435:4) <SortableList       list={sortedCompList}       key=\\\"uuid\\\"       on:sort={handleCardSort}       let:item={comp}       let:index={i}>",
    		ctx
    	});

    	return block;
    }

    // (430:5) {:else}
    function create_else_block_10(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "No Comps Found";
    			add_location(span, file$7, 430, 6, 15255);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_10.name,
    		type: "else",
    		source: "(430:5) {:else}",
    		ctx
    	});

    	return block;
    }

    // (425:5) {#if $AppData.compSearchStr === ''}
    function create_if_block_39(ctx) {
    	let span0;
    	let t1;
    	let div;
    	let span1;

    	const block = {
    		c: function create() {
    			span0 = element("span");
    			span0.textContent = "Add or Import a New Comp";
    			t1 = space();
    			div = element("div");
    			span1 = element("span");
    			span1.textContent = "⇩";
    			add_location(span0, file$7, 425, 6, 15119);
    			add_location(span1, file$7, 427, 7, 15199);
    			attr_dev(div, "class", "noCompsArrow");
    			add_location(div, file$7, 426, 6, 15164);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span0, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div, anchor);
    			append_dev(div, span1);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_39.name,
    		type: "if",
    		source: "(425:5) {#if $AppData.compSearchStr === ''}",
    		ctx
    	});

    	return block;
    }

    // (745:3) {:else}
    function create_else_block_9(ctx) {
    	let div1;
    	let div0;
    	let span;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			span = element("span");
    			span.textContent = "⇦ Select a Comp";
    			add_location(span, file$7, 747, 6, 33099);
    			attr_dev(div0, "class", "noSelectedCompText");
    			add_location(div0, file$7, 746, 5, 33059);
    			attr_dev(div1, "class", "noSelectedComp svelte-dc6tmv");
    			add_location(div1, file$7, 745, 4, 33024);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div0, span);
    		},
    		p: noop$1,
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_9.name,
    		type: "else",
    		source: "(745:3) {:else}",
    		ctx
    	});

    	return block;
    }

    // (470:3) {#if $AppData.selectedComp !== null}
    function create_if_block_1$3(ctx) {
    	let div3;
    	let div0;
    	let button0;
    	let i0;
    	let t0;
    	let t1;
    	let div1;
    	let h3;
    	let t2_value = /*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].name + "";
    	let t2;
    	let t3;
    	let p;
    	let t4_value = /*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].author + "";
    	let t4;
    	let t5;
    	let div2;
    	let button1;
    	let img0;
    	let img0_src_value;
    	let span0;
    	let t7;
    	let button2;
    	let img1;
    	let img1_src_value;
    	let span1;
    	let t9;
    	let button3;
    	let img2;
    	let img2_src_value;
    	let span2;
    	let t11;
    	let div5;
    	let div4;
    	let t12;
    	let div25;
    	let div6;
    	let span3;
    	let t13;
    	let t14_value = `${/*months*/ ctx[17][/*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].lastUpdate.getMonth()]} ${/*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].lastUpdate.getDate()}, ${/*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].lastUpdate.getFullYear()}` + "";
    	let t14;
    	let t15;
    	let div16;
    	let div12;
    	let div7;
    	let t16;
    	let div11;
    	let t17;
    	let div10;
    	let div8;
    	let t18;
    	let div9;
    	let t19;
    	let div15;
    	let div13;
    	let button4;
    	let i1;
    	let i1_class_value;
    	let span4;
    	let t21;
    	let div14;
    	let span5;
    	let raw_value = /*renderMarkdown*/ ctx[19](/*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].desc) + "";
    	let t22;
    	let div24;
    	let div19;
    	let div17;
    	let button5;
    	let i2;
    	let i2_class_value;
    	let span6;
    	let t24;
    	let div18;
    	let current_block_type_index;
    	let if_block3;
    	let t25;
    	let div23;
    	let div20;
    	let button6;
    	let i3;
    	let i3_class_value;
    	let span7;
    	let t27;
    	let div22;
    	let div21;
    	let current;
    	let mounted;
    	let dispose;
    	let each_value_8 = /*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].tags;
    	validate_each_argument(each_value_8);
    	let each_blocks_2 = [];

    	for (let i = 0; i < each_value_8.length; i += 1) {
    		each_blocks_2[i] = create_each_block_8(get_each_context_8(ctx, each_value_8, i));
    	}

    	let each_value_7 = /*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].lines;
    	validate_each_argument(each_value_7);
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_7.length; i += 1) {
    		each_blocks_1[i] = create_each_block_7(get_each_context_7(ctx, each_value_7, i));
    	}

    	let if_block0 = /*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].lines.length > 0 && create_if_block_37(ctx);
    	let if_block1 = /*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].lines.length > 0 && create_if_block_26(ctx);
    	let if_block2 = /*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].lines.length > 0 && create_if_block_15(ctx);
    	const if_block_creators = [create_if_block_10, create_else_block_2$1];
    	const if_blocks = [];

    	function select_block_type_11(ctx, dirty) {
    		if (/*selectedHero*/ ctx[8] !== '') return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type_11(ctx);
    	if_block3 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	let each_value = /*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].subs;
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$6(get_each_context$6(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			div0 = element("div");
    			button0 = element("button");
    			i0 = element("i");
    			t0 = text$2("Close");
    			t1 = space();
    			div1 = element("div");
    			h3 = element("h3");
    			t2 = text$2(t2_value);
    			t3 = space();
    			p = element("p");
    			t4 = text$2(t4_value);
    			t5 = space();
    			div2 = element("div");
    			button1 = element("button");
    			img0 = element("img");
    			span0 = element("span");
    			span0.textContent = "Export";
    			t7 = space();
    			button2 = element("button");
    			img1 = element("img");
    			span1 = element("span");
    			span1.textContent = "Edit";
    			t9 = space();
    			button3 = element("button");
    			img2 = element("img");
    			span2 = element("span");
    			span2.textContent = "Delete";
    			t11 = space();
    			div5 = element("div");
    			div4 = element("div");

    			for (let i = 0; i < each_blocks_2.length; i += 1) {
    				each_blocks_2[i].c();
    			}

    			t12 = space();
    			div25 = element("div");
    			div6 = element("div");
    			span3 = element("span");
    			t13 = text$2("Updated: ");
    			t14 = text$2(t14_value);
    			t15 = space();
    			div16 = element("div");
    			div12 = element("div");
    			div7 = element("div");

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t16 = space();
    			div11 = element("div");
    			if (if_block0) if_block0.c();
    			t17 = space();
    			div10 = element("div");
    			div8 = element("div");
    			if (if_block1) if_block1.c();
    			t18 = space();
    			div9 = element("div");
    			if (if_block2) if_block2.c();
    			t19 = space();
    			div15 = element("div");
    			div13 = element("div");
    			button4 = element("button");
    			i1 = element("i");
    			span4 = element("span");
    			span4.textContent = "Description";
    			t21 = space();
    			div14 = element("div");
    			span5 = element("span");
    			t22 = space();
    			div24 = element("div");
    			div19 = element("div");
    			div17 = element("div");
    			button5 = element("button");
    			i2 = element("i");
    			span6 = element("span");
    			span6.textContent = "Hero Info";
    			t24 = space();
    			div18 = element("div");
    			if_block3.c();
    			t25 = space();
    			div23 = element("div");
    			div20 = element("div");
    			button6 = element("button");
    			i3 = element("i");
    			span7 = element("span");
    			span7.textContent = "Substitutes";
    			t27 = space();
    			div22 = element("div");
    			div21 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(i0, "class", "arrow left svelte-dc6tmv");
    			add_location(i0, file$7, 472, 101, 16613);
    			attr_dev(button0, "type", "button");
    			attr_dev(button0, "class", "detailButton closeDetailButton svelte-dc6tmv");
    			add_location(button0, file$7, 472, 6, 16518);
    			attr_dev(div0, "class", "closeButtonContainer svelte-dc6tmv");
    			add_location(div0, file$7, 471, 5, 16476);
    			attr_dev(h3, "class", "compTitle svelte-dc6tmv");
    			add_location(h3, file$7, 475, 6, 16709);
    			attr_dev(p, "class", "authorTitle svelte-dc6tmv");
    			add_location(p, file$7, 476, 6, 16788);
    			attr_dev(div1, "class", "titleContainer svelte-dc6tmv");
    			add_location(div1, file$7, 474, 5, 16673);
    			attr_dev(img0, "draggable", "false");
    			if (!src_url_equal(img0.src, img0_src_value = "./img/utility/export.png")) attr_dev(img0, "src", img0_src_value);
    			attr_dev(img0, "alt", "Export");
    			attr_dev(img0, "class", "svelte-dc6tmv");
    			add_location(img0, file$7, 479, 127, 17037);
    			attr_dev(span0, "class", "svelte-dc6tmv");
    			add_location(span0, file$7, 479, 194, 17104);
    			attr_dev(button1, "type", "button");
    			attr_dev(button1, "class", "editDelButton exportButton svelte-dc6tmv");
    			add_location(button1, file$7, 479, 6, 16916);
    			attr_dev(img1, "draggable", "false");
    			if (!src_url_equal(img1.src, img1_src_value = "./img/utility/pencil.png")) attr_dev(img1, "src", img1_src_value);
    			attr_dev(img1, "alt", "Edit");
    			attr_dev(img1, "class", "svelte-dc6tmv");
    			add_location(img1, file$7, 480, 123, 17257);
    			attr_dev(span1, "class", "svelte-dc6tmv");
    			add_location(span1, file$7, 480, 188, 17322);
    			attr_dev(button2, "type", "button");
    			attr_dev(button2, "class", "editDelButton editButton svelte-dc6tmv");
    			add_location(button2, file$7, 480, 6, 17140);
    			attr_dev(img2, "draggable", "false");
    			if (!src_url_equal(img2.src, img2_src_value = "./img/utility/trashcan.png")) attr_dev(img2, "src", img2_src_value);
    			attr_dev(img2, "alt", "Delete");
    			attr_dev(img2, "class", "svelte-dc6tmv");
    			add_location(img2, file$7, 481, 127, 17477);
    			attr_dev(span2, "class", "svelte-dc6tmv");
    			add_location(span2, file$7, 481, 196, 17546);
    			attr_dev(button3, "type", "button");
    			attr_dev(button3, "class", "editDelButton deleteButton svelte-dc6tmv");
    			add_location(button3, file$7, 481, 6, 17356);
    			attr_dev(div2, "class", "editContainer svelte-dc6tmv");
    			add_location(div2, file$7, 478, 5, 16881);
    			attr_dev(div3, "class", "compDetailHead svelte-dc6tmv");
    			add_location(div3, file$7, 470, 4, 16441);
    			attr_dev(div4, "class", "tagDisplay svelte-dc6tmv");
    			add_location(div4, file$7, 485, 5, 17634);
    			attr_dev(div5, "class", "tagsArea svelte-dc6tmv");
    			add_location(div5, file$7, 484, 4, 17605);
    			add_location(span3, file$7, 495, 6, 17921);
    			attr_dev(div6, "class", "lastUpdate svelte-dc6tmv");
    			add_location(div6, file$7, 494, 5, 17889);
    			attr_dev(div7, "class", "lineSwitcher svelte-dc6tmv");
    			add_location(div7, file$7, 499, 7, 18232);
    			attr_dev(div8, "class", "detailBackline svelte-dc6tmv");
    			add_location(div8, file$7, 509, 9, 18789);
    			attr_dev(div9, "class", "detailFrontline svelte-dc6tmv");
    			add_location(div9, file$7, 551, 9, 21603);
    			attr_dev(div10, "class", "lineMembers svelte-dc6tmv");
    			add_location(div10, file$7, 508, 8, 18753);
    			attr_dev(div11, "class", "lineDisplay svelte-dc6tmv");
    			add_location(div11, file$7, 504, 7, 18516);
    			attr_dev(div12, "class", "lineExamples svelte-dc6tmv");
    			add_location(div12, file$7, 498, 6, 18197);
    			attr_dev(i1, "class", i1_class_value = "expanderArrow " + (/*openDesc*/ ctx[3] ? 'down' : 'right') + " svelte-dc6tmv");
    			add_location(i1, file$7, 598, 91, 24619);
    			add_location(span4, file$7, 598, 151, 24679);
    			attr_dev(button4, "type", "button");
    			attr_dev(button4, "class", "expanderButton svelte-dc6tmv");
    			add_location(button4, file$7, 598, 8, 24536);
    			attr_dev(div13, "class", "mobileExpanderTitle");
    			add_location(div13, file$7, 597, 7, 24493);
    			attr_dev(span5, "class", "descText svelte-dc6tmv");
    			add_location(span5, file$7, 601, 8, 24808);
    			attr_dev(div14, "class", "mobileExpander descSection svelte-dc6tmv");
    			toggle_class(div14, "open", /*openDesc*/ ctx[3]);
    			add_location(div14, file$7, 600, 7, 24736);
    			attr_dev(div15, "class", "description svelte-dc6tmv");
    			add_location(div15, file$7, 596, 6, 24459);
    			attr_dev(div16, "class", "bodyArea1 svelte-dc6tmv");
    			add_location(div16, file$7, 497, 5, 18166);
    			attr_dev(i2, "class", i2_class_value = "expanderArrow " + (/*openHero*/ ctx[4] ? 'down' : 'right') + " svelte-dc6tmv");
    			add_location(i2, file$7, 608, 91, 25167);
    			add_location(span6, file$7, 608, 151, 25227);
    			attr_dev(button5, "type", "button");
    			attr_dev(button5, "class", "expanderButton svelte-dc6tmv");
    			add_location(button5, file$7, 608, 8, 25084);
    			attr_dev(div17, "class", "mobileExpanderTitle");
    			add_location(div17, file$7, 607, 7, 25041);
    			attr_dev(div18, "class", "mobileExpander selectHeroSection svelte-dc6tmv");
    			toggle_class(div18, "open", /*openHero*/ ctx[4]);
    			add_location(div18, file$7, 610, 7, 25282);
    			attr_dev(div19, "class", "heroDetails svelte-dc6tmv");
    			attr_dev(div19, "id", "heroDetailSection");
    			add_location(div19, file$7, 606, 6, 24984);
    			attr_dev(i3, "class", i3_class_value = "expanderArrow " + (/*openSubs*/ ctx[5] ? 'down' : 'right') + " svelte-dc6tmv");
    			add_location(i3, file$7, 692, 91, 29959);
    			add_location(span7, file$7, 692, 151, 30019);
    			attr_dev(button6, "type", "button");
    			attr_dev(button6, "class", "expanderButton svelte-dc6tmv");
    			add_location(button6, file$7, 692, 8, 29876);
    			attr_dev(div20, "class", "mobileExpanderTitle");
    			add_location(div20, file$7, 691, 7, 29833);
    			attr_dev(div21, "class", "subDisplay svelte-dc6tmv");
    			add_location(div21, file$7, 695, 8, 30153);
    			attr_dev(div22, "class", "mobileExpander subGroupExpander svelte-dc6tmv");
    			toggle_class(div22, "open", /*openSubs*/ ctx[5]);
    			add_location(div22, file$7, 694, 7, 30076);
    			attr_dev(div23, "class", "subGroups svelte-dc6tmv");
    			add_location(div23, file$7, 690, 6, 29801);
    			attr_dev(div24, "class", "bodyArea2 svelte-dc6tmv");
    			add_location(div24, file$7, 605, 5, 24953);
    			attr_dev(div25, "class", "compDetailBody svelte-dc6tmv");
    			add_location(div25, file$7, 493, 4, 17854);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div0);
    			append_dev(div0, button0);
    			append_dev(button0, i0);
    			append_dev(button0, t0);
    			append_dev(div3, t1);
    			append_dev(div3, div1);
    			append_dev(div1, h3);
    			append_dev(h3, t2);
    			append_dev(div1, t3);
    			append_dev(div1, p);
    			append_dev(p, t4);
    			append_dev(div3, t5);
    			append_dev(div3, div2);
    			append_dev(div2, button1);
    			append_dev(button1, img0);
    			append_dev(button1, span0);
    			append_dev(div2, t7);
    			append_dev(div2, button2);
    			append_dev(button2, img1);
    			append_dev(button2, span1);
    			append_dev(div2, t9);
    			append_dev(div2, button3);
    			append_dev(button3, img2);
    			append_dev(button3, span2);
    			insert_dev(target, t11, anchor);
    			insert_dev(target, div5, anchor);
    			append_dev(div5, div4);

    			for (let i = 0; i < each_blocks_2.length; i += 1) {
    				each_blocks_2[i].m(div4, null);
    			}

    			insert_dev(target, t12, anchor);
    			insert_dev(target, div25, anchor);
    			append_dev(div25, div6);
    			append_dev(div6, span3);
    			append_dev(span3, t13);
    			append_dev(span3, t14);
    			append_dev(div25, t15);
    			append_dev(div25, div16);
    			append_dev(div16, div12);
    			append_dev(div12, div7);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].m(div7, null);
    			}

    			append_dev(div12, t16);
    			append_dev(div12, div11);
    			if (if_block0) if_block0.m(div11, null);
    			append_dev(div11, t17);
    			append_dev(div11, div10);
    			append_dev(div10, div8);
    			if (if_block1) if_block1.m(div8, null);
    			append_dev(div10, t18);
    			append_dev(div10, div9);
    			if (if_block2) if_block2.m(div9, null);
    			append_dev(div16, t19);
    			append_dev(div16, div15);
    			append_dev(div15, div13);
    			append_dev(div13, button4);
    			append_dev(button4, i1);
    			append_dev(button4, span4);
    			append_dev(div15, t21);
    			append_dev(div15, div14);
    			append_dev(div14, span5);
    			span5.innerHTML = raw_value;
    			append_dev(div25, t22);
    			append_dev(div25, div24);
    			append_dev(div24, div19);
    			append_dev(div19, div17);
    			append_dev(div17, button5);
    			append_dev(button5, i2);
    			append_dev(button5, span6);
    			append_dev(div19, t24);
    			append_dev(div19, div18);
    			if_blocks[current_block_type_index].m(div18, null);
    			append_dev(div24, t25);
    			append_dev(div24, div23);
    			append_dev(div23, div20);
    			append_dev(div20, button6);
    			append_dev(button6, i3);
    			append_dev(button6, span7);
    			append_dev(div23, t27);
    			append_dev(div23, div22);
    			append_dev(div22, div21);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div21, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(button0, "click", /*handleCloseButtonClick*/ ctx[26], false, false, false),
    					listen_dev(button1, "click", /*click_handler_1*/ ctx[40], false, false, false),
    					listen_dev(button2, "click", /*click_handler_2*/ ctx[41], false, false, false),
    					listen_dev(button3, "click", /*click_handler_3*/ ctx[42], false, false, false),
    					listen_dev(button4, "click", /*click_handler_9*/ ctx[54], false, false, false),
    					listen_dev(button5, "click", /*click_handler_10*/ ctx[55], false, false, false),
    					listen_dev(button6, "click", /*click_handler_15*/ ctx[62], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if ((!current || dirty[0] & /*sortedCompList, $AppData*/ 3) && t2_value !== (t2_value = /*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].name + "")) set_data_dev(t2, t2_value);
    			if ((!current || dirty[0] & /*sortedCompList, $AppData*/ 3) && t4_value !== (t4_value = /*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].author + "")) set_data_dev(t4, t4_value);

    			if (dirty[0] & /*sortedCompList, $AppData*/ 3) {
    				each_value_8 = /*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].tags;
    				validate_each_argument(each_value_8);
    				let i;

    				for (i = 0; i < each_value_8.length; i += 1) {
    					const child_ctx = get_each_context_8(ctx, each_value_8, i);

    					if (each_blocks_2[i]) {
    						each_blocks_2[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_2[i] = create_each_block_8(child_ctx);
    						each_blocks_2[i].c();
    						each_blocks_2[i].m(div4, null);
    					}
    				}

    				for (; i < each_blocks_2.length; i += 1) {
    					each_blocks_2[i].d(1);
    				}

    				each_blocks_2.length = each_value_8.length;
    			}

    			if ((!current || dirty[0] & /*sortedCompList, $AppData*/ 3) && t14_value !== (t14_value = `${/*months*/ ctx[17][/*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].lastUpdate.getMonth()]} ${/*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].lastUpdate.getDate()}, ${/*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].lastUpdate.getFullYear()}` + "")) set_data_dev(t14, t14_value);

    			if (dirty[0] & /*selectedLine, sortedCompList, $AppData*/ 131) {
    				each_value_7 = /*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].lines;
    				validate_each_argument(each_value_7);
    				let i;

    				for (i = 0; i < each_value_7.length; i += 1) {
    					const child_ctx = get_each_context_7(ctx, each_value_7, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_1[i] = create_each_block_7(child_ctx);
    						each_blocks_1[i].c();
    						each_blocks_1[i].m(div7, null);
    					}
    				}

    				for (; i < each_blocks_1.length; i += 1) {
    					each_blocks_1[i].d(1);
    				}

    				each_blocks_1.length = each_value_7.length;
    			}

    			if (/*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].lines.length > 0) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_37(ctx);
    					if_block0.c();
    					if_block0.m(div11, t17);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].lines.length > 0) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_26(ctx);
    					if_block1.c();
    					if_block1.m(div8, null);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (/*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].lines.length > 0) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block_15(ctx);
    					if_block2.c();
    					if_block2.m(div9, null);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}

    			if (!current || dirty[0] & /*openDesc*/ 8 && i1_class_value !== (i1_class_value = "expanderArrow " + (/*openDesc*/ ctx[3] ? 'down' : 'right') + " svelte-dc6tmv")) {
    				attr_dev(i1, "class", i1_class_value);
    			}

    			if ((!current || dirty[0] & /*sortedCompList, $AppData*/ 3) && raw_value !== (raw_value = /*renderMarkdown*/ ctx[19](/*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].desc) + "")) span5.innerHTML = raw_value;
    			if (dirty[0] & /*openDesc*/ 8) {
    				toggle_class(div14, "open", /*openDesc*/ ctx[3]);
    			}

    			if (!current || dirty[0] & /*openHero*/ 16 && i2_class_value !== (i2_class_value = "expanderArrow " + (/*openHero*/ ctx[4] ? 'down' : 'right') + " svelte-dc6tmv")) {
    				attr_dev(i2, "class", i2_class_value);
    			}

    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_11(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block3 = if_blocks[current_block_type_index];

    				if (!if_block3) {
    					if_block3 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block3.c();
    				} else {
    					if_block3.p(ctx, dirty);
    				}

    				transition_in(if_block3, 1);
    				if_block3.m(div18, null);
    			}

    			if (dirty[0] & /*openHero*/ 16) {
    				toggle_class(div18, "open", /*openHero*/ ctx[4]);
    			}

    			if (!current || dirty[0] & /*openSubs*/ 32 && i3_class_value !== (i3_class_value = "expanderArrow " + (/*openSubs*/ ctx[5] ? 'down' : 'right') + " svelte-dc6tmv")) {
    				attr_dev(i3, "class", i3_class_value);
    			}

    			if (dirty[0] & /*sortedCompList, $AppData, selectedHero, openHero, $HeroData*/ 33043) {
    				each_value = /*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].subs;
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$6(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$6(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div21, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (dirty[0] & /*openSubs*/ 32) {
    				toggle_class(div22, "open", /*openSubs*/ ctx[5]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block3);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block3);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			if (detaching) detach_dev(t11);
    			if (detaching) detach_dev(div5);
    			destroy_each(each_blocks_2, detaching);
    			if (detaching) detach_dev(t12);
    			if (detaching) detach_dev(div25);
    			destroy_each(each_blocks_1, detaching);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    			if_blocks[current_block_type_index].d();
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$3.name,
    		type: "if",
    		source: "(470:3) {#if $AppData.selectedComp !== null}",
    		ctx
    	});

    	return block;
    }

    // (487:6) {#each sortedCompList[$AppData.selectedComp].tags as tag}
    function create_each_block_8(ctx) {
    	let div;
    	let span;
    	let t0_value = /*tag*/ ctx[99] + "";
    	let t0;
    	let t1;

    	const block = {
    		c: function create() {
    			div = element("div");
    			span = element("span");
    			t0 = text$2(t0_value);
    			t1 = space();
    			attr_dev(span, "class", "tagText svelte-dc6tmv");
    			add_location(span, file$7, 488, 8, 17759);
    			attr_dev(div, "class", "tag svelte-dc6tmv");
    			add_location(div, file$7, 487, 7, 17732);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, span);
    			append_dev(span, t0);
    			append_dev(div, t1);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*sortedCompList, $AppData*/ 3 && t0_value !== (t0_value = /*tag*/ ctx[99] + "")) set_data_dev(t0, t0_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_8.name,
    		type: "each",
    		source: "(487:6) {#each sortedCompList[$AppData.selectedComp].tags as tag}",
    		ctx
    	});

    	return block;
    }

    // (501:8) {#each sortedCompList[$AppData.selectedComp].lines as line, i}
    function create_each_block_7(ctx) {
    	let button;
    	let t_value = /*line*/ ctx[97].name + "";
    	let t;
    	let mounted;
    	let dispose;

    	function click_handler_4() {
    		return /*click_handler_4*/ ctx[43](/*i*/ ctx[95]);
    	}

    	const block = {
    		c: function create() {
    			button = element("button");
    			t = text$2(t_value);
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "lineSwitchButton svelte-dc6tmv");
    			toggle_class(button, "active", /*selectedLine*/ ctx[7] === /*i*/ ctx[95]);
    			add_location(button, file$7, 501, 8, 18340);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, t);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", click_handler_4, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty[0] & /*sortedCompList, $AppData*/ 3 && t_value !== (t_value = /*line*/ ctx[97].name + "")) set_data_dev(t, t_value);

    			if (dirty[0] & /*selectedLine*/ 128) {
    				toggle_class(button, "active", /*selectedLine*/ ctx[7] === /*i*/ ctx[95]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_7.name,
    		type: "each",
    		source: "(501:8) {#each sortedCompList[$AppData.selectedComp].lines as line, i}",
    		ctx
    	});

    	return block;
    }

    // (506:8) {#if sortedCompList[$AppData.selectedComp].lines.length > 0}
    function create_if_block_37(ctx) {
    	let div;
    	let span;
    	let t_value = /*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].lines[/*selectedLine*/ ctx[7]].name + "";
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			span = element("span");
    			t = text$2(t_value);
    			add_location(span, file$7, 506, 32, 18645);
    			attr_dev(div, "class", "lineTitle svelte-dc6tmv");
    			add_location(div, file$7, 506, 9, 18622);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, span);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*sortedCompList, $AppData, selectedLine*/ 131 && t_value !== (t_value = /*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].lines[/*selectedLine*/ ctx[7]].name + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_37.name,
    		type: "if",
    		source: "(506:8) {#if sortedCompList[$AppData.selectedComp].lines.length > 0}",
    		ctx
    	});

    	return block;
    }

    // (511:10) {#if sortedCompList[$AppData.selectedComp].lines.length > 0}
    function create_if_block_26(ctx) {
    	let each_1_anchor;
    	let each_value_6 = /*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].lines[/*selectedLine*/ ctx[7]].heroes;
    	validate_each_argument(each_value_6);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_6.length; i += 1) {
    		each_blocks[i] = create_each_block_6$1(get_each_context_6$1(ctx, each_value_6, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty$3();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*selectedHero, sortedCompList, $AppData, selectedLine, openHero, $HeroData*/ 33171) {
    				each_value_6 = /*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].lines[/*selectedLine*/ ctx[7]].heroes;
    				validate_each_argument(each_value_6);
    				let i;

    				for (i = 0; i < each_value_6.length; i += 1) {
    					const child_ctx = get_each_context_6$1(ctx, each_value_6, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_6$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_6.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_26.name,
    		type: "if",
    		source: "(511:10) {#if sortedCompList[$AppData.selectedComp].lines.length > 0}",
    		ctx
    	});

    	return block;
    }

    // (513:12) {#if i >= 2}
    function create_if_block_27(ctx) {
    	let show_if;
    	let if_block_anchor;

    	function func_1(...args) {
    		return /*func_1*/ ctx[35](/*hero*/ ctx[84], ...args);
    	}

    	function select_block_type_3(ctx, dirty) {
    		if (show_if == null || dirty[0] & /*$HeroData, sortedCompList, $AppData, selectedLine*/ 32899) show_if = !!/*$HeroData*/ ctx[15].some(func_1);
    		if (show_if) return create_if_block_28;
    		return create_else_block_8;
    	}

    	let current_block_type = select_block_type_3(ctx, [-1, -1, -1, -1]);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty$3();
    		},
    		m: function mount(target, anchor) {
    			if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (current_block_type === (current_block_type = select_block_type_3(ctx, dirty)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_27.name,
    		type: "if",
    		source: "(513:12) {#if i >= 2}",
    		ctx
    	});

    	return block;
    }

    // (545:13) {:else}
    function create_else_block_8(ctx) {
    	let i;

    	const block = {
    		c: function create() {
    			i = element("i");
    			attr_dev(i, "class", "emptyLineSlot svelte-dc6tmv");
    			add_location(i, file$7, 545, 14, 21470);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, i, anchor);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(i);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_8.name,
    		type: "else",
    		source: "(545:13) {:else}",
    		ctx
    	});

    	return block;
    }

    // (514:13) {#if $HeroData.some(e => e.id === hero)}
    function create_if_block_28(ctx) {
    	let div1;
    	let a0;
    	let img;
    	let img_src_value;
    	let img_alt_value;
    	let t0;
    	let span0;
    	let t1;
    	let div0;
    	let t2;
    	let t3;
    	let t4;
    	let a1;
    	let span1;
    	let t5_value = /*$HeroData*/ ctx[15].find(func_4).name + "";
    	let t5;
    	let mounted;
    	let dispose;

    	function func_2(...args) {
    		return /*func_2*/ ctx[44](/*hero*/ ctx[84], ...args);
    	}

    	function func_3(...args) {
    		return /*func_3*/ ctx[45](/*hero*/ ctx[84], ...args);
    	}

    	function click_handler_5() {
    		return /*click_handler_5*/ ctx[46](/*hero*/ ctx[84]);
    	}

    	function select_block_type_4(ctx, dirty) {
    		if (/*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*hero*/ ctx[84]].ascendLv >= 6) return create_if_block_34;
    		if (/*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*hero*/ ctx[84]].ascendLv >= 4) return create_if_block_35;
    		if (/*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*hero*/ ctx[84]].ascendLv >= 2) return create_if_block_36;
    		return create_else_block_7;
    	}

    	let current_block_type = select_block_type_4(ctx);
    	let if_block0 = current_block_type(ctx);

    	function select_block_type_5(ctx, dirty) {
    		if (/*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*hero*/ ctx[84]].si >= 30) return create_if_block_31;
    		if (/*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*hero*/ ctx[84]].si >= 20) return create_if_block_32;
    		if (/*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*hero*/ ctx[84]].si >= 10) return create_if_block_33;
    		return create_else_block_6;
    	}

    	let current_block_type_1 = select_block_type_5(ctx);
    	let if_block1 = current_block_type_1(ctx);

    	function select_block_type_6(ctx, dirty) {
    		if (/*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*hero*/ ctx[84]].furn >= 9) return create_if_block_29;
    		if (/*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*hero*/ ctx[84]].furn >= 3) return create_if_block_30;
    	}

    	let current_block_type_2 = select_block_type_6(ctx);
    	let if_block2 = current_block_type_2 && current_block_type_2(ctx);

    	function func_4(...args) {
    		return /*func_4*/ ctx[47](/*hero*/ ctx[84], ...args);
    	}

    	function click_handler_6() {
    		return /*click_handler_6*/ ctx[48](/*hero*/ ctx[84]);
    	}

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			a0 = element("a");
    			img = element("img");
    			t0 = space();
    			span0 = element("span");
    			t1 = space();
    			div0 = element("div");
    			if_block0.c();
    			t2 = space();
    			if_block1.c();
    			t3 = space();
    			if (if_block2) if_block2.c();
    			t4 = space();
    			a1 = element("a");
    			span1 = element("span");
    			t5 = text$2(t5_value);
    			attr_dev(img, "draggable", "false");
    			attr_dev(img, "class", "lineImg svelte-dc6tmv");
    			if (!src_url_equal(img.src, img_src_value = /*$HeroData*/ ctx[15].find(func_2).portrait)) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", img_alt_value = /*$HeroData*/ ctx[15].find(func_3).name);
    			toggle_class(img, "claimed", /*$AppData*/ ctx[1].MH.List[/*hero*/ ctx[84]].claimed);
    			add_location(img, file$7, 515, 62, 19178);
    			attr_dev(a0, "draggable", "false");
    			attr_dev(a0, "href", "#heroDetailSection");
    			attr_dev(a0, "class", "svelte-dc6tmv");
    			add_location(a0, file$7, 515, 15, 19131);
    			attr_dev(span0, "class", "coreMark svelte-dc6tmv");
    			toggle_class(span0, "visible", /*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*hero*/ ctx[84]].core);
    			add_location(span0, file$7, 516, 15, 19440);
    			attr_dev(div0, "class", "ascMark svelte-dc6tmv");
    			add_location(div0, file$7, 517, 15, 19559);
    			attr_dev(div1, "class", "detailImgContainer svelte-dc6tmv");
    			add_location(div1, file$7, 514, 14, 19082);
    			add_location(span1, file$7, 543, 61, 21315);
    			attr_dev(a1, "draggable", "false");
    			attr_dev(a1, "href", "#heroDetailSection");
    			attr_dev(a1, "class", "svelte-dc6tmv");
    			add_location(a1, file$7, 543, 14, 21268);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, a0);
    			append_dev(a0, img);
    			append_dev(div1, t0);
    			append_dev(div1, span0);
    			append_dev(div1, t1);
    			append_dev(div1, div0);
    			if_block0.m(div0, null);
    			append_dev(div0, t2);
    			if_block1.m(div0, null);
    			append_dev(div0, t3);
    			if (if_block2) if_block2.m(div0, null);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, a1, anchor);
    			append_dev(a1, span1);
    			append_dev(span1, t5);

    			if (!mounted) {
    				dispose = [
    					listen_dev(img, "click", click_handler_5, false, false, false),
    					listen_dev(span1, "click", click_handler_6, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty[0] & /*$HeroData, sortedCompList, $AppData, selectedLine*/ 32899 && !src_url_equal(img.src, img_src_value = /*$HeroData*/ ctx[15].find(func_2).portrait)) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if (dirty[0] & /*$HeroData, sortedCompList, $AppData, selectedLine*/ 32899 && img_alt_value !== (img_alt_value = /*$HeroData*/ ctx[15].find(func_3).name)) {
    				attr_dev(img, "alt", img_alt_value);
    			}

    			if (dirty[0] & /*$AppData, sortedCompList, selectedLine*/ 131) {
    				toggle_class(img, "claimed", /*$AppData*/ ctx[1].MH.List[/*hero*/ ctx[84]].claimed);
    			}

    			if (dirty[0] & /*sortedCompList, $AppData, selectedLine*/ 131) {
    				toggle_class(span0, "visible", /*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*hero*/ ctx[84]].core);
    			}

    			if (current_block_type !== (current_block_type = select_block_type_4(ctx))) {
    				if_block0.d(1);
    				if_block0 = current_block_type(ctx);

    				if (if_block0) {
    					if_block0.c();
    					if_block0.m(div0, t2);
    				}
    			}

    			if (current_block_type_1 !== (current_block_type_1 = select_block_type_5(ctx))) {
    				if_block1.d(1);
    				if_block1 = current_block_type_1(ctx);

    				if (if_block1) {
    					if_block1.c();
    					if_block1.m(div0, t3);
    				}
    			}

    			if (current_block_type_2 === (current_block_type_2 = select_block_type_6(ctx)) && if_block2) {
    				if_block2.p(ctx, dirty);
    			} else {
    				if (if_block2) if_block2.d(1);
    				if_block2 = current_block_type_2 && current_block_type_2(ctx);

    				if (if_block2) {
    					if_block2.c();
    					if_block2.m(div0, null);
    				}
    			}

    			if (dirty[0] & /*$HeroData, sortedCompList, $AppData, selectedLine*/ 32899 && t5_value !== (t5_value = /*$HeroData*/ ctx[15].find(func_4).name + "")) set_data_dev(t5, t5_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if_block0.d();
    			if_block1.d();

    			if (if_block2) {
    				if_block2.d();
    			}

    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(a1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_28.name,
    		type: "if",
    		source: "(514:13) {#if $HeroData.some(e => e.id === hero)}",
    		ctx
    	});

    	return block;
    }

    // (525:16) {:else}
    function create_else_block_7(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			if (!src_url_equal(img.src, img_src_value = "./img/markers/elite.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "elite");
    			attr_dev(img, "class", "svelte-dc6tmv");
    			add_location(img, file$7, 525, 17, 20112);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_7.name,
    		type: "else",
    		source: "(525:16) {:else}",
    		ctx
    	});

    	return block;
    }

    // (523:91) 
    function create_if_block_36(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			if (!src_url_equal(img.src, img_src_value = "./img/markers/legendary.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "legendary");
    			attr_dev(img, "class", "svelte-dc6tmv");
    			add_location(img, file$7, 523, 17, 20013);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_36.name,
    		type: "if",
    		source: "(523:91) ",
    		ctx
    	});

    	return block;
    }

    // (521:91) 
    function create_if_block_35(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			if (!src_url_equal(img.src, img_src_value = "./img/markers/mythic.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "mythic");
    			attr_dev(img, "class", "svelte-dc6tmv");
    			add_location(img, file$7, 521, 17, 19852);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_35.name,
    		type: "if",
    		source: "(521:91) ",
    		ctx
    	});

    	return block;
    }

    // (519:16) {#if sortedCompList[$AppData.selectedComp].heroes[hero].ascendLv >= 6}
    function create_if_block_34(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			if (!src_url_equal(img.src, img_src_value = "./img/markers/ascended.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "ascended");
    			attr_dev(img, "class", "svelte-dc6tmv");
    			add_location(img, file$7, 519, 17, 19687);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_34.name,
    		type: "if",
    		source: "(519:16) {#if sortedCompList[$AppData.selectedComp].heroes[hero].ascendLv >= 6}",
    		ctx
    	});

    	return block;
    }

    // (534:16) {:else}
    function create_else_block_6(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			if (!src_url_equal(img.src, img_src_value = "./img/markers/si0.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "si0");
    			attr_dev(img, "class", "svelte-dc6tmv");
    			add_location(img, file$7, 534, 17, 20677);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_6.name,
    		type: "else",
    		source: "(534:16) {:else}",
    		ctx
    	});

    	return block;
    }

    // (532:86) 
    function create_if_block_33(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			if (!src_url_equal(img.src, img_src_value = "./img/markers/si10.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "si10");
    			attr_dev(img, "class", "svelte-dc6tmv");
    			add_location(img, file$7, 532, 17, 20588);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_33.name,
    		type: "if",
    		source: "(532:86) ",
    		ctx
    	});

    	return block;
    }

    // (530:86) 
    function create_if_block_32(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			if (!src_url_equal(img.src, img_src_value = "./img/markers/si20.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "si20");
    			attr_dev(img, "class", "svelte-dc6tmv");
    			add_location(img, file$7, 530, 17, 20436);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_32.name,
    		type: "if",
    		source: "(530:86) ",
    		ctx
    	});

    	return block;
    }

    // (528:16) {#if sortedCompList[$AppData.selectedComp].heroes[hero].si >= 30}
    function create_if_block_31(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			if (!src_url_equal(img.src, img_src_value = "./img/markers/si30.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "si30");
    			attr_dev(img, "class", "svelte-dc6tmv");
    			add_location(img, file$7, 528, 17, 20284);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_31.name,
    		type: "if",
    		source: "(528:16) {#if sortedCompList[$AppData.selectedComp].heroes[hero].si >= 30}",
    		ctx
    	});

    	return block;
    }

    // (539:87) 
    function create_if_block_30(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			if (!src_url_equal(img.src, img_src_value = "./img/markers/3f.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "3f");
    			attr_dev(img, "class", "svelte-dc6tmv");
    			toggle_class(img, "moveup", /*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*hero*/ ctx[84]].si < 10);
    			add_location(img, file$7, 539, 17, 21069);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*sortedCompList, $AppData, selectedLine*/ 131) {
    				toggle_class(img, "moveup", /*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*hero*/ ctx[84]].si < 10);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_30.name,
    		type: "if",
    		source: "(539:87) ",
    		ctx
    	});

    	return block;
    }

    // (537:16) {#if sortedCompList[$AppData.selectedComp].heroes[hero].furn >= 9}
    function create_if_block_29(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			if (!src_url_equal(img.src, img_src_value = "./img/markers/9f.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "9f");
    			attr_dev(img, "class", "svelte-dc6tmv");
    			toggle_class(img, "moveup", /*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*hero*/ ctx[84]].si < 10);
    			add_location(img, file$7, 537, 17, 20846);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*sortedCompList, $AppData, selectedLine*/ 131) {
    				toggle_class(img, "moveup", /*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*hero*/ ctx[84]].si < 10);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_29.name,
    		type: "if",
    		source: "(537:16) {#if sortedCompList[$AppData.selectedComp].heroes[hero].furn >= 9}",
    		ctx
    	});

    	return block;
    }

    // (512:11) {#each sortedCompList[$AppData.selectedComp].lines[selectedLine].heroes as hero, i}
    function create_each_block_6$1(ctx) {
    	let if_block_anchor;
    	let if_block = /*i*/ ctx[95] >= 2 && create_if_block_27(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty$3();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (/*i*/ ctx[95] >= 2) if_block.p(ctx, dirty);
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_6$1.name,
    		type: "each",
    		source: "(512:11) {#each sortedCompList[$AppData.selectedComp].lines[selectedLine].heroes as hero, i}",
    		ctx
    	});

    	return block;
    }

    // (553:10) {#if sortedCompList[$AppData.selectedComp].lines.length > 0}
    function create_if_block_15(ctx) {
    	let each_1_anchor;
    	let each_value_5 = /*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].lines[/*selectedLine*/ ctx[7]].heroes;
    	validate_each_argument(each_value_5);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_5.length; i += 1) {
    		each_blocks[i] = create_each_block_5$1(get_each_context_5$1(ctx, each_value_5, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty$3();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*selectedHero, sortedCompList, $AppData, selectedLine, openHero, $HeroData*/ 33171) {
    				each_value_5 = /*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].lines[/*selectedLine*/ ctx[7]].heroes;
    				validate_each_argument(each_value_5);
    				let i;

    				for (i = 0; i < each_value_5.length; i += 1) {
    					const child_ctx = get_each_context_5$1(ctx, each_value_5, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_5$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_5.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_15.name,
    		type: "if",
    		source: "(553:10) {#if sortedCompList[$AppData.selectedComp].lines.length > 0}",
    		ctx
    	});

    	return block;
    }

    // (555:12) {#if i < 2}
    function create_if_block_16(ctx) {
    	let show_if;
    	let if_block_anchor;

    	function func(...args) {
    		return /*func*/ ctx[34](/*hero*/ ctx[84], ...args);
    	}

    	function select_block_type_7(ctx, dirty) {
    		if (show_if == null || dirty[0] & /*$HeroData, sortedCompList, $AppData, selectedLine*/ 32899) show_if = !!/*$HeroData*/ ctx[15].some(func);
    		if (show_if) return create_if_block_17;
    		return create_else_block_5;
    	}

    	let current_block_type = select_block_type_7(ctx, [-1, -1, -1, -1]);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty$3();
    		},
    		m: function mount(target, anchor) {
    			if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (current_block_type === (current_block_type = select_block_type_7(ctx, dirty)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_16.name,
    		type: "if",
    		source: "(555:12) {#if i < 2}",
    		ctx
    	});

    	return block;
    }

    // (587:13) {:else}
    function create_else_block_5(ctx) {
    	let i;

    	const block = {
    		c: function create() {
    			i = element("i");
    			attr_dev(i, "class", "emptyLineSlot svelte-dc6tmv");
    			add_location(i, file$7, 587, 14, 24284);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, i, anchor);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(i);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_5.name,
    		type: "else",
    		source: "(587:13) {:else}",
    		ctx
    	});

    	return block;
    }

    // (556:13) {#if $HeroData.some(e => e.id === hero)}
    function create_if_block_17(ctx) {
    	let div1;
    	let a0;
    	let img;
    	let img_src_value;
    	let img_alt_value;
    	let t0;
    	let span0;
    	let t1;
    	let div0;
    	let t2;
    	let t3;
    	let t4;
    	let a1;
    	let span1;
    	let t5_value = /*$HeroData*/ ctx[15].find(func_7).name + "";
    	let t5;
    	let mounted;
    	let dispose;

    	function func_5(...args) {
    		return /*func_5*/ ctx[49](/*hero*/ ctx[84], ...args);
    	}

    	function func_6(...args) {
    		return /*func_6*/ ctx[50](/*hero*/ ctx[84], ...args);
    	}

    	function click_handler_7() {
    		return /*click_handler_7*/ ctx[51](/*hero*/ ctx[84]);
    	}

    	function select_block_type_8(ctx, dirty) {
    		if (/*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*hero*/ ctx[84]].ascendLv >= 6) return create_if_block_23;
    		if (/*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*hero*/ ctx[84]].ascendLv >= 4) return create_if_block_24;
    		if (/*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*hero*/ ctx[84]].ascendLv >= 2) return create_if_block_25;
    		return create_else_block_4;
    	}

    	let current_block_type = select_block_type_8(ctx);
    	let if_block0 = current_block_type(ctx);

    	function select_block_type_9(ctx, dirty) {
    		if (/*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*hero*/ ctx[84]].si >= 30) return create_if_block_20;
    		if (/*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*hero*/ ctx[84]].si >= 20) return create_if_block_21;
    		if (/*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*hero*/ ctx[84]].si >= 10) return create_if_block_22;
    		return create_else_block_3;
    	}

    	let current_block_type_1 = select_block_type_9(ctx);
    	let if_block1 = current_block_type_1(ctx);

    	function select_block_type_10(ctx, dirty) {
    		if (/*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*hero*/ ctx[84]].furn >= 9) return create_if_block_18;
    		if (/*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*hero*/ ctx[84]].furn >= 3) return create_if_block_19;
    	}

    	let current_block_type_2 = select_block_type_10(ctx);
    	let if_block2 = current_block_type_2 && current_block_type_2(ctx);

    	function func_7(...args) {
    		return /*func_7*/ ctx[52](/*hero*/ ctx[84], ...args);
    	}

    	function click_handler_8() {
    		return /*click_handler_8*/ ctx[53](/*hero*/ ctx[84]);
    	}

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			a0 = element("a");
    			img = element("img");
    			t0 = space();
    			span0 = element("span");
    			t1 = space();
    			div0 = element("div");
    			if_block0.c();
    			t2 = space();
    			if_block1.c();
    			t3 = space();
    			if (if_block2) if_block2.c();
    			t4 = space();
    			a1 = element("a");
    			span1 = element("span");
    			t5 = text$2(t5_value);
    			attr_dev(img, "draggable", "false");
    			attr_dev(img, "class", "lineImg svelte-dc6tmv");
    			if (!src_url_equal(img.src, img_src_value = /*$HeroData*/ ctx[15].find(func_5).portrait)) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", img_alt_value = /*$HeroData*/ ctx[15].find(func_6).name);
    			toggle_class(img, "claimed", /*$AppData*/ ctx[1].MH.List[/*hero*/ ctx[84]].claimed);
    			add_location(img, file$7, 557, 62, 21992);
    			attr_dev(a0, "draggable", "false");
    			attr_dev(a0, "href", "#heroDetailSection");
    			attr_dev(a0, "class", "svelte-dc6tmv");
    			add_location(a0, file$7, 557, 15, 21945);
    			attr_dev(span0, "class", "coreMark svelte-dc6tmv");
    			toggle_class(span0, "visible", /*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*hero*/ ctx[84]].core);
    			add_location(span0, file$7, 558, 15, 22254);
    			attr_dev(div0, "class", "ascMark svelte-dc6tmv");
    			add_location(div0, file$7, 559, 15, 22373);
    			attr_dev(div1, "class", "detailImgContainer svelte-dc6tmv");
    			add_location(div1, file$7, 556, 14, 21896);
    			add_location(span1, file$7, 585, 61, 24129);
    			attr_dev(a1, "draggable", "false");
    			attr_dev(a1, "href", "#heroDetailSection");
    			attr_dev(a1, "class", "svelte-dc6tmv");
    			add_location(a1, file$7, 585, 14, 24082);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, a0);
    			append_dev(a0, img);
    			append_dev(div1, t0);
    			append_dev(div1, span0);
    			append_dev(div1, t1);
    			append_dev(div1, div0);
    			if_block0.m(div0, null);
    			append_dev(div0, t2);
    			if_block1.m(div0, null);
    			append_dev(div0, t3);
    			if (if_block2) if_block2.m(div0, null);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, a1, anchor);
    			append_dev(a1, span1);
    			append_dev(span1, t5);

    			if (!mounted) {
    				dispose = [
    					listen_dev(img, "click", click_handler_7, false, false, false),
    					listen_dev(span1, "click", click_handler_8, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty[0] & /*$HeroData, sortedCompList, $AppData, selectedLine*/ 32899 && !src_url_equal(img.src, img_src_value = /*$HeroData*/ ctx[15].find(func_5).portrait)) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if (dirty[0] & /*$HeroData, sortedCompList, $AppData, selectedLine*/ 32899 && img_alt_value !== (img_alt_value = /*$HeroData*/ ctx[15].find(func_6).name)) {
    				attr_dev(img, "alt", img_alt_value);
    			}

    			if (dirty[0] & /*$AppData, sortedCompList, selectedLine*/ 131) {
    				toggle_class(img, "claimed", /*$AppData*/ ctx[1].MH.List[/*hero*/ ctx[84]].claimed);
    			}

    			if (dirty[0] & /*sortedCompList, $AppData, selectedLine*/ 131) {
    				toggle_class(span0, "visible", /*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*hero*/ ctx[84]].core);
    			}

    			if (current_block_type !== (current_block_type = select_block_type_8(ctx))) {
    				if_block0.d(1);
    				if_block0 = current_block_type(ctx);

    				if (if_block0) {
    					if_block0.c();
    					if_block0.m(div0, t2);
    				}
    			}

    			if (current_block_type_1 !== (current_block_type_1 = select_block_type_9(ctx))) {
    				if_block1.d(1);
    				if_block1 = current_block_type_1(ctx);

    				if (if_block1) {
    					if_block1.c();
    					if_block1.m(div0, t3);
    				}
    			}

    			if (current_block_type_2 === (current_block_type_2 = select_block_type_10(ctx)) && if_block2) {
    				if_block2.p(ctx, dirty);
    			} else {
    				if (if_block2) if_block2.d(1);
    				if_block2 = current_block_type_2 && current_block_type_2(ctx);

    				if (if_block2) {
    					if_block2.c();
    					if_block2.m(div0, null);
    				}
    			}

    			if (dirty[0] & /*$HeroData, sortedCompList, $AppData, selectedLine*/ 32899 && t5_value !== (t5_value = /*$HeroData*/ ctx[15].find(func_7).name + "")) set_data_dev(t5, t5_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if_block0.d();
    			if_block1.d();

    			if (if_block2) {
    				if_block2.d();
    			}

    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(a1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_17.name,
    		type: "if",
    		source: "(556:13) {#if $HeroData.some(e => e.id === hero)}",
    		ctx
    	});

    	return block;
    }

    // (567:16) {:else}
    function create_else_block_4(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			if (!src_url_equal(img.src, img_src_value = "./img/markers/elite.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "elite");
    			attr_dev(img, "class", "svelte-dc6tmv");
    			add_location(img, file$7, 567, 17, 22926);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_4.name,
    		type: "else",
    		source: "(567:16) {:else}",
    		ctx
    	});

    	return block;
    }

    // (565:91) 
    function create_if_block_25(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			if (!src_url_equal(img.src, img_src_value = "./img/markers/legendary.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "legendary");
    			attr_dev(img, "class", "svelte-dc6tmv");
    			add_location(img, file$7, 565, 17, 22827);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_25.name,
    		type: "if",
    		source: "(565:91) ",
    		ctx
    	});

    	return block;
    }

    // (563:91) 
    function create_if_block_24(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			if (!src_url_equal(img.src, img_src_value = "./img/markers/mythic.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "mythic");
    			attr_dev(img, "class", "svelte-dc6tmv");
    			add_location(img, file$7, 563, 17, 22666);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_24.name,
    		type: "if",
    		source: "(563:91) ",
    		ctx
    	});

    	return block;
    }

    // (561:16) {#if sortedCompList[$AppData.selectedComp].heroes[hero].ascendLv >= 6}
    function create_if_block_23(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			if (!src_url_equal(img.src, img_src_value = "./img/markers/ascended.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "ascended");
    			attr_dev(img, "class", "svelte-dc6tmv");
    			add_location(img, file$7, 561, 17, 22501);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_23.name,
    		type: "if",
    		source: "(561:16) {#if sortedCompList[$AppData.selectedComp].heroes[hero].ascendLv >= 6}",
    		ctx
    	});

    	return block;
    }

    // (576:16) {:else}
    function create_else_block_3(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			if (!src_url_equal(img.src, img_src_value = "./img/markers/si0.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "si0");
    			attr_dev(img, "class", "svelte-dc6tmv");
    			add_location(img, file$7, 576, 17, 23491);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_3.name,
    		type: "else",
    		source: "(576:16) {:else}",
    		ctx
    	});

    	return block;
    }

    // (574:86) 
    function create_if_block_22(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			if (!src_url_equal(img.src, img_src_value = "./img/markers/si10.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "si10");
    			attr_dev(img, "class", "svelte-dc6tmv");
    			add_location(img, file$7, 574, 17, 23402);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_22.name,
    		type: "if",
    		source: "(574:86) ",
    		ctx
    	});

    	return block;
    }

    // (572:86) 
    function create_if_block_21(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			if (!src_url_equal(img.src, img_src_value = "./img/markers/si20.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "si20");
    			attr_dev(img, "class", "svelte-dc6tmv");
    			add_location(img, file$7, 572, 17, 23250);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_21.name,
    		type: "if",
    		source: "(572:86) ",
    		ctx
    	});

    	return block;
    }

    // (570:16) {#if sortedCompList[$AppData.selectedComp].heroes[hero].si >= 30}
    function create_if_block_20(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			if (!src_url_equal(img.src, img_src_value = "./img/markers/si30.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "si30");
    			attr_dev(img, "class", "svelte-dc6tmv");
    			add_location(img, file$7, 570, 17, 23098);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_20.name,
    		type: "if",
    		source: "(570:16) {#if sortedCompList[$AppData.selectedComp].heroes[hero].si >= 30}",
    		ctx
    	});

    	return block;
    }

    // (581:87) 
    function create_if_block_19(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			if (!src_url_equal(img.src, img_src_value = "./img/markers/3f.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "3f");
    			attr_dev(img, "class", "svelte-dc6tmv");
    			toggle_class(img, "moveup", /*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*hero*/ ctx[84]].si < 10);
    			add_location(img, file$7, 581, 17, 23883);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*sortedCompList, $AppData, selectedLine*/ 131) {
    				toggle_class(img, "moveup", /*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*hero*/ ctx[84]].si < 10);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_19.name,
    		type: "if",
    		source: "(581:87) ",
    		ctx
    	});

    	return block;
    }

    // (579:16) {#if sortedCompList[$AppData.selectedComp].heroes[hero].furn >= 9}
    function create_if_block_18(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			if (!src_url_equal(img.src, img_src_value = "./img/markers/9f.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "9f");
    			attr_dev(img, "class", "svelte-dc6tmv");
    			toggle_class(img, "moveup", /*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*hero*/ ctx[84]].si < 10);
    			add_location(img, file$7, 579, 17, 23660);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*sortedCompList, $AppData, selectedLine*/ 131) {
    				toggle_class(img, "moveup", /*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*hero*/ ctx[84]].si < 10);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_18.name,
    		type: "if",
    		source: "(579:16) {#if sortedCompList[$AppData.selectedComp].heroes[hero].furn >= 9}",
    		ctx
    	});

    	return block;
    }

    // (554:11) {#each sortedCompList[$AppData.selectedComp].lines[selectedLine].heroes as hero, i}
    function create_each_block_5$1(ctx) {
    	let if_block_anchor;
    	let if_block = /*i*/ ctx[95] < 2 && create_if_block_16(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty$3();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (/*i*/ ctx[95] < 2) if_block.p(ctx, dirty);
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_5$1.name,
    		type: "each",
    		source: "(554:11) {#each sortedCompList[$AppData.selectedComp].lines[selectedLine].heroes as hero, i}",
    		ctx
    	});

    	return block;
    }

    // (684:8) {:else}
    function create_else_block_2$1(ctx) {
    	let tutorialbox;
    	let current;

    	tutorialbox = new TutorialBox({
    			props: {
    				noMargin: true,
    				$$slots: { default: [create_default_slot$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(tutorialbox.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(tutorialbox, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const tutorialbox_changes = {};

    			if (dirty[3] & /*$$scope*/ 8192) {
    				tutorialbox_changes.$$scope = { dirty, ctx };
    			}

    			tutorialbox.$set(tutorialbox_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(tutorialbox.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(tutorialbox.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(tutorialbox, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_2$1.name,
    		type: "else",
    		source: "(684:8) {:else}",
    		ctx
    	});

    	return block;
    }

    // (612:8) {#if selectedHero !== ''}
    function create_if_block_10(ctx) {
    	let div7;
    	let div4;
    	let div0;
    	let sifurnbox0;
    	let t0;
    	let div2;
    	let div1;
    	let img;
    	let img_src_value;
    	let t1;
    	let span;
    	let t2;
    	let p;
    	let t3_value = /*$HeroData*/ ctx[15].find(/*func_9*/ ctx[58]).name + "";
    	let t3;
    	let t4;
    	let div3;
    	let sifurnbox1;
    	let t5;
    	let div6;
    	let div5;
    	let ascendbox;
    	let t6;
    	let t7;
    	let div7_intro;
    	let current;
    	let mounted;
    	let dispose;

    	sifurnbox0 = new SIFurnBox({
    			props: {
    				type: "si",
    				num: /*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*selectedHero*/ ctx[8]].si,
    				maxWidth: "50px",
    				fontSize: "1.2rem"
    			},
    			$$inline: true
    		});

    	sifurnbox1 = new SIFurnBox({
    			props: {
    				type: "furn",
    				num: /*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*selectedHero*/ ctx[8]].furn,
    				maxWidth: "50px",
    				fontSize: "1.2rem"
    			},
    			$$inline: true
    		});

    	ascendbox = new AscendBox({
    			props: {
    				ascendLv: /*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*selectedHero*/ ctx[8]].ascendLv
    			},
    			$$inline: true
    		});

    	let if_block0 = /*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*selectedHero*/ ctx[8]].notes.length > 0 && create_if_block_14(ctx);
    	let if_block1 = (/*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*selectedHero*/ ctx[8]].artifacts.primary.length > 0 || /*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*selectedHero*/ ctx[8]].artifacts.secondary.length > 0 || /*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*selectedHero*/ ctx[8]].artifacts.situational.length > 0) && create_if_block_11(ctx);

    	const block = {
    		c: function create() {
    			div7 = element("div");
    			div4 = element("div");
    			div0 = element("div");
    			create_component(sifurnbox0.$$.fragment);
    			t0 = space();
    			div2 = element("div");
    			div1 = element("div");
    			img = element("img");
    			t1 = space();
    			span = element("span");
    			t2 = space();
    			p = element("p");
    			t3 = text$2(t3_value);
    			t4 = space();
    			div3 = element("div");
    			create_component(sifurnbox1.$$.fragment);
    			t5 = space();
    			div6 = element("div");
    			div5 = element("div");
    			create_component(ascendbox.$$.fragment);
    			t6 = space();
    			if (if_block0) if_block0.c();
    			t7 = space();
    			if (if_block1) if_block1.c();
    			add_location(div0, file$7, 614, 11, 25504);
    			attr_dev(img, "draggable", "false");
    			attr_dev(img, "class", "selectHeroPortrait svelte-dc6tmv");
    			if (!src_url_equal(img.src, img_src_value = /*$HeroData*/ ctx[15].find(/*func_8*/ ctx[56]).portrait)) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", /*selectedHero*/ ctx[8]);
    			toggle_class(img, "claimed", /*$AppData*/ ctx[1].MH.List[/*selectedHero*/ ctx[8]].claimed);
    			add_location(img, file$7, 619, 13, 25825);
    			attr_dev(span, "class", "coreMark svelte-dc6tmv");
    			toggle_class(span, "visible", /*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*selectedHero*/ ctx[8]].core);
    			add_location(span, file$7, 620, 13, 26026);
    			attr_dev(div1, "class", "portraitContainer svelte-dc6tmv");
    			add_location(div1, file$7, 618, 12, 25726);
    			attr_dev(p, "class", "svelte-dc6tmv");
    			add_location(p, file$7, 622, 12, 26170);
    			attr_dev(div2, "class", "selectPortraitArea svelte-dc6tmv");
    			add_location(div2, file$7, 617, 11, 25680);
    			add_location(div3, file$7, 624, 11, 26258);
    			attr_dev(div4, "class", "upperSelectCard svelte-dc6tmv");
    			add_location(div4, file$7, 613, 10, 25462);
    			attr_dev(div5, "class", "ascendBoxContainer svelte-dc6tmv");
    			add_location(div5, file$7, 629, 11, 26497);
    			attr_dev(div6, "class", "lowerSelectCard svelte-dc6tmv");
    			add_location(div6, file$7, 628, 10, 26455);
    			attr_dev(div7, "class", "selectedHero svelte-dc6tmv");
    			add_location(div7, file$7, 612, 9, 25396);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div7, anchor);
    			append_dev(div7, div4);
    			append_dev(div4, div0);
    			mount_component(sifurnbox0, div0, null);
    			append_dev(div4, t0);
    			append_dev(div4, div2);
    			append_dev(div2, div1);
    			append_dev(div1, img);
    			append_dev(div1, t1);
    			append_dev(div1, span);
    			append_dev(div2, t2);
    			append_dev(div2, p);
    			append_dev(p, t3);
    			append_dev(div4, t4);
    			append_dev(div4, div3);
    			mount_component(sifurnbox1, div3, null);
    			append_dev(div7, t5);
    			append_dev(div7, div6);
    			append_dev(div6, div5);
    			mount_component(ascendbox, div5, null);
    			append_dev(div6, t6);
    			if (if_block0) if_block0.m(div6, null);
    			append_dev(div6, t7);
    			if (if_block1) if_block1.m(div6, null);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(div1, "click", /*click_handler_11*/ ctx[57], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			const sifurnbox0_changes = {};
    			if (dirty[0] & /*sortedCompList, $AppData, selectedHero*/ 259) sifurnbox0_changes.num = /*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*selectedHero*/ ctx[8]].si;
    			sifurnbox0.$set(sifurnbox0_changes);

    			if (!current || dirty[0] & /*$HeroData, selectedHero*/ 33024 && !src_url_equal(img.src, img_src_value = /*$HeroData*/ ctx[15].find(/*func_8*/ ctx[56]).portrait)) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if (!current || dirty[0] & /*selectedHero*/ 256) {
    				attr_dev(img, "alt", /*selectedHero*/ ctx[8]);
    			}

    			if (dirty[0] & /*$AppData, selectedHero*/ 258) {
    				toggle_class(img, "claimed", /*$AppData*/ ctx[1].MH.List[/*selectedHero*/ ctx[8]].claimed);
    			}

    			if (dirty[0] & /*sortedCompList, $AppData, selectedHero*/ 259) {
    				toggle_class(span, "visible", /*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*selectedHero*/ ctx[8]].core);
    			}

    			if ((!current || dirty[0] & /*$HeroData, selectedHero*/ 33024) && t3_value !== (t3_value = /*$HeroData*/ ctx[15].find(/*func_9*/ ctx[58]).name + "")) set_data_dev(t3, t3_value);
    			const sifurnbox1_changes = {};
    			if (dirty[0] & /*sortedCompList, $AppData, selectedHero*/ 259) sifurnbox1_changes.num = /*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*selectedHero*/ ctx[8]].furn;
    			sifurnbox1.$set(sifurnbox1_changes);
    			const ascendbox_changes = {};
    			if (dirty[0] & /*sortedCompList, $AppData, selectedHero*/ 259) ascendbox_changes.ascendLv = /*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*selectedHero*/ ctx[8]].ascendLv;
    			ascendbox.$set(ascendbox_changes);

    			if (/*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*selectedHero*/ ctx[8]].notes.length > 0) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_14(ctx);
    					if_block0.c();
    					if_block0.m(div6, t7);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*selectedHero*/ ctx[8]].artifacts.primary.length > 0 || /*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*selectedHero*/ ctx[8]].artifacts.secondary.length > 0 || /*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*selectedHero*/ ctx[8]].artifacts.situational.length > 0) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_11(ctx);
    					if_block1.c();
    					if_block1.m(div6, null);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(sifurnbox0.$$.fragment, local);
    			transition_in(sifurnbox1.$$.fragment, local);
    			transition_in(ascendbox.$$.fragment, local);

    			if (!div7_intro) {
    				add_render_callback(() => {
    					div7_intro = create_in_transition(div7, fade, { duration: 200 });
    					div7_intro.start();
    				});
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(sifurnbox0.$$.fragment, local);
    			transition_out(sifurnbox1.$$.fragment, local);
    			transition_out(ascendbox.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div7);
    			destroy_component(sifurnbox0);
    			destroy_component(sifurnbox1);
    			destroy_component(ascendbox);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_10.name,
    		type: "if",
    		source: "(612:8) {#if selectedHero !== ''}",
    		ctx
    	});

    	return block;
    }

    // (685:9) <TutorialBox noMargin={true}>
    function create_default_slot$3(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "Select hero to see Ascension, SI, Furniture, and Artifact details.";
    			add_location(span, file$7, 685, 10, 29645);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$3.name,
    		type: "slot",
    		source: "(685:9) <TutorialBox noMargin={true}>",
    		ctx
    	});

    	return block;
    }

    // (633:11) {#if sortedCompList[$AppData.selectedComp].heroes[selectedHero].notes.length > 0}
    function create_if_block_14(ctx) {
    	let div1;
    	let div0;
    	let span;
    	let t_value = /*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*selectedHero*/ ctx[8]].notes + "";
    	let t;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			span = element("span");
    			t = text$2(t_value);
    			add_location(span, file$7, 635, 14, 26845);
    			attr_dev(div0, "class", "heroNotes svelte-dc6tmv");
    			add_location(div0, file$7, 634, 13, 26806);
    			attr_dev(div1, "class", "heroNotesArea svelte-dc6tmv");
    			add_location(div1, file$7, 633, 12, 26764);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div0, span);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*sortedCompList, $AppData, selectedHero*/ 259 && t_value !== (t_value = /*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*selectedHero*/ ctx[8]].notes + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_14.name,
    		type: "if",
    		source: "(633:11) {#if sortedCompList[$AppData.selectedComp].heroes[selectedHero].notes.length > 0}",
    		ctx
    	});

    	return block;
    }

    // (640:11) {#if sortedCompList[$AppData.selectedComp].heroes[selectedHero].artifacts.primary.length > 0 || sortedCompList[$AppData.selectedComp].heroes[selectedHero].artifacts.secondary.length > 0 || sortedCompList[$AppData.selectedComp].heroes[selectedHero].artifacts.situational.length > 0}
    function create_if_block_11(ctx) {
    	let div2;
    	let h5;
    	let t1;
    	let div1;
    	let h6;
    	let t3;
    	let div0;
    	let t4;
    	let t5;
    	let each_value_4 = /*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*selectedHero*/ ctx[8]].artifacts.primary;
    	validate_each_argument(each_value_4);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_4.length; i += 1) {
    		each_blocks[i] = create_each_block_4$1(get_each_context_4$1(ctx, each_value_4, i));
    	}

    	let if_block0 = /*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*selectedHero*/ ctx[8]].artifacts.secondary.length > 0 && create_if_block_13(ctx);
    	let if_block1 = /*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*selectedHero*/ ctx[8]].artifacts.situational.length > 0 && create_if_block_12(ctx);

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			h5 = element("h5");
    			h5.textContent = "Artifacts";
    			t1 = space();
    			div1 = element("div");
    			h6 = element("h6");
    			h6.textContent = "Primary";
    			t3 = space();
    			div0 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t4 = space();
    			if (if_block0) if_block0.c();
    			t5 = space();
    			if (if_block1) if_block1.c();
    			attr_dev(h5, "class", "svelte-dc6tmv");
    			add_location(h5, file$7, 641, 13, 27338);
    			attr_dev(h6, "class", "svelte-dc6tmv");
    			add_location(h6, file$7, 643, 14, 27429);
    			attr_dev(div0, "class", "artifactArea svelte-dc6tmv");
    			add_location(div0, file$7, 644, 14, 27461);
    			attr_dev(div1, "class", "artifactLine priArtifactLine svelte-dc6tmv");
    			add_location(div1, file$7, 642, 13, 27371);
    			attr_dev(div2, "class", "artifactsContainer svelte-dc6tmv");
    			add_location(div2, file$7, 640, 12, 27291);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, h5);
    			append_dev(div2, t1);
    			append_dev(div2, div1);
    			append_dev(div1, h6);
    			append_dev(div1, t3);
    			append_dev(div1, div0);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div0, null);
    			}

    			append_dev(div2, t4);
    			if (if_block0) if_block0.m(div2, null);
    			append_dev(div2, t5);
    			if (if_block1) if_block1.m(div2, null);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*openArtifactDetail, sortedCompList, $AppData, selectedHero, $Artifacts*/ 268501251) {
    				each_value_4 = /*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*selectedHero*/ ctx[8]].artifacts.primary;
    				validate_each_argument(each_value_4);
    				let i;

    				for (i = 0; i < each_value_4.length; i += 1) {
    					const child_ctx = get_each_context_4$1(ctx, each_value_4, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_4$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div0, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_4.length;
    			}

    			if (/*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*selectedHero*/ ctx[8]].artifacts.secondary.length > 0) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_13(ctx);
    					if_block0.c();
    					if_block0.m(div2, t5);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*selectedHero*/ ctx[8]].artifacts.situational.length > 0) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_12(ctx);
    					if_block1.c();
    					if_block1.m(div2, null);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			destroy_each(each_blocks, detaching);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_11.name,
    		type: "if",
    		source: "(640:11) {#if sortedCompList[$AppData.selectedComp].heroes[selectedHero].artifacts.primary.length > 0 || sortedCompList[$AppData.selectedComp].heroes[selectedHero].artifacts.secondary.length > 0 || sortedCompList[$AppData.selectedComp].heroes[selectedHero].artifacts.situational.length > 0}",
    		ctx
    	});

    	return block;
    }

    // (646:15) {#each sortedCompList[$AppData.selectedComp].heroes[selectedHero].artifacts.primary as artifact}
    function create_each_block_4$1(ctx) {
    	let button;
    	let img;
    	let img_src_value;
    	let img_alt_value;
    	let t0;
    	let p;
    	let t1_value = /*$Artifacts*/ ctx[16][/*artifact*/ ctx[87]].name + "";
    	let t1;
    	let t2;
    	let mounted;
    	let dispose;

    	function click_handler_12() {
    		return /*click_handler_12*/ ctx[59](/*artifact*/ ctx[87]);
    	}

    	const block = {
    		c: function create() {
    			button = element("button");
    			img = element("img");
    			t0 = space();
    			p = element("p");
    			t1 = text$2(t1_value);
    			t2 = space();
    			attr_dev(img, "draggable", "false");
    			if (!src_url_equal(img.src, img_src_value = /*$Artifacts*/ ctx[16][/*artifact*/ ctx[87]].image)) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", img_alt_value = /*$Artifacts*/ ctx[16][/*artifact*/ ctx[87]].name);
    			attr_dev(img, "class", "svelte-dc6tmv");
    			add_location(img, file$7, 647, 17, 27734);
    			attr_dev(p, "class", "svelte-dc6tmv");
    			add_location(p, file$7, 648, 17, 27845);
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "artifactImgContainer svelte-dc6tmv");
    			add_location(button, file$7, 646, 16, 27618);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, img);
    			append_dev(button, t0);
    			append_dev(button, p);
    			append_dev(p, t1);
    			append_dev(button, t2);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", click_handler_12, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty[0] & /*$Artifacts, sortedCompList, $AppData, selectedHero*/ 65795 && !src_url_equal(img.src, img_src_value = /*$Artifacts*/ ctx[16][/*artifact*/ ctx[87]].image)) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if (dirty[0] & /*$Artifacts, sortedCompList, $AppData, selectedHero*/ 65795 && img_alt_value !== (img_alt_value = /*$Artifacts*/ ctx[16][/*artifact*/ ctx[87]].name)) {
    				attr_dev(img, "alt", img_alt_value);
    			}

    			if (dirty[0] & /*$Artifacts, sortedCompList, $AppData, selectedHero*/ 65795 && t1_value !== (t1_value = /*$Artifacts*/ ctx[16][/*artifact*/ ctx[87]].name + "")) set_data_dev(t1, t1_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_4$1.name,
    		type: "each",
    		source: "(646:15) {#each sortedCompList[$AppData.selectedComp].heroes[selectedHero].artifacts.primary as artifact}",
    		ctx
    	});

    	return block;
    }

    // (654:13) {#if sortedCompList[$AppData.selectedComp].heroes[selectedHero].artifacts.secondary.length > 0}
    function create_if_block_13(ctx) {
    	let div1;
    	let h6;
    	let t1;
    	let div0;
    	let each_value_3 = /*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*selectedHero*/ ctx[8]].artifacts.secondary;
    	validate_each_argument(each_value_3);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_3.length; i += 1) {
    		each_blocks[i] = create_each_block_3$1(get_each_context_3$1(ctx, each_value_3, i));
    	}

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			h6 = element("h6");
    			h6.textContent = "Secondary";
    			t1 = space();
    			div0 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(h6, "class", "svelte-dc6tmv");
    			add_location(h6, file$7, 655, 15, 28158);
    			attr_dev(div0, "class", "artifactArea svelte-dc6tmv");
    			add_location(div0, file$7, 656, 15, 28193);
    			attr_dev(div1, "class", "artifactLine secArtifactLine svelte-dc6tmv");
    			add_location(div1, file$7, 654, 14, 28099);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, h6);
    			append_dev(div1, t1);
    			append_dev(div1, div0);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div0, null);
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*openArtifactDetail, sortedCompList, $AppData, selectedHero, $Artifacts*/ 268501251) {
    				each_value_3 = /*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*selectedHero*/ ctx[8]].artifacts.secondary;
    				validate_each_argument(each_value_3);
    				let i;

    				for (i = 0; i < each_value_3.length; i += 1) {
    					const child_ctx = get_each_context_3$1(ctx, each_value_3, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_3$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div0, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_3.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_13.name,
    		type: "if",
    		source: "(654:13) {#if sortedCompList[$AppData.selectedComp].heroes[selectedHero].artifacts.secondary.length > 0}",
    		ctx
    	});

    	return block;
    }

    // (658:16) {#each sortedCompList[$AppData.selectedComp].heroes[selectedHero].artifacts.secondary as artifact}
    function create_each_block_3$1(ctx) {
    	let button;
    	let img;
    	let img_src_value;
    	let img_alt_value;
    	let t0;
    	let p;
    	let t1_value = /*$Artifacts*/ ctx[16][/*artifact*/ ctx[87]].name + "";
    	let t1;
    	let t2;
    	let mounted;
    	let dispose;

    	function click_handler_13() {
    		return /*click_handler_13*/ ctx[60](/*artifact*/ ctx[87]);
    	}

    	const block = {
    		c: function create() {
    			button = element("button");
    			img = element("img");
    			t0 = space();
    			p = element("p");
    			t1 = text$2(t1_value);
    			t2 = space();
    			attr_dev(img, "draggable", "false");
    			if (!src_url_equal(img.src, img_src_value = /*$Artifacts*/ ctx[16][/*artifact*/ ctx[87]].image)) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", img_alt_value = /*$Artifacts*/ ctx[16][/*artifact*/ ctx[87]].name);
    			attr_dev(img, "class", "svelte-dc6tmv");
    			add_location(img, file$7, 659, 18, 28471);
    			attr_dev(p, "class", "svelte-dc6tmv");
    			add_location(p, file$7, 660, 18, 28583);
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "artifactImgContainer svelte-dc6tmv");
    			add_location(button, file$7, 658, 17, 28354);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, img);
    			append_dev(button, t0);
    			append_dev(button, p);
    			append_dev(p, t1);
    			append_dev(button, t2);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", click_handler_13, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty[0] & /*$Artifacts, sortedCompList, $AppData, selectedHero*/ 65795 && !src_url_equal(img.src, img_src_value = /*$Artifacts*/ ctx[16][/*artifact*/ ctx[87]].image)) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if (dirty[0] & /*$Artifacts, sortedCompList, $AppData, selectedHero*/ 65795 && img_alt_value !== (img_alt_value = /*$Artifacts*/ ctx[16][/*artifact*/ ctx[87]].name)) {
    				attr_dev(img, "alt", img_alt_value);
    			}

    			if (dirty[0] & /*$Artifacts, sortedCompList, $AppData, selectedHero*/ 65795 && t1_value !== (t1_value = /*$Artifacts*/ ctx[16][/*artifact*/ ctx[87]].name + "")) set_data_dev(t1, t1_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_3$1.name,
    		type: "each",
    		source: "(658:16) {#each sortedCompList[$AppData.selectedComp].heroes[selectedHero].artifacts.secondary as artifact}",
    		ctx
    	});

    	return block;
    }

    // (667:13) {#if sortedCompList[$AppData.selectedComp].heroes[selectedHero].artifacts.situational.length > 0}
    function create_if_block_12(ctx) {
    	let div1;
    	let h6;
    	let t1;
    	let div0;
    	let each_value_2 = /*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*selectedHero*/ ctx[8]].artifacts.situational;
    	validate_each_argument(each_value_2);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		each_blocks[i] = create_each_block_2$2(get_each_context_2$2(ctx, each_value_2, i));
    	}

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			h6 = element("h6");
    			h6.textContent = "Situational";
    			t1 = space();
    			div0 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(h6, "class", "svelte-dc6tmv");
    			add_location(h6, file$7, 668, 15, 28922);
    			attr_dev(div0, "class", "artifactArea svelte-dc6tmv");
    			add_location(div0, file$7, 669, 15, 28959);
    			attr_dev(div1, "class", "artifactLine sitArtifactLine svelte-dc6tmv");
    			add_location(div1, file$7, 667, 14, 28863);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, h6);
    			append_dev(div1, t1);
    			append_dev(div1, div0);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div0, null);
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*openArtifactDetail, sortedCompList, $AppData, selectedHero, $Artifacts*/ 268501251) {
    				each_value_2 = /*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*selectedHero*/ ctx[8]].artifacts.situational;
    				validate_each_argument(each_value_2);
    				let i;

    				for (i = 0; i < each_value_2.length; i += 1) {
    					const child_ctx = get_each_context_2$2(ctx, each_value_2, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_2$2(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div0, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_2.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_12.name,
    		type: "if",
    		source: "(667:13) {#if sortedCompList[$AppData.selectedComp].heroes[selectedHero].artifacts.situational.length > 0}",
    		ctx
    	});

    	return block;
    }

    // (671:16) {#each sortedCompList[$AppData.selectedComp].heroes[selectedHero].artifacts.situational as artifact}
    function create_each_block_2$2(ctx) {
    	let button;
    	let img;
    	let img_src_value;
    	let img_alt_value;
    	let t0;
    	let p;
    	let t1_value = /*$Artifacts*/ ctx[16][/*artifact*/ ctx[87]].name + "";
    	let t1;
    	let t2;
    	let mounted;
    	let dispose;

    	function click_handler_14() {
    		return /*click_handler_14*/ ctx[61](/*artifact*/ ctx[87]);
    	}

    	const block = {
    		c: function create() {
    			button = element("button");
    			img = element("img");
    			t0 = space();
    			p = element("p");
    			t1 = text$2(t1_value);
    			t2 = space();
    			attr_dev(img, "draggable", "false");
    			if (!src_url_equal(img.src, img_src_value = /*$Artifacts*/ ctx[16][/*artifact*/ ctx[87]].image)) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", img_alt_value = /*$Artifacts*/ ctx[16][/*artifact*/ ctx[87]].name);
    			attr_dev(img, "class", "svelte-dc6tmv");
    			add_location(img, file$7, 672, 18, 29239);
    			attr_dev(p, "class", "svelte-dc6tmv");
    			add_location(p, file$7, 673, 18, 29351);
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "artifactImgContainer svelte-dc6tmv");
    			add_location(button, file$7, 671, 17, 29122);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, img);
    			append_dev(button, t0);
    			append_dev(button, p);
    			append_dev(p, t1);
    			append_dev(button, t2);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", click_handler_14, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty[0] & /*$Artifacts, sortedCompList, $AppData, selectedHero*/ 65795 && !src_url_equal(img.src, img_src_value = /*$Artifacts*/ ctx[16][/*artifact*/ ctx[87]].image)) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if (dirty[0] & /*$Artifacts, sortedCompList, $AppData, selectedHero*/ 65795 && img_alt_value !== (img_alt_value = /*$Artifacts*/ ctx[16][/*artifact*/ ctx[87]].name)) {
    				attr_dev(img, "alt", img_alt_value);
    			}

    			if (dirty[0] & /*$Artifacts, sortedCompList, $AppData, selectedHero*/ 65795 && t1_value !== (t1_value = /*$Artifacts*/ ctx[16][/*artifact*/ ctx[87]].name + "")) set_data_dev(t1, t1_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_2$2.name,
    		type: "each",
    		source: "(671:16) {#each sortedCompList[$AppData.selectedComp].heroes[selectedHero].artifacts.situational as artifact}",
    		ctx
    	});

    	return block;
    }

    // (714:16) {:else}
    function create_else_block_1$2(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			if (!src_url_equal(img.src, img_src_value = "./img/markers/elite.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "elite");
    			attr_dev(img, "class", "svelte-dc6tmv");
    			add_location(img, file$7, 714, 17, 31561);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$2.name,
    		type: "else",
    		source: "(714:16) {:else}",
    		ctx
    	});

    	return block;
    }

    // (712:91) 
    function create_if_block_9(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			if (!src_url_equal(img.src, img_src_value = "./img/markers/legendary.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "legendary");
    			attr_dev(img, "class", "svelte-dc6tmv");
    			add_location(img, file$7, 712, 17, 31462);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_9.name,
    		type: "if",
    		source: "(712:91) ",
    		ctx
    	});

    	return block;
    }

    // (710:91) 
    function create_if_block_8(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			if (!src_url_equal(img.src, img_src_value = "./img/markers/mythic.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "mythic");
    			attr_dev(img, "class", "svelte-dc6tmv");
    			add_location(img, file$7, 710, 17, 31301);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_8.name,
    		type: "if",
    		source: "(710:91) ",
    		ctx
    	});

    	return block;
    }

    // (708:16) {#if sortedCompList[$AppData.selectedComp].heroes[hero].ascendLv >= 6}
    function create_if_block_7(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			if (!src_url_equal(img.src, img_src_value = "./img/markers/ascended.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "ascended");
    			attr_dev(img, "class", "svelte-dc6tmv");
    			add_location(img, file$7, 708, 17, 31136);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7.name,
    		type: "if",
    		source: "(708:16) {#if sortedCompList[$AppData.selectedComp].heroes[hero].ascendLv >= 6}",
    		ctx
    	});

    	return block;
    }

    // (723:16) {:else}
    function create_else_block$5(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			if (!src_url_equal(img.src, img_src_value = "./img/markers/si0.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "si0");
    			attr_dev(img, "class", "svelte-dc6tmv");
    			add_location(img, file$7, 723, 17, 32126);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$5.name,
    		type: "else",
    		source: "(723:16) {:else}",
    		ctx
    	});

    	return block;
    }

    // (721:86) 
    function create_if_block_6(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			if (!src_url_equal(img.src, img_src_value = "./img/markers/si10.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "si10");
    			attr_dev(img, "class", "svelte-dc6tmv");
    			add_location(img, file$7, 721, 17, 32037);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6.name,
    		type: "if",
    		source: "(721:86) ",
    		ctx
    	});

    	return block;
    }

    // (719:86) 
    function create_if_block_5$1(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			if (!src_url_equal(img.src, img_src_value = "./img/markers/si20.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "si20");
    			attr_dev(img, "class", "svelte-dc6tmv");
    			add_location(img, file$7, 719, 17, 31885);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$1.name,
    		type: "if",
    		source: "(719:86) ",
    		ctx
    	});

    	return block;
    }

    // (717:16) {#if sortedCompList[$AppData.selectedComp].heroes[hero].si >= 30}
    function create_if_block_4$3(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			if (!src_url_equal(img.src, img_src_value = "./img/markers/si30.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "si30");
    			attr_dev(img, "class", "svelte-dc6tmv");
    			add_location(img, file$7, 717, 17, 31733);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$3.name,
    		type: "if",
    		source: "(717:16) {#if sortedCompList[$AppData.selectedComp].heroes[hero].si >= 30}",
    		ctx
    	});

    	return block;
    }

    // (728:87) 
    function create_if_block_3$3(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			if (!src_url_equal(img.src, img_src_value = "./img/markers/3f.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "3f");
    			attr_dev(img, "class", "svelte-dc6tmv");
    			toggle_class(img, "moveup", /*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*hero*/ ctx[84]].si < 10);
    			add_location(img, file$7, 728, 17, 32518);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*sortedCompList, $AppData*/ 3) {
    				toggle_class(img, "moveup", /*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*hero*/ ctx[84]].si < 10);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$3.name,
    		type: "if",
    		source: "(728:87) ",
    		ctx
    	});

    	return block;
    }

    // (726:16) {#if sortedCompList[$AppData.selectedComp].heroes[hero].furn >= 9}
    function create_if_block_2$3(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			if (!src_url_equal(img.src, img_src_value = "./img/markers/9f.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "9f");
    			attr_dev(img, "class", "svelte-dc6tmv");
    			toggle_class(img, "moveup", /*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*hero*/ ctx[84]].si < 10);
    			add_location(img, file$7, 726, 17, 32295);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*sortedCompList, $AppData*/ 3) {
    				toggle_class(img, "moveup", /*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*hero*/ ctx[84]].si < 10);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$3.name,
    		type: "if",
    		source: "(726:16) {#if sortedCompList[$AppData.selectedComp].heroes[hero].furn >= 9}",
    		ctx
    	});

    	return block;
    }

    // (701:11) {#each subgroup.heroes as hero}
    function create_each_block_1$3(ctx) {
    	let div2;
    	let a;
    	let div1;
    	let img;
    	let img_src_value;
    	let img_alt_value;
    	let t0;
    	let span;
    	let t1;
    	let div0;
    	let t2;
    	let t3;
    	let t4;
    	let p;
    	let t5_value = /*$HeroData*/ ctx[15].find(func_12).name + "";
    	let t5;
    	let t6;
    	let mounted;
    	let dispose;

    	function func_10(...args) {
    		return /*func_10*/ ctx[63](/*hero*/ ctx[84], ...args);
    	}

    	function func_11(...args) {
    		return /*func_11*/ ctx[64](/*hero*/ ctx[84], ...args);
    	}

    	function click_handler_16() {
    		return /*click_handler_16*/ ctx[65](/*hero*/ ctx[84]);
    	}

    	function select_block_type_12(ctx, dirty) {
    		if (/*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*hero*/ ctx[84]].ascendLv >= 6) return create_if_block_7;
    		if (/*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*hero*/ ctx[84]].ascendLv >= 4) return create_if_block_8;
    		if (/*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*hero*/ ctx[84]].ascendLv >= 2) return create_if_block_9;
    		return create_else_block_1$2;
    	}

    	let current_block_type = select_block_type_12(ctx);
    	let if_block0 = current_block_type(ctx);

    	function select_block_type_13(ctx, dirty) {
    		if (/*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*hero*/ ctx[84]].si >= 30) return create_if_block_4$3;
    		if (/*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*hero*/ ctx[84]].si >= 20) return create_if_block_5$1;
    		if (/*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*hero*/ ctx[84]].si >= 10) return create_if_block_6;
    		return create_else_block$5;
    	}

    	let current_block_type_1 = select_block_type_13(ctx);
    	let if_block1 = current_block_type_1(ctx);

    	function select_block_type_14(ctx, dirty) {
    		if (/*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*hero*/ ctx[84]].furn >= 9) return create_if_block_2$3;
    		if (/*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*hero*/ ctx[84]].furn >= 3) return create_if_block_3$3;
    	}

    	let current_block_type_2 = select_block_type_14(ctx);
    	let if_block2 = current_block_type_2 && current_block_type_2(ctx);

    	function func_12(...args) {
    		return /*func_12*/ ctx[66](/*hero*/ ctx[84], ...args);
    	}

    	function click_handler_17() {
    		return /*click_handler_17*/ ctx[67](/*hero*/ ctx[84]);
    	}

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			a = element("a");
    			div1 = element("div");
    			img = element("img");
    			t0 = space();
    			span = element("span");
    			t1 = space();
    			div0 = element("div");
    			if_block0.c();
    			t2 = space();
    			if_block1.c();
    			t3 = space();
    			if (if_block2) if_block2.c();
    			t4 = space();
    			p = element("p");
    			t5 = text$2(t5_value);
    			t6 = space();
    			attr_dev(img, "draggable", "false");
    			attr_dev(img, "class", "subImg svelte-dc6tmv");
    			if (!src_url_equal(img.src, img_src_value = /*$HeroData*/ ctx[15].find(func_10).portrait)) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", img_alt_value = /*$HeroData*/ ctx[15].find(func_11).name);
    			toggle_class(img, "claimed", /*$AppData*/ ctx[1].MH.List[/*hero*/ ctx[84]].claimed);
    			add_location(img, file$7, 704, 15, 30609);
    			attr_dev(span, "class", "coreMark subCoreMark svelte-dc6tmv");
    			toggle_class(span, "visible", /*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*hero*/ ctx[84]].core);
    			add_location(span, file$7, 705, 15, 30866);
    			attr_dev(div0, "class", "ascMark subAscMark svelte-dc6tmv");
    			add_location(div0, file$7, 706, 15, 30997);
    			attr_dev(div1, "class", "subImgContainer svelte-dc6tmv");
    			add_location(div1, file$7, 703, 14, 30563);
    			attr_dev(p, "class", "svelte-dc6tmv");
    			add_location(p, file$7, 732, 14, 32717);
    			attr_dev(a, "draggable", "false");
    			attr_dev(a, "href", "#heroDetailSection");
    			attr_dev(a, "class", "svelte-dc6tmv");
    			add_location(a, file$7, 702, 13, 30500);
    			attr_dev(div2, "class", "subHeroContainer svelte-dc6tmv");
    			add_location(div2, file$7, 701, 12, 30455);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, a);
    			append_dev(a, div1);
    			append_dev(div1, img);
    			append_dev(div1, t0);
    			append_dev(div1, span);
    			append_dev(div1, t1);
    			append_dev(div1, div0);
    			if_block0.m(div0, null);
    			append_dev(div0, t2);
    			if_block1.m(div0, null);
    			append_dev(div0, t3);
    			if (if_block2) if_block2.m(div0, null);
    			append_dev(a, t4);
    			append_dev(a, p);
    			append_dev(p, t5);
    			append_dev(div2, t6);

    			if (!mounted) {
    				dispose = [
    					listen_dev(img, "click", click_handler_16, false, false, false),
    					listen_dev(p, "click", click_handler_17, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty[0] & /*$HeroData, sortedCompList, $AppData*/ 32771 && !src_url_equal(img.src, img_src_value = /*$HeroData*/ ctx[15].find(func_10).portrait)) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if (dirty[0] & /*$HeroData, sortedCompList, $AppData*/ 32771 && img_alt_value !== (img_alt_value = /*$HeroData*/ ctx[15].find(func_11).name)) {
    				attr_dev(img, "alt", img_alt_value);
    			}

    			if (dirty[0] & /*$AppData, sortedCompList*/ 3) {
    				toggle_class(img, "claimed", /*$AppData*/ ctx[1].MH.List[/*hero*/ ctx[84]].claimed);
    			}

    			if (dirty[0] & /*sortedCompList, $AppData*/ 3) {
    				toggle_class(span, "visible", /*sortedCompList*/ ctx[0][/*$AppData*/ ctx[1].selectedComp].heroes[/*hero*/ ctx[84]].core);
    			}

    			if (current_block_type !== (current_block_type = select_block_type_12(ctx))) {
    				if_block0.d(1);
    				if_block0 = current_block_type(ctx);

    				if (if_block0) {
    					if_block0.c();
    					if_block0.m(div0, t2);
    				}
    			}

    			if (current_block_type_1 !== (current_block_type_1 = select_block_type_13(ctx))) {
    				if_block1.d(1);
    				if_block1 = current_block_type_1(ctx);

    				if (if_block1) {
    					if_block1.c();
    					if_block1.m(div0, t3);
    				}
    			}

    			if (current_block_type_2 === (current_block_type_2 = select_block_type_14(ctx)) && if_block2) {
    				if_block2.p(ctx, dirty);
    			} else {
    				if (if_block2) if_block2.d(1);
    				if_block2 = current_block_type_2 && current_block_type_2(ctx);

    				if (if_block2) {
    					if_block2.c();
    					if_block2.m(div0, null);
    				}
    			}

    			if (dirty[0] & /*$HeroData, sortedCompList, $AppData*/ 32771 && t5_value !== (t5_value = /*$HeroData*/ ctx[15].find(func_12).name + "")) set_data_dev(t5, t5_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			if_block0.d();
    			if_block1.d();

    			if (if_block2) {
    				if_block2.d();
    			}

    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$3.name,
    		type: "each",
    		source: "(701:11) {#each subgroup.heroes as hero}",
    		ctx
    	});

    	return block;
    }

    // (697:9) {#each sortedCompList[$AppData.selectedComp].subs as subgroup}
    function create_each_block$6(ctx) {
    	let div2;
    	let div0;
    	let span;
    	let t0_value = /*subgroup*/ ctx[81].name + "";
    	let t0;
    	let t1;
    	let div1;
    	let t2;
    	let each_value_1 = /*subgroup*/ ctx[81].heroes;
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1$3(get_each_context_1$3(ctx, each_value_1, i));
    	}

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div0 = element("div");
    			span = element("span");
    			t0 = text$2(t0_value);
    			t1 = space();
    			div1 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t2 = space();
    			attr_dev(span, "class", "svelte-dc6tmv");
    			add_location(span, file$7, 698, 37, 30322);
    			attr_dev(div0, "class", "subGroupTitle svelte-dc6tmv");
    			add_location(div0, file$7, 698, 10, 30295);
    			attr_dev(div1, "class", "subGroupMembers svelte-dc6tmv");
    			add_location(div1, file$7, 699, 10, 30368);
    			attr_dev(div2, "class", "subGroup");
    			add_location(div2, file$7, 697, 9, 30261);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			append_dev(div0, span);
    			append_dev(span, t0);
    			append_dev(div2, t1);
    			append_dev(div2, div1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div1, null);
    			}

    			append_dev(div2, t2);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*sortedCompList, $AppData*/ 3 && t0_value !== (t0_value = /*subgroup*/ ctx[81].name + "")) set_data_dev(t0, t0_value);

    			if (dirty[0] & /*selectedHero, sortedCompList, $AppData, openHero, $HeroData*/ 33043) {
    				each_value_1 = /*subgroup*/ ctx[81].heroes;
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$3(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_1$3(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div1, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_1.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$6.name,
    		type: "each",
    		source: "(697:9) {#each sortedCompList[$AppData.selectedComp].subs as subgroup}",
    		ctx
    	});

    	return block;
    }

    // (758:2) {#if showowConfirm}
    function create_if_block$6(ctx) {
    	let div4;
    	let div3;
    	let div0;
    	let h4;
    	let t1;
    	let div1;
    	let span;
    	let t2;
    	let t3;
    	let div2;
    	let button0;
    	let t5;
    	let button1;
    	let t7;
    	let button2;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div4 = element("div");
    			div3 = element("div");
    			div0 = element("div");
    			h4 = element("h4");
    			h4.textContent = "Previous Comp Found";
    			t1 = space();
    			div1 = element("div");
    			span = element("span");
    			t2 = text$2(/*owText*/ ctx[11]);
    			t3 = space();
    			div2 = element("div");
    			button0 = element("button");
    			button0.textContent = "Update";
    			t5 = space();
    			button1 = element("button");
    			button1.textContent = "New";
    			t7 = space();
    			button2 = element("button");
    			button2.textContent = "Cancel";
    			attr_dev(h4, "class", "svelte-dc6tmv");
    			add_location(h4, file$7, 761, 6, 33523);
    			attr_dev(div0, "class", "owTitle svelte-dc6tmv");
    			add_location(div0, file$7, 760, 5, 33494);
    			add_location(span, file$7, 764, 6, 33599);
    			attr_dev(div1, "class", "owBody svelte-dc6tmv");
    			add_location(div1, file$7, 763, 5, 33571);
    			attr_dev(button0, "type", "button");
    			attr_dev(button0, "class", "owFooterButton owUpdate svelte-dc6tmv");
    			add_location(button0, file$7, 767, 6, 33670);
    			attr_dev(button1, "type", "button");
    			attr_dev(button1, "class", "owFooterButton owNew svelte-dc6tmv");
    			add_location(button1, file$7, 768, 6, 33778);
    			attr_dev(button2, "type", "button");
    			attr_dev(button2, "class", "owFooterButton owCancel svelte-dc6tmv");
    			add_location(button2, file$7, 769, 6, 33877);
    			attr_dev(div2, "class", "owFooter svelte-dc6tmv");
    			add_location(div2, file$7, 766, 5, 33640);
    			attr_dev(div3, "class", "owConfirmWindow svelte-dc6tmv");
    			add_location(div3, file$7, 759, 4, 33458);
    			attr_dev(div4, "class", "owBackground svelte-dc6tmv");
    			add_location(div4, file$7, 758, 3, 33426);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div4, anchor);
    			append_dev(div4, div3);
    			append_dev(div3, div0);
    			append_dev(div0, h4);
    			append_dev(div3, t1);
    			append_dev(div3, div1);
    			append_dev(div1, span);
    			append_dev(span, t2);
    			append_dev(div3, t3);
    			append_dev(div3, div2);
    			append_dev(div2, button0);
    			append_dev(div2, t5);
    			append_dev(div2, button1);
    			append_dev(div2, t7);
    			append_dev(div2, button2);

    			if (!mounted) {
    				dispose = [
    					listen_dev(
    						button0,
    						"click",
    						function () {
    							if (is_function(/*owPromise*/ ctx[12]('update'))) /*owPromise*/ ctx[12]('update').apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					),
    					listen_dev(
    						button1,
    						"click",
    						function () {
    							if (is_function(/*owPromise*/ ctx[12]('new'))) /*owPromise*/ ctx[12]('new').apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					),
    					listen_dev(
    						button2,
    						"click",
    						function () {
    							if (is_function(/*owPromise*/ ctx[12]('cancel'))) /*owPromise*/ ctx[12]('cancel').apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty[0] & /*owText*/ 2048) set_data_dev(t2, /*owText*/ ctx[11]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div4);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$6.name,
    		type: "if",
    		source: "(758:2) {#if showowConfirm}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$a(ctx) {
    	let div8;
    	let section0;
    	let div1;
    	let input;
    	let t0;
    	let div0;
    	let t1;
    	let div2;
    	let current_block_type_index;
    	let if_block0;
    	let t2;
    	let div5;
    	let div4;
    	let button0;
    	let div3;
    	let img;
    	let img_src_value;
    	let t3;
    	let span0;
    	let t5;
    	let button1;
    	let span1;
    	let t7;
    	let span2;
    	let t9;
    	let section1;
    	let div6;
    	let current_block_type_index_1;
    	let if_block1;
    	let t10;
    	let section2;
    	let div7;
    	let span3;
    	let t12;
    	let section3;
    	let current;
    	let mounted;
    	let dispose;
    	let each_value_9 = /*searchSuggestions*/ ctx[13];
    	validate_each_argument(each_value_9);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_9.length; i += 1) {
    		each_blocks[i] = create_each_block_9(get_each_context_9(ctx, each_value_9, i));
    	}

    	const if_block_creators = [create_if_block_38, create_else_block_11];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*sortedCompList*/ ctx[0].length === 0) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	const if_block_creators_1 = [create_if_block_1$3, create_else_block_9];
    	const if_blocks_1 = [];

    	function select_block_type_2(ctx, dirty) {
    		if (/*$AppData*/ ctx[1].selectedComp !== null) return 0;
    		return 1;
    	}

    	current_block_type_index_1 = select_block_type_2(ctx);
    	if_block1 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
    	let if_block2 = /*showowConfirm*/ ctx[10] && create_if_block$6(ctx);

    	const block = {
    		c: function create() {
    			div8 = element("div");
    			section0 = element("section");
    			div1 = element("div");
    			input = element("input");
    			t0 = space();
    			div0 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t1 = space();
    			div2 = element("div");
    			if_block0.c();
    			t2 = space();
    			div5 = element("div");
    			div4 = element("div");
    			button0 = element("button");
    			div3 = element("div");
    			img = element("img");
    			t3 = space();
    			span0 = element("span");
    			span0.textContent = "Import";
    			t5 = space();
    			button1 = element("button");
    			span1 = element("span");
    			span1.textContent = "+";
    			t7 = space();
    			span2 = element("span");
    			span2.textContent = "New";
    			t9 = space();
    			section1 = element("section");
    			div6 = element("div");
    			if_block1.c();
    			t10 = space();
    			section2 = element("section");
    			div7 = element("div");
    			span3 = element("span");
    			span3.textContent = "Comp Data Copied to Clipboard";
    			t12 = space();
    			section3 = element("section");
    			if (if_block2) if_block2.c();
    			attr_dev(input, "class", "searchBox svelte-dc6tmv");
    			attr_dev(input, "type", "search");
    			attr_dev(input, "placeholder", "Filter name or tags");
    			add_location(input, file$7, 406, 3, 14379);
    			attr_dev(div0, "class", "suggestions svelte-dc6tmv");
    			toggle_class(div0, "open", /*openSuggestions*/ ctx[6]);
    			add_location(div0, file$7, 415, 3, 14662);
    			attr_dev(div1, "class", "searchArea svelte-dc6tmv");
    			add_location(div1, file$7, 405, 2, 14350);
    			attr_dev(div2, "class", "compScroller svelte-dc6tmv");
    			add_location(div2, file$7, 421, 2, 14931);
    			attr_dev(img, "draggable", "false");
    			attr_dev(img, "class", "importButtonIcon svelte-dc6tmv");
    			if (!src_url_equal(img.src, img_src_value = "./img/utility/import.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "Import");
    			add_location(img, file$7, 456, 6, 15971);
    			attr_dev(div3, "class", "imgContainer svelte-dc6tmv");
    			add_location(div3, file$7, 455, 5, 15937);
    			attr_dev(span0, "class", "svelte-dc6tmv");
    			add_location(span0, file$7, 458, 5, 16083);
    			attr_dev(button0, "type", "button");
    			attr_dev(button0, "class", "newCompOptionButton svelte-dc6tmv");
    			add_location(button0, file$7, 454, 4, 15845);
    			attr_dev(span1, "class", "plusIcon svelte-dc6tmv");
    			add_location(span1, file$7, 461, 5, 16212);
    			attr_dev(span2, "class", "svelte-dc6tmv");
    			add_location(span2, file$7, 462, 5, 16250);
    			attr_dev(button1, "type", "button");
    			attr_dev(button1, "class", "newCompOptionButton svelte-dc6tmv");
    			add_location(button1, file$7, 460, 4, 16123);
    			attr_dev(div4, "class", "newCompOptionsArea svelte-dc6tmv");
    			add_location(div4, file$7, 453, 3, 15807);
    			attr_dev(div5, "class", "addButtonArea svelte-dc6tmv");
    			add_location(div5, file$7, 452, 2, 15775);
    			attr_dev(section0, "class", "sect1 svelte-dc6tmv");
    			add_location(section0, file$7, 404, 1, 14323);
    			attr_dev(div6, "class", "compDetails svelte-dc6tmv");
    			toggle_class(div6, "open", /*openDetail*/ ctx[2]);
    			add_location(div6, file$7, 468, 2, 16345);
    			attr_dev(section1, "class", "sect2 svelte-dc6tmv");
    			add_location(section1, file$7, 467, 1, 16318);
    			add_location(span3, file$7, 754, 62, 33281);
    			attr_dev(div7, "class", "copyConfirm svelte-dc6tmv");
    			toggle_class(div7, "visible", /*copyConfirmVisible*/ ctx[9]);
    			add_location(div7, file$7, 754, 2, 33221);
    			attr_dev(section2, "class", "sect3 svelte-dc6tmv");
    			add_location(section2, file$7, 753, 1, 33194);
    			attr_dev(section3, "class", "sect4 svelte-dc6tmv");
    			toggle_class(section3, "visible", /*showowConfirm*/ ctx[10]);
    			add_location(section3, file$7, 756, 1, 33345);
    			attr_dev(div8, "class", "CompContainer svelte-dc6tmv");
    			add_location(div8, file$7, 403, 0, 14293);
    		},
    		l: function claim(nodes) {
    			throw new Error_1$4("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div8, anchor);
    			append_dev(div8, section0);
    			append_dev(section0, div1);
    			append_dev(div1, input);
    			set_input_value(input, /*$AppData*/ ctx[1].compSearchStr);
    			append_dev(div1, t0);
    			append_dev(div1, div0);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div0, null);
    			}

    			append_dev(section0, t1);
    			append_dev(section0, div2);
    			if_blocks[current_block_type_index].m(div2, null);
    			append_dev(section0, t2);
    			append_dev(section0, div5);
    			append_dev(div5, div4);
    			append_dev(div4, button0);
    			append_dev(button0, div3);
    			append_dev(div3, img);
    			append_dev(button0, t3);
    			append_dev(button0, span0);
    			append_dev(div4, t5);
    			append_dev(div4, button1);
    			append_dev(button1, span1);
    			append_dev(button1, t7);
    			append_dev(button1, span2);
    			append_dev(div8, t9);
    			append_dev(div8, section1);
    			append_dev(section1, div6);
    			if_blocks_1[current_block_type_index_1].m(div6, null);
    			append_dev(div8, t10);
    			append_dev(div8, section2);
    			append_dev(section2, div7);
    			append_dev(div7, span3);
    			append_dev(div8, t12);
    			append_dev(div8, section3);
    			if (if_block2) if_block2.m(section3, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(window_1$1, "popstate", /*handlePopState*/ ctx[29], false, false, false),
    					listen_dev(input, "input", /*input_input_handler*/ ctx[36]),
    					listen_dev(input, "keyup", /*updateSearch*/ ctx[31], false, false, false),
    					listen_dev(input, "search", /*updateSearch*/ ctx[31], false, false, false),
    					listen_dev(input, "focus", /*focus_handler*/ ctx[37], false, false, false),
    					listen_dev(input, "blur", /*blur_handler*/ ctx[38], false, false, false),
    					listen_dev(button0, "click", /*handleImportButtonClick*/ ctx[23], false, false, false),
    					listen_dev(button1, "click", /*handleNewButtonClick*/ ctx[21], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*$AppData*/ 2) {
    				set_input_value(input, /*$AppData*/ ctx[1].compSearchStr);
    			}

    			if (dirty[0] & /*searchSuggestions*/ 8192 | dirty[1] & /*takeSuggestion*/ 2) {
    				each_value_9 = /*searchSuggestions*/ ctx[13];
    				validate_each_argument(each_value_9);
    				let i;

    				for (i = 0; i < each_value_9.length; i += 1) {
    					const child_ctx = get_each_context_9(ctx, each_value_9, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_9(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div0, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_9.length;
    			}

    			if (dirty[0] & /*openSuggestions*/ 64) {
    				toggle_class(div0, "open", /*openSuggestions*/ ctx[6]);
    			}

    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block0 = if_blocks[current_block_type_index];

    				if (!if_block0) {
    					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block0.c();
    				} else {
    					if_block0.p(ctx, dirty);
    				}

    				transition_in(if_block0, 1);
    				if_block0.m(div2, null);
    			}

    			let previous_block_index_1 = current_block_type_index_1;
    			current_block_type_index_1 = select_block_type_2(ctx);

    			if (current_block_type_index_1 === previous_block_index_1) {
    				if_blocks_1[current_block_type_index_1].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks_1[previous_block_index_1], 1, 1, () => {
    					if_blocks_1[previous_block_index_1] = null;
    				});

    				check_outros();
    				if_block1 = if_blocks_1[current_block_type_index_1];

    				if (!if_block1) {
    					if_block1 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
    					if_block1.c();
    				} else {
    					if_block1.p(ctx, dirty);
    				}

    				transition_in(if_block1, 1);
    				if_block1.m(div6, null);
    			}

    			if (dirty[0] & /*openDetail*/ 4) {
    				toggle_class(div6, "open", /*openDetail*/ ctx[2]);
    			}

    			if (dirty[0] & /*copyConfirmVisible*/ 512) {
    				toggle_class(div7, "visible", /*copyConfirmVisible*/ ctx[9]);
    			}

    			if (/*showowConfirm*/ ctx[10]) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block$6(ctx);
    					if_block2.c();
    					if_block2.m(section3, null);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}

    			if (dirty[0] & /*showowConfirm*/ 1024) {
    				toggle_class(section3, "visible", /*showowConfirm*/ ctx[10]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div8);
    			destroy_each(each_blocks, detaching);
    			if_blocks[current_block_type_index].d();
    			if_blocks_1[current_block_type_index_1].d();
    			if (if_block2) if_block2.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$a.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function sortByStars(a, b) {
    	// if(a.starred && !b.starred) {
    	// 	return -1;
    	// } else if(!a.starred && b.starred) {
    	// 	return 1;
    	// } else {
    	// 	return 0;
    	// }
    	return 0;
    }

    function instance$a($$self, $$props, $$invalidate) {
    	let sortedCompList;
    	let selectedUUID;
    	let highlightComp;
    	let searchSuggestions;
    	let editorWidth;
    	let editorHeight;
    	let $AppData;
    	let $HeroData;
    	let $Artifacts;
    	validate_store(AppData$1, 'AppData');
    	component_subscribe($$self, AppData$1, $$value => $$invalidate(1, $AppData = $$value));
    	validate_store(HeroData, 'HeroData');
    	component_subscribe($$self, HeroData, $$value => $$invalidate(15, $HeroData = $$value));
    	validate_store(Artifacts, 'Artifacts');
    	component_subscribe($$self, Artifacts, $$value => $$invalidate(16, $Artifacts = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Comps', slots, []);
    	let { isMobile = false } = $$props;

    	const months = [
    		"Jan",
    		"Feb",
    		"Mar",
    		"Apr",
    		"May",
    		"Jun",
    		"Jul",
    		"Aug",
    		"Sep",
    		"Oct",
    		"Nov",
    		"Dec"
    	];

    	const jsurl = JSONURL('lzma'); // json-url compressor
    	const dispatch = createEventDispatcher();
    	const { open } = getContext('simple-modal');

    	const md = new markdownIt({
    			html: false,
    			linkify: false,
    			typographer: true,
    			breaks: true
    		});

    	md.use(markdownItEmoji);
    	let openDetail = false;
    	let openDesc = true;
    	let openHero = false;
    	let openSubs = false;
    	let openSuggestions = false;
    	let selectedLine = 0;
    	let selectedHero = '';
    	let copyConfirmVisible = false;
    	let showowConfirm = false;
    	let owText = '';
    	let owPromise;

    	function makeSortedCompList() {
    		let compList = [...$AppData.Comps.sort(sortByStars)];

    		if ($AppData.compSearchStr !== '') {
    			// array of search terms (separate by , trim white space, and make lower case)
    			let searchTerms = $AppData.compSearchStr.split(',').map(e => e.trim().toLowerCase());

    			compList = compList.filter(comp => {
    				// array of tags (trim white space and make lower case)
    				const tags = comp.tags.map(i => i.trim().toLowerCase());

    				for (const term of searchTerms) {
    					if (term.charAt(0) === '-') {
    						const sterm = term.slice(1, term.length);
    						if (comp.name.toLowerCase().includes(sterm) || tags.some(e => e.toLowerCase().includes(sterm))) return false;
    					} else {
    						if (!comp.name.toLowerCase().includes(term) && !tags.some(e => e.toLowerCase().includes(term))) return false;
    					}
    				}

    				return true;
    			});
    		}

    		// if comp was clicked in Recommendations, selectedUUID will get set
    		if ($AppData.selectedUUID !== null) {
    			// try to find the comp
    			set_store_value(AppData$1, $AppData.selectedComp = compList.findIndex(e => e.uuid === $AppData.selectedUUID), $AppData);

    			// reset selectedUUID regardless of whether it can be found
    			set_store_value(AppData$1, $AppData.selectedUUID = null, $AppData);
    		}

    		// if we couldn't find the comp, set selectedComp to null
    		if ($AppData.selectedComp < 0 || $AppData.selectedComp > compList.length - 1) set_store_value(AppData$1, $AppData.selectedComp = null, $AppData);

    		$$invalidate(13, searchSuggestions = makeSearchSuggestions());
    		return compList;
    	}

    	function makeSearchSuggestions() {
    		let suggestions = [];

    		// first make a list of all tags and comp names
    		for (const comp of $AppData.Comps) {
    			suggestions.push(comp.name);
    			suggestions = [...suggestions, ...comp.tags];
    		}

    		// remove duplicate suggestions
    		suggestions = [...new Set(suggestions)];

    		// filter suggestions for stuff matching the last search term (split by ,)
    		const searchTerms = $AppData.compSearchStr.split(',').map(e => e.trim());

    		let lastTerm = searchTerms[searchTerms.length - 1].toLowerCase();
    		if (lastTerm.charAt(0) === '-') lastTerm = lastTerm.slice(1, lastTerm.length);
    		suggestions = suggestions.filter(e => e.toLowerCase().includes(lastTerm));

    		// if there's only 1 suggestion, return nothing because the filter should already be applied
    		if (suggestions.length === 1) return [];

    		// take only the first 10 suggestions
    		suggestions = suggestions.slice(0, 10);

    		// finally, sort suggestions before returning
    		suggestions.sort();

    		return suggestions;
    	}

    	function handleCompCardClick(compIdx) {
    		const queryString = window.location.search;
    		const urlParams = new URLSearchParams(queryString);

    		if (urlParams.has('comp')) {
    			history.replaceState({ view: $AppData.activeView, comp: true }, $AppData.activeView, `?view=${$AppData.activeView}&comp=true`);
    		} else {
    			history.pushState({ view: $AppData.activeView, comp: true }, $AppData.activeView, `?view=${$AppData.activeView}&comp=true`);
    		}

    		set_store_value(AppData$1, $AppData.selectedComp = compIdx, $AppData);
    		$$invalidate(2, openDetail = true);
    		$$invalidate(7, selectedLine = 0);
    		$$invalidate(8, selectedHero = '');
    		dispatch('saveData');
    	}

    	function renderMarkdown(mdText) {
    		return md.render(mdText);
    	}

    	function handleEditButtonClick(compIdx) {
    		open(
    			CompEditor,
    			{
    				compID: sortedCompList[compIdx].uuid,
    				onSuccess: uuid => handleCompChangeSuccess(uuid, 'edit'),
    				isMobile
    			},
    			{
    				closeButton: ModalCloseButton,
    				styleContent: {
    					background: '#F0F0F2',
    					padding: 0,
    					borderRadius: '10px',
    					maxHeight: editorHeight
    				},
    				styleWindow: { width: editorWidth, maxWidth: '1200px' },
    				closeOnOuterClick: false
    			}
    		);
    	}

    	function handleNewButtonClick() {
    		open(
    			CompEditor,
    			{
    				onSuccess: uuid => {
    					set_store_value(AppData$1, $AppData.compSearchStr = '', $AppData);
    					handleCompChangeSuccess(uuid, 'new');
    				},
    				isMobile
    			},
    			{
    				closeButton: ModalCloseButton,
    				closeOnOuterClick: false,
    				styleContent: {
    					background: '#F0F0F2',
    					padding: 0,
    					borderRadius: '10px',
    					maxHeight: editorHeight
    				},
    				styleWindow: { width: editorWidth, maxWidth: '1200px' }
    			}
    		);
    	}

    	async function handleCompChangeSuccess(uuid, type) {
    		$$invalidate(0, sortedCompList = makeSortedCompList());
    		$$invalidate(13, searchSuggestions = makeSearchSuggestions());
    		$$invalidate(14, highlightComp = sortedCompList.findIndex(e => e.uuid === uuid));
    		$$invalidate(8, selectedHero = '');
    		$$invalidate(7, selectedLine = 0);
    		if (type === 'new') set_store_value(AppData$1, $AppData.selectedComp = highlightComp, $AppData);
    		await tick();
    		document.getElementById(`comp${highlightComp}`).scrollIntoView();
    		setTimeout(() => $$invalidate(14, highlightComp = null), 2000);
    		dispatch('saveData');
    	}

    	function handleDeleteButtonClick(compIdx) {
    		open(
    			Confirm,
    			{
    				onConfirm: handleDelComp,
    				confirmData: compIdx,
    				message: `Delete comp named ${sortedCompList[compIdx].name}?`
    			},
    			{
    				closeButton: false,
    				closeOnEsc: true,
    				closeOnOuterClick: true,
    				styleWindow: { width: 'fit-content' },
    				styleContent: { width: 'fit-content' }
    			}
    		);
    	}

    	function handleImportButtonClick() {
    		open(
    			ImportData,
    			{
    				dataHandler: handleCompImport,
    				saveAppData: () => dispatch('saveData'),
    				title: 'Paste Composition:'
    			},
    			{
    				closeButton: ModalCloseButton,
    				styleContent: {
    					background: '#F0F0F2',
    					padding: 0,
    					borderRadius: '10px',
    					maxHeight: editorHeight
    				},
    				closeOnOuterClick: false
    			}
    		);
    	}

    	async function handleExportButtonClick(compIdx) {
    		const output = await jsurl.compress(JSON.stringify(sortedCompList[compIdx]));

    		navigator.clipboard.writeText(output).then(
    			() => {
    				$$invalidate(9, copyConfirmVisible = true);
    				setTimeout(() => $$invalidate(9, copyConfirmVisible = false), 1000);
    			},
    			() => {
    				throw new Error("Error copying Comp data to clipboard.");
    			}
    		);
    	}

    	function handleStarClick(event, comp) {
    		comp.starred = !comp.starred;
    		event.stopPropagation();
    		$$invalidate(0, sortedCompList = makeSortedCompList());
    		dispatch('saveData');
    	}

    	function handleDelComp(idx) {
    		const delUUID = sortedCompList[idx].uuid;

    		const selUUID = $AppData.selectedComp !== null
    		? sortedCompList[$AppData.selectedComp].uuid
    		: null;

    		set_store_value(AppData$1, $AppData.Comps = $AppData.Comps.filter(e => e.uuid !== delUUID), $AppData);

    		if ($AppData.selectedComp === idx) {
    			set_store_value(AppData$1, $AppData.selectedComp = null, $AppData);
    			$$invalidate(8, selectedHero = '');
    			$$invalidate(7, selectedLine = 0);
    			$$invalidate(2, openDetail = false);
    		} else if ($AppData.selectedComp > idx) {
    			set_store_value(
    				AppData$1,
    				$AppData.selectedComp = selUUID !== null
    				? sortedCompList.findIndex(e => e.uuid === selUUID)
    				: null,
    				$AppData
    			);

    			if ($AppData.selectedComp === -1) set_store_value(AppData$1, $AppData.selectedComp = null, $AppData);
    		}

    		$$invalidate(0, sortedCompList = makeSortedCompList());
    		dispatch('saveData');
    	}

    	async function handleCompImport(compressedData) {
    		let data;
    		let statusMsg = '';

    		// unpack and decompress data
    		try {
    			const json = await jsurl.decompress(compressedData);
    			data = JSON.parse(json);
    		} catch(e) {
    			// there was a problem unpacking the data, return an error
    			console.log(e);

    			return {
    				retCode: 1,
    				message: 'Failed to parse data'
    			};
    		}

    		if ('lastUpdate' in data) data.lastUpdate = new Date(data.lastUpdate);

    		// run consistency checks on data
    		const returnObj = await validateComp(data);

    		if (returnObj.retCode !== 0) {
    			// validation error occurred
    			return {
    				retCode: returnObj.retCode,
    				message: returnObj.message
    			};
    		} else {
    			// message should contain a clean comp object now
    			if ($AppData.Comps.some(e => e.uuid === returnObj.message.uuid)) {
    				// comp exists, check if user wants to update it
    				const idx = $AppData.Comps.findIndex(e => e.uuid === returnObj.message.uuid);

    				const response = await openOverwriteConfirm(idx);

    				switch (response) {
    					case 'update':
    						returnObj.message.starred = $AppData.Comps[idx].starred;
    						set_store_value(AppData$1, $AppData.Comps[idx] = returnObj.message, $AppData);
    						statusMsg = 'Comp updated successfully';
    						break;
    					case 'new':
    						returnObj.message.uuid = v4();
    						returnObj.message.starred = false;
    						set_store_value(AppData$1, $AppData.Comps = [...$AppData.Comps, returnObj.message], $AppData);
    						statusMsg = 'Data import successful';
    						break;
    					case 'cancel':
    						return {
    							retCode: 0,
    							message: 'Data import cancelled'
    						};
    					default:
    						throw new Error(`Invalid response received from overwrite dialog: ${response}`);
    				}
    			} else {
    				// comp not in list yet, add it to the list
    				returnObj.message.starred = false;

    				set_store_value(AppData$1, $AppData.Comps = [...$AppData.Comps, returnObj.message], $AppData);
    				statusMsg = 'Data import successful';
    			}

    			set_store_value(AppData$1, $AppData.compSearchStr = '', $AppData); // reset any filters
    			$$invalidate(0, sortedCompList = makeSortedCompList());
    			$$invalidate(14, highlightComp = sortedCompList.findIndex(e => e.uuid === returnObj.message.uuid));
    			set_store_value(AppData$1, $AppData.selectedComp = highlightComp, $AppData);
    			$$invalidate(8, selectedHero = '');
    			$$invalidate(7, selectedLine = 0);
    			await tick();
    			document.getElementById(`comp${highlightComp}`).scrollIntoView();
    			setTimeout(() => $$invalidate(14, highlightComp = null), 3000);
    			dispatch('saveData');
    			return { retCode: 0, message: statusMsg };
    		}
    	}

    	async function openOverwriteConfirm(index) {
    		let reply = '';
    		$$invalidate(11, owText = `Update comp named "${$AppData.Comps[index].name}"?`);
    		$$invalidate(10, showowConfirm = true);

    		let promise = new Promise(resolve => {
    				$$invalidate(12, owPromise = resolve);
    			});

    		await promise.then(result => {
    			reply = result;
    		});

    		$$invalidate(10, showowConfirm = false);
    		$$invalidate(11, owText = '');
    		return reply;
    	}

    	function handleCloseButtonClick() {
    		$$invalidate(2, openDetail = false);
    		history.back();
    	}

    	function handleHeroDetailClick(heroID) {
    		open(HeroDetail, { heroID }, {
    			closeButton: ModalCloseButton,
    			styleContent: {
    				background: '#F0F0F2',
    				padding: 0,
    				borderRadius: '10px',
    				maxHeight: editorHeight
    			}
    		});
    	}

    	function openArtifactDetail(artifactID) {
    		open(ArtifactDetail, { artifactID }, {
    			closeButton: ModalCloseButton,
    			styleContent: {
    				background: '#F0F0F2',
    				padding: 0,
    				borderRadius: '10px',
    				maxHeight: editorHeight
    			}
    		});
    	}

    	function handlePopState(event) {
    		const state = event.state;

    		if (state !== null) {
    			if (!state.comp) $$invalidate(2, openDetail = false);
    			$$invalidate(10, showowConfirm = false);
    			$$invalidate(11, owText = '');
    		}
    	}

    	async function handleCardSort(event) {
    		// catch if a user dragged something we weren't expecting and exit
    		if (!Array.isArray(event.detail)) return 0;

    		// don't allow re-ordering when comp list is filtered (could accidently delete comps)
    		if ($AppData.compSearchStr !== '') return 0;

    		// don't allow comp overwrite if there are missing comps
    		if (event.detail.length !== $AppData.Comps.length) {
    			throw new Error(`Received invalid Comps array, must be same length as original. ${event.detail}`);
    		}

    		let allCompsValid = true;

    		for (const comp of event.detail) {
    			let returnObj = await validateComp(comp);
    			allCompsValid = allCompsValid && returnObj.retCode === 0;
    		}

    		if (allCompsValid) {
    			// one last check that all comps are present
    			for (const comp of $AppData.Comps) {
    				if (!event.detail.some(e => e.uuid === comp.uuid)) {
    					throw new Error(`Received invalid Comps array, missing comp with uuid: ${comp.uuid}`);
    				}
    			}

    			set_store_value(AppData$1, $AppData.Comps = event.detail, $AppData);
    			$$invalidate(0, sortedCompList = makeSortedCompList());
    			set_store_value(AppData$1, $AppData.selectedComp = sortedCompList.findIndex(e => e.uuid === selectedUUID), $AppData);
    			if ($AppData.selectedComp === -1) set_store_value(AppData$1, $AppData.selectedComp = null, $AppData);
    			dispatch('saveData');
    		}
    	}

    	function updateSearch() {
    		$$invalidate(0, sortedCompList = makeSortedCompList());

    		if (sortedCompList.some(e => e.uuid === selectedUUID)) {
    			set_store_value(AppData$1, $AppData.selectedComp = sortedCompList.findIndex(e => e.uuid === selectedUUID), $AppData);
    		} else {
    			set_store_value(AppData$1, $AppData.selectedComp = null, $AppData);
    		}

    		$$invalidate(13, searchSuggestions = makeSearchSuggestions());
    		$$invalidate(6, openSuggestions = true);
    		dispatch('saveData');
    	}

    	function takeSuggestion(suggestion) {
    		let searchTerms = $AppData.compSearchStr.split(',').map(e => e.trim());

    		if (searchTerms[searchTerms.length - 1].charAt(0) === '-') {
    			searchTerms[searchTerms.length - 1] = '-' + suggestion;
    		} else {
    			searchTerms[searchTerms.length - 1] = suggestion;
    		}

    		set_store_value(AppData$1, $AppData.compSearchStr = searchTerms.join(', '), $AppData);
    		updateSearch();
    		$$invalidate(6, openSuggestions = false);
    	}

    	const writable_props = ['isMobile'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$1.warn(`<Comps> was created with unknown prop '${key}'`);
    	});

    	const func = (hero, e) => e.id === hero;
    	const func_1 = (hero, e) => e.id === hero;

    	function input_input_handler() {
    		$AppData.compSearchStr = this.value;
    		AppData$1.set($AppData);
    	}

    	const focus_handler = () => $$invalidate(6, openSuggestions = true);
    	const blur_handler = () => $$invalidate(6, openSuggestions = false);
    	const click_handler = suggestion => takeSuggestion(suggestion);
    	const click_handler_1 = () => handleExportButtonClick($AppData.selectedComp);
    	const click_handler_2 = () => handleEditButtonClick($AppData.selectedComp);
    	const click_handler_3 = () => handleDeleteButtonClick($AppData.selectedComp);
    	const click_handler_4 = i => $$invalidate(7, selectedLine = i);
    	const func_2 = (hero, e) => e.id === hero;
    	const func_3 = (hero, e) => e.id === hero;

    	const click_handler_5 = hero => {
    		$$invalidate(8, selectedHero = hero);
    		$$invalidate(4, openHero = true);
    	};

    	const func_4 = (hero, e) => e.id === hero;

    	const click_handler_6 = hero => {
    		$$invalidate(8, selectedHero = hero);
    		$$invalidate(4, openHero = true);
    	};

    	const func_5 = (hero, e) => e.id === hero;
    	const func_6 = (hero, e) => e.id === hero;

    	const click_handler_7 = hero => {
    		$$invalidate(8, selectedHero = hero);
    		$$invalidate(4, openHero = true);
    	};

    	const func_7 = (hero, e) => e.id === hero;

    	const click_handler_8 = hero => {
    		$$invalidate(8, selectedHero = hero);
    		$$invalidate(4, openHero = true);
    	};

    	const click_handler_9 = () => $$invalidate(3, openDesc = !openDesc);
    	const click_handler_10 = () => $$invalidate(4, openHero = !openHero);
    	const func_8 = e => e.id === selectedHero;
    	const click_handler_11 = () => handleHeroDetailClick(selectedHero);
    	const func_9 = e => e.id === selectedHero;
    	const click_handler_12 = artifact => openArtifactDetail(artifact);
    	const click_handler_13 = artifact => openArtifactDetail(artifact);
    	const click_handler_14 = artifact => openArtifactDetail(artifact);
    	const click_handler_15 = () => $$invalidate(5, openSubs = !openSubs);
    	const func_10 = (hero, e) => e.id === hero;
    	const func_11 = (hero, e) => e.id === hero;

    	const click_handler_16 = hero => {
    		$$invalidate(8, selectedHero = hero);
    		$$invalidate(4, openHero = true);
    	};

    	const func_12 = (hero, e) => e.id === hero;

    	const click_handler_17 = hero => {
    		$$invalidate(8, selectedHero = hero);
    		$$invalidate(4, openHero = true);
    	};

    	$$self.$$set = $$props => {
    		if ('isMobile' in $$props) $$invalidate(33, isMobile = $$props.isMobile);
    	};

    	$$self.$capture_state = () => ({
    		getContext,
    		createEventDispatcher,
    		tick,
    		fade,
    		MarkdownIt: markdownIt,
    		Emoji: markdownItEmoji,
    		uuidv4: v4,
    		JSONURL,
    		CompCard,
    		AppData: AppData$1,
    		HeroData,
    		Artifacts,
    		Confirm,
    		ImportData,
    		HeroDetail,
    		ModalCloseButton,
    		CompEditor,
    		ArtifactDetail,
    		SIFurnBox,
    		TutorialBox,
    		AscendBox,
    		SortableList,
    		isMobile,
    		months,
    		jsurl,
    		dispatch,
    		open,
    		md,
    		openDetail,
    		openDesc,
    		openHero,
    		openSubs,
    		openSuggestions,
    		selectedLine,
    		selectedHero,
    		copyConfirmVisible,
    		showowConfirm,
    		owText,
    		owPromise,
    		makeSortedCompList,
    		makeSearchSuggestions,
    		sortByStars,
    		handleCompCardClick,
    		renderMarkdown,
    		handleEditButtonClick,
    		handleNewButtonClick,
    		handleCompChangeSuccess,
    		handleDeleteButtonClick,
    		handleImportButtonClick,
    		handleExportButtonClick,
    		handleStarClick,
    		handleDelComp,
    		handleCompImport,
    		openOverwriteConfirm,
    		handleCloseButtonClick,
    		handleHeroDetailClick,
    		openArtifactDetail,
    		handlePopState,
    		handleCardSort,
    		updateSearch,
    		takeSuggestion,
    		searchSuggestions,
    		selectedUUID,
    		sortedCompList,
    		editorHeight,
    		highlightComp,
    		editorWidth,
    		$AppData,
    		$HeroData,
    		$Artifacts
    	});

    	$$self.$inject_state = $$props => {
    		if ('isMobile' in $$props) $$invalidate(33, isMobile = $$props.isMobile);
    		if ('openDetail' in $$props) $$invalidate(2, openDetail = $$props.openDetail);
    		if ('openDesc' in $$props) $$invalidate(3, openDesc = $$props.openDesc);
    		if ('openHero' in $$props) $$invalidate(4, openHero = $$props.openHero);
    		if ('openSubs' in $$props) $$invalidate(5, openSubs = $$props.openSubs);
    		if ('openSuggestions' in $$props) $$invalidate(6, openSuggestions = $$props.openSuggestions);
    		if ('selectedLine' in $$props) $$invalidate(7, selectedLine = $$props.selectedLine);
    		if ('selectedHero' in $$props) $$invalidate(8, selectedHero = $$props.selectedHero);
    		if ('copyConfirmVisible' in $$props) $$invalidate(9, copyConfirmVisible = $$props.copyConfirmVisible);
    		if ('showowConfirm' in $$props) $$invalidate(10, showowConfirm = $$props.showowConfirm);
    		if ('owText' in $$props) $$invalidate(11, owText = $$props.owText);
    		if ('owPromise' in $$props) $$invalidate(12, owPromise = $$props.owPromise);
    		if ('searchSuggestions' in $$props) $$invalidate(13, searchSuggestions = $$props.searchSuggestions);
    		if ('selectedUUID' in $$props) selectedUUID = $$props.selectedUUID;
    		if ('sortedCompList' in $$props) $$invalidate(0, sortedCompList = $$props.sortedCompList);
    		if ('editorHeight' in $$props) editorHeight = $$props.editorHeight;
    		if ('highlightComp' in $$props) $$invalidate(14, highlightComp = $$props.highlightComp);
    		if ('editorWidth' in $$props) editorWidth = $$props.editorWidth;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*$AppData, sortedCompList*/ 3) {
    			selectedUUID = $AppData.selectedComp !== null
    			? sortedCompList[$AppData.selectedComp].uuid
    			: '';
    		}

    		if ($$self.$$.dirty[1] & /*isMobile*/ 4) {
    			editorWidth = isMobile ? '100%' : '75%';
    		}

    		if ($$self.$$.dirty[1] & /*isMobile*/ 4) {
    			editorHeight = isMobile ? '75vh' : '80vh';
    		}
    	};

    	$$invalidate(0, sortedCompList = makeSortedCompList());
    	$$invalidate(14, highlightComp = null);
    	$$invalidate(13, searchSuggestions = makeSearchSuggestions());

    	return [
    		sortedCompList,
    		$AppData,
    		openDetail,
    		openDesc,
    		openHero,
    		openSubs,
    		openSuggestions,
    		selectedLine,
    		selectedHero,
    		copyConfirmVisible,
    		showowConfirm,
    		owText,
    		owPromise,
    		searchSuggestions,
    		highlightComp,
    		$HeroData,
    		$Artifacts,
    		months,
    		handleCompCardClick,
    		renderMarkdown,
    		handleEditButtonClick,
    		handleNewButtonClick,
    		handleDeleteButtonClick,
    		handleImportButtonClick,
    		handleExportButtonClick,
    		handleStarClick,
    		handleCloseButtonClick,
    		handleHeroDetailClick,
    		openArtifactDetail,
    		handlePopState,
    		handleCardSort,
    		updateSearch,
    		takeSuggestion,
    		isMobile,
    		func,
    		func_1,
    		input_input_handler,
    		focus_handler,
    		blur_handler,
    		click_handler,
    		click_handler_1,
    		click_handler_2,
    		click_handler_3,
    		click_handler_4,
    		func_2,
    		func_3,
    		click_handler_5,
    		func_4,
    		click_handler_6,
    		func_5,
    		func_6,
    		click_handler_7,
    		func_7,
    		click_handler_8,
    		click_handler_9,
    		click_handler_10,
    		func_8,
    		click_handler_11,
    		func_9,
    		click_handler_12,
    		click_handler_13,
    		click_handler_14,
    		click_handler_15,
    		func_10,
    		func_11,
    		click_handler_16,
    		func_12,
    		click_handler_17
    	];
    }

    class Comps extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$a, create_fragment$a, safe_not_equal, { isMobile: 33 }, null, [-1, -1, -1, -1]);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Comps",
    			options,
    			id: create_fragment$a.name
    		});
    	}

    	get isMobile() {
    		throw new Error_1$4("<Comps>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isMobile(value) {
    		throw new Error_1$4("<Comps>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\components\HeroList.svelte generated by Svelte v3.41.0 */

    const { Error: Error_1$3 } = globals;
    const file$6 = "src\\components\\HeroList.svelte";

    function get_each_context$5(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[43] = list[i];
    	return child_ctx;
    }

    // (293:2) {#if !$AppData.dismissHLSearchInfo}
    function create_if_block$5(ctx) {
    	let div1;
    	let div0;
    	let tutorialbox;
    	let current;

    	tutorialbox = new TutorialBox({
    			props: {
    				clickable: true,
    				onClick: /*func*/ ctx[34],
    				$$slots: { default: [create_default_slot$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			create_component(tutorialbox.$$.fragment);
    			attr_dev(div0, "class", "tutorialBoxContainer svelte-16ue099");
    			add_location(div0, file$6, 294, 4, 12754);
    			attr_dev(div1, "class", "searchInfo svelte-16ue099");
    			add_location(div1, file$6, 293, 3, 12724);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			mount_component(tutorialbox, div0, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const tutorialbox_changes = {};
    			if (dirty[0] & /*$AppData*/ 1) tutorialbox_changes.onClick = /*func*/ ctx[34];

    			if (dirty[1] & /*$$scope*/ 32768) {
    				tutorialbox_changes.$$scope = { dirty, ctx };
    			}

    			tutorialbox.$set(tutorialbox_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(tutorialbox.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(tutorialbox.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_component(tutorialbox);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$5.name,
    		type: "if",
    		source: "(293:2) {#if !$AppData.dismissHLSearchInfo}",
    		ctx
    	});

    	return block;
    }

    // (296:5) <TutorialBox clickable={true} onClick={() => {$AppData.dismissHLSearchInfo = true; dispatch('saveData');}}>
    function create_default_slot$2(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text$2("Just start typing to search! Pressing tab will also open and close the filter area.");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$2.name,
    		type: "slot",
    		source: "(296:5) <TutorialBox clickable={true} onClick={() => {$AppData.dismissHLSearchInfo = true; dispatch('saveData');}}>",
    		ctx
    	});

    	return block;
    }

    // (310:4) {#each displayList as hero (hero.id)}
    function create_each_block$5(key_1, ctx) {
    	let tr;
    	let td0;
    	let img0;
    	let img0_src_value;
    	let img0_alt_value;
    	let t0;
    	let p;
    	let t1_value = /*hero*/ ctx[43].name + "";
    	let t1;
    	let t2;
    	let td1;
    	let div2;
    	let div1;
    	let img1;
    	let img1_src_value;
    	let img1_alt_value;
    	let t3;
    	let div0;
    	let span0;
    	let t4_value = /*hero*/ ctx[43].faction + "";
    	let t4;
    	let t5;
    	let div7;
    	let div4;
    	let img2;
    	let img2_src_value;
    	let img2_alt_value;
    	let t6;
    	let div3;
    	let span1;
    	let t7_value = /*hero*/ ctx[43].type + "";
    	let t7;
    	let t8;
    	let div6;
    	let img3;
    	let img3_src_value;
    	let img3_alt_value;
    	let t9;
    	let div5;
    	let span2;
    	let t10_value = /*hero*/ ctx[43].class + "";
    	let t10;
    	let t11;
    	let td2;
    	let sifurnbox0;
    	let t12;
    	let td3;
    	let sifurnbox1;
    	let t13;
    	let rect;
    	let stop_animation = noop$1;
    	let current;
    	let mounted;
    	let dispose;

    	sifurnbox0 = new SIFurnBox({
    			props: {
    				type: "si",
    				num: /*hero*/ ctx[43].si_benchmark,
    				maxWidth: "58px"
    			},
    			$$inline: true
    		});

    	sifurnbox1 = new SIFurnBox({
    			props: {
    				type: "furn",
    				num: /*hero*/ ctx[43].furn_benchmark,
    				maxWidth: "58px"
    			},
    			$$inline: true
    		});

    	function click_handler_22() {
    		return /*click_handler_22*/ ctx[38](/*hero*/ ctx[43]);
    	}

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			tr = element("tr");
    			td0 = element("td");
    			img0 = element("img");
    			t0 = space();
    			p = element("p");
    			t1 = text$2(t1_value);
    			t2 = space();
    			td1 = element("td");
    			div2 = element("div");
    			div1 = element("div");
    			img1 = element("img");
    			t3 = space();
    			div0 = element("div");
    			span0 = element("span");
    			t4 = text$2(t4_value);
    			t5 = space();
    			div7 = element("div");
    			div4 = element("div");
    			img2 = element("img");
    			t6 = space();
    			div3 = element("div");
    			span1 = element("span");
    			t7 = text$2(t7_value);
    			t8 = space();
    			div6 = element("div");
    			img3 = element("img");
    			t9 = space();
    			div5 = element("div");
    			span2 = element("span");
    			t10 = text$2(t10_value);
    			t11 = space();
    			td2 = element("td");
    			create_component(sifurnbox0.$$.fragment);
    			t12 = space();
    			td3 = element("td");
    			create_component(sifurnbox1.$$.fragment);
    			t13 = space();
    			attr_dev(img0, "class", "portrait svelte-16ue099");
    			if (!src_url_equal(img0.src, img0_src_value = /*hero*/ ctx[43].portrait)) attr_dev(img0, "src", img0_src_value);
    			attr_dev(img0, "alt", img0_alt_value = /*hero*/ ctx[43].name);
    			add_location(img0, file$6, 312, 6, 13676);
    			attr_dev(p, "class", "heroName svelte-16ue099");
    			add_location(p, file$6, 313, 6, 13742);
    			attr_dev(td0, "class", "svelte-16ue099");
    			add_location(td0, file$6, 311, 5, 13664);
    			attr_dev(img1, "class", "attrImage factionImg svelte-16ue099");
    			if (!src_url_equal(img1.src, img1_src_value = "./img/factions/" + /*hero*/ ctx[43].faction.toLowerCase() + ".png")) attr_dev(img1, "src", img1_src_value);
    			attr_dev(img1, "alt", img1_alt_value = /*hero*/ ctx[43].faction);
    			add_location(img1, file$6, 318, 8, 13899);
    			attr_dev(span0, "class", "tooltipText svelte-16ue099");
    			add_location(span0, file$6, 319, 41, 14051);
    			attr_dev(div0, "class", "tooltip tooltip-top svelte-16ue099");
    			add_location(div0, file$6, 319, 8, 14018);
    			attr_dev(div1, "class", "attrImgContainer svelte-16ue099");
    			add_location(div1, file$6, 317, 7, 13859);
    			attr_dev(div2, "class", "factionArea svelte-16ue099");
    			add_location(div2, file$6, 316, 6, 13825);
    			attr_dev(img2, "class", "attrImage svelte-16ue099");
    			if (!src_url_equal(img2.src, img2_src_value = "./img/types/" + /*hero*/ ctx[43].type.toLowerCase() + ".png")) attr_dev(img2, "src", img2_src_value);
    			attr_dev(img2, "alt", img2_alt_value = /*hero*/ ctx[43].type);
    			add_location(img2, file$6, 324, 8, 14217);
    			attr_dev(span1, "class", "tooltipText svelte-16ue099");
    			add_location(span1, file$6, 325, 41, 14347);
    			attr_dev(div3, "class", "tooltip tooltip-bot svelte-16ue099");
    			add_location(div3, file$6, 325, 8, 14314);
    			attr_dev(div4, "class", "attrImgContainer svelte-16ue099");
    			add_location(div4, file$6, 323, 7, 14177);
    			attr_dev(img3, "class", "attrImage svelte-16ue099");
    			if (!src_url_equal(img3.src, img3_src_value = "./img/classes/" + /*hero*/ ctx[43].class.toLowerCase() + ".png")) attr_dev(img3, "src", img3_src_value);
    			attr_dev(img3, "alt", img3_alt_value = /*hero*/ ctx[43].class);
    			add_location(img3, file$6, 328, 8, 14461);
    			attr_dev(span2, "class", "tooltipText svelte-16ue099");
    			add_location(span2, file$6, 329, 41, 14595);
    			attr_dev(div5, "class", "tooltip tooltip-bot svelte-16ue099");
    			add_location(div5, file$6, 329, 8, 14562);
    			attr_dev(div6, "class", "attrImgContainer svelte-16ue099");
    			add_location(div6, file$6, 327, 7, 14421);
    			attr_dev(div7, "class", "typeClassArea svelte-16ue099");
    			add_location(div7, file$6, 322, 6, 14141);
    			attr_dev(td1, "class", "attrArea svelte-16ue099");
    			add_location(td1, file$6, 315, 5, 13796);
    			attr_dev(td2, "class", "svelte-16ue099");
    			add_location(td2, file$6, 333, 5, 14694);
    			attr_dev(td3, "class", "svelte-16ue099");
    			add_location(td3, file$6, 336, 5, 14788);
    			attr_dev(tr, "class", "heroRow svelte-16ue099");
    			add_location(tr, file$6, 310, 4, 13562);
    			this.first = tr;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tr, anchor);
    			append_dev(tr, td0);
    			append_dev(td0, img0);
    			append_dev(td0, t0);
    			append_dev(td0, p);
    			append_dev(p, t1);
    			append_dev(tr, t2);
    			append_dev(tr, td1);
    			append_dev(td1, div2);
    			append_dev(div2, div1);
    			append_dev(div1, img1);
    			append_dev(div1, t3);
    			append_dev(div1, div0);
    			append_dev(div0, span0);
    			append_dev(span0, t4);
    			append_dev(td1, t5);
    			append_dev(td1, div7);
    			append_dev(div7, div4);
    			append_dev(div4, img2);
    			append_dev(div4, t6);
    			append_dev(div4, div3);
    			append_dev(div3, span1);
    			append_dev(span1, t7);
    			append_dev(div7, t8);
    			append_dev(div7, div6);
    			append_dev(div6, img3);
    			append_dev(div6, t9);
    			append_dev(div6, div5);
    			append_dev(div5, span2);
    			append_dev(span2, t10);
    			append_dev(tr, t11);
    			append_dev(tr, td2);
    			mount_component(sifurnbox0, td2, null);
    			append_dev(tr, t12);
    			append_dev(tr, td3);
    			mount_component(sifurnbox1, td3, null);
    			append_dev(tr, t13);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(tr, "click", click_handler_22, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (!current || dirty[0] & /*displayList*/ 2 && !src_url_equal(img0.src, img0_src_value = /*hero*/ ctx[43].portrait)) {
    				attr_dev(img0, "src", img0_src_value);
    			}

    			if (!current || dirty[0] & /*displayList*/ 2 && img0_alt_value !== (img0_alt_value = /*hero*/ ctx[43].name)) {
    				attr_dev(img0, "alt", img0_alt_value);
    			}

    			if ((!current || dirty[0] & /*displayList*/ 2) && t1_value !== (t1_value = /*hero*/ ctx[43].name + "")) set_data_dev(t1, t1_value);

    			if (!current || dirty[0] & /*displayList*/ 2 && !src_url_equal(img1.src, img1_src_value = "./img/factions/" + /*hero*/ ctx[43].faction.toLowerCase() + ".png")) {
    				attr_dev(img1, "src", img1_src_value);
    			}

    			if (!current || dirty[0] & /*displayList*/ 2 && img1_alt_value !== (img1_alt_value = /*hero*/ ctx[43].faction)) {
    				attr_dev(img1, "alt", img1_alt_value);
    			}

    			if ((!current || dirty[0] & /*displayList*/ 2) && t4_value !== (t4_value = /*hero*/ ctx[43].faction + "")) set_data_dev(t4, t4_value);

    			if (!current || dirty[0] & /*displayList*/ 2 && !src_url_equal(img2.src, img2_src_value = "./img/types/" + /*hero*/ ctx[43].type.toLowerCase() + ".png")) {
    				attr_dev(img2, "src", img2_src_value);
    			}

    			if (!current || dirty[0] & /*displayList*/ 2 && img2_alt_value !== (img2_alt_value = /*hero*/ ctx[43].type)) {
    				attr_dev(img2, "alt", img2_alt_value);
    			}

    			if ((!current || dirty[0] & /*displayList*/ 2) && t7_value !== (t7_value = /*hero*/ ctx[43].type + "")) set_data_dev(t7, t7_value);

    			if (!current || dirty[0] & /*displayList*/ 2 && !src_url_equal(img3.src, img3_src_value = "./img/classes/" + /*hero*/ ctx[43].class.toLowerCase() + ".png")) {
    				attr_dev(img3, "src", img3_src_value);
    			}

    			if (!current || dirty[0] & /*displayList*/ 2 && img3_alt_value !== (img3_alt_value = /*hero*/ ctx[43].class)) {
    				attr_dev(img3, "alt", img3_alt_value);
    			}

    			if ((!current || dirty[0] & /*displayList*/ 2) && t10_value !== (t10_value = /*hero*/ ctx[43].class + "")) set_data_dev(t10, t10_value);
    			const sifurnbox0_changes = {};
    			if (dirty[0] & /*displayList*/ 2) sifurnbox0_changes.num = /*hero*/ ctx[43].si_benchmark;
    			sifurnbox0.$set(sifurnbox0_changes);
    			const sifurnbox1_changes = {};
    			if (dirty[0] & /*displayList*/ 2) sifurnbox1_changes.num = /*hero*/ ctx[43].furn_benchmark;
    			sifurnbox1.$set(sifurnbox1_changes);
    		},
    		r: function measure() {
    			rect = tr.getBoundingClientRect();
    		},
    		f: function fix() {
    			fix_position(tr);
    			stop_animation();
    		},
    		a: function animate() {
    			stop_animation();
    			stop_animation = create_animation(tr, rect, flip, { duration: 200 });
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(sifurnbox0.$$.fragment, local);
    			transition_in(sifurnbox1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(sifurnbox0.$$.fragment, local);
    			transition_out(sifurnbox1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tr);
    			destroy_component(sifurnbox0);
    			destroy_component(sifurnbox1);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$5.name,
    		type: "each",
    		source: "(310:4) {#each displayList as hero (hero.id)}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$9(ctx) {
    	let div10;
    	let section0;
    	let div6;
    	let div1;
    	let div0;
    	let input;
    	let t0;
    	let div5;
    	let div2;
    	let button0;
    	let t1;
    	let button0_class_value;
    	let t2;
    	let button1;
    	let img0;
    	let img0_class_value;
    	let img0_src_value;
    	let t3;
    	let button2;
    	let img1;
    	let img1_class_value;
    	let img1_src_value;
    	let t4;
    	let button3;
    	let img2;
    	let img2_class_value;
    	let img2_src_value;
    	let t5;
    	let button4;
    	let img3;
    	let img3_class_value;
    	let img3_src_value;
    	let t6;
    	let button5;
    	let img4;
    	let img4_class_value;
    	let img4_src_value;
    	let t7;
    	let button6;
    	let img5;
    	let img5_class_value;
    	let img5_src_value;
    	let t8;
    	let button7;
    	let img6;
    	let img6_class_value;
    	let img6_src_value;
    	let t9;
    	let div3;
    	let button8;
    	let t10;
    	let button8_class_value;
    	let t11;
    	let button9;
    	let img7;
    	let img7_class_value;
    	let img7_src_value;
    	let t12;
    	let button10;
    	let img8;
    	let img8_class_value;
    	let img8_src_value;
    	let t13;
    	let button11;
    	let img9;
    	let img9_class_value;
    	let img9_src_value;
    	let t14;
    	let div4;
    	let button12;
    	let t15;
    	let button12_class_value;
    	let t16;
    	let button13;
    	let img10;
    	let img10_class_value;
    	let img10_src_value;
    	let t17;
    	let button14;
    	let img11;
    	let img11_class_value;
    	let img11_src_value;
    	let t18;
    	let button15;
    	let img12;
    	let img12_class_value;
    	let img12_src_value;
    	let t19;
    	let button16;
    	let img13;
    	let img13_class_value;
    	let img13_src_value;
    	let t20;
    	let button17;
    	let img14;
    	let img14_class_value;
    	let img14_src_value;
    	let t21;
    	let div8;
    	let button18;
    	let i;
    	let i_class_value;
    	let span0;
    	let t23;
    	let div7;
    	let span1;
    	let t25;
    	let section1;
    	let t26;
    	let div9;
    	let table;
    	let thead;
    	let th0;
    	let t28;
    	let th1;
    	let t30;
    	let th2;
    	let t31;
    	let span2;
    	let t33;
    	let th3;
    	let t34;
    	let span3;
    	let t36;
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let current;
    	let mounted;
    	let dispose;
    	let if_block = !/*$AppData*/ ctx[0].dismissHLSearchInfo && create_if_block$5(ctx);
    	let each_value = /*displayList*/ ctx[1];
    	validate_each_argument(each_value);
    	const get_key = ctx => /*hero*/ ctx[43].id;
    	validate_each_keys(ctx, each_value, get_each_context$5, get_key);

    	for (let i = 0; i < each_value.length; i += 1) {
    		let child_ctx = get_each_context$5(ctx, each_value, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block$5(key, child_ctx));
    	}

    	const block = {
    		c: function create() {
    			div10 = element("div");
    			section0 = element("section");
    			div6 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			input = element("input");
    			t0 = space();
    			div5 = element("div");
    			div2 = element("div");
    			button0 = element("button");
    			t1 = text$2("ALL");
    			t2 = space();
    			button1 = element("button");
    			img0 = element("img");
    			t3 = space();
    			button2 = element("button");
    			img1 = element("img");
    			t4 = space();
    			button3 = element("button");
    			img2 = element("img");
    			t5 = space();
    			button4 = element("button");
    			img3 = element("img");
    			t6 = space();
    			button5 = element("button");
    			img4 = element("img");
    			t7 = space();
    			button6 = element("button");
    			img5 = element("img");
    			t8 = space();
    			button7 = element("button");
    			img6 = element("img");
    			t9 = space();
    			div3 = element("div");
    			button8 = element("button");
    			t10 = text$2("ALL");
    			t11 = space();
    			button9 = element("button");
    			img7 = element("img");
    			t12 = space();
    			button10 = element("button");
    			img8 = element("img");
    			t13 = space();
    			button11 = element("button");
    			img9 = element("img");
    			t14 = space();
    			div4 = element("div");
    			button12 = element("button");
    			t15 = text$2("ALL");
    			t16 = space();
    			button13 = element("button");
    			img10 = element("img");
    			t17 = space();
    			button14 = element("button");
    			img11 = element("img");
    			t18 = space();
    			button15 = element("button");
    			img12 = element("img");
    			t19 = space();
    			button16 = element("button");
    			img13 = element("img");
    			t20 = space();
    			button17 = element("button");
    			img14 = element("img");
    			t21 = space();
    			div8 = element("div");
    			button18 = element("button");
    			i = element("i");
    			span0 = element("span");
    			span0.textContent = "Search and Filters";
    			t23 = space();
    			div7 = element("div");
    			span1 = element("span");
    			span1.textContent = "Filters";
    			t25 = space();
    			section1 = element("section");
    			if (if_block) if_block.c();
    			t26 = space();
    			div9 = element("div");
    			table = element("table");
    			thead = element("thead");
    			th0 = element("th");
    			th0.textContent = "Hero";
    			t28 = space();
    			th1 = element("th");
    			th1.textContent = "Attributes";
    			t30 = space();
    			th2 = element("th");
    			t31 = text$2("SI ");
    			span2 = element("span");
    			span2.textContent = "Benchmark";
    			t33 = space();
    			th3 = element("th");
    			t34 = text$2("Furn ");
    			span3 = element("span");
    			span3.textContent = "Benchmark";
    			t36 = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(input, "id", "searchBox");
    			attr_dev(input, "type", "search");
    			attr_dev(input, "placeholder", "Search");
    			attr_dev(input, "class", "svelte-16ue099");
    			add_location(input, file$6, 226, 5, 7979);
    			attr_dev(div0, "class", "search svelte-16ue099");
    			add_location(div0, file$6, 225, 4, 7952);
    			attr_dev(div1, "class", "searchContainer svelte-16ue099");
    			add_location(div1, file$6, 224, 3, 7917);
    			attr_dev(button0, "type", "button");

    			attr_dev(button0, "class", button0_class_value = "filterMasterButton " + (/*allFactionsEnabled*/ ctx[5]
    			? ''
    			: 'filterMasterDisabled') + " svelte-16ue099");

    			add_location(button0, file$6, 231, 5, 8209);
    			attr_dev(img0, "class", img0_class_value = "filterImg " + (/*$AppData*/ ctx[0].HL.ShowLB ? '' : 'filterInactive') + " svelte-16ue099");
    			if (!src_url_equal(img0.src, img0_src_value = "./img/factions/lightbearer.png")) attr_dev(img0, "src", img0_src_value);
    			attr_dev(img0, "alt", "Lightbearer");
    			add_location(img0, file$6, 233, 6, 8480);
    			attr_dev(button1, "type", "button");
    			attr_dev(button1, "class", "filterButton svelte-16ue099");
    			add_location(button1, file$6, 232, 5, 8388);
    			attr_dev(img1, "class", img1_class_value = "filterImg " + (/*$AppData*/ ctx[0].HL.ShowM ? '' : 'filterInactive') + " svelte-16ue099");
    			if (!src_url_equal(img1.src, img1_src_value = "./img/factions/mauler.png")) attr_dev(img1, "src", img1_src_value);
    			attr_dev(img1, "alt", "Mauler");
    			add_location(img1, file$6, 236, 6, 8717);
    			attr_dev(button2, "type", "button");
    			attr_dev(button2, "class", "filterButton svelte-16ue099");
    			add_location(button2, file$6, 235, 5, 8626);
    			attr_dev(img2, "class", img2_class_value = "filterImg " + (/*$AppData*/ ctx[0].HL.ShowW ? '' : 'filterInactive') + " svelte-16ue099");
    			if (!src_url_equal(img2.src, img2_src_value = "./img/factions/wilder.png")) attr_dev(img2, "src", img2_src_value);
    			attr_dev(img2, "alt", "wilder");
    			add_location(img2, file$6, 239, 6, 8943);
    			attr_dev(button3, "type", "button");
    			attr_dev(button3, "class", "filterButton svelte-16ue099");
    			add_location(button3, file$6, 238, 5, 8852);
    			attr_dev(img3, "class", img3_class_value = "filterImg " + (/*$AppData*/ ctx[0].HL.ShowGB ? '' : 'filterInactive') + " svelte-16ue099");
    			if (!src_url_equal(img3.src, img3_src_value = "./img/factions/graveborn.png")) attr_dev(img3, "src", img3_src_value);
    			attr_dev(img3, "alt", "Graveborn");
    			add_location(img3, file$6, 242, 6, 9170);
    			attr_dev(button4, "type", "button");
    			attr_dev(button4, "class", "filterButton svelte-16ue099");
    			add_location(button4, file$6, 241, 5, 9078);
    			attr_dev(img4, "class", img4_class_value = "filterImg " + (/*$AppData*/ ctx[0].HL.ShowC ? '' : 'filterInactive') + " svelte-16ue099");
    			if (!src_url_equal(img4.src, img4_src_value = "./img/factions/celestial.png")) attr_dev(img4, "src", img4_src_value);
    			attr_dev(img4, "alt", "Celestial");
    			add_location(img4, file$6, 245, 6, 9403);
    			attr_dev(button5, "type", "button");
    			attr_dev(button5, "class", "filterButton svelte-16ue099");
    			add_location(button5, file$6, 244, 5, 9312);
    			attr_dev(img5, "class", img5_class_value = "filterImg " + (/*$AppData*/ ctx[0].HL.ShowH ? '' : 'filterInactive') + " svelte-16ue099");
    			if (!src_url_equal(img5.src, img5_src_value = "./img/factions/hypogean.png")) attr_dev(img5, "src", img5_src_value);
    			attr_dev(img5, "alt", "Hypogean");
    			add_location(img5, file$6, 248, 6, 9635);
    			attr_dev(button6, "type", "button");
    			attr_dev(button6, "class", "filterButton svelte-16ue099");
    			add_location(button6, file$6, 247, 5, 9544);
    			attr_dev(img6, "class", img6_class_value = "filterImg " + (/*$AppData*/ ctx[0].HL.ShowD ? '' : 'filterInactive') + " svelte-16ue099");
    			if (!src_url_equal(img6.src, img6_src_value = "./img/factions/dimensional.png")) attr_dev(img6, "src", img6_src_value);
    			attr_dev(img6, "alt", "Dimensional");
    			add_location(img6, file$6, 251, 6, 9865);
    			attr_dev(button7, "type", "button");
    			attr_dev(button7, "class", "filterButton svelte-16ue099");
    			add_location(button7, file$6, 250, 5, 9774);
    			attr_dev(div2, "class", "filterSection svelte-16ue099");
    			add_location(div2, file$6, 230, 4, 8175);
    			attr_dev(button8, "type", "button");
    			attr_dev(button8, "class", button8_class_value = "filterMasterButton " + (/*allTypesEnabled*/ ctx[4] ? '' : 'filterMasterDisabled') + " svelte-16ue099");
    			add_location(button8, file$6, 255, 5, 10055);
    			attr_dev(img7, "class", img7_class_value = "filterImg " + (/*$AppData*/ ctx[0].HL.ShowInt ? '' : 'filterInactive') + " svelte-16ue099");
    			if (!src_url_equal(img7.src, img7_src_value = "./img/types/intelligence.png")) attr_dev(img7, "src", img7_src_value);
    			attr_dev(img7, "alt", "Intelligence");
    			add_location(img7, file$6, 257, 6, 10321);
    			attr_dev(button9, "type", "button");
    			attr_dev(button9, "class", "filterButton svelte-16ue099");
    			add_location(button9, file$6, 256, 5, 10228);
    			attr_dev(img8, "class", img8_class_value = "filterImg " + (/*$AppData*/ ctx[0].HL.ShowAgi ? '' : 'filterInactive') + " svelte-16ue099");
    			if (!src_url_equal(img8.src, img8_src_value = "./img/types/agility.png")) attr_dev(img8, "src", img8_src_value);
    			attr_dev(img8, "alt", "Agility");
    			add_location(img8, file$6, 260, 6, 10560);
    			attr_dev(button10, "type", "button");
    			attr_dev(button10, "class", "filterButton svelte-16ue099");
    			add_location(button10, file$6, 259, 5, 10467);
    			attr_dev(img9, "class", img9_class_value = "filterImg " + (/*$AppData*/ ctx[0].HL.ShowStr ? '' : 'filterInactive') + " svelte-16ue099");
    			if (!src_url_equal(img9.src, img9_src_value = "./img/types/strength.png")) attr_dev(img9, "src", img9_src_value);
    			attr_dev(img9, "alt", "Strength");
    			add_location(img9, file$6, 263, 6, 10789);
    			attr_dev(button11, "type", "button");
    			attr_dev(button11, "class", "filterButton svelte-16ue099");
    			add_location(button11, file$6, 262, 5, 10696);
    			attr_dev(div3, "class", "filterSection svelte-16ue099");
    			add_location(div3, file$6, 254, 4, 10021);
    			attr_dev(button12, "type", "button");
    			attr_dev(button12, "class", button12_class_value = "filterMasterButton " + (/*allClassEnabled*/ ctx[3] ? '' : 'filterMasterDisabled') + " svelte-16ue099");
    			add_location(button12, file$6, 267, 5, 10972);
    			attr_dev(img10, "class", img10_class_value = "filterImg " + (/*$AppData*/ ctx[0].HL.ShowMage ? '' : 'filterInactive') + " svelte-16ue099");
    			if (!src_url_equal(img10.src, img10_src_value = "./img/classes/mage.png")) attr_dev(img10, "src", img10_src_value);
    			attr_dev(img10, "alt", "Mage");
    			add_location(img10, file$6, 269, 6, 11240);
    			attr_dev(button13, "type", "button");
    			attr_dev(button13, "class", "filterButton svelte-16ue099");
    			add_location(button13, file$6, 268, 5, 11146);
    			attr_dev(img11, "class", img11_class_value = "filterImg " + (/*$AppData*/ ctx[0].HL.ShowWar ? '' : 'filterInactive') + " svelte-16ue099");
    			if (!src_url_equal(img11.src, img11_src_value = "./img/classes/warrior.png")) attr_dev(img11, "src", img11_src_value);
    			attr_dev(img11, "alt", "Warrior");
    			add_location(img11, file$6, 272, 6, 11466);
    			attr_dev(button14, "type", "button");
    			attr_dev(button14, "class", "filterButton svelte-16ue099");
    			add_location(button14, file$6, 271, 5, 11373);
    			attr_dev(img12, "class", img12_class_value = "filterImg " + (/*$AppData*/ ctx[0].HL.ShowTank ? '' : 'filterInactive') + " svelte-16ue099");
    			if (!src_url_equal(img12.src, img12_src_value = "./img/classes/tank.png")) attr_dev(img12, "src", img12_src_value);
    			attr_dev(img12, "alt", "Tank");
    			add_location(img12, file$6, 275, 6, 11698);
    			attr_dev(button15, "type", "button");
    			attr_dev(button15, "class", "filterButton svelte-16ue099");
    			add_location(button15, file$6, 274, 5, 11604);
    			attr_dev(img13, "class", img13_class_value = "filterImg " + (/*$AppData*/ ctx[0].HL.ShowSup ? '' : 'filterInactive') + " svelte-16ue099");
    			if (!src_url_equal(img13.src, img13_src_value = "./img/classes/support.png")) attr_dev(img13, "src", img13_src_value);
    			attr_dev(img13, "alt", "Support");
    			add_location(img13, file$6, 278, 6, 11924);
    			attr_dev(button16, "type", "button");
    			attr_dev(button16, "class", "filterButton svelte-16ue099");
    			add_location(button16, file$6, 277, 5, 11831);
    			attr_dev(img14, "class", img14_class_value = "filterImg " + (/*$AppData*/ ctx[0].HL.ShowRan ? '' : 'filterInactive') + " svelte-16ue099");
    			if (!src_url_equal(img14.src, img14_src_value = "./img/classes/ranger.png")) attr_dev(img14, "src", img14_src_value);
    			attr_dev(img14, "alt", "Ranger");
    			add_location(img14, file$6, 281, 6, 12155);
    			attr_dev(button17, "type", "button");
    			attr_dev(button17, "class", "filterButton svelte-16ue099");
    			add_location(button17, file$6, 280, 5, 12062);
    			attr_dev(div4, "class", "filterSection svelte-16ue099");
    			add_location(div4, file$6, 266, 4, 10938);
    			attr_dev(div5, "class", "filters svelte-16ue099");
    			add_location(div5, file$6, 229, 3, 8148);
    			attr_dev(div6, "class", "mobileExpander svelte-16ue099");
    			toggle_class(div6, "filterOpen", /*openFilters*/ ctx[2]);
    			add_location(div6, file$6, 223, 2, 7853);
    			attr_dev(i, "class", i_class_value = "arrow " + (/*openFilters*/ ctx[2] ? 'open' : 'right') + " svelte-16ue099");
    			add_location(i, file$6, 287, 91, 12447);
    			attr_dev(span0, "class", "svelte-16ue099");
    			add_location(span0, file$6, 287, 146, 12502);
    			attr_dev(button18, "type", "button");
    			attr_dev(button18, "class", "filtersButton svelte-16ue099");
    			add_location(button18, file$6, 287, 3, 12359);
    			attr_dev(span1, "class", "tooltipText svelte-16ue099");
    			add_location(span1, file$6, 288, 41, 12585);
    			attr_dev(div7, "class", "tooltip tooltip-expander svelte-16ue099");
    			add_location(div7, file$6, 288, 3, 12547);
    			attr_dev(div8, "class", "mobileExpanderTitle svelte-16ue099");
    			add_location(div8, file$6, 286, 2, 12321);
    			attr_dev(section0, "class", "sect1 svelte-16ue099");
    			add_location(section0, file$6, 222, 1, 7826);
    			attr_dev(th0, "class", "sortHeader svelte-16ue099");
    			add_location(th0, file$6, 304, 5, 13128);
    			attr_dev(th1, "class", "nonSortHeader svelte-16ue099");
    			add_location(th1, file$6, 305, 5, 13210);
    			attr_dev(span2, "class", "hiddenMobile svelte-16ue099");
    			add_location(span2, file$6, 306, 72, 13325);
    			attr_dev(th2, "class", "sortHeader svelte-16ue099");
    			add_location(th2, file$6, 306, 5, 13258);
    			attr_dev(span3, "class", "hiddenMobile svelte-16ue099");
    			add_location(span3, file$6, 307, 76, 13451);
    			attr_dev(th3, "class", "sortHeader svelte-16ue099");
    			add_location(th3, file$6, 307, 5, 13380);
    			add_location(thead, file$6, 303, 4, 13114);
    			attr_dev(table, "class", "heroTable svelte-16ue099");
    			add_location(table, file$6, 302, 3, 13083);
    			attr_dev(div9, "class", "tableContainer svelte-16ue099");
    			add_location(div9, file$6, 301, 2, 13050);
    			attr_dev(section1, "class", "sect2 svelte-16ue099");
    			add_location(section1, file$6, 291, 1, 12657);
    			attr_dev(div10, "class", "HLContainer svelte-16ue099");
    			add_location(div10, file$6, 221, 0, 7798);
    		},
    		l: function claim(nodes) {
    			throw new Error_1$3("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div10, anchor);
    			append_dev(div10, section0);
    			append_dev(section0, div6);
    			append_dev(div6, div1);
    			append_dev(div1, div0);
    			append_dev(div0, input);
    			set_input_value(input, /*$AppData*/ ctx[0].HL.SearchStr);
    			append_dev(div6, t0);
    			append_dev(div6, div5);
    			append_dev(div5, div2);
    			append_dev(div2, button0);
    			append_dev(button0, t1);
    			append_dev(div2, t2);
    			append_dev(div2, button1);
    			append_dev(button1, img0);
    			append_dev(div2, t3);
    			append_dev(div2, button2);
    			append_dev(button2, img1);
    			append_dev(div2, t4);
    			append_dev(div2, button3);
    			append_dev(button3, img2);
    			append_dev(div2, t5);
    			append_dev(div2, button4);
    			append_dev(button4, img3);
    			append_dev(div2, t6);
    			append_dev(div2, button5);
    			append_dev(button5, img4);
    			append_dev(div2, t7);
    			append_dev(div2, button6);
    			append_dev(button6, img5);
    			append_dev(div2, t8);
    			append_dev(div2, button7);
    			append_dev(button7, img6);
    			append_dev(div5, t9);
    			append_dev(div5, div3);
    			append_dev(div3, button8);
    			append_dev(button8, t10);
    			append_dev(div3, t11);
    			append_dev(div3, button9);
    			append_dev(button9, img7);
    			append_dev(div3, t12);
    			append_dev(div3, button10);
    			append_dev(button10, img8);
    			append_dev(div3, t13);
    			append_dev(div3, button11);
    			append_dev(button11, img9);
    			append_dev(div5, t14);
    			append_dev(div5, div4);
    			append_dev(div4, button12);
    			append_dev(button12, t15);
    			append_dev(div4, t16);
    			append_dev(div4, button13);
    			append_dev(button13, img10);
    			append_dev(div4, t17);
    			append_dev(div4, button14);
    			append_dev(button14, img11);
    			append_dev(div4, t18);
    			append_dev(div4, button15);
    			append_dev(button15, img12);
    			append_dev(div4, t19);
    			append_dev(div4, button16);
    			append_dev(button16, img13);
    			append_dev(div4, t20);
    			append_dev(div4, button17);
    			append_dev(button17, img14);
    			append_dev(section0, t21);
    			append_dev(section0, div8);
    			append_dev(div8, button18);
    			append_dev(button18, i);
    			append_dev(button18, span0);
    			append_dev(div8, t23);
    			append_dev(div8, div7);
    			append_dev(div7, span1);
    			append_dev(div10, t25);
    			append_dev(div10, section1);
    			if (if_block) if_block.m(section1, null);
    			append_dev(section1, t26);
    			append_dev(section1, div9);
    			append_dev(div9, table);
    			append_dev(table, thead);
    			append_dev(thead, th0);
    			append_dev(thead, t28);
    			append_dev(thead, th1);
    			append_dev(thead, t30);
    			append_dev(thead, th2);
    			append_dev(th2, t31);
    			append_dev(th2, span2);
    			append_dev(thead, t33);
    			append_dev(thead, th3);
    			append_dev(th3, t34);
    			append_dev(th3, span3);
    			append_dev(table, t36);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(table, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(window, "keyup", /*dynamicSearch*/ ctx[12], false, false, false),
    					listen_dev(input, "input", /*input_input_handler*/ ctx[14]),
    					listen_dev(input, "keyup", /*updateSearch*/ ctx[8], false, false, false),
    					listen_dev(input, "search", /*updateSearch*/ ctx[8], false, false, false),
    					listen_dev(button0, "click", /*click_handler*/ ctx[15], false, false, false),
    					listen_dev(button1, "click", /*click_handler_1*/ ctx[16], false, false, false),
    					listen_dev(button2, "click", /*click_handler_2*/ ctx[17], false, false, false),
    					listen_dev(button3, "click", /*click_handler_3*/ ctx[18], false, false, false),
    					listen_dev(button4, "click", /*click_handler_4*/ ctx[19], false, false, false),
    					listen_dev(button5, "click", /*click_handler_5*/ ctx[20], false, false, false),
    					listen_dev(button6, "click", /*click_handler_6*/ ctx[21], false, false, false),
    					listen_dev(button7, "click", /*click_handler_7*/ ctx[22], false, false, false),
    					listen_dev(button8, "click", /*click_handler_8*/ ctx[23], false, false, false),
    					listen_dev(button9, "click", /*click_handler_9*/ ctx[24], false, false, false),
    					listen_dev(button10, "click", /*click_handler_10*/ ctx[25], false, false, false),
    					listen_dev(button11, "click", /*click_handler_11*/ ctx[26], false, false, false),
    					listen_dev(button12, "click", /*click_handler_12*/ ctx[27], false, false, false),
    					listen_dev(button13, "click", /*click_handler_13*/ ctx[28], false, false, false),
    					listen_dev(button14, "click", /*click_handler_14*/ ctx[29], false, false, false),
    					listen_dev(button15, "click", /*click_handler_15*/ ctx[30], false, false, false),
    					listen_dev(button16, "click", /*click_handler_16*/ ctx[31], false, false, false),
    					listen_dev(button17, "click", /*click_handler_17*/ ctx[32], false, false, false),
    					listen_dev(button18, "click", /*click_handler_18*/ ctx[33], false, false, false),
    					listen_dev(th0, "click", /*click_handler_19*/ ctx[35], false, false, false),
    					listen_dev(th2, "click", /*click_handler_20*/ ctx[36], false, false, false),
    					listen_dev(th3, "click", /*click_handler_21*/ ctx[37], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*$AppData*/ 1) {
    				set_input_value(input, /*$AppData*/ ctx[0].HL.SearchStr);
    			}

    			if (!current || dirty[0] & /*allFactionsEnabled*/ 32 && button0_class_value !== (button0_class_value = "filterMasterButton " + (/*allFactionsEnabled*/ ctx[5]
    			? ''
    			: 'filterMasterDisabled') + " svelte-16ue099")) {
    				attr_dev(button0, "class", button0_class_value);
    			}

    			if (!current || dirty[0] & /*$AppData*/ 1 && img0_class_value !== (img0_class_value = "filterImg " + (/*$AppData*/ ctx[0].HL.ShowLB ? '' : 'filterInactive') + " svelte-16ue099")) {
    				attr_dev(img0, "class", img0_class_value);
    			}

    			if (!current || dirty[0] & /*$AppData*/ 1 && img1_class_value !== (img1_class_value = "filterImg " + (/*$AppData*/ ctx[0].HL.ShowM ? '' : 'filterInactive') + " svelte-16ue099")) {
    				attr_dev(img1, "class", img1_class_value);
    			}

    			if (!current || dirty[0] & /*$AppData*/ 1 && img2_class_value !== (img2_class_value = "filterImg " + (/*$AppData*/ ctx[0].HL.ShowW ? '' : 'filterInactive') + " svelte-16ue099")) {
    				attr_dev(img2, "class", img2_class_value);
    			}

    			if (!current || dirty[0] & /*$AppData*/ 1 && img3_class_value !== (img3_class_value = "filterImg " + (/*$AppData*/ ctx[0].HL.ShowGB ? '' : 'filterInactive') + " svelte-16ue099")) {
    				attr_dev(img3, "class", img3_class_value);
    			}

    			if (!current || dirty[0] & /*$AppData*/ 1 && img4_class_value !== (img4_class_value = "filterImg " + (/*$AppData*/ ctx[0].HL.ShowC ? '' : 'filterInactive') + " svelte-16ue099")) {
    				attr_dev(img4, "class", img4_class_value);
    			}

    			if (!current || dirty[0] & /*$AppData*/ 1 && img5_class_value !== (img5_class_value = "filterImg " + (/*$AppData*/ ctx[0].HL.ShowH ? '' : 'filterInactive') + " svelte-16ue099")) {
    				attr_dev(img5, "class", img5_class_value);
    			}

    			if (!current || dirty[0] & /*$AppData*/ 1 && img6_class_value !== (img6_class_value = "filterImg " + (/*$AppData*/ ctx[0].HL.ShowD ? '' : 'filterInactive') + " svelte-16ue099")) {
    				attr_dev(img6, "class", img6_class_value);
    			}

    			if (!current || dirty[0] & /*allTypesEnabled*/ 16 && button8_class_value !== (button8_class_value = "filterMasterButton " + (/*allTypesEnabled*/ ctx[4] ? '' : 'filterMasterDisabled') + " svelte-16ue099")) {
    				attr_dev(button8, "class", button8_class_value);
    			}

    			if (!current || dirty[0] & /*$AppData*/ 1 && img7_class_value !== (img7_class_value = "filterImg " + (/*$AppData*/ ctx[0].HL.ShowInt ? '' : 'filterInactive') + " svelte-16ue099")) {
    				attr_dev(img7, "class", img7_class_value);
    			}

    			if (!current || dirty[0] & /*$AppData*/ 1 && img8_class_value !== (img8_class_value = "filterImg " + (/*$AppData*/ ctx[0].HL.ShowAgi ? '' : 'filterInactive') + " svelte-16ue099")) {
    				attr_dev(img8, "class", img8_class_value);
    			}

    			if (!current || dirty[0] & /*$AppData*/ 1 && img9_class_value !== (img9_class_value = "filterImg " + (/*$AppData*/ ctx[0].HL.ShowStr ? '' : 'filterInactive') + " svelte-16ue099")) {
    				attr_dev(img9, "class", img9_class_value);
    			}

    			if (!current || dirty[0] & /*allClassEnabled*/ 8 && button12_class_value !== (button12_class_value = "filterMasterButton " + (/*allClassEnabled*/ ctx[3] ? '' : 'filterMasterDisabled') + " svelte-16ue099")) {
    				attr_dev(button12, "class", button12_class_value);
    			}

    			if (!current || dirty[0] & /*$AppData*/ 1 && img10_class_value !== (img10_class_value = "filterImg " + (/*$AppData*/ ctx[0].HL.ShowMage ? '' : 'filterInactive') + " svelte-16ue099")) {
    				attr_dev(img10, "class", img10_class_value);
    			}

    			if (!current || dirty[0] & /*$AppData*/ 1 && img11_class_value !== (img11_class_value = "filterImg " + (/*$AppData*/ ctx[0].HL.ShowWar ? '' : 'filterInactive') + " svelte-16ue099")) {
    				attr_dev(img11, "class", img11_class_value);
    			}

    			if (!current || dirty[0] & /*$AppData*/ 1 && img12_class_value !== (img12_class_value = "filterImg " + (/*$AppData*/ ctx[0].HL.ShowTank ? '' : 'filterInactive') + " svelte-16ue099")) {
    				attr_dev(img12, "class", img12_class_value);
    			}

    			if (!current || dirty[0] & /*$AppData*/ 1 && img13_class_value !== (img13_class_value = "filterImg " + (/*$AppData*/ ctx[0].HL.ShowSup ? '' : 'filterInactive') + " svelte-16ue099")) {
    				attr_dev(img13, "class", img13_class_value);
    			}

    			if (!current || dirty[0] & /*$AppData*/ 1 && img14_class_value !== (img14_class_value = "filterImg " + (/*$AppData*/ ctx[0].HL.ShowRan ? '' : 'filterInactive') + " svelte-16ue099")) {
    				attr_dev(img14, "class", img14_class_value);
    			}

    			if (dirty[0] & /*openFilters*/ 4) {
    				toggle_class(div6, "filterOpen", /*openFilters*/ ctx[2]);
    			}

    			if (!current || dirty[0] & /*openFilters*/ 4 && i_class_value !== (i_class_value = "arrow " + (/*openFilters*/ ctx[2] ? 'open' : 'right') + " svelte-16ue099")) {
    				attr_dev(i, "class", i_class_value);
    			}

    			if (!/*$AppData*/ ctx[0].dismissHLSearchInfo) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty[0] & /*$AppData*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$5(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(section1, t26);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			if (dirty[0] & /*handleHeroClick, displayList*/ 514) {
    				each_value = /*displayList*/ ctx[1];
    				validate_each_argument(each_value);
    				group_outros();
    				for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].r();
    				validate_each_keys(ctx, each_value, get_each_context$5, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, table, fix_and_outro_and_destroy_block, create_each_block$5, null, get_each_context$5);
    				for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].a();
    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div10);
    			if (if_block) if_block.d();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d();
    			}

    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$9.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function sortDisplayList(col, order, displayList) {
    	switch (col) {
    		case 'portrait':
    		case 'name':
    			return [...displayList].sort(compareValues$1('name', order));
    		case 'si':
    			return [...displayList].sort(compareValues$1('si_benchmark', order));
    		case 'furn':
    			return [...displayList].sort(compareValues$1('furn_benchmark', order));
    		default:
    			throw new Error('Invalid Hero List sort column.');
    	}
    }

    function compareValues$1(key, order = 'asc') {
    	return function innerSort(a, b) {
    		if (!a.hasOwnProperty(key) || !b.hasOwnProperty(key)) {
    			// property doesn't exist on either object
    			throw new Error('Invalid Hero List sort key specified.');
    		}

    		const varA = typeof a[key] === 'string'
    		? a[key].toLowerCase()
    		: a[key];

    		const varB = typeof b[key] === 'string'
    		? b[key].toLowerCase()
    		: b[key];

    		let comparison = 0;

    		if (varA > varB) {
    			comparison = 1;
    		} else {
    			comparison = -1;
    		}

    		return order === 'desc' ? comparison * -1 : comparison;
    	};
    }

    function isCharacterKeyPress$1(event) {
    	let keycode = event.keyCode;

    	let valid = keycode > 47 && keycode < 58 || // number keys
    	keycode > 64 && keycode < 91 || // letter keys
    	keycode > 95 && keycode < 112 || // numpad keys
    	keycode > 185 && keycode < 193 || // ;=,-./` (in order)
    	keycode > 218 && keycode < 223 || // [\]' (in order)
    	keycode === 9; // tab

    	return valid;
    }

    function instance$9($$self, $$props, $$invalidate) {
    	let modalHeight;
    	let allFactionsEnabled;
    	let allTypesEnabled;
    	let allClassEnabled;
    	let $AppData;
    	let $HeroData;
    	validate_store(AppData$1, 'AppData');
    	component_subscribe($$self, AppData$1, $$value => $$invalidate(0, $AppData = $$value));
    	validate_store(HeroData, 'HeroData');
    	component_subscribe($$self, HeroData, $$value => $$invalidate(40, $HeroData = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('HeroList', slots, []);
    	let { isMobile = false } = $$props;
    	const { open } = getContext('simple-modal');
    	const dispatch = createEventDispatcher();
    	let displayList = [];
    	let openFilters = false;

    	onMount(async () => {
    		$$invalidate(1, displayList = sortDisplayList($AppData.HL.Sort, $AppData.HL.Order, makeDisplayList()));
    		dispatch('saveData');
    	});

    	function makeDisplayList() {
    		let retVal = [];
    		let hero;

    		for (let i = 0; i < $HeroData.length; i++) {
    			hero = $HeroData[i];
    			if (!$AppData.HL.ShowLB && hero.faction.toLowerCase() === 'lightbearer') continue;
    			if (!$AppData.HL.ShowM && hero.faction.toLowerCase() === 'mauler') continue;
    			if (!$AppData.HL.ShowW && hero.faction.toLowerCase() === 'wilder') continue;
    			if (!$AppData.HL.ShowGB && hero.faction.toLowerCase() === 'graveborn') continue;
    			if (!$AppData.HL.ShowC && hero.faction.toLowerCase() === 'celestial') continue;
    			if (!$AppData.HL.ShowH && hero.faction.toLowerCase() === 'hypogean') continue;
    			if (!$AppData.HL.ShowD && hero.faction.toLowerCase() === 'dimensional') continue;
    			if (!$AppData.HL.ShowInt && hero.type.toLowerCase() === 'intelligence') continue;
    			if (!$AppData.HL.ShowAgi && hero.type.toLowerCase() === 'agility') continue;
    			if (!$AppData.HL.ShowStr && hero.type.toLowerCase() === 'strength') continue;
    			if (!$AppData.HL.ShowMage && hero.class.toLowerCase() === 'mage') continue;
    			if (!$AppData.HL.ShowWar && hero.class.toLowerCase() === 'warrior') continue;
    			if (!$AppData.HL.ShowTank && hero.class.toLowerCase() === 'tank') continue;
    			if (!$AppData.HL.ShowSup && hero.class.toLowerCase() === 'support') continue;
    			if (!$AppData.HL.ShowRan && hero.class.toLowerCase() === 'ranger') continue;
    			if ($AppData.HL.SearchStr !== '' && !hero.name.toLowerCase().includes($AppData.HL.SearchStr.toLowerCase()) && !hero.class.toLowerCase().includes($AppData.HL.SearchStr.toLowerCase()) && !hero.faction.toLowerCase().includes($AppData.HL.SearchStr.toLowerCase()) && !hero.type.toLowerCase().includes($AppData.HL.SearchStr.toLowerCase())) continue;

    			retVal.push({
    				id: hero.id,
    				name: hero.name,
    				portrait: hero.portrait,
    				class: hero.class,
    				faction: hero.faction,
    				type: hero.type,
    				si_benchmark: hero.si_benchmark,
    				furn_benchmark: hero.furn_benchmark
    			});
    		}

    		return retVal;
    	}

    	function updateFilters(filter) {
    		set_store_value(AppData$1, $AppData.HL[filter] = !$AppData.HL[filter], $AppData);
    		$$invalidate(1, displayList = sortDisplayList($AppData.HL.Sort, $AppData.HL.Order, makeDisplayList()));
    		dispatch('saveData');
    	}

    	function updateSearch() {
    		$$invalidate(1, displayList = sortDisplayList($AppData.HL.Sort, $AppData.HL.Order, makeDisplayList()));
    		dispatch('saveData');
    	}

    	function handleHeroClick(heroID) {
    		open(HeroDetail, { heroID }, {
    			closeButton: ModalCloseButton,
    			styleContent: {
    				background: '#F0F0F2',
    				padding: 0,
    				borderRadius: '10px',
    				maxHeight: modalHeight
    			}
    		});
    	}

    	function handleHeaderClick(col) {
    		let order = '';

    		if ($AppData.HL.Sort === col) {
    			order = $AppData.HL.Order === 'asc' ? 'desc' : 'asc';
    		} else {
    			order = 'asc';
    		}

    		$$invalidate(1, displayList = sortDisplayList(col, order, makeDisplayList()));
    		set_store_value(AppData$1, $AppData.HL.Sort = col, $AppData);
    		set_store_value(AppData$1, $AppData.HL.Order = order, $AppData);
    		dispatch('saveData');
    	}

    	function handleFilterMasterButtonClick(category) {
    		switch (category) {
    			case 'faction':
    				if (allFactionsEnabled) {
    					set_store_value(AppData$1, $AppData.HL.ShowLB = false, $AppData);
    					set_store_value(AppData$1, $AppData.HL.ShowM = false, $AppData);
    					set_store_value(AppData$1, $AppData.HL.ShowW = false, $AppData);
    					set_store_value(AppData$1, $AppData.HL.ShowGB = false, $AppData);
    					set_store_value(AppData$1, $AppData.HL.ShowC = false, $AppData);
    					set_store_value(AppData$1, $AppData.HL.ShowH = false, $AppData);
    					set_store_value(AppData$1, $AppData.HL.ShowD = false, $AppData);
    				} else {
    					set_store_value(AppData$1, $AppData.HL.ShowLB = true, $AppData);
    					set_store_value(AppData$1, $AppData.HL.ShowM = true, $AppData);
    					set_store_value(AppData$1, $AppData.HL.ShowW = true, $AppData);
    					set_store_value(AppData$1, $AppData.HL.ShowGB = true, $AppData);
    					set_store_value(AppData$1, $AppData.HL.ShowC = true, $AppData);
    					set_store_value(AppData$1, $AppData.HL.ShowH = true, $AppData);
    					set_store_value(AppData$1, $AppData.HL.ShowD = true, $AppData);
    				}
    				break;
    			case 'type':
    				if (allTypesEnabled) {
    					set_store_value(AppData$1, $AppData.HL.ShowInt = false, $AppData);
    					set_store_value(AppData$1, $AppData.HL.ShowAgi = false, $AppData);
    					set_store_value(AppData$1, $AppData.HL.ShowStr = false, $AppData);
    				} else {
    					set_store_value(AppData$1, $AppData.HL.ShowInt = true, $AppData);
    					set_store_value(AppData$1, $AppData.HL.ShowAgi = true, $AppData);
    					set_store_value(AppData$1, $AppData.HL.ShowStr = true, $AppData);
    				}
    				break;
    			case 'class':
    				if (allClassEnabled) {
    					set_store_value(AppData$1, $AppData.HL.ShowMage = false, $AppData);
    					set_store_value(AppData$1, $AppData.HL.ShowWar = false, $AppData);
    					set_store_value(AppData$1, $AppData.HL.ShowTank = false, $AppData);
    					set_store_value(AppData$1, $AppData.HL.ShowSup = false, $AppData);
    					set_store_value(AppData$1, $AppData.HL.ShowRan = false, $AppData);
    				} else {
    					set_store_value(AppData$1, $AppData.HL.ShowMage = true, $AppData);
    					set_store_value(AppData$1, $AppData.HL.ShowWar = true, $AppData);
    					set_store_value(AppData$1, $AppData.HL.ShowTank = true, $AppData);
    					set_store_value(AppData$1, $AppData.HL.ShowSup = true, $AppData);
    					set_store_value(AppData$1, $AppData.HL.ShowRan = true, $AppData);
    				}
    				break;
    			default:
    				throw new Error(`Invalid category given to handleFilterMasterButtonClick(): ${category}`);
    		}

    		$$invalidate(1, displayList = sortDisplayList($AppData.HL.Sort, $AppData.HL.Order, makeDisplayList()));
    		dispatch('saveData');
    	}

    	function dynamicSearch(event) {
    		if (isCharacterKeyPress$1(event)) {
    			if (event.keyCode === 9) {
    				// tab pressed, toggle openFilters
    				$$invalidate(2, openFilters = !openFilters);

    				openFilters
    				? document.querySelector('#searchBox').focus()
    				: document.querySelector('#searchBox').blur();
    			} else if (!openFilters) {
    				$$invalidate(2, openFilters = true);
    				set_store_value(AppData$1, $AppData.HL.SearchStr = $AppData.HL.SearchStr + event.key, $AppData);
    				document.querySelector('#searchBox').focus();
    				updateSearch();
    			}
    		}
    	}

    	const writable_props = ['isMobile'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<HeroList> was created with unknown prop '${key}'`);
    	});

    	function input_input_handler() {
    		$AppData.HL.SearchStr = this.value;
    		AppData$1.set($AppData);
    	}

    	const click_handler = () => handleFilterMasterButtonClick('faction');
    	const click_handler_1 = () => updateFilters('ShowLB');
    	const click_handler_2 = () => updateFilters('ShowM');
    	const click_handler_3 = () => updateFilters('ShowW');
    	const click_handler_4 = () => updateFilters('ShowGB');
    	const click_handler_5 = () => updateFilters('ShowC');
    	const click_handler_6 = () => updateFilters('ShowH');
    	const click_handler_7 = () => updateFilters('ShowD');
    	const click_handler_8 = () => handleFilterMasterButtonClick('type');
    	const click_handler_9 = () => updateFilters('ShowInt');
    	const click_handler_10 = () => updateFilters('ShowAgi');
    	const click_handler_11 = () => updateFilters('ShowStr');
    	const click_handler_12 = () => handleFilterMasterButtonClick('class');
    	const click_handler_13 = () => updateFilters('ShowMage');
    	const click_handler_14 = () => updateFilters('ShowWar');
    	const click_handler_15 = () => updateFilters('ShowTank');
    	const click_handler_16 = () => updateFilters('ShowSup');
    	const click_handler_17 = () => updateFilters('ShowRan');
    	const click_handler_18 = () => $$invalidate(2, openFilters = !openFilters);

    	const func = () => {
    		set_store_value(AppData$1, $AppData.dismissHLSearchInfo = true, $AppData);
    		dispatch('saveData');
    	};

    	const click_handler_19 = () => handleHeaderClick('name');
    	const click_handler_20 = () => handleHeaderClick('si');
    	const click_handler_21 = () => handleHeaderClick('furn');
    	const click_handler_22 = hero => handleHeroClick(hero.id);

    	$$self.$$set = $$props => {
    		if ('isMobile' in $$props) $$invalidate(13, isMobile = $$props.isMobile);
    	};

    	$$self.$capture_state = () => ({
    		getContext,
    		onMount,
    		createEventDispatcher,
    		flip,
    		AppData: AppData$1,
    		HeroData,
    		ModalCloseButton,
    		HeroDetail,
    		SIFurnBox,
    		TutorialBox,
    		isMobile,
    		open,
    		dispatch,
    		displayList,
    		openFilters,
    		makeDisplayList,
    		updateFilters,
    		updateSearch,
    		sortDisplayList,
    		compareValues: compareValues$1,
    		handleHeroClick,
    		handleHeaderClick,
    		handleFilterMasterButtonClick,
    		isCharacterKeyPress: isCharacterKeyPress$1,
    		dynamicSearch,
    		allClassEnabled,
    		allTypesEnabled,
    		allFactionsEnabled,
    		modalHeight,
    		$AppData,
    		$HeroData
    	});

    	$$self.$inject_state = $$props => {
    		if ('isMobile' in $$props) $$invalidate(13, isMobile = $$props.isMobile);
    		if ('displayList' in $$props) $$invalidate(1, displayList = $$props.displayList);
    		if ('openFilters' in $$props) $$invalidate(2, openFilters = $$props.openFilters);
    		if ('allClassEnabled' in $$props) $$invalidate(3, allClassEnabled = $$props.allClassEnabled);
    		if ('allTypesEnabled' in $$props) $$invalidate(4, allTypesEnabled = $$props.allTypesEnabled);
    		if ('allFactionsEnabled' in $$props) $$invalidate(5, allFactionsEnabled = $$props.allFactionsEnabled);
    		if ('modalHeight' in $$props) modalHeight = $$props.modalHeight;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*isMobile*/ 8192) {
    			modalHeight = isMobile ? '75vh' : '80vh';
    		}

    		if ($$self.$$.dirty[0] & /*$AppData*/ 1) {
    			$$invalidate(5, allFactionsEnabled = $AppData.HL.ShowLB && $AppData.HL.ShowM && $AppData.HL.ShowW && $AppData.HL.ShowGB && $AppData.HL.ShowC && $AppData.HL.ShowH && $AppData.HL.ShowD);
    		}

    		if ($$self.$$.dirty[0] & /*$AppData*/ 1) {
    			$$invalidate(4, allTypesEnabled = $AppData.HL.ShowInt && $AppData.HL.ShowAgi && $AppData.HL.ShowStr);
    		}

    		if ($$self.$$.dirty[0] & /*$AppData*/ 1) {
    			$$invalidate(3, allClassEnabled = $AppData.HL.ShowMage && $AppData.HL.ShowWar && $AppData.HL.ShowTank && $AppData.HL.ShowSup && $AppData.HL.ShowRan);
    		}
    	};

    	return [
    		$AppData,
    		displayList,
    		openFilters,
    		allClassEnabled,
    		allTypesEnabled,
    		allFactionsEnabled,
    		dispatch,
    		updateFilters,
    		updateSearch,
    		handleHeroClick,
    		handleHeaderClick,
    		handleFilterMasterButtonClick,
    		dynamicSearch,
    		isMobile,
    		input_input_handler,
    		click_handler,
    		click_handler_1,
    		click_handler_2,
    		click_handler_3,
    		click_handler_4,
    		click_handler_5,
    		click_handler_6,
    		click_handler_7,
    		click_handler_8,
    		click_handler_9,
    		click_handler_10,
    		click_handler_11,
    		click_handler_12,
    		click_handler_13,
    		click_handler_14,
    		click_handler_15,
    		click_handler_16,
    		click_handler_17,
    		click_handler_18,
    		func,
    		click_handler_19,
    		click_handler_20,
    		click_handler_21,
    		click_handler_22
    	];
    }

    class HeroList extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$9, create_fragment$9, safe_not_equal, { isMobile: 13 }, null, [-1, -1]);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "HeroList",
    			options,
    			id: create_fragment$9.name
    		});
    	}

    	get isMobile() {
    		throw new Error_1$3("<HeroList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isMobile(value) {
    		throw new Error_1$3("<HeroList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\shared\CircleMenu.svelte generated by Svelte v3.41.0 */

    const { Error: Error_1$2 } = globals;
    const file$5 = "src\\shared\\CircleMenu.svelte";

    function get_each_context$4(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[17] = list[i];
    	child_ctx[19] = i;
    	return child_ctx;
    }

    // (88:2) {:else}
    function create_else_block$4(ctx) {
    	let span;
    	let t_value = /*fullItems*/ ctx[4][/*activeItem*/ ctx[6]] + "";
    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text$2(t_value);
    			add_location(span, file$5, 88, 3, 2664);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*fullItems, activeItem*/ 80 && t_value !== (t_value = /*fullItems*/ ctx[4][/*activeItem*/ ctx[6]] + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$4.name,
    		type: "else",
    		source: "(88:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (84:2) {#if menuOpen}
    function create_if_block$4(ctx) {
    	let span0;
    	let t0;
    	let span1;
    	let t1;
    	let span2;

    	const block = {
    		c: function create() {
    			span0 = element("span");
    			t0 = space();
    			span1 = element("span");
    			t1 = space();
    			span2 = element("span");
    			attr_dev(span0, "class", "lines line-1 svelte-7hqu64");
    			add_location(span0, file$5, 84, 3, 2536);
    			attr_dev(span1, "class", "lines line-2 svelte-7hqu64");
    			add_location(span1, file$5, 85, 3, 2575);
    			attr_dev(span2, "class", "lines line-3 svelte-7hqu64");
    			add_location(span2, file$5, 86, 3, 2614);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span0, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, span1, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, span2, anchor);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span0);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(span1);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(span2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$4.name,
    		type: "if",
    		source: "(84:2) {#if menuOpen}",
    		ctx
    	});

    	return block;
    }

    // (93:1) {#each menuItems as item, i}
    function create_each_block$4(ctx) {
    	let button;
    	let t0_value = /*item*/ ctx[17] + "";
    	let t0;
    	let t1;
    	let button_style_value;
    	let mounted;
    	let dispose;

    	function click_handler_1(...args) {
    		return /*click_handler_1*/ ctx[15](/*i*/ ctx[19], ...args);
    	}

    	const block = {
    		c: function create() {
    			button = element("button");
    			t0 = text$2(t0_value);
    			t1 = space();
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "menu-item svelte-7hqu64");
    			attr_dev(button, "style", button_style_value = /*menuItemsStyle*/ ctx[3][/*i*/ ctx[19]]);
    			add_location(button, file$5, 93, 2, 2758);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, t0);
    			append_dev(button, t1);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", click_handler_1, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*menuItems*/ 4 && t0_value !== (t0_value = /*item*/ ctx[17] + "")) set_data_dev(t0, t0_value);

    			if (dirty & /*menuItemsStyle*/ 8 && button_style_value !== (button_style_value = /*menuItemsStyle*/ ctx[3][/*i*/ ctx[19]])) {
    				attr_dev(button, "style", button_style_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$4.name,
    		type: "each",
    		source: "(93:1) {#each menuItems as item, i}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$8(ctx) {
    	let div0;
    	let t0;
    	let div1;
    	let button;
    	let button_class_value;
    	let button_style_value;
    	let t1;
    	let mounted;
    	let dispose;

    	function select_block_type(ctx, dirty) {
    		if (/*menuOpen*/ ctx[8]) return create_if_block$4;
    		return create_else_block$4;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);
    	let each_value = /*menuItems*/ ctx[2];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$4(get_each_context$4(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = space();
    			div1 = element("div");
    			button = element("button");
    			if_block.c();
    			t1 = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div0, "class", "background svelte-7hqu64");
    			set_style(div0, "z-index", /*zIndexBase*/ ctx[7] + 1);
    			toggle_class(div0, "menu-open", /*menuOpen*/ ctx[8]);
    			add_location(div0, file$5, 59, 0, 1948);
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", button_class_value = "menu-open-button menu-len-" + /*menuItems*/ ctx[2].length + " svelte-7hqu64");
    			attr_dev(button, "style", button_style_value = "" + (/*fullItemsStyle*/ ctx[5][/*activeItem*/ ctx[6]] + ";"));
    			toggle_class(button, "menu-open", /*menuOpen*/ ctx[8]);
    			add_location(button, file$5, 76, 1, 2327);
    			attr_dev(div1, "class", "menu svelte-7hqu64");
    			set_style(div1, "width", /*containerWidth*/ ctx[0]);
    			set_style(div1, "height", /*containerHeight*/ ctx[1]);

    			set_style(div1, "z-index", /*menuOpen*/ ctx[8]
    			? /*zIndexBase*/ ctx[7] + 1
    			: /*zIndexBase*/ ctx[7]);

    			set_style(div1, "top", /*yOffset*/ ctx[10] + "px");
    			set_style(div1, "left", /*xOffset*/ ctx[9] + "px");
    			toggle_class(div1, "menu-open", /*menuOpen*/ ctx[8]);
    			add_location(div1, file$5, 66, 0, 2108);
    		},
    		l: function claim(nodes) {
    			throw new Error_1$2("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div1, anchor);
    			append_dev(div1, button);
    			if_block.m(button, null);
    			append_dev(div1, t1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div1, null);
    			}

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*click_handler*/ ctx[14], false, false, false),
    					listen_dev(button, "click", /*handleMenuClick*/ ctx[11], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*zIndexBase*/ 128) {
    				set_style(div0, "z-index", /*zIndexBase*/ ctx[7] + 1);
    			}

    			if (dirty & /*menuOpen*/ 256) {
    				toggle_class(div0, "menu-open", /*menuOpen*/ ctx[8]);
    			}

    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(button, null);
    				}
    			}

    			if (dirty & /*menuItems*/ 4 && button_class_value !== (button_class_value = "menu-open-button menu-len-" + /*menuItems*/ ctx[2].length + " svelte-7hqu64")) {
    				attr_dev(button, "class", button_class_value);
    			}

    			if (dirty & /*fullItemsStyle, activeItem*/ 96 && button_style_value !== (button_style_value = "" + (/*fullItemsStyle*/ ctx[5][/*activeItem*/ ctx[6]] + ";"))) {
    				attr_dev(button, "style", button_style_value);
    			}

    			if (dirty & /*menuItems, menuOpen*/ 260) {
    				toggle_class(button, "menu-open", /*menuOpen*/ ctx[8]);
    			}

    			if (dirty & /*menuItemsStyle, handleOptionClick, menuItems*/ 4108) {
    				each_value = /*menuItems*/ ctx[2];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$4(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$4(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div1, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (dirty & /*containerWidth*/ 1) {
    				set_style(div1, "width", /*containerWidth*/ ctx[0]);
    			}

    			if (dirty & /*containerHeight*/ 2) {
    				set_style(div1, "height", /*containerHeight*/ ctx[1]);
    			}

    			if (dirty & /*menuOpen, zIndexBase*/ 384) {
    				set_style(div1, "z-index", /*menuOpen*/ ctx[8]
    				? /*zIndexBase*/ ctx[7] + 1
    				: /*zIndexBase*/ ctx[7]);
    			}

    			if (dirty & /*yOffset*/ 1024) {
    				set_style(div1, "top", /*yOffset*/ ctx[10] + "px");
    			}

    			if (dirty & /*xOffset*/ 512) {
    				set_style(div1, "left", /*xOffset*/ ctx[9] + "px");
    			}

    			if (dirty & /*menuOpen*/ 256) {
    				toggle_class(div1, "menu-open", /*menuOpen*/ ctx[8]);
    			}
    		},
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div1);
    			if_block.d();
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$8.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const menuMaxRadius = 125; // px

    function instance$8($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('CircleMenu', slots, []);
    	let { containerWidth = '80px' } = $$props;
    	let { containerHeight = '80px' } = $$props;
    	let { menuItems = [] } = $$props;
    	let { menuItemsStyle = [] } = $$props;
    	let { fullItems = [] } = $$props;
    	let { fullItemsStyle = [] } = $$props;
    	let { activeItem = 0 } = $$props;

    	let { menuItemClickCallback = () => {
    		
    	} } = $$props;

    	let { zIndexBase = 1 } = $$props;
    	let menuOpen = false;
    	let xOffset = 0; // px
    	let yOffset = 0; // px

    	onMount(async () => {
    		if (menuItems.length !== fullItems.length) throw new Error('menuItems must be the same length as fullItems.');
    		if (menuItemsStyle.length !== menuItems.length) throw new Error('menuItemsStyle must be the same length as menuItems.');
    		if (fullItemsStyle.length !== fullItems.length) throw new Error('fullItemsStyle must be the same length as fullItems.');
    	});

    	function calculateOffset(node) {
    		const rect = node.getBoundingClientRect();
    		const h = window.innerHeight;
    		const w = window.innerWidth;

    		if (rect.top < menuMaxRadius) {
    			// offset from top if menu is too close to the top
    			$$invalidate(10, yOffset = menuMaxRadius + 45 - rect.top); // 45px for nav bar
    		} else if (h - rect.bottom < menuMaxRadius) {
    			// offset from bottom if menu is too close to the bottom
    			$$invalidate(10, yOffset = -1 * (menuMaxRadius + 45 - (h - rect.bottom))); // 45px for bottom filters
    		}

    		if (rect.left < menuMaxRadius) {
    			// offset from left if menu is too close to the left
    			$$invalidate(9, xOffset = menuMaxRadius - rect.left);
    		} else if (w - rect.right < menuMaxRadius) {
    			// offset from right if menu is too close to the right
    			$$invalidate(9, xOffset = -1 * (menuMaxRadius - (w - rect.right)));
    		}
    	}

    	function handleMenuClick(event) {
    		event.stopPropagation();
    		$$invalidate(8, menuOpen = !menuOpen);
    		calculateOffset(event.target);
    	}

    	function handleOptionClick(event, index) {
    		event.stopPropagation();
    		$$invalidate(8, menuOpen = false);
    		menuItemClickCallback(index);
    	}

    	const writable_props = [
    		'containerWidth',
    		'containerHeight',
    		'menuItems',
    		'menuItemsStyle',
    		'fullItems',
    		'fullItemsStyle',
    		'activeItem',
    		'menuItemClickCallback',
    		'zIndexBase'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<CircleMenu> was created with unknown prop '${key}'`);
    	});

    	const click_handler = e => {
    		e.stopPropagation();
    		$$invalidate(8, menuOpen = false);
    	};

    	const click_handler_1 = (i, e) => handleOptionClick(e, i);

    	$$self.$$set = $$props => {
    		if ('containerWidth' in $$props) $$invalidate(0, containerWidth = $$props.containerWidth);
    		if ('containerHeight' in $$props) $$invalidate(1, containerHeight = $$props.containerHeight);
    		if ('menuItems' in $$props) $$invalidate(2, menuItems = $$props.menuItems);
    		if ('menuItemsStyle' in $$props) $$invalidate(3, menuItemsStyle = $$props.menuItemsStyle);
    		if ('fullItems' in $$props) $$invalidate(4, fullItems = $$props.fullItems);
    		if ('fullItemsStyle' in $$props) $$invalidate(5, fullItemsStyle = $$props.fullItemsStyle);
    		if ('activeItem' in $$props) $$invalidate(6, activeItem = $$props.activeItem);
    		if ('menuItemClickCallback' in $$props) $$invalidate(13, menuItemClickCallback = $$props.menuItemClickCallback);
    		if ('zIndexBase' in $$props) $$invalidate(7, zIndexBase = $$props.zIndexBase);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		containerWidth,
    		containerHeight,
    		menuItems,
    		menuItemsStyle,
    		fullItems,
    		fullItemsStyle,
    		activeItem,
    		menuItemClickCallback,
    		zIndexBase,
    		menuOpen,
    		xOffset,
    		yOffset,
    		menuMaxRadius,
    		calculateOffset,
    		handleMenuClick,
    		handleOptionClick
    	});

    	$$self.$inject_state = $$props => {
    		if ('containerWidth' in $$props) $$invalidate(0, containerWidth = $$props.containerWidth);
    		if ('containerHeight' in $$props) $$invalidate(1, containerHeight = $$props.containerHeight);
    		if ('menuItems' in $$props) $$invalidate(2, menuItems = $$props.menuItems);
    		if ('menuItemsStyle' in $$props) $$invalidate(3, menuItemsStyle = $$props.menuItemsStyle);
    		if ('fullItems' in $$props) $$invalidate(4, fullItems = $$props.fullItems);
    		if ('fullItemsStyle' in $$props) $$invalidate(5, fullItemsStyle = $$props.fullItemsStyle);
    		if ('activeItem' in $$props) $$invalidate(6, activeItem = $$props.activeItem);
    		if ('menuItemClickCallback' in $$props) $$invalidate(13, menuItemClickCallback = $$props.menuItemClickCallback);
    		if ('zIndexBase' in $$props) $$invalidate(7, zIndexBase = $$props.zIndexBase);
    		if ('menuOpen' in $$props) $$invalidate(8, menuOpen = $$props.menuOpen);
    		if ('xOffset' in $$props) $$invalidate(9, xOffset = $$props.xOffset);
    		if ('yOffset' in $$props) $$invalidate(10, yOffset = $$props.yOffset);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		containerWidth,
    		containerHeight,
    		menuItems,
    		menuItemsStyle,
    		fullItems,
    		fullItemsStyle,
    		activeItem,
    		zIndexBase,
    		menuOpen,
    		xOffset,
    		yOffset,
    		handleMenuClick,
    		handleOptionClick,
    		menuItemClickCallback,
    		click_handler,
    		click_handler_1
    	];
    }

    class CircleMenu extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$8, create_fragment$8, safe_not_equal, {
    			containerWidth: 0,
    			containerHeight: 1,
    			menuItems: 2,
    			menuItemsStyle: 3,
    			fullItems: 4,
    			fullItemsStyle: 5,
    			activeItem: 6,
    			menuItemClickCallback: 13,
    			zIndexBase: 7
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "CircleMenu",
    			options,
    			id: create_fragment$8.name
    		});
    	}

    	get containerWidth() {
    		throw new Error_1$2("<CircleMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set containerWidth(value) {
    		throw new Error_1$2("<CircleMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get containerHeight() {
    		throw new Error_1$2("<CircleMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set containerHeight(value) {
    		throw new Error_1$2("<CircleMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get menuItems() {
    		throw new Error_1$2("<CircleMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set menuItems(value) {
    		throw new Error_1$2("<CircleMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get menuItemsStyle() {
    		throw new Error_1$2("<CircleMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set menuItemsStyle(value) {
    		throw new Error_1$2("<CircleMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fullItems() {
    		throw new Error_1$2("<CircleMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fullItems(value) {
    		throw new Error_1$2("<CircleMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fullItemsStyle() {
    		throw new Error_1$2("<CircleMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fullItemsStyle(value) {
    		throw new Error_1$2("<CircleMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get activeItem() {
    		throw new Error_1$2("<CircleMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set activeItem(value) {
    		throw new Error_1$2("<CircleMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get menuItemClickCallback() {
    		throw new Error_1$2("<CircleMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set menuItemClickCallback(value) {
    		throw new Error_1$2("<CircleMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get zIndexBase() {
    		throw new Error_1$2("<CircleMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set zIndexBase(value) {
    		throw new Error_1$2("<CircleMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\shared\AscensionMenu.svelte generated by Svelte v3.41.0 */

    function create_fragment$7(ctx) {
    	let circlemenu;
    	let current;

    	circlemenu = new CircleMenu({
    			props: {
    				menuItems: /*menuItems*/ ctx[2],
    				menuItemsStyle: /*menuItemsStyle*/ ctx[4],
    				fullItems: /*fullItems*/ ctx[3],
    				fullItemsStyle: /*fullItemsStyle*/ ctx[5],
    				activeItem: /*activeItem*/ ctx[0],
    				zIndexBase: /*zIndexBase*/ ctx[1],
    				containerWidth: "80px",
    				containerHeight: "30px",
    				menuItemClickCallback: /*handleMenuItemClick*/ ctx[6]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(circlemenu.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(circlemenu, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const circlemenu_changes = {};
    			if (dirty & /*activeItem*/ 1) circlemenu_changes.activeItem = /*activeItem*/ ctx[0];
    			if (dirty & /*zIndexBase*/ 2) circlemenu_changes.zIndexBase = /*zIndexBase*/ ctx[1];
    			circlemenu.$set(circlemenu_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(circlemenu.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(circlemenu.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(circlemenu, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$7.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$7($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('AscensionMenu', slots, []);

    	let { menuItemChangeCallback = () => {
    		
    	} } = $$props;

    	let { activeItem = 0 } = $$props;
    	let { zIndexBase = 1 } = $$props;
    	let menuItems = ['E', 'E+', 'L', 'L+', 'M', 'M+', 'A'];
    	let fullItems = ['Elite', 'Elite+', 'Legendary', 'Legendary+', 'Mythic', 'Mythic+', 'Ascended'];

    	let menuItemsStyle = [
    		'background-color: #AF3CEA; color: white; border: 2px solid #AF3CEA;',
    		'background-color: #AF3CEA; color: white; border: 2px solid #6D2691;',
    		'background-color: #F7BC19; color: white; border: 2px solid #F7BC19;',
    		'background-color: #F7BC19; color: white; border: 2px solid #E0920B;',
    		'background-color: #E60B51; color: white; border: 2px solid #E60B51;',
    		'background-color: #E60B51; color: white; border: 2px solid #A6083A;',
    		'background: linear-gradient(#91BDFF, transparent), linear-gradient(-45deg, #E196FF, transparent), linear-gradient(45deg, #B1A3FE, transparent); background-blend-mode: multiply; color: white; border: 2px solid #B289E8;'
    	];

    	let fullItemsStyle = [
    		'background-color: #AF3CEA; color: white; border: 2px solid #AF3CEA;',
    		'background-color: #AF3CEA; color: white; border: 2px solid #6D2691;',
    		'background-color: #F7BC19; color: white; border: 2px solid #F7BC19;',
    		'background-color: #F7BC19; color: white; border: 2px solid #E0920B;',
    		'background-color: #E60B51; color: white; border: 2px solid #E60B51;',
    		'background-color: #E60B51; color: white; border: 2px solid #A6083A;',
    		'background: linear-gradient(#91BDFF, transparent), linear-gradient(-45deg, #E196FF, transparent), linear-gradient(45deg, #B1A3FE, transparent); background-blend-mode: multiply; color: white; border: 2px solid #B289E8;'
    	];

    	function handleMenuItemClick(index) {
    		$$invalidate(0, activeItem = index);
    		menuItemChangeCallback(index);
    	}

    	const writable_props = ['menuItemChangeCallback', 'activeItem', 'zIndexBase'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<AscensionMenu> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('menuItemChangeCallback' in $$props) $$invalidate(7, menuItemChangeCallback = $$props.menuItemChangeCallback);
    		if ('activeItem' in $$props) $$invalidate(0, activeItem = $$props.activeItem);
    		if ('zIndexBase' in $$props) $$invalidate(1, zIndexBase = $$props.zIndexBase);
    	};

    	$$self.$capture_state = () => ({
    		CircleMenu,
    		menuItemChangeCallback,
    		activeItem,
    		zIndexBase,
    		menuItems,
    		fullItems,
    		menuItemsStyle,
    		fullItemsStyle,
    		handleMenuItemClick
    	});

    	$$self.$inject_state = $$props => {
    		if ('menuItemChangeCallback' in $$props) $$invalidate(7, menuItemChangeCallback = $$props.menuItemChangeCallback);
    		if ('activeItem' in $$props) $$invalidate(0, activeItem = $$props.activeItem);
    		if ('zIndexBase' in $$props) $$invalidate(1, zIndexBase = $$props.zIndexBase);
    		if ('menuItems' in $$props) $$invalidate(2, menuItems = $$props.menuItems);
    		if ('fullItems' in $$props) $$invalidate(3, fullItems = $$props.fullItems);
    		if ('menuItemsStyle' in $$props) $$invalidate(4, menuItemsStyle = $$props.menuItemsStyle);
    		if ('fullItemsStyle' in $$props) $$invalidate(5, fullItemsStyle = $$props.fullItemsStyle);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		activeItem,
    		zIndexBase,
    		menuItems,
    		fullItems,
    		menuItemsStyle,
    		fullItemsStyle,
    		handleMenuItemClick,
    		menuItemChangeCallback
    	];
    }

    class AscensionMenu extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$7, create_fragment$7, safe_not_equal, {
    			menuItemChangeCallback: 7,
    			activeItem: 0,
    			zIndexBase: 1
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "AscensionMenu",
    			options,
    			id: create_fragment$7.name
    		});
    	}

    	get menuItemChangeCallback() {
    		throw new Error("<AscensionMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set menuItemChangeCallback(value) {
    		throw new Error("<AscensionMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get activeItem() {
    		throw new Error("<AscensionMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set activeItem(value) {
    		throw new Error("<AscensionMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get zIndexBase() {
    		throw new Error("<AscensionMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set zIndexBase(value) {
    		throw new Error("<AscensionMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\shared\SIMenu.svelte generated by Svelte v3.41.0 */

    function create_fragment$6(ctx) {
    	let circlemenu;
    	let current;

    	circlemenu = new CircleMenu({
    			props: {
    				menuItems: /*menuItems*/ ctx[2],
    				menuItemsStyle: /*menuItemsStyle*/ ctx[4],
    				fullItems: /*fullItems*/ ctx[3],
    				fullItemsStyle: /*fullItemsStyle*/ ctx[5],
    				activeItem: /*activeItem*/ ctx[0],
    				zIndexBase: /*zIndexBase*/ ctx[1],
    				containerWidth: "80px",
    				containerHeight: "30px",
    				menuItemClickCallback: /*handleMenuItemClick*/ ctx[6]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(circlemenu.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(circlemenu, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const circlemenu_changes = {};
    			if (dirty & /*activeItem*/ 1) circlemenu_changes.activeItem = /*activeItem*/ ctx[0];
    			if (dirty & /*zIndexBase*/ 2) circlemenu_changes.zIndexBase = /*zIndexBase*/ ctx[1];
    			circlemenu.$set(circlemenu_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(circlemenu.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(circlemenu.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(circlemenu, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$6.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$6($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('SIMenu', slots, []);

    	let { menuItemChangeCallback = () => {
    		
    	} } = $$props;

    	let { activeItem = 0 } = $$props;
    	let { zIndexBase = 1 } = $$props;
    	let menuItems = ['OFF', '+0', '+5', '+10', '+15', '+20', '+25', '+30', '+35', '+40'];

    	let fullItems = [
    		'SI OFF',
    		'SI +0',
    		'SI +5',
    		'SI +10',
    		'SI +15',
    		'SI +20',
    		'SI +25',
    		'SI +30',
    		'SI +35',
    		'SI +40'
    	];

    	let menuItemsStyle = [
    		'background-color: #6B8DF2; color: white; border: 2px solid #6B8DF2;',
    		'background-color: #6B8DF2; color: white; border: 2px solid #6B8DF2;',
    		'background-color: #6B8DF2; color: white; border: 2px solid #6B8DF2;',
    		'background-color: #6B8DF2; color: white; border: 2px solid #6B8DF2;',
    		'background-color: #6B8DF2; color: white; border: 2px solid #6B8DF2;',
    		'background-color: #6B8DF2; color: white; border: 2px solid #6B8DF2;',
    		'background-color: #6B8DF2; color: white; border: 2px solid #6B8DF2;',
    		'background-color: #6B8DF2; color: white; border: 2px solid #6B8DF2;',
    		'background-color: #6B8DF2; color: white; border: 2px solid #6B8DF2;',
    		'background-color: #6B8DF2; color: white; border: 2px solid #6B8DF2;'
    	];

    	let fullItemsStyle = [
    		'background-color: #6B8DF2; color: white; border: 2px solid #6B8DF2;',
    		'background-color: #6B8DF2; color: white; border: 2px solid #6B8DF2;',
    		'background-color: #6B8DF2; color: white; border: 2px solid #6B8DF2;',
    		'background-color: #6B8DF2; color: white; border: 2px solid #6B8DF2;',
    		'background-color: #6B8DF2; color: white; border: 2px solid #6B8DF2;',
    		'background-color: #6B8DF2; color: white; border: 2px solid #6B8DF2;',
    		'background-color: #6B8DF2; color: white; border: 2px solid #6B8DF2;',
    		'background-color: #6B8DF2; color: white; border: 2px solid #6B8DF2;',
    		'background-color: #6B8DF2; color: white; border: 2px solid #6B8DF2;',
    		'background-color: #6B8DF2; color: white; border: 2px solid #6B8DF2;'
    	];

    	function handleMenuItemClick(index) {
    		$$invalidate(0, activeItem = index);
    		menuItemChangeCallback(index);
    	}

    	const writable_props = ['menuItemChangeCallback', 'activeItem', 'zIndexBase'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<SIMenu> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('menuItemChangeCallback' in $$props) $$invalidate(7, menuItemChangeCallback = $$props.menuItemChangeCallback);
    		if ('activeItem' in $$props) $$invalidate(0, activeItem = $$props.activeItem);
    		if ('zIndexBase' in $$props) $$invalidate(1, zIndexBase = $$props.zIndexBase);
    	};

    	$$self.$capture_state = () => ({
    		CircleMenu,
    		menuItemChangeCallback,
    		activeItem,
    		zIndexBase,
    		menuItems,
    		fullItems,
    		menuItemsStyle,
    		fullItemsStyle,
    		handleMenuItemClick
    	});

    	$$self.$inject_state = $$props => {
    		if ('menuItemChangeCallback' in $$props) $$invalidate(7, menuItemChangeCallback = $$props.menuItemChangeCallback);
    		if ('activeItem' in $$props) $$invalidate(0, activeItem = $$props.activeItem);
    		if ('zIndexBase' in $$props) $$invalidate(1, zIndexBase = $$props.zIndexBase);
    		if ('menuItems' in $$props) $$invalidate(2, menuItems = $$props.menuItems);
    		if ('fullItems' in $$props) $$invalidate(3, fullItems = $$props.fullItems);
    		if ('menuItemsStyle' in $$props) $$invalidate(4, menuItemsStyle = $$props.menuItemsStyle);
    		if ('fullItemsStyle' in $$props) $$invalidate(5, fullItemsStyle = $$props.fullItemsStyle);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		activeItem,
    		zIndexBase,
    		menuItems,
    		fullItems,
    		menuItemsStyle,
    		fullItemsStyle,
    		handleMenuItemClick,
    		menuItemChangeCallback
    	];
    }

    class SIMenu extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$6, create_fragment$6, safe_not_equal, {
    			menuItemChangeCallback: 7,
    			activeItem: 0,
    			zIndexBase: 1
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SIMenu",
    			options,
    			id: create_fragment$6.name
    		});
    	}

    	get menuItemChangeCallback() {
    		throw new Error("<SIMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set menuItemChangeCallback(value) {
    		throw new Error("<SIMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get activeItem() {
    		throw new Error("<SIMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set activeItem(value) {
    		throw new Error("<SIMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get zIndexBase() {
    		throw new Error("<SIMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set zIndexBase(value) {
    		throw new Error("<SIMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\shared\FurnMenu.svelte generated by Svelte v3.41.0 */

    function create_fragment$5(ctx) {
    	let circlemenu;
    	let current;

    	circlemenu = new CircleMenu({
    			props: {
    				menuItems: /*menuItems*/ ctx[2],
    				menuItemsStyle: /*menuItemsStyle*/ ctx[4],
    				fullItems: /*fullItems*/ ctx[3],
    				fullItemsStyle: /*fullItemsStyle*/ ctx[5],
    				activeItem: /*activeItem*/ ctx[0],
    				zIndexBase: /*zIndexBase*/ ctx[1],
    				containerWidth: "80px",
    				containerHeight: "30px",
    				menuItemClickCallback: /*handleMenuItemClick*/ ctx[6]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(circlemenu.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(circlemenu, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const circlemenu_changes = {};
    			if (dirty & /*activeItem*/ 1) circlemenu_changes.activeItem = /*activeItem*/ ctx[0];
    			if (dirty & /*zIndexBase*/ 2) circlemenu_changes.zIndexBase = /*zIndexBase*/ ctx[1];
    			circlemenu.$set(circlemenu_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(circlemenu.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(circlemenu.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(circlemenu, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$5.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$5($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('FurnMenu', slots, []);

    	let { menuItemChangeCallback = () => {
    		
    	} } = $$props;

    	let { activeItem = 0 } = $$props;
    	let { zIndexBase = 1 } = $$props;
    	let menuItems = ['0F', '3F', '9F', '36F'];
    	let fullItems = ['0 Furn', '3 Furn', '9 Furn'];

    	let menuItemsStyle = [
    		'background-color: #6B8DF2; color: white; border: 2px solid #6B8DF2;',
    		'background-color: #6B8DF2; color: white; border: 2px solid #6B8DF2;',
    		'background-color: #6B8DF2; color: white; border: 2px solid #6B8DF2;'
    	];

    	let fullItemsStyle = [
    		'background-color: #6B8DF2; color: white; border: 2px solid #6B8DF2;',
    		'background-color: #6B8DF2; color: white; border: 2px solid #6B8DF2;',
    		'background-color: #6B8DF2; color: white; border: 2px solid #6B8DF2;'
    	];

    	function handleMenuItemClick(index) {
    		$$invalidate(0, activeItem = index);
    		menuItemChangeCallback(index);
    	}

    	const writable_props = ['menuItemChangeCallback', 'activeItem', 'zIndexBase'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<FurnMenu> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('menuItemChangeCallback' in $$props) $$invalidate(7, menuItemChangeCallback = $$props.menuItemChangeCallback);
    		if ('activeItem' in $$props) $$invalidate(0, activeItem = $$props.activeItem);
    		if ('zIndexBase' in $$props) $$invalidate(1, zIndexBase = $$props.zIndexBase);
    	};

    	$$self.$capture_state = () => ({
    		CircleMenu,
    		menuItemChangeCallback,
    		activeItem,
    		zIndexBase,
    		menuItems,
    		fullItems,
    		menuItemsStyle,
    		fullItemsStyle,
    		handleMenuItemClick
    	});

    	$$self.$inject_state = $$props => {
    		if ('menuItemChangeCallback' in $$props) $$invalidate(7, menuItemChangeCallback = $$props.menuItemChangeCallback);
    		if ('activeItem' in $$props) $$invalidate(0, activeItem = $$props.activeItem);
    		if ('zIndexBase' in $$props) $$invalidate(1, zIndexBase = $$props.zIndexBase);
    		if ('menuItems' in $$props) $$invalidate(2, menuItems = $$props.menuItems);
    		if ('fullItems' in $$props) $$invalidate(3, fullItems = $$props.fullItems);
    		if ('menuItemsStyle' in $$props) $$invalidate(4, menuItemsStyle = $$props.menuItemsStyle);
    		if ('fullItemsStyle' in $$props) $$invalidate(5, fullItemsStyle = $$props.fullItemsStyle);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		activeItem,
    		zIndexBase,
    		menuItems,
    		fullItems,
    		menuItemsStyle,
    		fullItemsStyle,
    		handleMenuItemClick,
    		menuItemChangeCallback
    	];
    }

    class FurnMenu extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$5, create_fragment$5, safe_not_equal, {
    			menuItemChangeCallback: 7,
    			activeItem: 0,
    			zIndexBase: 1
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "FurnMenu",
    			options,
    			id: create_fragment$5.name
    		});
    	}

    	get menuItemChangeCallback() {
    		throw new Error("<FurnMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set menuItemChangeCallback(value) {
    		throw new Error("<FurnMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get activeItem() {
    		throw new Error("<FurnMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set activeItem(value) {
    		throw new Error("<FurnMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get zIndexBase() {
    		throw new Error("<FurnMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set zIndexBase(value) {
    		throw new Error("<FurnMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\components\MyHeroes.svelte generated by Svelte v3.41.0 */

    const { Error: Error_1$1, console: console_1 } = globals;
    const file$4 = "src\\components\\MyHeroes.svelte";

    function get_each_context_1$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[62] = list[i];
    	return child_ctx;
    }

    function get_each_context$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[62] = list[i];
    	return child_ctx;
    }

    function get_each_context_2$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[67] = list[i];
    	child_ctx[69] = i;
    	return child_ctx;
    }

    // (392:2) {#if !$AppData.dismissMHSearchInfo}
    function create_if_block_4$2(ctx) {
    	let div1;
    	let div0;
    	let tutorialbox;
    	let current;

    	tutorialbox = new TutorialBox({
    			props: {
    				clickable: true,
    				onClick: /*func*/ ctx[44],
    				$$slots: { default: [create_default_slot$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			create_component(tutorialbox.$$.fragment);
    			attr_dev(div0, "class", "tutorialBoxContainer svelte-7dijez");
    			add_location(div0, file$4, 393, 4, 17172);
    			attr_dev(div1, "class", "searchInfo svelte-7dijez");
    			add_location(div1, file$4, 392, 3, 17142);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			mount_component(tutorialbox, div0, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const tutorialbox_changes = {};
    			if (dirty[0] & /*$AppData*/ 1) tutorialbox_changes.onClick = /*func*/ ctx[44];

    			if (dirty[2] & /*$$scope*/ 256) {
    				tutorialbox_changes.$$scope = { dirty, ctx };
    			}

    			tutorialbox.$set(tutorialbox_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(tutorialbox.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(tutorialbox.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_component(tutorialbox);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$2.name,
    		type: "if",
    		source: "(392:2) {#if !$AppData.dismissMHSearchInfo}",
    		ctx
    	});

    	return block;
    }

    // (395:5) <TutorialBox clickable={true} onClick={() => {$AppData.dismissMHSearchInfo = true; dispatch('saveData');}}>
    function create_default_slot$1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text$2("Just start typing to search! Pressing tab will also open and close the filter area.");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$1.name,
    		type: "slot",
    		source: "(395:5) <TutorialBox clickable={true} onClick={() => {$AppData.dismissMHSearchInfo = true; dispatch('saveData');}}>",
    		ctx
    	});

    	return block;
    }

    // (403:4) {#each sections as section, i}
    function create_each_block_2$1(ctx) {
    	let li;
    	let button;
    	let t0_value = /*section*/ ctx[67] + "";
    	let t0;
    	let t1;
    	let mounted;
    	let dispose;

    	function click_handler_19() {
    		return /*click_handler_19*/ ctx[45](/*i*/ ctx[69]);
    	}

    	const block = {
    		c: function create() {
    			li = element("li");
    			button = element("button");
    			t0 = text$2(t0_value);
    			t1 = space();
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "sectionButton svelte-7dijez");
    			toggle_class(button, "active", /*$AppData*/ ctx[0].MH.openSection === /*i*/ ctx[69]);
    			add_location(button, file$4, 404, 5, 17586);
    			add_location(li, file$4, 403, 4, 17575);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, button);
    			append_dev(button, t0);
    			append_dev(li, t1);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", click_handler_19, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty[0] & /*$AppData*/ 1) {
    				toggle_class(button, "active", /*$AppData*/ ctx[0].MH.openSection === /*i*/ ctx[69]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_2$1.name,
    		type: "each",
    		source: "(403:4) {#each sections as section, i}",
    		ctx
    	});

    	return block;
    }

    // (488:42) 
    function create_if_block_2$2(ctx) {
    	let section;

    	function select_block_type_2(ctx, dirty) {
    		if (/*unownedHeroList*/ ctx[4].length === 0) return create_if_block_3$2;
    		return create_else_block_1$1;
    	}

    	let current_block_type = select_block_type_2(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			section = element("section");
    			if_block.c();
    			attr_dev(section, "class", "MHSection unownedSection svelte-7dijez");
    			add_location(section, file$4, 488, 3, 21140);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			if_block.m(section, null);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type_2(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(section, null);
    				}
    			}
    		},
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$2.name,
    		type: "if",
    		source: "(488:42) ",
    		ctx
    	});

    	return block;
    }

    // (410:2) {#if $AppData.MH.openSection === 0}
    function create_if_block$3(ctx) {
    	let section;
    	let current_block_type_index;
    	let if_block;
    	let current;
    	const if_block_creators = [create_if_block_1$2, create_else_block$3];
    	const if_blocks = [];

    	function select_block_type_1(ctx, dirty) {
    		if (/*myHeroList*/ ctx[5].length === 0) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type_1(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			section = element("section");
    			if_block.c();
    			attr_dev(section, "class", "MHSection svelte-7dijez");
    			add_location(section, file$4, 410, 3, 17853);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			if_blocks[current_block_type_index].m(section, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_1(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(section, null);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			if_blocks[current_block_type_index].d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$3.name,
    		type: "if",
    		source: "(410:2) {#if $AppData.MH.openSection === 0}",
    		ctx
    	});

    	return block;
    }

    // (494:4) {:else}
    function create_else_block_1$1(ctx) {
    	let div;
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let each_value_1 = /*unownedHeroList*/ ctx[4];
    	validate_each_argument(each_value_1);
    	const get_key = ctx => /*hero*/ ctx[62].id;
    	validate_each_keys(ctx, each_value_1, get_each_context_1$2, get_key);

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		let child_ctx = get_each_context_1$2(ctx, each_value_1, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block_1$2(key, child_ctx));
    	}

    	const block = {
    		c: function create() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div, "class", "MHGrid svelte-7dijez");
    			add_location(div, file$4, 494, 5, 21336);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*handleHeroClaim, unownedHeroList, $AppData*/ 16401) {
    				each_value_1 = /*unownedHeroList*/ ctx[4];
    				validate_each_argument(each_value_1);
    				for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].r();
    				validate_each_keys(ctx, each_value_1, get_each_context_1$2, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value_1, each_1_lookup, div, fix_and_destroy_block, create_each_block_1$2, null, get_each_context_1$2);
    				for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].a();
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d();
    			}
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$1.name,
    		type: "else",
    		source: "(494:4) {:else}",
    		ctx
    	});

    	return block;
    }

    // (490:4) {#if unownedHeroList.length === 0}
    function create_if_block_3$2(ctx) {
    	let div;
    	let span;

    	const block = {
    		c: function create() {
    			div = element("div");
    			span = element("span");
    			span.textContent = "You own every hero in the game!";
    			add_location(span, file$4, 491, 6, 21259);
    			attr_dev(div, "class", "noHeroes svelte-7dijez");
    			add_location(div, file$4, 490, 5, 21229);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, span);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$2.name,
    		type: "if",
    		source: "(490:4) {#if unownedHeroList.length === 0}",
    		ctx
    	});

    	return block;
    }

    // (496:6) {#each unownedHeroList as hero (hero.id)}
    function create_each_block_1$2(key_1, ctx) {
    	let div14;
    	let div13;
    	let div2;
    	let div1;
    	let img0;
    	let img0_src_value;
    	let img0_alt_value;
    	let t0;
    	let div0;
    	let span0;
    	let t1_value = /*hero*/ ctx[62].faction + "";
    	let t1;
    	let t2;
    	let div7;
    	let div6;
    	let div5;
    	let div3;
    	let img1;
    	let img1_src_value;
    	let img1_alt_value;
    	let t3;
    	let div4;
    	let button;

    	let t4_value = (/*$AppData*/ ctx[0].MH.List[/*hero*/ ctx[62].id].claimed
    	? 'Remove'
    	: 'Add') + "";

    	let t4;
    	let t5;
    	let div12;
    	let div9;
    	let img2;
    	let img2_src_value;
    	let img2_alt_value;
    	let t6;
    	let div8;
    	let span1;
    	let t7_value = /*hero*/ ctx[62].type + "";
    	let t7;
    	let t8;
    	let div11;
    	let img3;
    	let img3_src_value;
    	let img3_alt_value;
    	let t9;
    	let div10;
    	let span2;
    	let t10_value = /*hero*/ ctx[62].class + "";
    	let t10;
    	let t11;
    	let p;
    	let t12_value = /*hero*/ ctx[62].name + "";
    	let t12;
    	let t13;
    	let rect;
    	let stop_animation = noop$1;
    	let mounted;
    	let dispose;

    	function click_handler_23(...args) {
    		return /*click_handler_23*/ ctx[52](/*hero*/ ctx[62], ...args);
    	}

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			div14 = element("div");
    			div13 = element("div");
    			div2 = element("div");
    			div1 = element("div");
    			img0 = element("img");
    			t0 = space();
    			div0 = element("div");
    			span0 = element("span");
    			t1 = text$2(t1_value);
    			t2 = space();
    			div7 = element("div");
    			div6 = element("div");
    			div5 = element("div");
    			div3 = element("div");
    			img1 = element("img");
    			t3 = space();
    			div4 = element("div");
    			button = element("button");
    			t4 = text$2(t4_value);
    			t5 = space();
    			div12 = element("div");
    			div9 = element("div");
    			img2 = element("img");
    			t6 = space();
    			div8 = element("div");
    			span1 = element("span");
    			t7 = text$2(t7_value);
    			t8 = space();
    			div11 = element("div");
    			img3 = element("img");
    			t9 = space();
    			div10 = element("div");
    			span2 = element("span");
    			t10 = text$2(t10_value);
    			t11 = space();
    			p = element("p");
    			t12 = text$2(t12_value);
    			t13 = space();
    			attr_dev(img0, "class", "attrImage factionImg svelte-7dijez");
    			if (!src_url_equal(img0.src, img0_src_value = "./img/factions/" + /*hero*/ ctx[62].faction.toLowerCase() + ".png")) attr_dev(img0, "src", img0_src_value);
    			attr_dev(img0, "alt", img0_alt_value = /*hero*/ ctx[62].faction);
    			add_location(img0, file$4, 500, 10, 21655);
    			attr_dev(span0, "class", "tooltipText svelte-7dijez");
    			add_location(span0, file$4, 501, 47, 21813);
    			attr_dev(div0, "class", "tooltip tooltip-faction svelte-7dijez");
    			add_location(div0, file$4, 501, 10, 21776);
    			attr_dev(div1, "class", "attrImgContainer svelte-7dijez");
    			add_location(div1, file$4, 499, 9, 21613);
    			attr_dev(div2, "class", "headArea svelte-7dijez");
    			add_location(div2, file$4, 498, 8, 21580);
    			attr_dev(img1, "class", "portrait svelte-7dijez");
    			if (!src_url_equal(img1.src, img1_src_value = /*hero*/ ctx[62].portrait)) attr_dev(img1, "src", img1_src_value);
    			attr_dev(img1, "alt", img1_alt_value = /*hero*/ ctx[62].name);
    			add_location(img1, file$4, 508, 12, 22057);
    			attr_dev(div3, "class", "flipCardFront svelte-7dijez");
    			add_location(div3, file$4, 507, 11, 22016);
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "portraitButton svelte-7dijez");
    			toggle_class(button, "owned", /*$AppData*/ ctx[0].MH.List[/*hero*/ ctx[62].id].claimed);
    			add_location(button, file$4, 511, 12, 22187);
    			attr_dev(div4, "class", "flipCardBack svelte-7dijez");
    			add_location(div4, file$4, 510, 11, 22147);
    			attr_dev(div5, "class", "flipCardInner svelte-7dijez");
    			add_location(div5, file$4, 506, 10, 21976);
    			attr_dev(div6, "class", "flipCard svelte-7dijez");
    			add_location(div6, file$4, 505, 9, 21942);
    			attr_dev(div7, "class", "headArea svelte-7dijez");
    			add_location(div7, file$4, 504, 8, 21909);
    			attr_dev(img2, "class", "attrImage typeImg svelte-7dijez");
    			if (!src_url_equal(img2.src, img2_src_value = "./img/types/" + /*hero*/ ctx[62].type.toLowerCase() + ".png")) attr_dev(img2, "src", img2_src_value);
    			attr_dev(img2, "alt", img2_alt_value = /*hero*/ ctx[62].type);
    			add_location(img2, file$4, 518, 10, 22498);
    			attr_dev(span1, "class", "tooltipText svelte-7dijez");
    			add_location(span1, file$4, 519, 44, 22639);
    			attr_dev(div8, "class", "tooltip tooltip-type svelte-7dijez");
    			add_location(div8, file$4, 519, 10, 22605);
    			attr_dev(div9, "class", "attrImgContainer svelte-7dijez");
    			add_location(div9, file$4, 517, 9, 22456);
    			attr_dev(img3, "class", "attrImage classImg svelte-7dijez");
    			if (!src_url_equal(img3.src, img3_src_value = "./img/classes/" + /*hero*/ ctx[62].class.toLowerCase() + ".png")) attr_dev(img3, "src", img3_src_value);
    			attr_dev(img3, "alt", img3_alt_value = /*hero*/ ctx[62].class);
    			add_location(img3, file$4, 522, 10, 22759);
    			attr_dev(span2, "class", "tooltipText svelte-7dijez");
    			add_location(span2, file$4, 523, 45, 22906);
    			attr_dev(div10, "class", "tooltip tooltip-class svelte-7dijez");
    			add_location(div10, file$4, 523, 10, 22871);
    			attr_dev(div11, "class", "attrImgContainer svelte-7dijez");
    			add_location(div11, file$4, 521, 9, 22717);
    			attr_dev(div12, "class", "headArea svelte-7dijez");
    			add_location(div12, file$4, 516, 8, 22423);
    			attr_dev(div13, "class", "heroHeader svelte-7dijez");
    			add_location(div13, file$4, 497, 7, 21546);
    			attr_dev(p, "class", "heroName svelte-7dijez");
    			add_location(p, file$4, 527, 7, 23014);
    			attr_dev(div14, "class", "heroCard svelte-7dijez");
    			add_location(div14, file$4, 496, 6, 21413);
    			this.first = div14;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div14, anchor);
    			append_dev(div14, div13);
    			append_dev(div13, div2);
    			append_dev(div2, div1);
    			append_dev(div1, img0);
    			append_dev(div1, t0);
    			append_dev(div1, div0);
    			append_dev(div0, span0);
    			append_dev(span0, t1);
    			append_dev(div13, t2);
    			append_dev(div13, div7);
    			append_dev(div7, div6);
    			append_dev(div6, div5);
    			append_dev(div5, div3);
    			append_dev(div3, img1);
    			append_dev(div5, t3);
    			append_dev(div5, div4);
    			append_dev(div4, button);
    			append_dev(button, t4);
    			append_dev(div13, t5);
    			append_dev(div13, div12);
    			append_dev(div12, div9);
    			append_dev(div9, img2);
    			append_dev(div9, t6);
    			append_dev(div9, div8);
    			append_dev(div8, span1);
    			append_dev(span1, t7);
    			append_dev(div12, t8);
    			append_dev(div12, div11);
    			append_dev(div11, img3);
    			append_dev(div11, t9);
    			append_dev(div11, div10);
    			append_dev(div10, span2);
    			append_dev(span2, t10);
    			append_dev(div14, t11);
    			append_dev(div14, p);
    			append_dev(p, t12);
    			append_dev(div14, t13);

    			if (!mounted) {
    				dispose = listen_dev(div14, "click", click_handler_23, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty[0] & /*unownedHeroList*/ 16 && !src_url_equal(img0.src, img0_src_value = "./img/factions/" + /*hero*/ ctx[62].faction.toLowerCase() + ".png")) {
    				attr_dev(img0, "src", img0_src_value);
    			}

    			if (dirty[0] & /*unownedHeroList*/ 16 && img0_alt_value !== (img0_alt_value = /*hero*/ ctx[62].faction)) {
    				attr_dev(img0, "alt", img0_alt_value);
    			}

    			if (dirty[0] & /*unownedHeroList*/ 16 && t1_value !== (t1_value = /*hero*/ ctx[62].faction + "")) set_data_dev(t1, t1_value);

    			if (dirty[0] & /*unownedHeroList*/ 16 && !src_url_equal(img1.src, img1_src_value = /*hero*/ ctx[62].portrait)) {
    				attr_dev(img1, "src", img1_src_value);
    			}

    			if (dirty[0] & /*unownedHeroList*/ 16 && img1_alt_value !== (img1_alt_value = /*hero*/ ctx[62].name)) {
    				attr_dev(img1, "alt", img1_alt_value);
    			}

    			if (dirty[0] & /*$AppData, unownedHeroList*/ 17 && t4_value !== (t4_value = (/*$AppData*/ ctx[0].MH.List[/*hero*/ ctx[62].id].claimed
    			? 'Remove'
    			: 'Add') + "")) set_data_dev(t4, t4_value);

    			if (dirty[0] & /*$AppData, unownedHeroList*/ 17) {
    				toggle_class(button, "owned", /*$AppData*/ ctx[0].MH.List[/*hero*/ ctx[62].id].claimed);
    			}

    			if (dirty[0] & /*unownedHeroList*/ 16 && !src_url_equal(img2.src, img2_src_value = "./img/types/" + /*hero*/ ctx[62].type.toLowerCase() + ".png")) {
    				attr_dev(img2, "src", img2_src_value);
    			}

    			if (dirty[0] & /*unownedHeroList*/ 16 && img2_alt_value !== (img2_alt_value = /*hero*/ ctx[62].type)) {
    				attr_dev(img2, "alt", img2_alt_value);
    			}

    			if (dirty[0] & /*unownedHeroList*/ 16 && t7_value !== (t7_value = /*hero*/ ctx[62].type + "")) set_data_dev(t7, t7_value);

    			if (dirty[0] & /*unownedHeroList*/ 16 && !src_url_equal(img3.src, img3_src_value = "./img/classes/" + /*hero*/ ctx[62].class.toLowerCase() + ".png")) {
    				attr_dev(img3, "src", img3_src_value);
    			}

    			if (dirty[0] & /*unownedHeroList*/ 16 && img3_alt_value !== (img3_alt_value = /*hero*/ ctx[62].class)) {
    				attr_dev(img3, "alt", img3_alt_value);
    			}

    			if (dirty[0] & /*unownedHeroList*/ 16 && t10_value !== (t10_value = /*hero*/ ctx[62].class + "")) set_data_dev(t10, t10_value);
    			if (dirty[0] & /*unownedHeroList*/ 16 && t12_value !== (t12_value = /*hero*/ ctx[62].name + "")) set_data_dev(t12, t12_value);
    		},
    		r: function measure() {
    			rect = div14.getBoundingClientRect();
    		},
    		f: function fix() {
    			fix_position(div14);
    			stop_animation();
    		},
    		a: function animate() {
    			stop_animation();
    			stop_animation = create_animation(div14, rect, flip, { duration: 200 });
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div14);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$2.name,
    		type: "each",
    		source: "(496:6) {#each unownedHeroList as hero (hero.id)}",
    		ctx
    	});

    	return block;
    }

    // (416:4) {:else}
    function create_else_block$3(ctx) {
    	let div;
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let current;
    	let each_value = /*myHeroList*/ ctx[5];
    	validate_each_argument(each_value);
    	const get_key = ctx => /*hero*/ ctx[62].id;
    	validate_each_keys(ctx, each_value, get_each_context$3, get_key);

    	for (let i = 0; i < each_value.length; i += 1) {
    		let child_ctx = get_each_context$3(ctx, each_value, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block$3(key, child_ctx));
    	}

    	const block = {
    		c: function create() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div, "class", "MHGrid svelte-7dijez");
    			add_location(div, file$4, 416, 5, 18037);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*handleFurnChange, myHeroList, $AppData, handleSIChange, handleAscChange, handleHeroDetailClick, handleHeroUnclaim*/ 4685857) {
    				each_value = /*myHeroList*/ ctx[5];
    				validate_each_argument(each_value);
    				group_outros();
    				for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].r();
    				validate_each_keys(ctx, each_value, get_each_context$3, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div, fix_and_outro_and_destroy_block, create_each_block$3, null, get_each_context$3);
    				for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].a();
    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d();
    			}
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$3.name,
    		type: "else",
    		source: "(416:4) {:else}",
    		ctx
    	});

    	return block;
    }

    // (412:4) {#if myHeroList.length === 0}
    function create_if_block_1$2(ctx) {
    	let div;
    	let span;

    	const block = {
    		c: function create() {
    			div = element("div");
    			span = element("span");
    			span.textContent = "Claim some heroes from the unowned tab!";
    			add_location(span, file$4, 413, 6, 17952);
    			attr_dev(div, "class", "noHeroes svelte-7dijez");
    			add_location(div, file$4, 412, 5, 17922);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, span);
    		},
    		p: noop$1,
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$2.name,
    		type: "if",
    		source: "(412:4) {#if myHeroList.length === 0}",
    		ctx
    	});

    	return block;
    }

    // (418:6) {#each myHeroList as hero (hero.id)}
    function create_each_block$3(key_1, ctx) {
    	let div22;
    	let div1;
    	let div0;
    	let xbutton;
    	let t0;
    	let div15;
    	let div4;
    	let div3;
    	let img0;
    	let img0_src_value;
    	let img0_alt_value;
    	let t1;
    	let div2;
    	let span0;
    	let t2_value = /*hero*/ ctx[62].faction + "";
    	let t2;
    	let t3;
    	let div9;
    	let div8;
    	let div7;
    	let div5;
    	let img1;
    	let img1_src_value;
    	let img1_alt_value;
    	let t4;
    	let div6;
    	let button;
    	let t6;
    	let div14;
    	let div11;
    	let img2;
    	let img2_src_value;
    	let img2_alt_value;
    	let t7;
    	let div10;
    	let span1;
    	let t8_value = /*hero*/ ctx[62].type + "";
    	let t8;
    	let t9;
    	let div13;
    	let img3;
    	let img3_src_value;
    	let img3_alt_value;
    	let t10;
    	let div12;
    	let span2;
    	let t11_value = /*hero*/ ctx[62].class + "";
    	let t11;
    	let t12;
    	let p;
    	let t13_value = /*hero*/ ctx[62].name + "";
    	let t13;
    	let t14;
    	let div21;
    	let div17;
    	let div16;
    	let ascensionmenu;
    	let t15;
    	let div20;
    	let div18;
    	let simenu;
    	let t16;
    	let div19;
    	let furnmenu;
    	let t17;
    	let rect;
    	let stop_animation = noop$1;
    	let current;
    	let mounted;
    	let dispose;

    	function func_1() {
    		return /*func_1*/ ctx[46](/*hero*/ ctx[62]);
    	}

    	xbutton = new XButton({
    			props: {
    				clickCallback: func_1,
    				size: "large",
    				hoverable: true
    			},
    			$$inline: true
    		});

    	function click_handler_20() {
    		return /*click_handler_20*/ ctx[47](/*hero*/ ctx[62]);
    	}

    	function click_handler_21() {
    		return /*click_handler_21*/ ctx[48](/*hero*/ ctx[62]);
    	}

    	function func_2(...args) {
    		return /*func_2*/ ctx[49](/*hero*/ ctx[62], ...args);
    	}

    	ascensionmenu = new AscensionMenu({
    			props: {
    				menuItemChangeCallback: func_2,
    				activeItem: /*$AppData*/ ctx[0].MH.List[/*hero*/ ctx[62].id].ascendLv,
    				zIndexBase: "2"
    			},
    			$$inline: true
    		});

    	function func_3(...args) {
    		return /*func_3*/ ctx[50](/*hero*/ ctx[62], ...args);
    	}

    	simenu = new SIMenu({
    			props: {
    				menuItemChangeCallback: func_3,
    				activeItem: /*$AppData*/ ctx[0].MH.List[/*hero*/ ctx[62].id].si === -1
    				? 0
    				: Math.floor(/*$AppData*/ ctx[0].MH.List[/*hero*/ ctx[62].id].si / 5) + 1,
    				zIndexBase: "2"
    			},
    			$$inline: true
    		});

    	function func_4(...args) {
    		return /*func_4*/ ctx[51](/*hero*/ ctx[62], ...args);
    	}

    	furnmenu = new FurnMenu({
    			props: {
    				menuItemChangeCallback: func_4,
    				activeItem: /*$AppData*/ ctx[0].MH.List[/*hero*/ ctx[62].id].furn === 0
    				? 0
    				: /*$AppData*/ ctx[0].MH.List[/*hero*/ ctx[62].id].furn === 3
    					? 1
    					: 2,
    				zIndexBase: "2"
    			},
    			$$inline: true
    		});

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			div22 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			create_component(xbutton.$$.fragment);
    			t0 = space();
    			div15 = element("div");
    			div4 = element("div");
    			div3 = element("div");
    			img0 = element("img");
    			t1 = space();
    			div2 = element("div");
    			span0 = element("span");
    			t2 = text$2(t2_value);
    			t3 = space();
    			div9 = element("div");
    			div8 = element("div");
    			div7 = element("div");
    			div5 = element("div");
    			img1 = element("img");
    			t4 = space();
    			div6 = element("div");
    			button = element("button");
    			button.textContent = "Info";
    			t6 = space();
    			div14 = element("div");
    			div11 = element("div");
    			img2 = element("img");
    			t7 = space();
    			div10 = element("div");
    			span1 = element("span");
    			t8 = text$2(t8_value);
    			t9 = space();
    			div13 = element("div");
    			img3 = element("img");
    			t10 = space();
    			div12 = element("div");
    			span2 = element("span");
    			t11 = text$2(t11_value);
    			t12 = space();
    			p = element("p");
    			t13 = text$2(t13_value);
    			t14 = space();
    			div21 = element("div");
    			div17 = element("div");
    			div16 = element("div");
    			create_component(ascensionmenu.$$.fragment);
    			t15 = space();
    			div20 = element("div");
    			div18 = element("div");
    			create_component(simenu.$$.fragment);
    			t16 = space();
    			div19 = element("div");
    			create_component(furnmenu.$$.fragment);
    			t17 = space();
    			attr_dev(div0, "class", "removeHeroButtonContainer svelte-7dijez");
    			add_location(div0, file$4, 420, 8, 18207);
    			attr_dev(div1, "class", "removeArea svelte-7dijez");
    			add_location(div1, file$4, 419, 7, 18173);
    			attr_dev(img0, "class", "attrImage factionImg svelte-7dijez");
    			if (!src_url_equal(img0.src, img0_src_value = "./img/factions/" + /*hero*/ ctx[62].faction.toLowerCase() + ".png")) attr_dev(img0, "src", img0_src_value);
    			attr_dev(img0, "alt", img0_alt_value = /*hero*/ ctx[62].faction);
    			add_location(img0, file$4, 427, 10, 18496);
    			attr_dev(span0, "class", "tooltipText svelte-7dijez");
    			add_location(span0, file$4, 428, 47, 18654);
    			attr_dev(div2, "class", "tooltip tooltip-faction svelte-7dijez");
    			add_location(div2, file$4, 428, 10, 18617);
    			attr_dev(div3, "class", "attrImgContainer svelte-7dijez");
    			add_location(div3, file$4, 426, 9, 18454);
    			attr_dev(div4, "class", "headArea svelte-7dijez");
    			add_location(div4, file$4, 425, 8, 18421);
    			attr_dev(img1, "class", "portrait svelte-7dijez");
    			if (!src_url_equal(img1.src, img1_src_value = /*hero*/ ctx[62].portrait)) attr_dev(img1, "src", img1_src_value);
    			attr_dev(img1, "alt", img1_alt_value = /*hero*/ ctx[62].name);
    			add_location(img1, file$4, 435, 12, 18936);
    			attr_dev(div5, "class", "flipCardFront svelte-7dijez");
    			add_location(div5, file$4, 434, 11, 18895);
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "portraitButton svelte-7dijez");
    			toggle_class(button, "owned", /*$AppData*/ ctx[0].MH.List[/*hero*/ ctx[62].id].claimed);
    			add_location(button, file$4, 438, 12, 19116);
    			attr_dev(div6, "class", "flipCardBack svelte-7dijez");
    			add_location(div6, file$4, 437, 11, 19076);
    			attr_dev(div7, "class", "flipCardInner svelte-7dijez");
    			add_location(div7, file$4, 433, 10, 18855);
    			attr_dev(div8, "class", "flipCard svelte-7dijez");
    			add_location(div8, file$4, 432, 9, 18783);
    			attr_dev(div9, "class", "headArea svelte-7dijez");
    			add_location(div9, file$4, 431, 8, 18750);
    			attr_dev(img2, "class", "attrImage typeImg svelte-7dijez");
    			if (!src_url_equal(img2.src, img2_src_value = "./img/types/" + /*hero*/ ctx[62].type.toLowerCase() + ".png")) attr_dev(img2, "src", img2_src_value);
    			attr_dev(img2, "alt", img2_alt_value = /*hero*/ ctx[62].type);
    			add_location(img2, file$4, 445, 10, 19427);
    			attr_dev(span1, "class", "tooltipText svelte-7dijez");
    			add_location(span1, file$4, 446, 44, 19568);
    			attr_dev(div10, "class", "tooltip tooltip-type svelte-7dijez");
    			add_location(div10, file$4, 446, 10, 19534);
    			attr_dev(div11, "class", "attrImgContainer svelte-7dijez");
    			add_location(div11, file$4, 444, 9, 19385);
    			attr_dev(img3, "class", "attrImage classImg svelte-7dijez");
    			if (!src_url_equal(img3.src, img3_src_value = "./img/classes/" + /*hero*/ ctx[62].class.toLowerCase() + ".png")) attr_dev(img3, "src", img3_src_value);
    			attr_dev(img3, "alt", img3_alt_value = /*hero*/ ctx[62].class);
    			add_location(img3, file$4, 449, 10, 19688);
    			attr_dev(span2, "class", "tooltipText svelte-7dijez");
    			add_location(span2, file$4, 450, 45, 19835);
    			attr_dev(div12, "class", "tooltip tooltip-class svelte-7dijez");
    			add_location(div12, file$4, 450, 10, 19800);
    			attr_dev(div13, "class", "attrImgContainer svelte-7dijez");
    			add_location(div13, file$4, 448, 9, 19646);
    			attr_dev(div14, "class", "headArea svelte-7dijez");
    			add_location(div14, file$4, 443, 8, 19352);
    			attr_dev(div15, "class", "heroHeader svelte-7dijez");
    			add_location(div15, file$4, 424, 7, 18387);
    			attr_dev(p, "class", "heroName svelte-7dijez");
    			add_location(p, file$4, 454, 7, 19943);
    			attr_dev(div16, "class", "flipButtonArea");
    			add_location(div16, file$4, 457, 9, 20068);
    			attr_dev(div17, "class", "ascButtonArea svelte-7dijez");
    			add_location(div17, file$4, 456, 8, 20030);
    			attr_dev(div18, "class", "flipButtonArea svelte-7dijez");
    			add_location(div18, file$4, 466, 9, 20386);
    			attr_dev(div19, "class", "flipButtonArea svelte-7dijez");
    			add_location(div19, file$4, 473, 9, 20693);
    			attr_dev(div20, "class", "siFurnButtonArea svelte-7dijez");
    			add_location(div20, file$4, 465, 8, 20345);
    			attr_dev(div21, "class", "flipButtonContainer svelte-7dijez");
    			add_location(div21, file$4, 455, 7, 19987);
    			attr_dev(div22, "class", "heroCard svelte-7dijez");
    			add_location(div22, file$4, 418, 6, 18109);
    			this.first = div22;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div22, anchor);
    			append_dev(div22, div1);
    			append_dev(div1, div0);
    			mount_component(xbutton, div0, null);
    			append_dev(div22, t0);
    			append_dev(div22, div15);
    			append_dev(div15, div4);
    			append_dev(div4, div3);
    			append_dev(div3, img0);
    			append_dev(div3, t1);
    			append_dev(div3, div2);
    			append_dev(div2, span0);
    			append_dev(span0, t2);
    			append_dev(div15, t3);
    			append_dev(div15, div9);
    			append_dev(div9, div8);
    			append_dev(div8, div7);
    			append_dev(div7, div5);
    			append_dev(div5, img1);
    			append_dev(div7, t4);
    			append_dev(div7, div6);
    			append_dev(div6, button);
    			append_dev(div15, t6);
    			append_dev(div15, div14);
    			append_dev(div14, div11);
    			append_dev(div11, img2);
    			append_dev(div11, t7);
    			append_dev(div11, div10);
    			append_dev(div10, span1);
    			append_dev(span1, t8);
    			append_dev(div14, t9);
    			append_dev(div14, div13);
    			append_dev(div13, img3);
    			append_dev(div13, t10);
    			append_dev(div13, div12);
    			append_dev(div12, span2);
    			append_dev(span2, t11);
    			append_dev(div22, t12);
    			append_dev(div22, p);
    			append_dev(p, t13);
    			append_dev(div22, t14);
    			append_dev(div22, div21);
    			append_dev(div21, div17);
    			append_dev(div17, div16);
    			mount_component(ascensionmenu, div16, null);
    			append_dev(div21, t15);
    			append_dev(div21, div20);
    			append_dev(div20, div18);
    			mount_component(simenu, div18, null);
    			append_dev(div20, t16);
    			append_dev(div20, div19);
    			mount_component(furnmenu, div19, null);
    			append_dev(div22, t17);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(img1, "click", click_handler_20, false, false, false),
    					listen_dev(button, "click", click_handler_21, false, false, false),
    					listen_dev(div8, "click", click_handler_22, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const xbutton_changes = {};
    			if (dirty[0] & /*myHeroList*/ 32) xbutton_changes.clickCallback = func_1;
    			xbutton.$set(xbutton_changes);

    			if (!current || dirty[0] & /*myHeroList*/ 32 && !src_url_equal(img0.src, img0_src_value = "./img/factions/" + /*hero*/ ctx[62].faction.toLowerCase() + ".png")) {
    				attr_dev(img0, "src", img0_src_value);
    			}

    			if (!current || dirty[0] & /*myHeroList*/ 32 && img0_alt_value !== (img0_alt_value = /*hero*/ ctx[62].faction)) {
    				attr_dev(img0, "alt", img0_alt_value);
    			}

    			if ((!current || dirty[0] & /*myHeroList*/ 32) && t2_value !== (t2_value = /*hero*/ ctx[62].faction + "")) set_data_dev(t2, t2_value);

    			if (!current || dirty[0] & /*myHeroList*/ 32 && !src_url_equal(img1.src, img1_src_value = /*hero*/ ctx[62].portrait)) {
    				attr_dev(img1, "src", img1_src_value);
    			}

    			if (!current || dirty[0] & /*myHeroList*/ 32 && img1_alt_value !== (img1_alt_value = /*hero*/ ctx[62].name)) {
    				attr_dev(img1, "alt", img1_alt_value);
    			}

    			if (dirty[0] & /*$AppData, myHeroList*/ 33) {
    				toggle_class(button, "owned", /*$AppData*/ ctx[0].MH.List[/*hero*/ ctx[62].id].claimed);
    			}

    			if (!current || dirty[0] & /*myHeroList*/ 32 && !src_url_equal(img2.src, img2_src_value = "./img/types/" + /*hero*/ ctx[62].type.toLowerCase() + ".png")) {
    				attr_dev(img2, "src", img2_src_value);
    			}

    			if (!current || dirty[0] & /*myHeroList*/ 32 && img2_alt_value !== (img2_alt_value = /*hero*/ ctx[62].type)) {
    				attr_dev(img2, "alt", img2_alt_value);
    			}

    			if ((!current || dirty[0] & /*myHeroList*/ 32) && t8_value !== (t8_value = /*hero*/ ctx[62].type + "")) set_data_dev(t8, t8_value);

    			if (!current || dirty[0] & /*myHeroList*/ 32 && !src_url_equal(img3.src, img3_src_value = "./img/classes/" + /*hero*/ ctx[62].class.toLowerCase() + ".png")) {
    				attr_dev(img3, "src", img3_src_value);
    			}

    			if (!current || dirty[0] & /*myHeroList*/ 32 && img3_alt_value !== (img3_alt_value = /*hero*/ ctx[62].class)) {
    				attr_dev(img3, "alt", img3_alt_value);
    			}

    			if ((!current || dirty[0] & /*myHeroList*/ 32) && t11_value !== (t11_value = /*hero*/ ctx[62].class + "")) set_data_dev(t11, t11_value);
    			if ((!current || dirty[0] & /*myHeroList*/ 32) && t13_value !== (t13_value = /*hero*/ ctx[62].name + "")) set_data_dev(t13, t13_value);
    			const ascensionmenu_changes = {};
    			if (dirty[0] & /*myHeroList*/ 32) ascensionmenu_changes.menuItemChangeCallback = func_2;
    			if (dirty[0] & /*$AppData, myHeroList*/ 33) ascensionmenu_changes.activeItem = /*$AppData*/ ctx[0].MH.List[/*hero*/ ctx[62].id].ascendLv;
    			ascensionmenu.$set(ascensionmenu_changes);
    			const simenu_changes = {};
    			if (dirty[0] & /*myHeroList*/ 32) simenu_changes.menuItemChangeCallback = func_3;

    			if (dirty[0] & /*$AppData, myHeroList*/ 33) simenu_changes.activeItem = /*$AppData*/ ctx[0].MH.List[/*hero*/ ctx[62].id].si === -1
    			? 0
    			: Math.floor(/*$AppData*/ ctx[0].MH.List[/*hero*/ ctx[62].id].si / 5) + 1;

    			simenu.$set(simenu_changes);
    			const furnmenu_changes = {};
    			if (dirty[0] & /*myHeroList*/ 32) furnmenu_changes.menuItemChangeCallback = func_4;

    			if (dirty[0] & /*$AppData, myHeroList*/ 33) furnmenu_changes.activeItem = /*$AppData*/ ctx[0].MH.List[/*hero*/ ctx[62].id].furn === 0
    			? 0
    			: /*$AppData*/ ctx[0].MH.List[/*hero*/ ctx[62].id].furn === 3
    				? 1
    				: 2;

    			furnmenu.$set(furnmenu_changes);
    		},
    		r: function measure() {
    			rect = div22.getBoundingClientRect();
    		},
    		f: function fix() {
    			fix_position(div22);
    			stop_animation();
    		},
    		a: function animate() {
    			stop_animation();
    			stop_animation = create_animation(div22, rect, flip, { duration: 200 });
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(xbutton.$$.fragment, local);
    			transition_in(ascensionmenu.$$.fragment, local);
    			transition_in(simenu.$$.fragment, local);
    			transition_in(furnmenu.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(xbutton.$$.fragment, local);
    			transition_out(ascensionmenu.$$.fragment, local);
    			transition_out(simenu.$$.fragment, local);
    			transition_out(furnmenu.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div22);
    			destroy_component(xbutton);
    			destroy_component(ascensionmenu);
    			destroy_component(simenu);
    			destroy_component(furnmenu);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$3.name,
    		type: "each",
    		source: "(418:6) {#each myHeroList as hero (hero.id)}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$4(ctx) {
    	let div14;
    	let section0;
    	let div6;
    	let div1;
    	let div0;
    	let input;
    	let t0;
    	let div5;
    	let div2;
    	let button0;
    	let t1;
    	let button0_class_value;
    	let t2;
    	let button1;
    	let img0;
    	let img0_class_value;
    	let img0_src_value;
    	let t3;
    	let button2;
    	let img1;
    	let img1_class_value;
    	let img1_src_value;
    	let t4;
    	let button3;
    	let img2;
    	let img2_class_value;
    	let img2_src_value;
    	let t5;
    	let button4;
    	let img3;
    	let img3_class_value;
    	let img3_src_value;
    	let t6;
    	let button5;
    	let img4;
    	let img4_class_value;
    	let img4_src_value;
    	let t7;
    	let button6;
    	let img5;
    	let img5_class_value;
    	let img5_src_value;
    	let t8;
    	let button7;
    	let img6;
    	let img6_class_value;
    	let img6_src_value;
    	let t9;
    	let div3;
    	let button8;
    	let t10;
    	let button8_class_value;
    	let t11;
    	let button9;
    	let img7;
    	let img7_class_value;
    	let img7_src_value;
    	let t12;
    	let button10;
    	let img8;
    	let img8_class_value;
    	let img8_src_value;
    	let t13;
    	let button11;
    	let img9;
    	let img9_class_value;
    	let img9_src_value;
    	let t14;
    	let div4;
    	let button12;
    	let t15;
    	let button12_class_value;
    	let t16;
    	let button13;
    	let img10;
    	let img10_class_value;
    	let img10_src_value;
    	let t17;
    	let button14;
    	let img11;
    	let img11_class_value;
    	let img11_src_value;
    	let t18;
    	let button15;
    	let img12;
    	let img12_class_value;
    	let img12_src_value;
    	let t19;
    	let button16;
    	let img13;
    	let img13_class_value;
    	let img13_src_value;
    	let t20;
    	let button17;
    	let img14;
    	let img14_class_value;
    	let img14_src_value;
    	let div6_class_value;
    	let t21;
    	let div8;
    	let button18;
    	let i;
    	let i_class_value;
    	let span0;
    	let t23;
    	let div7;
    	let span1;
    	let t25;
    	let section1;
    	let t26;
    	let div9;
    	let ul;
    	let t27;
    	let current_block_type_index;
    	let if_block1;
    	let t28;
    	let section2;
    	let div12;
    	let button19;
    	let img15;
    	let img15_src_value;
    	let t29;
    	let div10;
    	let span2;
    	let t31;
    	let button20;
    	let img16;
    	let img16_src_value;
    	let t32;
    	let div11;
    	let span3;
    	let div12_class_value;
    	let t34;
    	let button21;
    	let img17;
    	let img17_src_value;
    	let t35;
    	let section3;
    	let div13;
    	let span4;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block0 = !/*$AppData*/ ctx[0].dismissMHSearchInfo && create_if_block_4$2(ctx);
    	let each_value_2 = /*sections*/ ctx[10];
    	validate_each_argument(each_value_2);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		each_blocks[i] = create_each_block_2$1(get_each_context_2$1(ctx, each_value_2, i));
    	}

    	const if_block_creators = [create_if_block$3, create_if_block_2$2];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*$AppData*/ ctx[0].MH.openSection === 0) return 0;
    		if (/*$AppData*/ ctx[0].MH.openSection === 1) return 1;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type(ctx))) {
    		if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	const block = {
    		c: function create() {
    			div14 = element("div");
    			section0 = element("section");
    			div6 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			input = element("input");
    			t0 = space();
    			div5 = element("div");
    			div2 = element("div");
    			button0 = element("button");
    			t1 = text$2("ALL");
    			t2 = space();
    			button1 = element("button");
    			img0 = element("img");
    			t3 = space();
    			button2 = element("button");
    			img1 = element("img");
    			t4 = space();
    			button3 = element("button");
    			img2 = element("img");
    			t5 = space();
    			button4 = element("button");
    			img3 = element("img");
    			t6 = space();
    			button5 = element("button");
    			img4 = element("img");
    			t7 = space();
    			button6 = element("button");
    			img5 = element("img");
    			t8 = space();
    			button7 = element("button");
    			img6 = element("img");
    			t9 = space();
    			div3 = element("div");
    			button8 = element("button");
    			t10 = text$2("ALL");
    			t11 = space();
    			button9 = element("button");
    			img7 = element("img");
    			t12 = space();
    			button10 = element("button");
    			img8 = element("img");
    			t13 = space();
    			button11 = element("button");
    			img9 = element("img");
    			t14 = space();
    			div4 = element("div");
    			button12 = element("button");
    			t15 = text$2("ALL");
    			t16 = space();
    			button13 = element("button");
    			img10 = element("img");
    			t17 = space();
    			button14 = element("button");
    			img11 = element("img");
    			t18 = space();
    			button15 = element("button");
    			img12 = element("img");
    			t19 = space();
    			button16 = element("button");
    			img13 = element("img");
    			t20 = space();
    			button17 = element("button");
    			img14 = element("img");
    			t21 = space();
    			div8 = element("div");
    			button18 = element("button");
    			i = element("i");
    			span0 = element("span");
    			span0.textContent = "Search and Filters";
    			t23 = space();
    			div7 = element("div");
    			span1 = element("span");
    			span1.textContent = "Filters";
    			t25 = space();
    			section1 = element("section");
    			if (if_block0) if_block0.c();
    			t26 = space();
    			div9 = element("div");
    			ul = element("ul");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t27 = space();
    			if (if_block1) if_block1.c();
    			t28 = space();
    			section2 = element("section");
    			div12 = element("div");
    			button19 = element("button");
    			img15 = element("img");
    			t29 = space();
    			div10 = element("div");
    			span2 = element("span");
    			span2.textContent = "Export Data";
    			t31 = space();
    			button20 = element("button");
    			img16 = element("img");
    			t32 = space();
    			div11 = element("div");
    			span3 = element("span");
    			span3.textContent = "Import Data";
    			t34 = space();
    			button21 = element("button");
    			img17 = element("img");
    			t35 = space();
    			section3 = element("section");
    			div13 = element("div");
    			span4 = element("span");
    			span4.textContent = "My Hero Data Copied to Clipboard";
    			attr_dev(input, "id", "searchBox");
    			attr_dev(input, "type", "search");
    			attr_dev(input, "placeholder", "Search");
    			attr_dev(input, "class", "svelte-7dijez");
    			add_location(input, file$4, 325, 5, 12397);
    			attr_dev(div0, "class", "search svelte-7dijez");
    			add_location(div0, file$4, 324, 4, 12370);
    			attr_dev(div1, "class", "searchContainer svelte-7dijez");
    			add_location(div1, file$4, 323, 3, 12335);
    			attr_dev(button0, "type", "button");

    			attr_dev(button0, "class", button0_class_value = "filterMasterButton " + (/*allFactionsEnabled*/ ctx[8]
    			? ''
    			: 'filterMasterDisabled') + " svelte-7dijez");

    			add_location(button0, file$4, 330, 5, 12627);
    			attr_dev(img0, "class", img0_class_value = "filterImg " + (/*$AppData*/ ctx[0].MH.ShowLB ? '' : 'filterInactive') + " svelte-7dijez");
    			if (!src_url_equal(img0.src, img0_src_value = "./img/factions/lightbearer.png")) attr_dev(img0, "src", img0_src_value);
    			attr_dev(img0, "alt", "Lightbearer");
    			add_location(img0, file$4, 332, 6, 12898);
    			attr_dev(button1, "type", "button");
    			attr_dev(button1, "class", "filterButton svelte-7dijez");
    			add_location(button1, file$4, 331, 5, 12806);
    			attr_dev(img1, "class", img1_class_value = "filterImg " + (/*$AppData*/ ctx[0].MH.ShowM ? '' : 'filterInactive') + " svelte-7dijez");
    			if (!src_url_equal(img1.src, img1_src_value = "./img/factions/mauler.png")) attr_dev(img1, "src", img1_src_value);
    			attr_dev(img1, "alt", "Mauler");
    			add_location(img1, file$4, 335, 6, 13135);
    			attr_dev(button2, "type", "button");
    			attr_dev(button2, "class", "filterButton svelte-7dijez");
    			add_location(button2, file$4, 334, 5, 13044);
    			attr_dev(img2, "class", img2_class_value = "filterImg " + (/*$AppData*/ ctx[0].MH.ShowW ? '' : 'filterInactive') + " svelte-7dijez");
    			if (!src_url_equal(img2.src, img2_src_value = "./img/factions/wilder.png")) attr_dev(img2, "src", img2_src_value);
    			attr_dev(img2, "alt", "wilder");
    			add_location(img2, file$4, 338, 6, 13361);
    			attr_dev(button3, "type", "button");
    			attr_dev(button3, "class", "filterButton svelte-7dijez");
    			add_location(button3, file$4, 337, 5, 13270);
    			attr_dev(img3, "class", img3_class_value = "filterImg " + (/*$AppData*/ ctx[0].MH.ShowGB ? '' : 'filterInactive') + " svelte-7dijez");
    			if (!src_url_equal(img3.src, img3_src_value = "./img/factions/graveborn.png")) attr_dev(img3, "src", img3_src_value);
    			attr_dev(img3, "alt", "Graveborn");
    			add_location(img3, file$4, 341, 6, 13588);
    			attr_dev(button4, "type", "button");
    			attr_dev(button4, "class", "filterButton svelte-7dijez");
    			add_location(button4, file$4, 340, 5, 13496);
    			attr_dev(img4, "class", img4_class_value = "filterImg " + (/*$AppData*/ ctx[0].MH.ShowC ? '' : 'filterInactive') + " svelte-7dijez");
    			if (!src_url_equal(img4.src, img4_src_value = "./img/factions/celestial.png")) attr_dev(img4, "src", img4_src_value);
    			attr_dev(img4, "alt", "Celestial");
    			add_location(img4, file$4, 344, 6, 13821);
    			attr_dev(button5, "type", "button");
    			attr_dev(button5, "class", "filterButton svelte-7dijez");
    			add_location(button5, file$4, 343, 5, 13730);
    			attr_dev(img5, "class", img5_class_value = "filterImg " + (/*$AppData*/ ctx[0].MH.ShowH ? '' : 'filterInactive') + " svelte-7dijez");
    			if (!src_url_equal(img5.src, img5_src_value = "./img/factions/hypogean.png")) attr_dev(img5, "src", img5_src_value);
    			attr_dev(img5, "alt", "Hypogean");
    			add_location(img5, file$4, 347, 6, 14053);
    			attr_dev(button6, "type", "button");
    			attr_dev(button6, "class", "filterButton svelte-7dijez");
    			add_location(button6, file$4, 346, 5, 13962);
    			attr_dev(img6, "class", img6_class_value = "filterImg " + (/*$AppData*/ ctx[0].MH.ShowD ? '' : 'filterInactive') + " svelte-7dijez");
    			if (!src_url_equal(img6.src, img6_src_value = "./img/factions/dimensional.png")) attr_dev(img6, "src", img6_src_value);
    			attr_dev(img6, "alt", "Dimensional");
    			add_location(img6, file$4, 350, 6, 14283);
    			attr_dev(button7, "type", "button");
    			attr_dev(button7, "class", "filterButton svelte-7dijez");
    			add_location(button7, file$4, 349, 5, 14192);
    			attr_dev(div2, "class", "filterSection svelte-7dijez");
    			add_location(div2, file$4, 329, 4, 12593);
    			attr_dev(button8, "type", "button");
    			attr_dev(button8, "class", button8_class_value = "filterMasterButton " + (/*allTypesEnabled*/ ctx[7] ? '' : 'filterMasterDisabled') + " svelte-7dijez");
    			add_location(button8, file$4, 354, 5, 14473);
    			attr_dev(img7, "class", img7_class_value = "filterImg " + (/*$AppData*/ ctx[0].MH.ShowInt ? '' : 'filterInactive') + " svelte-7dijez");
    			if (!src_url_equal(img7.src, img7_src_value = "./img/types/intelligence.png")) attr_dev(img7, "src", img7_src_value);
    			attr_dev(img7, "alt", "Intelligence");
    			add_location(img7, file$4, 356, 6, 14739);
    			attr_dev(button9, "type", "button");
    			attr_dev(button9, "class", "filterButton svelte-7dijez");
    			add_location(button9, file$4, 355, 5, 14646);
    			attr_dev(img8, "class", img8_class_value = "filterImg " + (/*$AppData*/ ctx[0].MH.ShowAgi ? '' : 'filterInactive') + " svelte-7dijez");
    			if (!src_url_equal(img8.src, img8_src_value = "./img/types/agility.png")) attr_dev(img8, "src", img8_src_value);
    			attr_dev(img8, "alt", "Agility");
    			add_location(img8, file$4, 359, 6, 14978);
    			attr_dev(button10, "type", "button");
    			attr_dev(button10, "class", "filterButton svelte-7dijez");
    			add_location(button10, file$4, 358, 5, 14885);
    			attr_dev(img9, "class", img9_class_value = "filterImg " + (/*$AppData*/ ctx[0].MH.ShowStr ? '' : 'filterInactive') + " svelte-7dijez");
    			if (!src_url_equal(img9.src, img9_src_value = "./img/types/strength.png")) attr_dev(img9, "src", img9_src_value);
    			attr_dev(img9, "alt", "Strength");
    			add_location(img9, file$4, 362, 6, 15207);
    			attr_dev(button11, "type", "button");
    			attr_dev(button11, "class", "filterButton svelte-7dijez");
    			add_location(button11, file$4, 361, 5, 15114);
    			attr_dev(div3, "class", "filterSection svelte-7dijez");
    			add_location(div3, file$4, 353, 4, 14439);
    			attr_dev(button12, "type", "button");
    			attr_dev(button12, "class", button12_class_value = "filterMasterButton " + (/*allClassEnabled*/ ctx[6] ? '' : 'filterMasterDisabled') + " svelte-7dijez");
    			add_location(button12, file$4, 366, 5, 15390);
    			attr_dev(img10, "class", img10_class_value = "filterImg " + (/*$AppData*/ ctx[0].MH.ShowMage ? '' : 'filterInactive') + " svelte-7dijez");
    			if (!src_url_equal(img10.src, img10_src_value = "./img/classes/mage.png")) attr_dev(img10, "src", img10_src_value);
    			attr_dev(img10, "alt", "Mage");
    			add_location(img10, file$4, 368, 6, 15658);
    			attr_dev(button13, "type", "button");
    			attr_dev(button13, "class", "filterButton svelte-7dijez");
    			add_location(button13, file$4, 367, 5, 15564);
    			attr_dev(img11, "class", img11_class_value = "filterImg " + (/*$AppData*/ ctx[0].MH.ShowWar ? '' : 'filterInactive') + " svelte-7dijez");
    			if (!src_url_equal(img11.src, img11_src_value = "./img/classes/warrior.png")) attr_dev(img11, "src", img11_src_value);
    			attr_dev(img11, "alt", "Warrior");
    			add_location(img11, file$4, 371, 6, 15884);
    			attr_dev(button14, "type", "button");
    			attr_dev(button14, "class", "filterButton svelte-7dijez");
    			add_location(button14, file$4, 370, 5, 15791);
    			attr_dev(img12, "class", img12_class_value = "filterImg " + (/*$AppData*/ ctx[0].MH.ShowTank ? '' : 'filterInactive') + " svelte-7dijez");
    			if (!src_url_equal(img12.src, img12_src_value = "./img/classes/tank.png")) attr_dev(img12, "src", img12_src_value);
    			attr_dev(img12, "alt", "Tank");
    			add_location(img12, file$4, 374, 6, 16116);
    			attr_dev(button15, "type", "button");
    			attr_dev(button15, "class", "filterButton svelte-7dijez");
    			add_location(button15, file$4, 373, 5, 16022);
    			attr_dev(img13, "class", img13_class_value = "filterImg " + (/*$AppData*/ ctx[0].MH.ShowSup ? '' : 'filterInactive') + " svelte-7dijez");
    			if (!src_url_equal(img13.src, img13_src_value = "./img/classes/support.png")) attr_dev(img13, "src", img13_src_value);
    			attr_dev(img13, "alt", "Support");
    			add_location(img13, file$4, 377, 6, 16342);
    			attr_dev(button16, "type", "button");
    			attr_dev(button16, "class", "filterButton svelte-7dijez");
    			add_location(button16, file$4, 376, 5, 16249);
    			attr_dev(img14, "class", img14_class_value = "filterImg " + (/*$AppData*/ ctx[0].MH.ShowRan ? '' : 'filterInactive') + " svelte-7dijez");
    			if (!src_url_equal(img14.src, img14_src_value = "./img/classes/ranger.png")) attr_dev(img14, "src", img14_src_value);
    			attr_dev(img14, "alt", "Ranger");
    			add_location(img14, file$4, 380, 6, 16573);
    			attr_dev(button17, "type", "button");
    			attr_dev(button17, "class", "filterButton svelte-7dijez");
    			add_location(button17, file$4, 379, 5, 16480);
    			attr_dev(div4, "class", "filterSection svelte-7dijez");
    			add_location(div4, file$4, 365, 4, 15356);
    			attr_dev(div5, "class", "filters svelte-7dijez");
    			add_location(div5, file$4, 328, 3, 12566);
    			attr_dev(div6, "class", div6_class_value = "mobileExpander " + (/*openFilters*/ ctx[1] ? 'filterOpen' : '') + " svelte-7dijez");
    			add_location(div6, file$4, 322, 2, 12268);
    			attr_dev(i, "class", i_class_value = "arrow " + (/*openFilters*/ ctx[1] ? 'open' : 'right') + " svelte-7dijez");
    			add_location(i, file$4, 386, 91, 16865);
    			attr_dev(span0, "class", "svelte-7dijez");
    			add_location(span0, file$4, 386, 146, 16920);
    			attr_dev(button18, "type", "button");
    			attr_dev(button18, "class", "filtersButton svelte-7dijez");
    			add_location(button18, file$4, 386, 3, 16777);
    			attr_dev(span1, "class", "tooltipText svelte-7dijez");
    			add_location(span1, file$4, 387, 41, 17003);
    			attr_dev(div7, "class", "tooltip tooltip-expander svelte-7dijez");
    			add_location(div7, file$4, 387, 3, 16965);
    			attr_dev(div8, "class", "mobileExpanderTitle svelte-7dijez");
    			add_location(div8, file$4, 385, 2, 16739);
    			attr_dev(section0, "class", "sect1 svelte-7dijez");
    			add_location(section0, file$4, 321, 1, 12241);
    			attr_dev(ul, "class", "sectionPicker svelte-7dijez");
    			add_location(ul, file$4, 401, 3, 17507);
    			attr_dev(div9, "class", "sectionPickerSection svelte-7dijez");
    			add_location(div9, file$4, 400, 2, 17468);
    			attr_dev(section1, "class", "sect2 svelte-7dijez");
    			add_location(section1, file$4, 390, 1, 17075);
    			if (!src_url_equal(img15.src, img15_src_value = "./img/utility/export.png")) attr_dev(img15, "src", img15_src_value);
    			attr_dev(img15, "alt", "export");
    			attr_dev(img15, "class", "svelte-7dijez");
    			add_location(img15, file$4, 537, 73, 23297);
    			attr_dev(button19, "type", "button");
    			attr_dev(button19, "class", "inOutButton svelte-7dijez");
    			add_location(button19, file$4, 537, 3, 23227);
    			attr_dev(span2, "class", "tooltipText svelte-7dijez");
    			add_location(span2, file$4, 538, 45, 23402);
    			attr_dev(div10, "class", "tooltip tooltip-inOutButton1 svelte-7dijez");
    			add_location(div10, file$4, 538, 3, 23360);
    			if (!src_url_equal(img16.src, img16_src_value = "./img/utility/import.png")) attr_dev(img16, "src", img16_src_value);
    			attr_dev(img16, "alt", "import");
    			attr_dev(img16, "class", "svelte-7dijez");
    			add_location(img16, file$4, 539, 73, 23527);
    			attr_dev(button20, "type", "button");
    			attr_dev(button20, "class", "inOutButton svelte-7dijez");
    			add_location(button20, file$4, 539, 3, 23457);
    			attr_dev(span3, "class", "tooltipText svelte-7dijez");
    			add_location(span3, file$4, 540, 45, 23632);
    			attr_dev(div11, "class", "tooltip tooltip-inOutButton2 svelte-7dijez");
    			add_location(div11, file$4, 540, 3, 23590);
    			attr_dev(div12, "class", div12_class_value = "inOutMenu " + (/*openInOutMenu*/ ctx[2] ? 'open' : '') + " svelte-7dijez");
    			add_location(div12, file$4, 536, 2, 23169);
    			if (!src_url_equal(img17.src, img17_src_value = "./img/utility/export_import.png")) attr_dev(img17, "src", img17_src_value);
    			attr_dev(img17, "alt", "Import/Export");
    			attr_dev(img17, "class", "svelte-7dijez");
    			add_location(img17, file$4, 542, 121, 23815);
    			attr_dev(button21, "type", "button");
    			attr_dev(button21, "class", "inOutMenuButton svelte-7dijez");
    			add_location(button21, file$4, 542, 2, 23696);
    			attr_dev(section2, "class", "sect3 svelte-7dijez");
    			add_location(section2, file$4, 535, 1, 23142);
    			add_location(span4, file$4, 545, 62, 23990);
    			attr_dev(div13, "class", "copyConfirm svelte-7dijez");
    			toggle_class(div13, "visible", /*copyConfirmVisible*/ ctx[3]);
    			add_location(div13, file$4, 545, 2, 23930);
    			attr_dev(section3, "class", "sect4 svelte-7dijez");
    			add_location(section3, file$4, 544, 1, 23903);
    			attr_dev(div14, "class", "MHContainer svelte-7dijez");
    			add_location(div14, file$4, 320, 0, 12174);
    		},
    		l: function claim(nodes) {
    			throw new Error_1$1("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div14, anchor);
    			append_dev(div14, section0);
    			append_dev(section0, div6);
    			append_dev(div6, div1);
    			append_dev(div1, div0);
    			append_dev(div0, input);
    			set_input_value(input, /*$AppData*/ ctx[0].MH.SearchStr);
    			append_dev(div6, t0);
    			append_dev(div6, div5);
    			append_dev(div5, div2);
    			append_dev(div2, button0);
    			append_dev(button0, t1);
    			append_dev(div2, t2);
    			append_dev(div2, button1);
    			append_dev(button1, img0);
    			append_dev(div2, t3);
    			append_dev(div2, button2);
    			append_dev(button2, img1);
    			append_dev(div2, t4);
    			append_dev(div2, button3);
    			append_dev(button3, img2);
    			append_dev(div2, t5);
    			append_dev(div2, button4);
    			append_dev(button4, img3);
    			append_dev(div2, t6);
    			append_dev(div2, button5);
    			append_dev(button5, img4);
    			append_dev(div2, t7);
    			append_dev(div2, button6);
    			append_dev(button6, img5);
    			append_dev(div2, t8);
    			append_dev(div2, button7);
    			append_dev(button7, img6);
    			append_dev(div5, t9);
    			append_dev(div5, div3);
    			append_dev(div3, button8);
    			append_dev(button8, t10);
    			append_dev(div3, t11);
    			append_dev(div3, button9);
    			append_dev(button9, img7);
    			append_dev(div3, t12);
    			append_dev(div3, button10);
    			append_dev(button10, img8);
    			append_dev(div3, t13);
    			append_dev(div3, button11);
    			append_dev(button11, img9);
    			append_dev(div5, t14);
    			append_dev(div5, div4);
    			append_dev(div4, button12);
    			append_dev(button12, t15);
    			append_dev(div4, t16);
    			append_dev(div4, button13);
    			append_dev(button13, img10);
    			append_dev(div4, t17);
    			append_dev(div4, button14);
    			append_dev(button14, img11);
    			append_dev(div4, t18);
    			append_dev(div4, button15);
    			append_dev(button15, img12);
    			append_dev(div4, t19);
    			append_dev(div4, button16);
    			append_dev(button16, img13);
    			append_dev(div4, t20);
    			append_dev(div4, button17);
    			append_dev(button17, img14);
    			append_dev(section0, t21);
    			append_dev(section0, div8);
    			append_dev(div8, button18);
    			append_dev(button18, i);
    			append_dev(button18, span0);
    			append_dev(div8, t23);
    			append_dev(div8, div7);
    			append_dev(div7, span1);
    			append_dev(div14, t25);
    			append_dev(div14, section1);
    			if (if_block0) if_block0.m(section1, null);
    			append_dev(section1, t26);
    			append_dev(section1, div9);
    			append_dev(div9, ul);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(ul, null);
    			}

    			append_dev(section1, t27);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(section1, null);
    			}

    			append_dev(div14, t28);
    			append_dev(div14, section2);
    			append_dev(section2, div12);
    			append_dev(div12, button19);
    			append_dev(button19, img15);
    			append_dev(div12, t29);
    			append_dev(div12, div10);
    			append_dev(div10, span2);
    			append_dev(div12, t31);
    			append_dev(div12, button20);
    			append_dev(button20, img16);
    			append_dev(div12, t32);
    			append_dev(div12, div11);
    			append_dev(div11, span3);
    			append_dev(section2, t34);
    			append_dev(section2, button21);
    			append_dev(button21, img17);
    			append_dev(div14, t35);
    			append_dev(div14, section3);
    			append_dev(section3, div13);
    			append_dev(div13, span4);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(window, "keyup", /*dynamicSearch*/ ctx[21], false, false, false),
    					listen_dev(input, "input", /*input_input_handler*/ ctx[24]),
    					listen_dev(input, "keyup", /*updateSearch*/ ctx[11], false, false, false),
    					listen_dev(input, "search", /*updateSearch*/ ctx[11], false, false, false),
    					listen_dev(button0, "click", /*click_handler*/ ctx[25], false, false, false),
    					listen_dev(button1, "click", /*click_handler_1*/ ctx[26], false, false, false),
    					listen_dev(button2, "click", /*click_handler_2*/ ctx[27], false, false, false),
    					listen_dev(button3, "click", /*click_handler_3*/ ctx[28], false, false, false),
    					listen_dev(button4, "click", /*click_handler_4*/ ctx[29], false, false, false),
    					listen_dev(button5, "click", /*click_handler_5*/ ctx[30], false, false, false),
    					listen_dev(button6, "click", /*click_handler_6*/ ctx[31], false, false, false),
    					listen_dev(button7, "click", /*click_handler_7*/ ctx[32], false, false, false),
    					listen_dev(button8, "click", /*click_handler_8*/ ctx[33], false, false, false),
    					listen_dev(button9, "click", /*click_handler_9*/ ctx[34], false, false, false),
    					listen_dev(button10, "click", /*click_handler_10*/ ctx[35], false, false, false),
    					listen_dev(button11, "click", /*click_handler_11*/ ctx[36], false, false, false),
    					listen_dev(button12, "click", /*click_handler_12*/ ctx[37], false, false, false),
    					listen_dev(button13, "click", /*click_handler_13*/ ctx[38], false, false, false),
    					listen_dev(button14, "click", /*click_handler_14*/ ctx[39], false, false, false),
    					listen_dev(button15, "click", /*click_handler_15*/ ctx[40], false, false, false),
    					listen_dev(button16, "click", /*click_handler_16*/ ctx[41], false, false, false),
    					listen_dev(button17, "click", /*click_handler_17*/ ctx[42], false, false, false),
    					listen_dev(button18, "click", /*click_handler_18*/ ctx[43], false, false, false),
    					listen_dev(button19, "click", /*handleExportData*/ ctx[20], false, false, false),
    					listen_dev(button20, "click", /*handleImportData*/ ctx[19], false, false, false),
    					listen_dev(button21, "click", /*click_handler_24*/ ctx[53], false, false, false),
    					listen_dev(div14, "click", /*click_handler_25*/ ctx[54], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*$AppData*/ 1) {
    				set_input_value(input, /*$AppData*/ ctx[0].MH.SearchStr);
    			}

    			if (!current || dirty[0] & /*allFactionsEnabled*/ 256 && button0_class_value !== (button0_class_value = "filterMasterButton " + (/*allFactionsEnabled*/ ctx[8]
    			? ''
    			: 'filterMasterDisabled') + " svelte-7dijez")) {
    				attr_dev(button0, "class", button0_class_value);
    			}

    			if (!current || dirty[0] & /*$AppData*/ 1 && img0_class_value !== (img0_class_value = "filterImg " + (/*$AppData*/ ctx[0].MH.ShowLB ? '' : 'filterInactive') + " svelte-7dijez")) {
    				attr_dev(img0, "class", img0_class_value);
    			}

    			if (!current || dirty[0] & /*$AppData*/ 1 && img1_class_value !== (img1_class_value = "filterImg " + (/*$AppData*/ ctx[0].MH.ShowM ? '' : 'filterInactive') + " svelte-7dijez")) {
    				attr_dev(img1, "class", img1_class_value);
    			}

    			if (!current || dirty[0] & /*$AppData*/ 1 && img2_class_value !== (img2_class_value = "filterImg " + (/*$AppData*/ ctx[0].MH.ShowW ? '' : 'filterInactive') + " svelte-7dijez")) {
    				attr_dev(img2, "class", img2_class_value);
    			}

    			if (!current || dirty[0] & /*$AppData*/ 1 && img3_class_value !== (img3_class_value = "filterImg " + (/*$AppData*/ ctx[0].MH.ShowGB ? '' : 'filterInactive') + " svelte-7dijez")) {
    				attr_dev(img3, "class", img3_class_value);
    			}

    			if (!current || dirty[0] & /*$AppData*/ 1 && img4_class_value !== (img4_class_value = "filterImg " + (/*$AppData*/ ctx[0].MH.ShowC ? '' : 'filterInactive') + " svelte-7dijez")) {
    				attr_dev(img4, "class", img4_class_value);
    			}

    			if (!current || dirty[0] & /*$AppData*/ 1 && img5_class_value !== (img5_class_value = "filterImg " + (/*$AppData*/ ctx[0].MH.ShowH ? '' : 'filterInactive') + " svelte-7dijez")) {
    				attr_dev(img5, "class", img5_class_value);
    			}

    			if (!current || dirty[0] & /*$AppData*/ 1 && img6_class_value !== (img6_class_value = "filterImg " + (/*$AppData*/ ctx[0].MH.ShowD ? '' : 'filterInactive') + " svelte-7dijez")) {
    				attr_dev(img6, "class", img6_class_value);
    			}

    			if (!current || dirty[0] & /*allTypesEnabled*/ 128 && button8_class_value !== (button8_class_value = "filterMasterButton " + (/*allTypesEnabled*/ ctx[7] ? '' : 'filterMasterDisabled') + " svelte-7dijez")) {
    				attr_dev(button8, "class", button8_class_value);
    			}

    			if (!current || dirty[0] & /*$AppData*/ 1 && img7_class_value !== (img7_class_value = "filterImg " + (/*$AppData*/ ctx[0].MH.ShowInt ? '' : 'filterInactive') + " svelte-7dijez")) {
    				attr_dev(img7, "class", img7_class_value);
    			}

    			if (!current || dirty[0] & /*$AppData*/ 1 && img8_class_value !== (img8_class_value = "filterImg " + (/*$AppData*/ ctx[0].MH.ShowAgi ? '' : 'filterInactive') + " svelte-7dijez")) {
    				attr_dev(img8, "class", img8_class_value);
    			}

    			if (!current || dirty[0] & /*$AppData*/ 1 && img9_class_value !== (img9_class_value = "filterImg " + (/*$AppData*/ ctx[0].MH.ShowStr ? '' : 'filterInactive') + " svelte-7dijez")) {
    				attr_dev(img9, "class", img9_class_value);
    			}

    			if (!current || dirty[0] & /*allClassEnabled*/ 64 && button12_class_value !== (button12_class_value = "filterMasterButton " + (/*allClassEnabled*/ ctx[6] ? '' : 'filterMasterDisabled') + " svelte-7dijez")) {
    				attr_dev(button12, "class", button12_class_value);
    			}

    			if (!current || dirty[0] & /*$AppData*/ 1 && img10_class_value !== (img10_class_value = "filterImg " + (/*$AppData*/ ctx[0].MH.ShowMage ? '' : 'filterInactive') + " svelte-7dijez")) {
    				attr_dev(img10, "class", img10_class_value);
    			}

    			if (!current || dirty[0] & /*$AppData*/ 1 && img11_class_value !== (img11_class_value = "filterImg " + (/*$AppData*/ ctx[0].MH.ShowWar ? '' : 'filterInactive') + " svelte-7dijez")) {
    				attr_dev(img11, "class", img11_class_value);
    			}

    			if (!current || dirty[0] & /*$AppData*/ 1 && img12_class_value !== (img12_class_value = "filterImg " + (/*$AppData*/ ctx[0].MH.ShowTank ? '' : 'filterInactive') + " svelte-7dijez")) {
    				attr_dev(img12, "class", img12_class_value);
    			}

    			if (!current || dirty[0] & /*$AppData*/ 1 && img13_class_value !== (img13_class_value = "filterImg " + (/*$AppData*/ ctx[0].MH.ShowSup ? '' : 'filterInactive') + " svelte-7dijez")) {
    				attr_dev(img13, "class", img13_class_value);
    			}

    			if (!current || dirty[0] & /*$AppData*/ 1 && img14_class_value !== (img14_class_value = "filterImg " + (/*$AppData*/ ctx[0].MH.ShowRan ? '' : 'filterInactive') + " svelte-7dijez")) {
    				attr_dev(img14, "class", img14_class_value);
    			}

    			if (!current || dirty[0] & /*openFilters*/ 2 && div6_class_value !== (div6_class_value = "mobileExpander " + (/*openFilters*/ ctx[1] ? 'filterOpen' : '') + " svelte-7dijez")) {
    				attr_dev(div6, "class", div6_class_value);
    			}

    			if (!current || dirty[0] & /*openFilters*/ 2 && i_class_value !== (i_class_value = "arrow " + (/*openFilters*/ ctx[1] ? 'open' : 'right') + " svelte-7dijez")) {
    				attr_dev(i, "class", i_class_value);
    			}

    			if (!/*$AppData*/ ctx[0].dismissMHSearchInfo) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty[0] & /*$AppData*/ 1) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_4$2(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(section1, t26);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (dirty[0] & /*$AppData, dispatch, sections*/ 1537) {
    				each_value_2 = /*sections*/ ctx[10];
    				validate_each_argument(each_value_2);
    				let i;

    				for (i = 0; i < each_value_2.length; i += 1) {
    					const child_ctx = get_each_context_2$1(ctx, each_value_2, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_2$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(ul, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_2.length;
    			}

    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if (~current_block_type_index) {
    					if_blocks[current_block_type_index].p(ctx, dirty);
    				}
    			} else {
    				if (if_block1) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block1 = if_blocks[current_block_type_index];

    					if (!if_block1) {
    						if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block1.c();
    					} else {
    						if_block1.p(ctx, dirty);
    					}

    					transition_in(if_block1, 1);
    					if_block1.m(section1, null);
    				} else {
    					if_block1 = null;
    				}
    			}

    			if (!current || dirty[0] & /*openInOutMenu*/ 4 && div12_class_value !== (div12_class_value = "inOutMenu " + (/*openInOutMenu*/ ctx[2] ? 'open' : '') + " svelte-7dijez")) {
    				attr_dev(div12, "class", div12_class_value);
    			}

    			if (dirty[0] & /*copyConfirmVisible*/ 8) {
    				toggle_class(div13, "visible", /*copyConfirmVisible*/ ctx[3]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div14);
    			if (if_block0) if_block0.d();
    			destroy_each(each_blocks, detaching);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d();
    			}

    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$4.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function compareValues(key, order = 'asc') {
    	return function innerSort(a, b) {
    		if (!a.hasOwnProperty(key) || !b.hasOwnProperty(key)) {
    			// property doesn't exist on either object
    			throw new Error('Invalid Hero List sort key specified.');
    		}

    		const varA = typeof a[key] === 'string'
    		? a[key].toLowerCase()
    		: a[key];

    		const varB = typeof b[key] === 'string'
    		? b[key].toLowerCase()
    		: b[key];

    		let comparison = 0;

    		if (varA > varB) {
    			comparison = 1;
    		} else {
    			comparison = -1;
    		}

    		return order === 'desc' ? comparison * -1 : comparison;
    	};
    }

    function isCharacterKeyPress(event) {
    	let keycode = event.keyCode;

    	let valid = keycode > 47 && keycode < 58 || // number keys
    	keycode > 64 && keycode < 91 || // letter keys
    	keycode > 95 && keycode < 112 || // numpad keys
    	keycode > 185 && keycode < 193 || // ;=,-./` (in order)
    	keycode > 218 && keycode < 223 || // [\]' (in order)
    	keycode === 9; // tab

    	return valid;
    }

    const click_handler_22 = e => e.stopPropagation();

    function instance$4($$self, $$props, $$invalidate) {
    	let myHeroList;
    	let unownedHeroList;
    	let allFactionsEnabled;
    	let allTypesEnabled;
    	let allClassEnabled;
    	let modalHeight;
    	let $AppData;
    	let $HeroData;
    	validate_store(AppData$1, 'AppData');
    	component_subscribe($$self, AppData$1, $$value => $$invalidate(0, $AppData = $$value));
    	validate_store(HeroData, 'HeroData');
    	component_subscribe($$self, HeroData, $$value => $$invalidate(56, $HeroData = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('MyHeroes', slots, []);
    	let { isMobile = false } = $$props;
    	const dispatch = createEventDispatcher();
    	const jsurl = JSONURL('lzma'); // json-url compressor
    	const { open } = getContext('simple-modal');
    	let openFilters = false;
    	let openInOutMenu = false;
    	let copyConfirmVisible = false;
    	let sections = ['Owned', 'Unowned'];

    	function makeMyHeroList(herolist) {
    		let buffer = [];
    		let hero;

    		for (let key in herolist) {
    			hero = $HeroData.find(e => e.id === key);
    			if (!herolist[key].claimed) continue;
    			if (!$AppData.MH.ShowLB && hero.faction.toLowerCase() === 'lightbearer') continue;
    			if (!$AppData.MH.ShowM && hero.faction.toLowerCase() === 'mauler') continue;
    			if (!$AppData.MH.ShowW && hero.faction.toLowerCase() === 'wilder') continue;
    			if (!$AppData.MH.ShowGB && hero.faction.toLowerCase() === 'graveborn') continue;
    			if (!$AppData.MH.ShowC && hero.faction.toLowerCase() === 'celestial') continue;
    			if (!$AppData.MH.ShowH && hero.faction.toLowerCase() === 'hypogean') continue;
    			if (!$AppData.MH.ShowD && hero.faction.toLowerCase() === 'dimensional') continue;
    			if (!$AppData.MH.ShowInt && hero.type.toLowerCase() === 'intelligence') continue;
    			if (!$AppData.MH.ShowAgi && hero.type.toLowerCase() === 'agility') continue;
    			if (!$AppData.MH.ShowStr && hero.type.toLowerCase() === 'strength') continue;
    			if (!$AppData.MH.ShowMage && hero.class.toLowerCase() === 'mage') continue;
    			if (!$AppData.MH.ShowWar && hero.class.toLowerCase() === 'warrior') continue;
    			if (!$AppData.MH.ShowTank && hero.class.toLowerCase() === 'tank') continue;
    			if (!$AppData.MH.ShowSup && hero.class.toLowerCase() === 'support') continue;
    			if (!$AppData.MH.ShowRan && hero.class.toLowerCase() === 'ranger') continue;
    			if ($AppData.MH.SearchStr !== '' && !hero.name.toLowerCase().includes($AppData.MH.SearchStr.toLowerCase()) && !hero.class.toLowerCase().includes($AppData.MH.SearchStr.toLowerCase()) && !hero.faction.toLowerCase().includes($AppData.MH.SearchStr.toLowerCase()) && !hero.type.toLowerCase().includes($AppData.MH.SearchStr.toLowerCase())) continue;
    			buffer.push(hero);
    		}

    		return buffer.length > 0
    		? buffer.sort(compareValues('name', 'asc'))
    		: buffer;
    	}

    	function makeUnownedHeroList(herolist) {
    		let buffer = [];
    		let hero;

    		for (let key in herolist) {
    			hero = $HeroData.find(e => e.id === key);
    			if (herolist[key].claimed) continue;
    			if (!$AppData.MH.ShowLB && hero.faction.toLowerCase() === 'lightbearer') continue;
    			if (!$AppData.MH.ShowM && hero.faction.toLowerCase() === 'mauler') continue;
    			if (!$AppData.MH.ShowW && hero.faction.toLowerCase() === 'wilder') continue;
    			if (!$AppData.MH.ShowGB && hero.faction.toLowerCase() === 'graveborn') continue;
    			if (!$AppData.MH.ShowC && hero.faction.toLowerCase() === 'celestial') continue;
    			if (!$AppData.MH.ShowH && hero.faction.toLowerCase() === 'hypogean') continue;
    			if (!$AppData.MH.ShowD && hero.faction.toLowerCase() === 'dimensional') continue;
    			if (!$AppData.MH.ShowInt && hero.type.toLowerCase() === 'intelligence') continue;
    			if (!$AppData.MH.ShowAgi && hero.type.toLowerCase() === 'agility') continue;
    			if (!$AppData.MH.ShowStr && hero.type.toLowerCase() === 'strength') continue;
    			if (!$AppData.MH.ShowMage && hero.class.toLowerCase() === 'mage') continue;
    			if (!$AppData.MH.ShowWar && hero.class.toLowerCase() === 'warrior') continue;
    			if (!$AppData.MH.ShowTank && hero.class.toLowerCase() === 'tank') continue;
    			if (!$AppData.MH.ShowSup && hero.class.toLowerCase() === 'support') continue;
    			if (!$AppData.MH.ShowRan && hero.class.toLowerCase() === 'ranger') continue;
    			if ($AppData.MH.SearchStr !== '' && !hero.name.toLowerCase().includes($AppData.MH.SearchStr.toLowerCase()) && !hero.class.toLowerCase().includes($AppData.MH.SearchStr.toLowerCase()) && !hero.faction.toLowerCase().includes($AppData.MH.SearchStr.toLowerCase()) && !hero.type.toLowerCase().includes($AppData.MH.SearchStr.toLowerCase())) continue;
    			buffer.push(hero);
    		}

    		return buffer.length > 0
    		? buffer.sort(compareValues('name', 'asc'))
    		: buffer;
    	}

    	function updateSearch() {
    		$$invalidate(5, myHeroList = makeMyHeroList($AppData.MH.List));
    		$$invalidate(4, unownedHeroList = makeUnownedHeroList($AppData.MH.List));
    		dispatch('saveData');
    	}

    	function updateFilters(filter) {
    		set_store_value(AppData$1, $AppData.MH[filter] = !$AppData.MH[filter], $AppData);
    		$$invalidate(5, myHeroList = makeMyHeroList($AppData.MH.List));
    		$$invalidate(4, unownedHeroList = makeUnownedHeroList($AppData.MH.List));
    		dispatch('saveData');
    	}

    	function handleFilterMasterButtonClick(category) {
    		switch (category) {
    			case 'faction':
    				if (allFactionsEnabled) {
    					set_store_value(AppData$1, $AppData.MH.ShowLB = false, $AppData);
    					set_store_value(AppData$1, $AppData.MH.ShowM = false, $AppData);
    					set_store_value(AppData$1, $AppData.MH.ShowW = false, $AppData);
    					set_store_value(AppData$1, $AppData.MH.ShowGB = false, $AppData);
    					set_store_value(AppData$1, $AppData.MH.ShowC = false, $AppData);
    					set_store_value(AppData$1, $AppData.MH.ShowH = false, $AppData);
    					set_store_value(AppData$1, $AppData.MH.ShowD = false, $AppData);
    				} else {
    					set_store_value(AppData$1, $AppData.MH.ShowLB = true, $AppData);
    					set_store_value(AppData$1, $AppData.MH.ShowM = true, $AppData);
    					set_store_value(AppData$1, $AppData.MH.ShowW = true, $AppData);
    					set_store_value(AppData$1, $AppData.MH.ShowGB = true, $AppData);
    					set_store_value(AppData$1, $AppData.MH.ShowC = true, $AppData);
    					set_store_value(AppData$1, $AppData.MH.ShowH = true, $AppData);
    					set_store_value(AppData$1, $AppData.MH.ShowD = true, $AppData);
    				}
    				break;
    			case 'type':
    				if (allTypesEnabled) {
    					set_store_value(AppData$1, $AppData.MH.ShowInt = false, $AppData);
    					set_store_value(AppData$1, $AppData.MH.ShowAgi = false, $AppData);
    					set_store_value(AppData$1, $AppData.MH.ShowStr = false, $AppData);
    				} else {
    					set_store_value(AppData$1, $AppData.MH.ShowInt = true, $AppData);
    					set_store_value(AppData$1, $AppData.MH.ShowAgi = true, $AppData);
    					set_store_value(AppData$1, $AppData.MH.ShowStr = true, $AppData);
    				}
    				break;
    			case 'class':
    				if (allClassEnabled) {
    					set_store_value(AppData$1, $AppData.MH.ShowMage = false, $AppData);
    					set_store_value(AppData$1, $AppData.MH.ShowWar = false, $AppData);
    					set_store_value(AppData$1, $AppData.MH.ShowTank = false, $AppData);
    					set_store_value(AppData$1, $AppData.MH.ShowSup = false, $AppData);
    					set_store_value(AppData$1, $AppData.MH.ShowRan = false, $AppData);
    				} else {
    					set_store_value(AppData$1, $AppData.MH.ShowMage = true, $AppData);
    					set_store_value(AppData$1, $AppData.MH.ShowWar = true, $AppData);
    					set_store_value(AppData$1, $AppData.MH.ShowTank = true, $AppData);
    					set_store_value(AppData$1, $AppData.MH.ShowSup = true, $AppData);
    					set_store_value(AppData$1, $AppData.MH.ShowRan = true, $AppData);
    				}
    				break;
    			default:
    				throw new Error(`Invalid category given to handleFilterMasterButtonClick(): ${category}`);
    		}

    		$$invalidate(5, myHeroList = makeMyHeroList($AppData.MH.List));
    		$$invalidate(4, unownedHeroList = makeUnownedHeroList($AppData.MH.List));
    		dispatch('saveData');
    	}

    	function handleHeroClaim(heroID) {
    		set_store_value(AppData$1, $AppData.MH.List[heroID].claimed = true, $AppData);
    		set_store_value(AppData$1, $AppData.MH.List[heroID].ascendLv = 6, $AppData);
    		set_store_value(AppData$1, $AppData.MH.List[heroID].si = -1, $AppData);
    		set_store_value(AppData$1, $AppData.MH.List[heroID].furn = 0, $AppData);
    		$$invalidate(5, myHeroList = makeMyHeroList($AppData.MH.List));
    		$$invalidate(4, unownedHeroList = makeUnownedHeroList($AppData.MH.List));
    		dispatch('saveData');
    	}

    	function handleHeroUnclaim(heroID) {
    		set_store_value(AppData$1, $AppData.MH.List[heroID].claimed = false, $AppData);
    		set_store_value(AppData$1, $AppData.MH.List[heroID].ascendLv = 0, $AppData);
    		set_store_value(AppData$1, $AppData.MH.List[heroID].si = -1, $AppData);
    		set_store_value(AppData$1, $AppData.MH.List[heroID].furn = 0, $AppData);
    		$$invalidate(5, myHeroList = makeMyHeroList($AppData.MH.List));
    		$$invalidate(4, unownedHeroList = makeUnownedHeroList($AppData.MH.List));
    		dispatch('saveData');
    	}

    	function handleAscChange(heroID, level) {
    		set_store_value(AppData$1, $AppData.MH.List[heroID].ascendLv = level, $AppData);
    		dispatch('saveData');
    	}

    	function handleSIChange(heroID, level) {
    		set_store_value(AppData$1, $AppData.MH.List[heroID].si = level === 0 ? -1 : (level - 1) * 5, $AppData);
    		dispatch('saveData');
    	}

    	function handleFurnChange(heroID, level) {
    		switch (level) {
    			case 0:
    				set_store_value(AppData$1, $AppData.MH.List[heroID].furn = 0, $AppData);
    				break;
    			case 1:
    				set_store_value(AppData$1, $AppData.MH.List[heroID].furn = 3, $AppData);
    				break;
    			case 2:
    				set_store_value(AppData$1, $AppData.MH.List[heroID].furn = 9, $AppData);
    				break;
    			default:
    				throw new Error(`Invalid furniture level for ${heroID}: ${$AppData.MH.List[heroID].furn}`);
    		}

    		console.log($AppData.MH.List[heroID].furn);
    		dispatch('saveData');
    	}

    	async function handleMyHeroesInput(compressedData) {
    		let data;

    		// unpack and decompress data
    		try {
    			const json = await jsurl.decompress(compressedData);
    			data = JSON.parse(json);
    		} catch(e) {
    			// there was a problem unpacking the data, return an error
    			console.log(e);

    			return {
    				retCode: 1,
    				message: 'Failed to parse data'
    			};
    		}

    		// run consistency checks on data
    		const returnObj = await validateMyHeroData(data);

    		if (returnObj.retCode !== 0) {
    			// validation error occurred
    			return {
    				retCode: returnObj.retCode,
    				message: returnObj.message
    			};
    		} else {
    			// message should contain a clean MH.List data object now
    			set_store_value(AppData$1, $AppData.MH.List = returnObj.message, $AppData);

    			$$invalidate(5, myHeroList = makeMyHeroList($AppData.MH.List));
    			$$invalidate(4, unownedHeroList = makeUnownedHeroList($AppData.MH.List));
    			dispatch('saveData');

    			return {
    				retCode: 0,
    				message: 'Data import successful'
    			};
    		}
    	}

    	function handleImportData() {
    		open(
    			ImportData,
    			{
    				dataHandler: handleMyHeroesInput,
    				saveAppData: () => dispatch('saveData'),
    				title: 'Paste My Hero Data:'
    			},
    			{
    				closeButton: ModalCloseButton,
    				styleContent: {
    					background: '#F0F0F2',
    					padding: 0,
    					borderRadius: '10px',
    					maxHeight: modalHeight
    				}
    			}
    		);
    	}

    	async function handleExportData() {
    		const output = await jsurl.compress(JSON.stringify($AppData.MH.List));

    		navigator.clipboard.writeText(output).then(
    			() => {
    				$$invalidate(3, copyConfirmVisible = true);
    				setTimeout(() => $$invalidate(3, copyConfirmVisible = false), 1000);
    			},
    			() => {
    				throw new Error("Error copying Comp data to clipboard.");
    			}
    		);
    	}

    	function dynamicSearch(event) {
    		if (isCharacterKeyPress(event)) {
    			if (event.keyCode === 9) {
    				// tab pressed, toggle openFilters
    				$$invalidate(1, openFilters = !openFilters);

    				openFilters
    				? document.querySelector('#searchBox').focus()
    				: document.querySelector('#searchBox').blur();
    			} else if (!openFilters) {
    				$$invalidate(1, openFilters = true);
    				set_store_value(AppData$1, $AppData.MH.SearchStr = $AppData.MH.SearchStr + event.key, $AppData);
    				document.querySelector('#searchBox').focus();
    				updateSearch();
    			}
    		}
    	}

    	function handleHeroDetailClick(heroID) {
    		open(HeroDetail, { heroID }, {
    			closeButton: ModalCloseButton,
    			styleContent: {
    				background: '#F0F0F2',
    				padding: 0,
    				borderRadius: '10px',
    				maxHeight: modalHeight
    			}
    		});
    	}

    	const writable_props = ['isMobile'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(`<MyHeroes> was created with unknown prop '${key}'`);
    	});

    	function input_input_handler() {
    		$AppData.MH.SearchStr = this.value;
    		AppData$1.set($AppData);
    	}

    	const click_handler = () => handleFilterMasterButtonClick('faction');
    	const click_handler_1 = () => updateFilters('ShowLB');
    	const click_handler_2 = () => updateFilters('ShowM');
    	const click_handler_3 = () => updateFilters('ShowW');
    	const click_handler_4 = () => updateFilters('ShowGB');
    	const click_handler_5 = () => updateFilters('ShowC');
    	const click_handler_6 = () => updateFilters('ShowH');
    	const click_handler_7 = () => updateFilters('ShowD');
    	const click_handler_8 = () => handleFilterMasterButtonClick('type');
    	const click_handler_9 = () => updateFilters('ShowInt');
    	const click_handler_10 = () => updateFilters('ShowAgi');
    	const click_handler_11 = () => updateFilters('ShowStr');
    	const click_handler_12 = () => handleFilterMasterButtonClick('class');
    	const click_handler_13 = () => updateFilters('ShowMage');
    	const click_handler_14 = () => updateFilters('ShowWar');
    	const click_handler_15 = () => updateFilters('ShowTank');
    	const click_handler_16 = () => updateFilters('ShowSup');
    	const click_handler_17 = () => updateFilters('ShowRan');
    	const click_handler_18 = () => $$invalidate(1, openFilters = !openFilters);

    	const func = () => {
    		set_store_value(AppData$1, $AppData.dismissMHSearchInfo = true, $AppData);
    		dispatch('saveData');
    	};

    	const click_handler_19 = i => {
    		set_store_value(AppData$1, $AppData.MH.openSection = i, $AppData);
    		dispatch('saveData');
    	};

    	const func_1 = hero => handleHeroUnclaim(hero.id);
    	const click_handler_20 = hero => handleHeroDetailClick(hero.id);
    	const click_handler_21 = hero => handleHeroDetailClick(hero.id);
    	const func_2 = (hero, index) => handleAscChange(hero.id, index);
    	const func_3 = (hero, index) => handleSIChange(hero.id, index);
    	const func_4 = (hero, index) => handleFurnChange(hero.id, index);

    	const click_handler_23 = (hero, e) => {
    		handleHeroClaim(hero.id);
    		e.stopPropagation();
    	};

    	const click_handler_24 = e => {
    		$$invalidate(2, openInOutMenu = !openInOutMenu);
    		e.stopPropagation();
    	};

    	const click_handler_25 = () => $$invalidate(2, openInOutMenu = false);

    	$$self.$$set = $$props => {
    		if ('isMobile' in $$props) $$invalidate(23, isMobile = $$props.isMobile);
    	};

    	$$self.$capture_state = () => ({
    		getContext,
    		createEventDispatcher,
    		flip,
    		JSONURL,
    		AppData: AppData$1,
    		HeroData,
    		ModalCloseButton,
    		ImportData,
    		HeroDetail,
    		TutorialBox,
    		XButton,
    		AscensionMenu,
    		SIMenu,
    		FurnMenu,
    		isMobile,
    		dispatch,
    		jsurl,
    		open,
    		openFilters,
    		openInOutMenu,
    		copyConfirmVisible,
    		sections,
    		makeMyHeroList,
    		makeUnownedHeroList,
    		compareValues,
    		updateSearch,
    		updateFilters,
    		handleFilterMasterButtonClick,
    		handleHeroClaim,
    		handleHeroUnclaim,
    		handleAscChange,
    		handleSIChange,
    		handleFurnChange,
    		handleMyHeroesInput,
    		handleImportData,
    		handleExportData,
    		isCharacterKeyPress,
    		dynamicSearch,
    		handleHeroDetailClick,
    		modalHeight,
    		unownedHeroList,
    		myHeroList,
    		allClassEnabled,
    		allTypesEnabled,
    		allFactionsEnabled,
    		$AppData,
    		$HeroData
    	});

    	$$self.$inject_state = $$props => {
    		if ('isMobile' in $$props) $$invalidate(23, isMobile = $$props.isMobile);
    		if ('openFilters' in $$props) $$invalidate(1, openFilters = $$props.openFilters);
    		if ('openInOutMenu' in $$props) $$invalidate(2, openInOutMenu = $$props.openInOutMenu);
    		if ('copyConfirmVisible' in $$props) $$invalidate(3, copyConfirmVisible = $$props.copyConfirmVisible);
    		if ('sections' in $$props) $$invalidate(10, sections = $$props.sections);
    		if ('modalHeight' in $$props) modalHeight = $$props.modalHeight;
    		if ('unownedHeroList' in $$props) $$invalidate(4, unownedHeroList = $$props.unownedHeroList);
    		if ('myHeroList' in $$props) $$invalidate(5, myHeroList = $$props.myHeroList);
    		if ('allClassEnabled' in $$props) $$invalidate(6, allClassEnabled = $$props.allClassEnabled);
    		if ('allTypesEnabled' in $$props) $$invalidate(7, allTypesEnabled = $$props.allTypesEnabled);
    		if ('allFactionsEnabled' in $$props) $$invalidate(8, allFactionsEnabled = $$props.allFactionsEnabled);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*$AppData*/ 1) {
    			$$invalidate(5, myHeroList = makeMyHeroList($AppData.MH.List));
    		}

    		if ($$self.$$.dirty[0] & /*$AppData*/ 1) {
    			$$invalidate(4, unownedHeroList = makeUnownedHeroList($AppData.MH.List));
    		}

    		if ($$self.$$.dirty[0] & /*$AppData*/ 1) {
    			$$invalidate(8, allFactionsEnabled = $AppData.MH.ShowLB && $AppData.MH.ShowM && $AppData.MH.ShowW && $AppData.MH.ShowGB && $AppData.MH.ShowC && $AppData.MH.ShowH && $AppData.MH.ShowD);
    		}

    		if ($$self.$$.dirty[0] & /*$AppData*/ 1) {
    			$$invalidate(7, allTypesEnabled = $AppData.MH.ShowInt && $AppData.MH.ShowAgi && $AppData.MH.ShowStr);
    		}

    		if ($$self.$$.dirty[0] & /*$AppData*/ 1) {
    			$$invalidate(6, allClassEnabled = $AppData.MH.ShowMage && $AppData.MH.ShowWar && $AppData.MH.ShowTank && $AppData.MH.ShowSup && $AppData.MH.ShowRan);
    		}

    		if ($$self.$$.dirty[0] & /*isMobile*/ 8388608) {
    			modalHeight = isMobile ? '75vh' : '80vh';
    		}
    	};

    	return [
    		$AppData,
    		openFilters,
    		openInOutMenu,
    		copyConfirmVisible,
    		unownedHeroList,
    		myHeroList,
    		allClassEnabled,
    		allTypesEnabled,
    		allFactionsEnabled,
    		dispatch,
    		sections,
    		updateSearch,
    		updateFilters,
    		handleFilterMasterButtonClick,
    		handleHeroClaim,
    		handleHeroUnclaim,
    		handleAscChange,
    		handleSIChange,
    		handleFurnChange,
    		handleImportData,
    		handleExportData,
    		dynamicSearch,
    		handleHeroDetailClick,
    		isMobile,
    		input_input_handler,
    		click_handler,
    		click_handler_1,
    		click_handler_2,
    		click_handler_3,
    		click_handler_4,
    		click_handler_5,
    		click_handler_6,
    		click_handler_7,
    		click_handler_8,
    		click_handler_9,
    		click_handler_10,
    		click_handler_11,
    		click_handler_12,
    		click_handler_13,
    		click_handler_14,
    		click_handler_15,
    		click_handler_16,
    		click_handler_17,
    		click_handler_18,
    		func,
    		click_handler_19,
    		func_1,
    		click_handler_20,
    		click_handler_21,
    		func_2,
    		func_3,
    		func_4,
    		click_handler_23,
    		click_handler_24,
    		click_handler_25
    	];
    }

    class MyHeroes extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$4, create_fragment$4, safe_not_equal, { isMobile: 23 }, null, [-1, -1, -1]);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MyHeroes",
    			options,
    			id: create_fragment$4.name
    		});
    	}

    	get isMobile() {
    		throw new Error_1$1("<MyHeroes>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isMobile(value) {
    		throw new Error_1$1("<MyHeroes>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\components\Recommendations.svelte generated by Svelte v3.41.0 */

    const { Error: Error_1, Object: Object_1 } = globals;
    const file$3 = "src\\components\\Recommendations.svelte";

    function get_each_context_4(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[31] = list[i];
    	return child_ctx;
    }

    function get_each_context_5(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[34] = list[i];
    	return child_ctx;
    }

    function get_each_context_2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[31] = list[i];
    	return child_ctx;
    }

    function get_each_context_3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[34] = list[i];
    	return child_ctx;
    }

    function get_each_context$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[31] = list[i];
    	return child_ctx;
    }

    function get_each_context_1$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[34] = list[i];
    	return child_ctx;
    }

    function get_each_context_6(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[45] = list[i];
    	child_ctx[47] = i;
    	return child_ctx;
    }

    // (161:3) {#each sections as section, i}
    function create_each_block_6(ctx) {
    	let li;
    	let button;
    	let t0_value = /*section*/ ctx[45] + "";
    	let t0;
    	let t1;
    	let mounted;
    	let dispose;

    	function click_handler() {
    		return /*click_handler*/ ctx[9](/*i*/ ctx[47]);
    	}

    	const block = {
    		c: function create() {
    			li = element("li");
    			button = element("button");
    			t0 = text$2(t0_value);
    			t1 = space();
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "sectionButton svelte-1j8ky84");
    			toggle_class(button, "active", /*$AppData*/ ctx[1].REC.openSection === /*i*/ ctx[47]);
    			add_location(button, file$3, 162, 4, 4525);
    			add_location(li, file$3, 161, 3, 4515);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, button);
    			append_dev(button, t0);
    			append_dev(li, t1);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", click_handler, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty[0] & /*$AppData*/ 2) {
    				toggle_class(button, "active", /*$AppData*/ ctx[1].REC.openSection === /*i*/ ctx[47]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_6.name,
    		type: "each",
    		source: "(161:3) {#each sections as section, i}",
    		ctx
    	});

    	return block;
    }

    // (236:42) 
    function create_if_block_4$1(ctx) {
    	let section;
    	let div;
    	let show_if;
    	let current_block_type_index;
    	let if_block;
    	let current;
    	const if_block_creators = [create_if_block_5, create_else_block_2];
    	const if_blocks = [];

    	function select_block_type_3(ctx, dirty) {
    		if (dirty[0] & /*recommendations*/ 1) show_if = !!(/*recommendations*/ ctx[0].filter(func_2).length > 0);
    		if (show_if) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type_3(ctx, [-1, -1]);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			section = element("section");
    			div = element("div");
    			if_block.c();
    			attr_dev(div, "class", "recArea svelte-1j8ky84");
    			add_location(div, file$3, 237, 2, 7748);
    			attr_dev(section, "class", "recSection furnSection svelte-1j8ky84");
    			add_location(section, file$3, 236, 1, 7704);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, div);
    			if_blocks[current_block_type_index].m(div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_3(ctx, dirty);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(div, null);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			if_blocks[current_block_type_index].d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$1.name,
    		type: "if",
    		source: "(236:42) ",
    		ctx
    	});

    	return block;
    }

    // (202:42) 
    function create_if_block_2$1(ctx) {
    	let section;
    	let div;
    	let show_if;
    	let current_block_type_index;
    	let if_block;
    	let current;
    	const if_block_creators = [create_if_block_3$1, create_else_block_1];
    	const if_blocks = [];

    	function select_block_type_2(ctx, dirty) {
    		if (dirty[0] & /*recommendations*/ 1) show_if = !!(/*recommendations*/ ctx[0].filter(func_1).length > 0);
    		if (show_if) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type_2(ctx, [-1, -1]);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			section = element("section");
    			div = element("div");
    			if_block.c();
    			attr_dev(div, "class", "recArea svelte-1j8ky84");
    			add_location(div, file$3, 203, 2, 6271);
    			attr_dev(section, "class", "recSection siSection svelte-1j8ky84");
    			add_location(section, file$3, 202, 1, 6229);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, div);
    			if_blocks[current_block_type_index].m(div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_2(ctx, dirty);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(div, null);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			if_blocks[current_block_type_index].d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$1.name,
    		type: "if",
    		source: "(202:42) ",
    		ctx
    	});

    	return block;
    }

    // (168:1) {#if $AppData.REC.openSection === 0}
    function create_if_block$2(ctx) {
    	let section;
    	let div;
    	let show_if;
    	let current_block_type_index;
    	let if_block;
    	let current;
    	const if_block_creators = [create_if_block_1$1, create_else_block$2];
    	const if_blocks = [];

    	function select_block_type_1(ctx, dirty) {
    		if (dirty[0] & /*recommendations*/ 1) show_if = !!(/*recommendations*/ ctx[0].filter(func).length > 0);
    		if (show_if) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type_1(ctx, [-1, -1]);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			section = element("section");
    			div = element("div");
    			if_block.c();
    			attr_dev(div, "class", "recArea svelte-1j8ky84");
    			add_location(div, file$3, 169, 2, 4833);
    			attr_dev(section, "class", "recSection buildSection svelte-1j8ky84");
    			add_location(section, file$3, 168, 1, 4788);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, div);
    			if_blocks[current_block_type_index].m(div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_1(ctx, dirty);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(div, null);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			if_blocks[current_block_type_index].d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$2.name,
    		type: "if",
    		source: "(168:1) {#if $AppData.REC.openSection === 0}",
    		ctx
    	});

    	return block;
    }

    // (265:3) {:else}
    function create_else_block_2(ctx) {
    	let div;
    	let span;

    	const block = {
    		c: function create() {
    			div = element("div");
    			span = element("span");
    			span.textContent = "No Furniture Recommendations";
    			attr_dev(span, "class", "svelte-1j8ky84");
    			add_location(span, file$3, 265, 23, 9026);
    			attr_dev(div, "class", "noRec svelte-1j8ky84");
    			add_location(div, file$3, 265, 4, 9007);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, span);
    		},
    		p: noop$1,
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_2.name,
    		type: "else",
    		source: "(265:3) {:else}",
    		ctx
    	});

    	return block;
    }

    // (239:3) {#if recommendations.filter(e => e.type === 'furn').length > 0}
    function create_if_block_5(ctx) {
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let each_1_anchor;
    	let current;
    	let each_value_4 = /*recommendations*/ ctx[0].filter(func_11).sort(sortByCore);
    	validate_each_argument(each_value_4);
    	const get_key = ctx => /*rec*/ ctx[31].id + '_furn';
    	validate_each_keys(ctx, each_value_4, get_each_context_4, get_key);

    	for (let i = 0; i < each_value_4.length; i += 1) {
    		let child_ctx = get_each_context_4(ctx, each_value_4, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block_4(key, child_ctx));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty$3();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*recommendations, handleCompClick, handlePortraitClick, $HeroData, handleClaimClick*/ 229) {
    				each_value_4 = /*recommendations*/ ctx[0].filter(func_11).sort(sortByCore);
    				validate_each_argument(each_value_4);
    				group_outros();
    				for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].r();
    				validate_each_keys(ctx, each_value_4, get_each_context_4, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value_4, each_1_lookup, each_1_anchor.parentNode, fix_and_outro_and_destroy_block, create_each_block_4, each_1_anchor, get_each_context_4);
    				for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].a();
    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value_4.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d(detaching);
    			}

    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5.name,
    		type: "if",
    		source: "(239:3) {#if recommendations.filter(e => e.type === 'furn').length > 0}",
    		ctx
    	});

    	return block;
    }

    // (258:7) {#each rec.comps as comp}
    function create_each_block_5(ctx) {
    	let li;
    	let button;
    	let t_value = /*comp*/ ctx[34].name + "";
    	let t;
    	let mounted;
    	let dispose;

    	function click_handler_6() {
    		return /*click_handler_6*/ ctx[24](/*comp*/ ctx[34]);
    	}

    	const block = {
    		c: function create() {
    			li = element("li");
    			button = element("button");
    			t = text$2(t_value);
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "compButton svelte-1j8ky84");
    			add_location(button, file$3, 258, 12, 8811);
    			attr_dev(li, "class", "svelte-1j8ky84");
    			add_location(li, file$3, 258, 8, 8807);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, button);
    			append_dev(button, t);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", click_handler_6, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty[0] & /*recommendations*/ 1 && t_value !== (t_value = /*comp*/ ctx[34].name + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_5.name,
    		type: "each",
    		source: "(258:7) {#each rec.comps as comp}",
    		ctx
    	});

    	return block;
    }

    // (240:4) {#each recommendations.filter(e => e.type === 'furn').sort(sortByCore) as rec (rec.id+'_furn')}
    function create_each_block_4(key_1, ctx) {
    	let div4;
    	let div0;
    	let button0;
    	let t1;
    	let h4;
    	let t2_value = /*$HeroData*/ ctx[2].find(func_12).name + "";
    	let t2;
    	let t3;
    	let div1;
    	let button1;
    	let img;
    	let img_src_value;
    	let img_alt_value;
    	let t4;
    	let span;
    	let t5;
    	let div2;
    	let sifurnbox;
    	let t6;
    	let div3;
    	let h5;
    	let t8;
    	let ul;
    	let t9;
    	let rect;
    	let stop_animation = noop$1;
    	let current;
    	let mounted;
    	let dispose;

    	function func_12(...args) {
    		return /*func_12*/ ctx[20](/*rec*/ ctx[31], ...args);
    	}

    	function func_13(...args) {
    		return /*func_13*/ ctx[21](/*rec*/ ctx[31], ...args);
    	}

    	function func_14(...args) {
    		return /*func_14*/ ctx[22](/*rec*/ ctx[31], ...args);
    	}

    	function click_handler_5() {
    		return /*click_handler_5*/ ctx[23](/*rec*/ ctx[31]);
    	}

    	sifurnbox = new SIFurnBox({
    			props: { type: "furn", num: /*rec*/ ctx[31].value },
    			$$inline: true
    		});

    	let each_value_5 = /*rec*/ ctx[31].comps;
    	validate_each_argument(each_value_5);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_5.length; i += 1) {
    		each_blocks[i] = create_each_block_5(get_each_context_5(ctx, each_value_5, i));
    	}

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			div4 = element("div");
    			div0 = element("div");
    			button0 = element("button");
    			button0.textContent = "✔";
    			t1 = space();
    			h4 = element("h4");
    			t2 = text$2(t2_value);
    			t3 = space();
    			div1 = element("div");
    			button1 = element("button");
    			img = element("img");
    			t4 = space();
    			span = element("span");
    			t5 = space();
    			div2 = element("div");
    			create_component(sifurnbox.$$.fragment);
    			t6 = space();
    			div3 = element("div");
    			h5 = element("h5");
    			h5.textContent = "Used in";
    			t8 = space();
    			ul = element("ul");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t9 = space();
    			attr_dev(button0, "type", "button");
    			attr_dev(button0, "class", "claimButton svelte-1j8ky84");
    			add_location(button0, file$3, 242, 7, 8045);
    			attr_dev(div0, "class", "claimButtonArea svelte-1j8ky84");
    			add_location(div0, file$3, 241, 6, 8007);
    			attr_dev(h4, "class", "svelte-1j8ky84");
    			add_location(h4, file$3, 244, 6, 8181);
    			attr_dev(img, "class", "portrait svelte-1j8ky84");
    			if (!src_url_equal(img.src, img_src_value = /*$HeroData*/ ctx[2].find(func_13).portrait)) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", img_alt_value = /*$HeroData*/ ctx[2].find(func_14).name);
    			add_location(img, file$3, 247, 8, 8381);
    			attr_dev(span, "class", "coreMark svelte-1j8ky84");
    			toggle_class(span, "visible", /*rec*/ ctx[31].core);
    			add_location(span, file$3, 248, 8, 8513);
    			attr_dev(button1, "type", "button");
    			attr_dev(button1, "class", "portraitButton svelte-1j8ky84");
    			add_location(button1, file$3, 246, 7, 8281);
    			attr_dev(div1, "class", "portraitContainer svelte-1j8ky84");
    			add_location(div1, file$3, 245, 6, 8241);
    			attr_dev(div2, "class", "recText svelte-1j8ky84");
    			add_location(div2, file$3, 251, 6, 8608);
    			attr_dev(h5, "class", "svelte-1j8ky84");
    			add_location(h5, file$3, 255, 7, 8734);
    			attr_dev(ul, "class", "svelte-1j8ky84");
    			add_location(ul, file$3, 256, 7, 8759);
    			attr_dev(div3, "class", "compArea svelte-1j8ky84");
    			add_location(div3, file$3, 254, 6, 8703);
    			attr_dev(div4, "class", "recCard svelte-1j8ky84");
    			add_location(div4, file$3, 240, 5, 7945);
    			this.first = div4;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div4, anchor);
    			append_dev(div4, div0);
    			append_dev(div0, button0);
    			append_dev(div4, t1);
    			append_dev(div4, h4);
    			append_dev(h4, t2);
    			append_dev(div4, t3);
    			append_dev(div4, div1);
    			append_dev(div1, button1);
    			append_dev(button1, img);
    			append_dev(button1, t4);
    			append_dev(button1, span);
    			append_dev(div4, t5);
    			append_dev(div4, div2);
    			mount_component(sifurnbox, div2, null);
    			append_dev(div4, t6);
    			append_dev(div4, div3);
    			append_dev(div3, h5);
    			append_dev(div3, t8);
    			append_dev(div3, ul);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(ul, null);
    			}

    			append_dev(div4, t9);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(
    						button0,
    						"click",
    						function () {
    							if (is_function(/*handleClaimClick*/ ctx[7](/*rec*/ ctx[31].id, /*rec*/ ctx[31].value, 'furn'))) /*handleClaimClick*/ ctx[7](/*rec*/ ctx[31].id, /*rec*/ ctx[31].value, 'furn').apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					),
    					listen_dev(button1, "click", click_handler_5, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if ((!current || dirty[0] & /*$HeroData, recommendations*/ 5) && t2_value !== (t2_value = /*$HeroData*/ ctx[2].find(func_12).name + "")) set_data_dev(t2, t2_value);

    			if (!current || dirty[0] & /*$HeroData, recommendations*/ 5 && !src_url_equal(img.src, img_src_value = /*$HeroData*/ ctx[2].find(func_13).portrait)) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if (!current || dirty[0] & /*$HeroData, recommendations*/ 5 && img_alt_value !== (img_alt_value = /*$HeroData*/ ctx[2].find(func_14).name)) {
    				attr_dev(img, "alt", img_alt_value);
    			}

    			if (dirty[0] & /*recommendations*/ 1) {
    				toggle_class(span, "visible", /*rec*/ ctx[31].core);
    			}

    			const sifurnbox_changes = {};
    			if (dirty[0] & /*recommendations*/ 1) sifurnbox_changes.num = /*rec*/ ctx[31].value;
    			sifurnbox.$set(sifurnbox_changes);

    			if (dirty[0] & /*handleCompClick, recommendations*/ 33) {
    				each_value_5 = /*rec*/ ctx[31].comps;
    				validate_each_argument(each_value_5);
    				let i;

    				for (i = 0; i < each_value_5.length; i += 1) {
    					const child_ctx = get_each_context_5(ctx, each_value_5, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_5(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(ul, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_5.length;
    			}
    		},
    		r: function measure() {
    			rect = div4.getBoundingClientRect();
    		},
    		f: function fix() {
    			fix_position(div4);
    			stop_animation();
    		},
    		a: function animate() {
    			stop_animation();
    			stop_animation = create_animation(div4, rect, flip, { duration: 200 });
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(sifurnbox.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(sifurnbox.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div4);
    			destroy_component(sifurnbox);
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_4.name,
    		type: "each",
    		source: "(240:4) {#each recommendations.filter(e => e.type === 'furn').sort(sortByCore) as rec (rec.id+'_furn')}",
    		ctx
    	});

    	return block;
    }

    // (231:3) {:else}
    function create_else_block_1(ctx) {
    	let div;
    	let span;

    	const block = {
    		c: function create() {
    			div = element("div");
    			span = element("span");
    			span.textContent = "No Signature Item Recommendations";
    			attr_dev(span, "class", "svelte-1j8ky84");
    			add_location(span, file$3, 231, 23, 7572);
    			attr_dev(div, "class", "noRec svelte-1j8ky84");
    			add_location(div, file$3, 231, 4, 7553);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, span);
    		},
    		p: noop$1,
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1.name,
    		type: "else",
    		source: "(231:3) {:else}",
    		ctx
    	});

    	return block;
    }

    // (205:3) {#if recommendations.filter(e => e.type === 'si').length > 0}
    function create_if_block_3$1(ctx) {
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let each_1_anchor;
    	let current;
    	let each_value_2 = /*recommendations*/ ctx[0].filter(func_7).sort(sortByCore);
    	validate_each_argument(each_value_2);
    	const get_key = ctx => /*rec*/ ctx[31].id + '_si';
    	validate_each_keys(ctx, each_value_2, get_each_context_2, get_key);

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		let child_ctx = get_each_context_2(ctx, each_value_2, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block_2(key, child_ctx));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty$3();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*recommendations, handleCompClick, handlePortraitClick, $HeroData, handleClaimClick*/ 229) {
    				each_value_2 = /*recommendations*/ ctx[0].filter(func_7).sort(sortByCore);
    				validate_each_argument(each_value_2);
    				group_outros();
    				for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].r();
    				validate_each_keys(ctx, each_value_2, get_each_context_2, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value_2, each_1_lookup, each_1_anchor.parentNode, fix_and_outro_and_destroy_block, create_each_block_2, each_1_anchor, get_each_context_2);
    				for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].a();
    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value_2.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d(detaching);
    			}

    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$1.name,
    		type: "if",
    		source: "(205:3) {#if recommendations.filter(e => e.type === 'si').length > 0}",
    		ctx
    	});

    	return block;
    }

    // (224:7) {#each rec.comps as comp}
    function create_each_block_3(ctx) {
    	let li;
    	let button;
    	let t_value = /*comp*/ ctx[34].name + "";
    	let t;
    	let mounted;
    	let dispose;

    	function click_handler_4() {
    		return /*click_handler_4*/ ctx[19](/*comp*/ ctx[34]);
    	}

    	const block = {
    		c: function create() {
    			li = element("li");
    			button = element("button");
    			t = text$2(t_value);
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "compButton svelte-1j8ky84");
    			add_location(button, file$3, 224, 12, 7357);
    			attr_dev(li, "class", "svelte-1j8ky84");
    			add_location(li, file$3, 224, 8, 7353);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, button);
    			append_dev(button, t);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", click_handler_4, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty[0] & /*recommendations*/ 1 && t_value !== (t_value = /*comp*/ ctx[34].name + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_3.name,
    		type: "each",
    		source: "(224:7) {#each rec.comps as comp}",
    		ctx
    	});

    	return block;
    }

    // (206:4) {#each recommendations.filter(e => e.type === 'si').sort(sortByCore) as rec (rec.id+'_si')}
    function create_each_block_2(key_1, ctx) {
    	let div4;
    	let div0;
    	let button0;
    	let t1;
    	let h4;
    	let t2_value = /*$HeroData*/ ctx[2].find(func_8).name + "";
    	let t2;
    	let t3;
    	let div1;
    	let button1;
    	let img;
    	let img_src_value;
    	let img_alt_value;
    	let t4;
    	let span;
    	let t5;
    	let div2;
    	let sifurnbox;
    	let t6;
    	let div3;
    	let h5;
    	let t8;
    	let ul;
    	let t9;
    	let rect;
    	let stop_animation = noop$1;
    	let current;
    	let mounted;
    	let dispose;

    	function func_8(...args) {
    		return /*func_8*/ ctx[15](/*rec*/ ctx[31], ...args);
    	}

    	function func_9(...args) {
    		return /*func_9*/ ctx[16](/*rec*/ ctx[31], ...args);
    	}

    	function func_10(...args) {
    		return /*func_10*/ ctx[17](/*rec*/ ctx[31], ...args);
    	}

    	function click_handler_3() {
    		return /*click_handler_3*/ ctx[18](/*rec*/ ctx[31]);
    	}

    	sifurnbox = new SIFurnBox({
    			props: {
    				type: "si",
    				num: /*rec*/ ctx[31].value,
    				fullName: true,
    				maxWidth: "100px"
    			},
    			$$inline: true
    		});

    	let each_value_3 = /*rec*/ ctx[31].comps;
    	validate_each_argument(each_value_3);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_3.length; i += 1) {
    		each_blocks[i] = create_each_block_3(get_each_context_3(ctx, each_value_3, i));
    	}

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			div4 = element("div");
    			div0 = element("div");
    			button0 = element("button");
    			button0.textContent = "✔";
    			t1 = space();
    			h4 = element("h4");
    			t2 = text$2(t2_value);
    			t3 = space();
    			div1 = element("div");
    			button1 = element("button");
    			img = element("img");
    			t4 = space();
    			span = element("span");
    			t5 = space();
    			div2 = element("div");
    			create_component(sifurnbox.$$.fragment);
    			t6 = space();
    			div3 = element("div");
    			h5 = element("h5");
    			h5.textContent = "Used in";
    			t8 = space();
    			ul = element("ul");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t9 = space();
    			attr_dev(button0, "type", "button");
    			attr_dev(button0, "class", "claimButton svelte-1j8ky84");
    			add_location(button0, file$3, 208, 7, 6562);
    			attr_dev(div0, "class", "claimButtonArea svelte-1j8ky84");
    			add_location(div0, file$3, 207, 6, 6524);
    			attr_dev(h4, "class", "svelte-1j8ky84");
    			add_location(h4, file$3, 210, 6, 6696);
    			attr_dev(img, "class", "portrait svelte-1j8ky84");
    			if (!src_url_equal(img.src, img_src_value = /*$HeroData*/ ctx[2].find(func_9).portrait)) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", img_alt_value = /*$HeroData*/ ctx[2].find(func_10).name);
    			add_location(img, file$3, 213, 8, 6896);
    			attr_dev(span, "class", "coreMark svelte-1j8ky84");
    			toggle_class(span, "visible", /*rec*/ ctx[31].core);
    			add_location(span, file$3, 214, 8, 7028);
    			attr_dev(button1, "type", "button");
    			attr_dev(button1, "class", "portraitButton svelte-1j8ky84");
    			add_location(button1, file$3, 212, 7, 6796);
    			attr_dev(div1, "class", "portraitContainer svelte-1j8ky84");
    			add_location(div1, file$3, 211, 6, 6756);
    			attr_dev(div2, "class", "recText svelte-1j8ky84");
    			add_location(div2, file$3, 217, 6, 7123);
    			attr_dev(h5, "class", "svelte-1j8ky84");
    			add_location(h5, file$3, 221, 7, 7280);
    			attr_dev(ul, "class", "svelte-1j8ky84");
    			add_location(ul, file$3, 222, 7, 7305);
    			attr_dev(div3, "class", "compArea svelte-1j8ky84");
    			add_location(div3, file$3, 220, 6, 7249);
    			attr_dev(div4, "class", "recCard svelte-1j8ky84");
    			add_location(div4, file$3, 206, 5, 6462);
    			this.first = div4;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div4, anchor);
    			append_dev(div4, div0);
    			append_dev(div0, button0);
    			append_dev(div4, t1);
    			append_dev(div4, h4);
    			append_dev(h4, t2);
    			append_dev(div4, t3);
    			append_dev(div4, div1);
    			append_dev(div1, button1);
    			append_dev(button1, img);
    			append_dev(button1, t4);
    			append_dev(button1, span);
    			append_dev(div4, t5);
    			append_dev(div4, div2);
    			mount_component(sifurnbox, div2, null);
    			append_dev(div4, t6);
    			append_dev(div4, div3);
    			append_dev(div3, h5);
    			append_dev(div3, t8);
    			append_dev(div3, ul);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(ul, null);
    			}

    			append_dev(div4, t9);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(
    						button0,
    						"click",
    						function () {
    							if (is_function(/*handleClaimClick*/ ctx[7](/*rec*/ ctx[31].id, /*rec*/ ctx[31].value, 'si'))) /*handleClaimClick*/ ctx[7](/*rec*/ ctx[31].id, /*rec*/ ctx[31].value, 'si').apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					),
    					listen_dev(button1, "click", click_handler_3, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if ((!current || dirty[0] & /*$HeroData, recommendations*/ 5) && t2_value !== (t2_value = /*$HeroData*/ ctx[2].find(func_8).name + "")) set_data_dev(t2, t2_value);

    			if (!current || dirty[0] & /*$HeroData, recommendations*/ 5 && !src_url_equal(img.src, img_src_value = /*$HeroData*/ ctx[2].find(func_9).portrait)) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if (!current || dirty[0] & /*$HeroData, recommendations*/ 5 && img_alt_value !== (img_alt_value = /*$HeroData*/ ctx[2].find(func_10).name)) {
    				attr_dev(img, "alt", img_alt_value);
    			}

    			if (dirty[0] & /*recommendations*/ 1) {
    				toggle_class(span, "visible", /*rec*/ ctx[31].core);
    			}

    			const sifurnbox_changes = {};
    			if (dirty[0] & /*recommendations*/ 1) sifurnbox_changes.num = /*rec*/ ctx[31].value;
    			sifurnbox.$set(sifurnbox_changes);

    			if (dirty[0] & /*handleCompClick, recommendations*/ 33) {
    				each_value_3 = /*rec*/ ctx[31].comps;
    				validate_each_argument(each_value_3);
    				let i;

    				for (i = 0; i < each_value_3.length; i += 1) {
    					const child_ctx = get_each_context_3(ctx, each_value_3, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_3(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(ul, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_3.length;
    			}
    		},
    		r: function measure() {
    			rect = div4.getBoundingClientRect();
    		},
    		f: function fix() {
    			fix_position(div4);
    			stop_animation();
    		},
    		a: function animate() {
    			stop_animation();
    			stop_animation = create_animation(div4, rect, flip, { duration: 200 });
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(sifurnbox.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(sifurnbox.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div4);
    			destroy_component(sifurnbox);
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_2.name,
    		type: "each",
    		source: "(206:4) {#each recommendations.filter(e => e.type === 'si').sort(sortByCore) as rec (rec.id+'_si')}",
    		ctx
    	});

    	return block;
    }

    // (197:3) {:else}
    function create_else_block$2(ctx) {
    	let div;
    	let span;

    	const block = {
    		c: function create() {
    			div = element("div");
    			span = element("span");
    			span.textContent = "No Build Recommendations";
    			attr_dev(span, "class", "svelte-1j8ky84");
    			add_location(span, file$3, 197, 23, 6106);
    			attr_dev(div, "class", "noRec svelte-1j8ky84");
    			add_location(div, file$3, 197, 4, 6087);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, span);
    		},
    		p: noop$1,
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$2.name,
    		type: "else",
    		source: "(197:3) {:else}",
    		ctx
    	});

    	return block;
    }

    // (171:3) {#if recommendations.filter(e => e.type === 'ascend').length > 0}
    function create_if_block_1$1(ctx) {
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let each_1_anchor;
    	let current;
    	let each_value = /*recommendations*/ ctx[0].filter(func_3).sort(sortByCore);
    	validate_each_argument(each_value);
    	const get_key = ctx => /*rec*/ ctx[31].id + '_asc';
    	validate_each_keys(ctx, each_value, get_each_context$2, get_key);

    	for (let i = 0; i < each_value.length; i += 1) {
    		let child_ctx = get_each_context$2(ctx, each_value, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block$2(key, child_ctx));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty$3();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*recommendations, handleCompClick, handlePortraitClick, $HeroData, handleClaimClick*/ 229) {
    				each_value = /*recommendations*/ ctx[0].filter(func_3).sort(sortByCore);
    				validate_each_argument(each_value);
    				group_outros();
    				for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].r();
    				validate_each_keys(ctx, each_value, get_each_context$2, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, each_1_anchor.parentNode, fix_and_outro_and_destroy_block, create_each_block$2, each_1_anchor, get_each_context$2);
    				for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].a();
    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d(detaching);
    			}

    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$1.name,
    		type: "if",
    		source: "(171:3) {#if recommendations.filter(e => e.type === 'ascend').length > 0}",
    		ctx
    	});

    	return block;
    }

    // (190:7) {#each rec.comps as comp}
    function create_each_block_1$1(ctx) {
    	let li;
    	let button;
    	let t_value = /*comp*/ ctx[34].name + "";
    	let t;
    	let mounted;
    	let dispose;

    	function click_handler_2() {
    		return /*click_handler_2*/ ctx[14](/*comp*/ ctx[34]);
    	}

    	const block = {
    		c: function create() {
    			li = element("li");
    			button = element("button");
    			t = text$2(t_value);
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "compButton svelte-1j8ky84");
    			add_location(button, file$3, 190, 12, 5891);
    			attr_dev(li, "class", "svelte-1j8ky84");
    			add_location(li, file$3, 190, 8, 5887);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, button);
    			append_dev(button, t);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", click_handler_2, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty[0] & /*recommendations*/ 1 && t_value !== (t_value = /*comp*/ ctx[34].name + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$1.name,
    		type: "each",
    		source: "(190:7) {#each rec.comps as comp}",
    		ctx
    	});

    	return block;
    }

    // (172:4) {#each recommendations.filter(e => e.type === 'ascend').sort(sortByCore) as rec (rec.id+'_asc')}
    function create_each_block$2(key_1, ctx) {
    	let div4;
    	let div0;
    	let button0;
    	let t1;
    	let h4;
    	let t2_value = /*$HeroData*/ ctx[2].find(func_4).name + "";
    	let t2;
    	let t3;
    	let div1;
    	let button1;
    	let img;
    	let img_src_value;
    	let img_alt_value;
    	let t4;
    	let span;
    	let t5;
    	let div2;
    	let ascendbox;
    	let t6;
    	let div3;
    	let h5;
    	let t8;
    	let ul;
    	let t9;
    	let rect;
    	let stop_animation = noop$1;
    	let current;
    	let mounted;
    	let dispose;

    	function func_4(...args) {
    		return /*func_4*/ ctx[10](/*rec*/ ctx[31], ...args);
    	}

    	function func_5(...args) {
    		return /*func_5*/ ctx[11](/*rec*/ ctx[31], ...args);
    	}

    	function func_6(...args) {
    		return /*func_6*/ ctx[12](/*rec*/ ctx[31], ...args);
    	}

    	function click_handler_1() {
    		return /*click_handler_1*/ ctx[13](/*rec*/ ctx[31]);
    	}

    	ascendbox = new AscendBox({
    			props: { ascendLv: /*rec*/ ctx[31].value },
    			$$inline: true
    		});

    	let each_value_1 = /*rec*/ ctx[31].comps;
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1$1(get_each_context_1$1(ctx, each_value_1, i));
    	}

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			div4 = element("div");
    			div0 = element("div");
    			button0 = element("button");
    			button0.textContent = "✔";
    			t1 = space();
    			h4 = element("h4");
    			t2 = text$2(t2_value);
    			t3 = space();
    			div1 = element("div");
    			button1 = element("button");
    			img = element("img");
    			t4 = space();
    			span = element("span");
    			t5 = space();
    			div2 = element("div");
    			create_component(ascendbox.$$.fragment);
    			t6 = space();
    			div3 = element("div");
    			h5 = element("h5");
    			h5.textContent = "Used in";
    			t8 = space();
    			ul = element("ul");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t9 = space();
    			attr_dev(button0, "type", "button");
    			attr_dev(button0, "class", "claimButton svelte-1j8ky84");
    			add_location(button0, file$3, 174, 7, 5133);
    			attr_dev(div0, "class", "claimButtonArea svelte-1j8ky84");
    			add_location(div0, file$3, 173, 6, 5095);
    			attr_dev(h4, "class", "svelte-1j8ky84");
    			add_location(h4, file$3, 176, 6, 5268);
    			attr_dev(img, "class", "portrait svelte-1j8ky84");
    			if (!src_url_equal(img.src, img_src_value = /*$HeroData*/ ctx[2].find(func_5).portrait)) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", img_alt_value = /*$HeroData*/ ctx[2].find(func_6).name);
    			add_location(img, file$3, 179, 8, 5468);
    			attr_dev(span, "class", "coreMark svelte-1j8ky84");
    			toggle_class(span, "visible", /*rec*/ ctx[31].core);
    			add_location(span, file$3, 180, 8, 5600);
    			attr_dev(button1, "type", "button");
    			attr_dev(button1, "class", "portraitButton svelte-1j8ky84");
    			add_location(button1, file$3, 178, 7, 5368);
    			attr_dev(div1, "class", "portraitContainer svelte-1j8ky84");
    			add_location(div1, file$3, 177, 6, 5328);
    			attr_dev(div2, "class", "recText svelte-1j8ky84");
    			add_location(div2, file$3, 183, 6, 5695);
    			attr_dev(h5, "class", "svelte-1j8ky84");
    			add_location(h5, file$3, 187, 7, 5814);
    			attr_dev(ul, "class", "svelte-1j8ky84");
    			add_location(ul, file$3, 188, 7, 5839);
    			attr_dev(div3, "class", "compArea svelte-1j8ky84");
    			add_location(div3, file$3, 186, 6, 5783);
    			attr_dev(div4, "class", "recCard svelte-1j8ky84");
    			add_location(div4, file$3, 172, 5, 5033);
    			this.first = div4;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div4, anchor);
    			append_dev(div4, div0);
    			append_dev(div0, button0);
    			append_dev(div4, t1);
    			append_dev(div4, h4);
    			append_dev(h4, t2);
    			append_dev(div4, t3);
    			append_dev(div4, div1);
    			append_dev(div1, button1);
    			append_dev(button1, img);
    			append_dev(button1, t4);
    			append_dev(button1, span);
    			append_dev(div4, t5);
    			append_dev(div4, div2);
    			mount_component(ascendbox, div2, null);
    			append_dev(div4, t6);
    			append_dev(div4, div3);
    			append_dev(div3, h5);
    			append_dev(div3, t8);
    			append_dev(div3, ul);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(ul, null);
    			}

    			append_dev(div4, t9);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(
    						button0,
    						"click",
    						function () {
    							if (is_function(/*handleClaimClick*/ ctx[7](/*rec*/ ctx[31].id, /*rec*/ ctx[31].value, 'asc'))) /*handleClaimClick*/ ctx[7](/*rec*/ ctx[31].id, /*rec*/ ctx[31].value, 'asc').apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					),
    					listen_dev(button1, "click", click_handler_1, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if ((!current || dirty[0] & /*$HeroData, recommendations*/ 5) && t2_value !== (t2_value = /*$HeroData*/ ctx[2].find(func_4).name + "")) set_data_dev(t2, t2_value);

    			if (!current || dirty[0] & /*$HeroData, recommendations*/ 5 && !src_url_equal(img.src, img_src_value = /*$HeroData*/ ctx[2].find(func_5).portrait)) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if (!current || dirty[0] & /*$HeroData, recommendations*/ 5 && img_alt_value !== (img_alt_value = /*$HeroData*/ ctx[2].find(func_6).name)) {
    				attr_dev(img, "alt", img_alt_value);
    			}

    			if (dirty[0] & /*recommendations*/ 1) {
    				toggle_class(span, "visible", /*rec*/ ctx[31].core);
    			}

    			const ascendbox_changes = {};
    			if (dirty[0] & /*recommendations*/ 1) ascendbox_changes.ascendLv = /*rec*/ ctx[31].value;
    			ascendbox.$set(ascendbox_changes);

    			if (dirty[0] & /*handleCompClick, recommendations*/ 33) {
    				each_value_1 = /*rec*/ ctx[31].comps;
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$1(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_1$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(ul, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_1.length;
    			}
    		},
    		r: function measure() {
    			rect = div4.getBoundingClientRect();
    		},
    		f: function fix() {
    			fix_position(div4);
    			stop_animation();
    		},
    		a: function animate() {
    			stop_animation();
    			stop_animation = create_animation(div4, rect, flip, { duration: 200 });
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(ascendbox.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(ascendbox.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div4);
    			destroy_component(ascendbox);
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$2.name,
    		type: "each",
    		source: "(172:4) {#each recommendations.filter(e => e.type === 'ascend').sort(sortByCore) as rec (rec.id+'_asc')}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$3(ctx) {
    	let div1;
    	let div0;
    	let ul;
    	let t;
    	let current_block_type_index;
    	let if_block;
    	let current;
    	let each_value_6 = /*sections*/ ctx[4];
    	validate_each_argument(each_value_6);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_6.length; i += 1) {
    		each_blocks[i] = create_each_block_6(get_each_context_6(ctx, each_value_6, i));
    	}

    	const if_block_creators = [create_if_block$2, create_if_block_2$1, create_if_block_4$1];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*$AppData*/ ctx[1].REC.openSection === 0) return 0;
    		if (/*$AppData*/ ctx[1].REC.openSection === 1) return 1;
    		if (/*$AppData*/ ctx[1].REC.openSection === 2) return 2;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type(ctx))) {
    		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			ul = element("ul");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t = space();
    			if (if_block) if_block.c();
    			attr_dev(ul, "class", "sectionPicker svelte-1j8ky84");
    			add_location(ul, file$3, 159, 2, 4449);
    			attr_dev(div0, "class", "sectionPickerSection svelte-1j8ky84");
    			add_location(div0, file$3, 158, 1, 4411);
    			attr_dev(div1, "class", "recContainer svelte-1j8ky84");
    			add_location(div1, file$3, 157, 0, 4382);
    		},
    		l: function claim(nodes) {
    			throw new Error_1("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div0, ul);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(ul, null);
    			}

    			append_dev(div1, t);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(div1, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*$AppData, dispatch, sections*/ 26) {
    				each_value_6 = /*sections*/ ctx[4];
    				validate_each_argument(each_value_6);
    				let i;

    				for (i = 0; i < each_value_6.length; i += 1) {
    					const child_ctx = get_each_context_6(ctx, each_value_6, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_6(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(ul, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_6.length;
    			}

    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if (~current_block_type_index) {
    					if_blocks[current_block_type_index].p(ctx, dirty);
    				}
    			} else {
    				if (if_block) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block = if_blocks[current_block_type_index];

    					if (!if_block) {
    						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block.c();
    					} else {
    						if_block.p(ctx, dirty);
    					}

    					transition_in(if_block, 1);
    					if_block.m(div1, null);
    				} else {
    					if_block = null;
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_each(each_blocks, detaching);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d();
    			}
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$3.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function sortByCore(a, b) {
    	if (a.core && !b.core) {
    		return -1;
    	} else if (!a.core && b.core) {
    		return 1;
    	} else {
    		if (a.comps.length > b.comps.length) {
    			return -1;
    		} else if (a.comps.length < b.comps.length) {
    			return 1;
    		} else {
    			return 0;
    		}
    	}
    }

    const func = e => e.type === 'ascend';
    const func_1 = e => e.type === 'si';
    const func_2 = e => e.type === 'furn';
    const func_3 = e => e.type === 'ascend';
    const func_7 = e => e.type === 'si';
    const func_11 = e => e.type === 'furn';

    function instance$3($$self, $$props, $$invalidate) {
    	let modalHeight;
    	let $AppData;
    	let $HeroData;
    	validate_store(AppData$1, 'AppData');
    	component_subscribe($$self, AppData$1, $$value => $$invalidate(1, $AppData = $$value));
    	validate_store(HeroData, 'HeroData');
    	component_subscribe($$self, HeroData, $$value => $$invalidate(2, $HeroData = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Recommendations', slots, []);
    	const { open } = getContext('simple-modal');
    	const dispatch = createEventDispatcher();
    	let { isMobile = false } = $$props;
    	const starredComps = $AppData.Comps.filter(e => e.starred);
    	const compHeroes = buildCompHeroes();
    	let recommendations = buildRecs();
    	const sections = ["Ascension", "Signature Item", "Furniture"];

    	// loop through the hero list for every starred comp and compile a list of all of them
    	function buildCompHeroes() {
    		let buffer = [];

    		for (const comp of starredComps) {
    			for (const [id, data] of Object.entries(comp.heroes)) {
    				if (buffer.some(e => e.id === id)) {
    					// hero already in buffer, update values only if they're higher
    					let idx = buffer.findIndex(e => e.id === id);

    					buffer[idx].ascendLv = buffer[idx].ascendLv < data.ascendLv
    					? data.ascendLv
    					: buffer[idx].ascendLv;

    					buffer[idx].si = buffer[idx].si < data.si ? data.si : buffer[idx].si;

    					buffer[idx].furn = buffer[idx].furn < data.si
    					? data.furn
    					: buffer[idx].furn;

    					buffer[idx].core = buffer[idx].core || data.core;
    					buffer[idx].comps.push({ id: comp.uuid, name: comp.name });
    				} else {
    					// new hero, create a new entry
    					buffer.push({
    						id,
    						ascendLv: data.ascendLv,
    						si: data.si,
    						furn: data.furn,
    						core: data.core,
    						comps: [{ id: comp.uuid, name: comp.name }]
    					});
    				}
    			}
    		}

    		return buffer;
    	}

    	// compare compHeroes with MH.List and create recommendation objects where values differ
    	function buildRecs() {
    		let buffer = [];

    		for (const hero of compHeroes) {
    			if (!$AppData.MH.List[hero.id].claimed) {
    				buffer.push({
    					id: hero.id,
    					type: 'ascend',
    					value: hero.ascendLv,
    					comps: hero.comps,
    					core: hero.core
    				});
    			} else {
    				if ($AppData.MH.List[hero.id].ascendLv < hero.ascendLv) {
    					buffer.push({
    						id: hero.id,
    						type: 'ascend',
    						value: hero.ascendLv,
    						comps: hero.comps,
    						core: hero.core
    					});
    				}

    				if ($AppData.MH.List[hero.id].si < hero.si) {
    					buffer.push({
    						id: hero.id,
    						type: 'si',
    						value: hero.si,
    						comps: hero.comps,
    						core: hero.core
    					});
    				}

    				if ($AppData.MH.List[hero.id].furn < hero.furn) {
    					buffer.push({
    						id: hero.id,
    						type: 'furn',
    						value: hero.furn,
    						comps: hero.comps,
    						core: hero.core
    					});
    				}
    			}
    		}

    		return buffer;
    	}

    	function handleCompClick(compID) {
    		set_store_value(AppData$1, $AppData.selectedComp = $AppData.Comps.findIndex(e => e.uuid === compID), $AppData);
    		set_store_value(AppData$1, $AppData.selectedUUID = compID, $AppData);

    		if ($AppData.selectedComp === -1) {
    			set_store_value(AppData$1, $AppData.selectedComp = null, $AppData);
    			set_store_value(AppData$1, $AppData.selectedUUID = null, $AppData);
    		}

    		history.pushState({ view: 'comps', modal: false }, 'comps', `?view=comps`);
    		set_store_value(AppData$1, $AppData.activeView = 'comps', $AppData);
    	}

    	function handlePortraitClick(heroID) {
    		open(HeroDetail, { heroID }, {
    			closeButton: ModalCloseButton,
    			styleContent: {
    				background: '#F0F0F2',
    				padding: 0,
    				borderRadius: '10px',
    				maxHeight: modalHeight
    			}
    		});
    	}

    	function handleClaimClick(heroID, value, type) {
    		set_store_value(AppData$1, $AppData.MH.List[heroID].claimed = true, $AppData);

    		switch (type) {
    			case 'asc':
    				set_store_value(AppData$1, $AppData.MH.List[heroID].ascendLv = value, $AppData);
    				break;
    			case 'si':
    				set_store_value(AppData$1, $AppData.MH.List[heroID].si = value, $AppData);
    				break;
    			case 'furn':
    				set_store_value(AppData$1, $AppData.MH.List[heroID].furn = value, $AppData);
    				break;
    			default:
    				throw new Error(`Invalid type received ${type} should be 'asc', 'si', or 'furn'.`);
    		}

    		$$invalidate(0, recommendations = buildRecs());
    		dispatch('saveData');
    	}

    	const writable_props = ['isMobile'];

    	Object_1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Recommendations> was created with unknown prop '${key}'`);
    	});

    	const click_handler = i => {
    		set_store_value(AppData$1, $AppData.REC.openSection = i, $AppData);
    		dispatch('saveData');
    	};

    	const func_4 = (rec, e) => e.id === rec.id;
    	const func_5 = (rec, e) => e.id === rec.id;
    	const func_6 = (rec, e) => e.id === rec.id;
    	const click_handler_1 = rec => handlePortraitClick(rec.id);
    	const click_handler_2 = comp => handleCompClick(comp.id);
    	const func_8 = (rec, e) => e.id === rec.id;
    	const func_9 = (rec, e) => e.id === rec.id;
    	const func_10 = (rec, e) => e.id === rec.id;
    	const click_handler_3 = rec => handlePortraitClick(rec.id);
    	const click_handler_4 = comp => handleCompClick(comp.id);
    	const func_12 = (rec, e) => e.id === rec.id;
    	const func_13 = (rec, e) => e.id === rec.id;
    	const func_14 = (rec, e) => e.id === rec.id;
    	const click_handler_5 = rec => handlePortraitClick(rec.id);
    	const click_handler_6 = comp => handleCompClick(comp.id);

    	$$self.$$set = $$props => {
    		if ('isMobile' in $$props) $$invalidate(8, isMobile = $$props.isMobile);
    	};

    	$$self.$capture_state = () => ({
    		getContext,
    		createEventDispatcher,
    		flip,
    		AppData: AppData$1,
    		HeroData,
    		HeroDetail,
    		ModalCloseButton,
    		AscendBox,
    		SIFurnBox,
    		open,
    		dispatch,
    		isMobile,
    		starredComps,
    		compHeroes,
    		recommendations,
    		sections,
    		buildCompHeroes,
    		buildRecs,
    		sortByCore,
    		handleCompClick,
    		handlePortraitClick,
    		handleClaimClick,
    		modalHeight,
    		$AppData,
    		$HeroData
    	});

    	$$self.$inject_state = $$props => {
    		if ('isMobile' in $$props) $$invalidate(8, isMobile = $$props.isMobile);
    		if ('recommendations' in $$props) $$invalidate(0, recommendations = $$props.recommendations);
    		if ('modalHeight' in $$props) modalHeight = $$props.modalHeight;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*isMobile*/ 256) {
    			modalHeight = isMobile ? '75vh' : '80vh';
    		}
    	};

    	return [
    		recommendations,
    		$AppData,
    		$HeroData,
    		dispatch,
    		sections,
    		handleCompClick,
    		handlePortraitClick,
    		handleClaimClick,
    		isMobile,
    		click_handler,
    		func_4,
    		func_5,
    		func_6,
    		click_handler_1,
    		click_handler_2,
    		func_8,
    		func_9,
    		func_10,
    		click_handler_3,
    		click_handler_4,
    		func_12,
    		func_13,
    		func_14,
    		click_handler_5,
    		click_handler_6
    	];
    }

    class Recommendations extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$3, create_fragment$3, safe_not_equal, { isMobile: 8 }, null, [-1, -1]);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Recommendations",
    			options,
    			id: create_fragment$3.name
    		});
    	}

    	get isMobile() {
    		throw new Error_1("<Recommendations>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isMobile(value) {
    		throw new Error_1("<Recommendations>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\modals\ChangeLog.svelte generated by Svelte v3.41.0 */
    const file$2 = "src\\modals\\ChangeLog.svelte";

    function get_each_context$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[4] = list[i];
    	return child_ctx;
    }

    function get_each_context_1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[7] = list[i];
    	return child_ctx;
    }

    // (32:2) {#each item.changes as change}
    function create_each_block_1(ctx) {
    	let li;
    	let raw_value = /*change*/ ctx[7] + "";

    	const block = {
    		c: function create() {
    			li = element("li");
    			add_location(li, file$2, 32, 3, 792);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			li.innerHTML = raw_value;
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1.name,
    		type: "each",
    		source: "(32:2) {#each item.changes as change}",
    		ctx
    	});

    	return block;
    }

    // (29:1) {#each changelog as item}
    function create_each_block$1(ctx) {
    	let h4;
    	let t0_value = /*item*/ ctx[4].version + "";
    	let t0;
    	let t1;
    	let ul;
    	let t2;
    	let each_value_1 = /*item*/ ctx[4].changes;
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
    	}

    	const block = {
    		c: function create() {
    			h4 = element("h4");
    			t0 = text$2(t0_value);
    			t1 = space();
    			ul = element("ul");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t2 = space();
    			attr_dev(h4, "class", "svelte-1jm4rgp");
    			add_location(h4, file$2, 29, 2, 722);
    			attr_dev(ul, "class", "svelte-1jm4rgp");
    			add_location(ul, file$2, 30, 2, 749);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h4, anchor);
    			append_dev(h4, t0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, ul, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(ul, null);
    			}

    			append_dev(ul, t2);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*changelog*/ 1) {
    				each_value_1 = /*item*/ ctx[4].changes;
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(ul, t2);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_1.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h4);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(ul);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$1.name,
    		type: "each",
    		source: "(29:1) {#each changelog as item}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$2(ctx) {
    	let div;
    	let mounted;
    	let dispose;
    	let each_value = /*changelog*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div, "class", "container svelte-1jm4rgp");
    			add_location(div, file$2, 27, 0, 667);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}

    			if (!mounted) {
    				dispose = listen_dev(window, "popstate", /*handlePopState*/ ctx[1], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*changelog*/ 1) {
    				each_value = /*changelog*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$1(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$2.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$2($$self, $$props, $$invalidate) {
    	let $AppData;
    	validate_store(AppData$1, 'AppData');
    	component_subscribe($$self, AppData$1, $$value => $$invalidate(2, $AppData = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ChangeLog', slots, []);
    	const { close } = getContext('simple-modal');

    	const changelog = [
    		{
    			version: 'v1.0.16',
    			changes: [
    				'Restrict height on modals.',
    				'Fix display bug when moving from Hero List or My Heroes to Comps.',
    				'Fix comp detail not closing when comp is deleted.'
    			]
    		}
    	];

    	onMount(async () => {
    		history.pushState({ view: $AppData.activeView, modal: true }, "Change Log", `?view=${$AppData.activeView}&modal=true`);
    	});

    	function handlePopState() {
    		close();
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ChangeLog> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		onMount,
    		getContext,
    		AppData: AppData$1,
    		close,
    		changelog,
    		handlePopState,
    		$AppData
    	});

    	return [changelog, handlePopState];
    }

    class ChangeLog extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ChangeLog",
    			options,
    			id: create_fragment$2.name
    		});
    	}
    }

    /* src\components\About.svelte generated by Svelte v3.41.0 */
    const file$1 = "src\\components\\About.svelte";

    function get_each_context(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[10] = list[i];
    	return child_ctx;
    }

    // (123:4) {:else}
    function create_else_block$1(ctx) {
    	let div4;
    	let div1;
    	let img;
    	let img_src_value;
    	let t0;
    	let div0;
    	let span0;
    	let t1_value = /*person*/ ctx[10].name + "";
    	let t1;
    	let t2;
    	let div3;
    	let h3;
    	let t3_value = /*person*/ ctx[10].title + "";
    	let t3;
    	let t4;
    	let div2;
    	let span1;
    	let raw_value = /*person*/ ctx[10].message + "";
    	let t5;

    	const block = {
    		c: function create() {
    			div4 = element("div");
    			div1 = element("div");
    			img = element("img");
    			t0 = space();
    			div0 = element("div");
    			span0 = element("span");
    			t1 = text$2(t1_value);
    			t2 = space();
    			div3 = element("div");
    			h3 = element("h3");
    			t3 = text$2(t3_value);
    			t4 = space();
    			div2 = element("div");
    			span1 = element("span");
    			t5 = space();
    			attr_dev(img, "class", "avatar svelte-1def686");
    			if (!src_url_equal(img.src, img_src_value = /*person*/ ctx[10].image)) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", /*person*/ ctx[10].name);
    			add_location(img, file$1, 125, 6, 5485);
    			add_location(span0, file$1, 126, 24, 5572);
    			attr_dev(div0, "class", "name svelte-1def686");
    			add_location(div0, file$1, 126, 6, 5554);
    			attr_dev(div1, "class", "left svelte-1def686");
    			add_location(div1, file$1, 124, 5, 5459);
    			attr_dev(h3, "class", "svelte-1def686");
    			add_location(h3, file$1, 129, 6, 5651);
    			add_location(span1, file$1, 130, 27, 5703);
    			attr_dev(div2, "class", "message svelte-1def686");
    			add_location(div2, file$1, 130, 6, 5682);
    			attr_dev(div3, "class", "right svelte-1def686");
    			add_location(div3, file$1, 128, 5, 5624);
    			attr_dev(div4, "class", "contributorCard svelte-1def686");
    			add_location(div4, file$1, 123, 4, 5423);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div4, anchor);
    			append_dev(div4, div1);
    			append_dev(div1, img);
    			append_dev(div1, t0);
    			append_dev(div1, div0);
    			append_dev(div0, span0);
    			append_dev(span0, t1);
    			append_dev(div4, t2);
    			append_dev(div4, div3);
    			append_dev(div3, h3);
    			append_dev(h3, t3);
    			append_dev(div3, t4);
    			append_dev(div3, div2);
    			append_dev(div2, span1);
    			span1.innerHTML = raw_value;
    			append_dev(div4, t5);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div4);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$1.name,
    		type: "else",
    		source: "(123:4) {:else}",
    		ctx
    	});

    	return block;
    }

    // (110:4) {#if person.website !== ''}
    function create_if_block$1(ctx) {
    	let div4;
    	let div1;
    	let a;
    	let img;
    	let img_src_value;
    	let t0;
    	let div0;
    	let span0;
    	let t1_value = /*person*/ ctx[10].name + "";
    	let t1;
    	let t2;
    	let div3;
    	let h3;
    	let t3_value = /*person*/ ctx[10].title + "";
    	let t3;
    	let t4;
    	let div2;
    	let span1;
    	let raw_value = /*person*/ ctx[10].message + "";
    	let t5;

    	const block = {
    		c: function create() {
    			div4 = element("div");
    			div1 = element("div");
    			a = element("a");
    			img = element("img");
    			t0 = space();
    			div0 = element("div");
    			span0 = element("span");
    			t1 = text$2(t1_value);
    			t2 = space();
    			div3 = element("div");
    			h3 = element("h3");
    			t3 = text$2(t3_value);
    			t4 = space();
    			div2 = element("div");
    			span1 = element("span");
    			t5 = space();
    			attr_dev(img, "class", "avatar svelte-1def686");
    			if (!src_url_equal(img.src, img_src_value = /*person*/ ctx[10].image)) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", /*person*/ ctx[10].name);
    			add_location(img, file$1, 113, 7, 5107);
    			add_location(span0, file$1, 114, 25, 5195);
    			attr_dev(div0, "class", "name svelte-1def686");
    			add_location(div0, file$1, 114, 7, 5177);
    			attr_dev(a, "href", /*person*/ ctx[10].website);
    			attr_dev(a, "target", "_blank");
    			attr_dev(a, "rel", "noreferrer noopener");
    			attr_dev(a, "class", "svelte-1def686");
    			add_location(a, file$1, 112, 6, 5031);
    			attr_dev(div1, "class", "left svelte-1def686");
    			add_location(div1, file$1, 111, 5, 5005);
    			attr_dev(h3, "class", "svelte-1def686");
    			add_location(h3, file$1, 118, 6, 5286);
    			add_location(span1, file$1, 119, 27, 5338);
    			attr_dev(div2, "class", "message svelte-1def686");
    			add_location(div2, file$1, 119, 6, 5317);
    			attr_dev(div3, "class", "right svelte-1def686");
    			add_location(div3, file$1, 117, 5, 5259);
    			attr_dev(div4, "class", "contributorCard svelte-1def686");
    			add_location(div4, file$1, 110, 4, 4969);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div4, anchor);
    			append_dev(div4, div1);
    			append_dev(div1, a);
    			append_dev(a, img);
    			append_dev(a, t0);
    			append_dev(a, div0);
    			append_dev(div0, span0);
    			append_dev(span0, t1);
    			append_dev(div4, t2);
    			append_dev(div4, div3);
    			append_dev(div3, h3);
    			append_dev(h3, t3);
    			append_dev(div3, t4);
    			append_dev(div3, div2);
    			append_dev(div2, span1);
    			span1.innerHTML = raw_value;
    			append_dev(div4, t5);
    		},
    		p: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div4);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$1.name,
    		type: "if",
    		source: "(110:4) {#if person.website !== ''}",
    		ctx
    	});

    	return block;
    }

    // (109:3) {#each contributors as person}
    function create_each_block(ctx) {
    	let if_block_anchor;

    	function select_block_type(ctx, dirty) {
    		if (/*person*/ ctx[10].website !== '') return create_if_block$1;
    		return create_else_block$1;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty$3();
    		},
    		m: function mount(target, anchor) {
    			if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if_block.p(ctx, dirty);
    		},
    		d: function destroy(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block.name,
    		type: "each",
    		source: "(109:3) {#each contributors as person}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1(ctx) {
    	let div14;
    	let div0;
    	let button0;
    	let span0;
    	let t0;
    	let t1;
    	let t2;
    	let div1;
    	let h1;
    	let t4;
    	let section0;
    	let div2;
    	let p0;
    	let t5;
    	let a0;
    	let t7;
    	let t8;
    	let p1;
    	let t9;
    	let em;
    	let t11;
    	let div11;
    	let div4;
    	let h20;
    	let t13;
    	let div3;
    	let p2;
    	let t15;
    	let div6;
    	let h21;
    	let t17;
    	let div5;
    	let p3;
    	let t19;
    	let div8;
    	let h22;
    	let t21;
    	let div7;
    	let p4;
    	let t23;
    	let div10;
    	let h23;
    	let t25;
    	let div9;
    	let p5;
    	let t27;
    	let section1;
    	let h24;
    	let t29;
    	let div12;
    	let t30;
    	let section2;
    	let div13;
    	let span1;
    	let t31;
    	let a1;
    	let t33;
    	let a2;
    	let t35;
    	let section3;
    	let button1;
    	let span2;
    	let t37;
    	let button2;
    	let span3;
    	let t39;
    	let form;
    	let input;
    	let mounted;
    	let dispose;
    	let each_value = /*contributors*/ ctx[1];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div14 = element("div");
    			div0 = element("div");
    			button0 = element("button");
    			span0 = element("span");
    			t0 = text$2("Version: ");
    			t1 = text$2(/*version*/ ctx[0]);
    			t2 = space();
    			div1 = element("div");
    			h1 = element("h1");
    			h1.textContent = "AFKBuilder";
    			t4 = space();
    			section0 = element("section");
    			div2 = element("div");
    			p0 = element("p");
    			t5 = text$2("AFKBuilder is an ");
    			a0 = element("a");
    			a0.textContent = "open source";
    			t7 = text$2(" tool designed to help players build, share, and use community made team compositions for AFK Arena.");
    			t8 = space();
    			p1 = element("p");
    			t9 = text$2("AFKBuilder runs entirely on your browser, and your data is stored in its local storage. None of your information is shared outside of the application. ");
    			em = element("em");
    			em.textContent = "Be sure to make a backup of your comps and hero list before clearing your browser data.";
    			t11 = space();
    			div11 = element("div");
    			div4 = element("div");
    			h20 = element("h2");
    			h20.textContent = "Comps";
    			t13 = space();
    			div3 = element("div");
    			p2 = element("p");
    			p2.textContent = "The Comps area of the app is where you can manage your list of compositions. Importing, editing, creating, and exporting comps for sharing and backup are all done here. Starred comps are ones that you are interested in or are aiming for. Star your favorite comps to get customized recommendations based on their hero compositions. Comps can be filtered by their title or tags using the filter search box. For desktop users, drag and drop is enabled for your comp list as well as in the comp editor for hero lines, heroes within lines, and heroes within substitute lines.";
    			t15 = space();
    			div6 = element("div");
    			h21 = element("h2");
    			h21.textContent = "Recommendations";
    			t17 = space();
    			div5 = element("div");
    			p3 = element("p");
    			p3.textContent = "The Recommendations area of the app is where you can get customized progression recommendations based on the data from My Heroes and your starred comps. Hereos who are core to your starred comps are listed first, and heroes are ordered by their frequency of appearance in the comps. Adding a hero to your My Heroes list either by checkmarking them in the Ascension tab or claiming them from the Hero List will allow you to see their customized Signature Item and Furniture recommendations.";
    			t19 = space();
    			div8 = element("div");
    			h22 = element("h2");
    			h22.textContent = "My Heroes";
    			t21 = space();
    			div7 = element("div");
    			p4 = element("p");
    			p4.textContent = "The My Heroes area of the app is where you can customize the heroes you claimed from the Hero List or Recommendations area. This should represent the heroes you own in the AFK Arena app. You can specify each hero's Ascension, Signature Item, and Furniture. Once a hero is added to your My Heroes list, you will be able to see their Signature Item and Furniture recommendations in the Recommendations area.";
    			t23 = space();
    			div10 = element("div");
    			h23 = element("h2");
    			h23.textContent = "Hero List";
    			t25 = space();
    			div9 = element("div");
    			p5 = element("p");
    			p5.textContent = "The Hero List area of the app is a reference list for all of the heroes in the game as well as their recommended Signature Item and Furniture benchmarks. Come here to look up information about a specific hero. You can also claim heroes from this list to add them to the My Heroes area.";
    			t27 = space();
    			section1 = element("section");
    			h24 = element("h2");
    			h24.textContent = "Contributors";
    			t29 = space();
    			div12 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t30 = space();
    			section2 = element("section");
    			div13 = element("div");
    			span1 = element("span");
    			t31 = text$2("AFKBuilder has no affiliation with ");
    			a1 = element("a");
    			a1.textContent = "Lilith Games";
    			t33 = text$2(" or ");
    			a2 = element("a");
    			a2.textContent = "AFK Arena";
    			t35 = space();
    			section3 = element("section");
    			button1 = element("button");
    			span2 = element("span");
    			span2.textContent = "Clear Data";
    			t37 = space();
    			button2 = element("button");
    			span3 = element("span");
    			span3.textContent = "Reset Tutorial";
    			t39 = space();
    			form = element("form");
    			input = element("input");
    			add_location(span0, file$1, 59, 3, 1749);
    			attr_dev(button0, "type", "button");
    			attr_dev(button0, "class", "versionButton svelte-1def686");
    			add_location(button0, file$1, 58, 2, 1675);
    			attr_dev(div0, "class", "versionContainer svelte-1def686");
    			add_location(div0, file$1, 57, 1, 1641);
    			attr_dev(h1, "class", "svelte-1def686");
    			add_location(h1, file$1, 63, 2, 1837);
    			attr_dev(div1, "class", "titleContainer svelte-1def686");
    			add_location(div1, file$1, 62, 1, 1805);
    			attr_dev(a0, "href", "https://github.com/Dae314/AFKBuilder");
    			attr_dev(a0, "target", "_blank");
    			attr_dev(a0, "rel", "noreferrer noopener");
    			attr_dev(a0, "class", "svelte-1def686");
    			add_location(a0, file$1, 67, 23, 1948);
    			attr_dev(p0, "class", "svelte-1def686");
    			add_location(p0, file$1, 67, 3, 1928);
    			attr_dev(em, "class", "svelte-1def686");
    			add_location(em, file$1, 68, 157, 2315);
    			attr_dev(p1, "class", "svelte-1def686");
    			add_location(p1, file$1, 68, 3, 2161);
    			attr_dev(div2, "class", "generalDesc svelte-1def686");
    			add_location(div2, file$1, 66, 2, 1898);
    			attr_dev(h20, "class", "svelte-1def686");
    			add_location(h20, file$1, 72, 4, 2497);
    			attr_dev(p2, "class", "svelte-1def686");
    			add_location(p2, file$1, 74, 5, 2542);
    			attr_dev(div3, "class", "text svelte-1def686");
    			add_location(div3, file$1, 73, 4, 2517);
    			attr_dev(div4, "class", "compDesc areaDescSect svelte-1def686");
    			add_location(div4, file$1, 71, 3, 2456);
    			attr_dev(h21, "class", "svelte-1def686");
    			add_location(h21, file$1, 80, 4, 3214);
    			attr_dev(p3, "class", "svelte-1def686");
    			add_location(p3, file$1, 82, 5, 3269);
    			attr_dev(div5, "class", "text svelte-1def686");
    			add_location(div5, file$1, 81, 4, 3244);
    			attr_dev(div6, "class", "recommendationsDesc areaDescSect svelte-1def686");
    			add_location(div6, file$1, 79, 3, 3162);
    			attr_dev(h22, "class", "svelte-1def686");
    			add_location(h22, file$1, 88, 4, 3853);
    			attr_dev(p4, "class", "svelte-1def686");
    			add_location(p4, file$1, 90, 5, 3902);
    			attr_dev(div7, "class", "text svelte-1def686");
    			add_location(div7, file$1, 89, 4, 3877);
    			attr_dev(div8, "class", "myHeroesDesc areaDescSect svelte-1def686");
    			add_location(div8, file$1, 87, 3, 3808);
    			attr_dev(h23, "class", "svelte-1def686");
    			add_location(h23, file$1, 96, 4, 4402);
    			attr_dev(p5, "class", "svelte-1def686");
    			add_location(p5, file$1, 98, 5, 4451);
    			attr_dev(div9, "class", "text svelte-1def686");
    			add_location(div9, file$1, 97, 4, 4426);
    			attr_dev(div10, "class", "heroListDesc areaDescSect svelte-1def686");
    			add_location(div10, file$1, 95, 3, 4357);
    			attr_dev(div11, "class", "areaDesc svelte-1def686");
    			add_location(div11, file$1, 70, 2, 2429);
    			attr_dev(section0, "class", "aboutApp");
    			add_location(section0, file$1, 65, 1, 1868);
    			attr_dev(h24, "class", "svelte-1def686");
    			add_location(h24, file$1, 106, 2, 4841);
    			attr_dev(div12, "class", "contributorGrid svelte-1def686");
    			add_location(div12, file$1, 107, 2, 4866);
    			attr_dev(section1, "class", "contributors svelte-1def686");
    			add_location(section1, file$1, 105, 1, 4807);
    			attr_dev(a1, "href", "https://www.lilithgames.com/");
    			attr_dev(a1, "target", "_blank");
    			attr_dev(a1, "rel", "noreferrer noopener");
    			attr_dev(a1, "class", "svelte-1def686");
    			add_location(a1, file$1, 139, 44, 5919);
    			attr_dev(a2, "href", "https://www.afkarena.com/");
    			attr_dev(a2, "target", "_blank");
    			attr_dev(a2, "rel", "noreferrer noopener");
    			attr_dev(a2, "class", "svelte-1def686");
    			add_location(a2, file$1, 139, 145, 6020);
    			add_location(span1, file$1, 139, 3, 5878);
    			attr_dev(div13, "class", "disclaimer svelte-1def686");
    			add_location(div13, file$1, 138, 2, 5849);
    			attr_dev(section2, "class", "affiliate svelte-1def686");
    			add_location(section2, file$1, 137, 1, 5818);
    			add_location(span2, file$1, 143, 95, 6266);
    			attr_dev(button1, "type", "button");
    			attr_dev(button1, "class", "configButton clearButton svelte-1def686");
    			add_location(button1, file$1, 143, 2, 6173);
    			add_location(span3, file$1, 144, 97, 6397);
    			attr_dev(button2, "type", "button");
    			attr_dev(button2, "class", "configButton tutorialButton svelte-1def686");
    			add_location(button2, file$1, 144, 2, 6302);
    			attr_dev(input, "class", "configButton feedbackButton svelte-1def686");
    			attr_dev(input, "type", "submit");
    			input.value = "Send Feedback";
    			add_location(input, file$1, 146, 3, 6535);
    			attr_dev(form, "action", "https://forms.gle/oKDQj2Jjqmf5DoTCA");
    			attr_dev(form, "target", "_blank");
    			attr_dev(form, "rel", "noreferrer noopener");
    			attr_dev(form, "class", "svelte-1def686");
    			add_location(form, file$1, 145, 2, 6437);
    			attr_dev(section3, "class", "config svelte-1def686");
    			add_location(section3, file$1, 142, 1, 6145);
    			attr_dev(div14, "class", "aboutContainer svelte-1def686");
    			add_location(div14, file$1, 56, 0, 1610);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div14, anchor);
    			append_dev(div14, div0);
    			append_dev(div0, button0);
    			append_dev(button0, span0);
    			append_dev(span0, t0);
    			append_dev(span0, t1);
    			append_dev(div14, t2);
    			append_dev(div14, div1);
    			append_dev(div1, h1);
    			append_dev(div14, t4);
    			append_dev(div14, section0);
    			append_dev(section0, div2);
    			append_dev(div2, p0);
    			append_dev(p0, t5);
    			append_dev(p0, a0);
    			append_dev(p0, t7);
    			append_dev(div2, t8);
    			append_dev(div2, p1);
    			append_dev(p1, t9);
    			append_dev(p1, em);
    			append_dev(section0, t11);
    			append_dev(section0, div11);
    			append_dev(div11, div4);
    			append_dev(div4, h20);
    			append_dev(div4, t13);
    			append_dev(div4, div3);
    			append_dev(div3, p2);
    			append_dev(div11, t15);
    			append_dev(div11, div6);
    			append_dev(div6, h21);
    			append_dev(div6, t17);
    			append_dev(div6, div5);
    			append_dev(div5, p3);
    			append_dev(div11, t19);
    			append_dev(div11, div8);
    			append_dev(div8, h22);
    			append_dev(div8, t21);
    			append_dev(div8, div7);
    			append_dev(div7, p4);
    			append_dev(div11, t23);
    			append_dev(div11, div10);
    			append_dev(div10, h23);
    			append_dev(div10, t25);
    			append_dev(div10, div9);
    			append_dev(div9, p5);
    			append_dev(div14, t27);
    			append_dev(div14, section1);
    			append_dev(section1, h24);
    			append_dev(section1, t29);
    			append_dev(section1, div12);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div12, null);
    			}

    			append_dev(div14, t30);
    			append_dev(div14, section2);
    			append_dev(section2, div13);
    			append_dev(div13, span1);
    			append_dev(span1, t31);
    			append_dev(span1, a1);
    			append_dev(span1, t33);
    			append_dev(span1, a2);
    			append_dev(div14, t35);
    			append_dev(div14, section3);
    			append_dev(section3, button1);
    			append_dev(button1, span2);
    			append_dev(section3, t37);
    			append_dev(section3, button2);
    			append_dev(button2, span3);
    			append_dev(section3, t39);
    			append_dev(section3, form);
    			append_dev(form, input);

    			if (!mounted) {
    				dispose = [
    					listen_dev(button0, "click", /*openChangeLog*/ ctx[4], false, false, false),
    					listen_dev(button1, "click", /*handleClearDataButtonClick*/ ctx[2], false, false, false),
    					listen_dev(button2, "click", /*handleTutorialButtonClick*/ ctx[3], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*version*/ 1) set_data_dev(t1, /*version*/ ctx[0]);

    			if (dirty & /*contributors*/ 2) {
    				each_value = /*contributors*/ ctx[1];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div12, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div14);
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1($$self, $$props, $$invalidate) {
    	let modalHeight;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('About', slots, []);
    	let { version = '' } = $$props;
    	let { isMobile = false } = $$props;
    	const dispatch = createEventDispatcher();
    	const { open } = getContext('simple-modal');

    	const contributors = [
    		{
    			name: 'Dae314',
    			image: './img/contributors/dae314.png',
    			title: 'Maintainer',
    			message: 'Got questions? Find me on the <a href="https://discord.com/invite/afkarena" target="_blank" rel="noreferrer noopener">AFK Arena Discord</a>!',
    			website: ''
    		},
    		{
    			name: 'Wyatt Rice',
    			image: './img/contributors/wyatt.jpg',
    			title: 'Designer',
    			message: 'Open for commissions!',
    			website: 'https://www.twitter.com/wyattjrice'
    		}
    	];

    	function handleClearDataButtonClick() {
    		open(
    			Confirm,
    			{
    				onConfirm: clearData,
    				message: "Are you sure you want to CLEAR ALL DATA?"
    			},
    			{
    				closeButton: false,
    				closeOnEsc: true,
    				closeOnOuterClick: true,
    				styleWindow: { width: 'fit-content' },
    				styleContent: { width: 'fit-content' }
    			}
    		);
    	}

    	function handleTutorialButtonClick() {
    		dispatch('resetTutorial');
    	}

    	function clearData() {
    		dispatch('clearData');
    	}

    	function openChangeLog() {
    		open(ChangeLog, {}, {
    			closeButton: ModalCloseButton,
    			styleContent: {
    				background: '#F0F0F2',
    				padding: 0,
    				borderRadius: '10px',
    				maxHeight: modalHeight
    			}
    		});
    	}

    	const writable_props = ['version', 'isMobile'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<About> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('version' in $$props) $$invalidate(0, version = $$props.version);
    		if ('isMobile' in $$props) $$invalidate(5, isMobile = $$props.isMobile);
    	};

    	$$self.$capture_state = () => ({
    		getContext,
    		createEventDispatcher,
    		Confirm,
    		ChangeLog,
    		ModalCloseButton,
    		version,
    		isMobile,
    		dispatch,
    		open,
    		contributors,
    		handleClearDataButtonClick,
    		handleTutorialButtonClick,
    		clearData,
    		openChangeLog,
    		modalHeight
    	});

    	$$self.$inject_state = $$props => {
    		if ('version' in $$props) $$invalidate(0, version = $$props.version);
    		if ('isMobile' in $$props) $$invalidate(5, isMobile = $$props.isMobile);
    		if ('modalHeight' in $$props) modalHeight = $$props.modalHeight;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*isMobile*/ 32) {
    			modalHeight = isMobile ? '75vh' : '80vh';
    		}
    	};

    	return [
    		version,
    		contributors,
    		handleClearDataButtonClick,
    		handleTutorialButtonClick,
    		openChangeLog,
    		isMobile
    	];
    }

    class About extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1, create_fragment$1, safe_not_equal, { version: 0, isMobile: 5 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "About",
    			options,
    			id: create_fragment$1.name
    		});
    	}

    	get version() {
    		throw new Error("<About>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set version(value) {
    		throw new Error("<About>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isMobile() {
    		throw new Error("<About>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isMobile(value) {
    		throw new Error("<About>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\App.svelte generated by Svelte v3.41.0 */

    const { document: document_1, window: window_1 } = globals;
    const file = "src\\App.svelte";

    // (113:5) {:else}
    function create_else_block(ctx) {
    	let h2;

    	const block = {
    		c: function create() {
    			h2 = element("h2");
    			h2.textContent = "you shouldn't be able to get here";
    			add_location(h2, file, 113, 6, 3934);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h2, anchor);
    		},
    		p: noop$1,
    		i: noop$1,
    		o: noop$1,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block.name,
    		type: "else",
    		source: "(113:5) {:else}",
    		ctx
    	});

    	return block;
    }

    // (111:48) 
    function create_if_block_4(ctx) {
    	let about;
    	let current;

    	about = new About({
    			props: {
    				version: /*version*/ ctx[0],
    				isMobile: /*isMobile*/ ctx[1]
    			},
    			$$inline: true
    		});

    	about.$on("clearData", clearAppData);
    	about.$on("resetTutorial", /*resetTutorial*/ ctx[5]);

    	const block = {
    		c: function create() {
    			create_component(about.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(about, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const about_changes = {};
    			if (dirty & /*version*/ 1) about_changes.version = /*version*/ ctx[0];
    			if (dirty & /*isMobile*/ 2) about_changes.isMobile = /*isMobile*/ ctx[1];
    			about.$set(about_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(about.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(about.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(about, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4.name,
    		type: "if",
    		source: "(111:48) ",
    		ctx
    	});

    	return block;
    }

    // (109:52) 
    function create_if_block_3(ctx) {
    	let herolist;
    	let current;

    	herolist = new HeroList({
    			props: { isMobile: /*isMobile*/ ctx[1] },
    			$$inline: true
    		});

    	herolist.$on("saveData", /*saveAppData*/ ctx[4]);

    	const block = {
    		c: function create() {
    			create_component(herolist.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(herolist, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const herolist_changes = {};
    			if (dirty & /*isMobile*/ 2) herolist_changes.isMobile = /*isMobile*/ ctx[1];
    			herolist.$set(herolist_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(herolist.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(herolist.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(herolist, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3.name,
    		type: "if",
    		source: "(109:52) ",
    		ctx
    	});

    	return block;
    }

    // (107:51) 
    function create_if_block_2(ctx) {
    	let myheroes;
    	let current;

    	myheroes = new MyHeroes({
    			props: { isMobile: /*isMobile*/ ctx[1] },
    			$$inline: true
    		});

    	myheroes.$on("saveData", /*saveAppData*/ ctx[4]);

    	const block = {
    		c: function create() {
    			create_component(myheroes.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(myheroes, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const myheroes_changes = {};
    			if (dirty & /*isMobile*/ 2) myheroes_changes.isMobile = /*isMobile*/ ctx[1];
    			myheroes.$set(myheroes_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(myheroes.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(myheroes.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(myheroes, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2.name,
    		type: "if",
    		source: "(107:51) ",
    		ctx
    	});

    	return block;
    }

    // (105:57) 
    function create_if_block_1(ctx) {
    	let recommendations;
    	let current;

    	recommendations = new Recommendations({
    			props: { isMobile: /*isMobile*/ ctx[1] },
    			$$inline: true
    		});

    	recommendations.$on("saveData", /*saveAppData*/ ctx[4]);

    	const block = {
    		c: function create() {
    			create_component(recommendations.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(recommendations, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const recommendations_changes = {};
    			if (dirty & /*isMobile*/ 2) recommendations_changes.isMobile = /*isMobile*/ ctx[1];
    			recommendations.$set(recommendations_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(recommendations.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(recommendations.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(recommendations, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1.name,
    		type: "if",
    		source: "(105:57) ",
    		ctx
    	});

    	return block;
    }

    // (103:5) {#if $AppData.activeView === 'comps'}
    function create_if_block(ctx) {
    	let comps;
    	let current;

    	comps = new Comps({
    			props: { isMobile: /*isMobile*/ ctx[1] },
    			$$inline: true
    		});

    	comps.$on("saveData", /*saveAppData*/ ctx[4]);

    	const block = {
    		c: function create() {
    			create_component(comps.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(comps, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const comps_changes = {};
    			if (dirty & /*isMobile*/ 2) comps_changes.isMobile = /*isMobile*/ ctx[1];
    			comps.$set(comps_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(comps.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(comps.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(comps, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block.name,
    		type: "if",
    		source: "(103:5) {#if $AppData.activeView === 'comps'}",
    		ctx
    	});

    	return block;
    }

    // (97:0) <Modal on:closed={handleModalClosed}>
    function create_default_slot(ctx) {
    	let div2;
    	let header;
    	let t;
    	let main;
    	let div1;
    	let div0;
    	let current_block_type_index;
    	let if_block;
    	let current;

    	header = new Header({
    			props: { menu: /*menuItems*/ ctx[3] },
    			$$inline: true
    		});

    	header.$on("saveData", /*saveAppData*/ ctx[4]);

    	const if_block_creators = [
    		create_if_block,
    		create_if_block_1,
    		create_if_block_2,
    		create_if_block_3,
    		create_if_block_4,
    		create_else_block
    	];

    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*$AppData*/ ctx[2].activeView === 'comps') return 0;
    		if (/*$AppData*/ ctx[2].activeView === 'recommendations') return 1;
    		if (/*$AppData*/ ctx[2].activeView === 'my heroes') return 2;
    		if (/*$AppData*/ ctx[2].activeView === 'hero list') return 3;
    		if (/*$AppData*/ ctx[2].activeView === 'about') return 4;
    		return 5;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			create_component(header.$$.fragment);
    			t = space();
    			main = element("main");
    			div1 = element("div");
    			div0 = element("div");
    			if_block.c();
    			attr_dev(div0, "id", "currentDisplay");
    			add_location(div0, file, 101, 4, 3296);
    			attr_dev(div1, "class", "MainWindow svelte-1n3crwh");
    			add_location(div1, file, 100, 3, 3266);
    			attr_dev(main, "class", "svelte-1n3crwh");
    			add_location(main, file, 99, 2, 3255);
    			attr_dev(div2, "class", "AppContainer svelte-1n3crwh");
    			add_location(div2, file, 97, 1, 3168);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			mount_component(header, div2, null);
    			append_dev(div2, t);
    			append_dev(div2, main);
    			append_dev(main, div1);
    			append_dev(div1, div0);
    			if_blocks[current_block_type_index].m(div0, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(div0, null);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(header.$$.fragment, local);
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(header.$$.fragment, local);
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			destroy_component(header);
    			if_blocks[current_block_type_index].d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot.name,
    		type: "slot",
    		source: "(97:0) <Modal on:closed={handleModalClosed}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment(ctx) {
    	let link0;
    	let link1;
    	let t;
    	let modal;
    	let current;
    	let mounted;
    	let dispose;

    	modal = new Modal({
    			props: {
    				$$slots: { default: [create_default_slot] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	modal.$on("closed", /*handleModalClosed*/ ctx[7]);

    	const block = {
    		c: function create() {
    			link0 = element("link");
    			link1 = element("link");
    			t = space();
    			create_component(modal.$$.fragment);
    			document_1.title = "AFKBuilder";
    			attr_dev(link0, "rel", "preconnect");
    			attr_dev(link0, "href", "https://fonts.gstatic.com");
    			add_location(link0, file, 90, 1, 2853);
    			attr_dev(link1, "href", "https://fonts.googleapis.com/css2?family=Roboto:wght@900&display=swap");
    			attr_dev(link1, "rel", "stylesheet");
    			add_location(link1, file, 91, 1, 2912);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			append_dev(document_1.head, link0);
    			append_dev(document_1.head, link1);
    			insert_dev(target, t, anchor);
    			mount_component(modal, target, anchor);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(window_1, "popstate", /*handlePopState*/ ctx[6], false, false, false),
    					listen_dev(window_1, "resize", lodash.debounce(/*handleWindowResize*/ ctx[8], 100), false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			const modal_changes = {};

    			if (dirty & /*$$scope, isMobile, $AppData, version*/ 519) {
    				modal_changes.$$scope = { dirty, ctx };
    			}

    			modal.$set(modal_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(modal.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(modal.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			detach_dev(link0);
    			detach_dev(link1);
    			if (detaching) detach_dev(t);
    			destroy_component(modal, detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const defaultView = 'comps';

    function clearAppData() {
    	window.localStorage.removeItem('appData');
    	location.reload();
    }

    function instance($$self, $$props, $$invalidate) {
    	let $AppData;
    	validate_store(AppData$1, 'AppData');
    	component_subscribe($$self, AppData$1, $$value => $$invalidate(2, $AppData = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('App', slots, []);
    	let { version = '' } = $$props;
    	const menuItems = ['Comps', 'Recommendations', 'My Heroes', 'Hero List', 'About'];
    	let isMobile = window.matchMedia("(max-width: 767px)").matches;

    	onMount(async () => {
    		const queryString = window.location.search;
    		const urlParams = new URLSearchParams(queryString);

    		if (urlParams.has('view')) {
    			const menuItemsLower = menuItems.map(e => e.toLowerCase());

    			if (menuItemsLower.includes(urlParams.get('view'))) {
    				set_store_value(AppData$1, $AppData.activeView = urlParams.get('view'), $AppData);
    			} else {
    				set_store_value(AppData$1, $AppData.activeView = defaultView, $AppData);
    			}
    		} else {
    			set_store_value(AppData$1, $AppData.activeView = defaultView, $AppData);
    		}

    		history.replaceState({ view: $AppData.activeView, modal: false }, $AppData.activeView, `?view=${$AppData.activeView}`);
    		saveAppData();
    		handleWindowResize();
    	});

    	function saveAppData() {
    		window.localStorage.setItem('appData', JSON.stringify($AppData));
    	}

    	function resetTutorial() {
    		set_store_value(AppData$1, $AppData.dismissImportWarn = false, $AppData);
    		set_store_value(AppData$1, $AppData.dismissMHSearchInfo = false, $AppData);
    		set_store_value(AppData$1, $AppData.dismissHLSearchInfo = false, $AppData);
    		saveAppData();
    		location.reload();
    	}

    	function handlePopState(event) {
    		const state = event.state;

    		if (state !== null) {
    			if ('view' in state) {
    				if (state.modal) {
    					history.replaceState({ view: $AppData.activeView, modal: false }, $AppData.activeView, `?view=${$AppData.activeView}`);
    				} else {
    					set_store_value(AppData$1, $AppData.activeView = state.view, $AppData);
    				}
    			} else {
    				set_store_value(AppData$1, $AppData.activeView = defaultView, $AppData);
    			}

    			saveAppData();
    		}
    	}

    	function handleModalClosed() {
    		const queryString = window.location.search;
    		const urlParams = new URLSearchParams(queryString);

    		if (urlParams.has('modal')) {
    			history.back();
    		}

    		history.replaceState({ view: $AppData.activeView, modal: false }, $AppData.activeView, `?view=${$AppData.activeView}`);
    	}

    	function handleWindowResize() {
    		// gymnastics to set height for mobile browsers
    		let vh = window.innerHeight * 0.01;

    		document.documentElement.style.setProperty('--vh', `${vh}px`);

    		// convienence variable to track if window is mobile width or desktop width
    		$$invalidate(1, isMobile = window.matchMedia("(max-width: 767px)").matches);
    	}

    	const writable_props = ['version'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<App> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('version' in $$props) $$invalidate(0, version = $$props.version);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		debounce: lodash.debounce,
    		AppData: AppData$1,
    		Modal,
    		Header,
    		Comps,
    		HeroList,
    		MyHeroes,
    		Recommendations,
    		About,
    		version,
    		menuItems,
    		defaultView,
    		isMobile,
    		saveAppData,
    		clearAppData,
    		resetTutorial,
    		handlePopState,
    		handleModalClosed,
    		handleWindowResize,
    		$AppData
    	});

    	$$self.$inject_state = $$props => {
    		if ('version' in $$props) $$invalidate(0, version = $$props.version);
    		if ('isMobile' in $$props) $$invalidate(1, isMobile = $$props.isMobile);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		version,
    		isMobile,
    		$AppData,
    		menuItems,
    		saveAppData,
    		resetTutorial,
    		handlePopState,
    		handleModalClosed,
    		handleWindowResize
    	];
    }

    class App extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance, create_fragment, safe_not_equal, { version: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "App",
    			options,
    			id: create_fragment.name
    		});
    	}

    	get version() {
    		throw new Error("<App>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set version(value) {
    		throw new Error("<App>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const app = new App({
    	target: document.body,
    	props: {version: '1.0.16'}
    });

    return app;

}());
//# sourceMappingURL=bundle.js.map
